#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1520;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4104 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4115 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _562 = _560.x;
    float _572 = dot(vec4(_562, _560.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _584 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _371.z) * 2.0) - ((((_562 - _572) * cbMtdParam._m0[24u].z) + _572) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4126 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _598 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_585 * ((_543.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _601 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_585 * ((_543.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _604 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_585 * ((_543.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _663 = _659.z;
    float _670 = ((_642.x - _661) * _443) + _661;
    float _671 = ((_642.y - _662) * _443) + _662;
    float _672 = ((_642.z - _663) * _443) + _663;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_684.x - _670) * _516) + _670;
    float _696 = ((_684.y - _671) * _516) + _671;
    float _697 = ((_684.z - _672) * _516) + _672;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _722 = ((_709.z - _697) * _585) + _697;
    float _725 = ((((_709.x - _695) * _585) + _695) * 2.0) + (-1.0);
    float _727 = ((((_709.y - _696) * _585) + _696) * 2.0) + (-1.0);
    float _728 = dot(vec2(_725, _727), vec2(_725, _727));
    float _4137 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _733 = sqrt(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))));
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _759 = (((_747.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _725;
    float _760 = (((_747.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _727;
    float _763 = fma(_733, _251, fma(_760, _258, _759 * _244));
    float _766 = fma(_733, _252, fma(_760, _259, _759 * _245));
    float _769 = fma(_733, _253, fma(_760, _260, _759 * _246));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _802 = _800.x;
    float _803 = 1.0 - _802;
    float _809 = (cbMtdParam._m0[19u].x + dot(vec4(_773 * _763, _773 * _766, _773 * _769, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_802 - _803) * cbMtdParam._m0[24u].w) + _803) * cbMtdParam._m0[21u].z);
    float _4148 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _812 = (-0.0) - cbMtdParam._m0[24u].x;
    float _814 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
    float _822 = _810 - ((_810 * TEXCOORD_8.x) * _815);
    float _823 = _810 - ((_810 * TEXCOORD_8.y) * _815);
    float _824 = _810 - ((_810 * TEXCOORD_8.z) * _815);
    float _831 = (_822 * ((_622.x * cbMtdParam._m0[18u].x) - _598)) + _598;
    float _832 = (_823 * ((_622.y * cbMtdParam._m0[18u].y) - _601)) + _601;
    float _833 = (_824 * ((_622.z * cbMtdParam._m0[18u].z) - _604)) + _604;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _876 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_847 - _848) * cbMtdParam._m0[24u].y) + _848) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4169 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _885 = ((((cbMtdParam._m0[10u].x - _831) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _877) + _831;
    float _886 = ((((cbMtdParam._m0[10u].y - _832) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _877) + _832;
    float _887 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _833)) * _877) + _833;
    float _891 = (cbMtdParam._m0[19u].w * (_747.z - _722)) + _722;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _912 = (_905.x * 2.0) + (-1.0);
    float _913 = (_905.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _4180 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _922 = ((_905.z - _891) * _822) + _891;
    float _925 = ((cbMtdParam._m0[23u].y - _922) * _877) + _922;
    vec4 _944 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _950 = (_944.x * 2.0) + (-1.0);
    float _951 = (_944.y * 2.0) + (-1.0);
    float _952 = dot(vec2(_950, _951), vec2(_950, _951));
    float _4191 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _967 = ((sqrt(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) - _733) * _824) + _733;
    float _970 = (((_912 - _759) * _822) + _759) + (cbMtdParam._m0[21u].x * _759);
    float _971 = (((_913 - _760) * _823) + _760) + (cbMtdParam._m0[21u].x * _760);
    float _982 = (((_950 - _970) + (_970 * cbMtdParam._m0[22u].z)) * _877) + _970;
    float _983 = (((_951 - _971) + (_971 * cbMtdParam._m0[22u].z)) * _877) + _971;
    float _984 = (_877 * (sqrt(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) - _967)) + _967;
    float _986 = cbMtdParam._m0[22u].x + _747.w;
    float _989 = fma(_984, _251, fma(_983, _258, _982 * _244));
    float _992 = fma(_984, _252, fma(_983, _259, _982 * _245));
    float _995 = fma(_984, _253, fma(_983, _260, _982 * _246));
    float _999 = inversesqrt(dot(vec3(_989, _992, _995), vec3(_989, _992, _995)));
    float _1000 = _999 * _989;
    float _1001 = _999 * _992;
    float _1002 = _999 * _995;
    float _4202 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _1003 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4224 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4235 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4246 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _1021 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1071 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1061);
    float _1072 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1061);
    float _1073 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1061);
    float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
    float _1078 = _1071 * _1077;
    float _1079 = _1072 * _1077;
    float _1080 = _1073 * _1077;
    float _1086 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1087 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1105 = fma(_1002, cbSceneParam._m0[5u].z, fma(_1001, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1000));
    float _1108 = fma(_1002, cbSceneParam._m0[6u].z, fma(_1001, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1000));
    float _1111 = fma(_1002, cbSceneParam._m0[7u].z, fma(_1001, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1000));
    uint _1125 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1131 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_1125].x;
    float _1132 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * cbInstanceData._m0[_1125].y;
    float _1133 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * cbInstanceData._m0[_1125].z;
    float _4257 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1134 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1135 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1136 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    vec4 _1145 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1086, cbSceneParam._m0[86u].y * _1087));
    float _1149 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * TEXCOORD_5.w) * _1145.x;
    float _1150 = dot(vec3(_1000, _1001, _1002), vec3(_1078, _1079, _1080));
    float _1153 = _1150 * 2.0;
    float _1157 = (_1153 * _1000) - _1078;
    float _1158 = (_1153 * _1001) - _1079;
    float _1159 = (_1153 * _1002) - _1080;
    float _1163 = abs(dot(vec3(_1078, _1079, _1080), vec3(_1000, _1001, _1002)));
    float _4290 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1165 = sqrt(_1003);
    float _1178 = exp2((_1165 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1165 * 3.0));
    float _1210 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1214 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1519;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1244 = fma(_1218, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1210));
        float _1248 = fma(_1218, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1210));
        float _1252 = fma(_1218, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1210));
        float _1277 = _1210 + _1000;
        float _1278 = _1214 + _1001;
        float _1279 = _1218 + _1002;
        float _1289 = fma(_1279, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1277)) - _1244;
        float _1290 = fma(_1279, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1277)) - _1248;
        float _1291 = fma(_1279, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1277)) - _1252;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1244 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1248 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[34u].z) + ((((((_1252 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1347 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1313.x + (-0.5));
        float _1349 = _1347 * (_1313.y + (-0.5));
        float _1350 = _1347 * (_1313.z + (-0.5));
        float _1357 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1320.x + (-0.5));
        float _1359 = _1357 * (_1320.y + (-0.5));
        float _1360 = _1357 * (_1320.z + (-0.5));
        float _1367 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1327.x + (-0.5));
        float _1369 = _1367 * (_1327.y + (-0.5));
        float _1370 = _1367 * (_1327.z + (-0.5));
        float _1377 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1334.x + (-0.5));
        float _1379 = _1377 * (_1334.y + (-0.5));
        float _1380 = _1377 * (_1334.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1401 = (dot(vec3(_1000, _1001, _1002), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1411 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4338 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1413 + 1.0))) + _1418) * _1381;
        float _1428 = _1349 * 0.5;
        float _1429 = _1359 * 0.5;
        float _1430 = _1369 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_1000, _1001, _1002), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4371 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1455 + 1.0))) + _1460) * _1382;
        float _1470 = _1350 * 0.5;
        float _1471 = _1360 * 0.5;
        float _1472 = _1370 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_1000, _1001, _1002), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4404 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1497 + 1.0))) + _1502) * _1383;
        _1519 = _1350;
        _1521 = _1349;
        _1522 = _1348;
        _1523 = _1360;
        _1524 = _1359;
        _1525 = _1358;
        _1526 = _1370;
        _1527 = _1369;
        _1528 = _1368;
        _1529 = _1383;
        _1530 = _1382;
        _1531 = _1381;
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1520;
        _1521 = _1520;
        _1522 = _1520;
        _1523 = _1520;
        _1524 = _1520;
        _1525 = _1520;
        _1526 = _1520;
        _1527 = _1520;
        _1528 = _1520;
        _1529 = _1520;
        _1530 = _1520;
        _1531 = _1520;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1218, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210));
        float _1561 = fma(_1218, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210));
        float _1565 = fma(_1218, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210));
        float _1588 = _1210 + _1000;
        float _1589 = _1214 + _1001;
        float _1590 = _1218 + _1002;
        float _1600 = fma(_1590, cbModelParam._m0[30u].z, fma(_1589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1588)) - _1557;
        float _1601 = fma(_1590, cbModelParam._m0[31u].z, fma(_1589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1588)) - _1561;
        float _1602 = fma(_1590, cbModelParam._m0[32u].z, fma(_1589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1588)) - _1565;
        float _1606 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
        float _1619 = ((_1606 * _1600) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1606 * _1601) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1606 * _1602) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_1000, _1001, _1002), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4467 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_1000, _1001, _1002), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4500 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1000, _1001, _1002), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4511 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4522 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4533 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1520;
        _1827 = _1520;
        _1828 = _1520;
        _1829 = _1520;
        _1830 = _1520;
        _1831 = _1520;
        _1832 = _1520;
        _1833 = _1520;
        _1834 = _1520;
        _1835 = _1520;
        _1836 = _1520;
        _1837 = _1520;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1532)) + _1532;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1533)) + _1533;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1534)) + _1534;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1894 = _1157 * 0.5;
    float _1895 = _1158 * 0.5;
    float _1896 = _1159 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1519, _1523, _1526, _1529));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1521, _1524, _1527, _1530));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1003);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1218, cbModelParam._m0[13u].z, fma(_1214, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1210)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1218, cbModelParam._m0[14u].z, fma(_1214, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1210)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1218, cbModelParam._m0[15u].z, fma(_1214, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1210)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1159, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157));
        float _2024 = fma(_1159, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157));
        float _2027 = fma(_1159, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2055 = frontier_phi_14_12_ladder;
        }
        float _2224;
        if (_2024 > 0.0)
        {
            _2224 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2224 = frontier_phi_23_19_ladder;
        }
        float _2519;
        if (_2027 > 0.0)
        {
            _2519 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2519 = frontier_phi_35_30_ladder;
        }
        float _2521 = isnan(_2224) ? _2055 : (isnan(_2055) ? _2224 : min(_2055, _2224));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2021) + _2010;
        float _2527 = (_2522 * _2024) + _2014;
        float _2528 = (_2522 * _2027) + _2018;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_13_35_ladder = _2673.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2673.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2673.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_13_35_ladder_2;
        _2045 = frontier_phi_13_35_ladder_1;
        _2047 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1157, _1158, _1159), _1963);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1003);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2105 = fma(_1218, cbModelParam._m0[21u].z, fma(_1214, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1210)) + cbModelParam._m0[21u].w;
        float _2109 = fma(_1218, cbModelParam._m0[22u].z, fma(_1214, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1210)) + cbModelParam._m0[22u].w;
        float _2113 = fma(_1218, cbModelParam._m0[23u].z, fma(_1214, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1210)) + cbModelParam._m0[23u].w;
        float _2116 = fma(_1159, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157));
        float _2119 = fma(_1159, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157));
        float _2122 = fma(_1159, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157));
        float _2229;
        if (_2116 > 0.0)
        {
            _2229 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2229 = frontier_phi_25_21_ladder;
        }
        float _2546;
        if (_2119 > 0.0)
        {
            _2546 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2546 = frontier_phi_37_32_ladder;
        }
        float _2873;
        if (_2122 > 0.0)
        {
            _2873 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2873 = frontier_phi_47_44_ladder;
        }
        float _2875 = isnan(_2546) ? _2229 : (isnan(_2229) ? _2546 : min(_2229, _2546));
        float _2876 = isnan(_2873) ? _2875 : (isnan(_2875) ? _2873 : min(_2875, _2873));
        float _2880 = (_2876 * _2116) + _2105;
        float _2881 = (_2876 * _2119) + _2109;
        float _2882 = (_2876 * _2122) + _2113;
        float _2883 = _2876 * 9.9999997473787516355514526367188e-05;
        float _2884 = (-1.0) - _2883;
        float _2886 = _2883 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2882 > _2886) || ((_2882 < _2884) || ((_2881 > _2886) || ((_2881 < _2884) || ((_2880 < _2884) || (_2880 > _2886))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2882, cbModelParam._m0[17u].z, fma(_2881, cbModelParam._m0[17u].y, _2880 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2882, cbModelParam._m0[18u].z, fma(_2881, cbModelParam._m0[18u].y, _2880 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2882, cbModelParam._m0[19u].z, fma(_2881, cbModelParam._m0[19u].y, _2880 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_22_47_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2141 = frontier_phi_22_47_ladder_2;
        _2143 = frontier_phi_22_47_ladder_1;
        _2145 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1157, _1158, _1159), _2052);
        _2141 = _2125.x * cbModelParam._m0[1u].z;
        _2143 = _2125.y * cbModelParam._m0[1u].z;
        _2145 = _2125.z * cbModelParam._m0[1u].z;
    }
    float _2157 = ((((1.0 - _1178) * ((_1165 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1178 * _1165)) * _1149;
    float _2158 = _2157 * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2159 = _2157 * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2160 = _2157 * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2163 = fma(_2160, cbSceneParam._m0[89u].z, fma(_2159, cbSceneParam._m0[89u].y, _2158 * cbSceneParam._m0[89u].x));
    float _2166 = fma(_2160, cbSceneParam._m0[90u].z, fma(_2159, cbSceneParam._m0[90u].y, _2158 * cbSceneParam._m0[90u].x));
    float _2169 = fma(_2160, cbSceneParam._m0[91u].z, fma(_2159, cbSceneParam._m0[91u].y, _2158 * cbSceneParam._m0[91u].x));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2216 = _2203 / _2215;
    float _2217 = _2207 / _2215;
    float _2218 = _2211 / _2215;
    float _2365;
    float _2366;
    float _2367;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2245 = ((uint(_2218 > cbSceneParam._m0[59u].y) + uint(_2218 > cbSceneParam._m0[59u].x)) + uint(_2218 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2246 = _2245 + 43u;
        uint _2254 = _2245 + 44u;
        uint _2262 = _2245 + 45u;
        uint _2270 = _2245 + 46u;
        float _2281 = fma(_2215, cbSceneParam._m0[_2246].w, fma(_2211, cbSceneParam._m0[_2246].z, fma(_2207, cbSceneParam._m0[_2246].y, _2203 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2215, cbSceneParam._m0[_2254].w, fma(_2211, cbSceneParam._m0[_2254].z, fma(_2207, cbSceneParam._m0[_2254].y, _2203 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2215, cbSceneParam._m0[_2270].w, fma(_2211, cbSceneParam._m0[_2270].z, fma(_2207, cbSceneParam._m0[_2270].y, _2203 * cbSceneParam._m0[_2270].x)));
        float _2298 = cbSceneParam._m0[33u].z * _2293;
        float _2300 = cbSceneParam._m0[33u].w * _2293;
        float _2303 = fma(_2215, cbSceneParam._m0[_2262].w, fma(_2211, cbSceneParam._m0[_2262].z, fma(_2207, cbSceneParam._m0[_2262].y, _2203 * cbSceneParam._m0[_2262].x))) / _2293;
        float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
        float _4659 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2358 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 + _2281) / _2293, (_2300 + _2285) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 + _2281) / _2293, (_2285 - _2298) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2298) / _2293, (_2285 - _2300) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2300) / _2293, (_2298 + _2285) / _2293), _2303), 0.0)).x), vec4(0.25)));
        _2365 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
        _2366 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
        _2367 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2365 = 1.0;
        _2366 = 1.0;
        _2367 = 1.0;
    }
    float _2431;
    float _2433;
    float _2435;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2419 = fma(_2215, cbSceneParam._m0[63u].w, fma(_2211, cbSceneParam._m0[63u].z, fma(_2207, cbSceneParam._m0[63u].y, _2203 * cbSceneParam._m0[63u].x)));
        float _2420 = fma(_2215, cbSceneParam._m0[60u].w, fma(_2211, cbSceneParam._m0[60u].z, fma(_2207, cbSceneParam._m0[60u].y, _2203 * cbSceneParam._m0[60u].x))) / _2419;
        float _2421 = fma(_2215, cbSceneParam._m0[61u].w, fma(_2211, cbSceneParam._m0[61u].z, fma(_2207, cbSceneParam._m0[61u].y, _2203 * cbSceneParam._m0[61u].x))) / _2419;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2420 >= cbSceneParam._m0[64u].x) && (_2421 >= cbSceneParam._m0[64u].y)) && (_2420 <= cbSceneParam._m0[64u].z)) && (_2421 <= cbSceneParam._m0[64u].w))
        {
            float _2559 = fma(_2215, cbSceneParam._m0[62u].w, fma(_2211, cbSceneParam._m0[62u].z, fma(_2207, cbSceneParam._m0[62u].y, _2203 * cbSceneParam._m0[62u].x))) / _2419;
            float _2563 = isnan(cbSceneParam._m0[41u].w) ? _2559 : (isnan(_2559) ? cbSceneParam._m0[41u].w : max(_2559, cbSceneParam._m0[41u].w));
            float _2606 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
            float _4675 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
            float _2613 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2420, cbSceneParam._m0[33u].w + _2421), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2420, _2421 - cbSceneParam._m0[33u].z), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].z, _2421 - cbSceneParam._m0[33u].w), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2421), _2563), 0.0)).x), vec4(0.25)));
            float _2617 = 1.0 - (_2613 * cbSceneParam._m0[34u].x);
            float _2618 = 1.0 - (_2613 * cbSceneParam._m0[34u].y);
            float _2619 = 1.0 - (_2613 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2619) ? _2367 : (isnan(_2367) ? _2619 : min(_2367, _2619));
            frontier_phi_34_33_ladder_1 = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
            frontier_phi_34_33_ladder_2 = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
        }
        else
        {
            frontier_phi_34_33_ladder = _2367;
            frontier_phi_34_33_ladder_1 = _2366;
            frontier_phi_34_33_ladder_2 = _2365;
        }
        _2431 = frontier_phi_34_33_ladder_2;
        _2433 = frontier_phi_34_33_ladder_1;
        _2435 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2431 = _2365;
        _2433 = _2366;
        _2435 = _2367;
    }
    uvec4 _2440 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2442 = _2440.x * 14u;
    uint _2443 = _2442 + 13u;
    float _2450 = _1149 + (-1.0);
    float _2455 = (cbLight._m0[_2443].x * _2450) + 1.0;
    float _2456 = (cbLight._m0[_2443].y * _2450) + 1.0;
    float _2457 = (cbLight._m0[_2443].z * _2450) + 1.0;
    float _2458 = (cbLight._m0[_2443].w * _2450) + 1.0;
    uint _2459 = _2442 + 5u;
    float _2465 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
    uint _2469 = _2442 + 4u;
    float _2478 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2482 = _2442 | 1u;
    float _2493 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_1000, _1001, _1002));
    float _2496 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_1000, _1001, _1002));
    float _4711 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _4722 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2501 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2503 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.3183098733425140380859375;
    float _2510 = ((cbLight._m0[_2459].x * _2465) * _2503) + (((cbLight._m0[_2469].x * _2431) * _2478) * _2501);
    float _2511 = ((_2465 * cbLight._m0[_2459].y) * _2503) + (((cbLight._m0[_2469].y * _2433) * _2478) * _2501);
    float _2512 = ((_2465 * cbLight._m0[_2459].z) * _2503) + (((cbLight._m0[_2469].z * _2435) * _2478) * _2501);
    uvec4 _2516 = floatBitsToUint(cbLight._m0[_2442 + 12u]);
    bool _2518 = _2516.x == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2518)
    {
        _2620 = _2510;
        _2622 = _2511;
        _2624 = _2512;
    }
    else
    {
        uint _2628 = _2442 + 6u;
        float _2644 = (dot(vec3(cbLight._m0[_2442 + 2u].xyz), vec3(_1000, _1001, _1002)) * 0.5) + 0.5;
        float _2645 = _2644 * _2644;
        float _4733 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2646 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2647 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2620 = (((cbLight._m0[_2628].x * 0.3183098733425140380859375) * _2646) * _2647) + _2510;
        _2622 = (((cbLight._m0[_2628].y * 0.3183098733425140380859375) * _2646) * _2647) + _2511;
        _2624 = (((cbLight._m0[_2628].z * 0.3183098733425140380859375) * _2646) * _2647) + _2512;
    }
    bool _2627 = _2516.y == 0u;
    float _2682;
    float _2684;
    float _2686;
    if (_2627)
    {
        _2682 = _2620;
        _2684 = _2622;
        _2686 = _2624;
    }
    else
    {
        uint _2844 = _2442 + 7u;
        float _2860 = (dot(vec3(cbLight._m0[_2442 + 3u].xyz), vec3(_1000, _1001, _1002)) * 0.5) + 0.5;
        float _2861 = _2860 * _2860;
        float _4749 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2862 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2863 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2682 = (((cbLight._m0[_2844].x * 0.3183098733425140380859375) * _2862) * _2863) + _2620;
        _2684 = (((cbLight._m0[_2844].y * 0.3183098733425140380859375) * _2862) * _2863) + _2622;
        _2686 = (((cbLight._m0[_2844].z * 0.3183098733425140380859375) * _2862) * _2863) + _2624;
    }
    uint _2689 = _2442 + 8u;
    float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _1003) * 0.949999988079071044921875);
    float _2703 = _2702 * _2702;
    float _2704 = cbLight._m0[_2442].x + _1078;
    float _2705 = cbLight._m0[_2442].y + _1079;
    float _2706 = cbLight._m0[_2442].z + _1080;
    float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
    float _2711 = _2710 * _2704;
    float _2712 = _2710 * _2705;
    float _2713 = _2710 * _2706;
    float _2714 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2442].xyz));
    float _4765 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _4776 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2718 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2719 = dot(vec3(_1000, _1001, _1002), vec3(_2711, _2712, _2713));
    float _4787 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2723 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2711, _2712, _2713));
    float _4798 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2727 = _2703 * _2703;
    float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
    float _2742 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2743 = 1.0 - _2703;
    float _2754 = (0.5 / (((_2718 * ((_2717 * _2743) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2743) + _2703) * _2717))) * _2717;
    float _4809 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
    uint _2770 = _2442 + 9u;
    float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _1003) * 0.949999988079071044921875);
    float _2782 = _2781 * _2781;
    float _2783 = cbLight._m0[_2482].x + _1078;
    float _2784 = cbLight._m0[_2482].y + _1079;
    float _2785 = cbLight._m0[_2482].z + _1080;
    float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
    float _2790 = _2789 * _2783;
    float _2791 = _2789 * _2784;
    float _2792 = _2789 * _2785;
    float _2793 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2482].xyz));
    float _4820 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2796 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2797 = dot(vec3(_1000, _1001, _1002), vec3(_2790, _2791, _2792));
    float _4831 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2801 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2790, _2791, _2792));
    float _4842 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2805 = _2782 * _2782;
    float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
    float _2818 = (exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2819 = 1.0 - _2782;
    float _2829 = (0.5 / (((_2718 * ((_2796 * _2819) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2819) + _2782) * _2796))) * _2796;
    float _4853 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2831 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
    float _2841 = (((_2818 * cbLight._m0[_2770].x) * _2831) * _2465) + ((((cbLight._m0[_2689].x * _2431) * _2742) * _2756) * _2478);
    float _2842 = (((_2818 * cbLight._m0[_2770].y) * _2831) * _2465) + ((((cbLight._m0[_2689].y * _2433) * _2742) * _2756) * _2478);
    float _2843 = (((_2818 * cbLight._m0[_2770].z) * _2831) * _2465) + ((((cbLight._m0[_2689].z * _2435) * _2742) * _2756) * _2478);
    float _2899;
    float _2901;
    float _2903;
    if (_2518)
    {
        _2899 = _2841;
        _2901 = _2842;
        _2903 = _2843;
    }
    else
    {
        uint _2905 = _2442 + 2u;
        uint _2909 = _2442 + 10u;
        float _2923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2905].w)) * _1003) * 0.949999988079071044921875);
        float _2924 = _2923 * _2923;
        float _2925 = cbLight._m0[_2905].x + _1078;
        float _2926 = cbLight._m0[_2905].y + _1079;
        float _2927 = cbLight._m0[_2905].z + _1080;
        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
        float _2932 = _2931 * _2925;
        float _2933 = _2931 * _2926;
        float _2934 = _2931 * _2927;
        float _2935 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2905].xyz));
        float _4864 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2939 = dot(vec3(_1000, _1001, _1002), vec3(_2932, _2933, _2934));
        float _4875 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2943 = dot(vec3(cbLight._m0[_2905].xyz), vec3(_2932, _2933, _2934));
        float _4886 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2947 = _2924 * _2924;
        float _2951 = ((_2942 * _2942) * (_2947 + (-1.0))) + 1.0;
        float _2960 = (exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2961 = 1.0 - _2924;
        float _2971 = (0.5 / (((_2718 * ((_2938 * _2961) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2961) + _2924) * _2938))) * _2938;
        float _4897 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2947 / ((_2951 * _2951) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2899 = (((_2960 * cbLight._m0[_2909].x) * _2973) * _2974) + _2841;
        _2901 = (((_2960 * cbLight._m0[_2909].y) * _2973) * _2974) + _2842;
        _2903 = (((_2960 * cbLight._m0[_2909].z) * _2973) * _2974) + _2843;
    }
    float _3005;
    float _3007;
    float _3009;
    if (_2627)
    {
        _3005 = _2899;
        _3007 = _2901;
        _3009 = _2903;
    }
    else
    {
        uint _3016 = _2442 + 3u;
        uint _3020 = _2442 + 11u;
        float _3034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3016].w)) * _1003) * 0.949999988079071044921875);
        float _3035 = _3034 * _3034;
        float _3036 = cbLight._m0[_3016].x + _1078;
        float _3037 = cbLight._m0[_3016].y + _1079;
        float _3038 = cbLight._m0[_3016].z + _1080;
        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
        float _3043 = _3042 * _3036;
        float _3044 = _3042 * _3037;
        float _3045 = _3042 * _3038;
        float _3046 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_3016].xyz));
        float _4913 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3049 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _3050 = dot(vec3(_1000, _1001, _1002), vec3(_3043, _3044, _3045));
        float _4924 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3053 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _3054 = dot(vec3(cbLight._m0[_3016].xyz), vec3(_3043, _3044, _3045));
        float _4935 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3058 = _3035 * _3035;
        float _3062 = ((_3053 * _3053) * (_3058 + (-1.0))) + 1.0;
        float _3071 = (exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3072 = 1.0 - _3035;
        float _3082 = (0.5 / (((_2718 * ((_3049 * _3072) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _3072) + _3035) * _3049))) * _3049;
        float _4946 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        float _3084 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_3058 / ((_3062 * _3062) * 3.141590118408203125));
        float _3085 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _3005 = (((_3071 * cbLight._m0[_3020].x) * _3084) * _3085) + _2899;
        _3007 = (((_3071 * cbLight._m0[_3020].y) * _3084) * _3085) + _2901;
        _3009 = (((_3071 * cbLight._m0[_3020].z) * _3084) * _3085) + _2903;
    }
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_2440.y == 0u)
    {
        uvec4 _3106 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3107 = _3106.x;
        uint _3118 = uint((float(_3106.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1087) / _3107))) + floor(float(uint(cbSceneParam._m0[85u].x * _1086) / _3107)));
        float _3128 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3129 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
        uint _3132 = uint(isnan(14.0) ? _3129 : (isnan(_3129) ? 14.0 : min(_3129, 14.0)));
        uvec4 _3137 = texelFetch(g_lightClusterGridBuffer, int(((_3132 << 2u) + (_3118 << 6u)) >> 2u));
        uint _3138 = _3137.x;
        uint _3139 = _3106.z;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        if (((((1u << ((_3139 >> 4u) & 15u)) + 4294967295u) & _3138) == 0u) || ((_3139 & 240u) == 0u))
        {
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
        }
        else
        {
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            uint _3368 = 0u;
            uint _3377;
            bool _3378;
            for (;;)
            {
                _3377 = texelFetch(g_lightClassification, int((((_3132 << 5u) + (_3118 << 9u)) + (_3368 << 2u)) >> 2u)).x;
                _3378 = _3377 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3378)
                {
                    frontier_phi_66_pred = _3367;
                    frontier_phi_66_pred_1 = _3366;
                    frontier_phi_66_pred_2 = _3365;
                    frontier_phi_66_pred_3 = _3364;
                    frontier_phi_66_pred_4 = _3363;
                    frontier_phi_66_pred_5 = _3362;
                }
                else
                {
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    uint _3492;
                    _3486 = _3362;
                    _3487 = _3363;
                    _3488 = _3364;
                    _3489 = _3365;
                    _3490 = _3366;
                    _3491 = _3367;
                    _3492 = _3377;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    for (;;)
                    {
                        uint _3496 = uint(findLSB(_3492)) + (_3368 << 5u);
                        uint _3493 = (_3492 + 4294967295u) & _3492;
                        uint _3498 = _3496 * 48u;
                        vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3518 = (_3496 * 48u) + 4u;
                        vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 3u)).x));
                        uint _3537 = (_3496 * 48u) + 8u;
                        vec3 _3548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x));
                        float _3552 = _3512.x - _2216;
                        float _3553 = _3512.y - _2217;
                        float _3554 = _3512.z - _2218;
                        float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                        float _3558 = inversesqrt(_3555);
                        float _3559 = _3558 * _3552;
                        float _3560 = _3558 * _3553;
                        float _3561 = _3558 * _3554;
                        float _3562 = dot(vec3(_1105, _1108, _1111), vec3(_3559, _3560, _3561));
                        float _3567 = 1.0 - (_3555 * _3512.w);
                        float _4972 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3568 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3569 = sqrt(_3555) * _3531.w;
                        float _3572 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3562) + _3573;
                        float _3579 = _3569 * _3569;
                        float _3583 = ((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3568) / ((_3579 * 0.699999988079071044921875) + 1.0);
                        float _3587 = (-0.0) - _2216;
                        float _3588 = (-0.0) - _2217;
                        float _3589 = (-0.0) - _2218;
                        float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                        float _3594 = _3593 * _3587;
                        float _3595 = _3593 * _3588;
                        float _3596 = _3593 * _3589;
                        float _3603 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                        float _3604 = 1.0 - _1165;
                        float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                        float _3612 = _3611 * _3611;
                        float _3613 = _3612 * _3612;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3616 = _3596 + _3561;
                        float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                        float _3624 = dot(vec3(_1105, _1108, _1111), vec3(_3594, _3595, _3596));
                        float _4988 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3628 = dot(vec3(_1105, _1108, _1111), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                        float _4999 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3631 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                        float _3636 = _3572 * _3612;
                        float _3637 = _3636 * _3636;
                        float _3640 = ((1.0 - _3637) * _3562) + _3637;
                        float _5010 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3641 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3642 = 1.0 - _3612;
                        float _3652 = (0.5 / (((_3641 * ((_3627 * _3642) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3612) * _3627))) * _3641;
                        float _5021 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3663 = (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) / ((_3635 * _3635) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125))) * _3568;
                        _3421 = (_3583 * _3531.x) + _3489;
                        _3422 = (_3583 * _3531.y) + _3490;
                        _3423 = (_3583 * _3531.z) + _3491;
                        _3418 = (_3663 * _3548.x) + _3486;
                        _3419 = (_3663 * _3548.y) + _3487;
                        _3420 = (_3663 * _3548.z) + _3488;
                        if (_3493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3486 = _3418;
                            _3487 = _3419;
                            _3488 = _3420;
                            _3489 = _3421;
                            _3490 = _3422;
                            _3491 = _3423;
                            _3492 = _3493;
                        }
                    }
                    frontier_phi_66_pred = _3423;
                    frontier_phi_66_pred_1 = _3422;
                    frontier_phi_66_pred_2 = _3421;
                    frontier_phi_66_pred_3 = _3420;
                    frontier_phi_66_pred_4 = _3419;
                    frontier_phi_66_pred_5 = _3418;
                }
                _3229 = frontier_phi_66_pred;
                _3227 = frontier_phi_66_pred_1;
                _3225 = frontier_phi_66_pred_2;
                _3223 = frontier_phi_66_pred_3;
                _3221 = frontier_phi_66_pred_4;
                _3219 = frontier_phi_66_pred_5;
                uint _3369 = _3368 + 1u;
                if (_3369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3362 = _3219;
                    _3363 = _3221;
                    _3364 = _3223;
                    _3365 = _3225;
                    _3366 = _3227;
                    _3367 = _3229;
                    _3368 = _3369;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
        }
        uvec4 _3232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3233 = _3232.z;
        uint _3235 = (_3233 >> 8u) & 15u;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        if (((4294967295u << _3235) & _3138) == 0u)
        {
            _3330 = _3218;
            _3332 = _3220;
            _3334 = _3222;
            _3336 = _3224;
            _3338 = _3226;
            _3340 = _3228;
        }
        else
        {
            float _3355 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _3356 = _3355 * _2216;
            float _3357 = _3355 * _2217;
            float _3358 = _3355 * _2218;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3235 < ((_3233 >> 12u) & 15u))
            {
                float _3331;
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3341;
                float _3469 = _3218;
                float _3470 = _3220;
                float _3471 = _3222;
                float _3472 = _3224;
                float _3473 = _3226;
                float _3474 = _3228;
                uint _3475 = _3235;
                uint _3484;
                bool _3485;
                for (;;)
                {
                    _3484 = texelFetch(g_lightClassification, int((((_3132 << 5u) + (_3118 << 9u)) + (_3475 << 2u)) >> 2u)).x;
                    _3485 = _3484 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3485)
                    {
                        frontier_phi_72_pred = _3474;
                        frontier_phi_72_pred_1 = _3473;
                        frontier_phi_72_pred_2 = _3472;
                        frontier_phi_72_pred_3 = _3471;
                        frontier_phi_72_pred_4 = _3470;
                        frontier_phi_72_pred_5 = _3469;
                    }
                    else
                    {
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3681 = _3469;
                        float _3682 = _3470;
                        float _3683 = _3471;
                        float _3684 = _3472;
                        float _3685 = _3473;
                        float _3686 = _3474;
                        uint _3687 = _3484;
                        uint _3688;
                        vec4 _3713;
                        float _3714;
                        vec4 _3729;
                        vec3 _3741;
                        vec4 _3756;
                        vec4 _3771;
                        float _3817;
                        bool _3818;
                        for (;;)
                        {
                            uint _3698 = ((_3475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3687));
                            _3688 = (_3687 + 4294967295u) & _3687;
                            uint _3700 = _3698 * 40u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3714 = _3713.w;
                            uint _3716 = (_3698 * 40u) + 4u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3731 = (_3698 * 40u) + 8u;
                            _3741 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x));
                            uint _3743 = (_3698 * 40u) + 16u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3698 * 40u) + 20u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3773 = (_3698 * 40u) + 24u;
                            vec4 _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3792 = (_3698 * 40u) + 28u;
                            vec4 _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            _3817 = fma(_2218, _3805.z, fma(_2217, _3805.y, _3805.x * _2216)) + _3805.w;
                            _3818 = !((fma(_2218, _3786.z, fma(_2217, _3786.y, _3786.x * _2216)) + _3786.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3818)
                            {
                                float _3845 = _3713.x - _2216;
                                float _3846 = _3713.y - _2217;
                                float _3847 = _3713.z - _2218;
                                float _3848 = dot(vec3(_3845, _3846, _3847), vec3(_3845, _3846, _3847));
                                float _3851 = inversesqrt(_3848);
                                float _3852 = _3851 * _3845;
                                float _3853 = _3851 * _3846;
                                float _3854 = _3851 * _3847;
                                float _3858 = 1.0 - (_3848 / (_3714 * _3714));
                                float _5032 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3863 = sqrt(_3848) * _3729.w;
                                float _3865 = 1.39999997615814208984375 / (_3863 + 1.39999997615814208984375);
                                float _3866 = _3865 * _3865;
                                float _3869 = ((1.0 - _3866) * dot(vec3(_3852, _3853, _3854), vec3(_1105, _1108, _1111))) + _3866;
                                float _3872 = _3863 * _3863;
                                float _3876 = (fma(_2218, _3756.z, fma(_2217, _3756.y, _3756.x * _2216)) + _3756.w) / _3817;
                                float _3877 = (fma(_2218, _3771.z, fma(_2217, _3771.y, _3771.x * _2216)) + _3771.w) / _3817;
                                float _3881 = 1.0 - dot(vec2(_3876, _3877), vec2(_3876, _3877));
                                float _5048 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3883 = _3882 * (((isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0))) * _3859) / ((_3872 * 0.699999988079071044921875) + 1.0));
                                float _3895 = exp2(log2(1.0 / ((_3872 * 3.5) + 5.0)) * 0.25);
                                float _3896 = 1.0 - _1165;
                                float _3903 = sqrt(1.0 - ((1.0 - (_3896 * _3896)) * (1.0 - (_3895 * _3895))));
                                float _3904 = _3903 * _3903;
                                float _3905 = _3904 * _3904;
                                float _3906 = _3852 - _3356;
                                float _3907 = _3853 - _3357;
                                float _3908 = _3854 - _3358;
                                float _3912 = inversesqrt(dot(vec3(_3906, _3907, _3908), vec3(_3906, _3907, _3908)));
                                float _3916 = dot(vec3(_1105, _1108, _1111), vec3((-0.0) - _3356, (-0.0) - _3357, (-0.0) - _3358));
                                float _5059 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3919 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3920 = dot(vec3(_1105, _1108, _1111), vec3(_3912 * _3906, _3912 * _3907, _3912 * _3908));
                                float _5070 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3927 = ((_3923 * _3923) * (_3905 + (-1.0))) + 1.0;
                                float _3928 = _3865 * _3904;
                                float _3929 = _3928 * _3928;
                                float _3935 = ((1.0 - _3929) * dot(vec3(_1105, _1108, _1111), vec3(_3852, _3853, _3854))) + _3929;
                                float _5081 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3937 = 1.0 - _3904;
                                float _3947 = (0.5 / (((_3936 * ((_3919 * _3937) + _3904)) + 9.9999999392252902907785028219223e-09) + (((_3936 * _3937) + _3904) * _3919))) * _3936;
                                float _5092 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3957 = (_3882 * _3859) * (((_3905 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3927 * _3927) * ((_3872 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3883 * _3729.y;
                                frontier_phi_78_pred_1 = _3883 * _3729.x;
                                frontier_phi_78_pred_2 = _3957 * _3741.z;
                                frontier_phi_78_pred_3 = _3957 * _3741.y;
                                frontier_phi_78_pred_4 = _3957 * _3741.x;
                                frontier_phi_78_pred_5 = _3883 * _3729.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3965 = frontier_phi_78_pred;
                            _3964 = frontier_phi_78_pred_1;
                            _3963 = frontier_phi_78_pred_2;
                            _3962 = frontier_phi_78_pred_3;
                            _3961 = frontier_phi_78_pred_4;
                            _3966 = frontier_phi_78_pred_5;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            _3670 = _3963 + _3683;
                            if (_3688 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3688;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3673;
                        frontier_phi_72_pred_1 = _3672;
                        frontier_phi_72_pred_2 = _3671;
                        frontier_phi_72_pred_3 = _3670;
                        frontier_phi_72_pred_4 = _3669;
                        frontier_phi_72_pred_5 = _3668;
                    }
                    _3341 = frontier_phi_72_pred;
                    _3339 = frontier_phi_72_pred_1;
                    _3337 = frontier_phi_72_pred_2;
                    _3335 = frontier_phi_72_pred_3;
                    _3333 = frontier_phi_72_pred_4;
                    _3331 = frontier_phi_72_pred_5;
                    uint _3476 = _3475 + 1u;
                    if (_3476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3469 = _3331;
                        _3470 = _3333;
                        _3471 = _3335;
                        _3472 = _3337;
                        _3473 = _3339;
                        _3474 = _3341;
                        _3475 = _3476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3341;
                frontier_phi_60_61_ladder_1 = _3339;
                frontier_phi_60_61_ladder_2 = _3335;
                frontier_phi_60_61_ladder_3 = _3333;
                frontier_phi_60_61_ladder_4 = _3331;
                frontier_phi_60_61_ladder_5 = _3337;
            }
            else
            {
                frontier_phi_60_61_ladder = _3228;
                frontier_phi_60_61_ladder_1 = _3226;
                frontier_phi_60_61_ladder_2 = _3222;
                frontier_phi_60_61_ladder_3 = _3220;
                frontier_phi_60_61_ladder_4 = _3218;
                frontier_phi_60_61_ladder_5 = _3224;
            }
            _3330 = frontier_phi_60_61_ladder_4;
            _3332 = frontier_phi_60_61_ladder_3;
            _3334 = frontier_phi_60_61_ladder_2;
            _3336 = frontier_phi_60_61_ladder_5;
            _3338 = frontier_phi_60_61_ladder_1;
            _3340 = frontier_phi_60_61_ladder;
        }
        float _3345 = isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0));
        _3151 = (_3345 * _3336) + _2682;
        _3153 = (_3345 * _3338) + _2684;
        _3155 = (_3345 * _3340) + _2686;
        _3157 = ((_3330 * 0.039999999105930328369140625) * _3345) + _3005;
        _3159 = ((_3332 * 0.039999999105930328369140625) * _3345) + _3007;
        _3161 = ((_3334 * 0.039999999105930328369140625) * _3345) + _3009;
    }
    else
    {
        _3151 = _2682;
        _3153 = _2684;
        _3155 = _2686;
        _3157 = _3005;
        _3159 = _3007;
        _3161 = _3009;
    }
    float _5108 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _5119 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _5130 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    uint _3181 = _263 + 6u;
    float _3189 = _1086 / cbSceneParam._m0[86u].x;
    float _3190 = _1087 / cbSceneParam._m0[86u].y;
    vec4 _3204 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3189, _3190, (log2((isnan(cbSceneParam._m0[77u].w) ? _1021 : (isnan(_1021) ? cbSceneParam._m0[77u].w : min(_1021, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3206 = _3204.x;
    float _3207 = _3204.y;
    float _3208 = _3204.z;
    float _3209 = _3204.w;
    float _3280;
    float _3282;
    float _3284;
    float _3286;
    if (_1021 > cbSceneParam._m0[78u].w)
    {
        float _3243 = isnan(_1021) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1021 : min(cbSceneParam._m0[80u].w, _1021));
        float _3244 = _3243 / _1021;
        float _3255 = _3244 * _1071;
        float _3256 = _1072 * _3244;
        float _3257 = (-0.0) - _3256;
        float _3258 = _3244 * _1073;
        float _3260 = (cbSceneParam._m0[77u].w * _3257) / _3243;
        float _3261 = _3260 + cbSceneParam._m0[79u].w;
        float _3262 = cbSceneParam._m0[79u].w - _3256;
        float _3268 = sqrt(((_3255 * _3255) + (_3256 * _3256)) + (_3258 * _3258));
        float _3271 = (1.0 - (cbSceneParam._m0[77u].w / _3243)) * _3268;
        float _3276 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3278 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3431;
        if (abs((_3257 - _3260) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3431 = ((((_3261 > 0.0) ? exp2(_3276 * _3261) : (2.0 - exp2(_3278 * _3261))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3271;
        }
        else
        {
            float _3391 = 1.0 / cbSceneParam._m0[80u].x;
            float _3392 = isnan(_3262) ? _3261 : (isnan(_3261) ? _3262 : max(_3261, _3262));
            float _3393 = isnan(_3262) ? _3261 : (isnan(_3261) ? _3262 : min(_3261, _3262));
            float _3402 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : min(_3392, 0.0));
            float _3403 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : min(_3393, 0.0));
            _3431 = ((abs(_3268 / _3257) * cbSceneParam._m0[80u].y) * ((((_3402 - _3403) * 2.0) - ((exp2(_3276 * (isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0)))) - exp2(_3276 * (isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))))) * _3391)) - ((exp2(_3278 * _3402) - exp2(_3278 * _3403)) * _3391))) + (_3271 * cbSceneParam._m0[80u].z);
        }
        vec4 _3433 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3189, _3190, 1.0), 0.0);
        float _3442 = exp2((_3431 * (-1.44269502162933349609375)) * (1.0 - _3433.w));
        float _3443 = log2(_3442);
        float _3459 = log2(_3209);
        _3280 = (exp2(_3459 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3443 * cbSceneParam._m0[78u].x)) * _3433.x) / cbSceneParam._m0[78u].x)) + _3206;
        _3282 = (exp2(_3459 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3443 * cbSceneParam._m0[78u].y)) * _3433.y) / cbSceneParam._m0[78u].y)) + _3207;
        _3284 = (exp2(_3459 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3443 * cbSceneParam._m0[78u].z)) * _3433.z) / cbSceneParam._m0[78u].z)) + _3208;
        _3286 = _3442 * _3209;
    }
    else
    {
        _3280 = _3206;
        _3282 = _3207;
        _3284 = _3208;
        _3286 = _3209;
    }
    float _3298 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3299 = _3298 == 3.0;
    float _3300 = log2(_3286);
    float _3307 = exp2(_3300 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3151 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1149))) + ((_3157 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1952)) * cbPerFrame._m0[3u].x));
    float _3308 = exp2(_3300 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3153 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1149))) + ((_3159 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1952)) * cbPerFrame._m0[3u].x));
    float _3309 = exp2(_3300 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_3155 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1149))) + ((_3161 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1952)) * cbPerFrame._m0[3u].x));
    float _3318 = (_3298 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3318 * (_3299 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3280)));
    SV_Target.y = _3318 * (_3299 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3282)));
    SV_Target.z = _3318 * (_3299 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3284)));
    SV_Target.w = cbInstanceData._m0[_3181].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3181].w;
}


