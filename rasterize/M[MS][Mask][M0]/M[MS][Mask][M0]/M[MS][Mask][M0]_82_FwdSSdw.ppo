#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1274;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3601 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _428 = (_421 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _429 = (_421 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _430 = (_421 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3612 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _507 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428);
    float _510 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429);
    float _513 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430);
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _580 = ((_552.x - _571) * _421) + _571;
    float _581 = ((_552.y - _572) * _421) + _572;
    float _582 = ((_552.z - _573) * _421) + _573;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _607 = ((_594.z - _582) * _494) + _582;
    float _610 = ((((_594.x - _580) * _494) + _580) * 2.0) + (-1.0);
    float _612 = ((((_594.y - _581) * _494) + _581) * 2.0) + (-1.0);
    float _613 = dot(vec2(_610, _612), vec2(_610, _612));
    float _3623 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _618 = sqrt(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _659 = _657.x;
    float _660 = 1.0 - _659;
    float _673 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_659 - _660) * cbMtdParam._m0[24u].w) + _660) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3634 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _681 = (_674 * ((_532.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _682 = (_674 * ((_532.y * cbMtdParam._m0[18u].y) - _510)) + _510;
    float _683 = (_674 * ((_532.z * cbMtdParam._m0[18u].z) - _513)) + _513;
    float _687 = (cbMtdParam._m0[19u].w * (_632.z - _607)) + _607;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _707 = (_700.x * 2.0) + (-1.0);
    float _708 = (_700.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3645 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _717 = (_674 * (_700.z - _687)) + _687;
    float _720 = (((_632.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _610;
    float _721 = (((_632.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _733 = (((_707 - _720) + (cbMtdParam._m0[21u].x * _720)) * _674) + _720;
    float _734 = (((_708 - _721) + (cbMtdParam._m0[21u].x * _721)) * _674) + _721;
    float _735 = (_674 * (sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) - _618)) + _618;
    float _739 = cbMtdParam._m0[22u].x + _632.w;
    float _742 = fma(_735, _229 * NORMAL.x, fma(_734, _236 * TANGENT.x, (_222 * _214) * _733));
    float _745 = fma(_735, _229 * NORMAL.y, fma(_734, _236 * TANGENT.y, (_222 * _215) * _733));
    float _748 = fma(_735, _229 * NORMAL.z, fma(_734, _236 * TANGENT.z, (_222 * _216) * _733));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3656 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _756 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3678 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3689 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3700 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _774 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _825 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _815);
    float _826 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _815);
    float _827 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _815);
    float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
    float _832 = _825 * _831;
    float _833 = _826 * _831;
    float _834 = _827 * _831;
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _859 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _862 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _865 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _879 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_879].z;
    float _3711 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _903 = ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * TEXCOORD_5.w) * _899.x;
    float _904 = dot(vec3(_753, _754, _755), vec3(_832, _833, _834));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _753) - _832;
    float _912 = (_907 * _754) - _833;
    float _913 = (_907 * _755) - _834;
    float _917 = abs(dot(vec3(_832, _833, _834), vec3(_753, _754, _755)));
    float _3744 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_756);
    float _932 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1002 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1006 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1031 = _964 + _753;
        float _1032 = _968 + _754;
        float _1033 = _972 + _755;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _998;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1002;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1006;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_753, _754, _755), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3792 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_753, _754, _755), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3825 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_753, _754, _755), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3858 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1316 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1320 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1343 = _964 + _753;
        float _1344 = _968 + _754;
        float _1345 = _972 + _755;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_753, _754, _755), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3921 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_753, _754, _755), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3954 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_753, _754, _755), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _3987 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1274;
        _1582 = _1274;
        _1583 = _1274;
        _1584 = _1274;
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1286)) + _1286;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1287)) + _1287;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1288)) + _1288;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _911 * 0.5;
    float _1650 = _912 * 0.5;
    float _1651 = _913 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1779 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1782 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1810 = frontier_phi_14_12_ladder;
        }
        float _2031;
        if (_1779 > 0.0)
        {
            _2031 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2031 = frontier_phi_23_19_ladder;
        }
        float _2277;
        if (_1782 > 0.0)
        {
            _2277 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2277 = frontier_phi_35_30_ladder;
        }
        float _2279 = isnan(_2031) ? _1810 : (isnan(_1810) ? _2031 : min(_1810, _2031));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1776) + _1765;
        float _2285 = (_2280 * _1779) + _1769;
        float _2286 = (_2280 * _1782) + _1773;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_13_35_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_13_35_ladder_2;
        _1800 = frontier_phi_13_35_ladder_1;
        _1802 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1874 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1877 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _2036;
        if (_1871 > 0.0)
        {
            _2036 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2036 = frontier_phi_25_21_ladder;
        }
        float _2304;
        if (_1874 > 0.0)
        {
            _2304 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2304 = frontier_phi_37_32_ladder;
        }
        float _2509;
        if (_1877 > 0.0)
        {
            _2509 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2509 = frontier_phi_46_43_ladder;
        }
        float _2511 = isnan(_2304) ? _2036 : (isnan(_2036) ? _2304 : min(_2036, _2304));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1871) + _1860;
        float _2517 = (_2512 * _1874) + _1864;
        float _2518 = (_2512 * _1877) + _1868;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_22_46_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_22_46_ladder_2;
        _1898 = frontier_phi_22_46_ladder_1;
        _1900 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1807);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1912 = ((((1.0 - _932) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_932 * _919)) * _903;
    float _1913 = _1912 * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1914 = _1912 * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1915 = _1912 * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1918 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    vec4 _1932 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_840, _841));
    float _1934 = _1932.w;
    float _1946 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1934);
    float _1947 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1934);
    float _1948 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1934);
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1962 = _903 + (-1.0);
    float _1967 = (cbLight._m0[_1955].x * _1962) + 1.0;
    float _1968 = (cbLight._m0[_1955].y * _1962) + 1.0;
    float _1969 = (cbLight._m0[_1955].z * _1962) + 1.0;
    float _1970 = (cbLight._m0[_1955].w * _1962) + 1.0;
    uint _1971 = _1954 + 5u;
    float _1977 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1981 = _1954 + 4u;
    float _1990 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1994 = _1954 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_753, _754, _755));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_753, _754, _755));
    float _4123 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4134 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1971].x * _1977) * _2015) + (((cbLight._m0[_1981].x * _1946) * _1990) * _2013);
    float _2023 = ((_1977 * cbLight._m0[_1971].y) * _2015) + (((cbLight._m0[_1981].y * _1947) * _1990) * _2013);
    float _2024 = ((_1977 * cbLight._m0[_1971].z) * _2015) + (((cbLight._m0[_1981].z * _1948) * _1990) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1954 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2030)
    {
        _2041 = _2022;
        _2043 = _2023;
        _2045 = _2024;
    }
    else
    {
        uint _2049 = _1954 + 6u;
        float _2065 = (dot(vec3(cbLight._m0[_1954 + 2u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4145 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2068 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2041 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _2022;
        _2043 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _2023;
        _2045 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _2024;
    }
    bool _2048 = _2028.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2048)
    {
        _2086 = _2041;
        _2088 = _2043;
        _2090 = _2045;
    }
    else
    {
        uint _2248 = _1954 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1954 + 3u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4161 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2267 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2086 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2041;
        _2088 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2043;
        _2090 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2045;
    }
    uint _2093 = _1954 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _756) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1954].x + _832;
    float _2109 = cbLight._m0[_1954].y + _833;
    float _2110 = cbLight._m0[_1954].z + _834;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1954].xyz));
    float _4177 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2122 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2123 = dot(vec3(_753, _754, _755), vec3(_2115, _2116, _2117));
    float _4199 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2115, _2116, _2117));
    float _4210 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2122 * ((_2121 * _2147) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2147) + _2107) * _2121))) * _2121;
    float _4221 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2174 = _1954 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _756) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_1994].x + _832;
    float _2188 = cbLight._m0[_1994].y + _833;
    float _2189 = cbLight._m0[_1994].z + _834;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1994].xyz));
    float _4232 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2201 = dot(vec3(_753, _754, _755), vec3(_2194, _2195, _2196));
    float _4243 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2194, _2195, _2196));
    float _4254 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2223 = 1.0 - _2186;
    float _2233 = (0.5 / (((_2122 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2223) + _2186) * _2200))) * _2200;
    float _4265 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2245 = (((_2222 * cbLight._m0[_2174].x) * _2235) * _1977) + ((((cbLight._m0[_2093].x * _1946) * _2146) * _2160) * _1990);
    float _2246 = (((_2222 * cbLight._m0[_2174].y) * _2235) * _1977) + ((((cbLight._m0[_2093].y * _1947) * _2146) * _2160) * _1990);
    float _2247 = (((_2222 * cbLight._m0[_2174].z) * _2235) * _1977) + ((((cbLight._m0[_2093].z * _1948) * _2146) * _2160) * _1990);
    float _2309;
    float _2311;
    float _2313;
    if (_2030)
    {
        _2309 = _2245;
        _2311 = _2246;
        _2313 = _2247;
    }
    else
    {
        uint _2315 = _1954 + 2u;
        uint _2319 = _1954 + 10u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _756) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _832;
        float _2336 = cbLight._m0[_2315].y + _833;
        float _2337 = cbLight._m0[_2315].z + _834;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2315].xyz));
        float _4276 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2349 = dot(vec3(_753, _754, _755), vec3(_2342, _2343, _2344));
        float _4287 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4298 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2371 = 1.0 - _2334;
        float _2381 = (0.5 / (((_2122 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2371) + _2334) * _2348))) * _2348;
        float _4309 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2309 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2384) + _2245;
        _2311 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2384) + _2246;
        _2313 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2384) + _2247;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2048)
    {
        _2419 = _2309;
        _2421 = _2311;
        _2423 = _2313;
    }
    else
    {
        uint _2430 = _1954 + 3u;
        uint _2434 = _1954 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _756) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _832;
        float _2451 = cbLight._m0[_2430].y + _833;
        float _2452 = cbLight._m0[_2430].z + _834;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2430].xyz));
        float _4325 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2464 = dot(vec3(_753, _754, _755), vec3(_2457, _2458, _2459));
        float _4336 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4347 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2486 = 1.0 - _2449;
        float _2496 = (0.5 / (((_2122 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2486) + _2449) * _2463))) * _2463;
        float _4358 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2419 = (((_2485 * cbLight._m0[_2434].x) * _2498) * _2499) + _2309;
        _2421 = (((_2485 * cbLight._m0[_2434].y) * _2498) * _2499) + _2311;
        _2423 = (((_2485 * cbLight._m0[_2434].z) * _2498) * _2499) + _2313;
    }
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_1952.y == 0u)
    {
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2574;
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2574;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2574;
        uvec4 _2589 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2590 = _2589.x;
        uint _2601 = uint((float(_2589.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2590))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2590)));
        float _2611 = (log2(_2577 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2612 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        uint _2615 = uint(isnan(14.0) ? _2612 : (isnan(_2612) ? 14.0 : min(_2612, 14.0)));
        uvec4 _2620 = texelFetch(g_lightClusterGridBuffer, int(((_2615 << 2u) + (_2601 << 6u)) >> 2u));
        uint _2621 = _2620.x;
        uint _2622 = _2589.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2622 >> 4u) & 15u)) + 4294967295u) & _2621) == 0u) || ((_2622 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2883)
                {
                    frontier_phi_61_pred = _2867;
                    frontier_phi_61_pred_1 = _2872;
                    frontier_phi_61_pred_2 = _2871;
                    frontier_phi_61_pred_3 = _2870;
                    frontier_phi_61_pred_4 = _2869;
                    frontier_phi_61_pred_5 = _2868;
                }
                else
                {
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    uint _2997;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2882;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3001 = uint(findLSB(_2997)) + (_2873 << 5u);
                        uint _2998 = (_2997 + 4294967295u) & _2997;
                        uint _3003 = _3001 * 48u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3023 = (_3001 * 48u) + 4u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3042 = (_3001 * 48u) + 8u;
                        vec3 _3053 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x));
                        float _3057 = _3017.x - _2575;
                        float _3058 = _3017.y - _2576;
                        float _3059 = _3017.z - _2577;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_859, _862, _865), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _3017.w);
                        float _4384 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3074 = sqrt(_3060) * _3036.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3067) + _3078;
                        float _3084 = _3074 * _3074;
                        float _3088 = ((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3073) / ((_3084 * 0.699999988079071044921875) + 1.0);
                        float _3092 = (-0.0) - _2575;
                        float _3093 = (-0.0) - _2576;
                        float _3094 = (-0.0) - _2577;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3109 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                        float _3110 = 1.0 - _919;
                        float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                        float _3118 = _3117 * _3117;
                        float _3119 = _3118 * _3118;
                        float _3120 = _3099 + _3064;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3130 = dot(vec3(_859, _862, _865), vec3(_3099, _3100, _3101));
                        float _4400 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3134 = dot(vec3(_859, _862, _865), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                        float _4411 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                        float _3142 = _3077 * _3118;
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3067) + _3143;
                        float _4422 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3148 = 1.0 - _3118;
                        float _3158 = (0.5 / (((_3147 * ((_3133 * _3148) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3118) * _3133))) * _3147;
                        float _4433 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3169 = (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3141 * _3141) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2926 = (_3088 * _3036.x) + _2994;
                        _2927 = (_3088 * _3036.y) + _2995;
                        _2928 = (_3088 * _3036.z) + _2996;
                        _2923 = (_3169 * _3053.x) + _2991;
                        _2924 = (_3169 * _3053.y) + _2992;
                        _2925 = (_3169 * _3053.z) + _2993;
                        if (_2998 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2998;
                        }
                    }
                    frontier_phi_61_pred = _2923;
                    frontier_phi_61_pred_1 = _2928;
                    frontier_phi_61_pred_2 = _2927;
                    frontier_phi_61_pred_3 = _2926;
                    frontier_phi_61_pred_4 = _2925;
                    frontier_phi_61_pred_5 = _2924;
                }
                _2723 = frontier_phi_61_pred;
                _2733 = frontier_phi_61_pred_1;
                _2731 = frontier_phi_61_pred_2;
                _2729 = frontier_phi_61_pred_3;
                _2727 = frontier_phi_61_pred_4;
                _2725 = frontier_phi_61_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2723;
                    _2868 = _2725;
                    _2869 = _2727;
                    _2870 = _2729;
                    _2871 = _2731;
                    _2872 = _2733;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2739) & _2621) == 0u)
        {
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
            float _2861 = _2860 * _2575;
            float _2862 = _2860 * _2576;
            float _2863 = _2860 * _2577;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2974 = _2722;
                float _2975 = _2724;
                float _2976 = _2726;
                float _2977 = _2728;
                float _2978 = _2730;
                float _2979 = _2732;
                uint _2980 = _2739;
                uint _2989;
                bool _2990;
                for (;;)
                {
                    _2989 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                    _2990 = _2989 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2990)
                    {
                        frontier_phi_67_pred = _2977;
                        frontier_phi_67_pred_1 = _2978;
                        frontier_phi_67_pred_2 = _2979;
                        frontier_phi_67_pred_3 = _2976;
                        frontier_phi_67_pred_4 = _2975;
                        frontier_phi_67_pred_5 = _2974;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        uint _3193 = _2989;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3262;
                        vec4 _3277;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3204 = ((_2980 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3249 = (_3204 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3204 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3204 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3204 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_2577, _3311.z, fma(_2576, _3311.y, _3311.x * _2575)) + _3311.w;
                            _3324 = !((fma(_2577, _3292.z, fma(_2576, _3292.y, _3292.x * _2575)) + _3292.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3219.x - _2575;
                                float _3352 = _3219.y - _2576;
                                float _3353 = _3219.z - _2577;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3220 * _3220));
                                float _4444 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3369 = sqrt(_3354) * _3235.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_859, _862, _865))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_2577, _3262.z, fma(_2576, _3262.y, _3262.x * _2575)) + _3262.w) / _3323;
                                float _3383 = (fma(_2577, _3277.z, fma(_2576, _3277.y, _3277.x * _2575)) + _3277.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4460 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _919;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2861;
                                float _3413 = _3359 - _2862;
                                float _3414 = _3360 - _2863;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_859, _862, _865), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4471 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3426 = dot(vec3(_859, _862, _865), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4482 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_859, _862, _865), vec3(_3358, _3359, _3360))) + _3435;
                                float _4493 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4504 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3463 * _3247.x;
                                frontier_phi_73_pred_1 = _3463 * _3247.y;
                                frontier_phi_73_pred_2 = _3389 * _3235.z;
                                frontier_phi_73_pred_3 = _3389 * _3235.y;
                                frontier_phi_73_pred_4 = _3389 * _3235.x;
                                frontier_phi_73_pred_5 = _3463 * _3247.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3467 = frontier_phi_73_pred;
                            _3468 = frontier_phi_73_pred_1;
                            _3472 = frontier_phi_73_pred_2;
                            _3471 = frontier_phi_73_pred_3;
                            _3470 = frontier_phi_73_pred_4;
                            _3469 = frontier_phi_73_pred_5;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            _3179 = _3472 + _3192;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3177;
                        frontier_phi_67_pred_1 = _3178;
                        frontier_phi_67_pred_2 = _3179;
                        frontier_phi_67_pred_3 = _3176;
                        frontier_phi_67_pred_4 = _3175;
                        frontier_phi_67_pred_5 = _3174;
                    }
                    _2842 = frontier_phi_67_pred;
                    _2844 = frontier_phi_67_pred_1;
                    _2846 = frontier_phi_67_pred_2;
                    _2840 = frontier_phi_67_pred_3;
                    _2838 = frontier_phi_67_pred_4;
                    _2836 = frontier_phi_67_pred_5;
                    uint _2981 = _2980 + 1u;
                    if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2974 = _2836;
                        _2975 = _2838;
                        _2976 = _2840;
                        _2977 = _2842;
                        _2978 = _2844;
                        _2979 = _2846;
                        _2980 = _2981;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2844;
                frontier_phi_55_56_ladder_1 = _2846;
                frontier_phi_55_56_ladder_2 = _2842;
                frontier_phi_55_56_ladder_3 = _2840;
                frontier_phi_55_56_ladder_4 = _2838;
                frontier_phi_55_56_ladder_5 = _2836;
            }
            else
            {
                frontier_phi_55_56_ladder = _2730;
                frontier_phi_55_56_ladder_1 = _2732;
                frontier_phi_55_56_ladder_2 = _2728;
                frontier_phi_55_56_ladder_3 = _2726;
                frontier_phi_55_56_ladder_4 = _2724;
                frontier_phi_55_56_ladder_5 = _2722;
            }
            _2835 = frontier_phi_55_56_ladder_5;
            _2837 = frontier_phi_55_56_ladder_4;
            _2839 = frontier_phi_55_56_ladder_3;
            _2841 = frontier_phi_55_56_ladder_2;
            _2843 = frontier_phi_55_56_ladder;
            _2845 = frontier_phi_55_56_ladder_1;
        }
        float _2850 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2634 = (_2850 * _2841) + _2086;
        _2636 = (_2850 * _2843) + _2088;
        _2638 = (_2850 * _2845) + _2090;
        _2640 = ((_2835 * 0.039999999105930328369140625) * _2850) + _2419;
        _2642 = ((_2837 * 0.039999999105930328369140625) * _2850) + _2421;
        _2644 = ((_2839 * 0.039999999105930328369140625) * _2850) + _2423;
    }
    else
    {
        _2634 = _2086;
        _2636 = _2088;
        _2638 = _2090;
        _2640 = _2419;
        _2642 = _2421;
        _2644 = _2423;
    }
    float _4520 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4531 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4542 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    uint _2664 = _242 + 6u;
    float _2672 = _840 / cbSceneParam._m0[86u].x;
    float _2673 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _774 : (isnan(_774) ? cbSceneParam._m0[77u].w : min(_774, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_774 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_774) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _774 : min(cbSceneParam._m0[80u].w, _774));
        float _2748 = _2747 / _774;
        float _2759 = _2748 * _825;
        float _2760 = _826 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2763 = _2748 * _827;
        float _2765 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2766 = _2765 + cbSceneParam._m0[79u].w;
        float _2767 = cbSceneParam._m0[79u].w - _2760;
        float _2773 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2763 * _2763));
        float _2776 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2773;
        float _2781 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2783 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2761 - _2765) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2766 > 0.0) ? exp2(_2781 * _2766) : (2.0 - exp2(_2783 * _2766))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2776;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : max(_2766, _2767));
            float _2898 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : min(_2766, _2767));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2936 = ((abs(_2773 / _2761) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2781 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2781 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2783 * _2907) - exp2(_2783 * _2908)) * _2896))) + (_2776 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2692);
        _2785 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2787 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2789 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2791 = _2947 * _2692;
    }
    else
    {
        _2785 = _2689;
        _2787 = _2690;
        _2789 = _2691;
        _2791 = _2692;
    }
    float _2803 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2804 = _2803 == 3.0;
    float _2805 = log2(_2791);
    float _2812 = exp2(_2805 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2634 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _903))) + ((_2640 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2813 = exp2(_2805 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2636 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _903))) + ((_2642 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2814 = exp2(_2805 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2638 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _903))) + ((_2644 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2823 = (_2803 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2823 * (_2804 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.y = _2823 * (_2804 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.z = _2823 * (_2804 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.w = cbInstanceData._m0[_2664].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2664].w;
}


