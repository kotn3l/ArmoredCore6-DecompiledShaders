#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1313;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3900 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _438 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_425 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319);
    float _441 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_425 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320);
    float _444 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_425 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321);
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    float _513 = ((_483.z - _504) * _425) + _504;
    float _516 = ((((_483.x - _502) * _425) + _502) * 2.0) + (-1.0);
    float _518 = ((((_483.y - _503) * _425) + _503) * 2.0) + (-1.0);
    float _519 = dot(vec2(_516, _518), vec2(_516, _518));
    float _3911 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _552 = (((_540.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _516;
    float _553 = (((_540.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _518;
    float _556 = fma(_524, _239, fma(_553, _246, _552 * _232));
    float _559 = fma(_524, _240, fma(_553, _247, _552 * _233));
    float _562 = fma(_524, _241, fma(_553, _248, _552 * _234));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _602 = (cbMtdParam._m0[19u].x + dot(vec4(_566 * _556, _566 * _559, _566 * _562, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_595 - _596) * cbMtdParam._m0[24u].w) + _596) * cbMtdParam._m0[21u].z);
    float _3922 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _605 = (-0.0) - cbMtdParam._m0[24u].x;
    float _607 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
    float _615 = _603 - ((_603 * TEXCOORD_8.x) * _608);
    float _616 = _603 - ((_603 * TEXCOORD_8.y) * _608);
    float _617 = _603 - ((_603 * TEXCOORD_8.z) * _608);
    float _624 = (_615 * ((_463.x * cbMtdParam._m0[18u].x) - _438)) + _438;
    float _625 = (_616 * ((_463.y * cbMtdParam._m0[18u].y) - _441)) + _441;
    float _626 = (_617 * ((_463.z * cbMtdParam._m0[18u].z) - _444)) + _444;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _669 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].y) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3943 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _678 = ((((cbMtdParam._m0[10u].x - _624) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _670) + _624;
    float _679 = ((((cbMtdParam._m0[10u].y - _625) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _670) + _625;
    float _680 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _626)) * _670) + _626;
    float _684 = (cbMtdParam._m0[19u].w * (_540.z - _513)) + _513;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3954 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = ((_698.z - _684) * _615) + _684;
    float _718 = ((cbMtdParam._m0[23u].y - _715) * _670) + _715;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _743 = (_737.x * 2.0) + (-1.0);
    float _744 = (_737.y * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3965 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _760 = ((sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) - _524) * _617) + _524;
    float _763 = (((_705 - _552) * _615) + _552) + (cbMtdParam._m0[21u].x * _552);
    float _764 = (((_706 - _553) * _616) + _553) + (cbMtdParam._m0[21u].x * _553);
    float _775 = (((_743 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _670) + _763;
    float _776 = (((_744 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _670) + _764;
    float _777 = (_670 * (sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) - _760)) + _760;
    float _779 = cbMtdParam._m0[22u].x + _540.w;
    float _782 = fma(_777, _239, fma(_776, _246, _775 * _232));
    float _785 = fma(_777, _240, fma(_776, _247, _775 * _233));
    float _788 = fma(_777, _241, fma(_776, _248, _775 * _234));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3976 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _796 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3998 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4009 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4020 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _901 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _904 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _918 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_918].z;
    float _4031 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _942 = ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_793, _794, _795), vec3(_871, _872, _873));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _793) - _871;
    float _951 = (_946 * _794) - _872;
    float _952 = (_946 * _795) - _873;
    float _956 = abs(dot(vec3(_871, _872, _873), vec3(_793, _794, _795)));
    float _4064 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_796);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1312;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_1011, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003));
        float _1041 = fma(_1011, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003));
        float _1045 = fma(_1011, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003));
        float _1070 = _1003 + _793;
        float _1071 = _1007 + _794;
        float _1072 = _1011 + _795;
        float _1082 = fma(_1072, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070)) - _1037;
        float _1083 = fma(_1072, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070)) - _1041;
        float _1084 = fma(_1072, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070)) - _1045;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1140 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1106.x + (-0.5));
        float _1142 = _1140 * (_1106.y + (-0.5));
        float _1143 = _1140 * (_1106.z + (-0.5));
        float _1150 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1113.x + (-0.5));
        float _1152 = _1150 * (_1113.y + (-0.5));
        float _1153 = _1150 * (_1113.z + (-0.5));
        float _1160 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1120.x + (-0.5));
        float _1162 = _1160 * (_1120.y + (-0.5));
        float _1163 = _1160 * (_1120.z + (-0.5));
        float _1170 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1127.x + (-0.5));
        float _1172 = _1170 * (_1127.y + (-0.5));
        float _1173 = _1170 * (_1127.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1194 = (dot(vec3(_793, _794, _795), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1204 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4112 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1206 + 1.0))) + _1211) * _1174;
        float _1221 = _1142 * 0.5;
        float _1222 = _1152 * 0.5;
        float _1223 = _1162 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_793, _794, _795), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4145 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1248 + 1.0))) + _1253) * _1175;
        float _1263 = _1143 * 0.5;
        float _1264 = _1153 * 0.5;
        float _1265 = _1163 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_793, _794, _795), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4178 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1290 + 1.0))) + _1295) * _1176;
        _1312 = _1143;
        _1314 = _1142;
        _1315 = _1141;
        _1316 = _1153;
        _1317 = _1152;
        _1318 = _1151;
        _1319 = _1163;
        _1320 = _1162;
        _1321 = _1161;
        _1322 = _1176;
        _1323 = _1175;
        _1324 = _1174;
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1313;
        _1314 = _1313;
        _1315 = _1313;
        _1316 = _1313;
        _1317 = _1313;
        _1318 = _1313;
        _1319 = _1313;
        _1320 = _1313;
        _1321 = _1313;
        _1322 = _1313;
        _1323 = _1313;
        _1324 = _1313;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_1011, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003));
        float _1356 = fma(_1011, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003));
        float _1360 = fma(_1011, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003));
        float _1383 = _1003 + _793;
        float _1384 = _1007 + _794;
        float _1385 = _1011 + _795;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_793, _794, _795), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4241 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_793, _794, _795), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4274 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_793, _794, _795), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4307 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1313;
        _1622 = _1313;
        _1623 = _1313;
        _1624 = _1313;
        _1625 = _1313;
        _1626 = _1313;
        _1627 = _1313;
        _1628 = _1313;
        _1629 = _1313;
        _1630 = _1313;
        _1631 = _1313;
        _1632 = _1313;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1325)) + _1325;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1326)) + _1326;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1327)) + _1327;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _950 * 0.5;
    float _1690 = _951 * 0.5;
    float _1691 = _952 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1312, _1316, _1319, _1322));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_1011, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_1011, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_1011, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1819 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1822 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1850 = frontier_phi_14_12_ladder;
        }
        float _2019;
        if (_1819 > 0.0)
        {
            _2019 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2019 = frontier_phi_23_19_ladder;
        }
        float _2314;
        if (_1822 > 0.0)
        {
            _2314 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2314 = frontier_phi_35_30_ladder;
        }
        float _2316 = isnan(_2019) ? _1850 : (isnan(_1850) ? _2019 : min(_1850, _2019));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1816) + _1805;
        float _2322 = (_2317 * _1819) + _1809;
        float _2323 = (_2317 * _1822) + _1813;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_13_35_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_13_35_ladder_2;
        _1840 = frontier_phi_13_35_ladder_1;
        _1842 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1758);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_1011, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_1011, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_1011, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1914 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1917 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2024;
        if (_1911 > 0.0)
        {
            _2024 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2024 = frontier_phi_25_21_ladder;
        }
        float _2341;
        if (_1914 > 0.0)
        {
            _2341 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2341 = frontier_phi_37_32_ladder;
        }
        float _2668;
        if (_1917 > 0.0)
        {
            _2668 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2668 = frontier_phi_47_44_ladder;
        }
        float _2670 = isnan(_2341) ? _2024 : (isnan(_2024) ? _2341 : min(_2024, _2341));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1911) + _1900;
        float _2676 = (_2671 * _1914) + _1904;
        float _2677 = (_2671 * _1917) + _1908;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_22_47_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_22_47_ladder_2;
        _1938 = frontier_phi_22_47_ladder_1;
        _1940 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1847);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1952 = ((((1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_971 * _958)) * _942;
    float _1953 = _1952 * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1954 = _1952 * ((cbModelParam._m0[1u].w * (_1938 - _1840)) + _1840);
    float _1955 = _1952 * ((cbModelParam._m0[1u].w * (_1940 - _1842)) + _1842);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2011 = _1998 / _2010;
    float _2012 = _2002 / _2010;
    float _2013 = _2006 / _2010;
    float _2160;
    float _2161;
    float _2162;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2040 = ((uint(_2013 > cbSceneParam._m0[59u].y) + uint(_2013 > cbSceneParam._m0[59u].x)) + uint(_2013 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2041 = _2040 + 43u;
        uint _2049 = _2040 + 44u;
        uint _2057 = _2040 + 45u;
        uint _2065 = _2040 + 46u;
        float _2076 = fma(_2010, cbSceneParam._m0[_2041].w, fma(_2006, cbSceneParam._m0[_2041].z, fma(_2002, cbSceneParam._m0[_2041].y, _1998 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2010, cbSceneParam._m0[_2049].w, fma(_2006, cbSceneParam._m0[_2049].z, fma(_2002, cbSceneParam._m0[_2049].y, _1998 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2010, cbSceneParam._m0[_2065].w, fma(_2006, cbSceneParam._m0[_2065].z, fma(_2002, cbSceneParam._m0[_2065].y, _1998 * cbSceneParam._m0[_2065].x)));
        float _2093 = cbSceneParam._m0[33u].z * _2088;
        float _2095 = cbSceneParam._m0[33u].w * _2088;
        float _2098 = fma(_2010, cbSceneParam._m0[_2057].w, fma(_2006, cbSceneParam._m0[_2057].z, fma(_2002, cbSceneParam._m0[_2057].y, _1998 * cbSceneParam._m0[_2057].x))) / _2088;
        float _2146 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
        float _4433 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2153 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2076) / _2088, (_2095 + _2080) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 + _2076) / _2088, (_2080 - _2093) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2093) / _2088, (_2080 - _2095) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2095) / _2088, (_2093 + _2080) / _2088), _2098), 0.0)).x), vec4(0.25)));
        _2160 = 1.0 - (_2153 * cbSceneParam._m0[34u].x);
        _2161 = 1.0 - (_2153 * cbSceneParam._m0[34u].y);
        _2162 = 1.0 - (_2153 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2160 = 1.0;
        _2161 = 1.0;
        _2162 = 1.0;
    }
    float _2226;
    float _2228;
    float _2230;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2214 = fma(_2010, cbSceneParam._m0[63u].w, fma(_2006, cbSceneParam._m0[63u].z, fma(_2002, cbSceneParam._m0[63u].y, _1998 * cbSceneParam._m0[63u].x)));
        float _2215 = fma(_2010, cbSceneParam._m0[60u].w, fma(_2006, cbSceneParam._m0[60u].z, fma(_2002, cbSceneParam._m0[60u].y, _1998 * cbSceneParam._m0[60u].x))) / _2214;
        float _2216 = fma(_2010, cbSceneParam._m0[61u].w, fma(_2006, cbSceneParam._m0[61u].z, fma(_2002, cbSceneParam._m0[61u].y, _1998 * cbSceneParam._m0[61u].x))) / _2214;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2215 >= cbSceneParam._m0[64u].x) && (_2216 >= cbSceneParam._m0[64u].y)) && (_2215 <= cbSceneParam._m0[64u].z)) && (_2216 <= cbSceneParam._m0[64u].w))
        {
            float _2354 = fma(_2010, cbSceneParam._m0[62u].w, fma(_2006, cbSceneParam._m0[62u].z, fma(_2002, cbSceneParam._m0[62u].y, _1998 * cbSceneParam._m0[62u].x))) / _2214;
            float _2358 = isnan(cbSceneParam._m0[41u].w) ? _2354 : (isnan(_2354) ? cbSceneParam._m0[41u].w : max(_2354, cbSceneParam._m0[41u].w));
            float _2401 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
            float _4449 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
            float _2408 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2215, cbSceneParam._m0[33u].w + _2216), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2215, _2216 - cbSceneParam._m0[33u].z), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].z, _2216 - cbSceneParam._m0[33u].w), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2216), _2358), 0.0)).x), vec4(0.25)));
            float _2412 = 1.0 - (_2408 * cbSceneParam._m0[34u].x);
            float _2413 = 1.0 - (_2408 * cbSceneParam._m0[34u].y);
            float _2414 = 1.0 - (_2408 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2414) ? _2162 : (isnan(_2162) ? _2414 : min(_2162, _2414));
            frontier_phi_34_33_ladder_1 = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
            frontier_phi_34_33_ladder_2 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
        }
        else
        {
            frontier_phi_34_33_ladder = _2162;
            frontier_phi_34_33_ladder_1 = _2161;
            frontier_phi_34_33_ladder_2 = _2160;
        }
        _2226 = frontier_phi_34_33_ladder_2;
        _2228 = frontier_phi_34_33_ladder_1;
        _2230 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2226 = _2160;
        _2228 = _2161;
        _2230 = _2162;
    }
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _942 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2273 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2277 = _2237 | 1u;
    float _2288 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_793, _794, _795));
    float _2291 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_793, _794, _795));
    float _4485 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _4496 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2296 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2298 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2305 = ((cbLight._m0[_2254].x * _2260) * _2298) + (((cbLight._m0[_2264].x * _2226) * _2273) * _2296);
    float _2306 = ((_2260 * cbLight._m0[_2254].y) * _2298) + (((cbLight._m0[_2264].y * _2228) * _2273) * _2296);
    float _2307 = ((_2260 * cbLight._m0[_2254].z) * _2298) + (((cbLight._m0[_2264].z * _2230) * _2273) * _2296);
    uvec4 _2311 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2313 = _2311.x == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2313)
    {
        _2415 = _2305;
        _2417 = _2306;
        _2419 = _2307;
    }
    else
    {
        uint _2423 = _2237 + 6u;
        float _2439 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4507 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2442 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2415 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2305;
        _2417 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2306;
        _2419 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2307;
    }
    bool _2422 = _2311.y == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2422)
    {
        _2477 = _2415;
        _2479 = _2417;
        _2481 = _2419;
    }
    else
    {
        uint _2639 = _2237 + 7u;
        float _2655 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4523 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2658 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2477 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2415;
        _2479 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2417;
        _2481 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2419;
    }
    uint _2484 = _2237 + 8u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _796) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2237].x + _871;
    float _2500 = cbLight._m0[_2237].y + _872;
    float _2501 = cbLight._m0[_2237].z + _873;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2237].xyz));
    float _4539 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _4550 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2513 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2514 = dot(vec3(_793, _794, _795), vec3(_2506, _2507, _2508));
    float _4561 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2506, _2507, _2508));
    float _4572 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2498 * _2498;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2538 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2513 * ((_2512 * _2538) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2538) + _2498) * _2512))) * _2512;
    float _4583 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    uint _2565 = _2237 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _796) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2277].x + _871;
    float _2579 = cbLight._m0[_2277].y + _872;
    float _2580 = cbLight._m0[_2277].z + _873;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2277].xyz));
    float _4594 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2592 = dot(vec3(_793, _794, _795), vec3(_2585, _2586, _2587));
    float _4605 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2585, _2586, _2587));
    float _4616 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2614 = 1.0 - _2577;
    float _2624 = (0.5 / (((_2513 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2614) + _2577) * _2591))) * _2591;
    float _4627 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2636 = (((_2613 * cbLight._m0[_2565].x) * _2626) * _2260) + ((((cbLight._m0[_2484].x * _2226) * _2537) * _2551) * _2273);
    float _2637 = (((_2613 * cbLight._m0[_2565].y) * _2626) * _2260) + ((((cbLight._m0[_2484].y * _2228) * _2537) * _2551) * _2273);
    float _2638 = (((_2613 * cbLight._m0[_2565].z) * _2626) * _2260) + ((((cbLight._m0[_2484].z * _2230) * _2537) * _2551) * _2273);
    float _2694;
    float _2696;
    float _2698;
    if (_2313)
    {
        _2694 = _2636;
        _2696 = _2637;
        _2698 = _2638;
    }
    else
    {
        uint _2700 = _2237 + 2u;
        uint _2704 = _2237 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _796) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _871;
        float _2721 = cbLight._m0[_2700].y + _872;
        float _2722 = cbLight._m0[_2700].z + _873;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2700].xyz));
        float _4638 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2734 = dot(vec3(_793, _794, _795), vec3(_2727, _2728, _2729));
        float _4649 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4660 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2513 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2756) + _2719) * _2733))) * _2733;
        float _4671 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2694 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2636;
        _2696 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2637;
        _2698 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2638;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2422)
    {
        _2800 = _2694;
        _2802 = _2696;
        _2804 = _2698;
    }
    else
    {
        uint _2811 = _2237 + 3u;
        uint _2815 = _2237 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _796) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _871;
        float _2832 = cbLight._m0[_2811].y + _872;
        float _2833 = cbLight._m0[_2811].z + _873;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2811].xyz));
        float _4687 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2845 = dot(vec3(_793, _794, _795), vec3(_2838, _2839, _2840));
        float _4698 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4709 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2866 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2867 = 1.0 - _2830;
        float _2877 = (0.5 / (((_2513 * ((_2844 * _2867) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2867) + _2830) * _2844))) * _2844;
        float _4720 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2800 = (((_2866 * cbLight._m0[_2815].x) * _2879) * _2880) + _2694;
        _2802 = (((_2866 * cbLight._m0[_2815].y) * _2879) * _2880) + _2696;
        _2804 = (((_2866 * cbLight._m0[_2815].z) * _2879) * _2880) + _2698;
    }
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_2235.y == 0u)
    {
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.x;
        uint _2913 = uint((float(_2901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2902))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2902)));
        float _2923 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2924 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        uint _2927 = uint(isnan(14.0) ? _2924 : (isnan(_2924) ? 14.0 : min(_2924, 14.0)));
        uvec4 _2932 = texelFetch(g_lightClusterGridBuffer, int(((_2927 << 2u) + (_2913 << 6u)) >> 2u));
        uint _2933 = _2932.x;
        uint _2934 = _2901.z;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((((1u << ((_2934 >> 4u) & 15u)) + 4294967295u) & _2933) == 0u) || ((_2934 & 240u) == 0u))
        {
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
        }
        else
        {
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3173)
                {
                    frontier_phi_66_pred = _3162;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3172;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3163 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _2011;
                        float _3348 = _3307.y - _2012;
                        float _3349 = _3307.z - _2013;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_898, _901, _904), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4746 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _2011;
                        float _3383 = (-0.0) - _2012;
                        float _3384 = (-0.0) - _2013;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3398 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _958;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3411 = _3391 + _3356;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_898, _901, _904), vec3(_3389, _3390, _3391));
                        float _4762 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3423 = dot(vec3(_898, _901, _904), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4773 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3367 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3357) + _3432;
                        float _4784 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4795 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3430 * _3430) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3216 = (_3378 * _3326.x) + _3284;
                        _3217 = (_3378 * _3326.y) + _3285;
                        _3218 = (_3378 * _3326.z) + _3286;
                        _3213 = (_3458 * _3343.x) + _3281;
                        _3214 = (_3458 * _3343.y) + _3282;
                        _3215 = (_3458 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_66_pred = _3218;
                    frontier_phi_66_pred_1 = _3217;
                    frontier_phi_66_pred_2 = _3216;
                    frontier_phi_66_pred_3 = _3215;
                    frontier_phi_66_pred_4 = _3214;
                    frontier_phi_66_pred_5 = _3213;
                }
                _3024 = frontier_phi_66_pred;
                _3022 = frontier_phi_66_pred_1;
                _3020 = frontier_phi_66_pred_2;
                _3018 = frontier_phi_66_pred_3;
                _3016 = frontier_phi_66_pred_4;
                _3014 = frontier_phi_66_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3014;
                    _3158 = _3016;
                    _3159 = _3018;
                    _3160 = _3020;
                    _3161 = _3022;
                    _3162 = _3024;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
        }
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.z;
        uint _3030 = (_3028 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3030) & _2933) == 0u)
        {
            _3125 = _3013;
            _3127 = _3015;
            _3129 = _3017;
            _3131 = _3019;
            _3133 = _3021;
            _3135 = _3023;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _3151 = _3150 * _2011;
            float _3152 = _3150 * _2012;
            float _3153 = _3150 * _2013;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3030 < ((_3028 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3264 = _3013;
                float _3265 = _3015;
                float _3266 = _3017;
                float _3267 = _3019;
                float _3268 = _3021;
                float _3269 = _3023;
                uint _3270 = _3030;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3280)
                    {
                        frontier_phi_72_pred = _3269;
                        frontier_phi_72_pred_1 = _3268;
                        frontier_phi_72_pred_2 = _3267;
                        frontier_phi_72_pred_3 = _3266;
                        frontier_phi_72_pred_4 = _3265;
                        frontier_phi_72_pred_5 = _3264;
                    }
                    else
                    {
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        float _3481 = _3269;
                        uint _3482 = _3279;
                        uint _3483;
                        vec4 _3508;
                        float _3509;
                        vec4 _3524;
                        vec3 _3536;
                        vec4 _3551;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3493 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3482));
                            _3483 = (_3482 + 4294967295u) & _3482;
                            uint _3495 = _3493 * 40u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3509 = _3508.w;
                            uint _3511 = (_3493 * 40u) + 4u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3493 * 40u) + 8u;
                            _3536 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x));
                            uint _3538 = (_3493 * 40u) + 16u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3554 = (_3493 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3493 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3493 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_2013, _3601.z, fma(_2012, _3601.y, _3601.x * _2011)) + _3601.w;
                            _3614 = !((fma(_2013, _3582.z, fma(_2012, _3582.y, _3582.x * _2011)) + _3582.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3508.x - _2011;
                                float _3642 = _3508.y - _2012;
                                float _3643 = _3508.z - _2013;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3509 * _3509));
                                float _4806 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3659 = sqrt(_3644) * _3524.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_898, _901, _904))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_2013, _3551.z, fma(_2012, _3551.y, _3551.x * _2011)) + _3551.w) / _3613;
                                float _3673 = (fma(_2013, _3567.z, fma(_2012, _3567.y, _3567.x * _2011)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4822 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _958;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3151;
                                float _3703 = _3649 - _3152;
                                float _3704 = _3650 - _3153;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4833 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3716 = dot(vec3(_898, _901, _904), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4844 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_898, _901, _904), vec3(_3648, _3649, _3650))) + _3725;
                                float _4855 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4866 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3679 * _3524.y;
                                frontier_phi_78_pred_1 = _3679 * _3524.x;
                                frontier_phi_78_pred_2 = _3753 * _3536.z;
                                frontier_phi_78_pred_3 = _3753 * _3536.y;
                                frontier_phi_78_pred_4 = _3753 * _3536.x;
                                frontier_phi_78_pred_5 = _3679 * _3524.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_78_pred;
                            _3760 = frontier_phi_78_pred_1;
                            _3759 = frontier_phi_78_pred_2;
                            _3758 = frontier_phi_78_pred_3;
                            _3757 = frontier_phi_78_pred_4;
                            _3762 = frontier_phi_78_pred_5;
                            _3466 = _3760 + _3479;
                            _3467 = _3761 + _3480;
                            _3468 = _3762 + _3481;
                            _3463 = _3757 + _3476;
                            _3464 = _3758 + _3477;
                            _3465 = _3759 + _3478;
                            if (_3483 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3483;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3468;
                        frontier_phi_72_pred_1 = _3467;
                        frontier_phi_72_pred_2 = _3466;
                        frontier_phi_72_pred_3 = _3465;
                        frontier_phi_72_pred_4 = _3464;
                        frontier_phi_72_pred_5 = _3463;
                    }
                    _3136 = frontier_phi_72_pred;
                    _3134 = frontier_phi_72_pred_1;
                    _3132 = frontier_phi_72_pred_2;
                    _3130 = frontier_phi_72_pred_3;
                    _3128 = frontier_phi_72_pred_4;
                    _3126 = frontier_phi_72_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3126;
                        _3265 = _3128;
                        _3266 = _3130;
                        _3267 = _3132;
                        _3268 = _3134;
                        _3269 = _3136;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3136;
                frontier_phi_60_61_ladder_1 = _3134;
                frontier_phi_60_61_ladder_2 = _3130;
                frontier_phi_60_61_ladder_3 = _3128;
                frontier_phi_60_61_ladder_4 = _3126;
                frontier_phi_60_61_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_60_61_ladder = _3023;
                frontier_phi_60_61_ladder_1 = _3021;
                frontier_phi_60_61_ladder_2 = _3017;
                frontier_phi_60_61_ladder_3 = _3015;
                frontier_phi_60_61_ladder_4 = _3013;
                frontier_phi_60_61_ladder_5 = _3019;
            }
            _3125 = frontier_phi_60_61_ladder_4;
            _3127 = frontier_phi_60_61_ladder_3;
            _3129 = frontier_phi_60_61_ladder_2;
            _3131 = frontier_phi_60_61_ladder_5;
            _3133 = frontier_phi_60_61_ladder_1;
            _3135 = frontier_phi_60_61_ladder;
        }
        float _3140 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2946 = (_3140 * _3131) + _2477;
        _2948 = (_3140 * _3133) + _2479;
        _2950 = (_3140 * _3135) + _2481;
        _2952 = ((_3125 * 0.039999999105930328369140625) * _3140) + _2800;
        _2954 = ((_3127 * 0.039999999105930328369140625) * _3140) + _2802;
        _2956 = ((_3129 * 0.039999999105930328369140625) * _3140) + _2804;
    }
    else
    {
        _2946 = _2477;
        _2948 = _2479;
        _2950 = _2481;
        _2952 = _2800;
        _2954 = _2802;
        _2956 = _2804;
    }
    float _4882 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4893 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4904 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    uint _2976 = _251 + 6u;
    float _2984 = _879 / cbSceneParam._m0[86u].x;
    float _2985 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _3038 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _3039 = _3038 / _814;
        float _3050 = _3039 * _864;
        float _3051 = _865 * _3039;
        float _3052 = (-0.0) - _3051;
        float _3053 = _3039 * _866;
        float _3055 = (cbSceneParam._m0[77u].w * _3052) / _3038;
        float _3056 = _3055 + cbSceneParam._m0[79u].w;
        float _3057 = cbSceneParam._m0[79u].w - _3051;
        float _3063 = sqrt(((_3050 * _3050) + (_3051 * _3051)) + (_3053 * _3053));
        float _3066 = (1.0 - (cbSceneParam._m0[77u].w / _3038)) * _3063;
        float _3071 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3073 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3052 - _3055) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3056 > 0.0) ? exp2(_3071 * _3056) : (2.0 - exp2(_3073 * _3056))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3066;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : max(_3056, _3057));
            float _3188 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : min(_3056, _3057));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3226 = ((abs(_3063 / _3052) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3071 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3071 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3073 * _3197) - exp2(_3073 * _3198)) * _3186))) + (_3066 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_3004);
        _3075 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3077 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3079 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3081 = _3237 * _3004;
    }
    else
    {
        _3075 = _3001;
        _3077 = _3002;
        _3079 = _3003;
        _3081 = _3004;
    }
    float _3093 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3094 = _3093 == 3.0;
    float _3095 = log2(_3081);
    float _3102 = exp2(_3095 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2946 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _942))) + ((_2952 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _3103 = exp2(_3095 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2948 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _942))) + ((_2954 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _3104 = exp2(_3095 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2950 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _942))) + ((_2956 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _3113 = (_3093 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3113 * (_3094 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3075)));
    SV_Target.y = _3113 * (_3094 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.z = _3113 * (_3094 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.w = cbInstanceData._m0[_2976].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
}


