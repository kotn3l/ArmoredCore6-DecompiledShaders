#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1606;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3932 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3943 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3954 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3965 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _497 = (_490 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _498 = (_490 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _499 = (_490 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3976 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3987 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _642 = (_349.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _643 = (_349.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _644 = (_349.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _743 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _745 = _743.x;
    float _746 = _743.y;
    float _747 = _743.z;
    float _754 = ((_726.x - _745) * _490) + _745;
    float _755 = ((_726.y - _746) * _490) + _746;
    float _756 = ((_726.z - _747) * _490) + _747;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _779 = ((_768.x - _754) * _563) + _754;
    float _780 = ((_768.y - _755) * _563) + _755;
    float _781 = ((_768.z - _756) * _563) + _756;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _806 = ((_793.z - _781) * _632) + _781;
    float _809 = ((((_793.x - _779) * _632) + _779) * 2.0) + (-1.0);
    float _810 = ((((_793.y - _780) * _632) + _780) * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3998 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _816 = sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))));
    vec4 _830 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _855 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _857 = _855.x;
    float _858 = 1.0 - _857;
    float _864 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _867 = ((isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : min(_864, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _876 = (_867 - ((((((_857 - _858) * cbMtdParam._m0[24u].w) + _858) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _867))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4019 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _884 = (_877 * ((_684.x * cbMtdParam._m0[18u].x) - _662)) + _662;
    float _885 = (_877 * ((_684.y * cbMtdParam._m0[18u].y) - _664)) + _664;
    float _886 = (_877 * ((_684.z * cbMtdParam._m0[18u].z) - _666)) + _666;
    float _901 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _902 = _901 * TEXCOORD.z;
    float _903 = _901 * TEXCOORD.w;
    vec4 _915 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _902) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _903) + cbTextureTilingScale._m0[19u].w));
    float _917 = _915.x;
    float _918 = 1.0 - _917;
    float _945 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_917 - _918) * cbMtdParam._m0[24u].y) + _918) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4030 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _946 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _954 = ((((cbMtdParam._m0[10u].x - _884) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _946) + _884;
    float _955 = ((((cbMtdParam._m0[10u].y - _885) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _946) + _885;
    float _956 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _886)) * _946) + _886;
    float _961 = (((_703.z - _806) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _806;
    float _965 = ((_830.z - _961) * cbMtdParam._m0[19u].w) + _961;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _986 = (_979.x * 2.0) + (-1.0);
    float _987 = (_979.y * 2.0) + (-1.0);
    float _988 = dot(vec2(_986, _987), vec2(_986, _987));
    float _4041 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _996 = (_877 * (_979.z - _965)) + _965;
    float _999 = ((cbMtdParam._m0[23u].y - _996) * _946) + _996;
    vec4 _1020 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _902) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _903) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1026 = (_1020.x * 2.0) + (-1.0);
    float _1027 = (_1020.y * 2.0) + (-1.0);
    float _1028 = dot(vec2(_1026, _1027), vec2(_1026, _1027));
    float _4052 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1042 = (_809 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_703.x * 2.0) + (-1.0)))) + (((_830.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1043 = (_810 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_703.y * 2.0) + (-1.0)))) + (((_830.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1055 = (((_986 - _1042) + (cbMtdParam._m0[21u].x * _1042)) * _877) + _1042;
    float _1056 = (((_987 - _1043) + (cbMtdParam._m0[21u].x * _1043)) * _877) + _1043;
    float _1057 = (_877 * (sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) - _816)) + _816;
    float _1068 = (((_1026 - _1055) + (_1055 * cbMtdParam._m0[22u].z)) * _946) + _1055;
    float _1069 = (((_1027 - _1056) + (_1056 * cbMtdParam._m0[22u].z)) * _946) + _1056;
    float _1070 = ((sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) - _1057) * _946) + _1057;
    float _1072 = cbMtdParam._m0[22u].x + _830.w;
    float _1075 = fma(_1070, _261 * NORMAL.x, fma(_1069, _268 * TANGENT.x, (_254 * _246) * _1068));
    float _1078 = fma(_1070, _261 * NORMAL.y, fma(_1069, _268 * TANGENT.y, (_254 * _247) * _1068));
    float _1081 = fma(_1070, _261 * NORMAL.z, fma(_1069, _268 * TANGENT.z, (_254 * _248) * _1068));
    float _1085 = inversesqrt(dot(vec3(_1075, _1078, _1081), vec3(_1075, _1078, _1081)));
    float _1086 = _1085 * _1075;
    float _1087 = _1085 * _1078;
    float _1088 = _1085 * _1081;
    float _4063 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1089 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4085 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4096 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4107 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _1107 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1157 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1147);
    float _1158 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1147);
    float _1159 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1147);
    float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
    float _1164 = _1157 * _1163;
    float _1165 = _1158 * _1163;
    float _1166 = _1159 * _1163;
    float _1172 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1173 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1191 = fma(_1088, cbSceneParam._m0[5u].z, fma(_1087, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1086));
    float _1194 = fma(_1088, cbSceneParam._m0[6u].z, fma(_1087, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1086));
    float _1197 = fma(_1088, cbSceneParam._m0[7u].z, fma(_1087, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1086));
    uint _1211 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1217 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_1211].x;
    float _1218 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_1211].y;
    float _1219 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_1211].z;
    float _4118 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1220 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1222 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    vec4 _1231 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1172, cbSceneParam._m0[86u].y * _1173));
    float _1235 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * TEXCOORD_5.w) * _1231.x;
    float _1236 = dot(vec3(_1086, _1087, _1088), vec3(_1164, _1165, _1166));
    float _1239 = _1236 * 2.0;
    float _1243 = (_1239 * _1086) - _1164;
    float _1244 = (_1239 * _1087) - _1165;
    float _1245 = (_1239 * _1088) - _1166;
    float _1249 = abs(dot(vec3(_1164, _1165, _1166), vec3(_1086, _1087, _1088)));
    float _4151 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1251 = sqrt(_1089);
    float _1264 = exp2((_1251 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1251 * 3.0));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1300 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1304 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1605;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1330 = fma(_1304, cbModelParam._m0[26u].z, fma(_1300, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1296));
        float _1334 = fma(_1304, cbModelParam._m0[27u].z, fma(_1300, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1296));
        float _1338 = fma(_1304, cbModelParam._m0[28u].z, fma(_1300, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1296));
        float _1363 = _1296 + _1086;
        float _1364 = _1300 + _1087;
        float _1365 = _1304 + _1088;
        float _1375 = fma(_1365, cbModelParam._m0[26u].z, fma(_1364, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1363)) - _1330;
        float _1376 = fma(_1365, cbModelParam._m0[27u].z, fma(_1364, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1363)) - _1334;
        float _1377 = fma(_1365, cbModelParam._m0[28u].z, fma(_1364, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1363)) - _1338;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1330 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1334 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[34u].z) + ((((((_1338 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1433 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1399.x + (-0.5));
        float _1435 = _1433 * (_1399.y + (-0.5));
        float _1436 = _1433 * (_1399.z + (-0.5));
        float _1443 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1406.x + (-0.5));
        float _1445 = _1443 * (_1406.y + (-0.5));
        float _1446 = _1443 * (_1406.z + (-0.5));
        float _1453 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1413.x + (-0.5));
        float _1455 = _1453 * (_1413.y + (-0.5));
        float _1456 = _1453 * (_1413.z + (-0.5));
        float _1463 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1420.x + (-0.5));
        float _1465 = _1463 * (_1420.y + (-0.5));
        float _1466 = _1463 * (_1420.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1487 = (dot(vec3(_1086, _1087, _1088), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1497 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4199 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1499 + 1.0))) + _1504) * _1467;
        float _1514 = _1435 * 0.5;
        float _1515 = _1445 * 0.5;
        float _1516 = _1455 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_1086, _1087, _1088), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4232 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1541 + 1.0))) + _1546) * _1468;
        float _1556 = _1436 * 0.5;
        float _1557 = _1446 * 0.5;
        float _1558 = _1456 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_1086, _1087, _1088), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4265 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1583 + 1.0))) + _1588) * _1469;
        _1605 = _1436;
        _1607 = _1435;
        _1608 = _1434;
        _1609 = _1446;
        _1610 = _1445;
        _1611 = _1444;
        _1612 = _1456;
        _1613 = _1455;
        _1614 = _1454;
        _1615 = _1469;
        _1616 = _1468;
        _1617 = _1467;
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1606;
        _1607 = _1606;
        _1608 = _1606;
        _1609 = _1606;
        _1610 = _1606;
        _1611 = _1606;
        _1612 = _1606;
        _1613 = _1606;
        _1614 = _1606;
        _1615 = _1606;
        _1616 = _1606;
        _1617 = _1606;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1643 = fma(_1304, cbModelParam._m0[30u].z, fma(_1300, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296));
        float _1647 = fma(_1304, cbModelParam._m0[31u].z, fma(_1300, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296));
        float _1651 = fma(_1304, cbModelParam._m0[32u].z, fma(_1300, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296));
        float _1674 = _1296 + _1086;
        float _1675 = _1300 + _1087;
        float _1676 = _1304 + _1088;
        float _1686 = fma(_1676, cbModelParam._m0[30u].z, fma(_1675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1674)) - _1643;
        float _1687 = fma(_1676, cbModelParam._m0[31u].z, fma(_1675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1674)) - _1647;
        float _1688 = fma(_1676, cbModelParam._m0[32u].z, fma(_1675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1674)) - _1651;
        float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
        float _1705 = ((_1692 * _1686) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1643 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1706 = ((_1692 * _1687) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1647 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1692 * _1688) / cbModelParam._m0[35u].z) + ((((((_1651 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1705, _1706, _1707), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1705, _1706, _1707), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1705, _1706, _1707), 0.0);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1705, _1706, _1707), 0.0);
        float _1742 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1709.x + (-0.5));
        float _1744 = _1742 * (_1709.y + (-0.5));
        float _1745 = _1742 * (_1709.z + (-0.5));
        float _1752 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1716.x + (-0.5));
        float _1754 = _1752 * (_1716.y + (-0.5));
        float _1755 = _1752 * (_1716.z + (-0.5));
        float _1762 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1723.x + (-0.5));
        float _1764 = _1762 * (_1723.y + (-0.5));
        float _1765 = _1762 * (_1723.z + (-0.5));
        float _1772 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1730.x + (-0.5));
        float _1774 = _1772 * (_1730.y + (-0.5));
        float _1775 = _1772 * (_1730.z + (-0.5));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = _1743 * 0.5;
        float _1780 = _1753 * 0.5;
        float _1781 = _1763 * 0.5;
        float _1782 = dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781));
        float _1787 = (_1782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1782);
        float _1795 = (dot(vec3(_1086, _1087, _1088), vec3(_1787 * _1779, _1787 * _1780, _1787 * _1781)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1804 = sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1806 = _1805 * 2.0;
        float _1810 = (1.0 - _1805) / (_1805 + 1.0);
        float _4328 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1820 = ((((1.0 - _1811) * (_1806 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1806 + 1.0))) + _1811) * _1776;
        float _1821 = _1744 * 0.5;
        float _1822 = _1754 * 0.5;
        float _1823 = _1764 * 0.5;
        float _1824 = dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823));
        float _1829 = (_1824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1824);
        float _1837 = (dot(vec3(_1086, _1087, _1088), vec3(_1829 * _1821, _1829 * _1822, _1829 * _1823)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1848 = _1847 * 2.0;
        float _1852 = (1.0 - _1847) / (_1847 + 1.0);
        float _4361 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1862 = ((((1.0 - _1853) * (_1848 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1848 + 1.0))) + _1853) * _1777;
        float _1863 = _1745 * 0.5;
        float _1864 = _1755 * 0.5;
        float _1865 = _1765 * 0.5;
        float _1866 = dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865));
        float _1871 = (_1866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1866);
        float _1879 = (dot(vec3(_1086, _1087, _1088), vec3(_1871 * _1863, _1871 * _1864, _1871 * _1865)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1890 = _1889 * 2.0;
        float _1894 = (1.0 - _1889) / (_1889 + 1.0);
        float _4394 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1904 = ((((1.0 - _1895) * (_1890 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1890 + 1.0))) + _1895) * _1778;
        _1912 = _1745;
        _1913 = _1744;
        _1914 = _1743;
        _1915 = _1755;
        _1916 = _1754;
        _1917 = _1753;
        _1918 = _1765;
        _1919 = _1764;
        _1920 = _1763;
        _1921 = _1778;
        _1922 = _1777;
        _1923 = _1776;
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)));
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)));
    }
    else
    {
        _1912 = _1606;
        _1913 = _1606;
        _1914 = _1606;
        _1915 = _1606;
        _1916 = _1606;
        _1917 = _1606;
        _1918 = _1606;
        _1919 = _1606;
        _1920 = _1606;
        _1921 = _1606;
        _1922 = _1606;
        _1923 = _1606;
        _1924 = 0.0;
        _1925 = 0.0;
        _1926 = 0.0;
    }
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1618)) + _1618;
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1619)) + _1619;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1620)) + _1620;
    float _1959 = fma(_1938, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1962 = fma(_1938, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1965 = fma(_1938, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1936));
    float _1980 = _1243 * 0.5;
    float _1981 = _1244 * 0.5;
    float _1982 = _1245 * 0.5;
    float _1983 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1986 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _1989 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _2023;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1996 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1605, _1609, _1612, _1615));
        float _2000 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1607, _1610, _1613, _1616));
        float _2004 = dot(vec4(_1980, _1981, _1982, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2011 = dot(vec4(cbModelParam._m0[39u]), vec4(_1980, _1981, _1982, 1.0));
        _2023 = dot(vec3(isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2011) ? 0.0 : (isnan(0.0) ? _2011 : max(0.0, _2011))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2023 = 1.0;
    }
    float _2034;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2025 = dot(vec4(cbModelParam._m0[40u]), vec4(_1980, _1981, _1982, 1.0));
        _2034 = dot(vec3(isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2025) ? 0.0 : (isnan(0.0) ? _2025 : max(0.0, _2025))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2034 = 1.0;
    }
    float _2038 = (_2034 * cbModelParam._m0[1u].x) + (_2023 * (1.0 - cbModelParam._m0[1u].x));
    float _2048 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1089);
    float _2049 = isnan(_2048) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2048 : min(cbModelParam._m0[25u].z, _2048));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2096 = fma(_1304, cbModelParam._m0[13u].z, fma(_1300, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1296)) + cbModelParam._m0[13u].w;
        float _2100 = fma(_1304, cbModelParam._m0[14u].z, fma(_1300, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1296)) + cbModelParam._m0[14u].w;
        float _2104 = fma(_1304, cbModelParam._m0[15u].z, fma(_1300, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1296)) + cbModelParam._m0[15u].w;
        float _2107 = fma(_1245, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1243));
        float _2110 = fma(_1245, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1243));
        float _2113 = fma(_1245, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1243));
        float _2141;
        if (_2107 > 0.0)
        {
            _2141 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2141 = frontier_phi_14_12_ladder;
        }
        float _2362;
        if (_2110 > 0.0)
        {
            _2362 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2362 = frontier_phi_23_19_ladder;
        }
        float _2608;
        if (_2113 > 0.0)
        {
            _2608 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2608 = frontier_phi_35_30_ladder;
        }
        float _2610 = isnan(_2362) ? _2141 : (isnan(_2141) ? _2362 : min(_2141, _2362));
        float _2611 = isnan(_2608) ? _2610 : (isnan(_2610) ? _2608 : min(_2610, _2608));
        float _2615 = (_2611 * _2107) + _2096;
        float _2616 = (_2611 * _2110) + _2100;
        float _2617 = (_2611 * _2113) + _2104;
        float _2618 = _2611 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2618;
        float _2622 = _2618 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 > _2622) || ((_2616 < _2620) || ((_2615 < _2620) || (_2615 > _2622))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2617, cbModelParam._m0[9u].z, fma(_2616, cbModelParam._m0[9u].y, _2615 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2617, cbModelParam._m0[10u].z, fma(_2616, cbModelParam._m0[10u].y, _2615 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2617, cbModelParam._m0[11u].z, fma(_2616, cbModelParam._m0[11u].y, _2615 * cbModelParam._m0[11u].x))), _2049);
            frontier_phi_13_35_ladder = _2741.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2741.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2741.x * cbModelParam._m0[1u].y;
        }
        _2129 = frontier_phi_13_35_ladder_2;
        _2131 = frontier_phi_13_35_ladder_1;
        _2133 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1243, _1244, _1245), _2049);
        _2129 = _2117.x * cbModelParam._m0[1u].y;
        _2131 = _2117.y * cbModelParam._m0[1u].y;
        _2133 = _2117.z * cbModelParam._m0[1u].y;
    }
    float _2137 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1089);
    float _2138 = isnan(_2137) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2137 : min(cbModelParam._m0[25u].w, _2137));
    float _2227;
    float _2229;
    float _2231;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2191 = fma(_1304, cbModelParam._m0[21u].z, fma(_1300, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1296)) + cbModelParam._m0[21u].w;
        float _2195 = fma(_1304, cbModelParam._m0[22u].z, fma(_1300, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1296)) + cbModelParam._m0[22u].w;
        float _2199 = fma(_1304, cbModelParam._m0[23u].z, fma(_1300, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1296)) + cbModelParam._m0[23u].w;
        float _2202 = fma(_1245, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1243));
        float _2205 = fma(_1245, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1243));
        float _2208 = fma(_1245, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1243));
        float _2367;
        if (_2202 > 0.0)
        {
            _2367 = abs((1.0 - _2191) / _2202);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2191 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2367 = frontier_phi_25_21_ladder;
        }
        float _2635;
        if (_2205 > 0.0)
        {
            _2635 = abs((1.0 - _2195) / _2205);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2195 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2635 = frontier_phi_37_32_ladder;
        }
        float _2840;
        if (_2208 > 0.0)
        {
            _2840 = abs((1.0 - _2199) / _2208);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2199 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2840 = frontier_phi_46_43_ladder;
        }
        float _2842 = isnan(_2635) ? _2367 : (isnan(_2367) ? _2635 : min(_2367, _2635));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2202) + _2191;
        float _2848 = (_2843 * _2205) + _2195;
        float _2849 = (_2843 * _2208) + _2199;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2851 = (-1.0) - _2850;
        float _2853 = _2850 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2849 > _2853) || ((_2849 < _2851) || ((_2848 > _2853) || ((_2848 < _2851) || ((_2847 < _2851) || (_2847 > _2853))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2849, cbModelParam._m0[17u].z, fma(_2848, cbModelParam._m0[17u].y, _2847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2849, cbModelParam._m0[18u].z, fma(_2848, cbModelParam._m0[18u].y, _2847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2849, cbModelParam._m0[19u].z, fma(_2848, cbModelParam._m0[19u].y, _2847 * cbModelParam._m0[19u].x))), _2138);
            frontier_phi_22_46_ladder = _3048.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3048.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3048.x * cbModelParam._m0[1u].z;
        }
        _2227 = frontier_phi_22_46_ladder_2;
        _2229 = frontier_phi_22_46_ladder_1;
        _2231 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2211 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1243, _1244, _1245), _2138);
        _2227 = _2211.x * cbModelParam._m0[1u].z;
        _2229 = _2211.y * cbModelParam._m0[1u].z;
        _2231 = _2211.z * cbModelParam._m0[1u].z;
    }
    float _2243 = ((((1.0 - _1264) * ((_1251 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1264 * _1251)) * _1235;
    float _2244 = _2243 * ((cbModelParam._m0[1u].w * (_2227 - _2129)) + _2129);
    float _2245 = _2243 * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2246 = _2243 * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2249 = fma(_2246, cbSceneParam._m0[89u].z, fma(_2245, cbSceneParam._m0[89u].y, _2244 * cbSceneParam._m0[89u].x));
    float _2252 = fma(_2246, cbSceneParam._m0[90u].z, fma(_2245, cbSceneParam._m0[90u].y, _2244 * cbSceneParam._m0[90u].x));
    float _2255 = fma(_2246, cbSceneParam._m0[91u].z, fma(_2245, cbSceneParam._m0[91u].y, _2244 * cbSceneParam._m0[91u].x));
    vec4 _2263 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1172, _1173));
    float _2265 = _2263.w;
    float _2277 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2265);
    float _2278 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2265);
    float _2279 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2265);
    uvec4 _2283 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2285 = _2283.x * 14u;
    uint _2286 = _2285 + 13u;
    float _2293 = _1235 + (-1.0);
    float _2298 = (cbLight._m0[_2286].x * _2293) + 1.0;
    float _2299 = (cbLight._m0[_2286].y * _2293) + 1.0;
    float _2300 = (cbLight._m0[_2286].z * _2293) + 1.0;
    float _2301 = (cbLight._m0[_2286].w * _2293) + 1.0;
    uint _2302 = _2285 + 5u;
    float _2308 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2312 = _2285 + 4u;
    float _2321 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2325 = _2285 | 1u;
    float _2336 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_1086, _1087, _1088));
    float _2339 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_1086, _1087, _1088));
    float _4530 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _4541 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2346 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2353 = ((cbLight._m0[_2302].x * _2308) * _2346) + (((cbLight._m0[_2312].x * _2277) * _2321) * _2344);
    float _2354 = ((_2308 * cbLight._m0[_2302].y) * _2346) + (((cbLight._m0[_2312].y * _2278) * _2321) * _2344);
    float _2355 = ((_2308 * cbLight._m0[_2302].z) * _2346) + (((cbLight._m0[_2312].z * _2279) * _2321) * _2344);
    uvec4 _2359 = floatBitsToUint(cbLight._m0[_2285 + 12u]);
    bool _2361 = _2359.x == 0u;
    float _2372;
    float _2374;
    float _2376;
    if (_2361)
    {
        _2372 = _2353;
        _2374 = _2354;
        _2376 = _2355;
    }
    else
    {
        uint _2380 = _2285 + 6u;
        float _2396 = (dot(vec3(cbLight._m0[_2285 + 2u].xyz), vec3(_1086, _1087, _1088)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4552 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2399 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2372 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2353;
        _2374 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2354;
        _2376 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2355;
    }
    bool _2379 = _2359.y == 0u;
    float _2417;
    float _2419;
    float _2421;
    if (_2379)
    {
        _2417 = _2372;
        _2419 = _2374;
        _2421 = _2376;
    }
    else
    {
        uint _2579 = _2285 + 7u;
        float _2595 = (dot(vec3(cbLight._m0[_2285 + 3u].xyz), vec3(_1086, _1087, _1088)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4568 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2598 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2417 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2372;
        _2419 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2374;
        _2421 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2376;
    }
    uint _2424 = _2285 + 8u;
    float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _1089) * 0.949999988079071044921875);
    float _2438 = _2437 * _2437;
    float _2439 = cbLight._m0[_2285].x + _1164;
    float _2440 = cbLight._m0[_2285].y + _1165;
    float _2441 = cbLight._m0[_2285].z + _1166;
    float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
    float _2446 = _2445 * _2439;
    float _2447 = _2445 * _2440;
    float _2448 = _2445 * _2441;
    float _2449 = dot(vec3(_1086, _1087, _1088), vec3(cbLight._m0[_2285].xyz));
    float _4584 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _2453 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2454 = dot(vec3(_1086, _1087, _1088), vec3(_2446, _2447, _2448));
    float _4606 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2446, _2447, _2448));
    float _4617 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2438 * _2438;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2478 = 1.0 - _2438;
    float _2489 = (0.5 / (((_2453 * ((_2452 * _2478) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2478) + _2438) * _2452))) * _2452;
    float _4628 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    uint _2505 = _2285 + 9u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _1089) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2325].x + _1164;
    float _2519 = cbLight._m0[_2325].y + _1165;
    float _2520 = cbLight._m0[_2325].z + _1166;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_1086, _1087, _1088), vec3(cbLight._m0[_2325].xyz));
    float _4639 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2532 = dot(vec3(_1086, _1087, _1088), vec3(_2525, _2526, _2527));
    float _4650 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2525, _2526, _2527));
    float _4661 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2517 * _2517;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2554 = 1.0 - _2517;
    float _2564 = (0.5 / (((_2453 * ((_2531 * _2554) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2554) + _2517) * _2531))) * _2531;
    float _4672 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    float _2576 = (((_2553 * cbLight._m0[_2505].x) * _2566) * _2308) + ((((cbLight._m0[_2424].x * _2277) * _2477) * _2491) * _2321);
    float _2577 = (((_2553 * cbLight._m0[_2505].y) * _2566) * _2308) + ((((cbLight._m0[_2424].y * _2278) * _2477) * _2491) * _2321);
    float _2578 = (((_2553 * cbLight._m0[_2505].z) * _2566) * _2308) + ((((cbLight._m0[_2424].z * _2279) * _2477) * _2491) * _2321);
    float _2640;
    float _2642;
    float _2644;
    if (_2361)
    {
        _2640 = _2576;
        _2642 = _2577;
        _2644 = _2578;
    }
    else
    {
        uint _2646 = _2285 + 2u;
        uint _2650 = _2285 + 10u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _1089) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _1164;
        float _2667 = cbLight._m0[_2646].y + _1165;
        float _2668 = cbLight._m0[_2646].z + _1166;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_1086, _1087, _1088), vec3(cbLight._m0[_2646].xyz));
        float _4683 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2680 = dot(vec3(_1086, _1087, _1088), vec3(_2673, _2674, _2675));
        float _4694 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4705 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2701 = (exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2702 = 1.0 - _2665;
        float _2712 = (0.5 / (((_2453 * ((_2679 * _2702) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2702) + _2665) * _2679))) * _2679;
        float _4716 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2640 = (((_2701 * cbLight._m0[_2650].x) * _2714) * _2715) + _2576;
        _2642 = (((_2701 * cbLight._m0[_2650].y) * _2714) * _2715) + _2577;
        _2644 = (((_2701 * cbLight._m0[_2650].z) * _2714) * _2715) + _2578;
    }
    float _2750;
    float _2752;
    float _2754;
    if (_2379)
    {
        _2750 = _2640;
        _2752 = _2642;
        _2754 = _2644;
    }
    else
    {
        uint _2761 = _2285 + 3u;
        uint _2765 = _2285 + 11u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _1089) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _1164;
        float _2782 = cbLight._m0[_2761].y + _1165;
        float _2783 = cbLight._m0[_2761].z + _1166;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_1086, _1087, _1088), vec3(cbLight._m0[_2761].xyz));
        float _4732 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2795 = dot(vec3(_1086, _1087, _1088), vec3(_2788, _2789, _2790));
        float _4743 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4754 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2816 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2817 = 1.0 - _2780;
        float _2827 = (0.5 / (((_2453 * ((_2794 * _2817) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2817) + _2780) * _2794))) * _2794;
        float _4765 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2750 = (((_2816 * cbLight._m0[_2765].x) * _2829) * _2830) + _2640;
        _2752 = (((_2816 * cbLight._m0[_2765].y) * _2829) * _2830) + _2642;
        _2754 = (((_2816 * cbLight._m0[_2765].z) * _2829) * _2830) + _2644;
    }
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_2283.y == 0u)
    {
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2905;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2905;
        float _2908 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2905;
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.x;
        uint _2932 = uint((float(_2920.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1173) / _2921))) + floor(float(uint(cbSceneParam._m0[85u].x * _1172) / _2921)));
        float _2942 = (log2(_2908 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        uint _2946 = uint(isnan(14.0) ? _2943 : (isnan(_2943) ? 14.0 : min(_2943, 14.0)));
        uvec4 _2951 = texelFetch(g_lightClusterGridBuffer, int(((_2946 << 2u) + (_2932 << 6u)) >> 2u));
        uint _2952 = _2951.x;
        uint _2953 = _2920.z;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((((1u << ((_2953 >> 4u) & 15u)) + 4294967295u) & _2952) == 0u) || ((_2953 & 240u) == 0u))
        {
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
        }
        else
        {
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3214)
                {
                    frontier_phi_61_pred = _3198;
                    frontier_phi_61_pred_1 = _3203;
                    frontier_phi_61_pred_2 = _3202;
                    frontier_phi_61_pred_3 = _3201;
                    frontier_phi_61_pred_4 = _3200;
                    frontier_phi_61_pred_5 = _3199;
                }
                else
                {
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    uint _3328;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3213;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    for (;;)
                    {
                        uint _3332 = uint(findLSB(_3328)) + (_3204 << 5u);
                        uint _3329 = (_3328 + 4294967295u) & _3328;
                        uint _3334 = _3332 * 48u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3354 = (_3332 * 48u) + 4u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3373 = (_3332 * 48u) + 8u;
                        vec3 _3384 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x));
                        float _3388 = _3348.x - _2906;
                        float _3389 = _3348.y - _2907;
                        float _3390 = _3348.z - _2908;
                        float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                        float _3394 = inversesqrt(_3391);
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3398 = dot(vec3(_1191, _1194, _1197), vec3(_3395, _3396, _3397));
                        float _3403 = 1.0 - (_3391 * _3348.w);
                        float _4791 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3405 = sqrt(_3391) * _3367.w;
                        float _3408 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3398) + _3409;
                        float _3415 = _3405 * _3405;
                        float _3419 = ((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3404) / ((_3415 * 0.699999988079071044921875) + 1.0);
                        float _3423 = (-0.0) - _2906;
                        float _3424 = (-0.0) - _2907;
                        float _3425 = (-0.0) - _2908;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3440 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _1251;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3430 + _3395;
                        float _3452 = _3431 + _3396;
                        float _3453 = _3432 + _3397;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_1191, _1194, _1197), vec3(_3430, _3431, _3432));
                        float _4807 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3465 = dot(vec3(_1191, _1194, _1197), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4818 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3408 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3398) + _3474;
                        float _4829 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4840 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3472 * _3472) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125))) * _3404;
                        _3257 = (_3419 * _3367.x) + _3325;
                        _3258 = (_3419 * _3367.y) + _3326;
                        _3259 = (_3419 * _3367.z) + _3327;
                        _3254 = (_3500 * _3384.x) + _3322;
                        _3255 = (_3500 * _3384.y) + _3323;
                        _3256 = (_3500 * _3384.z) + _3324;
                        if (_3329 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3329;
                        }
                    }
                    frontier_phi_61_pred = _3254;
                    frontier_phi_61_pred_1 = _3259;
                    frontier_phi_61_pred_2 = _3258;
                    frontier_phi_61_pred_3 = _3257;
                    frontier_phi_61_pred_4 = _3256;
                    frontier_phi_61_pred_5 = _3255;
                }
                _3054 = frontier_phi_61_pred;
                _3064 = frontier_phi_61_pred_1;
                _3062 = frontier_phi_61_pred_2;
                _3060 = frontier_phi_61_pred_3;
                _3058 = frontier_phi_61_pred_4;
                _3056 = frontier_phi_61_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3054;
                    _3199 = _3056;
                    _3200 = _3058;
                    _3201 = _3060;
                    _3202 = _3062;
                    _3203 = _3064;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
        }
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.z;
        uint _3070 = (_3068 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3070) & _2952) == 0u)
        {
            _3166 = _3053;
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
            _3176 = _3063;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
            float _3192 = _3191 * _2906;
            float _3193 = _3191 * _2907;
            float _3194 = _3191 * _2908;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3070 < ((_3068 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3305 = _3053;
                float _3306 = _3055;
                float _3307 = _3057;
                float _3308 = _3059;
                float _3309 = _3061;
                float _3310 = _3063;
                uint _3311 = _3070;
                uint _3320;
                bool _3321;
                for (;;)
                {
                    _3320 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3311 << 2u)) >> 2u)).x;
                    _3321 = _3320 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3321)
                    {
                        frontier_phi_67_pred = _3308;
                        frontier_phi_67_pred_1 = _3309;
                        frontier_phi_67_pred_2 = _3310;
                        frontier_phi_67_pred_3 = _3307;
                        frontier_phi_67_pred_4 = _3306;
                        frontier_phi_67_pred_5 = _3305;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        float _3522 = _3309;
                        float _3523 = _3310;
                        uint _3524 = _3320;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3608;
                        float _3654;
                        bool _3655;
                        for (;;)
                        {
                            uint _3535 = ((_3311 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3535 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3535 * 40u) + 24u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3629 = (_3535 * 40u) + 28u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3654 = fma(_2908, _3642.z, fma(_2907, _3642.y, _3642.x * _2906)) + _3642.w;
                            _3655 = !((fma(_2908, _3623.z, fma(_2907, _3623.y, _3623.x * _2906)) + _3623.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3655)
                            {
                                float _3682 = _3550.x - _2906;
                                float _3683 = _3550.y - _2907;
                                float _3684 = _3550.z - _2908;
                                float _3685 = dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684));
                                float _3688 = inversesqrt(_3685);
                                float _3689 = _3688 * _3682;
                                float _3690 = _3688 * _3683;
                                float _3691 = _3688 * _3684;
                                float _3695 = 1.0 - (_3685 / (_3551 * _3551));
                                float _4851 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3700 = sqrt(_3685) * _3566.w;
                                float _3702 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                                float _3703 = _3702 * _3702;
                                float _3706 = ((1.0 - _3703) * dot(vec3(_3689, _3690, _3691), vec3(_1191, _1194, _1197))) + _3703;
                                float _3709 = _3700 * _3700;
                                float _3713 = (fma(_2908, _3593.z, fma(_2907, _3593.y, _3593.x * _2906)) + _3593.w) / _3654;
                                float _3714 = (fma(_2908, _3608.z, fma(_2907, _3608.y, _3608.x * _2906)) + _3608.w) / _3654;
                                float _3718 = 1.0 - dot(vec2(_3713, _3714), vec2(_3713, _3714));
                                float _4867 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3720 = _3719 * (((isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))) * _3696) / ((_3709 * 0.699999988079071044921875) + 1.0));
                                float _3732 = exp2(log2(1.0 / ((_3709 * 3.5) + 5.0)) * 0.25);
                                float _3733 = 1.0 - _1251;
                                float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                                float _3741 = _3740 * _3740;
                                float _3742 = _3741 * _3741;
                                float _3743 = _3689 - _3192;
                                float _3744 = _3690 - _3193;
                                float _3745 = _3691 - _3194;
                                float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                                float _3753 = dot(vec3(_1191, _1194, _1197), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4878 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3757 = dot(vec3(_1191, _1194, _1197), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                                float _4889 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                                float _3765 = _3702 * _3741;
                                float _3766 = _3765 * _3765;
                                float _3772 = ((1.0 - _3766) * dot(vec3(_1191, _1194, _1197), vec3(_3689, _3690, _3691))) + _3766;
                                float _4900 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3774 = 1.0 - _3741;
                                float _3784 = (0.5 / (((_3773 * ((_3756 * _3774) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3741) * _3756))) * _3773;
                                float _4911 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3794 = (_3719 * _3696) * (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3764 * _3764) * ((_3709 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3794 * _3578.x;
                                frontier_phi_73_pred_1 = _3794 * _3578.y;
                                frontier_phi_73_pred_2 = _3720 * _3566.z;
                                frontier_phi_73_pred_3 = _3720 * _3566.y;
                                frontier_phi_73_pred_4 = _3720 * _3566.x;
                                frontier_phi_73_pred_5 = _3794 * _3578.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_73_pred;
                            _3799 = frontier_phi_73_pred_1;
                            _3803 = frontier_phi_73_pred_2;
                            _3802 = frontier_phi_73_pred_3;
                            _3801 = frontier_phi_73_pred_4;
                            _3800 = frontier_phi_73_pred_5;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3508;
                        frontier_phi_67_pred_1 = _3509;
                        frontier_phi_67_pred_2 = _3510;
                        frontier_phi_67_pred_3 = _3507;
                        frontier_phi_67_pred_4 = _3506;
                        frontier_phi_67_pred_5 = _3505;
                    }
                    _3173 = frontier_phi_67_pred;
                    _3175 = frontier_phi_67_pred_1;
                    _3177 = frontier_phi_67_pred_2;
                    _3171 = frontier_phi_67_pred_3;
                    _3169 = frontier_phi_67_pred_4;
                    _3167 = frontier_phi_67_pred_5;
                    uint _3312 = _3311 + 1u;
                    if (_3312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3305 = _3167;
                        _3306 = _3169;
                        _3307 = _3171;
                        _3308 = _3173;
                        _3309 = _3175;
                        _3310 = _3177;
                        _3311 = _3312;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3175;
                frontier_phi_55_56_ladder_1 = _3177;
                frontier_phi_55_56_ladder_2 = _3173;
                frontier_phi_55_56_ladder_3 = _3171;
                frontier_phi_55_56_ladder_4 = _3169;
                frontier_phi_55_56_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_55_56_ladder = _3061;
                frontier_phi_55_56_ladder_1 = _3063;
                frontier_phi_55_56_ladder_2 = _3059;
                frontier_phi_55_56_ladder_3 = _3057;
                frontier_phi_55_56_ladder_4 = _3055;
                frontier_phi_55_56_ladder_5 = _3053;
            }
            _3166 = frontier_phi_55_56_ladder_5;
            _3168 = frontier_phi_55_56_ladder_4;
            _3170 = frontier_phi_55_56_ladder_3;
            _3172 = frontier_phi_55_56_ladder_2;
            _3174 = frontier_phi_55_56_ladder;
            _3176 = frontier_phi_55_56_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1235 : (isnan(_1235) ? 1.0 : min(_1235, 1.0));
        _2965 = (_3181 * _3172) + _2417;
        _2967 = (_3181 * _3174) + _2419;
        _2969 = (_3181 * _3176) + _2421;
        _2971 = ((_3166 * 0.039999999105930328369140625) * _3181) + _2750;
        _2973 = ((_3168 * 0.039999999105930328369140625) * _3181) + _2752;
        _2975 = ((_3170 * 0.039999999105930328369140625) * _3181) + _2754;
    }
    else
    {
        _2965 = _2417;
        _2967 = _2419;
        _2969 = _2421;
        _2971 = _2750;
        _2973 = _2752;
        _2975 = _2754;
    }
    float _4927 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _4938 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _4949 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    uint _2995 = _293 + 6u;
    float _3003 = _1172 / cbSceneParam._m0[86u].x;
    float _3004 = _1173 / cbSceneParam._m0[86u].y;
    vec4 _3018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, (log2((isnan(cbSceneParam._m0[77u].w) ? _1107 : (isnan(_1107) ? cbSceneParam._m0[77u].w : min(_1107, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3020 = _3018.x;
    float _3021 = _3018.y;
    float _3022 = _3018.z;
    float _3023 = _3018.w;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_1107 > cbSceneParam._m0[78u].w)
    {
        float _3078 = isnan(_1107) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1107 : min(cbSceneParam._m0[80u].w, _1107));
        float _3079 = _3078 / _1107;
        float _3090 = _3079 * _1157;
        float _3091 = _1158 * _3079;
        float _3092 = (-0.0) - _3091;
        float _3094 = _3079 * _1159;
        float _3096 = (cbSceneParam._m0[77u].w * _3092) / _3078;
        float _3097 = _3096 + cbSceneParam._m0[79u].w;
        float _3098 = cbSceneParam._m0[79u].w - _3091;
        float _3104 = sqrt(((_3090 * _3090) + (_3091 * _3091)) + (_3094 * _3094));
        float _3107 = (1.0 - (cbSceneParam._m0[77u].w / _3078)) * _3104;
        float _3112 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3114 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3267;
        if (abs((_3092 - _3096) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3267 = ((((_3097 > 0.0) ? exp2(_3112 * _3097) : (2.0 - exp2(_3114 * _3097))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3107;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : max(_3097, _3098));
            float _3229 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : min(_3097, _3098));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3267 = ((abs(_3104 / _3092) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3112 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3112 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3114 * _3238) - exp2(_3114 * _3239)) * _3227))) + (_3107 * cbSceneParam._m0[80u].z);
        }
        vec4 _3269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, 1.0), 0.0);
        float _3278 = exp2((_3267 * (-1.44269502162933349609375)) * (1.0 - _3269.w));
        float _3279 = log2(_3278);
        float _3295 = log2(_3023);
        _3116 = (exp2(_3295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].x)) * _3269.x) / cbSceneParam._m0[78u].x)) + _3020;
        _3118 = (exp2(_3295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].y)) * _3269.y) / cbSceneParam._m0[78u].y)) + _3021;
        _3120 = (exp2(_3295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].z)) * _3269.z) / cbSceneParam._m0[78u].z)) + _3022;
        _3122 = _3278 * _3023;
    }
    else
    {
        _3116 = _3020;
        _3118 = _3021;
        _3120 = _3022;
        _3122 = _3023;
    }
    float _3134 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3135 = _3134 == 3.0;
    float _3136 = log2(_3122);
    float _3143 = exp2(_3136 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2965 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1235))) + ((_2971 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2038)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3136 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2967 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1235))) + ((_2973 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2038)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3136 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2969 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1235))) + ((_2975 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2038)) * cbPerFrame._m0[3u].x));
    float _3154 = (_3134 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3154 * (_3135 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.y = _3154 * (_3135 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.z = _3154 * (_3135 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.w = cbInstanceData._m0[_2995].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2995].w;
}


