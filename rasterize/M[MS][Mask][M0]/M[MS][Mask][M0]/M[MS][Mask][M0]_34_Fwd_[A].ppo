#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1306;
float _3664;
float _3665;
float _3666;
float _3667;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3676 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3687 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3698 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3709 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _471 = (_326.x * cbMtdParam._m0[9u].x) * ((_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357);
    float _472 = (_326.y * cbMtdParam._m0[9u].y) * ((_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358);
    float _473 = (_326.z * cbMtdParam._m0[9u].z) * ((_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359);
    float _477 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _471;
    float _480 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _472;
    float _483 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _473;
    float _491 = (((_471 - _477) * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) + _477) * 4.55000019073486328125;
    float _493 = (((_472 - _480) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _480) * 4.55000019073486328125;
    float _495 = (((_473 - _483) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _483) * 4.55000019073486328125;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    float _589 = ((_559.z - _580) * _461) + _580;
    float _592 = ((((_559.x - _578) * _461) + _578) * 2.0) + (-1.0);
    float _593 = ((((_559.y - _579) * _461) + _579) * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3720 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _656 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_642 - _643) * cbMtdParam._m0[24u].w) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3731 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _664 = (_657 * ((_514.x * cbMtdParam._m0[18u].x) - _491)) + _491;
    float _665 = (_657 * ((_514.y * cbMtdParam._m0[18u].y) - _493)) + _493;
    float _666 = (_657 * ((_514.z * cbMtdParam._m0[18u].z) - _495)) + _495;
    float _671 = (((_534.z - _589) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _589;
    float _675 = ((_615.z - _671) * cbMtdParam._m0[19u].w) + _671;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3742 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _705 = (_657 * (_688.z - _675)) + _675;
    float _714 = (_592 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_534.x * 2.0) + (-1.0)))) + (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_593 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_534.y * 2.0) + (-1.0)))) + (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _727 = (((_695 - _714) + (cbMtdParam._m0[21u].x * _714)) * _657) + _714;
    float _728 = (((_696 - _715) + (cbMtdParam._m0[21u].x * _715)) * _657) + _715;
    float _729 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) - _599)) + _599;
    float _731 = cbMtdParam._m0[22u].x + _615.w;
    float _734 = fma(_729, _236 * NORMAL.x, fma(_728, _243 * TANGENT.x, (_229 * _221) * _727));
    float _737 = fma(_729, _236 * NORMAL.y, fma(_728, _243 * TANGENT.y, (_229 * _222) * _727));
    float _740 = fma(_729, _236 * NORMAL.z, fma(_728, _243 * TANGENT.z, (_229 * _223) * _727));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3753 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _748 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3775 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3786 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3797 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    vec4 _831 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _833 = _831.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _987 = sqrt(((_817 * _817) + (_818 * _818)) + (_819 * _819));
        float _993 = (cbMatDynParam._m0[5u].x * _987) + cbMatDynParam._m0[5u].y;
        float _3808 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _998 = (cbMatDynParam._m0[5u].z * _987) + cbMatDynParam._m0[5u].w;
        float _3819 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) - _994)) + _994) < ((_833 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _866 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _869 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _882 = _270 + 9u;
    uint _883 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_883].z;
    float _3830 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _907 = ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * TEXCOORD_5.w) * _903.x;
    float _908 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _745) - _824;
    float _916 = (_911 * _746) - _825;
    float _917 = (_911 * _747) - _826;
    float _921 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _3863 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_748);
    float _936 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968));
        float _1034 = fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968));
        float _1038 = fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968));
        float _1063 = _968 + _745;
        float _1064 = _972 + _746;
        float _1065 = _976 + _747;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_745, _746, _747), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3911 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_745, _746, _747), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3944 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_745, _746, _747), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3977 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968));
        float _1352 = fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968));
        float _1356 = fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968));
        float _1379 = _968 + _745;
        float _1380 = _972 + _746;
        float _1381 = _976 + _747;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_745, _746, _747), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4040 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_745, _746, _747), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4073 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_745, _746, _747), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4106 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = _1306;
        _1627 = _1306;
        _1628 = _1306;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _915 * 0.5;
    float _1686 = _916 * 0.5;
    float _1687 = _917 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1815 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1818 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1846 = frontier_phi_17_15_ladder;
        }
        float _2046;
        if (_1815 > 0.0)
        {
            _2046 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2046 = frontier_phi_26_22_ladder;
        }
        float _2289;
        if (_1818 > 0.0)
        {
            _2289 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2289 = frontier_phi_38_33_ladder;
        }
        float _2291 = isnan(_2046) ? _1846 : (isnan(_1846) ? _2046 : min(_1846, _2046));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1812) + _1801;
        float _2297 = (_2292 * _1815) + _1805;
        float _2298 = (_2292 * _1818) + _1809;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_16_38_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_16_38_ladder_2;
        _1836 = frontier_phi_16_38_ladder_1;
        _1838 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1754);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1896 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1900 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1904 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1907 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1910 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1913 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2051;
        if (_1907 > 0.0)
        {
            _2051 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2051 = frontier_phi_28_24_ladder;
        }
        float _2316;
        if (_1910 > 0.0)
        {
            _2316 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2316 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1913 > 0.0)
        {
            _2521 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2521 = frontier_phi_49_46_ladder;
        }
        float _2523 = isnan(_2316) ? _2051 : (isnan(_2051) ? _2316 : min(_2051, _2316));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1907) + _1896;
        float _2529 = (_2524 * _1910) + _1900;
        float _2530 = (_2524 * _1913) + _1904;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_25_49_ladder = _2729.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2729.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2729.x * cbModelParam._m0[1u].z;
        }
        _1932 = frontier_phi_25_49_ladder_2;
        _1934 = frontier_phi_25_49_ladder_1;
        _1936 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1843);
        _1932 = _1916.x * cbModelParam._m0[1u].z;
        _1934 = _1916.y * cbModelParam._m0[1u].z;
        _1936 = _1916.z * cbModelParam._m0[1u].z;
    }
    float _1948 = ((((1.0 - _936) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_936 * _923)) * _907;
    float _1949 = _1948 * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1950 = _1948 * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1951 = _1948 * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1954 = fma(_1951, cbSceneParam._m0[89u].z, fma(_1950, cbSceneParam._m0[89u].y, _1949 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1951, cbSceneParam._m0[90u].z, fma(_1950, cbSceneParam._m0[90u].y, _1949 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1951, cbSceneParam._m0[91u].z, fma(_1950, cbSceneParam._m0[91u].y, _1949 * cbSceneParam._m0[91u].x));
    uvec4 _1970 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1972 = _1970.x * 14u;
    uint _1973 = _1972 + 13u;
    float _1980 = _907 + (-1.0);
    float _1985 = (cbLight._m0[_1973].x * _1980) + 1.0;
    float _1986 = (cbLight._m0[_1973].y * _1980) + 1.0;
    float _1987 = (cbLight._m0[_1973].z * _1980) + 1.0;
    float _1988 = (cbLight._m0[_1973].w * _1980) + 1.0;
    uint _1989 = _1972 + 5u;
    float _1995 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _1999 = _1972 + 4u;
    float _2005 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _2009 = _1972 | 1u;
    float _2020 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_745, _746, _747));
    float _2023 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_745, _746, _747));
    float _4242 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _4253 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2028 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2030 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2037 = ((cbLight._m0[_1989].x * _1995) * _2030) + ((cbLight._m0[_1999].x * _2005) * _2028);
    float _2038 = ((_1995 * cbLight._m0[_1989].y) * _2030) + ((_2005 * cbLight._m0[_1999].y) * _2028);
    float _2039 = ((_1995 * cbLight._m0[_1989].z) * _2030) + ((_2005 * cbLight._m0[_1999].z) * _2028);
    uvec4 _2043 = floatBitsToUint(cbLight._m0[_1972 + 12u]);
    bool _2045 = _2043.x == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2045)
    {
        _2056 = _2037;
        _2058 = _2038;
        _2060 = _2039;
    }
    else
    {
        uint _2064 = _1972 + 6u;
        float _2080 = (dot(vec3(cbLight._m0[_1972 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _4264 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2083 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2056 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _2037;
        _2058 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _2038;
        _2060 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _2039;
    }
    bool _2063 = _2043.y == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2063)
    {
        _2101 = _2056;
        _2103 = _2058;
        _2105 = _2060;
    }
    else
    {
        uint _2260 = _1972 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1972 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4280 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2279 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2101 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2056;
        _2103 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2058;
        _2105 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2060;
    }
    uint _2108 = _1972 + 8u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _748) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1972].x + _824;
    float _2124 = cbLight._m0[_1972].y + _825;
    float _2125 = cbLight._m0[_1972].z + _826;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1972].xyz));
    float _4296 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2137 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2138 = dot(vec3(_745, _746, _747), vec3(_2130, _2131, _2132));
    float _4318 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2130, _2131, _2132));
    float _4329 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2122 * _2122;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2137 * ((_2136 * _2162) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2162) + _2122) * _2136))) * _2136;
    float _4340 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    uint _2186 = _1972 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _748) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2009].x + _824;
    float _2200 = cbLight._m0[_2009].y + _825;
    float _2201 = cbLight._m0[_2009].z + _826;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2009].xyz));
    float _4351 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2213 = dot(vec3(_745, _746, _747), vec3(_2206, _2207, _2208));
    float _4362 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2206, _2207, _2208));
    float _4373 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2235 = 1.0 - _2198;
    float _2245 = (0.5 / (((_2137 * ((_2212 * _2235) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2235) + _2198) * _2212))) * _2212;
    float _4384 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2257 = (((_2234 * cbLight._m0[_2186].x) * _2247) * _1995) + (((_2161 * cbLight._m0[_2108].x) * _2175) * _2005);
    float _2258 = (((_2234 * cbLight._m0[_2186].y) * _2247) * _1995) + (((_2161 * cbLight._m0[_2108].y) * _2175) * _2005);
    float _2259 = (((_2234 * cbLight._m0[_2186].z) * _2247) * _1995) + (((_2161 * cbLight._m0[_2108].z) * _2175) * _2005);
    float _2321;
    float _2323;
    float _2325;
    if (_2045)
    {
        _2321 = _2257;
        _2323 = _2258;
        _2325 = _2259;
    }
    else
    {
        uint _2327 = _1972 + 2u;
        uint _2331 = _1972 + 10u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _748) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _824;
        float _2348 = cbLight._m0[_2327].y + _825;
        float _2349 = cbLight._m0[_2327].z + _826;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2327].xyz));
        float _4395 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2361 = dot(vec3(_745, _746, _747), vec3(_2354, _2355, _2356));
        float _4406 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4417 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2383 = 1.0 - _2346;
        float _2393 = (0.5 / (((_2137 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2383) + _2346) * _2360))) * _2360;
        float _4428 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2321 = (((_2382 * cbLight._m0[_2331].x) * _2395) * _2396) + _2257;
        _2323 = (((_2382 * cbLight._m0[_2331].y) * _2395) * _2396) + _2258;
        _2325 = (((_2382 * cbLight._m0[_2331].z) * _2395) * _2396) + _2259;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2063)
    {
        _2431 = _2321;
        _2433 = _2323;
        _2435 = _2325;
    }
    else
    {
        uint _2442 = _1972 + 3u;
        uint _2446 = _1972 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _748) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _824;
        float _2463 = cbLight._m0[_2442].y + _825;
        float _2464 = cbLight._m0[_2442].z + _826;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2442].xyz));
        float _4444 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2476 = dot(vec3(_745, _746, _747), vec3(_2469, _2470, _2471));
        float _4455 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4466 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2137 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2498) + _2461) * _2475))) * _2475;
        float _4477 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2431 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2321;
        _2433 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2323;
        _2435 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2325;
    }
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_1970.y == 0u)
    {
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2586;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2586;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2586;
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2602)));
        float _2623 = (log2(_2589 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2903)
                {
                    frontier_phi_66_pred = _2887;
                    frontier_phi_66_pred_1 = _2892;
                    frontier_phi_66_pred_2 = _2891;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2889;
                    frontier_phi_66_pred_5 = _2888;
                }
                else
                {
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    uint _3038;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2902;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3042 = uint(findLSB(_3038)) + (_2893 << 5u);
                        uint _3039 = (_3038 + 4294967295u) & _3038;
                        uint _3044 = _3042 * 48u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3064 = (_3042 * 48u) + 4u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3083 = (_3042 * 48u) + 8u;
                        vec3 _3094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x));
                        float _3098 = _3058.x - _2587;
                        float _3099 = _3058.y - _2588;
                        float _3100 = _3058.z - _2589;
                        float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                        float _3104 = inversesqrt(_3101);
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3108 = dot(vec3(_863, _866, _869), vec3(_3105, _3106, _3107));
                        float _3113 = 1.0 - (_3101 * _3058.w);
                        float _4503 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3115 = sqrt(_3101) * _3077.w;
                        float _3118 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3108) + _3119;
                        float _3125 = _3115 * _3115;
                        float _3129 = ((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3114) / ((_3125 * 0.699999988079071044921875) + 1.0);
                        float _3133 = (-0.0) - _2587;
                        float _3134 = (-0.0) - _2588;
                        float _3135 = (-0.0) - _2589;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3150 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _923;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_863, _866, _869), vec3(_3140, _3141, _3142));
                        float _4519 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3175 = dot(vec3(_863, _866, _869), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4530 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3118 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3108) + _3184;
                        float _4541 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4552 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3182 * _3182) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3114;
                        _2962 = (_3129 * _3077.x) + _3035;
                        _2963 = (_3129 * _3077.y) + _3036;
                        _2964 = (_3129 * _3077.z) + _3037;
                        _2959 = (_3210 * _3094.x) + _3032;
                        _2960 = (_3210 * _3094.y) + _3033;
                        _2961 = (_3210 * _3094.z) + _3034;
                        if (_3039 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _3039;
                        }
                    }
                    frontier_phi_66_pred = _2959;
                    frontier_phi_66_pred_1 = _2964;
                    frontier_phi_66_pred_2 = _2963;
                    frontier_phi_66_pred_3 = _2962;
                    frontier_phi_66_pred_4 = _2961;
                    frontier_phi_66_pred_5 = _2960;
                }
                _2735 = frontier_phi_66_pred;
                _2745 = frontier_phi_66_pred_1;
                _2743 = frontier_phi_66_pred_2;
                _2741 = frontier_phi_66_pred_3;
                _2739 = frontier_phi_66_pred_4;
                _2737 = frontier_phi_66_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2735;
                    _2888 = _2737;
                    _2889 = _2739;
                    _2890 = _2741;
                    _2891 = _2743;
                    _2892 = _2745;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2751) & _2633) == 0u)
        {
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
            float _2881 = _2880 * _2587;
            float _2882 = _2880 * _2588;
            float _2883 = _2880 * _2589;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _3015 = _2734;
                float _3016 = _2736;
                float _3017 = _2738;
                float _3018 = _2740;
                float _3019 = _2742;
                float _3020 = _2744;
                uint _3021 = _2751;
                uint _3030;
                bool _3031;
                for (;;)
                {
                    _3030 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                    _3031 = _3030 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3031)
                    {
                        frontier_phi_77_pred = _3020;
                        frontier_phi_77_pred_1 = _3019;
                        frontier_phi_77_pred_2 = _3018;
                        frontier_phi_77_pred_3 = _3017;
                        frontier_phi_77_pred_4 = _3016;
                        frontier_phi_77_pred_5 = _3015;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        uint _3243 = _3030;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        vec3 _3297;
                        vec4 _3312;
                        vec4 _3327;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3254 = ((_3021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3254 * 40u) + 8u;
                            _3297 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x));
                            uint _3299 = (_3254 * 40u) + 16u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3254 * 40u) + 20u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3254 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3254 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_2589, _3361.z, fma(_2588, _3361.y, _3361.x * _2587)) + _3361.w;
                            _3374 = !((fma(_2589, _3342.z, fma(_2588, _3342.y, _3342.x * _2587)) + _3342.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3269.x - _2587;
                                float _3402 = _3269.y - _2588;
                                float _3403 = _3269.z - _2589;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3270 * _3270));
                                float _4563 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3419 = sqrt(_3404) * _3285.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_863, _866, _869))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_2589, _3312.z, fma(_2588, _3312.y, _3312.x * _2587)) + _3312.w) / _3373;
                                float _3433 = (fma(_2589, _3327.z, fma(_2588, _3327.y, _3327.x * _2587)) + _3327.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4579 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _923;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2881;
                                float _3463 = _3409 - _2882;
                                float _3464 = _3410 - _2883;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4590 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3476 = dot(vec3(_863, _866, _869), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4601 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_863, _866, _869), vec3(_3408, _3409, _3410))) + _3485;
                                float _4612 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4623 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3439 * _3285.y;
                                frontier_phi_83_pred_1 = _3439 * _3285.x;
                                frontier_phi_83_pred_2 = _3513 * _3297.z;
                                frontier_phi_83_pred_3 = _3513 * _3297.y;
                                frontier_phi_83_pred_4 = _3513 * _3297.x;
                                frontier_phi_83_pred_5 = _3439 * _3285.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_83_pred;
                            _3520 = frontier_phi_83_pred_1;
                            _3519 = frontier_phi_83_pred_2;
                            _3518 = frontier_phi_83_pred_3;
                            _3517 = frontier_phi_83_pred_4;
                            _3522 = frontier_phi_83_pred_5;
                            _3227 = _3520 + _3240;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3224 = _3517 + _3237;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3229;
                        frontier_phi_77_pred_1 = _3228;
                        frontier_phi_77_pred_2 = _3227;
                        frontier_phi_77_pred_3 = _3226;
                        frontier_phi_77_pred_4 = _3225;
                        frontier_phi_77_pred_5 = _3224;
                    }
                    _2866 = frontier_phi_77_pred;
                    _2864 = frontier_phi_77_pred_1;
                    _2862 = frontier_phi_77_pred_2;
                    _2860 = frontier_phi_77_pred_3;
                    _2858 = frontier_phi_77_pred_4;
                    _2856 = frontier_phi_77_pred_5;
                    uint _3022 = _3021 + 1u;
                    if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3015 = _2856;
                        _3016 = _2858;
                        _3017 = _2860;
                        _3018 = _2862;
                        _3019 = _2864;
                        _3020 = _2866;
                        _3021 = _3022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2860;
                frontier_phi_58_59_ladder_1 = _2866;
                frontier_phi_58_59_ladder_2 = _2864;
                frontier_phi_58_59_ladder_3 = _2862;
                frontier_phi_58_59_ladder_4 = _2858;
                frontier_phi_58_59_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_58_59_ladder = _2738;
                frontier_phi_58_59_ladder_1 = _2744;
                frontier_phi_58_59_ladder_2 = _2742;
                frontier_phi_58_59_ladder_3 = _2740;
                frontier_phi_58_59_ladder_4 = _2736;
                frontier_phi_58_59_ladder_5 = _2734;
            }
            _2855 = frontier_phi_58_59_ladder_5;
            _2857 = frontier_phi_58_59_ladder_4;
            _2859 = frontier_phi_58_59_ladder;
            _2861 = frontier_phi_58_59_ladder_3;
            _2863 = frontier_phi_58_59_ladder_2;
            _2865 = frontier_phi_58_59_ladder_1;
        }
        float _2870 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2646 = (_2870 * _2861) + _2101;
        _2648 = (_2870 * _2863) + _2103;
        _2650 = (_2870 * _2865) + _2105;
        _2652 = ((_2855 * 0.039999999105930328369140625) * _2870) + _2431;
        _2654 = ((_2857 * 0.039999999105930328369140625) * _2870) + _2433;
        _2656 = ((_2859 * 0.039999999105930328369140625) * _2870) + _2435;
    }
    else
    {
        _2646 = _2101;
        _2648 = _2103;
        _2650 = _2105;
        _2652 = _2431;
        _2654 = _2433;
        _2656 = _2435;
    }
    float _4639 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4650 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4661 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2673 = ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2646 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _907))) + ((_2652 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2648 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _907))) + ((_2654 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2650 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _907))) + ((_2656 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    uint _2676 = _270 + 6u;
    float _2684 = _844 / cbSceneParam._m0[86u].x;
    float _2685 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _2760 = _2759 / _766;
        float _2771 = _2760 * _817;
        float _2772 = _818 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2775 = _2760 * _819;
        float _2777 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2772;
        float _2785 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2773 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2918 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2972 = ((abs(_2785 / _2773) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2795 * _2927) - exp2(_2795 * _2928)) * _2916))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2704);
        _2797 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2799 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2801 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2803 = _2983 * _2704;
    }
    else
    {
        _2797 = _2701;
        _2799 = _2702;
        _2801 = _2703;
        _2803 = _2704;
    }
    bool _3010;
    vec4 _2813;
    vec4 _2835;
    float _2837;
    float _2841;
    float _2842;
    float _2843;
    float _2844;
    bool _2854;
    for (;;)
    {
        _2813 = cbMatDynParam._m0[0u];
        float _2815 = roundEven(_2813.y);
        bool _2816 = _2815 == 3.0;
        float _2817 = log2(_2803);
        float _2824 = exp2(_2817 * cbSceneParam._m0[78u].x) * _2673;
        float _2825 = exp2(_2817 * cbSceneParam._m0[78u].y) * _2674;
        float _2826 = exp2(_2817 * cbSceneParam._m0[78u].z) * _2675;
        float _2833 = _833 + (-0.5);
        _2835 = cbMtdParam._m0[1u];
        _2837 = _2835.y * _2833;
        float _2840 = (_2815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2841 = _2840 * (_2816 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2797)));
        _2842 = _2840 * (_2816 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2799)));
        _2843 = _2840 * (_2816 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2801)));
        _2844 = _2833 * 0.999000012874603271484375;
        _2854 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2854)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2844) < 0.5)
            {
                _3010 = true;
                break;
            }
        }
        uint _2951 = _882 + uint(_2813.w);
        if ((cbInstanceData._m0[_2951].w < 1.0) && ((cbInstanceData._m0[_2951].w + _2844) < 0.5))
        {
            _3010 = true;
            break;
        }
        if ((_2837 + 1.0) < _2835.x)
        {
            _3010 = true;
            break;
        }
        _3010 = false;
        break;
    }
    float _3215;
    if (_3010)
    {
        discard_state = true;
        _3215 = 0.0;
    }
    else
    {
        _3215 = cbInstanceData._m0[_2676].w;
    }
    SV_Target.x = _2841;
    SV_Target.y = _2842;
    SV_Target.z = _2843;
    SV_Target.w = _3215;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
    discard_exit();
}


