#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _3733;
float _3734;
float _3735;
float _3736;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3745 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3756 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3767 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3778 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _450 = (_443 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _451 = (_443 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _452 = (_443 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3789 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) + _535;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _443) + _624;
    float _634 = ((_605.y - _625) * _443) + _625;
    float _635 = ((_605.z - _626) * _443) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_647.z - _635) * _516) + _635;
    float _663 = ((((_647.x - _633) * _516) + _633) * 2.0) + (-1.0);
    float _664 = ((((_647.y - _634) * _516) + _634) * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3800 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _725 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_711 - _712) * cbMtdParam._m0[24u].w) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3811 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _733 = (_726 * ((_563.x * cbMtdParam._m0[18u].x) - _542)) + _542;
    float _734 = (_726 * ((_563.y * cbMtdParam._m0[18u].y) - _543)) + _543;
    float _735 = (_726 * ((_563.z * cbMtdParam._m0[18u].z) - _544)) + _544;
    float _740 = (((_582.z - _660) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _660;
    float _744 = ((_684.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3822 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_726 * (_757.z - _744)) + _744;
    float _783 = (_663 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_582.x * 2.0) + (-1.0)))) + (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (_664 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_582.y * 2.0) + (-1.0)))) + (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = (((_764 - _783) + (cbMtdParam._m0[21u].x * _783)) * _726) + _783;
    float _797 = (((_765 - _784) + (cbMtdParam._m0[21u].x * _784)) * _726) + _784;
    float _798 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) - _670)) + _670;
    float _800 = cbMtdParam._m0[22u].x + _684.w;
    float _803 = fma(_798, _240 * NORMAL.x, fma(_797, _247 * TANGENT.x, (_233 * _225) * _796));
    float _806 = fma(_798, _240 * NORMAL.y, fma(_797, _247 * TANGENT.y, (_233 * _226) * _796));
    float _809 = fma(_798, _240 * NORMAL.z, fma(_797, _247 * TANGENT.z, (_233 * _227) * _796));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _3833 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _817 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3855 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3866 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3877 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_887 * _887) + (_888 * _888)) + (_889 * _889));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _3888 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _3899 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) - _1064)) + _1064) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _936 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _939 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _952 = _274 + 9u;
    uint _953 = _952 + uint(cbMatDynParam._m0[0u].w);
    float _959 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_953].x;
    float _960 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_953].y;
    float _961 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_953].z;
    float _3910 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _977 = ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_814, _815, _816), vec3(_894, _895, _896));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _814) - _894;
    float _986 = (_981 * _815) - _895;
    float _987 = (_981 * _816) - _896;
    float _991 = abs(dot(vec3(_894, _895, _896), vec3(_814, _815, _816)));
    float _3943 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_817);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1104 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1108 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1133 = _1038 + _814;
        float _1134 = _1042 + _815;
        float _1135 = _1046 + _816;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_814, _815, _816), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3991 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_814, _815, _816), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4024 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_814, _815, _816), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4057 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1421 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1425 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1448 = _1038 + _814;
        float _1449 = _1042 + _815;
        float _1450 = _1046 + _816;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_814, _815, _816), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4120 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_814, _815, _816), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4153 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_814, _815, _816), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4186 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1388)) + _1388;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1389)) + _1389;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _985 * 0.5;
    float _1755 = _986 * 0.5;
    float _1756 = _987 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1884 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1887 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1915 = frontier_phi_17_15_ladder;
        }
        float _2115;
        if (_1884 > 0.0)
        {
            _2115 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2115 = frontier_phi_26_22_ladder;
        }
        float _2358;
        if (_1887 > 0.0)
        {
            _2358 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2358 = frontier_phi_38_33_ladder;
        }
        float _2360 = isnan(_2115) ? _1915 : (isnan(_1915) ? _2115 : min(_1915, _2115));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1881) + _1870;
        float _2366 = (_2361 * _1884) + _1874;
        float _2367 = (_2361 * _1887) + _1878;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_16_38_ladder_2;
        _1905 = frontier_phi_16_38_ladder_1;
        _1907 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1979 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1982 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2120;
        if (_1976 > 0.0)
        {
            _2120 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2120 = frontier_phi_28_24_ladder;
        }
        float _2385;
        if (_1979 > 0.0)
        {
            _2385 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2385 = frontier_phi_40_35_ladder;
        }
        float _2590;
        if (_1982 > 0.0)
        {
            _2590 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2590 = frontier_phi_49_46_ladder;
        }
        float _2592 = isnan(_2385) ? _2120 : (isnan(_2120) ? _2385 : min(_2120, _2385));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _1976) + _1965;
        float _2598 = (_2593 * _1979) + _1969;
        float _2599 = (_2593 * _1982) + _1973;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2600;
        float _2603 = _2600 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2599 > _2603) || ((_2599 < _2601) || ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 < _2601) || (_2597 > _2603))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2599, cbModelParam._m0[17u].z, fma(_2598, cbModelParam._m0[17u].y, _2597 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2599, cbModelParam._m0[18u].z, fma(_2598, cbModelParam._m0[18u].y, _2597 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2599, cbModelParam._m0[19u].z, fma(_2598, cbModelParam._m0[19u].y, _2597 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_25_49_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_25_49_ladder_2;
        _2003 = frontier_phi_25_49_ladder_1;
        _2005 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2017 = ((((1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1006 * _993)) * _977;
    float _2018 = _2017 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2019 = _2017 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2020 = _2017 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _977 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2074 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2078 = _2041 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_814, _815, _816));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_814, _815, _816));
    float _4322 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4333 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2058].x * _2064) * _2099) + ((cbLight._m0[_2068].x * _2074) * _2097);
    float _2107 = ((_2064 * cbLight._m0[_2058].y) * _2099) + ((_2074 * cbLight._m0[_2068].y) * _2097);
    float _2108 = ((_2064 * cbLight._m0[_2058].z) * _2099) + ((_2074 * cbLight._m0[_2068].z) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2114)
    {
        _2125 = _2106;
        _2127 = _2107;
        _2129 = _2108;
    }
    else
    {
        uint _2133 = _2041 + 6u;
        float _2149 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4344 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2152 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2125 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _2106;
        _2127 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _2107;
        _2129 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _2108;
    }
    bool _2132 = _2112.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2132)
    {
        _2170 = _2125;
        _2172 = _2127;
        _2174 = _2129;
    }
    else
    {
        uint _2329 = _2041 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4360 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2348 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2170 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2125;
        _2172 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2127;
        _2174 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2129;
    }
    uint _2177 = _2041 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _817) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2041].x + _894;
    float _2193 = cbLight._m0[_2041].y + _895;
    float _2194 = cbLight._m0[_2041].z + _896;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2041].xyz));
    float _4376 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2206 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2207 = dot(vec3(_814, _815, _816), vec3(_2199, _2200, _2201));
    float _4398 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2199, _2200, _2201));
    float _4409 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2206 * ((_2205 * _2231) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2231) + _2191) * _2205))) * _2205;
    float _4420 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2255 = _2041 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _817) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2078].x + _894;
    float _2269 = cbLight._m0[_2078].y + _895;
    float _2270 = cbLight._m0[_2078].z + _896;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2078].xyz));
    float _4431 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2282 = dot(vec3(_814, _815, _816), vec3(_2275, _2276, _2277));
    float _4442 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2275, _2276, _2277));
    float _4453 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2304 = 1.0 - _2267;
    float _2314 = (0.5 / (((_2206 * ((_2281 * _2304) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2304) + _2267) * _2281))) * _2281;
    float _4464 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2326 = (((_2303 * cbLight._m0[_2255].x) * _2316) * _2064) + (((_2230 * cbLight._m0[_2177].x) * _2244) * _2074);
    float _2327 = (((_2303 * cbLight._m0[_2255].y) * _2316) * _2064) + (((_2230 * cbLight._m0[_2177].y) * _2244) * _2074);
    float _2328 = (((_2303 * cbLight._m0[_2255].z) * _2316) * _2064) + (((_2230 * cbLight._m0[_2177].z) * _2244) * _2074);
    float _2390;
    float _2392;
    float _2394;
    if (_2114)
    {
        _2390 = _2326;
        _2392 = _2327;
        _2394 = _2328;
    }
    else
    {
        uint _2396 = _2041 + 2u;
        uint _2400 = _2041 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _817) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _894;
        float _2417 = cbLight._m0[_2396].y + _895;
        float _2418 = cbLight._m0[_2396].z + _896;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2396].xyz));
        float _4475 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2430 = dot(vec3(_814, _815, _816), vec3(_2423, _2424, _2425));
        float _4486 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4497 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2452 = 1.0 - _2415;
        float _2462 = (0.5 / (((_2206 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2452) + _2415) * _2429))) * _2429;
        float _4508 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2390 = (((_2451 * cbLight._m0[_2400].x) * _2464) * _2465) + _2326;
        _2392 = (((_2451 * cbLight._m0[_2400].y) * _2464) * _2465) + _2327;
        _2394 = (((_2451 * cbLight._m0[_2400].z) * _2464) * _2465) + _2328;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2132)
    {
        _2500 = _2390;
        _2502 = _2392;
        _2504 = _2394;
    }
    else
    {
        uint _2511 = _2041 + 3u;
        uint _2515 = _2041 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _817) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _894;
        float _2532 = cbLight._m0[_2511].y + _895;
        float _2533 = cbLight._m0[_2511].z + _896;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2511].xyz));
        float _4524 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2545 = dot(vec3(_814, _815, _816), vec3(_2538, _2539, _2540));
        float _4535 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4546 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2566 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2567 = 1.0 - _2530;
        float _2577 = (0.5 / (((_2206 * ((_2544 * _2567) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2567) + _2530) * _2544))) * _2544;
        float _4557 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2500 = (((_2566 * cbLight._m0[_2515].x) * _2579) * _2580) + _2390;
        _2502 = (((_2566 * cbLight._m0[_2515].y) * _2579) * _2580) + _2392;
        _2504 = (((_2566 * cbLight._m0[_2515].z) * _2579) * _2580) + _2394;
    }
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_2039.y == 0u)
    {
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2655;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2655;
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2655;
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.x;
        uint _2682 = uint((float(_2670.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _2671))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _2671)));
        float _2692 = (log2(_2658 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2693 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        uint _2696 = uint(isnan(14.0) ? _2693 : (isnan(_2693) ? 14.0 : min(_2693, 14.0)));
        uvec4 _2701 = texelFetch(g_lightClusterGridBuffer, int(((_2696 << 2u) + (_2682 << 6u)) >> 2u));
        uint _2702 = _2701.x;
        uint _2703 = _2670.z;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((((1u << ((_2703 >> 4u) & 15u)) + 4294967295u) & _2702) == 0u) || ((_2703 & 240u) == 0u))
        {
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
        }
        else
        {
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2972)
                {
                    frontier_phi_66_pred = _2956;
                    frontier_phi_66_pred_1 = _2961;
                    frontier_phi_66_pred_2 = _2960;
                    frontier_phi_66_pred_3 = _2959;
                    frontier_phi_66_pred_4 = _2958;
                    frontier_phi_66_pred_5 = _2957;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2971;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2962 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2656;
                        float _3168 = _3127.y - _2657;
                        float _3169 = _3127.z - _2658;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_933, _936, _939), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4583 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2656;
                        float _3203 = (-0.0) - _2657;
                        float _3204 = (-0.0) - _2658;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _993;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_933, _936, _939), vec3(_3209, _3210, _3211));
                        float _4599 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3244 = dot(vec3(_933, _936, _939), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4610 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4621 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4632 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3031 = (_3198 * _3146.x) + _3104;
                        _3032 = (_3198 * _3146.y) + _3105;
                        _3033 = (_3198 * _3146.z) + _3106;
                        _3028 = (_3279 * _3163.x) + _3101;
                        _3029 = (_3279 * _3163.y) + _3102;
                        _3030 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3033;
                    frontier_phi_66_pred_2 = _3032;
                    frontier_phi_66_pred_3 = _3031;
                    frontier_phi_66_pred_4 = _3030;
                    frontier_phi_66_pred_5 = _3029;
                }
                _2804 = frontier_phi_66_pred;
                _2814 = frontier_phi_66_pred_1;
                _2812 = frontier_phi_66_pred_2;
                _2810 = frontier_phi_66_pred_3;
                _2808 = frontier_phi_66_pred_4;
                _2806 = frontier_phi_66_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2804;
                    _2957 = _2806;
                    _2958 = _2808;
                    _2959 = _2810;
                    _2960 = _2812;
                    _2961 = _2814;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
        }
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.z;
        uint _2820 = (_2818 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2820) & _2702) == 0u)
        {
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
            float _2950 = _2949 * _2656;
            float _2951 = _2949 * _2657;
            float _2952 = _2949 * _2658;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2820 < ((_2818 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3084 = _2803;
                float _3085 = _2805;
                float _3086 = _2807;
                float _3087 = _2809;
                float _3088 = _2811;
                float _3089 = _2813;
                uint _3090 = _2820;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3100)
                    {
                        frontier_phi_77_pred = _3089;
                        frontier_phi_77_pred_1 = _3088;
                        frontier_phi_77_pred_2 = _3087;
                        frontier_phi_77_pred_3 = _3086;
                        frontier_phi_77_pred_4 = _3085;
                        frontier_phi_77_pred_5 = _3084;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        uint _3312 = _3099;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3396;
                        float _3442;
                        bool _3443;
                        for (;;)
                        {
                            uint _3323 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3323 * 40u) + 20u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3323 * 40u) + 24u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3417 = (_3323 * 40u) + 28u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3442 = fma(_2658, _3430.z, fma(_2657, _3430.y, _3430.x * _2656)) + _3430.w;
                            _3443 = !((fma(_2658, _3411.z, fma(_2657, _3411.y, _3411.x * _2656)) + _3411.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3443)
                            {
                                float _3470 = _3338.x - _2656;
                                float _3471 = _3338.y - _2657;
                                float _3472 = _3338.z - _2658;
                                float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                                float _3476 = inversesqrt(_3473);
                                float _3477 = _3476 * _3470;
                                float _3478 = _3476 * _3471;
                                float _3479 = _3476 * _3472;
                                float _3483 = 1.0 - (_3473 / (_3339 * _3339));
                                float _4643 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3488 = sqrt(_3473) * _3354.w;
                                float _3490 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                                float _3491 = _3490 * _3490;
                                float _3494 = ((1.0 - _3491) * dot(vec3(_3477, _3478, _3479), vec3(_933, _936, _939))) + _3491;
                                float _3497 = _3488 * _3488;
                                float _3501 = (fma(_2658, _3381.z, fma(_2657, _3381.y, _3381.x * _2656)) + _3381.w) / _3442;
                                float _3502 = (fma(_2658, _3396.z, fma(_2657, _3396.y, _3396.x * _2656)) + _3396.w) / _3442;
                                float _3506 = 1.0 - dot(vec2(_3501, _3502), vec2(_3501, _3502));
                                float _4659 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3508 = _3507 * (((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3484) / ((_3497 * 0.699999988079071044921875) + 1.0));
                                float _3520 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                                float _3521 = 1.0 - _993;
                                float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                                float _3529 = _3528 * _3528;
                                float _3530 = _3529 * _3529;
                                float _3531 = _3477 - _2950;
                                float _3532 = _3478 - _2951;
                                float _3533 = _3479 - _2952;
                                float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                                float _3541 = dot(vec3(_933, _936, _939), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4670 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3545 = dot(vec3(_933, _936, _939), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                                float _4681 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                                float _3553 = _3490 * _3529;
                                float _3554 = _3553 * _3553;
                                float _3560 = ((1.0 - _3554) * dot(vec3(_933, _936, _939), vec3(_3477, _3478, _3479))) + _3554;
                                float _4692 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3562 = 1.0 - _3529;
                                float _3572 = (0.5 / (((_3561 * ((_3544 * _3562) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3529) * _3544))) * _3561;
                                float _4703 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3582 = (_3507 * _3484) * (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3552 * _3552) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3508 * _3354.y;
                                frontier_phi_83_pred_1 = _3508 * _3354.x;
                                frontier_phi_83_pred_2 = _3582 * _3366.z;
                                frontier_phi_83_pred_3 = _3582 * _3366.y;
                                frontier_phi_83_pred_4 = _3582 * _3366.x;
                                frontier_phi_83_pred_5 = _3508 * _3354.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3590 = frontier_phi_83_pred;
                            _3589 = frontier_phi_83_pred_1;
                            _3588 = frontier_phi_83_pred_2;
                            _3587 = frontier_phi_83_pred_3;
                            _3586 = frontier_phi_83_pred_4;
                            _3591 = frontier_phi_83_pred_5;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3298;
                        frontier_phi_77_pred_1 = _3297;
                        frontier_phi_77_pred_2 = _3296;
                        frontier_phi_77_pred_3 = _3295;
                        frontier_phi_77_pred_4 = _3294;
                        frontier_phi_77_pred_5 = _3293;
                    }
                    _2935 = frontier_phi_77_pred;
                    _2933 = frontier_phi_77_pred_1;
                    _2931 = frontier_phi_77_pred_2;
                    _2929 = frontier_phi_77_pred_3;
                    _2927 = frontier_phi_77_pred_4;
                    _2925 = frontier_phi_77_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2925;
                        _3085 = _2927;
                        _3086 = _2929;
                        _3087 = _2931;
                        _3088 = _2933;
                        _3089 = _2935;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2929;
                frontier_phi_58_59_ladder_1 = _2935;
                frontier_phi_58_59_ladder_2 = _2933;
                frontier_phi_58_59_ladder_3 = _2931;
                frontier_phi_58_59_ladder_4 = _2927;
                frontier_phi_58_59_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_58_59_ladder = _2807;
                frontier_phi_58_59_ladder_1 = _2813;
                frontier_phi_58_59_ladder_2 = _2811;
                frontier_phi_58_59_ladder_3 = _2809;
                frontier_phi_58_59_ladder_4 = _2805;
                frontier_phi_58_59_ladder_5 = _2803;
            }
            _2924 = frontier_phi_58_59_ladder_5;
            _2926 = frontier_phi_58_59_ladder_4;
            _2928 = frontier_phi_58_59_ladder;
            _2930 = frontier_phi_58_59_ladder_3;
            _2932 = frontier_phi_58_59_ladder_2;
            _2934 = frontier_phi_58_59_ladder_1;
        }
        float _2939 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _2715 = (_2939 * _2930) + _2170;
        _2717 = (_2939 * _2932) + _2172;
        _2719 = (_2939 * _2934) + _2174;
        _2721 = ((_2924 * 0.039999999105930328369140625) * _2939) + _2500;
        _2723 = ((_2926 * 0.039999999105930328369140625) * _2939) + _2502;
        _2725 = ((_2928 * 0.039999999105930328369140625) * _2939) + _2504;
    }
    else
    {
        _2715 = _2170;
        _2717 = _2172;
        _2719 = _2174;
        _2721 = _2500;
        _2723 = _2502;
        _2725 = _2504;
    }
    float _4719 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4730 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4741 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2742 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2715 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _977))) + ((_2721 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2743 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2717 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _977))) + ((_2723 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2744 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2719 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _977))) + ((_2725 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    uint _2745 = _274 + 6u;
    float _2753 = _914 / cbSceneParam._m0[86u].x;
    float _2754 = _915 / cbSceneParam._m0[86u].y;
    vec4 _2768 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2770 = _2768.x;
    float _2771 = _2768.y;
    float _2772 = _2768.z;
    float _2773 = _2768.w;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _2828 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _2829 = _2828 / _835;
        float _2840 = _2829 * _887;
        float _2841 = _888 * _2829;
        float _2842 = (-0.0) - _2841;
        float _2844 = _2829 * _889;
        float _2846 = (cbSceneParam._m0[77u].w * _2842) / _2828;
        float _2847 = _2846 + cbSceneParam._m0[79u].w;
        float _2848 = cbSceneParam._m0[79u].w - _2841;
        float _2854 = sqrt(((_2840 * _2840) + (_2841 * _2841)) + (_2844 * _2844));
        float _2857 = (1.0 - (cbSceneParam._m0[77u].w / _2828)) * _2854;
        float _2862 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2864 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2842 - _2846) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2847 > 0.0) ? exp2(_2862 * _2847) : (2.0 - exp2(_2864 * _2847))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2857;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : max(_2847, _2848));
            float _2987 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : min(_2847, _2848));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3041 = ((abs(_2854 / _2842) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2862 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2862 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2864 * _2996) - exp2(_2864 * _2997)) * _2985))) + (_2857 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2773);
        _2866 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2770;
        _2868 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2771;
        _2870 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2772;
        _2872 = _3052 * _2773;
    }
    else
    {
        _2866 = _2770;
        _2868 = _2771;
        _2870 = _2772;
        _2872 = _2773;
    }
    bool _3079;
    vec4 _2882;
    vec4 _2904;
    float _2906;
    float _2910;
    float _2911;
    float _2912;
    float _2913;
    bool _2923;
    for (;;)
    {
        _2882 = cbMatDynParam._m0[0u];
        float _2884 = roundEven(_2882.y);
        bool _2885 = _2884 == 3.0;
        float _2886 = log2(_2872);
        float _2893 = exp2(_2886 * cbSceneParam._m0[78u].x) * _2742;
        float _2894 = exp2(_2886 * cbSceneParam._m0[78u].y) * _2743;
        float _2895 = exp2(_2886 * cbSceneParam._m0[78u].z) * _2744;
        float _2902 = _903 + (-0.5);
        _2904 = cbMtdParam._m0[1u];
        _2906 = _2904.y * _2902;
        float _2909 = (_2884 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2910 = _2909 * (_2885 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2866)));
        _2911 = _2909 * (_2885 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2868)));
        _2912 = _2909 * (_2885 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2870)));
        _2913 = _2902 * 0.999000012874603271484375;
        _2923 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2923)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2913) < 0.5)
            {
                _3079 = true;
                break;
            }
        }
        uint _3020 = _952 + uint(_2882.w);
        if ((cbInstanceData._m0[_3020].w < 1.0) && ((cbInstanceData._m0[_3020].w + _2913) < 0.5))
        {
            _3079 = true;
            break;
        }
        if ((_2906 + 1.0) < _2904.x)
        {
            _3079 = true;
            break;
        }
        _3079 = false;
        break;
    }
    float _3284;
    if (_3079)
    {
        discard_state = true;
        _3284 = 0.0;
    }
    else
    {
        _3284 = cbInstanceData._m0[_2745].w;
    }
    SV_Target.x = _2910;
    SV_Target.y = _2911;
    SV_Target.z = _2912;
    SV_Target.w = _3284;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2745].w;
    discard_exit();
}


