#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1575;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3877 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3888 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3899 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3910 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _464 = (_457 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _465 = (_457 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _466 = (_457 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[24u].z) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _304) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _305) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _387.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[24u].z) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3932 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _606 = (_599 * ((_557.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _607 = (_599 * ((_557.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _608 = (_599 * ((_557.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _612 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _606;
    float _615 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _607;
    float _618 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _608;
    float _625 = ((_606 - _612) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) + _612;
    float _626 = ((_607 - _615) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _615;
    float _627 = ((_608 - _618) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _618;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _688 = _686.x;
    float _689 = _686.y;
    float _690 = _686.z;
    float _697 = ((_669.x - _688) * _457) + _688;
    float _698 = ((_669.y - _689) * _457) + _689;
    float _699 = ((_669.z - _690) * _457) + _690;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _722 = ((_711.x - _697) * _530) + _697;
    float _723 = ((_711.y - _698) * _530) + _698;
    float _724 = ((_711.z - _699) * _530) + _699;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _304) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _305) + cbTextureTilingScale._m0[23u].w));
    float _749 = ((_736.z - _724) * _599) + _724;
    float _752 = ((((_736.x - _722) * _599) + _722) * 2.0) + (-1.0);
    float _753 = ((((_736.y - _723) * _599) + _723) * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3943 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _759 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _789 = (_752 + ((((_644.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_777.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _790 = (_753 + ((((_644.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_777.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _793 = fma(_759, _254, fma(_790, _261, _789 * _247));
    float _796 = fma(_759, _255, fma(_790, _262, _789 * _248));
    float _799 = fma(_759, _256, fma(_790, _263, _789 * _249));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    vec4 _830 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _832 = _830.x;
    float _833 = 1.0 - _832;
    float _839 = (cbMtdParam._m0[19u].x + dot(vec4(_803 * _793, _803 * _796, _803 * _799, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_832 - _833) * cbMtdParam._m0[24u].w) + _833) * cbMtdParam._m0[21u].z);
    float _3954 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _842 = (-0.0) - cbMtdParam._m0[24u].x;
    float _844 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
    float _852 = _840 - ((_840 * TEXCOORD_8.x) * _845);
    float _853 = _840 - ((_840 * TEXCOORD_8.y) * _845);
    float _854 = _840 - ((_840 * TEXCOORD_8.z) * _845);
    float _861 = (_852 * (cbMtdParam._m0[17u].x - _625)) + _625;
    float _862 = (_853 * (cbMtdParam._m0[17u].y - _626)) + _626;
    float _863 = (_854 * (cbMtdParam._m0[17u].z - _627)) + _627;
    float _878 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _879 = _878 * TEXCOORD.z;
    float _880 = _878 * TEXCOORD.w;
    vec4 _892 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _879) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _880) + cbTextureTilingScale._m0[19u].w));
    float _894 = _892.x;
    float _895 = 1.0 - _894;
    float _923 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_894 - _895) * cbMtdParam._m0[24u].y) + _895) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3975 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _924 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _932 = ((((cbMtdParam._m0[10u].x - _861) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _924) + _861;
    float _933 = ((((cbMtdParam._m0[10u].y - _862) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _924) + _862;
    float _934 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _863)) * _924) + _863;
    float _939 = (((_644.z - _749) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _749;
    float _943 = ((_777.z - _939) * cbMtdParam._m0[19u].w) + _939;
    vec4 _957 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _964 = (_957.x * 2.0) + (-1.0);
    float _965 = (_957.y * 2.0) + (-1.0);
    float _966 = dot(vec2(_964, _965), vec2(_964, _965));
    float _3986 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _974 = ((_957.z - _943) * _852) + _943;
    float _977 = ((cbMtdParam._m0[23u].y - _974) * _924) + _974;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _879) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _880) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1004 = (_998.x * 2.0) + (-1.0);
    float _1005 = (_998.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _3997 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1021 = ((sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _759) * _854) + _759;
    float _1024 = (((_964 - _789) * _852) + _789) + (cbMtdParam._m0[21u].x * _789);
    float _1025 = (((_965 - _790) * _853) + _790) + (cbMtdParam._m0[21u].x * _790);
    float _1036 = (((_1004 - _1024) + (_1024 * cbMtdParam._m0[22u].z)) * _924) + _1024;
    float _1037 = (((_1005 - _1025) + (_1025 * cbMtdParam._m0[22u].z)) * _924) + _1025;
    float _1038 = (_924 * (sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _1021)) + _1021;
    float _1040 = cbMtdParam._m0[22u].x + _777.w;
    float _1043 = fma(_1038, _254, fma(_1037, _261, _1036 * _247));
    float _1046 = fma(_1038, _255, fma(_1037, _262, _1036 * _248));
    float _1049 = fma(_1038, _256, fma(_1037, _263, _1036 * _249));
    float _1053 = inversesqrt(dot(vec3(_1043, _1046, _1049), vec3(_1043, _1046, _1049)));
    float _1054 = _1053 * _1043;
    float _1055 = _1053 * _1046;
    float _1056 = _1053 * _1049;
    float _4008 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _1057 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4030 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4041 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4052 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1075 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1126 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1116);
    float _1127 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1116);
    float _1128 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1116);
    float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
    float _1133 = _1126 * _1132;
    float _1134 = _1127 * _1132;
    float _1135 = _1128 * _1132;
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1056, cbSceneParam._m0[5u].z, fma(_1055, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1054));
    float _1163 = fma(_1056, cbSceneParam._m0[6u].z, fma(_1055, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1054));
    float _1166 = fma(_1056, cbSceneParam._m0[7u].z, fma(_1055, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1054));
    uint _1180 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1186 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1180].x;
    float _1187 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1180].y;
    float _1188 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1180].z;
    float _4063 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    vec4 _1200 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1204 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * TEXCOORD_5.w) * _1200.x;
    float _1205 = dot(vec3(_1054, _1055, _1056), vec3(_1133, _1134, _1135));
    float _1208 = _1205 * 2.0;
    float _1212 = (_1208 * _1054) - _1133;
    float _1213 = (_1208 * _1055) - _1134;
    float _1214 = (_1208 * _1056) - _1135;
    float _1218 = abs(dot(vec3(_1133, _1134, _1135), vec3(_1054, _1055, _1056)));
    float _4096 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1220 = sqrt(_1057);
    float _1233 = exp2((_1220 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1220 * 3.0));
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1574;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1299 = fma(_1273, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265));
        float _1303 = fma(_1273, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265));
        float _1307 = fma(_1273, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265));
        float _1332 = _1265 + _1054;
        float _1333 = _1269 + _1055;
        float _1334 = _1273 + _1056;
        float _1344 = fma(_1334, cbModelParam._m0[26u].z, fma(_1333, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1332)) - _1299;
        float _1345 = fma(_1334, cbModelParam._m0[27u].z, fma(_1333, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1332)) - _1303;
        float _1346 = fma(_1334, cbModelParam._m0[28u].z, fma(_1333, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1332)) - _1307;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1299 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1303 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[34u].z) + ((((((_1307 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1402 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1368.x + (-0.5));
        float _1404 = _1402 * (_1368.y + (-0.5));
        float _1405 = _1402 * (_1368.z + (-0.5));
        float _1412 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1375.x + (-0.5));
        float _1414 = _1412 * (_1375.y + (-0.5));
        float _1415 = _1412 * (_1375.z + (-0.5));
        float _1422 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1382.x + (-0.5));
        float _1424 = _1422 * (_1382.y + (-0.5));
        float _1425 = _1422 * (_1382.z + (-0.5));
        float _1432 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1389.x + (-0.5));
        float _1434 = _1432 * (_1389.y + (-0.5));
        float _1435 = _1432 * (_1389.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1456 = (dot(vec3(_1054, _1055, _1056), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1466 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4144 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1468 + 1.0))) + _1473) * _1436;
        float _1483 = _1404 * 0.5;
        float _1484 = _1414 * 0.5;
        float _1485 = _1424 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_1054, _1055, _1056), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4177 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1510 + 1.0))) + _1515) * _1437;
        float _1525 = _1405 * 0.5;
        float _1526 = _1415 * 0.5;
        float _1527 = _1425 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1054, _1055, _1056), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4210 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1552 + 1.0))) + _1557) * _1438;
        _1574 = _1405;
        _1576 = _1404;
        _1577 = _1403;
        _1578 = _1415;
        _1579 = _1414;
        _1580 = _1413;
        _1581 = _1425;
        _1582 = _1424;
        _1583 = _1423;
        _1584 = _1438;
        _1585 = _1437;
        _1586 = _1436;
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1575;
        _1576 = _1575;
        _1577 = _1575;
        _1578 = _1575;
        _1579 = _1575;
        _1580 = _1575;
        _1581 = _1575;
        _1582 = _1575;
        _1583 = _1575;
        _1584 = _1575;
        _1585 = _1575;
        _1586 = _1575;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1612 = fma(_1273, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265));
        float _1616 = fma(_1273, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265));
        float _1620 = fma(_1273, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265));
        float _1643 = _1265 + _1054;
        float _1644 = _1269 + _1055;
        float _1645 = _1273 + _1056;
        float _1655 = fma(_1645, cbModelParam._m0[30u].z, fma(_1644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1643)) - _1612;
        float _1656 = fma(_1645, cbModelParam._m0[31u].z, fma(_1644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1643)) - _1616;
        float _1657 = fma(_1645, cbModelParam._m0[32u].z, fma(_1644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1643)) - _1620;
        float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
        float _1674 = ((_1661 * _1655) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1612 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1661 * _1656) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1616 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1676 = ((_1661 * _1657) / cbModelParam._m0[35u].z) + ((((((_1620 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        float _1711 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1678.x + (-0.5));
        float _1713 = _1711 * (_1678.y + (-0.5));
        float _1714 = _1711 * (_1678.z + (-0.5));
        float _1721 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1685.x + (-0.5));
        float _1723 = _1721 * (_1685.y + (-0.5));
        float _1724 = _1721 * (_1685.z + (-0.5));
        float _1731 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1692.x + (-0.5));
        float _1733 = _1731 * (_1692.y + (-0.5));
        float _1734 = _1731 * (_1692.z + (-0.5));
        float _1741 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1699.x + (-0.5));
        float _1743 = _1741 * (_1699.y + (-0.5));
        float _1744 = _1741 * (_1699.z + (-0.5));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = _1712 * 0.5;
        float _1749 = _1722 * 0.5;
        float _1750 = _1732 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_1054, _1055, _1056), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4273 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1775 + 1.0))) + _1780) * _1745;
        float _1790 = _1713 * 0.5;
        float _1791 = _1723 * 0.5;
        float _1792 = _1733 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_1054, _1055, _1056), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4306 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1817 + 1.0))) + _1822) * _1746;
        float _1832 = _1714 * 0.5;
        float _1833 = _1724 * 0.5;
        float _1834 = _1734 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_1054, _1055, _1056), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4339 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1859 + 1.0))) + _1864) * _1747;
        _1881 = _1714;
        _1882 = _1713;
        _1883 = _1712;
        _1884 = _1724;
        _1885 = _1723;
        _1886 = _1722;
        _1887 = _1734;
        _1888 = _1733;
        _1889 = _1732;
        _1890 = _1747;
        _1891 = _1746;
        _1892 = _1745;
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
    }
    else
    {
        _1881 = _1575;
        _1882 = _1575;
        _1883 = _1575;
        _1884 = _1575;
        _1885 = _1575;
        _1886 = _1575;
        _1887 = _1575;
        _1888 = _1575;
        _1889 = _1575;
        _1890 = _1575;
        _1891 = _1575;
        _1892 = _1575;
        _1893 = 0.0;
        _1894 = 0.0;
        _1895 = 0.0;
    }
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1587)) + _1587;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1588)) + _1588;
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1589)) + _1589;
    float _1928 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1905));
    float _1949 = _1212 * 0.5;
    float _1950 = _1213 * 0.5;
    float _1951 = _1214 * 0.5;
    float _1952 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1955 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1958 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1992;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1965 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1574, _1578, _1581, _1584));
        float _1969 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1576, _1579, _1582, _1585));
        float _1973 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1980 = dot(vec4(cbModelParam._m0[39u]), vec4(_1949, _1950, _1951, 1.0));
        _1992 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1992 = 1.0;
    }
    float _2003;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1994 = dot(vec4(cbModelParam._m0[40u]), vec4(_1949, _1950, _1951, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1994) ? 0.0 : (isnan(0.0) ? _1994 : max(0.0, _1994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2007 = (_2003 * cbModelParam._m0[1u].x) + (_1992 * (1.0 - cbModelParam._m0[1u].x));
    float _2017 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1057);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2017 : min(cbModelParam._m0[25u].z, _2017));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2065 = fma(_1273, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265)) + cbModelParam._m0[13u].w;
        float _2069 = fma(_1273, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265)) + cbModelParam._m0[14u].w;
        float _2073 = fma(_1273, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265)) + cbModelParam._m0[15u].w;
        float _2076 = fma(_1214, cbModelParam._m0[13u].z, fma(_1213, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1212));
        float _2079 = fma(_1214, cbModelParam._m0[14u].z, fma(_1213, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1212));
        float _2082 = fma(_1214, cbModelParam._m0[15u].z, fma(_1213, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1212));
        float _2110;
        if (_2076 > 0.0)
        {
            _2110 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2110 = frontier_phi_14_12_ladder;
        }
        float _2311;
        if (_2079 > 0.0)
        {
            _2311 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2311 = frontier_phi_23_19_ladder;
        }
        float _2554;
        if (_2082 > 0.0)
        {
            _2554 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2554 = frontier_phi_35_30_ladder;
        }
        float _2556 = isnan(_2311) ? _2110 : (isnan(_2110) ? _2311 : min(_2110, _2311));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _2076) + _2065;
        float _2562 = (_2557 * _2079) + _2069;
        float _2563 = (_2557 * _2082) + _2073;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2564;
        float _2568 = _2564 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 > _2568) || ((_2562 < _2566) || ((_2561 < _2566) || (_2561 > _2568))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2563, cbModelParam._m0[9u].z, fma(_2562, cbModelParam._m0[9u].y, _2561 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2563, cbModelParam._m0[10u].z, fma(_2562, cbModelParam._m0[10u].y, _2561 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2563, cbModelParam._m0[11u].z, fma(_2562, cbModelParam._m0[11u].y, _2561 * cbModelParam._m0[11u].x))), _2018);
            frontier_phi_13_35_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2098 = frontier_phi_13_35_ladder_2;
        _2100 = frontier_phi_13_35_ladder_1;
        _2102 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1212, _1213, _1214), _2018);
        _2098 = _2086.x * cbModelParam._m0[1u].y;
        _2100 = _2086.y * cbModelParam._m0[1u].y;
        _2102 = _2086.z * cbModelParam._m0[1u].y;
    }
    float _2106 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1057);
    float _2107 = isnan(_2106) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2106 : min(cbModelParam._m0[25u].w, _2106));
    float _2197;
    float _2199;
    float _2201;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2161 = fma(_1273, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265)) + cbModelParam._m0[21u].w;
        float _2165 = fma(_1273, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265)) + cbModelParam._m0[22u].w;
        float _2169 = fma(_1273, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265)) + cbModelParam._m0[23u].w;
        float _2172 = fma(_1214, cbModelParam._m0[21u].z, fma(_1213, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1212));
        float _2175 = fma(_1214, cbModelParam._m0[22u].z, fma(_1213, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1212));
        float _2178 = fma(_1214, cbModelParam._m0[23u].z, fma(_1213, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1212));
        float _2316;
        if (_2172 > 0.0)
        {
            _2316 = abs((1.0 - _2161) / _2172);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2161 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2316 = frontier_phi_25_21_ladder;
        }
        float _2581;
        if (_2175 > 0.0)
        {
            _2581 = abs((1.0 - _2165) / _2175);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2165 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2581 = frontier_phi_37_32_ladder;
        }
        float _2786;
        if (_2178 > 0.0)
        {
            _2786 = abs((1.0 - _2169) / _2178);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2169 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2786 = frontier_phi_46_43_ladder;
        }
        float _2788 = isnan(_2581) ? _2316 : (isnan(_2316) ? _2581 : min(_2316, _2581));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _2172) + _2161;
        float _2794 = (_2789 * _2175) + _2165;
        float _2795 = (_2789 * _2178) + _2169;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _2107);
            frontier_phi_22_46_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2197 = frontier_phi_22_46_ladder_2;
        _2199 = frontier_phi_22_46_ladder_1;
        _2201 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1212, _1213, _1214), _2107);
        _2197 = _2181.x * cbModelParam._m0[1u].z;
        _2199 = _2181.y * cbModelParam._m0[1u].z;
        _2201 = _2181.z * cbModelParam._m0[1u].z;
    }
    float _2213 = ((((1.0 - _1233) * ((_1220 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1233 * _1220)) * _1204;
    float _2214 = _2213 * ((cbModelParam._m0[1u].w * (_2197 - _2098)) + _2098);
    float _2215 = _2213 * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2216 = _2213 * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2219 = fma(_2216, cbSceneParam._m0[89u].z, fma(_2215, cbSceneParam._m0[89u].y, _2214 * cbSceneParam._m0[89u].x));
    float _2222 = fma(_2216, cbSceneParam._m0[90u].z, fma(_2215, cbSceneParam._m0[90u].y, _2214 * cbSceneParam._m0[90u].x));
    float _2225 = fma(_2216, cbSceneParam._m0[91u].z, fma(_2215, cbSceneParam._m0[91u].y, _2214 * cbSceneParam._m0[91u].x));
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _1204 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2270 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2274 = _2237 | 1u;
    float _2285 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_1054, _1055, _1056));
    float _2288 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_1054, _1055, _1056));
    float _4475 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _4486 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2295 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2302 = ((cbLight._m0[_2254].x * _2260) * _2295) + ((cbLight._m0[_2264].x * _2270) * _2293);
    float _2303 = ((_2260 * cbLight._m0[_2254].y) * _2295) + ((_2270 * cbLight._m0[_2264].y) * _2293);
    float _2304 = ((_2260 * cbLight._m0[_2254].z) * _2295) + ((_2270 * cbLight._m0[_2264].z) * _2293);
    uvec4 _2308 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2310 = _2308.x == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2310)
    {
        _2321 = _2302;
        _2323 = _2303;
        _2325 = _2304;
    }
    else
    {
        uint _2329 = _2237 + 6u;
        float _2345 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4497 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2348 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2321 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2302;
        _2323 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2303;
        _2325 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2304;
    }
    bool _2328 = _2308.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2328)
    {
        _2366 = _2321;
        _2368 = _2323;
        _2370 = _2325;
    }
    else
    {
        uint _2525 = _2237 + 7u;
        float _2541 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2542 = _2541 * _2541;
        float _4513 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2543 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2544 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2366 = (((cbLight._m0[_2525].x * 0.3183098733425140380859375) * _2543) * _2544) + _2321;
        _2368 = (((cbLight._m0[_2525].y * 0.3183098733425140380859375) * _2543) * _2544) + _2323;
        _2370 = (((cbLight._m0[_2525].z * 0.3183098733425140380859375) * _2543) * _2544) + _2325;
    }
    uint _2373 = _2237 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _1057) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2237].x + _1133;
    float _2389 = cbLight._m0[_2237].y + _1134;
    float _2390 = cbLight._m0[_2237].z + _1135;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2237].xyz));
    float _4529 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _2402 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2403 = dot(vec3(_1054, _1055, _1056), vec3(_2395, _2396, _2397));
    float _4551 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2395, _2396, _2397));
    float _4562 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4573 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2451 = _2237 + 9u;
    float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _1057) * 0.949999988079071044921875);
    float _2463 = _2462 * _2462;
    float _2464 = cbLight._m0[_2274].x + _1133;
    float _2465 = cbLight._m0[_2274].y + _1134;
    float _2466 = cbLight._m0[_2274].z + _1135;
    float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
    float _2471 = _2470 * _2464;
    float _2472 = _2470 * _2465;
    float _2473 = _2470 * _2466;
    float _2474 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2274].xyz));
    float _4584 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2478 = dot(vec3(_1054, _1055, _1056), vec3(_2471, _2472, _2473));
    float _4595 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2471, _2472, _2473));
    float _4606 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2463 * _2463;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2499 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2500 = 1.0 - _2463;
    float _2510 = (0.5 / (((_2402 * ((_2477 * _2500) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2500) + _2463) * _2477))) * _2477;
    float _4617 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2512 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    float _2522 = (((_2499 * cbLight._m0[_2451].x) * _2512) * _2260) + (((_2426 * cbLight._m0[_2373].x) * _2440) * _2270);
    float _2523 = (((_2499 * cbLight._m0[_2451].y) * _2512) * _2260) + (((_2426 * cbLight._m0[_2373].y) * _2440) * _2270);
    float _2524 = (((_2499 * cbLight._m0[_2451].z) * _2512) * _2260) + (((_2426 * cbLight._m0[_2373].z) * _2440) * _2270);
    float _2586;
    float _2588;
    float _2590;
    if (_2310)
    {
        _2586 = _2522;
        _2588 = _2523;
        _2590 = _2524;
    }
    else
    {
        uint _2592 = _2237 + 2u;
        uint _2596 = _2237 + 10u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _1057) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _1133;
        float _2613 = cbLight._m0[_2592].y + _1134;
        float _2614 = cbLight._m0[_2592].z + _1135;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2592].xyz));
        float _4628 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2626 = dot(vec3(_1054, _1055, _1056), vec3(_2619, _2620, _2621));
        float _4639 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4650 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2648 = 1.0 - _2611;
        float _2658 = (0.5 / (((_2402 * ((_2625 * _2648) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2648) + _2611) * _2625))) * _2625;
        float _4661 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2586 = (((_2647 * cbLight._m0[_2596].x) * _2660) * _2661) + _2522;
        _2588 = (((_2647 * cbLight._m0[_2596].y) * _2660) * _2661) + _2523;
        _2590 = (((_2647 * cbLight._m0[_2596].z) * _2660) * _2661) + _2524;
    }
    float _2696;
    float _2698;
    float _2700;
    if (_2328)
    {
        _2696 = _2586;
        _2698 = _2588;
        _2700 = _2590;
    }
    else
    {
        uint _2707 = _2237 + 3u;
        uint _2711 = _2237 + 11u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _1057) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _1133;
        float _2728 = cbLight._m0[_2707].y + _1134;
        float _2729 = cbLight._m0[_2707].z + _1135;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2707].xyz));
        float _4677 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2741 = dot(vec3(_1054, _1055, _1056), vec3(_2734, _2735, _2736));
        float _4688 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4699 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2762 = (exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2763 = 1.0 - _2726;
        float _2773 = (0.5 / (((_2402 * ((_2740 * _2763) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2763) + _2726) * _2740))) * _2740;
        float _4710 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2775 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2776 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2696 = (((_2762 * cbLight._m0[_2711].x) * _2775) * _2776) + _2586;
        _2698 = (((_2762 * cbLight._m0[_2711].y) * _2775) * _2776) + _2588;
        _2700 = (((_2762 * cbLight._m0[_2711].z) * _2775) * _2776) + _2590;
    }
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_2235.y == 0u)
    {
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2851;
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2851;
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2851;
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _2867)));
        float _2888 = (log2(_2854 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
        }
        else
        {
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3159)
                {
                    frontier_phi_61_pred = _3143;
                    frontier_phi_61_pred_1 = _3148;
                    frontier_phi_61_pred_2 = _3147;
                    frontier_phi_61_pred_3 = _3146;
                    frontier_phi_61_pred_4 = _3145;
                    frontier_phi_61_pred_5 = _3144;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3158;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3149 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _2852;
                        float _3334 = _3293.y - _2853;
                        float _3335 = _3293.z - _2854;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_1160, _1163, _1166), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4736 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _2852;
                        float _3369 = (-0.0) - _2853;
                        float _3370 = (-0.0) - _2854;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3385 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _1220;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3375 + _3340;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_1160, _1163, _1166), vec3(_3375, _3376, _3377));
                        float _4752 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3410 = dot(vec3(_1160, _1163, _1166), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4763 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3353 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3343) + _3419;
                        float _4774 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4785 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3417 * _3417) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3202 = (_3364 * _3312.x) + _3270;
                        _3203 = (_3364 * _3312.y) + _3271;
                        _3204 = (_3364 * _3312.z) + _3272;
                        _3199 = (_3445 * _3329.x) + _3267;
                        _3200 = (_3445 * _3329.y) + _3268;
                        _3201 = (_3445 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_61_pred = _3199;
                    frontier_phi_61_pred_1 = _3204;
                    frontier_phi_61_pred_2 = _3203;
                    frontier_phi_61_pred_3 = _3202;
                    frontier_phi_61_pred_4 = _3201;
                    frontier_phi_61_pred_5 = _3200;
                }
                _3000 = frontier_phi_61_pred;
                _3010 = frontier_phi_61_pred_1;
                _3008 = frontier_phi_61_pred_2;
                _3006 = frontier_phi_61_pred_3;
                _3004 = frontier_phi_61_pred_4;
                _3002 = frontier_phi_61_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _3000;
                    _3144 = _3002;
                    _3145 = _3004;
                    _3146 = _3006;
                    _3147 = _3008;
                    _3148 = _3010;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
        }
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.z;
        uint _3016 = (_3014 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3016) & _2898) == 0u)
        {
            _3111 = _2999;
            _3113 = _3001;
            _3115 = _3003;
            _3117 = _3005;
            _3119 = _3007;
            _3121 = _3009;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
            float _3137 = _3136 * _2852;
            float _3138 = _3136 * _2853;
            float _3139 = _3136 * _2854;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3016 < ((_3014 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3250 = _2999;
                float _3251 = _3001;
                float _3252 = _3003;
                float _3253 = _3005;
                float _3254 = _3007;
                float _3255 = _3009;
                uint _3256 = _3016;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3266)
                    {
                        frontier_phi_67_pred = _3253;
                        frontier_phi_67_pred_1 = _3254;
                        frontier_phi_67_pred_2 = _3255;
                        frontier_phi_67_pred_3 = _3252;
                        frontier_phi_67_pred_4 = _3251;
                        frontier_phi_67_pred_5 = _3250;
                    }
                    else
                    {
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3463 = _3250;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        float _3466 = _3253;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        uint _3469 = _3265;
                        uint _3470;
                        vec4 _3495;
                        float _3496;
                        vec4 _3511;
                        vec3 _3523;
                        vec4 _3538;
                        vec4 _3553;
                        float _3599;
                        bool _3600;
                        for (;;)
                        {
                            uint _3480 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3469));
                            _3470 = (_3469 + 4294967295u) & _3469;
                            uint _3482 = _3480 * 40u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3496 = _3495.w;
                            uint _3498 = (_3480 * 40u) + 4u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3480 * 40u) + 8u;
                            _3523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x));
                            uint _3525 = (_3480 * 40u) + 16u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3480 * 40u) + 20u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3480 * 40u) + 24u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3574 = (_3480 * 40u) + 28u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3599 = fma(_2854, _3587.z, fma(_2853, _3587.y, _3587.x * _2852)) + _3587.w;
                            _3600 = !((fma(_2854, _3568.z, fma(_2853, _3568.y, _3568.x * _2852)) + _3568.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3600)
                            {
                                float _3627 = _3495.x - _2852;
                                float _3628 = _3495.y - _2853;
                                float _3629 = _3495.z - _2854;
                                float _3630 = dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629));
                                float _3633 = inversesqrt(_3630);
                                float _3634 = _3633 * _3627;
                                float _3635 = _3633 * _3628;
                                float _3636 = _3633 * _3629;
                                float _3640 = 1.0 - (_3630 / (_3496 * _3496));
                                float _4796 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3645 = sqrt(_3630) * _3511.w;
                                float _3647 = 1.39999997615814208984375 / (_3645 + 1.39999997615814208984375);
                                float _3648 = _3647 * _3647;
                                float _3651 = ((1.0 - _3648) * dot(vec3(_3634, _3635, _3636), vec3(_1160, _1163, _1166))) + _3648;
                                float _3654 = _3645 * _3645;
                                float _3658 = (fma(_2854, _3538.z, fma(_2853, _3538.y, _3538.x * _2852)) + _3538.w) / _3599;
                                float _3659 = (fma(_2854, _3553.z, fma(_2853, _3553.y, _3553.x * _2852)) + _3553.w) / _3599;
                                float _3663 = 1.0 - dot(vec2(_3658, _3659), vec2(_3658, _3659));
                                float _4812 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3665 = _3664 * (((isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0))) * _3641) / ((_3654 * 0.699999988079071044921875) + 1.0));
                                float _3677 = exp2(log2(1.0 / ((_3654 * 3.5) + 5.0)) * 0.25);
                                float _3678 = 1.0 - _1220;
                                float _3685 = sqrt(1.0 - ((1.0 - (_3678 * _3678)) * (1.0 - (_3677 * _3677))));
                                float _3686 = _3685 * _3685;
                                float _3687 = _3686 * _3686;
                                float _3688 = _3634 - _3137;
                                float _3689 = _3635 - _3138;
                                float _3690 = _3636 - _3139;
                                float _3694 = inversesqrt(dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690)));
                                float _3698 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4823 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3702 = dot(vec3(_1160, _1163, _1166), vec3(_3694 * _3688, _3694 * _3689, _3694 * _3690));
                                float _4834 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3709 = ((_3705 * _3705) * (_3687 + (-1.0))) + 1.0;
                                float _3710 = _3647 * _3686;
                                float _3711 = _3710 * _3710;
                                float _3717 = ((1.0 - _3711) * dot(vec3(_1160, _1163, _1166), vec3(_3634, _3635, _3636))) + _3711;
                                float _4845 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3719 = 1.0 - _3686;
                                float _3729 = (0.5 / (((_3718 * ((_3701 * _3719) + _3686)) + 9.9999999392252902907785028219223e-09) + (((_3718 * _3719) + _3686) * _3701))) * _3718;
                                float _4856 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3739 = (_3664 * _3641) * (((_3687 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3709 * _3709) * ((_3654 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3739 * _3523.x;
                                frontier_phi_73_pred_1 = _3739 * _3523.y;
                                frontier_phi_73_pred_2 = _3665 * _3511.z;
                                frontier_phi_73_pred_3 = _3665 * _3511.y;
                                frontier_phi_73_pred_4 = _3665 * _3511.x;
                                frontier_phi_73_pred_5 = _3739 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_73_pred;
                            _3744 = frontier_phi_73_pred_1;
                            _3748 = frontier_phi_73_pred_2;
                            _3747 = frontier_phi_73_pred_3;
                            _3746 = frontier_phi_73_pred_4;
                            _3745 = frontier_phi_73_pred_5;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            if (_3470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3470;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3453;
                        frontier_phi_67_pred_1 = _3454;
                        frontier_phi_67_pred_2 = _3455;
                        frontier_phi_67_pred_3 = _3452;
                        frontier_phi_67_pred_4 = _3451;
                        frontier_phi_67_pred_5 = _3450;
                    }
                    _3118 = frontier_phi_67_pred;
                    _3120 = frontier_phi_67_pred_1;
                    _3122 = frontier_phi_67_pred_2;
                    _3116 = frontier_phi_67_pred_3;
                    _3114 = frontier_phi_67_pred_4;
                    _3112 = frontier_phi_67_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3112;
                        _3251 = _3114;
                        _3252 = _3116;
                        _3253 = _3118;
                        _3254 = _3120;
                        _3255 = _3122;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3120;
                frontier_phi_55_56_ladder_1 = _3122;
                frontier_phi_55_56_ladder_2 = _3118;
                frontier_phi_55_56_ladder_3 = _3116;
                frontier_phi_55_56_ladder_4 = _3114;
                frontier_phi_55_56_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_55_56_ladder = _3007;
                frontier_phi_55_56_ladder_1 = _3009;
                frontier_phi_55_56_ladder_2 = _3005;
                frontier_phi_55_56_ladder_3 = _3003;
                frontier_phi_55_56_ladder_4 = _3001;
                frontier_phi_55_56_ladder_5 = _2999;
            }
            _3111 = frontier_phi_55_56_ladder_5;
            _3113 = frontier_phi_55_56_ladder_4;
            _3115 = frontier_phi_55_56_ladder_3;
            _3117 = frontier_phi_55_56_ladder_2;
            _3119 = frontier_phi_55_56_ladder;
            _3121 = frontier_phi_55_56_ladder_1;
        }
        float _3126 = isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0));
        _2911 = (_3126 * _3117) + _2366;
        _2913 = (_3126 * _3119) + _2368;
        _2915 = (_3126 * _3121) + _2370;
        _2917 = ((_3111 * 0.039999999105930328369140625) * _3126) + _2696;
        _2919 = ((_3113 * 0.039999999105930328369140625) * _3126) + _2698;
        _2921 = ((_3115 * 0.039999999105930328369140625) * _3126) + _2700;
    }
    else
    {
        _2911 = _2366;
        _2913 = _2368;
        _2915 = _2370;
        _2917 = _2696;
        _2919 = _2698;
        _2921 = _2700;
    }
    float _4872 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _4883 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _4894 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    uint _2941 = _285 + 6u;
    float _2949 = _1141 / cbSceneParam._m0[86u].x;
    float _2950 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _2964 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, (log2((isnan(cbSceneParam._m0[77u].w) ? _1075 : (isnan(_1075) ? cbSceneParam._m0[77u].w : min(_1075, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2966 = _2964.x;
    float _2967 = _2964.y;
    float _2968 = _2964.z;
    float _2969 = _2964.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_1075 > cbSceneParam._m0[78u].w)
    {
        float _3024 = isnan(_1075) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1075 : min(cbSceneParam._m0[80u].w, _1075));
        float _3025 = _3024 / _1075;
        float _3036 = _3025 * _1126;
        float _3037 = _1127 * _3025;
        float _3038 = (-0.0) - _3037;
        float _3039 = _3025 * _1128;
        float _3041 = (cbSceneParam._m0[77u].w * _3038) / _3024;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3037;
        float _3049 = sqrt(((_3036 * _3036) + (_3037 * _3037)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3024)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3038 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3174 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3212 = ((abs(_3049 / _3038) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3059 * _3183) - exp2(_3059 * _3184)) * _3172))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2969);
        _3061 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2966;
        _3063 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2967;
        _3065 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2968;
        _3067 = _3223 * _2969;
    }
    else
    {
        _3061 = _2966;
        _3063 = _2967;
        _3065 = _2968;
        _3067 = _2969;
    }
    float _3079 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3080 = _3079 == 3.0;
    float _3081 = log2(_3067);
    float _3088 = exp2(_3081 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2911 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1204))) + ((_2917 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3089 = exp2(_3081 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2913 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1204))) + ((_2919 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3090 = exp2(_3081 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2915 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1204))) + ((_2921 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3099 = (_3079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3099 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.y = _3099 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.z = _3099 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.w = cbInstanceData._m0[_2941].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2941].w;
}


