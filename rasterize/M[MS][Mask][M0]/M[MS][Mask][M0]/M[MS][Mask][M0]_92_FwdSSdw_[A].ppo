#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1334;
float _3715;
float _3716;
float _3717;
float _3718;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3727 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _430 = (_423 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _431 = (_423 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _432 = (_423 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3738 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _509 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430);
    float _512 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431);
    float _515 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432);
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    float _582 = ((_554.x - _573) * _423) + _573;
    float _583 = ((_554.y - _574) * _423) + _574;
    float _584 = ((_554.z - _575) * _423) + _575;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _609 = ((_596.z - _584) * _496) + _584;
    float _612 = ((((_596.x - _582) * _496) + _582) * 2.0) + (-1.0);
    float _614 = ((((_596.y - _583) * _496) + _583) * 2.0) + (-1.0);
    float _615 = dot(vec2(_612, _614), vec2(_612, _614));
    float _3749 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _620 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _646 = (((_634.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _647 = (((_634.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _614;
    float _650 = fma(_620, _232, fma(_647, _239, _646 * _225));
    float _653 = fma(_620, _233, fma(_647, _240, _646 * _226));
    float _656 = fma(_620, _234, fma(_647, _241, _646 * _227));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _689 = _687.x;
    float _690 = 1.0 - _689;
    float _696 = (cbMtdParam._m0[19u].x + dot(vec4(_660 * _650, _660 * _653, _660 * _656, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_689 - _690) * cbMtdParam._m0[24u].w) + _690) * cbMtdParam._m0[21u].z);
    float _3760 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _704 = (_697 * ((_534.x * cbMtdParam._m0[18u].x) - _509)) + _509;
    float _705 = (_697 * ((_534.y * cbMtdParam._m0[18u].y) - _512)) + _512;
    float _706 = (_697 * ((_534.z * cbMtdParam._m0[18u].z) - _515)) + _515;
    float _710 = (cbMtdParam._m0[19u].w * (_634.z - _609)) + _609;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _730 = (_723.x * 2.0) + (-1.0);
    float _731 = (_723.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3771 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _740 = ((_723.z - _710) * _697) + _710;
    float _750 = ((sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _620) * _697) + _620;
    float _753 = (((_730 - _646) * _697) + _646) + (cbMtdParam._m0[21u].x * _646);
    float _754 = (((_731 - _647) * _697) + _647) + (cbMtdParam._m0[21u].x * _647);
    float _758 = cbMtdParam._m0[22u].x + _634.w;
    float _761 = fma(_750, _232, fma(_754, _239, _753 * _225));
    float _764 = fma(_750, _233, fma(_754, _240, _753 * _226));
    float _767 = fma(_750, _234, fma(_754, _241, _753 * _227));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _3782 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _775 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3804 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3815 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3826 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _844 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _834);
    float _845 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _834);
    float _846 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _834);
    float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
    float _851 = _844 * _850;
    float _852 = _845 * _850;
    float _853 = _846 * _850;
    vec4 _858 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _860 = _858.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_844 * _844) + (_845 * _845)) + (_846 * _846));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3837 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3848 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) - _1021)) + _1021) < ((_860 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _871 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _872 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _890 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _893 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _896 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _909 = _244 + 9u;
    uint _910 = _909 + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_910].z;
    float _3859 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _871, cbSceneParam._m0[86u].y * _872));
    float _934 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * TEXCOORD_5.w) * _930.x;
    float _935 = dot(vec3(_772, _773, _774), vec3(_851, _852, _853));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _772) - _851;
    float _943 = (_938 * _773) - _852;
    float _944 = (_938 * _774) - _853;
    float _948 = abs(dot(vec3(_851, _852, _853), vec3(_772, _773, _774)));
    float _3892 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_775);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1062 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1066 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1091 = _995 + _772;
        float _1092 = _999 + _773;
        float _1093 = _1003 + _774;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_772, _773, _774), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3940 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_772, _773, _774), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3973 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_772, _773, _774), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4006 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1379 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1383 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1406 = _995 + _772;
        float _1407 = _999 + _773;
        float _1408 = _1003 + _774;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_772, _773, _774), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4069 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_772, _773, _774), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4102 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_772, _773, _774), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4135 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = _1334;
        _1655 = _1334;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1346)) + _1346;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1347)) + _1347;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _942 * 0.5;
    float _1713 = _943 * 0.5;
    float _1714 = _944 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1842 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1845 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1873 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1842 > 0.0)
        {
            _2094 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2340;
        if (_1845 > 0.0)
        {
            _2340 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2340 = frontier_phi_38_33_ladder;
        }
        float _2342 = isnan(_2094) ? _1873 : (isnan(_1873) ? _2094 : min(_1873, _2094));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1839) + _1828;
        float _2348 = (_2343 * _1842) + _1832;
        float _2349 = (_2343 * _1845) + _1836;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_16_38_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_16_38_ladder_2;
        _1863 = frontier_phi_16_38_ladder_1;
        _1865 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1781);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1937 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1940 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2099;
        if (_1934 > 0.0)
        {
            _2099 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2367;
        if (_1937 > 0.0)
        {
            _2367 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2367 = frontier_phi_40_35_ladder;
        }
        float _2572;
        if (_1940 > 0.0)
        {
            _2572 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2572 = frontier_phi_49_46_ladder;
        }
        float _2574 = isnan(_2367) ? _2099 : (isnan(_2099) ? _2367 : min(_2099, _2367));
        float _2575 = isnan(_2572) ? _2574 : (isnan(_2574) ? _2572 : min(_2574, _2572));
        float _2579 = (_2575 * _1934) + _1923;
        float _2580 = (_2575 * _1937) + _1927;
        float _2581 = (_2575 * _1940) + _1931;
        float _2582 = _2575 * 9.9999997473787516355514526367188e-05;
        float _2583 = (-1.0) - _2582;
        float _2585 = _2582 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2581 > _2585) || ((_2581 < _2583) || ((_2580 > _2585) || ((_2580 < _2583) || ((_2579 < _2583) || (_2579 > _2585))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2581, cbModelParam._m0[17u].z, fma(_2580, cbModelParam._m0[17u].y, _2579 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2581, cbModelParam._m0[18u].z, fma(_2580, cbModelParam._m0[18u].y, _2579 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2581, cbModelParam._m0[19u].z, fma(_2580, cbModelParam._m0[19u].y, _2579 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_25_49_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_25_49_ladder_2;
        _1961 = frontier_phi_25_49_ladder_1;
        _1963 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1870);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1975 = ((((1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_963 * _950)) * _934;
    float _1976 = _1975 * ((cbModelParam._m0[1u].w * (_1959 - _1861)) + _1861);
    float _1977 = _1975 * ((cbModelParam._m0[1u].w * (_1961 - _1863)) + _1863);
    float _1978 = _1975 * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    vec4 _1995 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_871, _872));
    float _1997 = _1995.w;
    float _2009 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1997);
    float _2010 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1997);
    float _2011 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1997);
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _934 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2053 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2057 = _2017 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_772, _773, _774));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_772, _773, _774));
    float _4271 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4282 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2034].x * _2040) * _2078) + (((cbLight._m0[_2044].x * _2009) * _2053) * _2076);
    float _2086 = ((_2040 * cbLight._m0[_2034].y) * _2078) + (((cbLight._m0[_2044].y * _2010) * _2053) * _2076);
    float _2087 = ((_2040 * cbLight._m0[_2034].z) * _2078) + (((cbLight._m0[_2044].z * _2011) * _2053) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2017 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4293 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2131 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2311 = _2017 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4309 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2330 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2149 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2104;
        _2151 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2106;
        _2153 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2108;
    }
    uint _2156 = _2017 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _775) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2017].x + _851;
    float _2172 = cbLight._m0[_2017].y + _852;
    float _2173 = cbLight._m0[_2017].z + _853;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2017].xyz));
    float _4325 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2185 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2186 = dot(vec3(_772, _773, _774), vec3(_2178, _2179, _2180));
    float _4347 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2178, _2179, _2180));
    float _4358 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2185 * ((_2184 * _2210) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2210) + _2170) * _2184))) * _2184;
    float _4369 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2237 = _2017 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _775) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2057].x + _851;
    float _2251 = cbLight._m0[_2057].y + _852;
    float _2252 = cbLight._m0[_2057].z + _853;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2057].xyz));
    float _4380 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2264 = dot(vec3(_772, _773, _774), vec3(_2257, _2258, _2259));
    float _4391 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2257, _2258, _2259));
    float _4402 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2249;
    float _2296 = (0.5 / (((_2185 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2286) + _2249) * _2263))) * _2263;
    float _4413 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2308 = (((_2285 * cbLight._m0[_2237].x) * _2298) * _2040) + ((((cbLight._m0[_2156].x * _2009) * _2209) * _2223) * _2053);
    float _2309 = (((_2285 * cbLight._m0[_2237].y) * _2298) * _2040) + ((((cbLight._m0[_2156].y * _2010) * _2209) * _2223) * _2053);
    float _2310 = (((_2285 * cbLight._m0[_2237].z) * _2298) * _2040) + ((((cbLight._m0[_2156].z * _2011) * _2209) * _2223) * _2053);
    float _2372;
    float _2374;
    float _2376;
    if (_2093)
    {
        _2372 = _2308;
        _2374 = _2309;
        _2376 = _2310;
    }
    else
    {
        uint _2378 = _2017 + 2u;
        uint _2382 = _2017 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _775) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _851;
        float _2399 = cbLight._m0[_2378].y + _852;
        float _2400 = cbLight._m0[_2378].z + _853;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2378].xyz));
        float _4424 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2412 = dot(vec3(_772, _773, _774), vec3(_2405, _2406, _2407));
        float _4435 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4446 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2185 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2434) + _2397) * _2411))) * _2411;
        float _4457 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2372 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2308;
        _2374 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2309;
        _2376 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2310;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2111)
    {
        _2482 = _2372;
        _2484 = _2374;
        _2486 = _2376;
    }
    else
    {
        uint _2493 = _2017 + 3u;
        uint _2497 = _2017 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _775) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _851;
        float _2514 = cbLight._m0[_2493].y + _852;
        float _2515 = cbLight._m0[_2493].z + _853;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2493].xyz));
        float _4473 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2527 = dot(vec3(_772, _773, _774), vec3(_2520, _2521, _2522));
        float _4484 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4495 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2549 = 1.0 - _2512;
        float _2559 = (0.5 / (((_2185 * ((_2526 * _2549) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2549) + _2512) * _2526))) * _2526;
        float _4506 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2482 = (((_2548 * cbLight._m0[_2497].x) * _2561) * _2562) + _2372;
        _2484 = (((_2548 * cbLight._m0[_2497].y) * _2561) * _2562) + _2374;
        _2486 = (((_2548 * cbLight._m0[_2497].z) * _2561) * _2562) + _2376;
    }
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_2015.y == 0u)
    {
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2637;
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2637;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2637;
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.x;
        uint _2664 = uint((float(_2652.y) * floor(float(uint(cbSceneParam._m0[85u].y * _872) / _2653))) + floor(float(uint(cbSceneParam._m0[85u].x * _871) / _2653)));
        float _2674 = (log2(_2640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2675 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        uint _2678 = uint(isnan(14.0) ? _2675 : (isnan(_2675) ? 14.0 : min(_2675, 14.0)));
        uvec4 _2683 = texelFetch(g_lightClusterGridBuffer, int(((_2678 << 2u) + (_2664 << 6u)) >> 2u));
        uint _2684 = _2683.x;
        uint _2685 = _2652.z;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((((1u << ((_2685 >> 4u) & 15u)) + 4294967295u) & _2684) == 0u) || ((_2685 & 240u) == 0u))
        {
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
        }
        else
        {
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            uint _2944 = 0u;
            uint _2953;
            bool _2954;
            for (;;)
            {
                _2953 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                _2954 = _2953 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2954)
                {
                    frontier_phi_66_pred = _2938;
                    frontier_phi_66_pred_1 = _2943;
                    frontier_phi_66_pred_2 = _2942;
                    frontier_phi_66_pred_3 = _2941;
                    frontier_phi_66_pred_4 = _2940;
                    frontier_phi_66_pred_5 = _2939;
                }
                else
                {
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    uint _3089;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2953;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3093 = uint(findLSB(_3089)) + (_2944 << 5u);
                        uint _3090 = (_3089 + 4294967295u) & _3089;
                        uint _3095 = _3093 * 48u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3115 = (_3093 * 48u) + 4u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3134 = (_3093 * 48u) + 8u;
                        vec3 _3145 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x));
                        float _3149 = _3109.x - _2638;
                        float _3150 = _3109.y - _2639;
                        float _3151 = _3109.z - _2640;
                        float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                        float _3155 = inversesqrt(_3152);
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3159 = dot(vec3(_890, _893, _896), vec3(_3156, _3157, _3158));
                        float _3164 = 1.0 - (_3152 * _3109.w);
                        float _4532 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3166 = sqrt(_3152) * _3128.w;
                        float _3169 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3159) + _3170;
                        float _3176 = _3166 * _3166;
                        float _3180 = ((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3165) / ((_3176 * 0.699999988079071044921875) + 1.0);
                        float _3184 = (-0.0) - _2638;
                        float _3185 = (-0.0) - _2639;
                        float _3186 = (-0.0) - _2640;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3201 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _950;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3214 = _3193 + _3158;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_890, _893, _896), vec3(_3191, _3192, _3193));
                        float _4548 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3226 = dot(vec3(_890, _893, _896), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4559 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3169 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3159) + _3235;
                        float _4570 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4581 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3233 * _3233) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125))) * _3165;
                        _3013 = (_3180 * _3128.x) + _3086;
                        _3014 = (_3180 * _3128.y) + _3087;
                        _3015 = (_3180 * _3128.z) + _3088;
                        _3010 = (_3261 * _3145.x) + _3083;
                        _3011 = (_3261 * _3145.y) + _3084;
                        _3012 = (_3261 * _3145.z) + _3085;
                        if (_3090 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3090;
                        }
                    }
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                _2786 = frontier_phi_66_pred;
                _2796 = frontier_phi_66_pred_1;
                _2794 = frontier_phi_66_pred_2;
                _2792 = frontier_phi_66_pred_3;
                _2790 = frontier_phi_66_pred_4;
                _2788 = frontier_phi_66_pred_5;
                uint _2945 = _2944 + 1u;
                if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2938 = _2786;
                    _2939 = _2788;
                    _2940 = _2790;
                    _2941 = _2792;
                    _2942 = _2794;
                    _2943 = _2796;
                    _2944 = _2945;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
        }
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.z;
        uint _2802 = (_2800 >> 8u) & 15u;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((4294967295u << _2802) & _2684) == 0u)
        {
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
        }
        else
        {
            float _2931 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
            float _2932 = _2931 * _2638;
            float _2933 = _2931 * _2639;
            float _2934 = _2931 * _2640;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2802 < ((_2800 >> 12u) & 15u))
            {
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _3066 = _2785;
                float _3067 = _2787;
                float _3068 = _2789;
                float _3069 = _2791;
                float _3070 = _2793;
                float _3071 = _2795;
                uint _3072 = _2802;
                uint _3081;
                bool _3082;
                for (;;)
                {
                    _3081 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                    _3082 = _3081 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3082)
                    {
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        uint _3294 = _3081;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3378;
                        float _3424;
                        bool _3425;
                        for (;;)
                        {
                            uint _3305 = ((_3072 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3305 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3305 * 40u) + 24u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3399 = (_3305 * 40u) + 28u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3424 = fma(_2640, _3412.z, fma(_2639, _3412.y, _3412.x * _2638)) + _3412.w;
                            _3425 = !((fma(_2640, _3393.z, fma(_2639, _3393.y, _3393.x * _2638)) + _3393.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3425)
                            {
                                float _3452 = _3320.x - _2638;
                                float _3453 = _3320.y - _2639;
                                float _3454 = _3320.z - _2640;
                                float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                                float _3458 = inversesqrt(_3455);
                                float _3459 = _3458 * _3452;
                                float _3460 = _3458 * _3453;
                                float _3461 = _3458 * _3454;
                                float _3465 = 1.0 - (_3455 / (_3321 * _3321));
                                float _4592 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3470 = sqrt(_3455) * _3336.w;
                                float _3472 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                                float _3473 = _3472 * _3472;
                                float _3476 = ((1.0 - _3473) * dot(vec3(_3459, _3460, _3461), vec3(_890, _893, _896))) + _3473;
                                float _3479 = _3470 * _3470;
                                float _3483 = (fma(_2640, _3363.z, fma(_2639, _3363.y, _3363.x * _2638)) + _3363.w) / _3424;
                                float _3484 = (fma(_2640, _3378.z, fma(_2639, _3378.y, _3378.x * _2638)) + _3378.w) / _3424;
                                float _3488 = 1.0 - dot(vec2(_3483, _3484), vec2(_3483, _3484));
                                float _4608 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3490 = _3489 * (((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3466) / ((_3479 * 0.699999988079071044921875) + 1.0));
                                float _3502 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                                float _3503 = 1.0 - _950;
                                float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                                float _3511 = _3510 * _3510;
                                float _3512 = _3511 * _3511;
                                float _3513 = _3459 - _2932;
                                float _3514 = _3460 - _2933;
                                float _3515 = _3461 - _2934;
                                float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                                float _3523 = dot(vec3(_890, _893, _896), vec3((-0.0) - _2932, (-0.0) - _2933, (-0.0) - _2934));
                                float _4619 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3527 = dot(vec3(_890, _893, _896), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                                float _4630 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                                float _3535 = _3472 * _3511;
                                float _3536 = _3535 * _3535;
                                float _3542 = ((1.0 - _3536) * dot(vec3(_890, _893, _896), vec3(_3459, _3460, _3461))) + _3536;
                                float _4641 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3544 = 1.0 - _3511;
                                float _3554 = (0.5 / (((_3543 * ((_3526 * _3544) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3511) * _3526))) * _3543;
                                float _4652 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3564 = (_3489 * _3466) * (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3534 * _3534) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3490 * _3336.y;
                                frontier_phi_83_pred_1 = _3490 * _3336.x;
                                frontier_phi_83_pred_2 = _3564 * _3348.z;
                                frontier_phi_83_pred_3 = _3564 * _3348.y;
                                frontier_phi_83_pred_4 = _3564 * _3348.x;
                                frontier_phi_83_pred_5 = _3490 * _3336.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3572 = frontier_phi_83_pred;
                            _3571 = frontier_phi_83_pred_1;
                            _3570 = frontier_phi_83_pred_2;
                            _3569 = frontier_phi_83_pred_3;
                            _3568 = frontier_phi_83_pred_4;
                            _3573 = frontier_phi_83_pred_5;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3280;
                        frontier_phi_77_pred_1 = _3279;
                        frontier_phi_77_pred_2 = _3278;
                        frontier_phi_77_pred_3 = _3277;
                        frontier_phi_77_pred_4 = _3276;
                        frontier_phi_77_pred_5 = _3275;
                    }
                    _2917 = frontier_phi_77_pred;
                    _2915 = frontier_phi_77_pred_1;
                    _2913 = frontier_phi_77_pred_2;
                    _2911 = frontier_phi_77_pred_3;
                    _2909 = frontier_phi_77_pred_4;
                    _2907 = frontier_phi_77_pred_5;
                    uint _3073 = _3072 + 1u;
                    if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3066 = _2907;
                        _3067 = _2909;
                        _3068 = _2911;
                        _3069 = _2913;
                        _3070 = _2915;
                        _3071 = _2917;
                        _3072 = _3073;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2911;
                frontier_phi_58_59_ladder_1 = _2917;
                frontier_phi_58_59_ladder_2 = _2915;
                frontier_phi_58_59_ladder_3 = _2913;
                frontier_phi_58_59_ladder_4 = _2909;
                frontier_phi_58_59_ladder_5 = _2907;
            }
            else
            {
                frontier_phi_58_59_ladder = _2789;
                frontier_phi_58_59_ladder_1 = _2795;
                frontier_phi_58_59_ladder_2 = _2793;
                frontier_phi_58_59_ladder_3 = _2791;
                frontier_phi_58_59_ladder_4 = _2787;
                frontier_phi_58_59_ladder_5 = _2785;
            }
            _2906 = frontier_phi_58_59_ladder_5;
            _2908 = frontier_phi_58_59_ladder_4;
            _2910 = frontier_phi_58_59_ladder;
            _2912 = frontier_phi_58_59_ladder_3;
            _2914 = frontier_phi_58_59_ladder_2;
            _2916 = frontier_phi_58_59_ladder_1;
        }
        float _2921 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2697 = (_2921 * _2912) + _2149;
        _2699 = (_2921 * _2914) + _2151;
        _2701 = (_2921 * _2916) + _2153;
        _2703 = ((_2906 * 0.039999999105930328369140625) * _2921) + _2482;
        _2705 = ((_2908 * 0.039999999105930328369140625) * _2921) + _2484;
        _2707 = ((_2910 * 0.039999999105930328369140625) * _2921) + _2486;
    }
    else
    {
        _2697 = _2149;
        _2699 = _2151;
        _2701 = _2153;
        _2703 = _2482;
        _2705 = _2484;
        _2707 = _2486;
    }
    float _4668 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4679 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4690 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2724 = ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2697 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _934))) + ((_2703 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2725 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2699 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _934))) + ((_2705 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2726 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2701 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _934))) + ((_2707 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2727 = _244 + 6u;
    float _2735 = _871 / cbSceneParam._m0[86u].x;
    float _2736 = _872 / cbSceneParam._m0[86u].y;
    vec4 _2750 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2752 = _2750.x;
    float _2753 = _2750.y;
    float _2754 = _2750.z;
    float _2755 = _2750.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2810 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2811 = _2810 / _793;
        float _2822 = _2811 * _844;
        float _2823 = _845 * _2811;
        float _2824 = (-0.0) - _2823;
        float _2826 = _2811 * _846;
        float _2828 = (cbSceneParam._m0[77u].w * _2824) / _2810;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2823;
        float _2836 = sqrt(((_2822 * _2822) + (_2823 * _2823)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2810)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2824 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2967 = 1.0 / cbSceneParam._m0[80u].x;
            float _2968 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2969 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            _3023 = ((abs(_2836 / _2824) * cbSceneParam._m0[80u].y) * ((((_2978 - _2979) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))))) * _2967)) - ((exp2(_2846 * _2978) - exp2(_2846 * _2979)) * _2967))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2755);
        _2848 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2752;
        _2850 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2753;
        _2852 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2754;
        _2854 = _3034 * _2755;
    }
    else
    {
        _2848 = _2752;
        _2850 = _2753;
        _2852 = _2754;
        _2854 = _2755;
    }
    bool _3061;
    vec4 _2864;
    vec4 _2886;
    float _2888;
    float _2892;
    float _2893;
    float _2894;
    float _2895;
    bool _2905;
    for (;;)
    {
        _2864 = cbMatDynParam._m0[0u];
        float _2866 = roundEven(_2864.y);
        bool _2867 = _2866 == 3.0;
        float _2868 = log2(_2854);
        float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * _2724;
        float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * _2725;
        float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * _2726;
        float _2884 = _860 + (-0.5);
        _2886 = cbMtdParam._m0[1u];
        _2888 = _2886.y * _2884;
        float _2891 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2892 = _2891 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = _2891 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
        _2894 = _2891 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
        _2895 = _2884 * 0.999000012874603271484375;
        _2905 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2905)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2895) < 0.5)
            {
                _3061 = true;
                break;
            }
        }
        uint _3002 = _909 + uint(_2864.w);
        if ((cbInstanceData._m0[_3002].w < 1.0) && ((cbInstanceData._m0[_3002].w + _2895) < 0.5))
        {
            _3061 = true;
            break;
        }
        if ((_2888 + 1.0) < _2886.x)
        {
            _3061 = true;
            break;
        }
        _3061 = false;
        break;
    }
    float _3266;
    if (_3061)
    {
        discard_state = true;
        _3266 = 0.0;
    }
    else
    {
        _3266 = cbInstanceData._m0[_2727].w;
    }
    SV_Target.x = _2892;
    SV_Target.y = _2893;
    SV_Target.z = _2894;
    SV_Target.w = _3266;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2727].w;
    discard_exit();
}


