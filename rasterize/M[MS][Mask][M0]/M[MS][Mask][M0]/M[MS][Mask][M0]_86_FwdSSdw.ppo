#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1358;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _341.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _417 = (_410 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _418 = (_410 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _419 = (_410 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _341.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3696 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _410) + _550;
    float _560 = ((_531.y - _551) * _410) + _551;
    float _561 = ((_531.z - _552) * _410) + _552;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _483) + _561;
    float _589 = ((((_573.x - _559) * _483) + _559) * 2.0) + (-1.0);
    float _591 = ((((_573.y - _560) * _483) + _560) * 2.0) + (-1.0);
    float _592 = dot(vec2(_589, _591), vec2(_589, _591));
    float _3707 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _645 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _648 = ((isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : min(_645, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _657 = (_648 - ((((((_638 - _639) * cbMtdParam._m0[24u].w) + _639) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _648))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3728 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _665 = (_658 * ((_511.x * cbMtdParam._m0[18u].x) - _490)) + _490;
    float _666 = (_658 * ((_511.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _667 = (_658 * ((_511.z * cbMtdParam._m0[18u].z) - _492)) + _492;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _681 = _679.x;
    float _682 = 1.0 - _681;
    float _709 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_681 - _682) * cbMtdParam._m0[24u].y) + _682) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3739 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _718 = ((((cbMtdParam._m0[10u].x - _665) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _710) + _665;
    float _719 = ((((cbMtdParam._m0[10u].y - _666) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _710) + _666;
    float _720 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _667)) * _710) + _667;
    float _724 = (cbMtdParam._m0[19u].w * (_611.z - _586)) + _586;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = (_658 * (_738.z - _724)) + _724;
    float _758 = ((cbMtdParam._m0[23u].y - _755) * _710) + _755;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _783 = (_777.x * 2.0) + (-1.0);
    float _784 = (_777.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3761 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = (((_611.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _794 = (((_611.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _806 = (((_745 - _793) + (cbMtdParam._m0[21u].x * _793)) * _658) + _793;
    float _807 = (((_746 - _794) + (cbMtdParam._m0[21u].x * _794)) * _658) + _794;
    float _808 = (_658 * (sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) - _597)) + _597;
    float _819 = (((_783 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _710) + _806;
    float _820 = (((_784 - _807) + (_807 * cbMtdParam._m0[22u].z)) * _710) + _807;
    float _821 = ((sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) - _808) * _710) + _808;
    float _823 = cbMtdParam._m0[22u].x + _611.w;
    float _826 = fma(_821, _242 * NORMAL.x, fma(_820, _249 * TANGENT.x, (_235 * _227) * _819));
    float _829 = fma(_821, _242 * NORMAL.y, fma(_820, _249 * TANGENT.y, (_235 * _228) * _819));
    float _832 = fma(_821, _242 * NORMAL.z, fma(_820, _249 * TANGENT.z, (_235 * _229) * _819));
    float _836 = inversesqrt(dot(vec3(_826, _829, _832), vec3(_826, _829, _832)));
    float _837 = _836 * _826;
    float _838 = _836 * _829;
    float _839 = _836 * _832;
    float _3772 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _840 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _3794 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3805 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3816 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _858 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _909 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _899);
    float _910 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _899);
    float _911 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _899);
    float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
    float _916 = _909 * _915;
    float _917 = _910 * _915;
    float _918 = _911 * _915;
    float _924 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _925 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _943 = fma(_839, cbSceneParam._m0[5u].z, fma(_838, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _837));
    float _946 = fma(_839, cbSceneParam._m0[6u].z, fma(_838, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _837));
    float _949 = fma(_839, cbSceneParam._m0[7u].z, fma(_838, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _837));
    uint _963 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _969 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_963].x;
    float _970 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_963].y;
    float _971 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_963].z;
    float _3827 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    vec4 _983 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _924, cbSceneParam._m0[86u].y * _925));
    float _987 = ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * TEXCOORD_5.w) * _983.x;
    float _988 = dot(vec3(_837, _838, _839), vec3(_916, _917, _918));
    float _991 = _988 * 2.0;
    float _995 = (_991 * _837) - _916;
    float _996 = (_991 * _838) - _917;
    float _997 = (_991 * _839) - _918;
    float _1001 = abs(dot(vec3(_916, _917, _918), vec3(_837, _838, _839)));
    float _3860 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1003 = sqrt(_840);
    float _1016 = exp2((_1003 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1003 * 3.0));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1056, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048));
        float _1086 = fma(_1056, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048));
        float _1090 = fma(_1056, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048));
        float _1115 = _1048 + _837;
        float _1116 = _1052 + _838;
        float _1117 = _1056 + _839;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1082;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1086;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1090;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_837, _838, _839), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3908 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_837, _838, _839), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3941 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_837, _838, _839), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3974 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1056, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048));
        float _1400 = fma(_1056, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048));
        float _1404 = fma(_1056, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048));
        float _1427 = _1048 + _837;
        float _1428 = _1052 + _838;
        float _1429 = _1056 + _839;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_837, _838, _839), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4037 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_837, _838, _839), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4070 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_837, _838, _839), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4103 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1358;
        _1666 = _1358;
        _1667 = _1358;
        _1668 = _1358;
        _1669 = _1358;
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1370)) + _1370;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1371)) + _1371;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1372)) + _1372;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _995 * 0.5;
    float _1734 = _996 * 0.5;
    float _1735 = _997 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1056, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1056, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1056, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_997, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995));
        float _1863 = fma(_997, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995));
        float _1866 = fma(_997, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1894 = frontier_phi_14_12_ladder;
        }
        float _2115;
        if (_1863 > 0.0)
        {
            _2115 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2115 = frontier_phi_23_19_ladder;
        }
        float _2361;
        if (_1866 > 0.0)
        {
            _2361 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2361 = frontier_phi_35_30_ladder;
        }
        float _2363 = isnan(_2115) ? _1894 : (isnan(_1894) ? _2115 : min(_1894, _2115));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1860) + _1849;
        float _2369 = (_2364 * _1863) + _1853;
        float _2370 = (_2364 * _1866) + _1857;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_13_35_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_13_35_ladder_2;
        _1884 = frontier_phi_13_35_ladder_1;
        _1886 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_995, _996, _997), _1802);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1056, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1056, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1056, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_997, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995));
        float _1958 = fma(_997, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995));
        float _1961 = fma(_997, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995));
        float _2120;
        if (_1955 > 0.0)
        {
            _2120 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2120 = frontier_phi_25_21_ladder;
        }
        float _2388;
        if (_1958 > 0.0)
        {
            _2388 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2388 = frontier_phi_37_32_ladder;
        }
        float _2593;
        if (_1961 > 0.0)
        {
            _2593 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2593 = frontier_phi_46_43_ladder;
        }
        float _2595 = isnan(_2388) ? _2120 : (isnan(_2120) ? _2388 : min(_2120, _2388));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1955) + _1944;
        float _2601 = (_2596 * _1958) + _1948;
        float _2602 = (_2596 * _1961) + _1952;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_22_46_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_22_46_ladder_2;
        _1982 = frontier_phi_22_46_ladder_1;
        _1984 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_995, _996, _997), _1891);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1996 = ((((1.0 - _1016) * ((_1003 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1016 * _1003)) * _987;
    float _1997 = _1996 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1998 = _1996 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _1999 = _1996 * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    vec4 _2016 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_924, _925));
    float _2018 = _2016.w;
    float _2030 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2018);
    float _2031 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2018);
    float _2032 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2018);
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _987 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2074 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2078 = _2038 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_837, _838, _839));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_837, _838, _839));
    float _4239 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4250 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2055].x * _2061) * _2099) + (((cbLight._m0[_2065].x * _2030) * _2074) * _2097);
    float _2107 = ((_2061 * cbLight._m0[_2055].y) * _2099) + (((cbLight._m0[_2065].y * _2031) * _2074) * _2097);
    float _2108 = ((_2061 * cbLight._m0[_2055].z) * _2099) + (((cbLight._m0[_2065].z * _2032) * _2074) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2114)
    {
        _2125 = _2106;
        _2127 = _2107;
        _2129 = _2108;
    }
    else
    {
        uint _2133 = _2038 + 6u;
        float _2149 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4261 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2152 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2125 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _2106;
        _2127 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _2107;
        _2129 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _2108;
    }
    bool _2132 = _2112.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2132)
    {
        _2170 = _2125;
        _2172 = _2127;
        _2174 = _2129;
    }
    else
    {
        uint _2332 = _2038 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4277 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2351 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2170 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2125;
        _2172 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2127;
        _2174 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2129;
    }
    uint _2177 = _2038 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _840) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2038].x + _916;
    float _2193 = cbLight._m0[_2038].y + _917;
    float _2194 = cbLight._m0[_2038].z + _918;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2038].xyz));
    float _4293 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2206 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2207 = dot(vec3(_837, _838, _839), vec3(_2199, _2200, _2201));
    float _4315 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2199, _2200, _2201));
    float _4326 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2206 * ((_2205 * _2231) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2231) + _2191) * _2205))) * _2205;
    float _4337 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2258 = _2038 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _840) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2078].x + _916;
    float _2272 = cbLight._m0[_2078].y + _917;
    float _2273 = cbLight._m0[_2078].z + _918;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2078].xyz));
    float _4348 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2285 = dot(vec3(_837, _838, _839), vec3(_2278, _2279, _2280));
    float _4359 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2278, _2279, _2280));
    float _4370 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2270;
    float _2317 = (0.5 / (((_2206 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2307) + _2270) * _2284))) * _2284;
    float _4381 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2329 = (((_2306 * cbLight._m0[_2258].x) * _2319) * _2061) + ((((cbLight._m0[_2177].x * _2030) * _2230) * _2244) * _2074);
    float _2330 = (((_2306 * cbLight._m0[_2258].y) * _2319) * _2061) + ((((cbLight._m0[_2177].y * _2031) * _2230) * _2244) * _2074);
    float _2331 = (((_2306 * cbLight._m0[_2258].z) * _2319) * _2061) + ((((cbLight._m0[_2177].z * _2032) * _2230) * _2244) * _2074);
    float _2393;
    float _2395;
    float _2397;
    if (_2114)
    {
        _2393 = _2329;
        _2395 = _2330;
        _2397 = _2331;
    }
    else
    {
        uint _2399 = _2038 + 2u;
        uint _2403 = _2038 + 10u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _840) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _916;
        float _2420 = cbLight._m0[_2399].y + _917;
        float _2421 = cbLight._m0[_2399].z + _918;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2399].xyz));
        float _4392 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2433 = dot(vec3(_837, _838, _839), vec3(_2426, _2427, _2428));
        float _4403 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4414 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2455 = 1.0 - _2418;
        float _2465 = (0.5 / (((_2206 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2455) + _2418) * _2432))) * _2432;
        float _4425 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2393 = (((_2454 * cbLight._m0[_2403].x) * _2467) * _2468) + _2329;
        _2395 = (((_2454 * cbLight._m0[_2403].y) * _2467) * _2468) + _2330;
        _2397 = (((_2454 * cbLight._m0[_2403].z) * _2467) * _2468) + _2331;
    }
    float _2503;
    float _2505;
    float _2507;
    if (_2132)
    {
        _2503 = _2393;
        _2505 = _2395;
        _2507 = _2397;
    }
    else
    {
        uint _2514 = _2038 + 3u;
        uint _2518 = _2038 + 11u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _840) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _916;
        float _2535 = cbLight._m0[_2514].y + _917;
        float _2536 = cbLight._m0[_2514].z + _918;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2514].xyz));
        float _4441 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2548 = dot(vec3(_837, _838, _839), vec3(_2541, _2542, _2543));
        float _4452 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4463 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2570 = 1.0 - _2533;
        float _2580 = (0.5 / (((_2206 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2570) + _2533) * _2547))) * _2547;
        float _4474 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2503 = (((_2569 * cbLight._m0[_2518].x) * _2582) * _2583) + _2393;
        _2505 = (((_2569 * cbLight._m0[_2518].y) * _2582) * _2583) + _2395;
        _2507 = (((_2569 * cbLight._m0[_2518].z) * _2582) * _2583) + _2397;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2036.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _925) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _924) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2967)
                {
                    frontier_phi_61_pred = _2951;
                    frontier_phi_61_pred_1 = _2956;
                    frontier_phi_61_pred_2 = _2955;
                    frontier_phi_61_pred_3 = _2954;
                    frontier_phi_61_pred_4 = _2953;
                    frontier_phi_61_pred_5 = _2952;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2966;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2957 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _2659;
                        float _3142 = _3101.y - _2660;
                        float _3143 = _3101.z - _2661;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_943, _946, _949), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4500 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _2659;
                        float _3177 = (-0.0) - _2660;
                        float _3178 = (-0.0) - _2661;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3193 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _1003;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_943, _946, _949), vec3(_3183, _3184, _3185));
                        float _4516 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3218 = dot(vec3(_943, _946, _949), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4527 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3161 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3151) + _3227;
                        float _4538 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4549 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3225 * _3225) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3010 = (_3172 * _3120.x) + _3078;
                        _3011 = (_3172 * _3120.y) + _3079;
                        _3012 = (_3172 * _3120.z) + _3080;
                        _3007 = (_3253 * _3137.x) + _3075;
                        _3008 = (_3253 * _3137.y) + _3076;
                        _3009 = (_3253 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_61_pred = _3007;
                    frontier_phi_61_pred_1 = _3012;
                    frontier_phi_61_pred_2 = _3011;
                    frontier_phi_61_pred_3 = _3010;
                    frontier_phi_61_pred_4 = _3009;
                    frontier_phi_61_pred_5 = _3008;
                }
                _2807 = frontier_phi_61_pred;
                _2817 = frontier_phi_61_pred_1;
                _2815 = frontier_phi_61_pred_2;
                _2813 = frontier_phi_61_pred_3;
                _2811 = frontier_phi_61_pred_4;
                _2809 = frontier_phi_61_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2807;
                    _2952 = _2809;
                    _2953 = _2811;
                    _2954 = _2813;
                    _2955 = _2815;
                    _2956 = _2817;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2823) & _2705) == 0u)
        {
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
            _2927 = _2814;
            _2929 = _2816;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _2945 = _2944 * _2659;
            float _2946 = _2944 * _2660;
            float _2947 = _2944 * _2661;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3058 = _2806;
                float _3059 = _2808;
                float _3060 = _2810;
                float _3061 = _2812;
                float _3062 = _2814;
                float _3063 = _2816;
                uint _3064 = _2823;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3074)
                    {
                        frontier_phi_67_pred = _3061;
                        frontier_phi_67_pred_1 = _3062;
                        frontier_phi_67_pred_2 = _3063;
                        frontier_phi_67_pred_3 = _3060;
                        frontier_phi_67_pred_4 = _3059;
                        frontier_phi_67_pred_5 = _3058;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        uint _3277 = _3073;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3361;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3288 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3288 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3288 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3288 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_2661, _3395.z, fma(_2660, _3395.y, _3395.x * _2659)) + _3395.w;
                            _3408 = !((fma(_2661, _3376.z, fma(_2660, _3376.y, _3376.x * _2659)) + _3376.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3303.x - _2659;
                                float _3436 = _3303.y - _2660;
                                float _3437 = _3303.z - _2661;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3304 * _3304));
                                float _4560 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3453 = sqrt(_3438) * _3319.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_943, _946, _949))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_2661, _3346.z, fma(_2660, _3346.y, _3346.x * _2659)) + _3346.w) / _3407;
                                float _3467 = (fma(_2661, _3361.z, fma(_2660, _3361.y, _3361.x * _2659)) + _3361.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4576 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _1003;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2945;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_943, _946, _949), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4587 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3510 = dot(vec3(_943, _946, _949), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4598 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_943, _946, _949), vec3(_3442, _3443, _3444))) + _3519;
                                float _4609 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4620 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3547 * _3331.x;
                                frontier_phi_73_pred_1 = _3547 * _3331.y;
                                frontier_phi_73_pred_2 = _3473 * _3319.z;
                                frontier_phi_73_pred_3 = _3473 * _3319.y;
                                frontier_phi_73_pred_4 = _3473 * _3319.x;
                                frontier_phi_73_pred_5 = _3547 * _3331.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3551 = frontier_phi_73_pred;
                            _3552 = frontier_phi_73_pred_1;
                            _3556 = frontier_phi_73_pred_2;
                            _3555 = frontier_phi_73_pred_3;
                            _3554 = frontier_phi_73_pred_4;
                            _3553 = frontier_phi_73_pred_5;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3261;
                        frontier_phi_67_pred_1 = _3262;
                        frontier_phi_67_pred_2 = _3263;
                        frontier_phi_67_pred_3 = _3260;
                        frontier_phi_67_pred_4 = _3259;
                        frontier_phi_67_pred_5 = _3258;
                    }
                    _2926 = frontier_phi_67_pred;
                    _2928 = frontier_phi_67_pred_1;
                    _2930 = frontier_phi_67_pred_2;
                    _2924 = frontier_phi_67_pred_3;
                    _2922 = frontier_phi_67_pred_4;
                    _2920 = frontier_phi_67_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2920;
                        _3059 = _2922;
                        _3060 = _2924;
                        _3061 = _2926;
                        _3062 = _2928;
                        _3063 = _2930;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2928;
                frontier_phi_55_56_ladder_1 = _2930;
                frontier_phi_55_56_ladder_2 = _2926;
                frontier_phi_55_56_ladder_3 = _2924;
                frontier_phi_55_56_ladder_4 = _2922;
                frontier_phi_55_56_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_55_56_ladder = _2814;
                frontier_phi_55_56_ladder_1 = _2816;
                frontier_phi_55_56_ladder_2 = _2812;
                frontier_phi_55_56_ladder_3 = _2810;
                frontier_phi_55_56_ladder_4 = _2808;
                frontier_phi_55_56_ladder_5 = _2806;
            }
            _2919 = frontier_phi_55_56_ladder_5;
            _2921 = frontier_phi_55_56_ladder_4;
            _2923 = frontier_phi_55_56_ladder_3;
            _2925 = frontier_phi_55_56_ladder_2;
            _2927 = frontier_phi_55_56_ladder;
            _2929 = frontier_phi_55_56_ladder_1;
        }
        float _2934 = isnan(1.0) ? _987 : (isnan(_987) ? 1.0 : min(_987, 1.0));
        _2718 = (_2934 * _2925) + _2170;
        _2720 = (_2934 * _2927) + _2172;
        _2722 = (_2934 * _2929) + _2174;
        _2724 = ((_2919 * 0.039999999105930328369140625) * _2934) + _2503;
        _2726 = ((_2921 * 0.039999999105930328369140625) * _2934) + _2505;
        _2728 = ((_2923 * 0.039999999105930328369140625) * _2934) + _2507;
    }
    else
    {
        _2718 = _2170;
        _2720 = _2172;
        _2722 = _2174;
        _2724 = _2503;
        _2726 = _2505;
        _2728 = _2507;
    }
    float _4636 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4647 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4658 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    uint _2748 = _255 + 6u;
    float _2756 = _924 / cbSceneParam._m0[86u].x;
    float _2757 = _925 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _858 : (isnan(_858) ? cbSceneParam._m0[77u].w : min(_858, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_858 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_858) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _858 : min(cbSceneParam._m0[80u].w, _858));
        float _2832 = _2831 / _858;
        float _2843 = _2832 * _909;
        float _2844 = _910 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2847 = _2832 * _911;
        float _2849 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2850 = _2849 + cbSceneParam._m0[79u].w;
        float _2851 = cbSceneParam._m0[79u].w - _2844;
        float _2857 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2847 * _2847));
        float _2860 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2857;
        float _2865 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2867 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2845 - _2849) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2850 > 0.0) ? exp2(_2865 * _2850) : (2.0 - exp2(_2867 * _2850))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2860;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : max(_2850, _2851));
            float _2982 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : min(_2850, _2851));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3020 = ((abs(_2857 / _2845) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2865 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2865 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2867 * _2991) - exp2(_2867 * _2992)) * _2980))) + (_2860 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2776);
        _2869 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2871 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2873 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2875 = _3031 * _2776;
    }
    else
    {
        _2869 = _2773;
        _2871 = _2774;
        _2873 = _2775;
        _2875 = _2776;
    }
    float _2887 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2888 = _2887 == 3.0;
    float _2889 = log2(_2875);
    float _2896 = exp2(_2889 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2718 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _987))) + ((_2724 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2889 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2720 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _987))) + ((_2726 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2889 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2722 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _987))) + ((_2728 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2907 = (_2887 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2907 * (_2888 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.y = _2907 * (_2888 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.z = _2907 * (_2888 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.w = cbInstanceData._m0[_2748].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
}


