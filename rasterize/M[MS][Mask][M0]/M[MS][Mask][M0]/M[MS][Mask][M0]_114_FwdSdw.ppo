#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1450;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4036 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4047 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4058 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4069 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _484 = (_477 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _485 = (_477 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _486 = (_477 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4080 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _557 = (_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484;
    float _558 = (_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485;
    float _559 = (_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[24u].z) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4091 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _629 = (_336.x * cbMtdParam._m0[9u].x) * ((_619 * ((_577.x * cbMtdParam._m0[14u].x) - _557)) + _557);
    float _630 = (_336.y * cbMtdParam._m0[9u].y) * ((_619 * ((_577.y * cbMtdParam._m0[14u].y) - _558)) + _558);
    float _631 = (_336.z * cbMtdParam._m0[9u].z) * ((_619 * ((_577.z * cbMtdParam._m0[14u].z) - _559)) + _559);
    float _635 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _629;
    float _638 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _630;
    float _641 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _631;
    float _649 = (((_629 - _635) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _635) * 4.55000019073486328125;
    float _651 = (((_630 - _638) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _638) * 4.55000019073486328125;
    float _653 = (((_631 - _641) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) + _641) * 4.55000019073486328125;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    float _721 = ((_693.x - _712) * _477) + _712;
    float _722 = ((_693.y - _713) * _477) + _713;
    float _723 = ((_693.z - _714) * _477) + _714;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _746 = ((_735.x - _721) * _550) + _721;
    float _747 = ((_735.y - _722) * _550) + _722;
    float _748 = ((_735.z - _723) * _550) + _723;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _773 = ((_760.z - _748) * _619) + _748;
    float _776 = ((((_760.x - _746) * _619) + _746) * 2.0) + (-1.0);
    float _777 = ((((_760.y - _747) * _619) + _747) * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4102 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _824 = _822.x;
    float _825 = 1.0 - _824;
    float _838 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_824 - _825) * cbMtdParam._m0[24u].w) + _825) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4113 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _846 = (_839 * (cbMtdParam._m0[17u].x - _649)) + _649;
    float _847 = (_839 * (cbMtdParam._m0[17u].y - _651)) + _651;
    float _848 = (_839 * (cbMtdParam._m0[17u].z - _653)) + _653;
    float _853 = (((_670.z - _773) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _773;
    float _857 = ((_797.z - _853) * cbMtdParam._m0[19u].w) + _853;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _4124 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = (_839 * (_870.z - _857)) + _857;
    float _896 = (_776 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_670.x * 2.0) + (-1.0)))) + (((_797.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _897 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_670.y * 2.0) + (-1.0)))) + (((_797.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _909 = (((_877 - _896) + (cbMtdParam._m0[21u].x * _896)) * _839) + _896;
    float _910 = (((_878 - _897) + (cbMtdParam._m0[21u].x * _897)) * _839) + _897;
    float _911 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _783)) + _783;
    float _915 = cbMtdParam._m0[22u].x + _797.w;
    float _918 = fma(_911, _246 * NORMAL.x, fma(_910, _253 * TANGENT.x, (_239 * _231) * _909));
    float _921 = fma(_911, _246 * NORMAL.y, fma(_910, _253 * TANGENT.y, (_239 * _232) * _909));
    float _924 = fma(_911, _246 * NORMAL.z, fma(_910, _253 * TANGENT.z, (_239 * _233) * _909));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _4135 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _932 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4157 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4168 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4179 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1001 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _991);
    float _1002 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _991);
    float _1003 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _991);
    float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
    float _1008 = _1001 * _1007;
    float _1009 = _1002 * _1007;
    float _1010 = _1003 * _1007;
    float _1016 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1017 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1035 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1038 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1041 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1055 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _4190 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1016, cbSceneParam._m0[86u].y * _1017));
    float _1079 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * TEXCOORD_5.w) * _1075.x;
    float _1080 = dot(vec3(_929, _930, _931), vec3(_1008, _1009, _1010));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _929) - _1008;
    float _1088 = (_1083 * _930) - _1009;
    float _1089 = (_1083 * _931) - _1010;
    float _1093 = abs(dot(vec3(_1008, _1009, _1010), vec3(_929, _930, _931)));
    float _4223 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_932);
    float _1108 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1148, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140));
        float _1178 = fma(_1148, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140));
        float _1182 = fma(_1148, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140));
        float _1207 = _1140 + _929;
        float _1208 = _1144 + _930;
        float _1209 = _1148 + _931;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_929, _930, _931), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4271 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_929, _930, _931), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4304 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_929, _930, _931), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4337 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1487 = fma(_1148, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140));
        float _1491 = fma(_1148, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140));
        float _1495 = fma(_1148, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140));
        float _1518 = _1140 + _929;
        float _1519 = _1144 + _930;
        float _1520 = _1148 + _931;
        float _1530 = fma(_1520, cbModelParam._m0[30u].z, fma(_1519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1518)) - _1487;
        float _1531 = fma(_1520, cbModelParam._m0[31u].z, fma(_1519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1518)) - _1491;
        float _1532 = fma(_1520, cbModelParam._m0[32u].z, fma(_1519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1518)) - _1495;
        float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
        float _1549 = ((_1536 * _1530) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1487 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1536 * _1531) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1491 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1536 * _1532) / cbModelParam._m0[35u].z) + ((((((_1495 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        float _1586 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1553.x + (-0.5));
        float _1588 = _1586 * (_1553.y + (-0.5));
        float _1589 = _1586 * (_1553.z + (-0.5));
        float _1596 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1560.x + (-0.5));
        float _1598 = _1596 * (_1560.y + (-0.5));
        float _1599 = _1596 * (_1560.z + (-0.5));
        float _1606 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1567.x + (-0.5));
        float _1608 = _1606 * (_1567.y + (-0.5));
        float _1609 = _1606 * (_1567.z + (-0.5));
        float _1616 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1574.x + (-0.5));
        float _1618 = _1616 * (_1574.y + (-0.5));
        float _1619 = _1616 * (_1574.z + (-0.5));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = _1587 * 0.5;
        float _1624 = _1597 * 0.5;
        float _1625 = _1607 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_929, _930, _931), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4400 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1650 + 1.0))) + _1655) * _1620;
        float _1665 = _1588 * 0.5;
        float _1666 = _1598 * 0.5;
        float _1667 = _1608 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_929, _930, _931), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4433 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1692 + 1.0))) + _1697) * _1621;
        float _1707 = _1589 * 0.5;
        float _1708 = _1599 * 0.5;
        float _1709 = _1609 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_929, _930, _931), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4466 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1734 + 1.0))) + _1739) * _1622;
        _1756 = _1589;
        _1757 = _1588;
        _1758 = _1587;
        _1759 = _1599;
        _1760 = _1598;
        _1761 = _1597;
        _1762 = _1609;
        _1763 = _1608;
        _1764 = _1607;
        _1765 = _1622;
        _1766 = _1621;
        _1767 = _1620;
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    }
    else
    {
        _1756 = _1450;
        _1757 = _1450;
        _1758 = _1450;
        _1759 = _1450;
        _1760 = _1450;
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1462)) + _1462;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1803 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1780));
    float _1824 = _1087 * 0.5;
    float _1825 = _1088 * 0.5;
    float _1826 = _1089 * 0.5;
    float _1827 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1830 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1833 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1840 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1844 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1848 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1855 = dot(vec4(cbModelParam._m0[39u]), vec4(_1824, _1825, _1826, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1824, _1825, _1826, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1940 = fma(_1148, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140)) + cbModelParam._m0[13u].w;
        float _1944 = fma(_1148, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140)) + cbModelParam._m0[14u].w;
        float _1948 = fma(_1148, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140)) + cbModelParam._m0[15u].w;
        float _1951 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1954 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1957 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _1985;
        if (_1951 > 0.0)
        {
            _1985 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1985 = frontier_phi_14_12_ladder;
        }
        float _2155;
        if (_1954 > 0.0)
        {
            _2155 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2155 = frontier_phi_23_19_ladder;
        }
        float _2450;
        if (_1957 > 0.0)
        {
            _2450 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2450 = frontier_phi_35_30_ladder;
        }
        float _2452 = isnan(_2155) ? _1985 : (isnan(_1985) ? _2155 : min(_1985, _2155));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1951) + _1940;
        float _2458 = (_2453 * _1954) + _1944;
        float _2459 = (_2453 * _1957) + _1948;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_13_35_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1973 = frontier_phi_13_35_ladder_2;
        _1975 = frontier_phi_13_35_ladder_1;
        _1977 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1893);
        _1973 = _1961.x * cbModelParam._m0[1u].y;
        _1975 = _1961.y * cbModelParam._m0[1u].y;
        _1977 = _1961.z * cbModelParam._m0[1u].y;
    }
    float _1981 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1981 : min(cbModelParam._m0[25u].w, _1981));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1148, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1148, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1148, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2050 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2053 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2160;
        if (_2047 > 0.0)
        {
            _2160 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2160 = frontier_phi_25_21_ladder;
        }
        float _2477;
        if (_2050 > 0.0)
        {
            _2477 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2477 = frontier_phi_37_32_ladder;
        }
        float _2804;
        if (_2053 > 0.0)
        {
            _2804 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2804 = frontier_phi_47_44_ladder;
        }
        float _2806 = isnan(_2477) ? _2160 : (isnan(_2160) ? _2477 : min(_2160, _2477));
        float _2807 = isnan(_2804) ? _2806 : (isnan(_2806) ? _2804 : min(_2806, _2804));
        float _2811 = (_2807 * _2047) + _2036;
        float _2812 = (_2807 * _2050) + _2040;
        float _2813 = (_2807 * _2053) + _2044;
        float _2814 = _2807 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2814;
        float _2817 = _2814 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2813 > _2817) || ((_2813 < _2815) || ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 < _2815) || (_2811 > _2817))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2813, cbModelParam._m0[17u].z, fma(_2812, cbModelParam._m0[17u].y, _2811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2813, cbModelParam._m0[18u].z, fma(_2812, cbModelParam._m0[18u].y, _2811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2813, cbModelParam._m0[19u].z, fma(_2812, cbModelParam._m0[19u].y, _2811 * cbModelParam._m0[19u].x))), _1982);
            frontier_phi_22_47_ladder = _2931.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2931.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2931.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_22_47_ladder_2;
        _2074 = frontier_phi_22_47_ladder_1;
        _2076 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _1982);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2088 = ((((1.0 - _1108) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1108 * _1095)) * _1079;
    float _2089 = _2088 * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2090 = _2088 * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2091 = _2088 * ((cbModelParam._m0[1u].w * (_2076 - _1977)) + _1977);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2147 = _2134 / _2146;
    float _2148 = _2138 / _2146;
    float _2149 = _2142 / _2146;
    float _2296;
    float _2297;
    float _2298;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2176 = ((uint(_2149 > cbSceneParam._m0[59u].y) + uint(_2149 > cbSceneParam._m0[59u].x)) + uint(_2149 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2177 = _2176 + 43u;
        uint _2185 = _2176 + 44u;
        uint _2193 = _2176 + 45u;
        uint _2201 = _2176 + 46u;
        float _2212 = fma(_2146, cbSceneParam._m0[_2177].w, fma(_2142, cbSceneParam._m0[_2177].z, fma(_2138, cbSceneParam._m0[_2177].y, _2134 * cbSceneParam._m0[_2177].x)));
        float _2216 = fma(_2146, cbSceneParam._m0[_2185].w, fma(_2142, cbSceneParam._m0[_2185].z, fma(_2138, cbSceneParam._m0[_2185].y, _2134 * cbSceneParam._m0[_2185].x)));
        float _2224 = fma(_2146, cbSceneParam._m0[_2201].w, fma(_2142, cbSceneParam._m0[_2201].z, fma(_2138, cbSceneParam._m0[_2201].y, _2134 * cbSceneParam._m0[_2201].x)));
        float _2229 = cbSceneParam._m0[33u].z * _2224;
        float _2231 = cbSceneParam._m0[33u].w * _2224;
        float _2234 = fma(_2146, cbSceneParam._m0[_2193].w, fma(_2142, cbSceneParam._m0[_2193].z, fma(_2138, cbSceneParam._m0[_2193].y, _2134 * cbSceneParam._m0[_2193].x))) / _2224;
        float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
        float _4592 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2289 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2229 + _2212) / _2224, (_2231 + _2216) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 + _2212) / _2224, (_2216 - _2229) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2229) / _2224, (_2216 - _2231) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2231) / _2224, (_2229 + _2216) / _2224), _2234), 0.0)).x), vec4(0.25)));
        _2296 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
        _2297 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
        _2298 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2296 = 1.0;
        _2297 = 1.0;
        _2298 = 1.0;
    }
    float _2362;
    float _2364;
    float _2366;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2350 = fma(_2146, cbSceneParam._m0[63u].w, fma(_2142, cbSceneParam._m0[63u].z, fma(_2138, cbSceneParam._m0[63u].y, _2134 * cbSceneParam._m0[63u].x)));
        float _2351 = fma(_2146, cbSceneParam._m0[60u].w, fma(_2142, cbSceneParam._m0[60u].z, fma(_2138, cbSceneParam._m0[60u].y, _2134 * cbSceneParam._m0[60u].x))) / _2350;
        float _2352 = fma(_2146, cbSceneParam._m0[61u].w, fma(_2142, cbSceneParam._m0[61u].z, fma(_2138, cbSceneParam._m0[61u].y, _2134 * cbSceneParam._m0[61u].x))) / _2350;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2351 >= cbSceneParam._m0[64u].x) && (_2352 >= cbSceneParam._m0[64u].y)) && (_2351 <= cbSceneParam._m0[64u].z)) && (_2352 <= cbSceneParam._m0[64u].w))
        {
            float _2490 = fma(_2146, cbSceneParam._m0[62u].w, fma(_2142, cbSceneParam._m0[62u].z, fma(_2138, cbSceneParam._m0[62u].y, _2134 * cbSceneParam._m0[62u].x))) / _2350;
            float _2494 = isnan(cbSceneParam._m0[41u].w) ? _2490 : (isnan(_2490) ? cbSceneParam._m0[41u].w : max(_2490, cbSceneParam._m0[41u].w));
            float _2537 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
            float _4608 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
            float _2544 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2351, cbSceneParam._m0[33u].w + _2352), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2351, _2352 - cbSceneParam._m0[33u].z), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].z, _2352 - cbSceneParam._m0[33u].w), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2352), _2494), 0.0)).x), vec4(0.25)));
            float _2548 = 1.0 - (_2544 * cbSceneParam._m0[34u].x);
            float _2549 = 1.0 - (_2544 * cbSceneParam._m0[34u].y);
            float _2550 = 1.0 - (_2544 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2550) ? _2298 : (isnan(_2298) ? _2550 : min(_2298, _2550));
            frontier_phi_34_33_ladder_1 = isnan(_2549) ? _2297 : (isnan(_2297) ? _2549 : min(_2297, _2549));
            frontier_phi_34_33_ladder_2 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
        }
        else
        {
            frontier_phi_34_33_ladder = _2298;
            frontier_phi_34_33_ladder_1 = _2297;
            frontier_phi_34_33_ladder_2 = _2296;
        }
        _2362 = frontier_phi_34_33_ladder_2;
        _2364 = frontier_phi_34_33_ladder_1;
        _2366 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2362 = _2296;
        _2364 = _2297;
        _2366 = _2298;
    }
    uvec4 _2371 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2373 = _2371.x * 14u;
    uint _2374 = _2373 + 13u;
    float _2381 = _1079 + (-1.0);
    float _2386 = (cbLight._m0[_2374].x * _2381) + 1.0;
    float _2387 = (cbLight._m0[_2374].y * _2381) + 1.0;
    float _2388 = (cbLight._m0[_2374].z * _2381) + 1.0;
    float _2389 = (cbLight._m0[_2374].w * _2381) + 1.0;
    uint _2390 = _2373 + 5u;
    float _2396 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
    uint _2400 = _2373 + 4u;
    float _2409 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    uint _2413 = _2373 | 1u;
    float _2424 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_929, _930, _931));
    float _2427 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_929, _930, _931));
    float _4644 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _4655 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2432 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2434 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2441 = ((cbLight._m0[_2390].x * _2396) * _2434) + (((cbLight._m0[_2400].x * _2362) * _2409) * _2432);
    float _2442 = ((_2396 * cbLight._m0[_2390].y) * _2434) + (((cbLight._m0[_2400].y * _2364) * _2409) * _2432);
    float _2443 = ((_2396 * cbLight._m0[_2390].z) * _2434) + (((cbLight._m0[_2400].z * _2366) * _2409) * _2432);
    uvec4 _2447 = floatBitsToUint(cbLight._m0[_2373 + 12u]);
    bool _2449 = _2447.x == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2449)
    {
        _2551 = _2441;
        _2553 = _2442;
        _2555 = _2443;
    }
    else
    {
        uint _2559 = _2373 + 6u;
        float _2575 = (dot(vec3(cbLight._m0[_2373 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4666 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2578 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2551 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2441;
        _2553 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2442;
        _2555 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2443;
    }
    bool _2558 = _2447.y == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2558)
    {
        _2613 = _2551;
        _2615 = _2553;
        _2617 = _2555;
    }
    else
    {
        uint _2775 = _2373 + 7u;
        float _2791 = (dot(vec3(cbLight._m0[_2373 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2792 = _2791 * _2791;
        float _4682 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2793 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2794 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2613 = (((cbLight._m0[_2775].x * 0.3183098733425140380859375) * _2793) * _2794) + _2551;
        _2615 = (((cbLight._m0[_2775].y * 0.3183098733425140380859375) * _2793) * _2794) + _2553;
        _2617 = (((cbLight._m0[_2775].z * 0.3183098733425140380859375) * _2793) * _2794) + _2555;
    }
    uint _2620 = _2373 + 8u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _932) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2373].x + _1008;
    float _2636 = cbLight._m0[_2373].y + _1009;
    float _2637 = cbLight._m0[_2373].z + _1010;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2373].xyz));
    float _4698 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _4709 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2649 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2650 = dot(vec3(_929, _930, _931), vec3(_2642, _2643, _2644));
    float _4720 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2642, _2643, _2644));
    float _4731 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2634 * _2634;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2674 = 1.0 - _2634;
    float _2685 = (0.5 / (((_2649 * ((_2648 * _2674) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2674) + _2634) * _2648))) * _2648;
    float _4742 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2687 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    uint _2701 = _2373 + 9u;
    float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _932) * 0.949999988079071044921875);
    float _2713 = _2712 * _2712;
    float _2714 = cbLight._m0[_2413].x + _1008;
    float _2715 = cbLight._m0[_2413].y + _1009;
    float _2716 = cbLight._m0[_2413].z + _1010;
    float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
    float _2721 = _2720 * _2714;
    float _2722 = _2720 * _2715;
    float _2723 = _2720 * _2716;
    float _2724 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2413].xyz));
    float _4753 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2728 = dot(vec3(_929, _930, _931), vec3(_2721, _2722, _2723));
    float _4764 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2732 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2721, _2722, _2723));
    float _4775 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2736 = _2713 * _2713;
    float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
    float _2749 = (exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2750 = 1.0 - _2713;
    float _2760 = (0.5 / (((_2649 * ((_2727 * _2750) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2750) + _2713) * _2727))) * _2727;
    float _4786 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2762 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
    float _2772 = (((_2749 * cbLight._m0[_2701].x) * _2762) * _2396) + ((((cbLight._m0[_2620].x * _2362) * _2673) * _2687) * _2409);
    float _2773 = (((_2749 * cbLight._m0[_2701].y) * _2762) * _2396) + ((((cbLight._m0[_2620].y * _2364) * _2673) * _2687) * _2409);
    float _2774 = (((_2749 * cbLight._m0[_2701].z) * _2762) * _2396) + ((((cbLight._m0[_2620].z * _2366) * _2673) * _2687) * _2409);
    float _2830;
    float _2832;
    float _2834;
    if (_2449)
    {
        _2830 = _2772;
        _2832 = _2773;
        _2834 = _2774;
    }
    else
    {
        uint _2836 = _2373 + 2u;
        uint _2840 = _2373 + 10u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _932) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _1008;
        float _2857 = cbLight._m0[_2836].y + _1009;
        float _2858 = cbLight._m0[_2836].z + _1010;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2836].xyz));
        float _4797 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2870 = dot(vec3(_929, _930, _931), vec3(_2863, _2864, _2865));
        float _4808 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4819 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2891 = (exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2892 = 1.0 - _2855;
        float _2902 = (0.5 / (((_2649 * ((_2869 * _2892) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2892) + _2855) * _2869))) * _2869;
        float _4830 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2830 = (((_2891 * cbLight._m0[_2840].x) * _2904) * _2905) + _2772;
        _2832 = (((_2891 * cbLight._m0[_2840].y) * _2904) * _2905) + _2773;
        _2834 = (((_2891 * cbLight._m0[_2840].z) * _2904) * _2905) + _2774;
    }
    float _2936;
    float _2938;
    float _2940;
    if (_2558)
    {
        _2936 = _2830;
        _2938 = _2832;
        _2940 = _2834;
    }
    else
    {
        uint _2947 = _2373 + 3u;
        uint _2951 = _2373 + 11u;
        float _2965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2947].w)) * _932) * 0.949999988079071044921875);
        float _2966 = _2965 * _2965;
        float _2967 = cbLight._m0[_2947].x + _1008;
        float _2968 = cbLight._m0[_2947].y + _1009;
        float _2969 = cbLight._m0[_2947].z + _1010;
        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
        float _2974 = _2973 * _2967;
        float _2975 = _2973 * _2968;
        float _2976 = _2973 * _2969;
        float _2977 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2947].xyz));
        float _4846 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2980 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2981 = dot(vec3(_929, _930, _931), vec3(_2974, _2975, _2976));
        float _4857 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2985 = dot(vec3(cbLight._m0[_2947].xyz), vec3(_2974, _2975, _2976));
        float _4868 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2989 = _2966 * _2966;
        float _2993 = ((_2984 * _2984) * (_2989 + (-1.0))) + 1.0;
        float _3002 = (exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3003 = 1.0 - _2966;
        float _3013 = (0.5 / (((_2649 * ((_2980 * _3003) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _3003) + _2966) * _2980))) * _2980;
        float _4879 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3015 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2989 / ((_2993 * _2993) * 3.141590118408203125));
        float _3016 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2936 = (((_3002 * cbLight._m0[_2951].x) * _3015) * _3016) + _2830;
        _2938 = (((_3002 * cbLight._m0[_2951].y) * _3015) * _3016) + _2832;
        _2940 = (((_3002 * cbLight._m0[_2951].z) * _3015) * _3016) + _2834;
    }
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_2371.y == 0u)
    {
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.x;
        uint _3049 = uint((float(_3037.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1017) / _3038))) + floor(float(uint(cbSceneParam._m0[85u].x * _1016) / _3038)));
        float _3059 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3060 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        uint _3063 = uint(isnan(14.0) ? _3060 : (isnan(_3060) ? 14.0 : min(_3060, 14.0)));
        uvec4 _3068 = texelFetch(g_lightClusterGridBuffer, int(((_3063 << 2u) + (_3049 << 6u)) >> 2u));
        uint _3069 = _3068.x;
        uint _3070 = _3037.z;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        if (((((1u << ((_3070 >> 4u) & 15u)) + 4294967295u) & _3069) == 0u) || ((_3070 & 240u) == 0u))
        {
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
        }
        else
        {
            float _3150;
            float _3152;
            float _3154;
            float _3156;
            float _3158;
            float _3160;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            uint _3300 = 0u;
            uint _3309;
            bool _3310;
            for (;;)
            {
                _3309 = texelFetch(g_lightClassification, int((((_3063 << 5u) + (_3049 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                _3310 = _3309 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3310)
                {
                    frontier_phi_66_pred = _3299;
                    frontier_phi_66_pred_1 = _3298;
                    frontier_phi_66_pred_2 = _3297;
                    frontier_phi_66_pred_3 = _3296;
                    frontier_phi_66_pred_4 = _3295;
                    frontier_phi_66_pred_5 = _3294;
                }
                else
                {
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    uint _3424;
                    _3418 = _3294;
                    _3419 = _3295;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3309;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    for (;;)
                    {
                        uint _3428 = uint(findLSB(_3424)) + (_3300 << 5u);
                        uint _3425 = (_3424 + 4294967295u) & _3424;
                        uint _3430 = _3428 * 48u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3450 = (_3428 * 48u) + 4u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 3u)).x));
                        uint _3469 = (_3428 * 48u) + 8u;
                        vec3 _3480 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x));
                        float _3484 = _3444.x - _2147;
                        float _3485 = _3444.y - _2148;
                        float _3486 = _3444.z - _2149;
                        float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                        float _3490 = inversesqrt(_3487);
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3494 = dot(vec3(_1035, _1038, _1041), vec3(_3491, _3492, _3493));
                        float _3499 = 1.0 - (_3487 * _3444.w);
                        float _4905 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3501 = sqrt(_3487) * _3463.w;
                        float _3504 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3494) + _3505;
                        float _3511 = _3501 * _3501;
                        float _3515 = ((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3500) / ((_3511 * 0.699999988079071044921875) + 1.0);
                        float _3519 = (-0.0) - _2147;
                        float _3520 = (-0.0) - _2148;
                        float _3521 = (-0.0) - _2149;
                        float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3535 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                        float _3536 = 1.0 - _1095;
                        float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                        float _3544 = _3543 * _3543;
                        float _3545 = _3544 * _3544;
                        float _3546 = _3526 + _3491;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3556 = dot(vec3(_1035, _1038, _1041), vec3(_3526, _3527, _3528));
                        float _4921 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3560 = dot(vec3(_1035, _1038, _1041), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                        float _4932 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                        float _3568 = _3504 * _3544;
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3494) + _3569;
                        float _4943 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3573 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3574 = 1.0 - _3544;
                        float _3584 = (0.5 / (((_3573 * ((_3559 * _3574) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3544) * _3559))) * _3573;
                        float _4954 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3595 = (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3567 * _3567) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125))) * _3500;
                        _3353 = (_3515 * _3463.x) + _3421;
                        _3354 = (_3515 * _3463.y) + _3422;
                        _3355 = (_3515 * _3463.z) + _3423;
                        _3350 = (_3595 * _3480.x) + _3418;
                        _3351 = (_3595 * _3480.y) + _3419;
                        _3352 = (_3595 * _3480.z) + _3420;
                        if (_3425 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3418 = _3350;
                            _3419 = _3351;
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3425;
                        }
                    }
                    frontier_phi_66_pred = _3355;
                    frontier_phi_66_pred_1 = _3354;
                    frontier_phi_66_pred_2 = _3353;
                    frontier_phi_66_pred_3 = _3352;
                    frontier_phi_66_pred_4 = _3351;
                    frontier_phi_66_pred_5 = _3350;
                }
                _3160 = frontier_phi_66_pred;
                _3158 = frontier_phi_66_pred_1;
                _3156 = frontier_phi_66_pred_2;
                _3154 = frontier_phi_66_pred_3;
                _3152 = frontier_phi_66_pred_4;
                _3150 = frontier_phi_66_pred_5;
                uint _3301 = _3300 + 1u;
                if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3294 = _3150;
                    _3295 = _3152;
                    _3296 = _3154;
                    _3297 = _3156;
                    _3298 = _3158;
                    _3299 = _3160;
                    _3300 = _3301;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
        }
        uvec4 _3163 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3164 = _3163.z;
        uint _3166 = (_3164 >> 8u) & 15u;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        if (((4294967295u << _3166) & _3069) == 0u)
        {
            _3262 = _3149;
            _3264 = _3151;
            _3266 = _3153;
            _3268 = _3155;
            _3270 = _3157;
            _3272 = _3159;
        }
        else
        {
            float _3287 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _3288 = _3287 * _2147;
            float _3289 = _3287 * _2148;
            float _3290 = _3287 * _2149;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3166 < ((_3164 >> 12u) & 15u))
            {
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3273;
                float _3401 = _3149;
                float _3402 = _3151;
                float _3403 = _3153;
                float _3404 = _3155;
                float _3405 = _3157;
                float _3406 = _3159;
                uint _3407 = _3166;
                uint _3416;
                bool _3417;
                for (;;)
                {
                    _3416 = texelFetch(g_lightClassification, int((((_3063 << 5u) + (_3049 << 9u)) + (_3407 << 2u)) >> 2u)).x;
                    _3417 = _3416 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3417)
                    {
                        frontier_phi_72_pred = _3406;
                        frontier_phi_72_pred_1 = _3405;
                        frontier_phi_72_pred_2 = _3404;
                        frontier_phi_72_pred_3 = _3403;
                        frontier_phi_72_pred_4 = _3402;
                        frontier_phi_72_pred_5 = _3401;
                    }
                    else
                    {
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3613 = _3401;
                        float _3614 = _3402;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        uint _3619 = _3416;
                        uint _3620;
                        vec4 _3645;
                        float _3646;
                        vec4 _3661;
                        vec3 _3673;
                        vec4 _3688;
                        vec4 _3703;
                        float _3749;
                        bool _3750;
                        for (;;)
                        {
                            uint _3630 = ((_3407 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3619));
                            _3620 = (_3619 + 4294967295u) & _3619;
                            uint _3632 = _3630 * 40u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3646 = _3645.w;
                            uint _3648 = (_3630 * 40u) + 4u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3630 * 40u) + 8u;
                            _3673 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x));
                            uint _3675 = (_3630 * 40u) + 16u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3630 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3630 * 40u) + 24u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3724 = (_3630 * 40u) + 28u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3749 = fma(_2149, _3737.z, fma(_2148, _3737.y, _3737.x * _2147)) + _3737.w;
                            _3750 = !((fma(_2149, _3718.z, fma(_2148, _3718.y, _3718.x * _2147)) + _3718.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3750)
                            {
                                float _3777 = _3645.x - _2147;
                                float _3778 = _3645.y - _2148;
                                float _3779 = _3645.z - _2149;
                                float _3780 = dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779));
                                float _3783 = inversesqrt(_3780);
                                float _3784 = _3783 * _3777;
                                float _3785 = _3783 * _3778;
                                float _3786 = _3783 * _3779;
                                float _3790 = 1.0 - (_3780 / (_3646 * _3646));
                                float _4965 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3795 = sqrt(_3780) * _3661.w;
                                float _3797 = 1.39999997615814208984375 / (_3795 + 1.39999997615814208984375);
                                float _3798 = _3797 * _3797;
                                float _3801 = ((1.0 - _3798) * dot(vec3(_3784, _3785, _3786), vec3(_1035, _1038, _1041))) + _3798;
                                float _3804 = _3795 * _3795;
                                float _3808 = (fma(_2149, _3688.z, fma(_2148, _3688.y, _3688.x * _2147)) + _3688.w) / _3749;
                                float _3809 = (fma(_2149, _3703.z, fma(_2148, _3703.y, _3703.x * _2147)) + _3703.w) / _3749;
                                float _3813 = 1.0 - dot(vec2(_3808, _3809), vec2(_3808, _3809));
                                float _4981 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3815 = _3814 * (((isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))) * _3791) / ((_3804 * 0.699999988079071044921875) + 1.0));
                                float _3827 = exp2(log2(1.0 / ((_3804 * 3.5) + 5.0)) * 0.25);
                                float _3828 = 1.0 - _1095;
                                float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                                float _3836 = _3835 * _3835;
                                float _3837 = _3836 * _3836;
                                float _3838 = _3784 - _3288;
                                float _3839 = _3785 - _3289;
                                float _3840 = _3786 - _3290;
                                float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                                float _3848 = dot(vec3(_1035, _1038, _1041), vec3((-0.0) - _3288, (-0.0) - _3289, (-0.0) - _3290));
                                float _4992 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3852 = dot(vec3(_1035, _1038, _1041), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                                float _5003 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                                float _3860 = _3797 * _3836;
                                float _3861 = _3860 * _3860;
                                float _3867 = ((1.0 - _3861) * dot(vec3(_1035, _1038, _1041), vec3(_3784, _3785, _3786))) + _3861;
                                float _5014 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3869 = 1.0 - _3836;
                                float _3879 = (0.5 / (((_3868 * ((_3851 * _3869) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3868 * _3869) + _3836) * _3851))) * _3868;
                                float _5025 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3889 = (_3814 * _3791) * (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3859 * _3859) * ((_3804 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3815 * _3661.y;
                                frontier_phi_78_pred_1 = _3815 * _3661.x;
                                frontier_phi_78_pred_2 = _3889 * _3673.z;
                                frontier_phi_78_pred_3 = _3889 * _3673.y;
                                frontier_phi_78_pred_4 = _3889 * _3673.x;
                                frontier_phi_78_pred_5 = _3815 * _3661.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3897 = frontier_phi_78_pred;
                            _3896 = frontier_phi_78_pred_1;
                            _3895 = frontier_phi_78_pred_2;
                            _3894 = frontier_phi_78_pred_3;
                            _3893 = frontier_phi_78_pred_4;
                            _3898 = frontier_phi_78_pred_5;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            if (_3620 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3620;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3605;
                        frontier_phi_72_pred_1 = _3604;
                        frontier_phi_72_pred_2 = _3603;
                        frontier_phi_72_pred_3 = _3602;
                        frontier_phi_72_pred_4 = _3601;
                        frontier_phi_72_pred_5 = _3600;
                    }
                    _3273 = frontier_phi_72_pred;
                    _3271 = frontier_phi_72_pred_1;
                    _3269 = frontier_phi_72_pred_2;
                    _3267 = frontier_phi_72_pred_3;
                    _3265 = frontier_phi_72_pred_4;
                    _3263 = frontier_phi_72_pred_5;
                    uint _3408 = _3407 + 1u;
                    if (_3408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3401 = _3263;
                        _3402 = _3265;
                        _3403 = _3267;
                        _3404 = _3269;
                        _3405 = _3271;
                        _3406 = _3273;
                        _3407 = _3408;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3273;
                frontier_phi_60_61_ladder_1 = _3271;
                frontier_phi_60_61_ladder_2 = _3267;
                frontier_phi_60_61_ladder_3 = _3265;
                frontier_phi_60_61_ladder_4 = _3263;
                frontier_phi_60_61_ladder_5 = _3269;
            }
            else
            {
                frontier_phi_60_61_ladder = _3159;
                frontier_phi_60_61_ladder_1 = _3157;
                frontier_phi_60_61_ladder_2 = _3153;
                frontier_phi_60_61_ladder_3 = _3151;
                frontier_phi_60_61_ladder_4 = _3149;
                frontier_phi_60_61_ladder_5 = _3155;
            }
            _3262 = frontier_phi_60_61_ladder_4;
            _3264 = frontier_phi_60_61_ladder_3;
            _3266 = frontier_phi_60_61_ladder_2;
            _3268 = frontier_phi_60_61_ladder_5;
            _3270 = frontier_phi_60_61_ladder_1;
            _3272 = frontier_phi_60_61_ladder;
        }
        float _3277 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _3082 = (_3277 * _3268) + _2613;
        _3084 = (_3277 * _3270) + _2615;
        _3086 = (_3277 * _3272) + _2617;
        _3088 = ((_3262 * 0.039999999105930328369140625) * _3277) + _2936;
        _3090 = ((_3264 * 0.039999999105930328369140625) * _3277) + _2938;
        _3092 = ((_3266 * 0.039999999105930328369140625) * _3277) + _2940;
    }
    else
    {
        _3082 = _2613;
        _3084 = _2615;
        _3086 = _2617;
        _3088 = _2936;
        _3090 = _2938;
        _3092 = _2940;
    }
    float _5041 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _5052 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _5063 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    uint _3112 = _280 + 6u;
    float _3120 = _1016 / cbSceneParam._m0[86u].x;
    float _3121 = _1017 / cbSceneParam._m0[86u].y;
    vec4 _3135 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3120, _3121, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3137 = _3135.x;
    float _3138 = _3135.y;
    float _3139 = _3135.z;
    float _3140 = _3135.w;
    float _3212;
    float _3214;
    float _3216;
    float _3218;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _3174 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _3175 = _3174 / _950;
        float _3186 = _3175 * _1001;
        float _3187 = _1002 * _3175;
        float _3188 = (-0.0) - _3187;
        float _3190 = _3175 * _1003;
        float _3192 = (cbSceneParam._m0[77u].w * _3188) / _3174;
        float _3193 = _3192 + cbSceneParam._m0[79u].w;
        float _3194 = cbSceneParam._m0[79u].w - _3187;
        float _3200 = sqrt(((_3186 * _3186) + (_3187 * _3187)) + (_3190 * _3190));
        float _3203 = (1.0 - (cbSceneParam._m0[77u].w / _3174)) * _3200;
        float _3208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3363;
        if (abs((_3188 - _3192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3363 = ((((_3193 > 0.0) ? exp2(_3208 * _3193) : (2.0 - exp2(_3210 * _3193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3203;
        }
        else
        {
            float _3323 = 1.0 / cbSceneParam._m0[80u].x;
            float _3324 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : max(_3193, _3194));
            float _3325 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : min(_3193, _3194));
            float _3334 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : min(_3324, 0.0));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            _3363 = ((abs(_3200 / _3188) * cbSceneParam._m0[80u].y) * ((((_3334 - _3335) * 2.0) - ((exp2(_3208 * (isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0)))) - exp2(_3208 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))))) * _3323)) - ((exp2(_3210 * _3334) - exp2(_3210 * _3335)) * _3323))) + (_3203 * cbSceneParam._m0[80u].z);
        }
        vec4 _3365 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3120, _3121, 1.0), 0.0);
        float _3374 = exp2((_3363 * (-1.44269502162933349609375)) * (1.0 - _3365.w));
        float _3375 = log2(_3374);
        float _3391 = log2(_3140);
        _3212 = (exp2(_3391 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].x)) * _3365.x) / cbSceneParam._m0[78u].x)) + _3137;
        _3214 = (exp2(_3391 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].y)) * _3365.y) / cbSceneParam._m0[78u].y)) + _3138;
        _3216 = (exp2(_3391 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].z)) * _3365.z) / cbSceneParam._m0[78u].z)) + _3139;
        _3218 = _3374 * _3140;
    }
    else
    {
        _3212 = _3137;
        _3214 = _3138;
        _3216 = _3139;
        _3218 = _3140;
    }
    float _3230 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3231 = _3230 == 3.0;
    float _3232 = log2(_3218);
    float _3239 = exp2(_3232 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3082 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1079))) + ((_3088 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3240 = exp2(_3232 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3084 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1079))) + ((_3090 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3241 = exp2(_3232 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3086 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1079))) + ((_3092 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3250 = (_3230 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3250 * (_3231 ? _3239 : (_3239 + (cbSceneParam._m0[72u].w * _3212)));
    SV_Target.y = _3250 * (_3231 ? _3240 : (_3240 + (cbSceneParam._m0[72u].w * _3214)));
    SV_Target.z = _3250 * (_3231 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3216)));
    SV_Target.w = cbInstanceData._m0[_3112].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3112].w;
}


