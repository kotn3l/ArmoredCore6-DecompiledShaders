#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1231;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _322.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].z) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3536 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _398 = (_391 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _399 = (_391 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _400 = (_391 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _322.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3547 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _512 = _508.z;
    float _519 = ((_491.x - _510) * _391) + _510;
    float _520 = ((_491.y - _511) * _391) + _511;
    float _521 = ((_491.z - _512) * _391) + _512;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _546 = ((_533.z - _521) * _464) + _521;
    float _549 = ((((_533.x - _519) * _464) + _519) * 2.0) + (-1.0);
    float _551 = ((((_533.y - _520) * _464) + _520) * 2.0) + (-1.0);
    float _552 = dot(vec2(_549, _551), vec2(_549, _551));
    float _3558 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _583 = (((_571.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _549;
    float _584 = (((_571.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _551;
    float _587 = fma(_557, _222, fma(_584, _229, _583 * _215));
    float _590 = fma(_557, _223, fma(_584, _230, _583 * _216));
    float _593 = fma(_557, _224, fma(_584, _231, _583 * _217));
    float _597 = inversesqrt(dot(vec3(_587, _590, _593), vec3(_587, _590, _593)));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _633 = (cbMtdParam._m0[19u].x + dot(vec4(_597 * _587, _597 * _590, _597 * _593, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_626 - _627) * cbMtdParam._m0[24u].w) + _627) * cbMtdParam._m0[21u].z);
    float _3569 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _641 = (_634 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _642 = (_634 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _643 = (_634 * (cbMtdParam._m0[17u].z - _473)) + _473;
    float _647 = (cbMtdParam._m0[19u].w * (_571.z - _546)) + _546;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3580 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = ((_660.z - _647) * _634) + _647;
    float _687 = ((sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) - _557) * _634) + _557;
    float _690 = (((_667 - _583) * _634) + _583) + (cbMtdParam._m0[21u].x * _583);
    float _691 = (((_668 - _584) * _634) + _584) + (cbMtdParam._m0[21u].x * _584);
    float _695 = cbMtdParam._m0[22u].x + _571.w;
    float _698 = fma(_687, _222, fma(_691, _229, _690 * _215));
    float _701 = fma(_687, _223, fma(_691, _230, _690 * _216));
    float _704 = fma(_687, _224, fma(_691, _231, _690 * _217));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3591 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _712 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3613 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3624 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3635 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _730 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    float _797 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _798 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _816 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _819 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _822 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _836 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3646 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _797, cbSceneParam._m0[86u].y * _798));
    float _860 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_709, _710, _711), vec3(_789, _790, _791));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _709) - _789;
    float _869 = (_864 * _710) - _790;
    float _870 = (_864 * _711) - _791;
    float _874 = abs(dot(vec3(_789, _790, _791), vec3(_709, _710, _711)));
    float _3679 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_712);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1230;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _955 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _959 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _963 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _988 = _921 + _709;
        float _989 = _925 + _710;
        float _990 = _929 + _711;
        float _1000 = fma(_990, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988)) - _955;
        float _1001 = fma(_990, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988)) - _959;
        float _1002 = fma(_990, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988)) - _963;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_955 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_959 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[34u].z) + ((((((_963 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1058 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1024.x + (-0.5));
        float _1060 = _1058 * (_1024.y + (-0.5));
        float _1061 = _1058 * (_1024.z + (-0.5));
        float _1068 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1031.x + (-0.5));
        float _1070 = _1068 * (_1031.y + (-0.5));
        float _1071 = _1068 * (_1031.z + (-0.5));
        float _1078 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1038.x + (-0.5));
        float _1080 = _1078 * (_1038.y + (-0.5));
        float _1081 = _1078 * (_1038.z + (-0.5));
        float _1088 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1045.x + (-0.5));
        float _1090 = _1088 * (_1045.y + (-0.5));
        float _1091 = _1088 * (_1045.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1112 = (dot(vec3(_709, _710, _711), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1122 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3727 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1124 + 1.0))) + _1129) * _1092;
        float _1139 = _1060 * 0.5;
        float _1140 = _1070 * 0.5;
        float _1141 = _1080 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_709, _710, _711), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3760 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1166 + 1.0))) + _1171) * _1093;
        float _1181 = _1061 * 0.5;
        float _1182 = _1071 * 0.5;
        float _1183 = _1081 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_709, _710, _711), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3793 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1208 + 1.0))) + _1213) * _1094;
        _1230 = _1061;
        _1232 = _1060;
        _1233 = _1059;
        _1234 = _1071;
        _1235 = _1070;
        _1236 = _1069;
        _1237 = _1081;
        _1238 = _1080;
        _1239 = _1079;
        _1240 = _1094;
        _1241 = _1093;
        _1242 = _1092;
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _1231;
        _1232 = _1231;
        _1233 = _1231;
        _1234 = _1231;
        _1235 = _1231;
        _1236 = _1231;
        _1237 = _1231;
        _1238 = _1231;
        _1239 = _1231;
        _1240 = _1231;
        _1241 = _1231;
        _1242 = _1231;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1273 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1277 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1300 = _921 + _709;
        float _1301 = _925 + _710;
        float _1302 = _929 + _711;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_709, _710, _711), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3856 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_709, _710, _711), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3889 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_709, _710, _711), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3922 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1231;
        _1539 = _1231;
        _1540 = _1231;
        _1541 = _1231;
        _1542 = _1231;
        _1543 = _1231;
        _1544 = _1231;
        _1545 = _1231;
        _1546 = _1231;
        _1547 = _1231;
        _1548 = _1231;
        _1549 = _1231;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1243)) + _1243;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1244)) + _1244;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1245)) + _1245;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _868 * 0.5;
    float _1607 = _869 * 0.5;
    float _1608 = _870 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1230, _1234, _1237, _1240));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1737 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1740 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1768 = frontier_phi_14_12_ladder;
        }
        float _1969;
        if (_1737 > 0.0)
        {
            _1969 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1969 = frontier_phi_23_19_ladder;
        }
        float _2212;
        if (_1740 > 0.0)
        {
            _2212 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2212 = frontier_phi_35_30_ladder;
        }
        float _2214 = isnan(_1969) ? _1768 : (isnan(_1768) ? _1969 : min(_1768, _1969));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1734) + _1723;
        float _2220 = (_2215 * _1737) + _1727;
        float _2221 = (_2215 * _1740) + _1731;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2222;
        float _2226 = _2222 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 > _2226) || ((_2220 < _2224) || ((_2219 < _2224) || (_2219 > _2226))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2221, cbModelParam._m0[9u].z, fma(_2220, cbModelParam._m0[9u].y, _2219 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2221, cbModelParam._m0[10u].z, fma(_2220, cbModelParam._m0[10u].y, _2219 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2221, cbModelParam._m0[11u].z, fma(_2220, cbModelParam._m0[11u].y, _2219 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_13_35_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_13_35_ladder_2;
        _1758 = frontier_phi_13_35_ladder_1;
        _1760 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1675);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1833 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1836 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _1974;
        if (_1830 > 0.0)
        {
            _1974 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1974 = frontier_phi_25_21_ladder;
        }
        float _2239;
        if (_1833 > 0.0)
        {
            _2239 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2239 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1836 > 0.0)
        {
            _2444 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2444 = frontier_phi_46_43_ladder;
        }
        float _2446 = isnan(_2239) ? _1974 : (isnan(_1974) ? _2239 : min(_1974, _2239));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1830) + _1819;
        float _2452 = (_2447 * _1833) + _1823;
        float _2453 = (_2447 * _1836) + _1827;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_22_46_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_22_46_ladder_2;
        _1857 = frontier_phi_22_46_ladder_1;
        _1859 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1765);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1871 = ((((1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_889 * _876)) * _860;
    float _1872 = _1871 * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1873 = _1871 * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1874 = _1871 * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    uvec4 _1893 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1895 = _1893.x * 14u;
    uint _1896 = _1895 + 13u;
    float _1903 = _860 + (-1.0);
    float _1908 = (cbLight._m0[_1896].x * _1903) + 1.0;
    float _1909 = (cbLight._m0[_1896].y * _1903) + 1.0;
    float _1910 = (cbLight._m0[_1896].z * _1903) + 1.0;
    float _1911 = (cbLight._m0[_1896].w * _1903) + 1.0;
    uint _1912 = _1895 + 5u;
    float _1918 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1922 = _1895 + 4u;
    float _1928 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1932 = _1895 | 1u;
    float _1943 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_709, _710, _711));
    float _1946 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_709, _710, _711));
    float _4058 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _4069 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1951 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1953 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1960 = ((cbLight._m0[_1912].x * _1918) * _1953) + ((cbLight._m0[_1922].x * _1928) * _1951);
    float _1961 = ((_1918 * cbLight._m0[_1912].y) * _1953) + ((_1928 * cbLight._m0[_1922].y) * _1951);
    float _1962 = ((_1918 * cbLight._m0[_1912].z) * _1953) + ((_1928 * cbLight._m0[_1922].z) * _1951);
    uvec4 _1966 = floatBitsToUint(cbLight._m0[_1895 + 12u]);
    bool _1968 = _1966.x == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1968)
    {
        _1979 = _1960;
        _1981 = _1961;
        _1983 = _1962;
    }
    else
    {
        uint _1987 = _1895 + 6u;
        float _2003 = (dot(vec3(cbLight._m0[_1895 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _4080 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2006 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _1979 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1960;
        _1981 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1961;
        _1983 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1962;
    }
    bool _1986 = _1966.y == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1986)
    {
        _2024 = _1979;
        _2026 = _1981;
        _2028 = _1983;
    }
    else
    {
        uint _2183 = _1895 + 7u;
        float _2199 = (dot(vec3(cbLight._m0[_1895 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4096 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2202 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2024 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _1979;
        _2026 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _1981;
        _2028 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _1983;
    }
    uint _2031 = _1895 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _712) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1895].x + _789;
    float _2047 = cbLight._m0[_1895].y + _790;
    float _2048 = cbLight._m0[_1895].z + _791;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1895].xyz));
    float _4112 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2060 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2061 = dot(vec3(_709, _710, _711), vec3(_2053, _2054, _2055));
    float _4134 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2053, _2054, _2055));
    float _4145 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2045;
    float _2096 = (0.5 / (((_2060 * ((_2059 * _2085) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2085) + _2045) * _2059))) * _2059;
    float _4156 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2109 = _1895 + 9u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _712) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1932].x + _789;
    float _2123 = cbLight._m0[_1932].y + _790;
    float _2124 = cbLight._m0[_1932].z + _791;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1932].xyz));
    float _4167 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2136 = dot(vec3(_709, _710, _711), vec3(_2129, _2130, _2131));
    float _4178 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2129, _2130, _2131));
    float _4189 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2121 * _2121;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2158 = 1.0 - _2121;
    float _2168 = (0.5 / (((_2060 * ((_2135 * _2158) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2158) + _2121) * _2135))) * _2135;
    float _4200 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    float _2180 = (((_2157 * cbLight._m0[_2109].x) * _2170) * _1918) + (((_2084 * cbLight._m0[_2031].x) * _2098) * _1928);
    float _2181 = (((_2157 * cbLight._m0[_2109].y) * _2170) * _1918) + (((_2084 * cbLight._m0[_2031].y) * _2098) * _1928);
    float _2182 = (((_2157 * cbLight._m0[_2109].z) * _2170) * _1918) + (((_2084 * cbLight._m0[_2031].z) * _2098) * _1928);
    float _2244;
    float _2246;
    float _2248;
    if (_1968)
    {
        _2244 = _2180;
        _2246 = _2181;
        _2248 = _2182;
    }
    else
    {
        uint _2250 = _1895 + 2u;
        uint _2254 = _1895 + 10u;
        float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _712) * 0.949999988079071044921875);
        float _2269 = _2268 * _2268;
        float _2270 = cbLight._m0[_2250].x + _789;
        float _2271 = cbLight._m0[_2250].y + _790;
        float _2272 = cbLight._m0[_2250].z + _791;
        float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
        float _2277 = _2276 * _2270;
        float _2278 = _2276 * _2271;
        float _2279 = _2276 * _2272;
        float _2280 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2250].xyz));
        float _4211 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2284 = dot(vec3(_709, _710, _711), vec3(_2277, _2278, _2279));
        float _4222 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2288 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2277, _2278, _2279));
        float _4233 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2292 = _2269 * _2269;
        float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
        float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2306 = 1.0 - _2269;
        float _2316 = (0.5 / (((_2060 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2306) + _2269) * _2283))) * _2283;
        float _4244 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2244 = (((_2305 * cbLight._m0[_2254].x) * _2318) * _2319) + _2180;
        _2246 = (((_2305 * cbLight._m0[_2254].y) * _2318) * _2319) + _2181;
        _2248 = (((_2305 * cbLight._m0[_2254].z) * _2318) * _2319) + _2182;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1986)
    {
        _2354 = _2244;
        _2356 = _2246;
        _2358 = _2248;
    }
    else
    {
        uint _2365 = _1895 + 3u;
        uint _2369 = _1895 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _712) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _789;
        float _2386 = cbLight._m0[_2365].y + _790;
        float _2387 = cbLight._m0[_2365].z + _791;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2365].xyz));
        float _4260 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2399 = dot(vec3(_709, _710, _711), vec3(_2392, _2393, _2394));
        float _4271 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4282 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2421 = 1.0 - _2384;
        float _2431 = (0.5 / (((_2060 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2421) + _2384) * _2398))) * _2398;
        float _4293 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2354 = (((_2420 * cbLight._m0[_2369].x) * _2433) * _2434) + _2244;
        _2356 = (((_2420 * cbLight._m0[_2369].y) * _2433) * _2434) + _2246;
        _2358 = (((_2420 * cbLight._m0[_2369].z) * _2433) * _2434) + _2248;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1893.y == 0u)
    {
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2509;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2509;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2509;
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _798) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _797) / _2525)));
        float _2546 = (log2(_2512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2818)
                {
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2817;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2808 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _2510;
                        float _2993 = _2952.y - _2511;
                        float _2994 = _2952.z - _2512;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_816, _819, _822), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4319 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _2510;
                        float _3028 = (-0.0) - _2511;
                        float _3029 = (-0.0) - _2512;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3044 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3045 = 1.0 - _876;
                        float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                        float _3053 = _3052 * _3052;
                        float _3054 = _3053 * _3053;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3065 = dot(vec3(_816, _819, _822), vec3(_3034, _3035, _3036));
                        float _4335 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3069 = dot(vec3(_816, _819, _822), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                        float _4346 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                        float _3077 = _3012 * _3053;
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3002) + _3078;
                        float _4357 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3083 = 1.0 - _3053;
                        float _3093 = (0.5 / (((_3082 * ((_3068 * _3083) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3053) * _3068))) * _3082;
                        float _4368 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3104 = (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3076 * _3076) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2861 = (_3023 * _2971.x) + _2929;
                        _2862 = (_3023 * _2971.y) + _2930;
                        _2863 = (_3023 * _2971.z) + _2931;
                        _2858 = (_3104 * _2988.x) + _2926;
                        _2859 = (_3104 * _2988.y) + _2927;
                        _2860 = (_3104 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_61_pred = _2858;
                    frontier_phi_61_pred_1 = _2863;
                    frontier_phi_61_pred_2 = _2862;
                    frontier_phi_61_pred_3 = _2861;
                    frontier_phi_61_pred_4 = _2860;
                    frontier_phi_61_pred_5 = _2859;
                }
                _2658 = frontier_phi_61_pred;
                _2668 = frontier_phi_61_pred_1;
                _2666 = frontier_phi_61_pred_2;
                _2664 = frontier_phi_61_pred_3;
                _2662 = frontier_phi_61_pred_4;
                _2660 = frontier_phi_61_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2658;
                    _2803 = _2660;
                    _2804 = _2662;
                    _2805 = _2664;
                    _2806 = _2666;
                    _2807 = _2668;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2674) & _2556) == 0u)
        {
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
            float _2796 = _2795 * _2510;
            float _2797 = _2795 * _2511;
            float _2798 = _2795 * _2512;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2909 = _2657;
                float _2910 = _2659;
                float _2911 = _2661;
                float _2912 = _2663;
                float _2913 = _2665;
                float _2914 = _2667;
                uint _2915 = _2674;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2925)
                    {
                        frontier_phi_67_pred = _2912;
                        frontier_phi_67_pred_1 = _2913;
                        frontier_phi_67_pred_2 = _2914;
                        frontier_phi_67_pred_3 = _2911;
                        frontier_phi_67_pred_4 = _2910;
                        frontier_phi_67_pred_5 = _2909;
                    }
                    else
                    {
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        uint _3128 = _2924;
                        uint _3129;
                        vec4 _3154;
                        float _3155;
                        vec4 _3170;
                        vec3 _3182;
                        vec4 _3197;
                        vec4 _3212;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3139 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3128));
                            _3129 = (_3128 + 4294967295u) & _3128;
                            uint _3141 = _3139 * 40u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3155 = _3154.w;
                            uint _3157 = (_3139 * 40u) + 4u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3139 * 40u) + 8u;
                            _3182 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x));
                            uint _3184 = (_3139 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3139 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3139 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3139 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2512, _3246.z, fma(_2511, _3246.y, _3246.x * _2510)) + _3246.w;
                            _3259 = !((fma(_2512, _3227.z, fma(_2511, _3227.y, _3227.x * _2510)) + _3227.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3154.x - _2510;
                                float _3287 = _3154.y - _2511;
                                float _3288 = _3154.z - _2512;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3155 * _3155));
                                float _4379 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3304 = sqrt(_3289) * _3170.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_816, _819, _822))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2512, _3197.z, fma(_2511, _3197.y, _3197.x * _2510)) + _3197.w) / _3258;
                                float _3318 = (fma(_2512, _3212.z, fma(_2511, _3212.y, _3212.x * _2510)) + _3212.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4395 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _876;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2796;
                                float _3348 = _3294 - _2797;
                                float _3349 = _3295 - _2798;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_816, _819, _822), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4406 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3361 = dot(vec3(_816, _819, _822), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4417 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_816, _819, _822), vec3(_3293, _3294, _3295))) + _3370;
                                float _4428 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4439 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3398 * _3182.x;
                                frontier_phi_73_pred_1 = _3398 * _3182.y;
                                frontier_phi_73_pred_2 = _3324 * _3170.z;
                                frontier_phi_73_pred_3 = _3324 * _3170.y;
                                frontier_phi_73_pred_4 = _3324 * _3170.x;
                                frontier_phi_73_pred_5 = _3398 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_73_pred;
                            _3403 = frontier_phi_73_pred_1;
                            _3407 = frontier_phi_73_pred_2;
                            _3406 = frontier_phi_73_pred_3;
                            _3405 = frontier_phi_73_pred_4;
                            _3404 = frontier_phi_73_pred_5;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            if (_3129 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3129;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3112;
                        frontier_phi_67_pred_1 = _3113;
                        frontier_phi_67_pred_2 = _3114;
                        frontier_phi_67_pred_3 = _3111;
                        frontier_phi_67_pred_4 = _3110;
                        frontier_phi_67_pred_5 = _3109;
                    }
                    _2777 = frontier_phi_67_pred;
                    _2779 = frontier_phi_67_pred_1;
                    _2781 = frontier_phi_67_pred_2;
                    _2775 = frontier_phi_67_pred_3;
                    _2773 = frontier_phi_67_pred_4;
                    _2771 = frontier_phi_67_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2771;
                        _2910 = _2773;
                        _2911 = _2775;
                        _2912 = _2777;
                        _2913 = _2779;
                        _2914 = _2781;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2779;
                frontier_phi_55_56_ladder_1 = _2781;
                frontier_phi_55_56_ladder_2 = _2777;
                frontier_phi_55_56_ladder_3 = _2775;
                frontier_phi_55_56_ladder_4 = _2773;
                frontier_phi_55_56_ladder_5 = _2771;
            }
            else
            {
                frontier_phi_55_56_ladder = _2665;
                frontier_phi_55_56_ladder_1 = _2667;
                frontier_phi_55_56_ladder_2 = _2663;
                frontier_phi_55_56_ladder_3 = _2661;
                frontier_phi_55_56_ladder_4 = _2659;
                frontier_phi_55_56_ladder_5 = _2657;
            }
            _2770 = frontier_phi_55_56_ladder_5;
            _2772 = frontier_phi_55_56_ladder_4;
            _2774 = frontier_phi_55_56_ladder_3;
            _2776 = frontier_phi_55_56_ladder_2;
            _2778 = frontier_phi_55_56_ladder;
            _2780 = frontier_phi_55_56_ladder_1;
        }
        float _2785 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2569 = (_2785 * _2776) + _2024;
        _2571 = (_2785 * _2778) + _2026;
        _2573 = (_2785 * _2780) + _2028;
        _2575 = ((_2770 * 0.039999999105930328369140625) * _2785) + _2354;
        _2577 = ((_2772 * 0.039999999105930328369140625) * _2785) + _2356;
        _2579 = ((_2774 * 0.039999999105930328369140625) * _2785) + _2358;
    }
    else
    {
        _2569 = _2024;
        _2571 = _2026;
        _2573 = _2028;
        _2575 = _2354;
        _2577 = _2356;
        _2579 = _2358;
    }
    float _4455 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4466 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4477 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    uint _2599 = _234 + 6u;
    float _2607 = _797 / cbSceneParam._m0[86u].x;
    float _2608 = _798 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _730 : (isnan(_730) ? cbSceneParam._m0[77u].w : min(_730, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_730 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_730) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _730 : min(cbSceneParam._m0[80u].w, _730));
        float _2683 = _2682 / _730;
        float _2694 = _2683 * _782;
        float _2695 = _783 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2698 = _2683 * _784;
        float _2700 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2695;
        float _2708 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2696 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2833 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2871 = ((abs(_2708 / _2696) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2718 * _2842) - exp2(_2718 * _2843)) * _2831))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2627);
        _2720 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2722 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2724 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2726 = _2882 * _2627;
    }
    else
    {
        _2720 = _2624;
        _2722 = _2625;
        _2724 = _2626;
        _2726 = _2627;
    }
    float _2738 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2739 = _2738 == 3.0;
    float _2740 = log2(_2726);
    float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2569 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _860))) + ((_2575 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2571 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _860))) + ((_2577 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2573 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _860))) + ((_2579 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2758 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2758 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.y = _2758 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.z = _2758 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


