#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _4148;
float _4149;
float _4150;
float _4151;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4160 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _428 = (_421 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _429 = (_421 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _430 = (_421 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4171 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _562 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _349.z) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4182 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _570 = (_563 * ((_521.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _571 = (_563 * ((_521.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _572 = (_563 * ((_521.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _611 = _607.z;
    float _618 = ((_590.x - _609) * _421) + _609;
    float _619 = ((_590.y - _610) * _421) + _610;
    float _620 = ((_590.z - _611) * _421) + _611;
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_632.x - _618) * _494) + _618;
    float _644 = ((_632.y - _619) * _494) + _619;
    float _645 = ((_632.z - _620) * _494) + _620;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _670 = ((_657.z - _645) * _563) + _645;
    float _673 = ((((_657.x - _643) * _563) + _643) * 2.0) + (-1.0);
    float _675 = ((((_657.y - _644) * _563) + _644) * 2.0) + (-1.0);
    float _676 = dot(vec2(_673, _675), vec2(_673, _675));
    float _4193 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _681 = sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _707 = (((_695.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _673;
    float _708 = (((_695.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _675;
    float _711 = fma(_681, _251, fma(_708, _258, _707 * _244));
    float _714 = fma(_681, _252, fma(_708, _259, _707 * _245));
    float _717 = fma(_681, _253, fma(_708, _260, _707 * _246));
    float _721 = inversesqrt(dot(vec3(_711, _714, _717), vec3(_711, _714, _717)));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _750 = _748.x;
    float _751 = 1.0 - _750;
    float _757 = (cbMtdParam._m0[19u].x + dot(vec4(_721 * _711, _721 * _714, _721 * _717, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_750 - _751) * cbMtdParam._m0[24u].w) + _751) * cbMtdParam._m0[21u].z);
    float _4204 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _760 = (-0.0) - cbMtdParam._m0[24u].x;
    float _762 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
    float _770 = _758 - ((_758 * TEXCOORD_8.x) * _763);
    float _771 = _758 - ((_758 * TEXCOORD_8.y) * _763);
    float _772 = _758 - ((_758 * TEXCOORD_8.z) * _763);
    float _779 = (_770 * (cbMtdParam._m0[17u].x - _570)) + _570;
    float _780 = (_771 * (cbMtdParam._m0[17u].y - _571)) + _571;
    float _781 = (_772 * (cbMtdParam._m0[17u].z - _572)) + _572;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _795 = _793.x;
    float _796 = 1.0 - _795;
    float _824 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_795 - _796) * cbMtdParam._m0[24u].y) + _796) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4225 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _833 = ((((cbMtdParam._m0[10u].x - _779) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _825) + _779;
    float _834 = ((((cbMtdParam._m0[10u].y - _780) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _825) + _780;
    float _835 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _781)) * _825) + _781;
    float _839 = (cbMtdParam._m0[19u].w * (_695.z - _670)) + _670;
    vec4 _853 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _860 = (_853.x * 2.0) + (-1.0);
    float _861 = (_853.y * 2.0) + (-1.0);
    float _862 = dot(vec2(_860, _861), vec2(_860, _861));
    float _4236 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _870 = ((_853.z - _839) * _770) + _839;
    float _873 = ((cbMtdParam._m0[23u].y - _870) * _825) + _870;
    vec4 _892 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _898 = (_892.x * 2.0) + (-1.0);
    float _899 = (_892.y * 2.0) + (-1.0);
    float _900 = dot(vec2(_898, _899), vec2(_898, _899));
    float _4247 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _915 = ((sqrt(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) - _681) * _772) + _681;
    float _918 = (((_860 - _707) * _770) + _707) + (cbMtdParam._m0[21u].x * _707);
    float _919 = (((_861 - _708) * _771) + _708) + (cbMtdParam._m0[21u].x * _708);
    float _930 = (((_898 - _918) + (_918 * cbMtdParam._m0[22u].z)) * _825) + _918;
    float _931 = (((_899 - _919) + (_919 * cbMtdParam._m0[22u].z)) * _825) + _919;
    float _932 = (_825 * (sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) - _915)) + _915;
    float _934 = cbMtdParam._m0[22u].x + _695.w;
    float _937 = fma(_932, _251, fma(_931, _258, _930 * _244));
    float _940 = fma(_932, _252, fma(_931, _259, _930 * _245));
    float _943 = fma(_932, _253, fma(_931, _260, _930 * _246));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4258 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _951 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4280 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4291 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4302 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1020 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1010);
    float _1021 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1010);
    float _1022 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1010);
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1027 = _1020 * _1026;
    float _1028 = _1021 * _1026;
    float _1029 = _1022 * _1026;
    vec4 _1034 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1036 = _1034.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_1020 * _1020) + (_1021 * _1021)) + (_1022 * _1022));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _4313 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _4324 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) - _1197)) + _1197) < ((_1036 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1047 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1048 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1066 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1069 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1072 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1085 = _263 + 9u;
    uint _1086 = _1085 + uint(cbMatDynParam._m0[0u].w);
    float _1092 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * cbInstanceData._m0[_1086].x;
    float _1093 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1086].y;
    float _1094 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * cbInstanceData._m0[_1086].z;
    float _4335 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _4357 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    vec4 _1106 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1047, cbSceneParam._m0[86u].y * _1048));
    float _1110 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * TEXCOORD_5.w) * _1106.x;
    float _1111 = dot(vec3(_948, _949, _950), vec3(_1027, _1028, _1029));
    float _1114 = _1111 * 2.0;
    float _1118 = (_1114 * _948) - _1027;
    float _1119 = (_1114 * _949) - _1028;
    float _1120 = (_1114 * _950) - _1029;
    float _1124 = abs(dot(vec3(_1027, _1028, _1029), vec3(_948, _949, _950)));
    float _4368 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1126 = sqrt(_951);
    float _1139 = exp2((_1126 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1126 * 3.0));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1237 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1241 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1266 = _1171 + _948;
        float _1267 = _1175 + _949;
        float _1268 = _1179 + _950;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_948, _949, _950), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4416 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_948, _949, _950), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4449 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_948, _949, _950), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4482 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1553 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1557 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1580 = _1171 + _948;
        float _1581 = _1175 + _949;
        float _1582 = _1179 + _950;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_948, _949, _950), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4545 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_948, _949, _950), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4556 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4567 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4578 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_948, _949, _950), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4589 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4600 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4611 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1509;
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1523)) + _1523;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1118 * 0.5;
    float _1887 = _1119 * 0.5;
    float _1888 = _1120 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1120, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118));
        float _2016 = fma(_1120, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118));
        float _2019 = fma(_1120, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2047 = frontier_phi_17_15_ladder;
        }
        float _2217;
        if (_2016 > 0.0)
        {
            _2217 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2217 = frontier_phi_26_22_ladder;
        }
        float _2512;
        if (_2019 > 0.0)
        {
            _2512 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2512 = frontier_phi_38_33_ladder;
        }
        float _2514 = isnan(_2217) ? _2047 : (isnan(_2047) ? _2217 : min(_2047, _2217));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _2013) + _2002;
        float _2520 = (_2515 * _2016) + _2006;
        float _2521 = (_2515 * _2019) + _2010;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2522;
        float _2526 = _2522 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 > _2526) || ((_2520 < _2524) || ((_2519 < _2524) || (_2519 > _2526))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_16_38_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_16_38_ladder_2;
        _2037 = frontier_phi_16_38_ladder_1;
        _2039 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1118, _1119, _1120), _1955);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1120, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118));
        float _2112 = fma(_1120, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118));
        float _2115 = fma(_1120, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118));
        float _2222;
        if (_2109 > 0.0)
        {
            _2222 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2222 = frontier_phi_28_24_ladder;
        }
        float _2539;
        if (_2112 > 0.0)
        {
            _2539 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2539 = frontier_phi_40_35_ladder;
        }
        float _2866;
        if (_2115 > 0.0)
        {
            _2866 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2866 = frontier_phi_50_47_ladder;
        }
        float _2868 = isnan(_2539) ? _2222 : (isnan(_2222) ? _2539 : min(_2222, _2539));
        float _2869 = isnan(_2866) ? _2868 : (isnan(_2868) ? _2866 : min(_2868, _2866));
        float _2873 = (_2869 * _2109) + _2098;
        float _2874 = (_2869 * _2112) + _2102;
        float _2875 = (_2869 * _2115) + _2106;
        float _2876 = _2869 * 9.9999997473787516355514526367188e-05;
        float _2877 = (-1.0) - _2876;
        float _2879 = _2876 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2875 > _2879) || ((_2875 < _2877) || ((_2874 > _2879) || ((_2874 < _2877) || ((_2873 < _2877) || (_2873 > _2879))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2875, cbModelParam._m0[17u].z, fma(_2874, cbModelParam._m0[17u].y, _2873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2875, cbModelParam._m0[18u].z, fma(_2874, cbModelParam._m0[18u].y, _2873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2875, cbModelParam._m0[19u].z, fma(_2874, cbModelParam._m0[19u].y, _2873 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_25_50_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_25_50_ladder_2;
        _2136 = frontier_phi_25_50_ladder_1;
        _2138 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1118, _1119, _1120), _2044);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2150 = ((((1.0 - _1139) * ((_1126 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1139 * _1126)) * _1110;
    float _2151 = _2150 * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2152 = _2150 * ((cbModelParam._m0[1u].w * (_2136 - _2037)) + _2037);
    float _2153 = _2150 * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2209 = _2196 / _2208;
    float _2210 = _2200 / _2208;
    float _2211 = _2204 / _2208;
    float _2358;
    float _2359;
    float _2360;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2238 = ((uint(_2211 > cbSceneParam._m0[59u].y) + uint(_2211 > cbSceneParam._m0[59u].x)) + uint(_2211 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2239 = _2238 + 43u;
        uint _2247 = _2238 + 44u;
        uint _2255 = _2238 + 45u;
        uint _2263 = _2238 + 46u;
        float _2274 = fma(_2208, cbSceneParam._m0[_2239].w, fma(_2204, cbSceneParam._m0[_2239].z, fma(_2200, cbSceneParam._m0[_2239].y, _2196 * cbSceneParam._m0[_2239].x)));
        float _2278 = fma(_2208, cbSceneParam._m0[_2247].w, fma(_2204, cbSceneParam._m0[_2247].z, fma(_2200, cbSceneParam._m0[_2247].y, _2196 * cbSceneParam._m0[_2247].x)));
        float _2286 = fma(_2208, cbSceneParam._m0[_2263].w, fma(_2204, cbSceneParam._m0[_2263].z, fma(_2200, cbSceneParam._m0[_2263].y, _2196 * cbSceneParam._m0[_2263].x)));
        float _2291 = cbSceneParam._m0[33u].z * _2286;
        float _2293 = cbSceneParam._m0[33u].w * _2286;
        float _2296 = fma(_2208, cbSceneParam._m0[_2255].w, fma(_2204, cbSceneParam._m0[_2255].z, fma(_2200, cbSceneParam._m0[_2255].y, _2196 * cbSceneParam._m0[_2255].x))) / _2286;
        float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
        float _4737 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2351 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2274) / _2286, (_2293 + _2278) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2274) / _2286, (_2278 - _2291) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2291) / _2286, (_2278 - _2293) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2293) / _2286, (_2291 + _2278) / _2286), _2296), 0.0)).x), vec4(0.25)));
        _2358 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
        _2359 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
        _2360 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2358 = 1.0;
        _2359 = 1.0;
        _2360 = 1.0;
    }
    float _2424;
    float _2426;
    float _2428;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2412 = fma(_2208, cbSceneParam._m0[63u].w, fma(_2204, cbSceneParam._m0[63u].z, fma(_2200, cbSceneParam._m0[63u].y, _2196 * cbSceneParam._m0[63u].x)));
        float _2413 = fma(_2208, cbSceneParam._m0[60u].w, fma(_2204, cbSceneParam._m0[60u].z, fma(_2200, cbSceneParam._m0[60u].y, _2196 * cbSceneParam._m0[60u].x))) / _2412;
        float _2414 = fma(_2208, cbSceneParam._m0[61u].w, fma(_2204, cbSceneParam._m0[61u].z, fma(_2200, cbSceneParam._m0[61u].y, _2196 * cbSceneParam._m0[61u].x))) / _2412;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2413 >= cbSceneParam._m0[64u].x) && (_2414 >= cbSceneParam._m0[64u].y)) && (_2413 <= cbSceneParam._m0[64u].z)) && (_2414 <= cbSceneParam._m0[64u].w))
        {
            float _2552 = fma(_2208, cbSceneParam._m0[62u].w, fma(_2204, cbSceneParam._m0[62u].z, fma(_2200, cbSceneParam._m0[62u].y, _2196 * cbSceneParam._m0[62u].x))) / _2412;
            float _2556 = isnan(cbSceneParam._m0[41u].w) ? _2552 : (isnan(_2552) ? cbSceneParam._m0[41u].w : max(_2552, cbSceneParam._m0[41u].w));
            float _2599 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
            float _4753 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
            float _2606 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2413, cbSceneParam._m0[33u].w + _2414), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2413, _2414 - cbSceneParam._m0[33u].z), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].z, _2414 - cbSceneParam._m0[33u].w), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2414), _2556), 0.0)).x), vec4(0.25)));
            float _2610 = 1.0 - (_2606 * cbSceneParam._m0[34u].x);
            float _2611 = 1.0 - (_2606 * cbSceneParam._m0[34u].y);
            float _2612 = 1.0 - (_2606 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_37_36_ladder_1 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_37_36_ladder_2 = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
        }
        else
        {
            frontier_phi_37_36_ladder = _2360;
            frontier_phi_37_36_ladder_1 = _2359;
            frontier_phi_37_36_ladder_2 = _2358;
        }
        _2424 = frontier_phi_37_36_ladder_2;
        _2426 = frontier_phi_37_36_ladder_1;
        _2428 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2424 = _2358;
        _2426 = _2359;
        _2428 = _2360;
    }
    uvec4 _2433 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2435 = _2433.x * 14u;
    uint _2436 = _2435 + 13u;
    float _2443 = _1110 + (-1.0);
    float _2448 = (cbLight._m0[_2436].x * _2443) + 1.0;
    float _2449 = (cbLight._m0[_2436].y * _2443) + 1.0;
    float _2450 = (cbLight._m0[_2436].z * _2443) + 1.0;
    float _2451 = (cbLight._m0[_2436].w * _2443) + 1.0;
    uint _2452 = _2435 + 5u;
    float _2458 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2462 = _2435 + 4u;
    float _2471 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2475 = _2435 | 1u;
    float _2486 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_948, _949, _950));
    float _2489 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_948, _949, _950));
    float _4789 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _4800 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * 0.3183098733425140380859375;
    float _2496 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * 0.3183098733425140380859375;
    float _2503 = ((cbLight._m0[_2452].x * _2458) * _2496) + (((cbLight._m0[_2462].x * _2424) * _2471) * _2494);
    float _2504 = ((_2458 * cbLight._m0[_2452].y) * _2496) + (((cbLight._m0[_2462].y * _2426) * _2471) * _2494);
    float _2505 = ((_2458 * cbLight._m0[_2452].z) * _2496) + (((cbLight._m0[_2462].z * _2428) * _2471) * _2494);
    uvec4 _2509 = floatBitsToUint(cbLight._m0[_2435 + 12u]);
    bool _2511 = _2509.x == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2511)
    {
        _2613 = _2503;
        _2615 = _2504;
        _2617 = _2505;
    }
    else
    {
        uint _2621 = _2435 + 6u;
        float _2637 = (dot(vec3(cbLight._m0[_2435 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4811 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2640 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2613 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2503;
        _2615 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2504;
        _2617 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2505;
    }
    bool _2620 = _2509.y == 0u;
    float _2675;
    float _2677;
    float _2679;
    if (_2620)
    {
        _2675 = _2613;
        _2677 = _2615;
        _2679 = _2617;
    }
    else
    {
        uint _2837 = _2435 + 7u;
        float _2853 = (dot(vec3(cbLight._m0[_2435 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2854 = _2853 * _2853;
        float _4827 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2855 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2856 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2675 = (((cbLight._m0[_2837].x * 0.3183098733425140380859375) * _2855) * _2856) + _2613;
        _2677 = (((cbLight._m0[_2837].y * 0.3183098733425140380859375) * _2855) * _2856) + _2615;
        _2679 = (((cbLight._m0[_2837].z * 0.3183098733425140380859375) * _2855) * _2856) + _2617;
    }
    uint _2682 = _2435 + 8u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _951) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2435].x + _1027;
    float _2698 = cbLight._m0[_2435].y + _1028;
    float _2699 = cbLight._m0[_2435].z + _1029;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2435].xyz));
    float _4843 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _4854 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _2711 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2712 = dot(vec3(_948, _949, _950), vec3(_2704, _2705, _2706));
    float _4865 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2704, _2705, _2706));
    float _4876 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2696 * _2696;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2736 = 1.0 - _2696;
    float _2747 = (0.5 / (((_2711 * ((_2710 * _2736) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2736) + _2696) * _2710))) * _2710;
    float _4887 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2763 = _2435 + 9u;
    float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _951) * 0.949999988079071044921875);
    float _2775 = _2774 * _2774;
    float _2776 = cbLight._m0[_2475].x + _1027;
    float _2777 = cbLight._m0[_2475].y + _1028;
    float _2778 = cbLight._m0[_2475].z + _1029;
    float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
    float _2783 = _2782 * _2776;
    float _2784 = _2782 * _2777;
    float _2785 = _2782 * _2778;
    float _2786 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2475].xyz));
    float _4898 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2790 = dot(vec3(_948, _949, _950), vec3(_2783, _2784, _2785));
    float _4909 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2794 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2783, _2784, _2785));
    float _4920 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2798 = _2775 * _2775;
    float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
    float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2812 = 1.0 - _2775;
    float _2822 = (0.5 / (((_2711 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2812) + _2775) * _2789))) * _2789;
    float _4931 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
    float _2834 = (((_2811 * cbLight._m0[_2763].x) * _2824) * _2458) + ((((cbLight._m0[_2682].x * _2424) * _2735) * _2749) * _2471);
    float _2835 = (((_2811 * cbLight._m0[_2763].y) * _2824) * _2458) + ((((cbLight._m0[_2682].y * _2426) * _2735) * _2749) * _2471);
    float _2836 = (((_2811 * cbLight._m0[_2763].z) * _2824) * _2458) + ((((cbLight._m0[_2682].z * _2428) * _2735) * _2749) * _2471);
    float _2892;
    float _2894;
    float _2896;
    if (_2511)
    {
        _2892 = _2834;
        _2894 = _2835;
        _2896 = _2836;
    }
    else
    {
        uint _2898 = _2435 + 2u;
        uint _2902 = _2435 + 10u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _951) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _1027;
        float _2919 = cbLight._m0[_2898].y + _1028;
        float _2920 = cbLight._m0[_2898].z + _1029;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2898].xyz));
        float _4942 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2932 = dot(vec3(_948, _949, _950), vec3(_2925, _2926, _2927));
        float _4953 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4964 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2953 = (exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2954 = 1.0 - _2917;
        float _2964 = (0.5 / (((_2711 * ((_2931 * _2954) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2954) + _2917) * _2931))) * _2931;
        float _4975 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2966 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2967 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2892 = (((_2953 * cbLight._m0[_2902].x) * _2966) * _2967) + _2834;
        _2894 = (((_2953 * cbLight._m0[_2902].y) * _2966) * _2967) + _2835;
        _2896 = (((_2953 * cbLight._m0[_2902].z) * _2966) * _2967) + _2836;
    }
    float _2998;
    float _3000;
    float _3002;
    if (_2620)
    {
        _2998 = _2892;
        _3000 = _2894;
        _3002 = _2896;
    }
    else
    {
        uint _3009 = _2435 + 3u;
        uint _3013 = _2435 + 11u;
        float _3027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3009].w)) * _951) * 0.949999988079071044921875);
        float _3028 = _3027 * _3027;
        float _3029 = cbLight._m0[_3009].x + _1027;
        float _3030 = cbLight._m0[_3009].y + _1028;
        float _3031 = cbLight._m0[_3009].z + _1029;
        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
        float _3036 = _3035 * _3029;
        float _3037 = _3035 * _3030;
        float _3038 = _3035 * _3031;
        float _3039 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_3009].xyz));
        float _4991 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _3043 = dot(vec3(_948, _949, _950), vec3(_3036, _3037, _3038));
        float _5002 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3046 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _3047 = dot(vec3(cbLight._m0[_3009].xyz), vec3(_3036, _3037, _3038));
        float _5013 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3051 = _3028 * _3028;
        float _3055 = ((_3046 * _3046) * (_3051 + (-1.0))) + 1.0;
        float _3064 = (exp2(log2(1.0 - (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3065 = 1.0 - _3028;
        float _3075 = (0.5 / (((_2711 * ((_3042 * _3065) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _3065) + _3028) * _3042))) * _3042;
        float _5024 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3077 = (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3051 / ((_3055 * _3055) * 3.141590118408203125));
        float _3078 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2998 = (((_3064 * cbLight._m0[_3013].x) * _3077) * _3078) + _2892;
        _3000 = (((_3064 * cbLight._m0[_3013].y) * _3077) * _3078) + _2894;
        _3002 = (((_3064 * cbLight._m0[_3013].z) * _3077) * _3078) + _2896;
    }
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_2433.y == 0u)
    {
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.x;
        uint _3111 = uint((float(_3099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1048) / _3100))) + floor(float(uint(cbSceneParam._m0[85u].x * _1047) / _3100)));
        float _3121 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3122 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        uint _3125 = uint(isnan(14.0) ? _3122 : (isnan(_3122) ? 14.0 : min(_3122, 14.0)));
        uvec4 _3130 = texelFetch(g_lightClusterGridBuffer, int(((_3125 << 2u) + (_3111 << 6u)) >> 2u));
        uint _3131 = _3130.x;
        uint _3132 = _3099.z;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((((1u << ((_3132 >> 4u) & 15u)) + 4294967295u) & _3131) == 0u) || ((_3132 & 240u) == 0u))
        {
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
        }
        else
        {
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            uint _3369 = 0u;
            uint _3378;
            bool _3379;
            for (;;)
            {
                _3378 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                _3379 = _3378 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3379)
                {
                    frontier_phi_71_pred = _3368;
                    frontier_phi_71_pred_1 = _3367;
                    frontier_phi_71_pred_2 = _3366;
                    frontier_phi_71_pred_3 = _3365;
                    frontier_phi_71_pred_4 = _3364;
                    frontier_phi_71_pred_5 = _3363;
                }
                else
                {
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    uint _3514;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3378;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    for (;;)
                    {
                        uint _3518 = uint(findLSB(_3514)) + (_3369 << 5u);
                        uint _3515 = (_3514 + 4294967295u) & _3514;
                        uint _3520 = _3518 * 48u;
                        vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 3u)).x));
                        uint _3540 = (_3518 * 48u) + 4u;
                        vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3540)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 3u)).x));
                        uint _3559 = (_3518 * 48u) + 8u;
                        vec3 _3570 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3559)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 2u)).x));
                        float _3574 = _3534.x - _2209;
                        float _3575 = _3534.y - _2210;
                        float _3576 = _3534.z - _2211;
                        float _3577 = dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576));
                        float _3580 = inversesqrt(_3577);
                        float _3581 = _3580 * _3574;
                        float _3582 = _3580 * _3575;
                        float _3583 = _3580 * _3576;
                        float _3584 = dot(vec3(_1066, _1069, _1072), vec3(_3581, _3582, _3583));
                        float _3589 = 1.0 - (_3577 * _3534.w);
                        float _5050 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3590 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3591 = sqrt(_3577) * _3553.w;
                        float _3594 = 1.39999997615814208984375 / (_3591 + 1.39999997615814208984375);
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3584) + _3595;
                        float _3601 = _3591 * _3591;
                        float _3605 = ((isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0))) * _3590) / ((_3601 * 0.699999988079071044921875) + 1.0);
                        float _3609 = (-0.0) - _2209;
                        float _3610 = (-0.0) - _2210;
                        float _3611 = (-0.0) - _2211;
                        float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                        float _3616 = _3615 * _3609;
                        float _3617 = _3615 * _3610;
                        float _3618 = _3615 * _3611;
                        float _3625 = exp2(log2(1.0 / ((_3601 * 3.5) + 5.0)) * 0.25);
                        float _3626 = 1.0 - _1126;
                        float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                        float _3634 = _3633 * _3633;
                        float _3635 = _3634 * _3634;
                        float _3636 = _3616 + _3581;
                        float _3637 = _3617 + _3582;
                        float _3638 = _3618 + _3583;
                        float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                        float _3646 = dot(vec3(_1066, _1069, _1072), vec3(_3616, _3617, _3618));
                        float _5066 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3649 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3650 = dot(vec3(_1066, _1069, _1072), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                        float _5077 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3653 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                        float _3658 = _3594 * _3634;
                        float _3659 = _3658 * _3658;
                        float _3662 = ((1.0 - _3659) * _3584) + _3659;
                        float _5088 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3663 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3664 = 1.0 - _3634;
                        float _3674 = (0.5 / (((_3663 * ((_3649 * _3664) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3663 * _3664) + _3634) * _3649))) * _3663;
                        float _5099 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3685 = (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0)))) / ((_3657 * _3657) * ((_3601 * 2.1991131305694580078125) + 3.141590118408203125))) * _3590;
                        _3438 = (_3605 * _3553.x) + _3511;
                        _3439 = (_3605 * _3553.y) + _3512;
                        _3440 = (_3605 * _3553.z) + _3513;
                        _3435 = (_3685 * _3570.x) + _3508;
                        _3436 = (_3685 * _3570.y) + _3509;
                        _3437 = (_3685 * _3570.z) + _3510;
                        if (_3515 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3515;
                        }
                    }
                    frontier_phi_71_pred = _3440;
                    frontier_phi_71_pred_1 = _3439;
                    frontier_phi_71_pred_2 = _3438;
                    frontier_phi_71_pred_3 = _3437;
                    frontier_phi_71_pred_4 = _3436;
                    frontier_phi_71_pred_5 = _3435;
                }
                _3222 = frontier_phi_71_pred;
                _3220 = frontier_phi_71_pred_1;
                _3218 = frontier_phi_71_pred_2;
                _3216 = frontier_phi_71_pred_3;
                _3214 = frontier_phi_71_pred_4;
                _3212 = frontier_phi_71_pred_5;
                uint _3370 = _3369 + 1u;
                if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3363 = _3212;
                    _3364 = _3214;
                    _3365 = _3216;
                    _3366 = _3218;
                    _3367 = _3220;
                    _3368 = _3222;
                    _3369 = _3370;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
        }
        uvec4 _3225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3226 = _3225.z;
        uint _3228 = (_3226 >> 8u) & 15u;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        if (((4294967295u << _3228) & _3131) == 0u)
        {
            _3331 = _3211;
            _3333 = _3213;
            _3335 = _3215;
            _3337 = _3217;
            _3339 = _3219;
            _3341 = _3221;
        }
        else
        {
            float _3356 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _3357 = _3356 * _2209;
            float _3358 = _3356 * _2210;
            float _3359 = _3356 * _2211;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3228 < ((_3226 >> 12u) & 15u))
            {
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3491 = _3211;
                float _3492 = _3213;
                float _3493 = _3215;
                float _3494 = _3217;
                float _3495 = _3219;
                float _3496 = _3221;
                uint _3497 = _3228;
                uint _3506;
                bool _3507;
                for (;;)
                {
                    _3506 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3497 << 2u)) >> 2u)).x;
                    _3507 = _3506 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3507)
                    {
                        frontier_phi_82_pred = _3496;
                        frontier_phi_82_pred_1 = _3495;
                        frontier_phi_82_pred_2 = _3494;
                        frontier_phi_82_pred_3 = _3493;
                        frontier_phi_82_pred_4 = _3492;
                        frontier_phi_82_pred_5 = _3491;
                    }
                    else
                    {
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        uint _3718 = _3506;
                        uint _3719;
                        vec4 _3744;
                        float _3745;
                        vec4 _3760;
                        vec3 _3772;
                        vec4 _3787;
                        vec4 _3802;
                        float _3848;
                        bool _3849;
                        for (;;)
                        {
                            uint _3729 = ((_3497 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3718));
                            _3719 = (_3718 + 4294967295u) & _3718;
                            uint _3731 = _3729 * 40u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3745 = _3744.w;
                            uint _3747 = (_3729 * 40u) + 4u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3729 * 40u) + 8u;
                            _3772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x));
                            uint _3774 = (_3729 * 40u) + 16u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3729 * 40u) + 20u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3729 * 40u) + 24u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3823 = (_3729 * 40u) + 28u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            _3848 = fma(_2211, _3836.z, fma(_2210, _3836.y, _3836.x * _2209)) + _3836.w;
                            _3849 = !((fma(_2211, _3817.z, fma(_2210, _3817.y, _3817.x * _2209)) + _3817.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3849)
                            {
                                float _3876 = _3744.x - _2209;
                                float _3877 = _3744.y - _2210;
                                float _3878 = _3744.z - _2211;
                                float _3879 = dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878));
                                float _3882 = inversesqrt(_3879);
                                float _3883 = _3882 * _3876;
                                float _3884 = _3882 * _3877;
                                float _3885 = _3882 * _3878;
                                float _3889 = 1.0 - (_3879 / (_3745 * _3745));
                                float _5110 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3894 = sqrt(_3879) * _3760.w;
                                float _3896 = 1.39999997615814208984375 / (_3894 + 1.39999997615814208984375);
                                float _3897 = _3896 * _3896;
                                float _3900 = ((1.0 - _3897) * dot(vec3(_3883, _3884, _3885), vec3(_1066, _1069, _1072))) + _3897;
                                float _3903 = _3894 * _3894;
                                float _3907 = (fma(_2211, _3787.z, fma(_2210, _3787.y, _3787.x * _2209)) + _3787.w) / _3848;
                                float _3908 = (fma(_2211, _3802.z, fma(_2210, _3802.y, _3802.x * _2209)) + _3802.w) / _3848;
                                float _3912 = 1.0 - dot(vec2(_3907, _3908), vec2(_3907, _3908));
                                float _5126 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3914 = _3913 * (((isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0))) * _3890) / ((_3903 * 0.699999988079071044921875) + 1.0));
                                float _3926 = exp2(log2(1.0 / ((_3903 * 3.5) + 5.0)) * 0.25);
                                float _3927 = 1.0 - _1126;
                                float _3934 = sqrt(1.0 - ((1.0 - (_3927 * _3927)) * (1.0 - (_3926 * _3926))));
                                float _3935 = _3934 * _3934;
                                float _3936 = _3935 * _3935;
                                float _3937 = _3883 - _3357;
                                float _3938 = _3884 - _3358;
                                float _3939 = _3885 - _3359;
                                float _3943 = inversesqrt(dot(vec3(_3937, _3938, _3939), vec3(_3937, _3938, _3939)));
                                float _3947 = dot(vec3(_1066, _1069, _1072), vec3((-0.0) - _3357, (-0.0) - _3358, (-0.0) - _3359));
                                float _5137 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3951 = dot(vec3(_1066, _1069, _1072), vec3(_3943 * _3937, _3943 * _3938, _3943 * _3939));
                                float _5148 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3958 = ((_3954 * _3954) * (_3936 + (-1.0))) + 1.0;
                                float _3959 = _3896 * _3935;
                                float _3960 = _3959 * _3959;
                                float _3966 = ((1.0 - _3960) * dot(vec3(_1066, _1069, _1072), vec3(_3883, _3884, _3885))) + _3960;
                                float _5159 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3968 = 1.0 - _3935;
                                float _3978 = (0.5 / (((_3967 * ((_3950 * _3968) + _3935)) + 9.9999999392252902907785028219223e-09) + (((_3967 * _3968) + _3935) * _3950))) * _3967;
                                float _5170 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3988 = (_3913 * _3890) * (((_3936 * 3.1415927410125732421875) * (isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0)))) / ((_3958 * _3958) * ((_3903 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3914 * _3760.z;
                                frontier_phi_88_pred_1 = _3914 * _3760.y;
                                frontier_phi_88_pred_2 = _3914 * _3760.x;
                                frontier_phi_88_pred_3 = _3988 * _3772.z;
                                frontier_phi_88_pred_4 = _3988 * _3772.y;
                                frontier_phi_88_pred_5 = _3988 * _3772.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3997 = frontier_phi_88_pred;
                            _3996 = frontier_phi_88_pred_1;
                            _3995 = frontier_phi_88_pred_2;
                            _3994 = frontier_phi_88_pred_3;
                            _3993 = frontier_phi_88_pred_4;
                            _3992 = frontier_phi_88_pred_5;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            if (_3719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3719;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3704;
                        frontier_phi_82_pred_1 = _3703;
                        frontier_phi_82_pred_2 = _3702;
                        frontier_phi_82_pred_3 = _3701;
                        frontier_phi_82_pred_4 = _3700;
                        frontier_phi_82_pred_5 = _3699;
                    }
                    _3342 = frontier_phi_82_pred;
                    _3340 = frontier_phi_82_pred_1;
                    _3338 = frontier_phi_82_pred_2;
                    _3336 = frontier_phi_82_pred_3;
                    _3334 = frontier_phi_82_pred_4;
                    _3332 = frontier_phi_82_pred_5;
                    uint _3498 = _3497 + 1u;
                    if (_3498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3491 = _3332;
                        _3492 = _3334;
                        _3493 = _3336;
                        _3494 = _3338;
                        _3495 = _3340;
                        _3496 = _3342;
                        _3497 = _3498;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3338;
                frontier_phi_63_64_ladder_1 = _3342;
                frontier_phi_63_64_ladder_2 = _3340;
                frontier_phi_63_64_ladder_3 = _3336;
                frontier_phi_63_64_ladder_4 = _3334;
                frontier_phi_63_64_ladder_5 = _3332;
            }
            else
            {
                frontier_phi_63_64_ladder = _3217;
                frontier_phi_63_64_ladder_1 = _3221;
                frontier_phi_63_64_ladder_2 = _3219;
                frontier_phi_63_64_ladder_3 = _3215;
                frontier_phi_63_64_ladder_4 = _3213;
                frontier_phi_63_64_ladder_5 = _3211;
            }
            _3331 = frontier_phi_63_64_ladder_5;
            _3333 = frontier_phi_63_64_ladder_4;
            _3335 = frontier_phi_63_64_ladder_3;
            _3337 = frontier_phi_63_64_ladder;
            _3339 = frontier_phi_63_64_ladder_2;
            _3341 = frontier_phi_63_64_ladder_1;
        }
        float _3346 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
        _3144 = (_3346 * _3337) + _2675;
        _3146 = (_3346 * _3339) + _2677;
        _3148 = (_3346 * _3341) + _2679;
        _3150 = ((_3331 * 0.039999999105930328369140625) * _3346) + _2998;
        _3152 = ((_3333 * 0.039999999105930328369140625) * _3346) + _3000;
        _3154 = ((_3335 * 0.039999999105930328369140625) * _3346) + _3002;
    }
    else
    {
        _3144 = _2675;
        _3146 = _2677;
        _3148 = _2679;
        _3150 = _2998;
        _3152 = _3000;
        _3154 = _3002;
    }
    float _5186 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5197 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _5208 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _3171 = ((isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_3144 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1110))) + ((_3150 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3172 = ((isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3146 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1110))) + ((_3152 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3173 = ((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3148 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1110))) + ((_3154 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    uint _3174 = _263 + 6u;
    float _3182 = _1047 / cbSceneParam._m0[86u].x;
    float _3183 = _1048 / cbSceneParam._m0[86u].y;
    vec4 _3197 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3199 = _3197.x;
    float _3200 = _3197.y;
    float _3201 = _3197.z;
    float _3202 = _3197.w;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _3236 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _3237 = _3236 / _969;
        float _3248 = _3237 * _1020;
        float _3249 = _1021 * _3237;
        float _3250 = (-0.0) - _3249;
        float _3251 = _3237 * _1022;
        float _3253 = (cbSceneParam._m0[77u].w * _3250) / _3236;
        float _3254 = _3253 + cbSceneParam._m0[79u].w;
        float _3255 = cbSceneParam._m0[79u].w - _3249;
        float _3261 = sqrt(((_3248 * _3248) + (_3249 * _3249)) + (_3251 * _3251));
        float _3264 = (1.0 - (cbSceneParam._m0[77u].w / _3236)) * _3261;
        float _3269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3448;
        if (abs((_3250 - _3253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3448 = ((((_3254 > 0.0) ? exp2(_3269 * _3254) : (2.0 - exp2(_3271 * _3254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3264;
        }
        else
        {
            float _3392 = 1.0 / cbSceneParam._m0[80u].x;
            float _3393 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : max(_3254, _3255));
            float _3394 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : min(_3254, _3255));
            float _3403 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : min(_3393, 0.0));
            float _3404 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : min(_3394, 0.0));
            _3448 = ((abs(_3261 / _3250) * cbSceneParam._m0[80u].y) * ((((_3403 - _3404) * 2.0) - ((exp2(_3269 * (isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0)))) - exp2(_3269 * (isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))))) * _3392)) - ((exp2(_3271 * _3403) - exp2(_3271 * _3404)) * _3392))) + (_3264 * cbSceneParam._m0[80u].z);
        }
        vec4 _3450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, 1.0), 0.0);
        float _3459 = exp2((_3448 * (-1.44269502162933349609375)) * (1.0 - _3450.w));
        float _3460 = log2(_3459);
        float _3476 = log2(_3202);
        _3273 = (exp2(_3476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].x)) * _3450.x) / cbSceneParam._m0[78u].x)) + _3199;
        _3275 = (exp2(_3476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].y)) * _3450.y) / cbSceneParam._m0[78u].y)) + _3200;
        _3277 = (exp2(_3476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].z)) * _3450.z) / cbSceneParam._m0[78u].z)) + _3201;
        _3279 = _3459 * _3202;
    }
    else
    {
        _3273 = _3199;
        _3275 = _3200;
        _3277 = _3201;
        _3279 = _3202;
    }
    bool _3486;
    vec4 _3289;
    vec4 _3311;
    float _3313;
    float _3317;
    float _3318;
    float _3319;
    float _3320;
    bool _3330;
    for (;;)
    {
        _3289 = cbMatDynParam._m0[0u];
        float _3291 = roundEven(_3289.y);
        bool _3292 = _3291 == 3.0;
        float _3293 = log2(_3279);
        float _3300 = exp2(_3293 * cbSceneParam._m0[78u].x) * _3171;
        float _3301 = exp2(_3293 * cbSceneParam._m0[78u].y) * _3172;
        float _3302 = exp2(_3293 * cbSceneParam._m0[78u].z) * _3173;
        float _3309 = _1036 + (-0.5);
        _3311 = cbMtdParam._m0[1u];
        _3313 = _3311.y * _3309;
        float _3316 = (_3291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3317 = _3316 * (_3292 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3273)));
        _3318 = _3316 * (_3292 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3275)));
        _3319 = _3316 * (_3292 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3277)));
        _3320 = _3309 * 0.999000012874603271484375;
        _3330 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3330)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3320) < 0.5)
            {
                _3486 = true;
                break;
            }
        }
        uint _3427 = _1085 + uint(_3289.w);
        if ((cbInstanceData._m0[_3427].w < 1.0) && ((cbInstanceData._m0[_3427].w + _3320) < 0.5))
        {
            _3486 = true;
            break;
        }
        if ((_3313 + 1.0) < _3311.x)
        {
            _3486 = true;
            break;
        }
        _3486 = false;
        break;
    }
    float _3690;
    if (_3486)
    {
        discard_state = true;
        _3690 = 0.0;
    }
    else
    {
        _3690 = cbInstanceData._m0[_3174].w;
    }
    SV_Target.x = _3317;
    SV_Target.y = _3318;
    SV_Target.z = _3319;
    SV_Target.w = _3690;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3174].w;
    discard_exit();
}


