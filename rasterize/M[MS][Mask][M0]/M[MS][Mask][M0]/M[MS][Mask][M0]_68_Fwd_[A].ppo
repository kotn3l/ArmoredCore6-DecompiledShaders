#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1472;
float _3831;
float _3832;
float _3833;
float _3834;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3843 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3854 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3865 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3876 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _461 = (_454 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _462 = (_454 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _463 = (_454 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3887 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    float _540 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _534;
    float _543 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _535;
    float _546 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _536;
    float _553 = ((_534 - _540) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) + _540;
    float _554 = ((_535 - _543) * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) + _543;
    float _555 = ((_536 - _546) * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) + _546;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    float _623 = ((_595.x - _614) * _454) + _614;
    float _624 = ((_595.y - _615) * _454) + _615;
    float _625 = ((_595.z - _616) * _454) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _650 = ((_637.z - _625) * _527) + _625;
    float _653 = ((((_637.x - _623) * _527) + _623) * 2.0) + (-1.0);
    float _654 = ((((_637.y - _624) * _527) + _624) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3898 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _708 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _711 = ((isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : min(_708, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _720 = (_711 - ((((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _711))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3919 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _721 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _728 = (_721 * (cbMtdParam._m0[17u].x - _553)) + _553;
    float _729 = (_721 * (cbMtdParam._m0[17u].y - _554)) + _554;
    float _730 = (_721 * (cbMtdParam._m0[17u].z - _555)) + _555;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _744 = _742.x;
    float _745 = 1.0 - _744;
    float _770 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_744 - _745) * cbMtdParam._m0[24u].y) + _745) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3930 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _779 = ((((cbMtdParam._m0[10u].x - _728) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _771) + _728;
    float _780 = ((((cbMtdParam._m0[10u].y - _729) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _771) + _729;
    float _781 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _730)) * _771) + _730;
    float _786 = (((_572.z - _650) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _650;
    float _790 = ((_674.z - _786) * cbMtdParam._m0[19u].w) + _786;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _811 = (_804.x * 2.0) + (-1.0);
    float _812 = (_804.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3941 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _821 = (_721 * (_804.z - _790)) + _790;
    float _824 = ((cbMtdParam._m0[23u].y - _821) * _771) + _821;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _849 = (_843.x * 2.0) + (-1.0);
    float _850 = (_843.y * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _3952 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _865 = (_653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_572.x * 2.0) + (-1.0)))) + (((_674.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _866 = (_654 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_572.y * 2.0) + (-1.0)))) + (((_674.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _878 = (((_811 - _865) + (cbMtdParam._m0[21u].x * _865)) * _721) + _865;
    float _879 = (((_812 - _866) + (cbMtdParam._m0[21u].x * _866)) * _721) + _866;
    float _880 = (_721 * (sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) - _660)) + _660;
    float _891 = (((_849 - _878) + (_878 * cbMtdParam._m0[22u].z)) * _771) + _878;
    float _892 = (((_850 - _879) + (_879 * cbMtdParam._m0[22u].z)) * _771) + _879;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) - _880) * _771) + _880;
    float _897 = cbMtdParam._m0[22u].x + _674.w;
    float _900 = fma(_893, _253 * NORMAL.x, fma(_892, _260 * TANGENT.x, (_246 * _238) * _891));
    float _903 = fma(_893, _253 * NORMAL.y, fma(_892, _260 * TANGENT.y, (_246 * _239) * _891));
    float _906 = fma(_893, _253 * NORMAL.z, fma(_892, _260 * TANGENT.z, (_246 * _240) * _891));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _3963 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _914 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _3985 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3996 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4007 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _983 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _973);
    float _984 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _973);
    float _985 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _973);
    float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
    float _990 = _983 * _989;
    float _991 = _984 * _989;
    float _992 = _985 * _989;
    vec4 _997 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _999 = _997.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1153 = sqrt(((_983 * _983) + (_984 * _984)) + (_985 * _985));
        float _1159 = (cbMatDynParam._m0[5u].x * _1153) + cbMatDynParam._m0[5u].y;
        float _4018 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1164 = (cbMatDynParam._m0[5u].z * _1153) + cbMatDynParam._m0[5u].w;
        float _4029 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) - _1160)) + _1160) < ((_999 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1010 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1011 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1029 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1032 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1035 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1048 = _285 + 9u;
    uint _1049 = _1048 + uint(cbMatDynParam._m0[0u].w);
    float _1055 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1049].x;
    float _1056 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1049].y;
    float _1057 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1049].z;
    float _4040 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    vec4 _1069 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1010, cbSceneParam._m0[86u].y * _1011));
    float _1073 = ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * TEXCOORD_5.w) * _1069.x;
    float _1074 = dot(vec3(_911, _912, _913), vec3(_990, _991, _992));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _911) - _990;
    float _1082 = (_1077 * _912) - _991;
    float _1083 = (_1077 * _913) - _992;
    float _1087 = abs(dot(vec3(_990, _991, _992), vec3(_911, _912, _913)));
    float _4073 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_914);
    float _1102 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1471;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1196 = fma(_1142, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134));
        float _1200 = fma(_1142, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134));
        float _1204 = fma(_1142, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134));
        float _1229 = _1134 + _911;
        float _1230 = _1138 + _912;
        float _1231 = _1142 + _913;
        float _1241 = fma(_1231, cbModelParam._m0[26u].z, fma(_1230, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229)) - _1196;
        float _1242 = fma(_1231, cbModelParam._m0[27u].z, fma(_1230, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229)) - _1200;
        float _1243 = fma(_1231, cbModelParam._m0[28u].z, fma(_1230, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229)) - _1204;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1196 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1200 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[34u].z) + ((((((_1204 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1299 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1265.x + (-0.5));
        float _1301 = _1299 * (_1265.y + (-0.5));
        float _1302 = _1299 * (_1265.z + (-0.5));
        float _1309 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1272.x + (-0.5));
        float _1311 = _1309 * (_1272.y + (-0.5));
        float _1312 = _1309 * (_1272.z + (-0.5));
        float _1319 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1279.x + (-0.5));
        float _1321 = _1319 * (_1279.y + (-0.5));
        float _1322 = _1319 * (_1279.z + (-0.5));
        float _1329 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1286.x + (-0.5));
        float _1331 = _1329 * (_1286.y + (-0.5));
        float _1332 = _1329 * (_1286.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1353 = (dot(vec3(_911, _912, _913), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1363 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4121 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1365 + 1.0))) + _1370) * _1333;
        float _1380 = _1301 * 0.5;
        float _1381 = _1311 * 0.5;
        float _1382 = _1321 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_911, _912, _913), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4154 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1407 + 1.0))) + _1412) * _1334;
        float _1422 = _1302 * 0.5;
        float _1423 = _1312 * 0.5;
        float _1424 = _1322 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_911, _912, _913), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4187 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1449 + 1.0))) + _1454) * _1335;
        _1471 = _1302;
        _1473 = _1301;
        _1474 = _1300;
        _1475 = _1312;
        _1476 = _1311;
        _1477 = _1310;
        _1478 = _1322;
        _1479 = _1321;
        _1480 = _1320;
        _1481 = _1335;
        _1482 = _1334;
        _1483 = _1333;
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
    }
    else
    {
        _1471 = _1472;
        _1473 = _1472;
        _1474 = _1472;
        _1475 = _1472;
        _1476 = _1472;
        _1477 = _1472;
        _1478 = _1472;
        _1479 = _1472;
        _1480 = _1472;
        _1481 = _1472;
        _1482 = _1472;
        _1483 = _1472;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1142, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134));
        float _1517 = fma(_1142, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134));
        float _1521 = fma(_1142, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134));
        float _1544 = _1134 + _911;
        float _1545 = _1138 + _912;
        float _1546 = _1142 + _913;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_911, _912, _913), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4250 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_911, _912, _913), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4283 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_911, _912, _913), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4316 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1472;
        _1783 = _1472;
        _1784 = _1472;
        _1785 = _1472;
        _1786 = _1472;
        _1787 = _1472;
        _1788 = _1472;
        _1789 = _1472;
        _1790 = _1472;
        _1791 = _1472;
        _1792 = _1472;
        _1793 = _1472;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1484)) + _1484;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1485)) + _1485;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1486)) + _1486;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1081 * 0.5;
    float _1851 = _1082 * 0.5;
    float _1852 = _1083 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1471, _1475, _1478, _1481));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1142, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1142, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1142, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1981 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1984 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2012 = frontier_phi_17_15_ladder;
        }
        float _2213;
        if (_1981 > 0.0)
        {
            _2213 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2213 = frontier_phi_26_22_ladder;
        }
        float _2456;
        if (_1984 > 0.0)
        {
            _2456 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2456 = frontier_phi_38_33_ladder;
        }
        float _2458 = isnan(_2213) ? _2012 : (isnan(_2012) ? _2213 : min(_2012, _2213));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1978) + _1967;
        float _2464 = (_2459 * _1981) + _1971;
        float _2465 = (_2459 * _1984) + _1975;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_16_38_ladder = _2589.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2589.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2589.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_16_38_ladder_2;
        _2002 = frontier_phi_16_38_ladder_1;
        _2004 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1919);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2063 = fma(_1142, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134)) + cbModelParam._m0[21u].w;
        float _2067 = fma(_1142, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134)) + cbModelParam._m0[22u].w;
        float _2071 = fma(_1142, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134)) + cbModelParam._m0[23u].w;
        float _2074 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2077 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2080 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2218;
        if (_2074 > 0.0)
        {
            _2218 = abs((1.0 - _2063) / _2074);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2063 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2218 = frontier_phi_28_24_ladder;
        }
        float _2483;
        if (_2077 > 0.0)
        {
            _2483 = abs((1.0 - _2067) / _2077);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2067 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2483 = frontier_phi_40_35_ladder;
        }
        float _2688;
        if (_2080 > 0.0)
        {
            _2688 = abs((1.0 - _2071) / _2080);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2071 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2688 = frontier_phi_49_46_ladder;
        }
        float _2690 = isnan(_2483) ? _2218 : (isnan(_2218) ? _2483 : min(_2218, _2483));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _2074) + _2063;
        float _2696 = (_2691 * _2077) + _2067;
        float _2697 = (_2691 * _2080) + _2071;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_25_49_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2099 = frontier_phi_25_49_ladder_2;
        _2101 = frontier_phi_25_49_ladder_1;
        _2103 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2009);
        _2099 = _2083.x * cbModelParam._m0[1u].z;
        _2101 = _2083.y * cbModelParam._m0[1u].z;
        _2103 = _2083.z * cbModelParam._m0[1u].z;
    }
    float _2115 = ((((1.0 - _1102) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1102 * _1089)) * _1073;
    float _2116 = _2115 * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2117 = _2115 * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2118 = _2115 * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2116 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2116 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2116 * cbSceneParam._m0[91u].x));
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _1073 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2172 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2176 = _2139 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_911, _912, _913));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_911, _912, _913));
    float _4452 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4463 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2156].x * _2162) * _2197) + ((cbLight._m0[_2166].x * _2172) * _2195);
    float _2205 = ((_2162 * cbLight._m0[_2156].y) * _2197) + ((_2172 * cbLight._m0[_2166].y) * _2195);
    float _2206 = ((_2162 * cbLight._m0[_2156].z) * _2197) + ((_2172 * cbLight._m0[_2166].z) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2212)
    {
        _2223 = _2204;
        _2225 = _2205;
        _2227 = _2206;
    }
    else
    {
        uint _2231 = _2139 + 6u;
        float _2247 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4474 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2250 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2223 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2204;
        _2225 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2205;
        _2227 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2206;
    }
    bool _2230 = _2210.y == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2230)
    {
        _2268 = _2223;
        _2270 = _2225;
        _2272 = _2227;
    }
    else
    {
        uint _2427 = _2139 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4490 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2446 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2268 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2223;
        _2270 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2225;
        _2272 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2227;
    }
    uint _2275 = _2139 + 8u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _914) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2139].x + _990;
    float _2291 = cbLight._m0[_2139].y + _991;
    float _2292 = cbLight._m0[_2139].z + _992;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2139].xyz));
    float _4506 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _4517 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2304 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2305 = dot(vec3(_911, _912, _913), vec3(_2297, _2298, _2299));
    float _4528 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2297, _2298, _2299));
    float _4539 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2289 * _2289;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2329 = 1.0 - _2289;
    float _2340 = (0.5 / (((_2304 * ((_2303 * _2329) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2329) + _2289) * _2303))) * _2303;
    float _4550 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    uint _2353 = _2139 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _914) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2176].x + _990;
    float _2367 = cbLight._m0[_2176].y + _991;
    float _2368 = cbLight._m0[_2176].z + _992;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2176].xyz));
    float _4561 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2380 = dot(vec3(_911, _912, _913), vec3(_2373, _2374, _2375));
    float _4572 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2373, _2374, _2375));
    float _4583 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2402 = 1.0 - _2365;
    float _2412 = (0.5 / (((_2304 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2402) + _2365) * _2379))) * _2379;
    float _4594 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2424 = (((_2401 * cbLight._m0[_2353].x) * _2414) * _2162) + (((_2328 * cbLight._m0[_2275].x) * _2342) * _2172);
    float _2425 = (((_2401 * cbLight._m0[_2353].y) * _2414) * _2162) + (((_2328 * cbLight._m0[_2275].y) * _2342) * _2172);
    float _2426 = (((_2401 * cbLight._m0[_2353].z) * _2414) * _2162) + (((_2328 * cbLight._m0[_2275].z) * _2342) * _2172);
    float _2488;
    float _2490;
    float _2492;
    if (_2212)
    {
        _2488 = _2424;
        _2490 = _2425;
        _2492 = _2426;
    }
    else
    {
        uint _2494 = _2139 + 2u;
        uint _2498 = _2139 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _914) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _990;
        float _2515 = cbLight._m0[_2494].y + _991;
        float _2516 = cbLight._m0[_2494].z + _992;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2494].xyz));
        float _4605 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2528 = dot(vec3(_911, _912, _913), vec3(_2521, _2522, _2523));
        float _4616 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4627 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2549 = (exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2550 = 1.0 - _2513;
        float _2560 = (0.5 / (((_2304 * ((_2527 * _2550) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2550) + _2513) * _2527))) * _2527;
        float _4638 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2488 = (((_2549 * cbLight._m0[_2498].x) * _2562) * _2563) + _2424;
        _2490 = (((_2549 * cbLight._m0[_2498].y) * _2562) * _2563) + _2425;
        _2492 = (((_2549 * cbLight._m0[_2498].z) * _2562) * _2563) + _2426;
    }
    float _2598;
    float _2600;
    float _2602;
    if (_2230)
    {
        _2598 = _2488;
        _2600 = _2490;
        _2602 = _2492;
    }
    else
    {
        uint _2609 = _2139 + 3u;
        uint _2613 = _2139 + 11u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _914) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _990;
        float _2630 = cbLight._m0[_2609].y + _991;
        float _2631 = cbLight._m0[_2609].z + _992;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2609].xyz));
        float _4654 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2643 = dot(vec3(_911, _912, _913), vec3(_2636, _2637, _2638));
        float _4665 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4676 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2665 = 1.0 - _2628;
        float _2675 = (0.5 / (((_2304 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2665) + _2628) * _2642))) * _2642;
        float _4687 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2598 = (((_2664 * cbLight._m0[_2613].x) * _2677) * _2678) + _2488;
        _2600 = (((_2664 * cbLight._m0[_2613].y) * _2677) * _2678) + _2490;
        _2602 = (((_2664 * cbLight._m0[_2613].z) * _2677) * _2678) + _2492;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2137.y == 0u)
    {
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2753;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2753;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2753;
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.x;
        uint _2780 = uint((float(_2768.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1011) / _2769))) + floor(float(uint(cbSceneParam._m0[85u].x * _1010) / _2769)));
        float _2790 = (log2(_2756 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2791 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        uint _2794 = uint(isnan(14.0) ? _2791 : (isnan(_2791) ? 14.0 : min(_2791, 14.0)));
        uvec4 _2799 = texelFetch(g_lightClusterGridBuffer, int(((_2794 << 2u) + (_2780 << 6u)) >> 2u));
        uint _2800 = _2799.x;
        uint _2801 = _2768.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2801 >> 4u) & 15u)) + 4294967295u) & _2800) == 0u) || ((_2801 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            uint _3060 = 0u;
            uint _3069;
            bool _3070;
            for (;;)
            {
                _3069 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                _3070 = _3069 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3070)
                {
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3069;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3060 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _2754;
                        float _3266 = _3225.y - _2755;
                        float _3267 = _3225.z - _2756;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_1029, _1032, _1035), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4713 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2754;
                        float _3301 = (-0.0) - _2755;
                        float _3302 = (-0.0) - _2756;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1089;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_1029, _1032, _1035), vec3(_3307, _3308, _3309));
                        float _4729 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3342 = dot(vec3(_1029, _1032, _1035), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4740 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3275) + _3351;
                        float _4751 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4762 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3129 = (_3296 * _3244.x) + _3202;
                        _3130 = (_3296 * _3244.y) + _3203;
                        _3131 = (_3296 * _3244.z) + _3204;
                        _3126 = (_3377 * _3261.x) + _3199;
                        _3127 = (_3377 * _3261.y) + _3200;
                        _3128 = (_3377 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_66_pred = _3126;
                    frontier_phi_66_pred_1 = _3131;
                    frontier_phi_66_pred_2 = _3130;
                    frontier_phi_66_pred_3 = _3129;
                    frontier_phi_66_pred_4 = _3128;
                    frontier_phi_66_pred_5 = _3127;
                }
                _2902 = frontier_phi_66_pred;
                _2912 = frontier_phi_66_pred_1;
                _2910 = frontier_phi_66_pred_2;
                _2908 = frontier_phi_66_pred_3;
                _2906 = frontier_phi_66_pred_4;
                _2904 = frontier_phi_66_pred_5;
                uint _3061 = _3060 + 1u;
                if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3054 = _2902;
                    _3055 = _2904;
                    _3056 = _2906;
                    _3057 = _2908;
                    _3058 = _2910;
                    _3059 = _2912;
                    _3060 = _3061;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((4294967295u << _2918) & _2800) == 0u)
        {
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
        }
        else
        {
            float _3047 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
            float _3048 = _3047 * _2754;
            float _3049 = _3047 * _2755;
            float _3050 = _3047 * _2756;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3182 = _2901;
                float _3183 = _2903;
                float _3184 = _2905;
                float _3185 = _2907;
                float _3186 = _2909;
                float _3187 = _2911;
                uint _3188 = _2918;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3198)
                    {
                        frontier_phi_77_pred = _3187;
                        frontier_phi_77_pred_1 = _3186;
                        frontier_phi_77_pred_2 = _3185;
                        frontier_phi_77_pred_3 = _3184;
                        frontier_phi_77_pred_4 = _3183;
                        frontier_phi_77_pred_5 = _3182;
                    }
                    else
                    {
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        uint _3410 = _3197;
                        uint _3411;
                        vec4 _3436;
                        float _3437;
                        vec4 _3452;
                        vec3 _3464;
                        vec4 _3479;
                        vec4 _3494;
                        float _3540;
                        bool _3541;
                        for (;;)
                        {
                            uint _3421 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3410));
                            _3411 = (_3410 + 4294967295u) & _3410;
                            uint _3423 = _3421 * 40u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3437 = _3436.w;
                            uint _3439 = (_3421 * 40u) + 4u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3421 * 40u) + 8u;
                            _3464 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x));
                            uint _3466 = (_3421 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3421 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3421 * 40u) + 24u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3515 = (_3421 * 40u) + 28u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3540 = fma(_2756, _3528.z, fma(_2755, _3528.y, _3528.x * _2754)) + _3528.w;
                            _3541 = !((fma(_2756, _3509.z, fma(_2755, _3509.y, _3509.x * _2754)) + _3509.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3541)
                            {
                                float _3568 = _3436.x - _2754;
                                float _3569 = _3436.y - _2755;
                                float _3570 = _3436.z - _2756;
                                float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                                float _3574 = inversesqrt(_3571);
                                float _3575 = _3574 * _3568;
                                float _3576 = _3574 * _3569;
                                float _3577 = _3574 * _3570;
                                float _3581 = 1.0 - (_3571 / (_3437 * _3437));
                                float _4773 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3586 = sqrt(_3571) * _3452.w;
                                float _3588 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                                float _3589 = _3588 * _3588;
                                float _3592 = ((1.0 - _3589) * dot(vec3(_3575, _3576, _3577), vec3(_1029, _1032, _1035))) + _3589;
                                float _3595 = _3586 * _3586;
                                float _3599 = (fma(_2756, _3479.z, fma(_2755, _3479.y, _3479.x * _2754)) + _3479.w) / _3540;
                                float _3600 = (fma(_2756, _3494.z, fma(_2755, _3494.y, _3494.x * _2754)) + _3494.w) / _3540;
                                float _3604 = 1.0 - dot(vec2(_3599, _3600), vec2(_3599, _3600));
                                float _4789 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3606 = _3605 * (((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3582) / ((_3595 * 0.699999988079071044921875) + 1.0));
                                float _3618 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                                float _3619 = 1.0 - _1089;
                                float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                                float _3627 = _3626 * _3626;
                                float _3628 = _3627 * _3627;
                                float _3629 = _3575 - _3048;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                                float _3639 = dot(vec3(_1029, _1032, _1035), vec3((-0.0) - _3048, (-0.0) - _3049, (-0.0) - _3050));
                                float _4800 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3643 = dot(vec3(_1029, _1032, _1035), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                                float _4811 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                                float _3651 = _3588 * _3627;
                                float _3652 = _3651 * _3651;
                                float _3658 = ((1.0 - _3652) * dot(vec3(_1029, _1032, _1035), vec3(_3575, _3576, _3577))) + _3652;
                                float _4822 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3660 = 1.0 - _3627;
                                float _3670 = (0.5 / (((_3659 * ((_3642 * _3660) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3627) * _3642))) * _3659;
                                float _4833 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3680 = (_3605 * _3582) * (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3650 * _3650) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3606 * _3452.y;
                                frontier_phi_83_pred_1 = _3606 * _3452.x;
                                frontier_phi_83_pred_2 = _3680 * _3464.z;
                                frontier_phi_83_pred_3 = _3680 * _3464.y;
                                frontier_phi_83_pred_4 = _3680 * _3464.x;
                                frontier_phi_83_pred_5 = _3606 * _3452.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_83_pred;
                            _3687 = frontier_phi_83_pred_1;
                            _3686 = frontier_phi_83_pred_2;
                            _3685 = frontier_phi_83_pred_3;
                            _3684 = frontier_phi_83_pred_4;
                            _3689 = frontier_phi_83_pred_5;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            if (_3411 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3411;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3396;
                        frontier_phi_77_pred_1 = _3395;
                        frontier_phi_77_pred_2 = _3394;
                        frontier_phi_77_pred_3 = _3393;
                        frontier_phi_77_pred_4 = _3392;
                        frontier_phi_77_pred_5 = _3391;
                    }
                    _3033 = frontier_phi_77_pred;
                    _3031 = frontier_phi_77_pred_1;
                    _3029 = frontier_phi_77_pred_2;
                    _3027 = frontier_phi_77_pred_3;
                    _3025 = frontier_phi_77_pred_4;
                    _3023 = frontier_phi_77_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3023;
                        _3183 = _3025;
                        _3184 = _3027;
                        _3185 = _3029;
                        _3186 = _3031;
                        _3187 = _3033;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3027;
                frontier_phi_58_59_ladder_1 = _3033;
                frontier_phi_58_59_ladder_2 = _3031;
                frontier_phi_58_59_ladder_3 = _3029;
                frontier_phi_58_59_ladder_4 = _3025;
                frontier_phi_58_59_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_58_59_ladder = _2905;
                frontier_phi_58_59_ladder_1 = _2911;
                frontier_phi_58_59_ladder_2 = _2909;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2903;
                frontier_phi_58_59_ladder_5 = _2901;
            }
            _3022 = frontier_phi_58_59_ladder_5;
            _3024 = frontier_phi_58_59_ladder_4;
            _3026 = frontier_phi_58_59_ladder;
            _3028 = frontier_phi_58_59_ladder_3;
            _3030 = frontier_phi_58_59_ladder_2;
            _3032 = frontier_phi_58_59_ladder_1;
        }
        float _3037 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _2813 = (_3037 * _3028) + _2268;
        _2815 = (_3037 * _3030) + _2270;
        _2817 = (_3037 * _3032) + _2272;
        _2819 = ((_3022 * 0.039999999105930328369140625) * _3037) + _2598;
        _2821 = ((_3024 * 0.039999999105930328369140625) * _3037) + _2600;
        _2823 = ((_3026 * 0.039999999105930328369140625) * _3037) + _2602;
    }
    else
    {
        _2813 = _2268;
        _2815 = _2270;
        _2817 = _2272;
        _2819 = _2598;
        _2821 = _2600;
        _2823 = _2602;
    }
    float _4849 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4860 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _4871 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2840 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2813 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1073))) + ((_2819 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2841 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2815 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1073))) + ((_2821 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2817 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1073))) + ((_2823 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    uint _2843 = _285 + 6u;
    float _2851 = _1010 / cbSceneParam._m0[86u].x;
    float _2852 = _1011 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _2927 = _2926 / _932;
        float _2938 = _2927 * _983;
        float _2939 = _984 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2942 = _2927 * _985;
        float _2944 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2939;
        float _2952 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2940 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3083 = 1.0 / cbSceneParam._m0[80u].x;
            float _3084 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3085 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            _3139 = ((abs(_2952 / _2940) * cbSceneParam._m0[80u].y) * ((((_3094 - _3095) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))))) * _3083)) - ((exp2(_2962 * _3094) - exp2(_2962 * _3095)) * _3083))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2871);
        _2964 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2966 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2968 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2970 = _3150 * _2871;
    }
    else
    {
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
        _2970 = _2871;
    }
    bool _3177;
    vec4 _2980;
    vec4 _3002;
    float _3004;
    float _3008;
    float _3009;
    float _3010;
    float _3011;
    bool _3021;
    for (;;)
    {
        _2980 = cbMatDynParam._m0[0u];
        float _2982 = roundEven(_2980.y);
        bool _2983 = _2982 == 3.0;
        float _2984 = log2(_2970);
        float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * _2840;
        float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * _2841;
        float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * _2842;
        float _3000 = _999 + (-0.5);
        _3002 = cbMtdParam._m0[1u];
        _3004 = _3002.y * _3000;
        float _3007 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3008 = _3007 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
        _3009 = _3007 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
        _3010 = _3007 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
        _3011 = _3000 * 0.999000012874603271484375;
        _3021 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3021)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3011) < 0.5)
            {
                _3177 = true;
                break;
            }
        }
        uint _3118 = _1048 + uint(_2980.w);
        if ((cbInstanceData._m0[_3118].w < 1.0) && ((cbInstanceData._m0[_3118].w + _3011) < 0.5))
        {
            _3177 = true;
            break;
        }
        if ((_3004 + 1.0) < _3002.x)
        {
            _3177 = true;
            break;
        }
        _3177 = false;
        break;
    }
    float _3382;
    if (_3177)
    {
        discard_state = true;
        _3382 = 0.0;
    }
    else
    {
        _3382 = cbInstanceData._m0[_2843].w;
    }
    SV_Target.x = _3008;
    SV_Target.y = _3009;
    SV_Target.z = _3010;
    SV_Target.w = _3382;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2843].w;
    discard_exit();
}


