#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1476;
float _3857;
float _3858;
float _3859;
float _3860;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3869 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3880 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3891 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3902 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _457 = (_450 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _458 = (_450 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _459 = (_450 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3913 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _380.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[24u].z) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3924 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _530)) + _530;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _531)) + _531;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _532)) + _532;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _611;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _681 = _679.x;
    float _682 = _679.y;
    float _683 = _679.z;
    float _690 = ((_662.x - _681) * _450) + _681;
    float _691 = ((_662.y - _682) * _450) + _682;
    float _692 = ((_662.z - _683) * _450) + _683;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_704.x - _690) * _523) + _690;
    float _716 = ((_704.y - _691) * _523) + _691;
    float _717 = ((_704.z - _692) * _523) + _692;
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _742 = ((_729.z - _717) * _592) + _717;
    float _745 = ((((_729.x - _715) * _592) + _715) * 2.0) + (-1.0);
    float _746 = ((((_729.y - _716) * _592) + _716) * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3935 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _752 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _782 = (_745 + ((((_637.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_770.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _783 = (_746 + ((((_637.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_770.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _786 = fma(_752, _245, fma(_783, _252, _782 * _238));
    float _789 = fma(_752, _246, fma(_783, _253, _782 * _239));
    float _792 = fma(_752, _247, fma(_783, _254, _782 * _240));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _825 = _823.x;
    float _826 = 1.0 - _825;
    float _832 = (cbMtdParam._m0[19u].x + dot(vec4(_796 * _786, _796 * _789, _796 * _792, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_825 - _826) * cbMtdParam._m0[24u].w) + _826) * cbMtdParam._m0[21u].z);
    float _3946 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _840 = (_833 * (cbMtdParam._m0[17u].x - _618)) + _618;
    float _841 = (_833 * (cbMtdParam._m0[17u].y - _619)) + _619;
    float _842 = (_833 * (cbMtdParam._m0[17u].z - _620)) + _620;
    float _847 = (((_637.z - _742) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _742;
    float _851 = ((_770.z - _847) * cbMtdParam._m0[19u].w) + _847;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _3957 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = ((_864.z - _851) * _833) + _851;
    float _891 = ((sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _752) * _833) + _752;
    float _894 = (((_871 - _782) * _833) + _782) + (cbMtdParam._m0[21u].x * _782);
    float _895 = (((_872 - _783) * _833) + _783) + (cbMtdParam._m0[21u].x * _783);
    float _899 = cbMtdParam._m0[22u].x + _770.w;
    float _902 = fma(_891, _245, fma(_895, _252, _894 * _238));
    float _905 = fma(_891, _246, fma(_895, _253, _894 * _239));
    float _908 = fma(_891, _247, fma(_895, _254, _894 * _240));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3968 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _916 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _3990 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4001 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4012 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _986 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _976);
    float _987 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _976);
    float _988 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _976);
    float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
    float _993 = _986 * _992;
    float _994 = _987 * _992;
    float _995 = _988 * _992;
    vec4 _1000 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1002 = _1000.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1156 = sqrt(((_986 * _986) + (_987 * _987)) + (_988 * _988));
        float _1162 = (cbMatDynParam._m0[5u].x * _1156) + cbMatDynParam._m0[5u].y;
        float _4023 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1167 = (cbMatDynParam._m0[5u].z * _1156) + cbMatDynParam._m0[5u].w;
        float _4034 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) - _1163)) + _1163) < ((_1002 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1013 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1014 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1032 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1035 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1038 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1051 = _278 + 9u;
    uint _1052 = _1051 + uint(cbMatDynParam._m0[0u].w);
    float _1058 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_1052].x;
    float _1059 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_1052].y;
    float _1060 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1052].z;
    float _4045 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1013, cbSceneParam._m0[86u].y * _1014));
    float _1076 = ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * TEXCOORD_5.w) * _1072.x;
    float _1077 = dot(vec3(_913, _914, _915), vec3(_993, _994, _995));
    float _1080 = _1077 * 2.0;
    float _1084 = (_1080 * _913) - _993;
    float _1085 = (_1080 * _914) - _994;
    float _1086 = (_1080 * _915) - _995;
    float _1090 = abs(dot(vec3(_993, _994, _995), vec3(_913, _914, _915)));
    float _4078 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1092 = sqrt(_916);
    float _1105 = exp2((_1092 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1092 * 3.0));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1204 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1208 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1233 = _1137 + _913;
        float _1234 = _1141 + _914;
        float _1235 = _1145 + _915;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_913, _914, _915), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4126 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_913, _914, _915), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4159 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_913, _914, _915), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4192 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1516 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1520 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1524 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1547 = _1137 + _913;
        float _1548 = _1141 + _914;
        float _1549 = _1145 + _915;
        float _1559 = fma(_1549, cbModelParam._m0[30u].z, fma(_1548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1547)) - _1516;
        float _1560 = fma(_1549, cbModelParam._m0[31u].z, fma(_1548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1547)) - _1520;
        float _1561 = fma(_1549, cbModelParam._m0[32u].z, fma(_1548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1547)) - _1524;
        float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
        float _1578 = ((_1565 * _1559) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1516 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1565 * _1560) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1520 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1565 * _1561) / cbModelParam._m0[35u].z) + ((((((_1524 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        float _1615 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1582.x + (-0.5));
        float _1617 = _1615 * (_1582.y + (-0.5));
        float _1618 = _1615 * (_1582.z + (-0.5));
        float _1625 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1589.x + (-0.5));
        float _1627 = _1625 * (_1589.y + (-0.5));
        float _1628 = _1625 * (_1589.z + (-0.5));
        float _1635 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1596.x + (-0.5));
        float _1637 = _1635 * (_1596.y + (-0.5));
        float _1638 = _1635 * (_1596.z + (-0.5));
        float _1645 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1603.x + (-0.5));
        float _1647 = _1645 * (_1603.y + (-0.5));
        float _1648 = _1645 * (_1603.z + (-0.5));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = _1616 * 0.5;
        float _1653 = _1626 * 0.5;
        float _1654 = _1636 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_913, _914, _915), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4255 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1679 + 1.0))) + _1684) * _1649;
        float _1694 = _1617 * 0.5;
        float _1695 = _1627 * 0.5;
        float _1696 = _1637 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_913, _914, _915), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4288 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1721 + 1.0))) + _1726) * _1650;
        float _1736 = _1618 * 0.5;
        float _1737 = _1628 * 0.5;
        float _1738 = _1638 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_913, _914, _915), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4321 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1763 + 1.0))) + _1768) * _1651;
        _1785 = _1618;
        _1786 = _1617;
        _1787 = _1616;
        _1788 = _1628;
        _1789 = _1627;
        _1790 = _1626;
        _1791 = _1638;
        _1792 = _1637;
        _1793 = _1636;
        _1794 = _1651;
        _1795 = _1650;
        _1796 = _1649;
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
    }
    else
    {
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = _1476;
        _1795 = _1476;
        _1796 = _1476;
        _1797 = 0.0;
        _1798 = 0.0;
        _1799 = 0.0;
    }
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1488)) + _1488;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1489)) + _1489;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1832 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1809));
    float _1853 = _1084 * 0.5;
    float _1854 = _1085 * 0.5;
    float _1855 = _1086 * 0.5;
    float _1856 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1859 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1862 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1896;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1869 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1873 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1877 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1884 = dot(vec4(cbModelParam._m0[39u]), vec4(_1853, _1854, _1855, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1907;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1898 = dot(vec4(cbModelParam._m0[40u]), vec4(_1853, _1854, _1855, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1911 = (_1907 * cbModelParam._m0[1u].x) + (_1896 * (1.0 - cbModelParam._m0[1u].x));
    float _1921 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1921 : min(cbModelParam._m0[25u].z, _1921));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1086, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084));
        float _1983 = fma(_1086, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084));
        float _1986 = fma(_1086, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2014 = frontier_phi_17_15_ladder;
        }
        float _2236;
        if (_1983 > 0.0)
        {
            _2236 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2236 = frontier_phi_26_22_ladder;
        }
        float _2482;
        if (_1986 > 0.0)
        {
            _2482 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2482 = frontier_phi_38_33_ladder;
        }
        float _2484 = isnan(_2236) ? _2014 : (isnan(_2014) ? _2236 : min(_2014, _2236));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1980) + _1969;
        float _2490 = (_2485 * _1983) + _1973;
        float _2491 = (_2485 * _1986) + _1977;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1922);
            frontier_phi_16_38_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_16_38_ladder_2;
        _2004 = frontier_phi_16_38_ladder_1;
        _2006 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1084, _1085, _1086), _1922);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1086, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084));
        float _2079 = fma(_1086, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084));
        float _2082 = fma(_1086, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084));
        float _2241;
        if (_2076 > 0.0)
        {
            _2241 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2241 = frontier_phi_28_24_ladder;
        }
        float _2509;
        if (_2079 > 0.0)
        {
            _2509 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2509 = frontier_phi_40_35_ladder;
        }
        float _2714;
        if (_2082 > 0.0)
        {
            _2714 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2714 = frontier_phi_49_46_ladder;
        }
        float _2716 = isnan(_2509) ? _2241 : (isnan(_2241) ? _2509 : min(_2241, _2509));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _2076) + _2065;
        float _2722 = (_2717 * _2079) + _2069;
        float _2723 = (_2717 * _2082) + _2073;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_25_49_ladder = _2922.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2922.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2922.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_49_ladder_2;
        _2103 = frontier_phi_25_49_ladder_1;
        _2105 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1084, _1085, _1086), _2011);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2117 = ((((1.0 - _1105) * ((_1092 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1105 * _1092)) * _1076;
    float _2118 = _2117 * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2119 = _2117 * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2120 = _2117 * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    vec4 _2137 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1013, _1014));
    float _2139 = _2137.w;
    float _2151 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2139);
    float _2152 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2139);
    float _2153 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2139);
    uvec4 _2157 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2159 = _2157.x * 14u;
    uint _2160 = _2159 + 13u;
    float _2167 = _1076 + (-1.0);
    float _2172 = (cbLight._m0[_2160].x * _2167) + 1.0;
    float _2173 = (cbLight._m0[_2160].y * _2167) + 1.0;
    float _2174 = (cbLight._m0[_2160].z * _2167) + 1.0;
    float _2175 = (cbLight._m0[_2160].w * _2167) + 1.0;
    uint _2176 = _2159 + 5u;
    float _2182 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2186 = _2159 + 4u;
    float _2195 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2199 = _2159 | 1u;
    float _2210 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_913, _914, _915));
    float _2213 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_913, _914, _915));
    float _4457 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _4468 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2218 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2220 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2227 = ((cbLight._m0[_2176].x * _2182) * _2220) + (((cbLight._m0[_2186].x * _2151) * _2195) * _2218);
    float _2228 = ((_2182 * cbLight._m0[_2176].y) * _2220) + (((cbLight._m0[_2186].y * _2152) * _2195) * _2218);
    float _2229 = ((_2182 * cbLight._m0[_2176].z) * _2220) + (((cbLight._m0[_2186].z * _2153) * _2195) * _2218);
    uvec4 _2233 = floatBitsToUint(cbLight._m0[_2159 + 12u]);
    bool _2235 = _2233.x == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2235)
    {
        _2246 = _2227;
        _2248 = _2228;
        _2250 = _2229;
    }
    else
    {
        uint _2254 = _2159 + 6u;
        float _2270 = (dot(vec3(cbLight._m0[_2159 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4479 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2273 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2246 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2227;
        _2248 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2228;
        _2250 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2229;
    }
    bool _2253 = _2233.y == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2253)
    {
        _2291 = _2246;
        _2293 = _2248;
        _2295 = _2250;
    }
    else
    {
        uint _2453 = _2159 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2159 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4495 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2472 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2291 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2246;
        _2293 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2248;
        _2295 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2250;
    }
    uint _2298 = _2159 + 8u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _916) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2159].x + _993;
    float _2314 = cbLight._m0[_2159].y + _994;
    float _2315 = cbLight._m0[_2159].z + _995;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2159].xyz));
    float _4511 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _4522 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2327 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2328 = dot(vec3(_913, _914, _915), vec3(_2320, _2321, _2322));
    float _4533 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2320, _2321, _2322));
    float _4544 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2312 * _2312;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2327 * ((_2326 * _2352) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2352) + _2312) * _2326))) * _2326;
    float _4555 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    uint _2379 = _2159 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _916) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2199].x + _993;
    float _2393 = cbLight._m0[_2199].y + _994;
    float _2394 = cbLight._m0[_2199].z + _995;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2199].xyz));
    float _4566 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2406 = dot(vec3(_913, _914, _915), vec3(_2399, _2400, _2401));
    float _4577 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2399, _2400, _2401));
    float _4588 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2428 = 1.0 - _2391;
    float _2438 = (0.5 / (((_2327 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2428) + _2391) * _2405))) * _2405;
    float _4599 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2450 = (((_2427 * cbLight._m0[_2379].x) * _2440) * _2182) + ((((cbLight._m0[_2298].x * _2151) * _2351) * _2365) * _2195);
    float _2451 = (((_2427 * cbLight._m0[_2379].y) * _2440) * _2182) + ((((cbLight._m0[_2298].y * _2152) * _2351) * _2365) * _2195);
    float _2452 = (((_2427 * cbLight._m0[_2379].z) * _2440) * _2182) + ((((cbLight._m0[_2298].z * _2153) * _2351) * _2365) * _2195);
    float _2514;
    float _2516;
    float _2518;
    if (_2235)
    {
        _2514 = _2450;
        _2516 = _2451;
        _2518 = _2452;
    }
    else
    {
        uint _2520 = _2159 + 2u;
        uint _2524 = _2159 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _916) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _993;
        float _2541 = cbLight._m0[_2520].y + _994;
        float _2542 = cbLight._m0[_2520].z + _995;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2520].xyz));
        float _4610 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2554 = dot(vec3(_913, _914, _915), vec3(_2547, _2548, _2549));
        float _4621 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4632 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2327 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2576) + _2539) * _2553))) * _2553;
        float _4643 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2514 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2450;
        _2516 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2451;
        _2518 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2452;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2253)
    {
        _2624 = _2514;
        _2626 = _2516;
        _2628 = _2518;
    }
    else
    {
        uint _2635 = _2159 + 3u;
        uint _2639 = _2159 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _916) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _993;
        float _2656 = cbLight._m0[_2635].y + _994;
        float _2657 = cbLight._m0[_2635].z + _995;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2635].xyz));
        float _4659 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2669 = dot(vec3(_913, _914, _915), vec3(_2662, _2663, _2664));
        float _4670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4681 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2690 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2691 = 1.0 - _2654;
        float _2701 = (0.5 / (((_2327 * ((_2668 * _2691) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2691) + _2654) * _2668))) * _2668;
        float _4692 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2624 = (((_2690 * cbLight._m0[_2639].x) * _2703) * _2704) + _2514;
        _2626 = (((_2690 * cbLight._m0[_2639].y) * _2703) * _2704) + _2516;
        _2628 = (((_2690 * cbLight._m0[_2639].z) * _2703) * _2704) + _2518;
    }
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_2157.y == 0u)
    {
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2779;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2779;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2779;
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.x;
        uint _2806 = uint((float(_2794.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1014) / _2795))) + floor(float(uint(cbSceneParam._m0[85u].x * _1013) / _2795)));
        float _2816 = (log2(_2782 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2817 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        uint _2820 = uint(isnan(14.0) ? _2817 : (isnan(_2817) ? 14.0 : min(_2817, 14.0)));
        uvec4 _2825 = texelFetch(g_lightClusterGridBuffer, int(((_2820 << 2u) + (_2806 << 6u)) >> 2u));
        uint _2826 = _2825.x;
        uint _2827 = _2794.z;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((((1u << ((_2827 >> 4u) & 15u)) + 4294967295u) & _2826) == 0u) || ((_2827 & 240u) == 0u))
        {
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
        }
        else
        {
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3096)
                {
                    frontier_phi_66_pred = _3080;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3095;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3086 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _2780;
                        float _3292 = _3251.y - _2781;
                        float _3293 = _3251.z - _2782;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_1032, _1035, _1038), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4718 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _2780;
                        float _3327 = (-0.0) - _2781;
                        float _3328 = (-0.0) - _2782;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3343 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3344 = 1.0 - _1092;
                        float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                        float _3352 = _3351 * _3351;
                        float _3353 = _3352 * _3352;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3364 = dot(vec3(_1032, _1035, _1038), vec3(_3333, _3334, _3335));
                        float _4734 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3368 = dot(vec3(_1032, _1035, _1038), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                        float _4745 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                        float _3376 = _3311 * _3352;
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3301) + _3377;
                        float _4756 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3382 = 1.0 - _3352;
                        float _3392 = (0.5 / (((_3381 * ((_3367 * _3382) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3352) * _3367))) * _3381;
                        float _4767 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3403 = (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3375 * _3375) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3155 = (_3322 * _3270.x) + _3228;
                        _3156 = (_3322 * _3270.y) + _3229;
                        _3157 = (_3322 * _3270.z) + _3230;
                        _3152 = (_3403 * _3287.x) + _3225;
                        _3153 = (_3403 * _3287.y) + _3226;
                        _3154 = (_3403 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_66_pred = _3152;
                    frontier_phi_66_pred_1 = _3157;
                    frontier_phi_66_pred_2 = _3156;
                    frontier_phi_66_pred_3 = _3155;
                    frontier_phi_66_pred_4 = _3154;
                    frontier_phi_66_pred_5 = _3153;
                }
                _2928 = frontier_phi_66_pred;
                _2938 = frontier_phi_66_pred_1;
                _2936 = frontier_phi_66_pred_2;
                _2934 = frontier_phi_66_pred_3;
                _2932 = frontier_phi_66_pred_4;
                _2930 = frontier_phi_66_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2928;
                    _3081 = _2930;
                    _3082 = _2932;
                    _3083 = _2934;
                    _3084 = _2936;
                    _3085 = _2938;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
        }
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.z;
        uint _2944 = (_2942 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2944) & _2826) == 0u)
        {
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
            float _3074 = _3073 * _2780;
            float _3075 = _3073 * _2781;
            float _3076 = _3073 * _2782;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2944 < ((_2942 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3208 = _2927;
                float _3209 = _2929;
                float _3210 = _2931;
                float _3211 = _2933;
                float _3212 = _2935;
                float _3213 = _2937;
                uint _3214 = _2944;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3224)
                    {
                        frontier_phi_77_pred = _3213;
                        frontier_phi_77_pred_1 = _3212;
                        frontier_phi_77_pred_2 = _3211;
                        frontier_phi_77_pred_3 = _3210;
                        frontier_phi_77_pred_4 = _3209;
                        frontier_phi_77_pred_5 = _3208;
                    }
                    else
                    {
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        uint _3436 = _3223;
                        uint _3437;
                        vec4 _3462;
                        float _3463;
                        vec4 _3478;
                        vec3 _3490;
                        vec4 _3505;
                        vec4 _3520;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3447 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3436));
                            _3437 = (_3436 + 4294967295u) & _3436;
                            uint _3449 = _3447 * 40u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3463 = _3462.w;
                            uint _3465 = (_3447 * 40u) + 4u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3447 * 40u) + 8u;
                            _3490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x));
                            uint _3492 = (_3447 * 40u) + 16u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3447 * 40u) + 20u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3447 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3447 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_2782, _3554.z, fma(_2781, _3554.y, _3554.x * _2780)) + _3554.w;
                            _3567 = !((fma(_2782, _3535.z, fma(_2781, _3535.y, _3535.x * _2780)) + _3535.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3462.x - _2780;
                                float _3595 = _3462.y - _2781;
                                float _3596 = _3462.z - _2782;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3463 * _3463));
                                float _4778 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3612 = sqrt(_3597) * _3478.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_1032, _1035, _1038))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_2782, _3505.z, fma(_2781, _3505.y, _3505.x * _2780)) + _3505.w) / _3566;
                                float _3626 = (fma(_2782, _3520.z, fma(_2781, _3520.y, _3520.x * _2780)) + _3520.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4794 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _1092;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_1032, _1035, _1038), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4805 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3669 = dot(vec3(_1032, _1035, _1038), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4816 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_1032, _1035, _1038), vec3(_3601, _3602, _3603))) + _3678;
                                float _4827 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4838 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3632 * _3478.y;
                                frontier_phi_83_pred_1 = _3632 * _3478.x;
                                frontier_phi_83_pred_2 = _3706 * _3490.z;
                                frontier_phi_83_pred_3 = _3706 * _3490.y;
                                frontier_phi_83_pred_4 = _3706 * _3490.x;
                                frontier_phi_83_pred_5 = _3632 * _3478.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_83_pred;
                            _3713 = frontier_phi_83_pred_1;
                            _3712 = frontier_phi_83_pred_2;
                            _3711 = frontier_phi_83_pred_3;
                            _3710 = frontier_phi_83_pred_4;
                            _3715 = frontier_phi_83_pred_5;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            if (_3437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3437;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3422;
                        frontier_phi_77_pred_1 = _3421;
                        frontier_phi_77_pred_2 = _3420;
                        frontier_phi_77_pred_3 = _3419;
                        frontier_phi_77_pred_4 = _3418;
                        frontier_phi_77_pred_5 = _3417;
                    }
                    _3059 = frontier_phi_77_pred;
                    _3057 = frontier_phi_77_pred_1;
                    _3055 = frontier_phi_77_pred_2;
                    _3053 = frontier_phi_77_pred_3;
                    _3051 = frontier_phi_77_pred_4;
                    _3049 = frontier_phi_77_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3049;
                        _3209 = _3051;
                        _3210 = _3053;
                        _3211 = _3055;
                        _3212 = _3057;
                        _3213 = _3059;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3053;
                frontier_phi_58_59_ladder_1 = _3059;
                frontier_phi_58_59_ladder_2 = _3057;
                frontier_phi_58_59_ladder_3 = _3055;
                frontier_phi_58_59_ladder_4 = _3051;
                frontier_phi_58_59_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            _3048 = frontier_phi_58_59_ladder_5;
            _3050 = frontier_phi_58_59_ladder_4;
            _3052 = frontier_phi_58_59_ladder;
            _3054 = frontier_phi_58_59_ladder_3;
            _3056 = frontier_phi_58_59_ladder_2;
            _3058 = frontier_phi_58_59_ladder_1;
        }
        float _3063 = isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0));
        _2839 = (_3063 * _3054) + _2291;
        _2841 = (_3063 * _3056) + _2293;
        _2843 = (_3063 * _3058) + _2295;
        _2845 = ((_3048 * 0.039999999105930328369140625) * _3063) + _2624;
        _2847 = ((_3050 * 0.039999999105930328369140625) * _3063) + _2626;
        _2849 = ((_3052 * 0.039999999105930328369140625) * _3063) + _2628;
    }
    else
    {
        _2839 = _2291;
        _2841 = _2293;
        _2843 = _2295;
        _2845 = _2624;
        _2847 = _2626;
        _2849 = _2628;
    }
    float _4854 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4865 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4876 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _2866 = ((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2839 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1076))) + ((_2845 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2867 = ((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2841 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1076))) + ((_2847 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2843 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1076))) + ((_2849 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    uint _2869 = _278 + 6u;
    float _2877 = _1013 / cbSceneParam._m0[86u].x;
    float _2878 = _1014 / cbSceneParam._m0[86u].y;
    vec4 _2892 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2894 = _2892.x;
    float _2895 = _2892.y;
    float _2896 = _2892.z;
    float _2897 = _2892.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _2952 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _2953 = _2952 / _934;
        float _2964 = _2953 * _986;
        float _2965 = _987 * _2953;
        float _2966 = (-0.0) - _2965;
        float _2968 = _2953 * _988;
        float _2970 = (cbSceneParam._m0[77u].w * _2966) / _2952;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2965;
        float _2978 = sqrt(((_2964 * _2964) + (_2965 * _2965)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2952)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2966 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3111 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3165 = ((abs(_2978 / _2966) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2988 * _3120) - exp2(_2988 * _3121)) * _3109))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2897);
        _2990 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2894;
        _2992 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2895;
        _2994 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2896;
        _2996 = _3176 * _2897;
    }
    else
    {
        _2990 = _2894;
        _2992 = _2895;
        _2994 = _2896;
        _2996 = _2897;
    }
    bool _3203;
    vec4 _3006;
    vec4 _3028;
    float _3030;
    float _3034;
    float _3035;
    float _3036;
    float _3037;
    bool _3047;
    for (;;)
    {
        _3006 = cbMatDynParam._m0[0u];
        float _3008 = roundEven(_3006.y);
        bool _3009 = _3008 == 3.0;
        float _3010 = log2(_2996);
        float _3017 = exp2(_3010 * cbSceneParam._m0[78u].x) * _2866;
        float _3018 = exp2(_3010 * cbSceneParam._m0[78u].y) * _2867;
        float _3019 = exp2(_3010 * cbSceneParam._m0[78u].z) * _2868;
        float _3026 = _1002 + (-0.5);
        _3028 = cbMtdParam._m0[1u];
        _3030 = _3028.y * _3026;
        float _3033 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3034 = _3033 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
        _3035 = _3033 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
        _3036 = _3033 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
        _3037 = _3026 * 0.999000012874603271484375;
        _3047 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3047)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3037) < 0.5)
            {
                _3203 = true;
                break;
            }
        }
        uint _3144 = _1051 + uint(_3006.w);
        if ((cbInstanceData._m0[_3144].w < 1.0) && ((cbInstanceData._m0[_3144].w + _3037) < 0.5))
        {
            _3203 = true;
            break;
        }
        if ((_3030 + 1.0) < _3028.x)
        {
            _3203 = true;
            break;
        }
        _3203 = false;
        break;
    }
    float _3408;
    if (_3203)
    {
        discard_state = true;
        _3408 = 0.0;
    }
    else
    {
        _3408 = cbInstanceData._m0[_2869].w;
    }
    SV_Target.x = _3034;
    SV_Target.y = _3035;
    SV_Target.z = _3036;
    SV_Target.w = _3408;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2869].w;
    discard_exit();
}


