#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1059;
float _3422;
float _3423;
float _3424;
float _3425;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].z) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3434 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _389 = (_382 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _390 = (_382 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _391 = (_382 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3445 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _473 = (((_461.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _474 = (((_461.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    float _478 = (cbMtdParam._m0[19u].w * (_461.z - _434)) + _434;
    float _482 = cbMtdParam._m0[22u].x + _461.w;
    float _485 = fma(_445, _215 * NORMAL.x, fma(_474, _222 * TANGENT.x, (_208 * _200) * _473));
    float _488 = fma(_445, _215 * NORMAL.y, fma(_474, _222 * TANGENT.y, (_208 * _201) * _473));
    float _491 = fma(_445, _215 * NORMAL.z, fma(_474, _222 * TANGENT.z, (_208 * _202) * _473));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3456 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _499 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3478 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3489 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3500 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    vec4 _583 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _585 = _583.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _739 = sqrt(((_569 * _569) + (_570 * _570)) + (_571 * _571));
        float _745 = (cbMatDynParam._m0[5u].x * _739) + cbMatDynParam._m0[5u].y;
        float _3511 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _750 = (cbMatDynParam._m0[5u].z * _739) + cbMatDynParam._m0[5u].w;
        float _3522 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) - _746)) + _746) < ((_585 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _618 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _621 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _634 = _228 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3533 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    vec4 _655 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _659 = ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * TEXCOORD_5.w) * _655.x;
    float _660 = dot(vec3(_496, _497, _498), vec3(_576, _577, _578));
    float _663 = _660 * 2.0;
    float _667 = (_663 * _496) - _576;
    float _668 = (_663 * _497) - _577;
    float _669 = (_663 * _498) - _578;
    float _673 = abs(dot(vec3(_576, _577, _578), vec3(_496, _497, _498)));
    float _3566 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _675 = sqrt(_499);
    float _688 = exp2((_675 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_675 * 3.0));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_728, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720));
        float _787 = fma(_728, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720));
        float _791 = fma(_728, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720));
        float _816 = _720 + _496;
        float _817 = _724 + _497;
        float _818 = _728 + _498;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_496, _497, _498), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3614 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_496, _497, _498), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3647 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_496, _497, _498), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3680 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_728, cbModelParam._m0[30u].z, fma(_724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _720));
        float _1105 = fma(_728, cbModelParam._m0[31u].z, fma(_724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _720));
        float _1109 = fma(_728, cbModelParam._m0[32u].z, fma(_724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _720));
        float _1132 = _720 + _496;
        float _1133 = _724 + _497;
        float _1134 = _728 + _498;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_496, _497, _498), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3743 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_496, _497, _498), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3776 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_496, _497, _498), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3809 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1059;
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = _1059;
        _1380 = _1059;
        _1381 = _1059;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1071)) + _1071;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1072)) + _1072;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1073)) + _1073;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _667 * 0.5;
    float _1439 = _668 * 0.5;
    float _1440 = _669 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_728, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_728, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_728, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_669, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667));
        float _1570 = fma(_669, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667));
        float _1573 = fma(_669, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1601 = frontier_phi_17_15_ladder;
        }
        float _1803;
        if (_1570 > 0.0)
        {
            _1803 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1803 = frontier_phi_26_22_ladder;
        }
        float _2046;
        if (_1573 > 0.0)
        {
            _2046 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2046 = frontier_phi_38_33_ladder;
        }
        float _2048 = isnan(_1803) ? _1601 : (isnan(_1601) ? _1803 : min(_1601, _1803));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1567) + _1556;
        float _2054 = (_2049 * _1570) + _1560;
        float _2055 = (_2049 * _1573) + _1564;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2058 = (-1.0) - _2056;
        float _2060 = _2056 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2055 > _2060) || ((_2055 < _2058) || ((_2054 > _2060) || ((_2054 < _2058) || ((_2053 < _2058) || (_2053 > _2060))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2055, cbModelParam._m0[9u].z, fma(_2054, cbModelParam._m0[9u].y, _2053 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2055, cbModelParam._m0[10u].z, fma(_2054, cbModelParam._m0[10u].y, _2053 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2055, cbModelParam._m0[11u].z, fma(_2054, cbModelParam._m0[11u].y, _2053 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_16_38_ladder = _2179.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2179.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2179.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_16_38_ladder_2;
        _1591 = frontier_phi_16_38_ladder_1;
        _1593 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_667, _668, _669), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1653 = fma(_728, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720)) + cbModelParam._m0[21u].w;
        float _1657 = fma(_728, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720)) + cbModelParam._m0[22u].w;
        float _1661 = fma(_728, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720)) + cbModelParam._m0[23u].w;
        float _1664 = fma(_669, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667));
        float _1667 = fma(_669, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667));
        float _1670 = fma(_669, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667));
        float _1808;
        if (_1664 > 0.0)
        {
            _1808 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1808 = frontier_phi_28_24_ladder;
        }
        float _2073;
        if (_1667 > 0.0)
        {
            _2073 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2073 = frontier_phi_40_35_ladder;
        }
        float _2278;
        if (_1670 > 0.0)
        {
            _2278 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2278 = frontier_phi_49_46_ladder;
        }
        float _2280 = isnan(_2073) ? _1808 : (isnan(_1808) ? _2073 : min(_1808, _2073));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1664) + _1653;
        float _2286 = (_2281 * _1667) + _1657;
        float _2287 = (_2281 * _1670) + _1661;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2287, cbModelParam._m0[17u].z, fma(_2286, cbModelParam._m0[17u].y, _2285 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2287, cbModelParam._m0[18u].z, fma(_2286, cbModelParam._m0[18u].y, _2285 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2287, cbModelParam._m0[19u].z, fma(_2286, cbModelParam._m0[19u].y, _2285 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_25_49_ladder = _2486.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2486.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2486.x * cbModelParam._m0[1u].z;
        }
        _1689 = frontier_phi_25_49_ladder_2;
        _1691 = frontier_phi_25_49_ladder_1;
        _1693 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_667, _668, _669), _1598);
        _1689 = _1673.x * cbModelParam._m0[1u].z;
        _1691 = _1673.y * cbModelParam._m0[1u].z;
        _1693 = _1673.z * cbModelParam._m0[1u].z;
    }
    float _1705 = ((((1.0 - _688) * ((_675 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_688 * _675)) * _659;
    float _1706 = _1705 * ((cbModelParam._m0[1u].w * (_1689 - _1589)) + _1589);
    float _1707 = _1705 * ((cbModelParam._m0[1u].w * (_1691 - _1591)) + _1591);
    float _1708 = _1705 * ((cbModelParam._m0[1u].w * (_1693 - _1593)) + _1593);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1706 * cbSceneParam._m0[91u].x));
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1737 = _659 + (-1.0);
    float _1742 = (cbLight._m0[_1730].x * _1737) + 1.0;
    float _1743 = (cbLight._m0[_1730].y * _1737) + 1.0;
    float _1744 = (cbLight._m0[_1730].z * _1737) + 1.0;
    float _1745 = (cbLight._m0[_1730].w * _1737) + 1.0;
    uint _1746 = _1729 + 5u;
    float _1752 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1756 = _1729 + 4u;
    float _1762 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1766 = _1729 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_496, _497, _498));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_496, _497, _498));
    float _3945 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3956 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1746].x * _1752) * _1787) + ((cbLight._m0[_1756].x * _1762) * _1785);
    float _1795 = ((_1752 * cbLight._m0[_1746].y) * _1787) + ((_1762 * cbLight._m0[_1756].y) * _1785);
    float _1796 = ((_1752 * cbLight._m0[_1746].z) * _1787) + ((_1762 * cbLight._m0[_1756].z) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1729 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1794;
        _1815 = _1795;
        _1817 = _1796;
    }
    else
    {
        uint _1821 = _1729 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1729 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3967 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1840 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1796;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2017 = _1729 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1729 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _3983 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2036 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1858 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1813;
        _1860 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1815;
        _1862 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1817;
    }
    uint _1865 = _1729 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _499) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1729].x + _576;
    float _1881 = cbLight._m0[_1729].y + _577;
    float _1882 = cbLight._m0[_1729].z + _578;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1729].xyz));
    float _3999 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _1894 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1895 = dot(vec3(_496, _497, _498), vec3(_1887, _1888, _1889));
    float _4021 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1887, _1888, _1889));
    float _4032 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1918 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = 1.0 - _1879;
    float _1930 = (0.5 / (((_1894 * ((_1893 * _1919) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1919) + _1879) * _1893))) * _1893;
    float _4043 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1943 = _1729 + 9u;
    float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _499) * 0.949999988079071044921875);
    float _1955 = _1954 * _1954;
    float _1956 = cbLight._m0[_1766].x + _576;
    float _1957 = cbLight._m0[_1766].y + _577;
    float _1958 = cbLight._m0[_1766].z + _578;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1963 = _1962 * _1956;
    float _1964 = _1962 * _1957;
    float _1965 = _1962 * _1958;
    float _1966 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1766].xyz));
    float _4054 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1970 = dot(vec3(_496, _497, _498), vec3(_1963, _1964, _1965));
    float _4065 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1963, _1964, _1965));
    float _4076 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1955 * _1955;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1992 = 1.0 - _1955;
    float _2002 = (0.5 / (((_1894 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1992) + _1955) * _1969))) * _1969;
    float _4087 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    float _2014 = (((_1991 * cbLight._m0[_1943].x) * _2004) * _1752) + (((_1918 * cbLight._m0[_1865].x) * _1932) * _1762);
    float _2015 = (((_1991 * cbLight._m0[_1943].y) * _2004) * _1752) + (((_1918 * cbLight._m0[_1865].y) * _1932) * _1762);
    float _2016 = (((_1991 * cbLight._m0[_1943].z) * _2004) * _1752) + (((_1918 * cbLight._m0[_1865].z) * _1932) * _1762);
    float _2078;
    float _2080;
    float _2082;
    if (_1802)
    {
        _2078 = _2014;
        _2080 = _2015;
        _2082 = _2016;
    }
    else
    {
        uint _2084 = _1729 + 2u;
        uint _2088 = _1729 + 10u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _499) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _576;
        float _2105 = cbLight._m0[_2084].y + _577;
        float _2106 = cbLight._m0[_2084].z + _578;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2084].xyz));
        float _4098 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2118 = dot(vec3(_496, _497, _498), vec3(_2111, _2112, _2113));
        float _4109 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4120 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1894 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2140) + _2103) * _2117))) * _2117;
        float _4131 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2078 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _2153) + _2014;
        _2080 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _2153) + _2015;
        _2082 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _2153) + _2016;
    }
    float _2188;
    float _2190;
    float _2192;
    if (_1820)
    {
        _2188 = _2078;
        _2190 = _2080;
        _2192 = _2082;
    }
    else
    {
        uint _2199 = _1729 + 3u;
        uint _2203 = _1729 + 11u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _499) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _576;
        float _2220 = cbLight._m0[_2199].y + _577;
        float _2221 = cbLight._m0[_2199].z + _578;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2199].xyz));
        float _4147 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2233 = dot(vec3(_496, _497, _498), vec3(_2226, _2227, _2228));
        float _4158 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4169 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = 1.0 - _2218;
        float _2265 = (0.5 / (((_1894 * ((_2232 * _2255) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2255) + _2218) * _2232))) * _2232;
        float _4180 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2188 = (((_2254 * cbLight._m0[_2203].x) * _2267) * _2268) + _2078;
        _2190 = (((_2254 * cbLight._m0[_2203].y) * _2267) * _2268) + _2080;
        _2192 = (((_2254 * cbLight._m0[_2203].z) * _2267) * _2268) + _2082;
    }
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    if (_1727.y == 0u)
    {
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2343;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2343;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2343;
        uvec4 _2358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2359 = _2358.x;
        uint _2370 = uint((float(_2358.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2359))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2359)));
        float _2380 = (log2(_2346 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2381 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        uint _2384 = uint(isnan(14.0) ? _2381 : (isnan(_2381) ? 14.0 : min(_2381, 14.0)));
        uvec4 _2389 = texelFetch(g_lightClusterGridBuffer, int(((_2384 << 2u) + (_2370 << 6u)) >> 2u));
        uint _2390 = _2389.x;
        uint _2391 = _2358.z;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((((1u << ((_2391 >> 4u) & 15u)) + 4294967295u) & _2390) == 0u) || ((_2391 & 240u) == 0u))
        {
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
        }
        else
        {
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            uint _2650 = 0u;
            uint _2659;
            bool _2660;
            for (;;)
            {
                _2659 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                _2660 = _2659 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2660)
                {
                    frontier_phi_66_pred = _2644;
                    frontier_phi_66_pred_1 = _2649;
                    frontier_phi_66_pred_2 = _2648;
                    frontier_phi_66_pred_3 = _2647;
                    frontier_phi_66_pred_4 = _2646;
                    frontier_phi_66_pred_5 = _2645;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2659;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2650 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2344;
                        float _2856 = _2815.y - _2345;
                        float _2857 = _2815.z - _2346;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_615, _618, _621), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4206 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2344;
                        float _2891 = (-0.0) - _2345;
                        float _2892 = (-0.0) - _2346;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _675;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_615, _618, _621), vec3(_2897, _2898, _2899));
                        float _4222 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2932 = dot(vec3(_615, _618, _621), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4233 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4244 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4255 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2719 = (_2886 * _2834.x) + _2792;
                        _2720 = (_2886 * _2834.y) + _2793;
                        _2721 = (_2886 * _2834.z) + _2794;
                        _2716 = (_2967 * _2851.x) + _2789;
                        _2717 = (_2967 * _2851.y) + _2790;
                        _2718 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_66_pred = _2716;
                    frontier_phi_66_pred_1 = _2721;
                    frontier_phi_66_pred_2 = _2720;
                    frontier_phi_66_pred_3 = _2719;
                    frontier_phi_66_pred_4 = _2718;
                    frontier_phi_66_pred_5 = _2717;
                }
                _2492 = frontier_phi_66_pred;
                _2502 = frontier_phi_66_pred_1;
                _2500 = frontier_phi_66_pred_2;
                _2498 = frontier_phi_66_pred_3;
                _2496 = frontier_phi_66_pred_4;
                _2494 = frontier_phi_66_pred_5;
                uint _2651 = _2650 + 1u;
                if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2644 = _2492;
                    _2645 = _2494;
                    _2646 = _2496;
                    _2647 = _2498;
                    _2648 = _2500;
                    _2649 = _2502;
                    _2650 = _2651;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
        }
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.z;
        uint _2508 = (_2506 >> 8u) & 15u;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((4294967295u << _2508) & _2390) == 0u)
        {
            _2612 = _2491;
            _2614 = _2493;
            _2616 = _2495;
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
        }
        else
        {
            float _2637 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
            float _2638 = _2637 * _2344;
            float _2639 = _2637 * _2345;
            float _2640 = _2637 * _2346;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2508 < ((_2506 >> 12u) & 15u))
            {
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2772 = _2491;
                float _2773 = _2493;
                float _2774 = _2495;
                float _2775 = _2497;
                float _2776 = _2499;
                float _2777 = _2501;
                uint _2778 = _2508;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2788)
                    {
                        frontier_phi_77_pred = _2777;
                        frontier_phi_77_pred_1 = _2776;
                        frontier_phi_77_pred_2 = _2775;
                        frontier_phi_77_pred_3 = _2774;
                        frontier_phi_77_pred_4 = _2773;
                        frontier_phi_77_pred_5 = _2772;
                    }
                    else
                    {
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        uint _3000 = _2787;
                        uint _3001;
                        vec4 _3026;
                        float _3027;
                        vec4 _3042;
                        vec3 _3054;
                        vec4 _3069;
                        vec4 _3085;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3011 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3000));
                            _3001 = (_3000 + 4294967295u) & _3000;
                            uint _3013 = _3011 * 40u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.w;
                            uint _3029 = (_3011 * 40u) + 4u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_3011 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3011 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_3011 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3011 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3011 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2346, _3119.z, fma(_2345, _3119.y, _3119.x * _2344)) + _3119.w;
                            _3132 = !((fma(_2346, _3100.z, fma(_2345, _3100.y, _3100.x * _2344)) + _3100.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3026.x - _2344;
                                float _3160 = _3026.y - _2345;
                                float _3161 = _3026.z - _2346;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3027 * _3027));
                                float _4266 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3177 = sqrt(_3162) * _3042.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_615, _618, _621))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2346, _3069.z, fma(_2345, _3069.y, _3069.x * _2344)) + _3069.w) / _3131;
                                float _3191 = (fma(_2346, _3085.z, fma(_2345, _3085.y, _3085.x * _2344)) + _3085.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4282 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _675;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2638;
                                float _3221 = _3167 - _2639;
                                float _3222 = _3168 - _2640;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_615, _618, _621), vec3((-0.0) - _2638, (-0.0) - _2639, (-0.0) - _2640));
                                float _4293 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3234 = dot(vec3(_615, _618, _621), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4304 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_615, _618, _621), vec3(_3166, _3167, _3168))) + _3243;
                                float _4315 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4326 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3197 * _3042.y;
                                frontier_phi_83_pred_1 = _3197 * _3042.x;
                                frontier_phi_83_pred_2 = _3271 * _3054.z;
                                frontier_phi_83_pred_3 = _3271 * _3054.y;
                                frontier_phi_83_pred_4 = _3271 * _3054.x;
                                frontier_phi_83_pred_5 = _3197 * _3042.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_83_pred;
                            _3278 = frontier_phi_83_pred_1;
                            _3277 = frontier_phi_83_pred_2;
                            _3276 = frontier_phi_83_pred_3;
                            _3275 = frontier_phi_83_pred_4;
                            _3280 = frontier_phi_83_pred_5;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            _2981 = _3275 + _2994;
                            _2982 = _3276 + _2995;
                            _2983 = _3277 + _2996;
                            if (_3001 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _3001;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2986;
                        frontier_phi_77_pred_1 = _2985;
                        frontier_phi_77_pred_2 = _2984;
                        frontier_phi_77_pred_3 = _2983;
                        frontier_phi_77_pred_4 = _2982;
                        frontier_phi_77_pred_5 = _2981;
                    }
                    _2623 = frontier_phi_77_pred;
                    _2621 = frontier_phi_77_pred_1;
                    _2619 = frontier_phi_77_pred_2;
                    _2617 = frontier_phi_77_pred_3;
                    _2615 = frontier_phi_77_pred_4;
                    _2613 = frontier_phi_77_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2613;
                        _2773 = _2615;
                        _2774 = _2617;
                        _2775 = _2619;
                        _2776 = _2621;
                        _2777 = _2623;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2617;
                frontier_phi_58_59_ladder_1 = _2623;
                frontier_phi_58_59_ladder_2 = _2621;
                frontier_phi_58_59_ladder_3 = _2619;
                frontier_phi_58_59_ladder_4 = _2615;
                frontier_phi_58_59_ladder_5 = _2613;
            }
            else
            {
                frontier_phi_58_59_ladder = _2495;
                frontier_phi_58_59_ladder_1 = _2501;
                frontier_phi_58_59_ladder_2 = _2499;
                frontier_phi_58_59_ladder_3 = _2497;
                frontier_phi_58_59_ladder_4 = _2493;
                frontier_phi_58_59_ladder_5 = _2491;
            }
            _2612 = frontier_phi_58_59_ladder_5;
            _2614 = frontier_phi_58_59_ladder_4;
            _2616 = frontier_phi_58_59_ladder;
            _2618 = frontier_phi_58_59_ladder_3;
            _2620 = frontier_phi_58_59_ladder_2;
            _2622 = frontier_phi_58_59_ladder_1;
        }
        float _2627 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
        _2403 = (_2627 * _2618) + _1858;
        _2405 = (_2627 * _2620) + _1860;
        _2407 = (_2627 * _2622) + _1862;
        _2409 = ((_2612 * 0.039999999105930328369140625) * _2627) + _2188;
        _2411 = ((_2614 * 0.039999999105930328369140625) * _2627) + _2190;
        _2413 = ((_2616 * 0.039999999105930328369140625) * _2627) + _2192;
    }
    else
    {
        _2403 = _1858;
        _2405 = _1860;
        _2407 = _1862;
        _2409 = _2188;
        _2411 = _2190;
        _2413 = _2192;
    }
    float _4342 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4353 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4364 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _2430 = ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2403 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _659))) + ((_2409 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2431 = ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2405 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _659))) + ((_2411 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2432 = ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2407 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _659))) + ((_2413 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    uint _2433 = _228 + 6u;
    float _2441 = _596 / cbSceneParam._m0[86u].x;
    float _2442 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2456 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2441, _2442, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2458 = _2456.x;
    float _2459 = _2456.y;
    float _2460 = _2456.z;
    float _2461 = _2456.w;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2516 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2517 = _2516 / _517;
        float _2528 = _2517 * _569;
        float _2529 = _570 * _2517;
        float _2530 = (-0.0) - _2529;
        float _2532 = _2517 * _571;
        float _2534 = (cbSceneParam._m0[77u].w * _2530) / _2516;
        float _2535 = _2534 + cbSceneParam._m0[79u].w;
        float _2536 = cbSceneParam._m0[79u].w - _2529;
        float _2542 = sqrt(((_2528 * _2528) + (_2529 * _2529)) + (_2532 * _2532));
        float _2545 = (1.0 - (cbSceneParam._m0[77u].w / _2516)) * _2542;
        float _2550 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2552 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2729;
        if (abs((_2530 - _2534) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2729 = ((((_2535 > 0.0) ? exp2(_2550 * _2535) : (2.0 - exp2(_2552 * _2535))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2545;
        }
        else
        {
            float _2673 = 1.0 / cbSceneParam._m0[80u].x;
            float _2674 = isnan(_2536) ? _2535 : (isnan(_2535) ? _2536 : max(_2535, _2536));
            float _2675 = isnan(_2536) ? _2535 : (isnan(_2535) ? _2536 : min(_2535, _2536));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            float _2685 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : min(_2675, 0.0));
            _2729 = ((abs(_2542 / _2530) * cbSceneParam._m0[80u].y) * ((((_2684 - _2685) * 2.0) - ((exp2(_2550 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0)))) - exp2(_2550 * (isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))))) * _2673)) - ((exp2(_2552 * _2684) - exp2(_2552 * _2685)) * _2673))) + (_2545 * cbSceneParam._m0[80u].z);
        }
        vec4 _2731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2441, _2442, 1.0), 0.0);
        float _2740 = exp2((_2729 * (-1.44269502162933349609375)) * (1.0 - _2731.w));
        float _2741 = log2(_2740);
        float _2757 = log2(_2461);
        _2554 = (exp2(_2757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].x)) * _2731.x) / cbSceneParam._m0[78u].x)) + _2458;
        _2556 = (exp2(_2757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].y)) * _2731.y) / cbSceneParam._m0[78u].y)) + _2459;
        _2558 = (exp2(_2757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].z)) * _2731.z) / cbSceneParam._m0[78u].z)) + _2460;
        _2560 = _2740 * _2461;
    }
    else
    {
        _2554 = _2458;
        _2556 = _2459;
        _2558 = _2460;
        _2560 = _2461;
    }
    bool _2767;
    vec4 _2570;
    vec4 _2592;
    float _2594;
    float _2598;
    float _2599;
    float _2600;
    float _2601;
    bool _2611;
    for (;;)
    {
        _2570 = cbMatDynParam._m0[0u];
        float _2572 = roundEven(_2570.y);
        bool _2573 = _2572 == 3.0;
        float _2574 = log2(_2560);
        float _2581 = exp2(_2574 * cbSceneParam._m0[78u].x) * _2430;
        float _2582 = exp2(_2574 * cbSceneParam._m0[78u].y) * _2431;
        float _2583 = exp2(_2574 * cbSceneParam._m0[78u].z) * _2432;
        float _2590 = _585 + (-0.5);
        _2592 = cbMtdParam._m0[1u];
        _2594 = _2592.y * _2590;
        float _2597 = (_2572 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2598 = _2597 * (_2573 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2554)));
        _2599 = _2597 * (_2573 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2556)));
        _2600 = _2597 * (_2573 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2558)));
        _2601 = _2590 * 0.999000012874603271484375;
        _2611 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2611)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2601) < 0.5)
            {
                _2767 = true;
                break;
            }
        }
        uint _2708 = _634 + uint(_2570.w);
        if ((cbInstanceData._m0[_2708].w < 1.0) && ((cbInstanceData._m0[_2708].w + _2601) < 0.5))
        {
            _2767 = true;
            break;
        }
        if ((_2594 + 1.0) < _2592.x)
        {
            _2767 = true;
            break;
        }
        _2767 = false;
        break;
    }
    float _2972;
    if (_2767)
    {
        discard_state = true;
        _2972 = 0.0;
    }
    else
    {
        _2972 = cbInstanceData._m0[_2433].w;
    }
    SV_Target.x = _2598;
    SV_Target.y = _2599;
    SV_Target.z = _2600;
    SV_Target.w = _2972;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2433].w;
    discard_exit();
}


