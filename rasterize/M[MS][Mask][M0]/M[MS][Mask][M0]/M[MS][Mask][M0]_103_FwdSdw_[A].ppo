#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1364;
float _4006;
float _4007;
float _4008;
float _4009;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4018 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4029 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4040 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4051 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _455 = (_448 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _456 = (_448 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _457 = (_448 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4062 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _567 = _565.x;
    float _577 = dot(vec4(_567, _565.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _589 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _378.z) * 2.0) - ((((_567 - _577) * cbMtdParam._m0[24u].z) + _577) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4073 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _597 = (_590 * ((_548.x * cbMtdParam._m0[14u].x) - _528)) + _528;
    float _598 = (_590 * ((_548.y * cbMtdParam._m0[14u].y) - _529)) + _529;
    float _599 = (_590 * ((_548.z * cbMtdParam._m0[14u].z) - _530)) + _530;
    float _603 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _597;
    float _606 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _598;
    float _609 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _599;
    float _616 = ((_597 - _603) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _603;
    float _617 = ((_598 - _606) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _606;
    float _618 = ((_599 - _609) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _609;
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _672 = _670.x;
    float _673 = _670.y;
    float _674 = _670.z;
    float _681 = ((_653.x - _672) * _448) + _672;
    float _682 = ((_653.y - _673) * _448) + _673;
    float _683 = ((_653.z - _674) * _448) + _674;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _706 = ((_695.x - _681) * _521) + _681;
    float _707 = ((_695.y - _682) * _521) + _682;
    float _708 = ((_695.z - _683) * _521) + _683;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _733 = ((_720.z - _708) * _590) + _708;
    float _736 = ((((_720.x - _706) * _590) + _706) * 2.0) + (-1.0);
    float _737 = ((((_720.y - _707) * _590) + _707) * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _4084 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _775 = (_736 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_630.x * 2.0) + (-1.0)))) + (((_763.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _776 = (_737 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_630.y * 2.0) + (-1.0)))) + (((_763.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _781 = (((_630.z - _733) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _733;
    float _785 = ((_763.z - _781) * cbMtdParam._m0[19u].w) + _781;
    float _787 = cbMtdParam._m0[22u].x + _763.w;
    float _790 = fma(_743, _242 * NORMAL.x, fma(_776, _249 * TANGENT.x, (_235 * _227) * _775));
    float _793 = fma(_743, _242 * NORMAL.y, fma(_776, _249 * TANGENT.y, (_235 * _228) * _775));
    float _796 = fma(_743, _242 * NORMAL.z, fma(_776, _249 * TANGENT.z, (_235 * _229) * _775));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _4095 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _804 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4117 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4128 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4139 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    vec4 _888 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _890 = _888.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1044 = sqrt(((_874 * _874) + (_875 * _875)) + (_876 * _876));
        float _1050 = (cbMatDynParam._m0[5u].x * _1044) + cbMatDynParam._m0[5u].y;
        float _4150 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1055 = (cbMatDynParam._m0[5u].z * _1044) + cbMatDynParam._m0[5u].w;
        float _4161 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) - _1051)) + _1051) < ((_890 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _923 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _926 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _939 = _276 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_940].z;
    float _4172 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _964 = ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * TEXCOORD_5.w) * _960.x;
    float _965 = dot(vec3(_801, _802, _803), vec3(_881, _882, _883));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _801) - _881;
    float _973 = (_968 * _802) - _882;
    float _974 = (_968 * _803) - _883;
    float _978 = abs(dot(vec3(_881, _882, _883), vec3(_801, _802, _803)));
    float _4205 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_804);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1088 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1092 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1096 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1121 = _1025 + _801;
        float _1122 = _1029 + _802;
        float _1123 = _1033 + _803;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1088;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1092;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1096;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1088 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1092 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1096 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_801, _802, _803), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4253 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_801, _802, _803), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4286 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_801, _802, _803), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4319 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1408 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1412 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1435 = _1025 + _801;
        float _1436 = _1029 + _802;
        float _1437 = _1033 + _803;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_801, _802, _803), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4382 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_801, _802, _803), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4415 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_801, _802, _803), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4448 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1364;
        _1674 = _1364;
        _1675 = _1364;
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = _1364;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1376)) + _1376;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1377)) + _1377;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1378)) + _1378;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _972 * 0.5;
    float _1742 = _973 * 0.5;
    float _1743 = _974 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1872 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1875 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1903 = frontier_phi_17_15_ladder;
        }
        float _2074;
        if (_1872 > 0.0)
        {
            _2074 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2074 = frontier_phi_26_22_ladder;
        }
        float _2369;
        if (_1875 > 0.0)
        {
            _2369 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2369 = frontier_phi_38_33_ladder;
        }
        float _2371 = isnan(_2074) ? _1903 : (isnan(_1903) ? _2074 : min(_1903, _2074));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1869) + _1858;
        float _2377 = (_2372 * _1872) + _1862;
        float _2378 = (_2372 * _1875) + _1866;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_16_38_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_16_38_ladder_2;
        _1893 = frontier_phi_16_38_ladder_1;
        _1895 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1955 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1959 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1963 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1966 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1969 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1972 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2079;
        if (_1966 > 0.0)
        {
            _2079 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2079 = frontier_phi_28_24_ladder;
        }
        float _2396;
        if (_1969 > 0.0)
        {
            _2396 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2396 = frontier_phi_40_35_ladder;
        }
        float _2723;
        if (_1972 > 0.0)
        {
            _2723 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2723 = frontier_phi_50_47_ladder;
        }
        float _2725 = isnan(_2396) ? _2079 : (isnan(_2079) ? _2396 : min(_2079, _2396));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1966) + _1955;
        float _2731 = (_2726 * _1969) + _1959;
        float _2732 = (_2726 * _1972) + _1963;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_25_50_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _1991 = frontier_phi_25_50_ladder_2;
        _1993 = frontier_phi_25_50_ladder_1;
        _1995 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1900);
        _1991 = _1975.x * cbModelParam._m0[1u].z;
        _1993 = _1975.y * cbModelParam._m0[1u].z;
        _1995 = _1975.z * cbModelParam._m0[1u].z;
    }
    float _2007 = ((((1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_993 * _980)) * _964;
    float _2008 = _2007 * ((cbModelParam._m0[1u].w * (_1991 - _1891)) + _1891);
    float _2009 = _2007 * ((cbModelParam._m0[1u].w * (_1993 - _1893)) + _1893);
    float _2010 = _2007 * ((cbModelParam._m0[1u].w * (_1995 - _1895)) + _1895);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, _2008 * cbSceneParam._m0[91u].x));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2066 = _2053 / _2065;
    float _2067 = _2057 / _2065;
    float _2068 = _2061 / _2065;
    float _2215;
    float _2216;
    float _2217;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2095 = ((uint(_2068 > cbSceneParam._m0[59u].y) + uint(_2068 > cbSceneParam._m0[59u].x)) + uint(_2068 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2096 = _2095 + 43u;
        uint _2104 = _2095 + 44u;
        uint _2112 = _2095 + 45u;
        uint _2120 = _2095 + 46u;
        float _2131 = fma(_2065, cbSceneParam._m0[_2096].w, fma(_2061, cbSceneParam._m0[_2096].z, fma(_2057, cbSceneParam._m0[_2096].y, _2053 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2065, cbSceneParam._m0[_2104].w, fma(_2061, cbSceneParam._m0[_2104].z, fma(_2057, cbSceneParam._m0[_2104].y, _2053 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2065, cbSceneParam._m0[_2120].w, fma(_2061, cbSceneParam._m0[_2120].z, fma(_2057, cbSceneParam._m0[_2120].y, _2053 * cbSceneParam._m0[_2120].x)));
        float _2148 = cbSceneParam._m0[33u].z * _2143;
        float _2150 = cbSceneParam._m0[33u].w * _2143;
        float _2153 = fma(_2065, cbSceneParam._m0[_2112].w, fma(_2061, cbSceneParam._m0[_2112].z, fma(_2057, cbSceneParam._m0[_2112].y, _2053 * cbSceneParam._m0[_2112].x))) / _2143;
        float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
        float _4574 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2208 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2131) / _2143, (_2150 + _2135) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2131) / _2143, (_2135 - _2148) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2148) / _2143, (_2135 - _2150) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2150) / _2143, (_2148 + _2135) / _2143), _2153), 0.0)).x), vec4(0.25)));
        _2215 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
        _2216 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
        _2217 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2215 = 1.0;
        _2216 = 1.0;
        _2217 = 1.0;
    }
    float _2281;
    float _2283;
    float _2285;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2269 = fma(_2065, cbSceneParam._m0[63u].w, fma(_2061, cbSceneParam._m0[63u].z, fma(_2057, cbSceneParam._m0[63u].y, _2053 * cbSceneParam._m0[63u].x)));
        float _2270 = fma(_2065, cbSceneParam._m0[60u].w, fma(_2061, cbSceneParam._m0[60u].z, fma(_2057, cbSceneParam._m0[60u].y, _2053 * cbSceneParam._m0[60u].x))) / _2269;
        float _2271 = fma(_2065, cbSceneParam._m0[61u].w, fma(_2061, cbSceneParam._m0[61u].z, fma(_2057, cbSceneParam._m0[61u].y, _2053 * cbSceneParam._m0[61u].x))) / _2269;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2270 >= cbSceneParam._m0[64u].x) && (_2271 >= cbSceneParam._m0[64u].y)) && (_2270 <= cbSceneParam._m0[64u].z)) && (_2271 <= cbSceneParam._m0[64u].w))
        {
            float _2409 = fma(_2065, cbSceneParam._m0[62u].w, fma(_2061, cbSceneParam._m0[62u].z, fma(_2057, cbSceneParam._m0[62u].y, _2053 * cbSceneParam._m0[62u].x))) / _2269;
            float _2413 = isnan(cbSceneParam._m0[41u].w) ? _2409 : (isnan(_2409) ? cbSceneParam._m0[41u].w : max(_2409, cbSceneParam._m0[41u].w));
            float _2456 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
            float _4590 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
            float _2463 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2270, cbSceneParam._m0[33u].w + _2271), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2270, _2271 - cbSceneParam._m0[33u].z), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].z, _2271 - cbSceneParam._m0[33u].w), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2271), _2413), 0.0)).x), vec4(0.25)));
            float _2467 = 1.0 - (_2463 * cbSceneParam._m0[34u].x);
            float _2468 = 1.0 - (_2463 * cbSceneParam._m0[34u].y);
            float _2469 = 1.0 - (_2463 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_37_36_ladder_1 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_37_36_ladder_2 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
        }
        else
        {
            frontier_phi_37_36_ladder = _2217;
            frontier_phi_37_36_ladder_1 = _2216;
            frontier_phi_37_36_ladder_2 = _2215;
        }
        _2281 = frontier_phi_37_36_ladder_2;
        _2283 = frontier_phi_37_36_ladder_1;
        _2285 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2281 = _2215;
        _2283 = _2216;
        _2285 = _2217;
    }
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _964 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2328 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2332 = _2292 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_801, _802, _803));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_801, _802, _803));
    float _4626 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4637 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2309].x * _2315) * _2353) + (((cbLight._m0[_2319].x * _2281) * _2328) * _2351);
    float _2361 = ((_2315 * cbLight._m0[_2309].y) * _2353) + (((cbLight._m0[_2319].y * _2283) * _2328) * _2351);
    float _2362 = ((_2315 * cbLight._m0[_2309].z) * _2353) + (((cbLight._m0[_2319].z * _2285) * _2328) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2368)
    {
        _2470 = _2360;
        _2472 = _2361;
        _2474 = _2362;
    }
    else
    {
        uint _2478 = _2292 + 6u;
        float _2494 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4648 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2497 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2470 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2360;
        _2472 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2361;
        _2474 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2362;
    }
    bool _2477 = _2366.y == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2477)
    {
        _2532 = _2470;
        _2534 = _2472;
        _2536 = _2474;
    }
    else
    {
        uint _2694 = _2292 + 7u;
        float _2710 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2711 = _2710 * _2710;
        float _4664 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2712 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2713 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2532 = (((cbLight._m0[_2694].x * 0.3183098733425140380859375) * _2712) * _2713) + _2470;
        _2534 = (((cbLight._m0[_2694].y * 0.3183098733425140380859375) * _2712) * _2713) + _2472;
        _2536 = (((cbLight._m0[_2694].z * 0.3183098733425140380859375) * _2712) * _2713) + _2474;
    }
    uint _2539 = _2292 + 8u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _804) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2292].x + _881;
    float _2555 = cbLight._m0[_2292].y + _882;
    float _2556 = cbLight._m0[_2292].z + _883;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2292].xyz));
    float _4680 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _4691 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2568 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2569 = dot(vec3(_801, _802, _803), vec3(_2561, _2562, _2563));
    float _4702 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2561, _2562, _2563));
    float _4713 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2553 * _2553;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2593 = 1.0 - _2553;
    float _2604 = (0.5 / (((_2568 * ((_2567 * _2593) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2593) + _2553) * _2567))) * _2567;
    float _4724 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    uint _2620 = _2292 + 9u;
    float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _804) * 0.949999988079071044921875);
    float _2632 = _2631 * _2631;
    float _2633 = cbLight._m0[_2332].x + _881;
    float _2634 = cbLight._m0[_2332].y + _882;
    float _2635 = cbLight._m0[_2332].z + _883;
    float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
    float _2640 = _2639 * _2633;
    float _2641 = _2639 * _2634;
    float _2642 = _2639 * _2635;
    float _2643 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2332].xyz));
    float _4735 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2647 = dot(vec3(_801, _802, _803), vec3(_2640, _2641, _2642));
    float _4746 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2651 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2640, _2641, _2642));
    float _4757 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2655 = _2632 * _2632;
    float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
    float _2668 = (exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2669 = 1.0 - _2632;
    float _2679 = (0.5 / (((_2568 * ((_2646 * _2669) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2669) + _2632) * _2646))) * _2646;
    float _4768 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
    float _2691 = (((_2668 * cbLight._m0[_2620].x) * _2681) * _2315) + ((((cbLight._m0[_2539].x * _2281) * _2592) * _2606) * _2328);
    float _2692 = (((_2668 * cbLight._m0[_2620].y) * _2681) * _2315) + ((((cbLight._m0[_2539].y * _2283) * _2592) * _2606) * _2328);
    float _2693 = (((_2668 * cbLight._m0[_2620].z) * _2681) * _2315) + ((((cbLight._m0[_2539].z * _2285) * _2592) * _2606) * _2328);
    float _2749;
    float _2751;
    float _2753;
    if (_2368)
    {
        _2749 = _2691;
        _2751 = _2692;
        _2753 = _2693;
    }
    else
    {
        uint _2755 = _2292 + 2u;
        uint _2759 = _2292 + 10u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _804) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _881;
        float _2776 = cbLight._m0[_2755].y + _882;
        float _2777 = cbLight._m0[_2755].z + _883;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2755].xyz));
        float _4779 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2789 = dot(vec3(_801, _802, _803), vec3(_2782, _2783, _2784));
        float _4790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4801 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2810 = (exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2811 = 1.0 - _2774;
        float _2821 = (0.5 / (((_2568 * ((_2788 * _2811) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2811) + _2774) * _2788))) * _2788;
        float _4812 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2749 = (((_2810 * cbLight._m0[_2759].x) * _2823) * _2824) + _2691;
        _2751 = (((_2810 * cbLight._m0[_2759].y) * _2823) * _2824) + _2692;
        _2753 = (((_2810 * cbLight._m0[_2759].z) * _2823) * _2824) + _2693;
    }
    float _2855;
    float _2857;
    float _2859;
    if (_2477)
    {
        _2855 = _2749;
        _2857 = _2751;
        _2859 = _2753;
    }
    else
    {
        uint _2866 = _2292 + 3u;
        uint _2870 = _2292 + 11u;
        float _2884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2866].w)) * _804) * 0.949999988079071044921875);
        float _2885 = _2884 * _2884;
        float _2886 = cbLight._m0[_2866].x + _881;
        float _2887 = cbLight._m0[_2866].y + _882;
        float _2888 = cbLight._m0[_2866].z + _883;
        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
        float _2893 = _2892 * _2886;
        float _2894 = _2892 * _2887;
        float _2895 = _2892 * _2888;
        float _2896 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2866].xyz));
        float _4828 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2900 = dot(vec3(_801, _802, _803), vec3(_2893, _2894, _2895));
        float _4839 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2904 = dot(vec3(cbLight._m0[_2866].xyz), vec3(_2893, _2894, _2895));
        float _4850 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2908 = _2885 * _2885;
        float _2912 = ((_2903 * _2903) * (_2908 + (-1.0))) + 1.0;
        float _2921 = (exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2922 = 1.0 - _2885;
        float _2932 = (0.5 / (((_2568 * ((_2899 * _2922) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2922) + _2885) * _2899))) * _2899;
        float _4861 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2934 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2908 / ((_2912 * _2912) * 3.141590118408203125));
        float _2935 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2855 = (((_2921 * cbLight._m0[_2870].x) * _2934) * _2935) + _2749;
        _2857 = (((_2921 * cbLight._m0[_2870].y) * _2934) * _2935) + _2751;
        _2859 = (((_2921 * cbLight._m0[_2870].z) * _2934) * _2935) + _2753;
    }
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_2290.y == 0u)
    {
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.x;
        uint _2968 = uint((float(_2956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2957))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2957)));
        float _2978 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2979 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        uint _2982 = uint(isnan(14.0) ? _2979 : (isnan(_2979) ? 14.0 : min(_2979, 14.0)));
        uvec4 _2987 = texelFetch(g_lightClusterGridBuffer, int(((_2982 << 2u) + (_2968 << 6u)) >> 2u));
        uint _2988 = _2987.x;
        uint _2989 = _2956.z;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((((1u << ((_2989 >> 4u) & 15u)) + 4294967295u) & _2988) == 0u) || ((_2989 & 240u) == 0u))
        {
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
        }
        else
        {
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            uint _3227 = 0u;
            uint _3236;
            bool _3237;
            for (;;)
            {
                _3236 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                _3237 = _3236 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3237)
                {
                    frontier_phi_71_pred = _3226;
                    frontier_phi_71_pred_1 = _3225;
                    frontier_phi_71_pred_2 = _3224;
                    frontier_phi_71_pred_3 = _3223;
                    frontier_phi_71_pred_4 = _3222;
                    frontier_phi_71_pred_5 = _3221;
                }
                else
                {
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    uint _3372;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3236;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    for (;;)
                    {
                        uint _3376 = uint(findLSB(_3372)) + (_3227 << 5u);
                        uint _3373 = (_3372 + 4294967295u) & _3372;
                        uint _3378 = _3376 * 48u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3398 = (_3376 * 48u) + 4u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3417 = (_3376 * 48u) + 8u;
                        vec3 _3428 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x));
                        float _3432 = _3392.x - _2066;
                        float _3433 = _3392.y - _2067;
                        float _3434 = _3392.z - _2068;
                        float _3435 = dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434));
                        float _3438 = inversesqrt(_3435);
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3442 = dot(vec3(_920, _923, _926), vec3(_3439, _3440, _3441));
                        float _3447 = 1.0 - (_3435 * _3392.w);
                        float _4887 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3449 = sqrt(_3435) * _3411.w;
                        float _3452 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3442) + _3453;
                        float _3459 = _3449 * _3449;
                        float _3463 = ((isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0))) * _3448) / ((_3459 * 0.699999988079071044921875) + 1.0);
                        float _3467 = (-0.0) - _2066;
                        float _3468 = (-0.0) - _2067;
                        float _3469 = (-0.0) - _2068;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3483 = exp2(log2(1.0 / ((_3459 * 3.5) + 5.0)) * 0.25);
                        float _3484 = 1.0 - _980;
                        float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                        float _3492 = _3491 * _3491;
                        float _3493 = _3492 * _3492;
                        float _3494 = _3474 + _3439;
                        float _3495 = _3475 + _3440;
                        float _3496 = _3476 + _3441;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3504 = dot(vec3(_920, _923, _926), vec3(_3474, _3475, _3476));
                        float _4903 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3507 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3508 = dot(vec3(_920, _923, _926), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                        float _4914 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                        float _3516 = _3452 * _3492;
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3442) + _3517;
                        float _4925 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3521 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3522 = 1.0 - _3492;
                        float _3532 = (0.5 / (((_3521 * ((_3507 * _3522) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3492) * _3507))) * _3521;
                        float _4936 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3543 = (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3515 * _3515) * ((_3459 * 2.1991131305694580078125) + 3.141590118408203125))) * _3448;
                        _3296 = (_3463 * _3411.x) + _3369;
                        _3297 = (_3463 * _3411.y) + _3370;
                        _3298 = (_3463 * _3411.z) + _3371;
                        _3293 = (_3543 * _3428.x) + _3366;
                        _3294 = (_3543 * _3428.y) + _3367;
                        _3295 = (_3543 * _3428.z) + _3368;
                        if (_3373 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3373;
                        }
                    }
                    frontier_phi_71_pred = _3298;
                    frontier_phi_71_pred_1 = _3297;
                    frontier_phi_71_pred_2 = _3296;
                    frontier_phi_71_pred_3 = _3295;
                    frontier_phi_71_pred_4 = _3294;
                    frontier_phi_71_pred_5 = _3293;
                }
                _3079 = frontier_phi_71_pred;
                _3077 = frontier_phi_71_pred_1;
                _3075 = frontier_phi_71_pred_2;
                _3073 = frontier_phi_71_pred_3;
                _3071 = frontier_phi_71_pred_4;
                _3069 = frontier_phi_71_pred_5;
                uint _3228 = _3227 + 1u;
                if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3221 = _3069;
                    _3222 = _3071;
                    _3223 = _3073;
                    _3224 = _3075;
                    _3225 = _3077;
                    _3226 = _3079;
                    _3227 = _3228;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
        }
        uvec4 _3082 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3083 = _3082.z;
        uint _3085 = (_3083 >> 8u) & 15u;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((4294967295u << _3085) & _2988) == 0u)
        {
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
        }
        else
        {
            float _3214 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float _3215 = _3214 * _2066;
            float _3216 = _3214 * _2067;
            float _3217 = _3214 * _2068;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3085 < ((_3083 >> 12u) & 15u))
            {
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3349 = _3068;
                float _3350 = _3070;
                float _3351 = _3072;
                float _3352 = _3074;
                float _3353 = _3076;
                float _3354 = _3078;
                uint _3355 = _3085;
                uint _3364;
                bool _3365;
                for (;;)
                {
                    _3364 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3355 << 2u)) >> 2u)).x;
                    _3365 = _3364 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3365)
                    {
                        frontier_phi_82_pred = _3354;
                        frontier_phi_82_pred_1 = _3353;
                        frontier_phi_82_pred_2 = _3352;
                        frontier_phi_82_pred_3 = _3351;
                        frontier_phi_82_pred_4 = _3350;
                        frontier_phi_82_pred_5 = _3349;
                    }
                    else
                    {
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        uint _3576 = _3364;
                        uint _3577;
                        vec4 _3602;
                        float _3603;
                        vec4 _3618;
                        vec3 _3630;
                        vec4 _3645;
                        vec4 _3660;
                        float _3706;
                        bool _3707;
                        for (;;)
                        {
                            uint _3587 = ((_3355 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3576));
                            _3577 = (_3576 + 4294967295u) & _3576;
                            uint _3589 = _3587 * 40u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3603 = _3602.w;
                            uint _3605 = (_3587 * 40u) + 4u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3587 * 40u) + 8u;
                            _3630 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x));
                            uint _3632 = (_3587 * 40u) + 16u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3587 * 40u) + 20u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3587 * 40u) + 24u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3681 = (_3587 * 40u) + 28u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            _3706 = fma(_2068, _3694.z, fma(_2067, _3694.y, _3694.x * _2066)) + _3694.w;
                            _3707 = !((fma(_2068, _3675.z, fma(_2067, _3675.y, _3675.x * _2066)) + _3675.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3707)
                            {
                                float _3734 = _3602.x - _2066;
                                float _3735 = _3602.y - _2067;
                                float _3736 = _3602.z - _2068;
                                float _3737 = dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736));
                                float _3740 = inversesqrt(_3737);
                                float _3741 = _3740 * _3734;
                                float _3742 = _3740 * _3735;
                                float _3743 = _3740 * _3736;
                                float _3747 = 1.0 - (_3737 / (_3603 * _3603));
                                float _4947 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3752 = sqrt(_3737) * _3618.w;
                                float _3754 = 1.39999997615814208984375 / (_3752 + 1.39999997615814208984375);
                                float _3755 = _3754 * _3754;
                                float _3758 = ((1.0 - _3755) * dot(vec3(_3741, _3742, _3743), vec3(_920, _923, _926))) + _3755;
                                float _3761 = _3752 * _3752;
                                float _3765 = (fma(_2068, _3645.z, fma(_2067, _3645.y, _3645.x * _2066)) + _3645.w) / _3706;
                                float _3766 = (fma(_2068, _3660.z, fma(_2067, _3660.y, _3660.x * _2066)) + _3660.w) / _3706;
                                float _3770 = 1.0 - dot(vec2(_3765, _3766), vec2(_3765, _3766));
                                float _4963 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3772 = _3771 * (((isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0))) * _3748) / ((_3761 * 0.699999988079071044921875) + 1.0));
                                float _3784 = exp2(log2(1.0 / ((_3761 * 3.5) + 5.0)) * 0.25);
                                float _3785 = 1.0 - _980;
                                float _3792 = sqrt(1.0 - ((1.0 - (_3785 * _3785)) * (1.0 - (_3784 * _3784))));
                                float _3793 = _3792 * _3792;
                                float _3794 = _3793 * _3793;
                                float _3795 = _3741 - _3215;
                                float _3796 = _3742 - _3216;
                                float _3797 = _3743 - _3217;
                                float _3801 = inversesqrt(dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797)));
                                float _3805 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3215, (-0.0) - _3216, (-0.0) - _3217));
                                float _4974 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3809 = dot(vec3(_920, _923, _926), vec3(_3801 * _3795, _3801 * _3796, _3801 * _3797));
                                float _4985 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3812 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3816 = ((_3812 * _3812) * (_3794 + (-1.0))) + 1.0;
                                float _3817 = _3754 * _3793;
                                float _3818 = _3817 * _3817;
                                float _3824 = ((1.0 - _3818) * dot(vec3(_920, _923, _926), vec3(_3741, _3742, _3743))) + _3818;
                                float _4996 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3826 = 1.0 - _3793;
                                float _3836 = (0.5 / (((_3825 * ((_3808 * _3826) + _3793)) + 9.9999999392252902907785028219223e-09) + (((_3825 * _3826) + _3793) * _3808))) * _3825;
                                float _5007 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3846 = (_3771 * _3748) * (((_3794 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3816 * _3816) * ((_3761 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3772 * _3618.z;
                                frontier_phi_88_pred_1 = _3772 * _3618.y;
                                frontier_phi_88_pred_2 = _3772 * _3618.x;
                                frontier_phi_88_pred_3 = _3846 * _3630.z;
                                frontier_phi_88_pred_4 = _3846 * _3630.y;
                                frontier_phi_88_pred_5 = _3846 * _3630.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3855 = frontier_phi_88_pred;
                            _3854 = frontier_phi_88_pred_1;
                            _3853 = frontier_phi_88_pred_2;
                            _3852 = frontier_phi_88_pred_3;
                            _3851 = frontier_phi_88_pred_4;
                            _3850 = frontier_phi_88_pred_5;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            if (_3577 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3577;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3562;
                        frontier_phi_82_pred_1 = _3561;
                        frontier_phi_82_pred_2 = _3560;
                        frontier_phi_82_pred_3 = _3559;
                        frontier_phi_82_pred_4 = _3558;
                        frontier_phi_82_pred_5 = _3557;
                    }
                    _3200 = frontier_phi_82_pred;
                    _3198 = frontier_phi_82_pred_1;
                    _3196 = frontier_phi_82_pred_2;
                    _3194 = frontier_phi_82_pred_3;
                    _3192 = frontier_phi_82_pred_4;
                    _3190 = frontier_phi_82_pred_5;
                    uint _3356 = _3355 + 1u;
                    if (_3356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3349 = _3190;
                        _3350 = _3192;
                        _3351 = _3194;
                        _3352 = _3196;
                        _3353 = _3198;
                        _3354 = _3200;
                        _3355 = _3356;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3196;
                frontier_phi_63_64_ladder_1 = _3200;
                frontier_phi_63_64_ladder_2 = _3198;
                frontier_phi_63_64_ladder_3 = _3194;
                frontier_phi_63_64_ladder_4 = _3192;
                frontier_phi_63_64_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_63_64_ladder = _3074;
                frontier_phi_63_64_ladder_1 = _3078;
                frontier_phi_63_64_ladder_2 = _3076;
                frontier_phi_63_64_ladder_3 = _3072;
                frontier_phi_63_64_ladder_4 = _3070;
                frontier_phi_63_64_ladder_5 = _3068;
            }
            _3189 = frontier_phi_63_64_ladder_5;
            _3191 = frontier_phi_63_64_ladder_4;
            _3193 = frontier_phi_63_64_ladder_3;
            _3195 = frontier_phi_63_64_ladder;
            _3197 = frontier_phi_63_64_ladder_2;
            _3199 = frontier_phi_63_64_ladder_1;
        }
        float _3204 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _3001 = (_3204 * _3195) + _2532;
        _3003 = (_3204 * _3197) + _2534;
        _3005 = (_3204 * _3199) + _2536;
        _3007 = ((_3189 * 0.039999999105930328369140625) * _3204) + _2855;
        _3009 = ((_3191 * 0.039999999105930328369140625) * _3204) + _2857;
        _3011 = ((_3193 * 0.039999999105930328369140625) * _3204) + _2859;
    }
    else
    {
        _3001 = _2532;
        _3003 = _2534;
        _3005 = _2536;
        _3007 = _2855;
        _3009 = _2857;
        _3011 = _2859;
    }
    float _5023 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5034 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5045 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _3028 = ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_3001 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _964))) + ((_3007 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3029 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3003 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _964))) + ((_3009 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3030 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3005 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _964))) + ((_3011 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _3031 = _276 + 6u;
    float _3039 = _901 / cbSceneParam._m0[86u].x;
    float _3040 = _902 / cbSceneParam._m0[86u].y;
    vec4 _3054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3056 = _3054.x;
    float _3057 = _3054.y;
    float _3058 = _3054.z;
    float _3059 = _3054.w;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _3093 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _3094 = _3093 / _822;
        float _3105 = _3094 * _874;
        float _3106 = _875 * _3094;
        float _3107 = (-0.0) - _3106;
        float _3109 = _3094 * _876;
        float _3111 = (cbSceneParam._m0[77u].w * _3107) / _3093;
        float _3112 = _3111 + cbSceneParam._m0[79u].w;
        float _3113 = cbSceneParam._m0[79u].w - _3106;
        float _3119 = sqrt(((_3105 * _3105) + (_3106 * _3106)) + (_3109 * _3109));
        float _3122 = (1.0 - (cbSceneParam._m0[77u].w / _3093)) * _3119;
        float _3127 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3129 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3306;
        if (abs((_3107 - _3111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3306 = ((((_3112 > 0.0) ? exp2(_3127 * _3112) : (2.0 - exp2(_3129 * _3112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3122;
        }
        else
        {
            float _3250 = 1.0 / cbSceneParam._m0[80u].x;
            float _3251 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : max(_3112, _3113));
            float _3252 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : min(_3112, _3113));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            _3306 = ((abs(_3119 / _3107) * cbSceneParam._m0[80u].y) * ((((_3261 - _3262) * 2.0) - ((exp2(_3127 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)))) - exp2(_3127 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))))) * _3250)) - ((exp2(_3129 * _3261) - exp2(_3129 * _3262)) * _3250))) + (_3122 * cbSceneParam._m0[80u].z);
        }
        vec4 _3308 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, 1.0), 0.0);
        float _3317 = exp2((_3306 * (-1.44269502162933349609375)) * (1.0 - _3308.w));
        float _3318 = log2(_3317);
        float _3334 = log2(_3059);
        _3131 = (exp2(_3334 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].x)) * _3308.x) / cbSceneParam._m0[78u].x)) + _3056;
        _3133 = (exp2(_3334 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].y)) * _3308.y) / cbSceneParam._m0[78u].y)) + _3057;
        _3135 = (exp2(_3334 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].z)) * _3308.z) / cbSceneParam._m0[78u].z)) + _3058;
        _3137 = _3317 * _3059;
    }
    else
    {
        _3131 = _3056;
        _3133 = _3057;
        _3135 = _3058;
        _3137 = _3059;
    }
    bool _3344;
    vec4 _3147;
    vec4 _3169;
    float _3171;
    float _3175;
    float _3176;
    float _3177;
    float _3178;
    bool _3188;
    for (;;)
    {
        _3147 = cbMatDynParam._m0[0u];
        float _3149 = roundEven(_3147.y);
        bool _3150 = _3149 == 3.0;
        float _3151 = log2(_3137);
        float _3158 = exp2(_3151 * cbSceneParam._m0[78u].x) * _3028;
        float _3159 = exp2(_3151 * cbSceneParam._m0[78u].y) * _3029;
        float _3160 = exp2(_3151 * cbSceneParam._m0[78u].z) * _3030;
        float _3167 = _890 + (-0.5);
        _3169 = cbMtdParam._m0[1u];
        _3171 = _3169.y * _3167;
        float _3174 = (_3149 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3175 = _3174 * (_3150 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3131)));
        _3176 = _3174 * (_3150 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3133)));
        _3177 = _3174 * (_3150 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3135)));
        _3178 = _3167 * 0.999000012874603271484375;
        _3188 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3188)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3178) < 0.5)
            {
                _3344 = true;
                break;
            }
        }
        uint _3285 = _939 + uint(_3147.w);
        if ((cbInstanceData._m0[_3285].w < 1.0) && ((cbInstanceData._m0[_3285].w + _3178) < 0.5))
        {
            _3344 = true;
            break;
        }
        if ((_3171 + 1.0) < _3169.x)
        {
            _3344 = true;
            break;
        }
        _3344 = false;
        break;
    }
    float _3548;
    if (_3344)
    {
        discard_state = true;
        _3548 = 0.0;
    }
    else
    {
        _3548 = cbInstanceData._m0[_3031].w;
    }
    SV_Target.x = _3175;
    SV_Target.y = _3176;
    SV_Target.z = _3177;
    SV_Target.w = _3548;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3031].w;
    discard_exit();
}


