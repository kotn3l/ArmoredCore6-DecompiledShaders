#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1463;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3790 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3801 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3812 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3823 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _480 = (_473 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _481 = (_473 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _482 = (_473 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3834 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _553 = (_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480;
    float _554 = (_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481;
    float _555 = (_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[24u].z) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3845 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _625 = (_332.x * cbMtdParam._m0[9u].x) * ((_615 * ((_573.x * cbMtdParam._m0[14u].x) - _553)) + _553);
    float _626 = (_332.y * cbMtdParam._m0[9u].y) * ((_615 * ((_573.y * cbMtdParam._m0[14u].y) - _554)) + _554);
    float _627 = (_332.z * cbMtdParam._m0[9u].z) * ((_615 * ((_573.z * cbMtdParam._m0[14u].z) - _555)) + _555);
    float _631 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _625;
    float _634 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _626;
    float _637 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _627;
    float _645 = (((_625 - _631) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _631) * 4.55000019073486328125;
    float _647 = (((_626 - _634) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _634) * 4.55000019073486328125;
    float _649 = (((_627 - _637) * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) + _637) * 4.55000019073486328125;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    float _719 = ((_691.x - _710) * _473) + _710;
    float _720 = ((_691.y - _711) * _473) + _711;
    float _721 = ((_691.z - _712) * _473) + _712;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _744 = ((_733.x - _719) * _546) + _719;
    float _745 = ((_733.y - _720) * _546) + _720;
    float _746 = ((_733.z - _721) * _546) + _721;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _771 = ((_758.z - _746) * _615) + _746;
    float _774 = ((((_758.x - _744) * _615) + _744) * 2.0) + (-1.0);
    float _775 = ((((_758.y - _745) * _615) + _745) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3856 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _811 = (_774 + ((((_666.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_799.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _812 = (_775 + ((((_666.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_799.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _815 = fma(_781, _243, fma(_812, _250, _811 * _236));
    float _818 = fma(_781, _244, fma(_812, _251, _811 * _237));
    float _821 = fma(_781, _245, fma(_812, _252, _811 * _238));
    float _825 = inversesqrt(dot(vec3(_815, _818, _821), vec3(_815, _818, _821)));
    vec4 _852 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _854 = _852.x;
    float _855 = 1.0 - _854;
    float _861 = (cbMtdParam._m0[19u].x + dot(vec4(_825 * _815, _825 * _818, _825 * _821, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_854 - _855) * cbMtdParam._m0[24u].w) + _855) * cbMtdParam._m0[21u].z);
    float _3867 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _869 = (_862 * (cbMtdParam._m0[17u].x - _645)) + _645;
    float _870 = (_862 * (cbMtdParam._m0[17u].y - _647)) + _647;
    float _871 = (_862 * (cbMtdParam._m0[17u].z - _649)) + _649;
    float _876 = (((_666.z - _771) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _771;
    float _880 = ((_799.z - _876) * cbMtdParam._m0[19u].w) + _876;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _900 = (_893.x * 2.0) + (-1.0);
    float _901 = (_893.y * 2.0) + (-1.0);
    float _902 = dot(vec2(_900, _901), vec2(_900, _901));
    float _3878 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _910 = ((_893.z - _880) * _862) + _880;
    float _920 = ((sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) - _781) * _862) + _781;
    float _923 = (((_900 - _811) * _862) + _811) + (cbMtdParam._m0[21u].x * _811);
    float _924 = (((_901 - _812) * _862) + _812) + (cbMtdParam._m0[21u].x * _812);
    float _928 = cbMtdParam._m0[22u].x + _799.w;
    float _931 = fma(_920, _243, fma(_924, _250, _923 * _236));
    float _934 = fma(_920, _244, fma(_924, _251, _923 * _237));
    float _937 = fma(_920, _245, fma(_924, _252, _923 * _238));
    float _941 = inversesqrt(dot(vec3(_931, _934, _937), vec3(_931, _934, _937)));
    float _942 = _941 * _931;
    float _943 = _941 * _934;
    float _944 = _941 * _937;
    float _3889 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _945 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3911 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _3922 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _3933 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _963 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1014 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1004);
    float _1015 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1004);
    float _1016 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1004);
    float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
    float _1021 = _1014 * _1020;
    float _1022 = _1015 * _1020;
    float _1023 = _1016 * _1020;
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_944, cbSceneParam._m0[5u].z, fma(_943, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _942));
    float _1051 = fma(_944, cbSceneParam._m0[6u].z, fma(_943, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _942));
    float _1054 = fma(_944, cbSceneParam._m0[7u].z, fma(_943, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _942));
    uint _1068 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _3944 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    vec4 _1088 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1092 = ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * TEXCOORD_5.w) * _1088.x;
    float _1093 = dot(vec3(_942, _943, _944), vec3(_1021, _1022, _1023));
    float _1096 = _1093 * 2.0;
    float _1100 = (_1096 * _942) - _1021;
    float _1101 = (_1096 * _943) - _1022;
    float _1102 = (_1096 * _944) - _1023;
    float _1106 = abs(dot(vec3(_1021, _1022, _1023), vec3(_942, _943, _944)));
    float _3977 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1108 = sqrt(_945);
    float _1121 = exp2((_1108 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1108 * 3.0));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1161, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153));
        float _1191 = fma(_1161, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153));
        float _1195 = fma(_1161, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153));
        float _1220 = _1153 + _942;
        float _1221 = _1157 + _943;
        float _1222 = _1161 + _944;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_942, _943, _944), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4025 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_942, _943, _944), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4058 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_942, _943, _944), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4091 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1161, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153));
        float _1504 = fma(_1161, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153));
        float _1508 = fma(_1161, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153));
        float _1531 = _1153 + _942;
        float _1532 = _1157 + _943;
        float _1533 = _1161 + _944;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_942, _943, _944), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4154 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_942, _943, _944), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4187 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_942, _943, _944), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4220 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1463;
        _1770 = _1463;
        _1771 = _1463;
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1475)) + _1475;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1476)) + _1476;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1477)) + _1477;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1100 * 0.5;
    float _1838 = _1101 * 0.5;
    float _1839 = _1102 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _945);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1161, cbModelParam._m0[13u].z, fma(_1157, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1153)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1161, cbModelParam._m0[14u].z, fma(_1157, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1153)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1161, cbModelParam._m0[15u].z, fma(_1157, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1153)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1102, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100));
        float _1967 = fma(_1102, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100));
        float _1970 = fma(_1102, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1998 = frontier_phi_14_12_ladder;
        }
        float _2220;
        if (_1967 > 0.0)
        {
            _2220 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2220 = frontier_phi_23_19_ladder;
        }
        float _2466;
        if (_1970 > 0.0)
        {
            _2466 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2466 = frontier_phi_35_30_ladder;
        }
        float _2468 = isnan(_2220) ? _1998 : (isnan(_1998) ? _2220 : min(_1998, _2220));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1964) + _1953;
        float _2474 = (_2469 * _1967) + _1957;
        float _2475 = (_2469 * _1970) + _1961;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_13_35_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_13_35_ladder_2;
        _1988 = frontier_phi_13_35_ladder_1;
        _1990 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1100, _1101, _1102), _1906);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _945);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2049 = fma(_1161, cbModelParam._m0[21u].z, fma(_1157, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1153)) + cbModelParam._m0[21u].w;
        float _2053 = fma(_1161, cbModelParam._m0[22u].z, fma(_1157, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1153)) + cbModelParam._m0[22u].w;
        float _2057 = fma(_1161, cbModelParam._m0[23u].z, fma(_1157, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1153)) + cbModelParam._m0[23u].w;
        float _2060 = fma(_1102, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100));
        float _2063 = fma(_1102, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100));
        float _2066 = fma(_1102, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100));
        float _2225;
        if (_2060 > 0.0)
        {
            _2225 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2225 = frontier_phi_25_21_ladder;
        }
        float _2493;
        if (_2063 > 0.0)
        {
            _2493 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2493 = frontier_phi_37_32_ladder;
        }
        float _2698;
        if (_2066 > 0.0)
        {
            _2698 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2698 = frontier_phi_46_43_ladder;
        }
        float _2700 = isnan(_2493) ? _2225 : (isnan(_2225) ? _2493 : min(_2225, _2493));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _2060) + _2049;
        float _2706 = (_2701 * _2063) + _2053;
        float _2707 = (_2701 * _2066) + _2057;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_22_46_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2085 = frontier_phi_22_46_ladder_2;
        _2087 = frontier_phi_22_46_ladder_1;
        _2089 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1100, _1101, _1102), _1995);
        _2085 = _2069.x * cbModelParam._m0[1u].z;
        _2087 = _2069.y * cbModelParam._m0[1u].z;
        _2089 = _2069.z * cbModelParam._m0[1u].z;
    }
    float _2101 = ((((1.0 - _1121) * ((_1108 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1121 * _1108)) * _1092;
    float _2102 = _2101 * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2103 = _2101 * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2104 = _2101 * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2102 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2102 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2102 * cbSceneParam._m0[91u].x));
    vec4 _2121 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1029, _1030));
    float _2123 = _2121.w;
    float _2135 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2123);
    float _2136 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2123);
    float _2137 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2123);
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _1092 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2179 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2183 = _2143 | 1u;
    float _2194 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_942, _943, _944));
    float _2197 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_942, _943, _944));
    float _4356 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _4367 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2202 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2204 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2211 = ((cbLight._m0[_2160].x * _2166) * _2204) + (((cbLight._m0[_2170].x * _2135) * _2179) * _2202);
    float _2212 = ((_2166 * cbLight._m0[_2160].y) * _2204) + (((cbLight._m0[_2170].y * _2136) * _2179) * _2202);
    float _2213 = ((_2166 * cbLight._m0[_2160].z) * _2204) + (((cbLight._m0[_2170].z * _2137) * _2179) * _2202);
    uvec4 _2217 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2219 = _2217.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2219)
    {
        _2230 = _2211;
        _2232 = _2212;
        _2234 = _2213;
    }
    else
    {
        uint _2238 = _2143 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4378 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2257 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2211;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2212;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2213;
    }
    bool _2237 = _2217.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2237)
    {
        _2275 = _2230;
        _2277 = _2232;
        _2279 = _2234;
    }
    else
    {
        uint _2437 = _2143 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4394 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2456 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2275 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2230;
        _2277 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2232;
        _2279 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2234;
    }
    uint _2282 = _2143 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _945) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2143].x + _1021;
    float _2298 = cbLight._m0[_2143].y + _1022;
    float _2299 = cbLight._m0[_2143].z + _1023;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2143].xyz));
    float _4410 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2311 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2312 = dot(vec3(_942, _943, _944), vec3(_2304, _2305, _2306));
    float _4432 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2304, _2305, _2306));
    float _4443 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2311 * ((_2310 * _2336) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2336) + _2296) * _2310))) * _2310;
    float _4454 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2363 = _2143 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _945) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2183].x + _1021;
    float _2377 = cbLight._m0[_2183].y + _1022;
    float _2378 = cbLight._m0[_2183].z + _1023;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2183].xyz));
    float _4465 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2390 = dot(vec3(_942, _943, _944), vec3(_2383, _2384, _2385));
    float _4476 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2383, _2384, _2385));
    float _4487 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2375;
    float _2422 = (0.5 / (((_2311 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2412) + _2375) * _2389))) * _2389;
    float _4498 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2434 = (((_2411 * cbLight._m0[_2363].x) * _2424) * _2166) + ((((cbLight._m0[_2282].x * _2135) * _2335) * _2349) * _2179);
    float _2435 = (((_2411 * cbLight._m0[_2363].y) * _2424) * _2166) + ((((cbLight._m0[_2282].y * _2136) * _2335) * _2349) * _2179);
    float _2436 = (((_2411 * cbLight._m0[_2363].z) * _2424) * _2166) + ((((cbLight._m0[_2282].z * _2137) * _2335) * _2349) * _2179);
    float _2498;
    float _2500;
    float _2502;
    if (_2219)
    {
        _2498 = _2434;
        _2500 = _2435;
        _2502 = _2436;
    }
    else
    {
        uint _2504 = _2143 + 2u;
        uint _2508 = _2143 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _945) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _1021;
        float _2525 = cbLight._m0[_2504].y + _1022;
        float _2526 = cbLight._m0[_2504].z + _1023;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2504].xyz));
        float _4509 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2538 = dot(vec3(_942, _943, _944), vec3(_2531, _2532, _2533));
        float _4520 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4531 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2311 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2560) + _2523) * _2537))) * _2537;
        float _4542 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2498 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2434;
        _2500 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2435;
        _2502 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2436;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2237)
    {
        _2608 = _2498;
        _2610 = _2500;
        _2612 = _2502;
    }
    else
    {
        uint _2619 = _2143 + 3u;
        uint _2623 = _2143 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _945) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _1021;
        float _2640 = cbLight._m0[_2619].y + _1022;
        float _2641 = cbLight._m0[_2619].z + _1023;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2619].xyz));
        float _4558 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2653 = dot(vec3(_942, _943, _944), vec3(_2646, _2647, _2648));
        float _4569 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4580 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2674 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2675 = 1.0 - _2638;
        float _2685 = (0.5 / (((_2311 * ((_2652 * _2675) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2675) + _2638) * _2652))) * _2652;
        float _4591 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2608 = (((_2674 * cbLight._m0[_2623].x) * _2687) * _2688) + _2498;
        _2610 = (((_2674 * cbLight._m0[_2623].y) * _2687) * _2688) + _2500;
        _2612 = (((_2674 * cbLight._m0[_2623].z) * _2687) * _2688) + _2502;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2141.y == 0u)
    {
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2763;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2763;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2763;
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _2779)));
        float _2800 = (log2(_2766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3072)
                {
                    frontier_phi_61_pred = _3056;
                    frontier_phi_61_pred_1 = _3061;
                    frontier_phi_61_pred_2 = _3060;
                    frontier_phi_61_pred_3 = _3059;
                    frontier_phi_61_pred_4 = _3058;
                    frontier_phi_61_pred_5 = _3057;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3071;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3062 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2764;
                        float _3247 = _3206.y - _2765;
                        float _3248 = _3206.z - _2766;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_1048, _1051, _1054), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4617 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2764;
                        float _3282 = (-0.0) - _2765;
                        float _3283 = (-0.0) - _2766;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _1108;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_1048, _1051, _1054), vec3(_3288, _3289, _3290));
                        float _4633 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3323 = dot(vec3(_1048, _1051, _1054), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4644 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4655 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4666 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3115 = (_3277 * _3225.x) + _3183;
                        _3116 = (_3277 * _3225.y) + _3184;
                        _3117 = (_3277 * _3225.z) + _3185;
                        _3112 = (_3358 * _3242.x) + _3180;
                        _3113 = (_3358 * _3242.y) + _3181;
                        _3114 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_61_pred = _3112;
                    frontier_phi_61_pred_1 = _3117;
                    frontier_phi_61_pred_2 = _3116;
                    frontier_phi_61_pred_3 = _3115;
                    frontier_phi_61_pred_4 = _3114;
                    frontier_phi_61_pred_5 = _3113;
                }
                _2912 = frontier_phi_61_pred;
                _2922 = frontier_phi_61_pred_1;
                _2920 = frontier_phi_61_pred_2;
                _2918 = frontier_phi_61_pred_3;
                _2916 = frontier_phi_61_pred_4;
                _2914 = frontier_phi_61_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2912;
                    _3057 = _2914;
                    _3058 = _2916;
                    _3059 = _2918;
                    _3060 = _2920;
                    _3061 = _2922;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2928) & _2810) == 0u)
        {
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
            float _3050 = _3049 * _2764;
            float _3051 = _3049 * _2765;
            float _3052 = _3049 * _2766;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3163 = _2911;
                float _3164 = _2913;
                float _3165 = _2915;
                float _3166 = _2917;
                float _3167 = _2919;
                float _3168 = _2921;
                uint _3169 = _2928;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3179)
                    {
                        frontier_phi_67_pred = _3166;
                        frontier_phi_67_pred_1 = _3167;
                        frontier_phi_67_pred_2 = _3168;
                        frontier_phi_67_pred_3 = _3165;
                        frontier_phi_67_pred_4 = _3164;
                        frontier_phi_67_pred_5 = _3163;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        uint _3382 = _3178;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2766, _3500.z, fma(_2765, _3500.y, _3500.x * _2764)) + _3500.w;
                            _3513 = !((fma(_2766, _3481.z, fma(_2765, _3481.y, _3481.x * _2764)) + _3481.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2764;
                                float _3541 = _3408.y - _2765;
                                float _3542 = _3408.z - _2766;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4677 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_1048, _1051, _1054))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2766, _3451.z, fma(_2765, _3451.y, _3451.x * _2764)) + _3451.w) / _3512;
                                float _3572 = (fma(_2766, _3466.z, fma(_2765, _3466.y, _3466.x * _2764)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4693 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1108;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4704 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3615 = dot(vec3(_1048, _1051, _1054), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4715 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_1048, _1051, _1054), vec3(_3547, _3548, _3549))) + _3624;
                                float _4726 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4737 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3652 * _3436.x;
                                frontier_phi_73_pred_1 = _3652 * _3436.y;
                                frontier_phi_73_pred_2 = _3578 * _3424.z;
                                frontier_phi_73_pred_3 = _3578 * _3424.y;
                                frontier_phi_73_pred_4 = _3578 * _3424.x;
                                frontier_phi_73_pred_5 = _3652 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_73_pred;
                            _3657 = frontier_phi_73_pred_1;
                            _3661 = frontier_phi_73_pred_2;
                            _3660 = frontier_phi_73_pred_3;
                            _3659 = frontier_phi_73_pred_4;
                            _3658 = frontier_phi_73_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3366;
                        frontier_phi_67_pred_1 = _3367;
                        frontier_phi_67_pred_2 = _3368;
                        frontier_phi_67_pred_3 = _3365;
                        frontier_phi_67_pred_4 = _3364;
                        frontier_phi_67_pred_5 = _3363;
                    }
                    _3031 = frontier_phi_67_pred;
                    _3033 = frontier_phi_67_pred_1;
                    _3035 = frontier_phi_67_pred_2;
                    _3029 = frontier_phi_67_pred_3;
                    _3027 = frontier_phi_67_pred_4;
                    _3025 = frontier_phi_67_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3025;
                        _3164 = _3027;
                        _3165 = _3029;
                        _3166 = _3031;
                        _3167 = _3033;
                        _3168 = _3035;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_55_56_ladder = _2919;
                frontier_phi_55_56_ladder_1 = _2921;
                frontier_phi_55_56_ladder_2 = _2917;
                frontier_phi_55_56_ladder_3 = _2915;
                frontier_phi_55_56_ladder_4 = _2913;
                frontier_phi_55_56_ladder_5 = _2911;
            }
            _3024 = frontier_phi_55_56_ladder_5;
            _3026 = frontier_phi_55_56_ladder_4;
            _3028 = frontier_phi_55_56_ladder_3;
            _3030 = frontier_phi_55_56_ladder_2;
            _3032 = frontier_phi_55_56_ladder;
            _3034 = frontier_phi_55_56_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1092 : (isnan(_1092) ? 1.0 : min(_1092, 1.0));
        _2823 = (_3039 * _3030) + _2275;
        _2825 = (_3039 * _3032) + _2277;
        _2827 = (_3039 * _3034) + _2279;
        _2829 = ((_3024 * 0.039999999105930328369140625) * _3039) + _2608;
        _2831 = ((_3026 * 0.039999999105930328369140625) * _3039) + _2610;
        _2833 = ((_3028 * 0.039999999105930328369140625) * _3039) + _2612;
    }
    else
    {
        _2823 = _2275;
        _2825 = _2277;
        _2827 = _2279;
        _2829 = _2608;
        _2831 = _2610;
        _2833 = _2612;
    }
    float _4753 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4764 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4775 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    uint _2853 = _276 + 6u;
    float _2861 = _1029 / cbSceneParam._m0[86u].x;
    float _2862 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _963 : (isnan(_963) ? cbSceneParam._m0[77u].w : min(_963, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_963 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_963) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _963 : min(cbSceneParam._m0[80u].w, _963));
        float _2937 = _2936 / _963;
        float _2948 = _2937 * _1014;
        float _2949 = _1015 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _1016;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3125;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3125 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3087 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3125 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2972 * _3096) - exp2(_2972 * _3097)) * _3085))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3127 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3136 = exp2((_3125 * (-1.44269502162933349609375)) * (1.0 - _3127.w));
        float _3137 = log2(_3136);
        float _3153 = log2(_2881);
        _2974 = (exp2(_3153 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].x)) * _3127.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2976 = (exp2(_3153 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].y)) * _3127.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2978 = (exp2(_3153 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].z)) * _3127.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2980 = _3136 * _2881;
    }
    else
    {
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
        _2980 = _2881;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2823 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1092))) + ((_2829 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2825 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1092))) + ((_2831 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2827 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1092))) + ((_2833 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2853].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
}


