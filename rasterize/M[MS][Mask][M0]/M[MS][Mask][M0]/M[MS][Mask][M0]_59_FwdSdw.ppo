#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3953 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3964 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3975 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _408.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3986 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _482 = (_475 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368;
    float _483 = (_475 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _484 = (_475 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _408.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3997 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _558 = (_337.x * cbMtdParam._m0[9u].x) * ((_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _559 = (_337.y * cbMtdParam._m0[9u].y) * ((_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _560 = (_337.z * cbMtdParam._m0[9u].z) * ((_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _564 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _558;
    float _567 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _559;
    float _570 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _560;
    float _578 = (((_558 - _564) * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) + _564) * 4.55000019073486328125;
    float _580 = (((_559 - _567) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) + _567) * 4.55000019073486328125;
    float _582 = (((_560 - _570) * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) + _570) * 4.55000019073486328125;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    float _645 = ((_617.x - _636) * _475) + _636;
    float _646 = ((_617.y - _637) * _475) + _637;
    float _647 = ((_617.z - _638) * _475) + _638;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _672 = ((_659.z - _647) * _548) + _647;
    float _675 = ((((_659.x - _645) * _548) + _645) * 2.0) + (-1.0);
    float _676 = ((((_659.y - _646) * _548) + _646) * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _4008 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _682 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _714 = (_675 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_594.x * 2.0) + (-1.0)))) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_676 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_594.y * 2.0) + (-1.0)))) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _756 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_729 - _730) * cbMtdParam._m0[24u].y) + _730) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4019 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _765 = ((((cbMtdParam._m0[10u].x - _578) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _757) + _578;
    float _766 = ((((cbMtdParam._m0[10u].y - _580) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _757) + _580;
    float _767 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _582)) * _757) + _582;
    float _772 = (((_594.z - _672) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _672;
    float _776 = ((_702.z - _772) * cbMtdParam._m0[19u].w) + _772;
    float _780 = ((cbMtdParam._m0[23u].y - _776) * _757) + _776;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _805 = (_799.x * 2.0) + (-1.0);
    float _806 = (_799.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _4030 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _823 = (_757 * (((cbMtdParam._m0[22u].z * _714) - _714) + _805)) + _714;
    float _824 = (_757 * (((cbMtdParam._m0[22u].z * _715) - _715) + _806)) + _715;
    float _825 = (_757 * (sqrt(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) - _682)) + _682;
    float _829 = cbMtdParam._m0[22u].x + _702.w;
    float _832 = fma(_825, _249 * NORMAL.x, fma(_824, _256 * TANGENT.x, (_242 * _234) * _823));
    float _835 = fma(_825, _249 * NORMAL.y, fma(_824, _256 * TANGENT.y, (_242 * _235) * _823));
    float _838 = fma(_825, _249 * NORMAL.z, fma(_824, _256 * TANGENT.z, (_242 * _236) * _823));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _4041 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _846 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4063 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4074 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4085 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _864 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _904);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _948 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _951 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _954 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _968 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_968].z;
    float _4096 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _992 = ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * TEXCOORD_5.w) * _988.x;
    float _993 = dot(vec3(_843, _844, _845), vec3(_921, _922, _923));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _843) - _921;
    float _1001 = (_996 * _844) - _922;
    float _1002 = (_996 * _845) - _923;
    float _1006 = abs(dot(vec3(_921, _922, _923), vec3(_843, _844, _845)));
    float _4129 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_846);
    float _1021 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1091 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1095 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1120 = _1053 + _843;
        float _1121 = _1057 + _844;
        float _1122 = _1061 + _845;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_843, _844, _845), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4177 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_843, _844, _845), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4210 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_843, _844, _845), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4243 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1405 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1409 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1432 = _1053 + _843;
        float _1433 = _1057 + _844;
        float _1434 = _1061 + _845;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_843, _844, _845), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4306 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_843, _844, _845), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4339 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_843, _844, _845), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4372 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1363;
        _1671 = _1363;
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1375)) + _1375;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1376)) + _1376;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1377)) + _1377;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _1000 * 0.5;
    float _1739 = _1001 * 0.5;
    float _1740 = _1002 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1856 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1860 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1864 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1867 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1870 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1873 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1901;
        if (_1867 > 0.0)
        {
            _1901 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1901 = frontier_phi_14_12_ladder;
        }
        float _2072;
        if (_1870 > 0.0)
        {
            _2072 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2072 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1873 > 0.0)
        {
            _2367 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2072) ? _1901 : (isnan(_1901) ? _2072 : min(_1901, _2072));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1867) + _1856;
        float _2375 = (_2370 * _1870) + _1860;
        float _2376 = (_2370 * _1873) + _1864;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1889 = frontier_phi_13_35_ladder_2;
        _1891 = frontier_phi_13_35_ladder_1;
        _1893 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1807);
        _1889 = _1877.x * cbModelParam._m0[1u].y;
        _1891 = _1877.y * cbModelParam._m0[1u].y;
        _1893 = _1877.z * cbModelParam._m0[1u].y;
    }
    float _1897 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1897 : min(cbModelParam._m0[25u].w, _1897));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1967 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1970 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2077;
        if (_1964 > 0.0)
        {
            _2077 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2077 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1967 > 0.0)
        {
            _2394 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2721;
        if (_1970 > 0.0)
        {
            _2721 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2721 = frontier_phi_47_44_ladder;
        }
        float _2723 = isnan(_2394) ? _2077 : (isnan(_2077) ? _2394 : min(_2077, _2394));
        float _2724 = isnan(_2721) ? _2723 : (isnan(_2723) ? _2721 : min(_2723, _2721));
        float _2728 = (_2724 * _1964) + _1953;
        float _2729 = (_2724 * _1967) + _1957;
        float _2730 = (_2724 * _1970) + _1961;
        float _2731 = _2724 * 9.9999997473787516355514526367188e-05;
        float _2732 = (-1.0) - _2731;
        float _2734 = _2731 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2730 > _2734) || ((_2730 < _2732) || ((_2729 > _2734) || ((_2729 < _2732) || ((_2728 < _2732) || (_2728 > _2734))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2730, cbModelParam._m0[17u].z, fma(_2729, cbModelParam._m0[17u].y, _2728 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2730, cbModelParam._m0[18u].z, fma(_2729, cbModelParam._m0[18u].y, _2728 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2730, cbModelParam._m0[19u].z, fma(_2729, cbModelParam._m0[19u].y, _2728 * cbModelParam._m0[19u].x))), _1898);
            frontier_phi_22_47_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_22_47_ladder_2;
        _1991 = frontier_phi_22_47_ladder_1;
        _1993 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1898);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2005 = ((((1.0 - _1021) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1021 * _1008)) * _992;
    float _2006 = _2005 * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2007 = _2005 * ((cbModelParam._m0[1u].w * (_1991 - _1891)) + _1891);
    float _2008 = _2005 * ((cbModelParam._m0[1u].w * (_1993 - _1893)) + _1893);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2064 = _2051 / _2063;
    float _2065 = _2055 / _2063;
    float _2066 = _2059 / _2063;
    float _2213;
    float _2214;
    float _2215;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2093 = ((uint(_2066 > cbSceneParam._m0[59u].y) + uint(_2066 > cbSceneParam._m0[59u].x)) + uint(_2066 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2094 = _2093 + 43u;
        uint _2102 = _2093 + 44u;
        uint _2110 = _2093 + 45u;
        uint _2118 = _2093 + 46u;
        float _2129 = fma(_2063, cbSceneParam._m0[_2094].w, fma(_2059, cbSceneParam._m0[_2094].z, fma(_2055, cbSceneParam._m0[_2094].y, _2051 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2063, cbSceneParam._m0[_2102].w, fma(_2059, cbSceneParam._m0[_2102].z, fma(_2055, cbSceneParam._m0[_2102].y, _2051 * cbSceneParam._m0[_2102].x)));
        float _2141 = fma(_2063, cbSceneParam._m0[_2118].w, fma(_2059, cbSceneParam._m0[_2118].z, fma(_2055, cbSceneParam._m0[_2118].y, _2051 * cbSceneParam._m0[_2118].x)));
        float _2146 = cbSceneParam._m0[33u].z * _2141;
        float _2148 = cbSceneParam._m0[33u].w * _2141;
        float _2151 = fma(_2063, cbSceneParam._m0[_2110].w, fma(_2059, cbSceneParam._m0[_2110].z, fma(_2055, cbSceneParam._m0[_2110].y, _2051 * cbSceneParam._m0[_2110].x))) / _2141;
        float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
        float _4498 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2206 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2129) / _2141, (_2148 + _2133) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2129) / _2141, (_2133 - _2146) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2146) / _2141, (_2133 - _2148) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2148) / _2141, (_2146 + _2133) / _2141), _2151), 0.0)).x), vec4(0.25)));
        _2213 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
        _2214 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
        _2215 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2213 = 1.0;
        _2214 = 1.0;
        _2215 = 1.0;
    }
    float _2279;
    float _2281;
    float _2283;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2267 = fma(_2063, cbSceneParam._m0[63u].w, fma(_2059, cbSceneParam._m0[63u].z, fma(_2055, cbSceneParam._m0[63u].y, _2051 * cbSceneParam._m0[63u].x)));
        float _2268 = fma(_2063, cbSceneParam._m0[60u].w, fma(_2059, cbSceneParam._m0[60u].z, fma(_2055, cbSceneParam._m0[60u].y, _2051 * cbSceneParam._m0[60u].x))) / _2267;
        float _2269 = fma(_2063, cbSceneParam._m0[61u].w, fma(_2059, cbSceneParam._m0[61u].z, fma(_2055, cbSceneParam._m0[61u].y, _2051 * cbSceneParam._m0[61u].x))) / _2267;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2268 >= cbSceneParam._m0[64u].x) && (_2269 >= cbSceneParam._m0[64u].y)) && (_2268 <= cbSceneParam._m0[64u].z)) && (_2269 <= cbSceneParam._m0[64u].w))
        {
            float _2407 = fma(_2063, cbSceneParam._m0[62u].w, fma(_2059, cbSceneParam._m0[62u].z, fma(_2055, cbSceneParam._m0[62u].y, _2051 * cbSceneParam._m0[62u].x))) / _2267;
            float _2411 = isnan(cbSceneParam._m0[41u].w) ? _2407 : (isnan(_2407) ? cbSceneParam._m0[41u].w : max(_2407, cbSceneParam._m0[41u].w));
            float _2454 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
            float _4514 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
            float _2461 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2268, cbSceneParam._m0[33u].w + _2269), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2268, _2269 - cbSceneParam._m0[33u].z), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].z, _2269 - cbSceneParam._m0[33u].w), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2269), _2411), 0.0)).x), vec4(0.25)));
            float _2465 = 1.0 - (_2461 * cbSceneParam._m0[34u].x);
            float _2466 = 1.0 - (_2461 * cbSceneParam._m0[34u].y);
            float _2467 = 1.0 - (_2461 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
            frontier_phi_34_33_ladder_1 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_34_33_ladder_2 = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
        }
        else
        {
            frontier_phi_34_33_ladder = _2215;
            frontier_phi_34_33_ladder_1 = _2214;
            frontier_phi_34_33_ladder_2 = _2213;
        }
        _2279 = frontier_phi_34_33_ladder_2;
        _2281 = frontier_phi_34_33_ladder_1;
        _2283 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2279 = _2213;
        _2281 = _2214;
        _2283 = _2215;
    }
    uvec4 _2288 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2290 = _2288.x * 14u;
    uint _2291 = _2290 + 13u;
    float _2298 = _992 + (-1.0);
    float _2303 = (cbLight._m0[_2291].x * _2298) + 1.0;
    float _2304 = (cbLight._m0[_2291].y * _2298) + 1.0;
    float _2305 = (cbLight._m0[_2291].z * _2298) + 1.0;
    float _2306 = (cbLight._m0[_2291].w * _2298) + 1.0;
    uint _2307 = _2290 + 5u;
    float _2313 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2317 = _2290 + 4u;
    float _2326 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2330 = _2290 | 1u;
    float _2341 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_843, _844, _845));
    float _2344 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_843, _844, _845));
    float _4550 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _4561 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2351 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2358 = ((cbLight._m0[_2307].x * _2313) * _2351) + (((cbLight._m0[_2317].x * _2279) * _2326) * _2349);
    float _2359 = ((_2313 * cbLight._m0[_2307].y) * _2351) + (((cbLight._m0[_2317].y * _2281) * _2326) * _2349);
    float _2360 = ((_2313 * cbLight._m0[_2307].z) * _2351) + (((cbLight._m0[_2317].z * _2283) * _2326) * _2349);
    uvec4 _2364 = floatBitsToUint(cbLight._m0[_2290 + 12u]);
    bool _2366 = _2364.x == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2366)
    {
        _2468 = _2358;
        _2470 = _2359;
        _2472 = _2360;
    }
    else
    {
        uint _2476 = _2290 + 6u;
        float _2492 = (dot(vec3(cbLight._m0[_2290 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4572 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2495 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2468 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2358;
        _2470 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2359;
        _2472 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2360;
    }
    bool _2475 = _2364.y == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2475)
    {
        _2530 = _2468;
        _2532 = _2470;
        _2534 = _2472;
    }
    else
    {
        uint _2692 = _2290 + 7u;
        float _2708 = (dot(vec3(cbLight._m0[_2290 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2709 = _2708 * _2708;
        float _4588 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2710 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2711 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2530 = (((cbLight._m0[_2692].x * 0.3183098733425140380859375) * _2710) * _2711) + _2468;
        _2532 = (((cbLight._m0[_2692].y * 0.3183098733425140380859375) * _2710) * _2711) + _2470;
        _2534 = (((cbLight._m0[_2692].z * 0.3183098733425140380859375) * _2710) * _2711) + _2472;
    }
    uint _2537 = _2290 + 8u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _846) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2290].x + _921;
    float _2553 = cbLight._m0[_2290].y + _922;
    float _2554 = cbLight._m0[_2290].z + _923;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2290].xyz));
    float _4604 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _4615 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2566 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2567 = dot(vec3(_843, _844, _845), vec3(_2559, _2560, _2561));
    float _4626 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2559, _2560, _2561));
    float _4637 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2551 * _2551;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2590 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2591 = 1.0 - _2551;
    float _2602 = (0.5 / (((_2566 * ((_2565 * _2591) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2591) + _2551) * _2565))) * _2565;
    float _4648 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    uint _2618 = _2290 + 9u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _846) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2330].x + _921;
    float _2632 = cbLight._m0[_2330].y + _922;
    float _2633 = cbLight._m0[_2330].z + _923;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2330].xyz));
    float _4659 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2645 = dot(vec3(_843, _844, _845), vec3(_2638, _2639, _2640));
    float _4670 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2638, _2639, _2640));
    float _4681 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2630 * _2630;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2666 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2667 = 1.0 - _2630;
    float _2677 = (0.5 / (((_2566 * ((_2644 * _2667) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2667) + _2630) * _2644))) * _2644;
    float _4692 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2679 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    float _2689 = (((_2666 * cbLight._m0[_2618].x) * _2679) * _2313) + ((((cbLight._m0[_2537].x * _2279) * _2590) * _2604) * _2326);
    float _2690 = (((_2666 * cbLight._m0[_2618].y) * _2679) * _2313) + ((((cbLight._m0[_2537].y * _2281) * _2590) * _2604) * _2326);
    float _2691 = (((_2666 * cbLight._m0[_2618].z) * _2679) * _2313) + ((((cbLight._m0[_2537].z * _2283) * _2590) * _2604) * _2326);
    float _2747;
    float _2749;
    float _2751;
    if (_2366)
    {
        _2747 = _2689;
        _2749 = _2690;
        _2751 = _2691;
    }
    else
    {
        uint _2753 = _2290 + 2u;
        uint _2757 = _2290 + 10u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _846) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _921;
        float _2774 = cbLight._m0[_2753].y + _922;
        float _2775 = cbLight._m0[_2753].z + _923;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2753].xyz));
        float _4703 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2787 = dot(vec3(_843, _844, _845), vec3(_2780, _2781, _2782));
        float _4714 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4725 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2808 = (exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2809 = 1.0 - _2772;
        float _2819 = (0.5 / (((_2566 * ((_2786 * _2809) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2809) + _2772) * _2786))) * _2786;
        float _4736 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2747 = (((_2808 * cbLight._m0[_2757].x) * _2821) * _2822) + _2689;
        _2749 = (((_2808 * cbLight._m0[_2757].y) * _2821) * _2822) + _2690;
        _2751 = (((_2808 * cbLight._m0[_2757].z) * _2821) * _2822) + _2691;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2475)
    {
        _2853 = _2747;
        _2855 = _2749;
        _2857 = _2751;
    }
    else
    {
        uint _2864 = _2290 + 3u;
        uint _2868 = _2290 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _846) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _921;
        float _2885 = cbLight._m0[_2864].y + _922;
        float _2886 = cbLight._m0[_2864].z + _923;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2864].xyz));
        float _4752 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2898 = dot(vec3(_843, _844, _845), vec3(_2891, _2892, _2893));
        float _4763 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4774 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2919 = (exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2920 = 1.0 - _2883;
        float _2930 = (0.5 / (((_2566 * ((_2897 * _2920) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2920) + _2883) * _2897))) * _2897;
        float _4785 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2932 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2933 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2853 = (((_2919 * cbLight._m0[_2868].x) * _2932) * _2933) + _2747;
        _2855 = (((_2919 * cbLight._m0[_2868].y) * _2932) * _2933) + _2749;
        _2857 = (((_2919 * cbLight._m0[_2868].z) * _2932) * _2933) + _2751;
    }
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2288.y == 0u)
    {
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.x;
        uint _2966 = uint((float(_2954.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _2955))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _2955)));
        float _2976 = (log2(_2066 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2977 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        uint _2980 = uint(isnan(14.0) ? _2977 : (isnan(_2977) ? 14.0 : min(_2977, 14.0)));
        uvec4 _2985 = texelFetch(g_lightClusterGridBuffer, int(((_2980 << 2u) + (_2966 << 6u)) >> 2u));
        uint _2986 = _2985.x;
        uint _2987 = _2954.z;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((((1u << ((_2987 >> 4u) & 15u)) + 4294967295u) & _2986) == 0u) || ((_2987 & 240u) == 0u))
        {
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
        }
        else
        {
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3227)
                {
                    frontier_phi_66_pred = _3216;
                    frontier_phi_66_pred_1 = _3215;
                    frontier_phi_66_pred_2 = _3214;
                    frontier_phi_66_pred_3 = _3213;
                    frontier_phi_66_pred_4 = _3212;
                    frontier_phi_66_pred_5 = _3211;
                }
                else
                {
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    uint _3341;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3226;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3345 = uint(findLSB(_3341)) + (_3217 << 5u);
                        uint _3342 = (_3341 + 4294967295u) & _3341;
                        uint _3347 = _3345 * 48u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3367 = (_3345 * 48u) + 4u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3386 = (_3345 * 48u) + 8u;
                        vec3 _3397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x));
                        float _3401 = _3361.x - _2064;
                        float _3402 = _3361.y - _2065;
                        float _3403 = _3361.z - _2066;
                        float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                        float _3407 = inversesqrt(_3404);
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3411 = dot(vec3(_948, _951, _954), vec3(_3408, _3409, _3410));
                        float _3416 = 1.0 - (_3404 * _3361.w);
                        float _4811 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3418 = sqrt(_3404) * _3380.w;
                        float _3421 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3411) + _3422;
                        float _3428 = _3418 * _3418;
                        float _3432 = ((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3417) / ((_3428 * 0.699999988079071044921875) + 1.0);
                        float _3436 = (-0.0) - _2064;
                        float _3437 = (-0.0) - _2065;
                        float _3438 = (-0.0) - _2066;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3452 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                        float _3453 = 1.0 - _1008;
                        float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                        float _3461 = _3460 * _3460;
                        float _3462 = _3461 * _3461;
                        float _3463 = _3443 + _3408;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3473 = dot(vec3(_948, _951, _954), vec3(_3443, _3444, _3445));
                        float _4827 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3477 = dot(vec3(_948, _951, _954), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                        float _4838 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                        float _3485 = _3421 * _3461;
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3411) + _3486;
                        float _4849 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3491 = 1.0 - _3461;
                        float _3501 = (0.5 / (((_3490 * ((_3476 * _3491) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3461) * _3476))) * _3490;
                        float _4860 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3512 = (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3484 * _3484) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125))) * _3417;
                        _3270 = (_3432 * _3380.x) + _3338;
                        _3271 = (_3432 * _3380.y) + _3339;
                        _3272 = (_3432 * _3380.z) + _3340;
                        _3267 = (_3512 * _3397.x) + _3335;
                        _3268 = (_3512 * _3397.y) + _3336;
                        _3269 = (_3512 * _3397.z) + _3337;
                        if (_3342 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3342;
                        }
                    }
                    frontier_phi_66_pred = _3272;
                    frontier_phi_66_pred_1 = _3271;
                    frontier_phi_66_pred_2 = _3270;
                    frontier_phi_66_pred_3 = _3269;
                    frontier_phi_66_pred_4 = _3268;
                    frontier_phi_66_pred_5 = _3267;
                }
                _3077 = frontier_phi_66_pred;
                _3075 = frontier_phi_66_pred_1;
                _3073 = frontier_phi_66_pred_2;
                _3071 = frontier_phi_66_pred_3;
                _3069 = frontier_phi_66_pred_4;
                _3067 = frontier_phi_66_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3067;
                    _3212 = _3069;
                    _3213 = _3071;
                    _3214 = _3073;
                    _3215 = _3075;
                    _3216 = _3077;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
        }
        uvec4 _3080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3081 = _3080.z;
        uint _3083 = (_3081 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3083) & _2986) == 0u)
        {
            _3179 = _3066;
            _3181 = _3068;
            _3183 = _3070;
            _3185 = _3072;
            _3187 = _3074;
            _3189 = _3076;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
            float _3205 = _3204 * _2064;
            float _3206 = _3204 * _2065;
            float _3207 = _3204 * _2066;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3083 < ((_3081 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3318 = _3066;
                float _3319 = _3068;
                float _3320 = _3070;
                float _3321 = _3072;
                float _3322 = _3074;
                float _3323 = _3076;
                uint _3324 = _3083;
                uint _3333;
                bool _3334;
                for (;;)
                {
                    _3333 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                    _3334 = _3333 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3334)
                    {
                        frontier_phi_72_pred = _3323;
                        frontier_phi_72_pred_1 = _3322;
                        frontier_phi_72_pred_2 = _3321;
                        frontier_phi_72_pred_3 = _3320;
                        frontier_phi_72_pred_4 = _3319;
                        frontier_phi_72_pred_5 = _3318;
                    }
                    else
                    {
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        uint _3536 = _3333;
                        uint _3537;
                        vec4 _3562;
                        float _3563;
                        vec4 _3578;
                        vec3 _3590;
                        vec4 _3605;
                        vec4 _3620;
                        float _3666;
                        bool _3667;
                        for (;;)
                        {
                            uint _3547 = ((_3324 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3536));
                            _3537 = (_3536 + 4294967295u) & _3536;
                            uint _3549 = _3547 * 40u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3563 = _3562.w;
                            uint _3565 = (_3547 * 40u) + 4u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3547 * 40u) + 8u;
                            _3590 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x));
                            uint _3592 = (_3547 * 40u) + 16u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3547 * 40u) + 20u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3547 * 40u) + 24u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3641 = (_3547 * 40u) + 28u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3666 = fma(_2066, _3654.z, fma(_2065, _3654.y, _3654.x * _2064)) + _3654.w;
                            _3667 = !((fma(_2066, _3635.z, fma(_2065, _3635.y, _3635.x * _2064)) + _3635.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3667)
                            {
                                float _3694 = _3562.x - _2064;
                                float _3695 = _3562.y - _2065;
                                float _3696 = _3562.z - _2066;
                                float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                                float _3700 = inversesqrt(_3697);
                                float _3701 = _3700 * _3694;
                                float _3702 = _3700 * _3695;
                                float _3703 = _3700 * _3696;
                                float _3707 = 1.0 - (_3697 / (_3563 * _3563));
                                float _4871 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3712 = sqrt(_3697) * _3578.w;
                                float _3714 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                                float _3715 = _3714 * _3714;
                                float _3718 = ((1.0 - _3715) * dot(vec3(_3701, _3702, _3703), vec3(_948, _951, _954))) + _3715;
                                float _3721 = _3712 * _3712;
                                float _3725 = (fma(_2066, _3605.z, fma(_2065, _3605.y, _3605.x * _2064)) + _3605.w) / _3666;
                                float _3726 = (fma(_2066, _3620.z, fma(_2065, _3620.y, _3620.x * _2064)) + _3620.w) / _3666;
                                float _3730 = 1.0 - dot(vec2(_3725, _3726), vec2(_3725, _3726));
                                float _4887 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3732 = _3731 * (((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3708) / ((_3721 * 0.699999988079071044921875) + 1.0));
                                float _3744 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                                float _3745 = 1.0 - _1008;
                                float _3752 = sqrt(1.0 - ((1.0 - (_3745 * _3745)) * (1.0 - (_3744 * _3744))));
                                float _3753 = _3752 * _3752;
                                float _3754 = _3753 * _3753;
                                float _3755 = _3701 - _3205;
                                float _3756 = _3702 - _3206;
                                float _3757 = _3703 - _3207;
                                float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                                float _3765 = dot(vec3(_948, _951, _954), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4898 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3769 = dot(vec3(_948, _951, _954), vec3(_3761 * _3755, _3761 * _3756, _3761 * _3757));
                                float _4909 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3776 = ((_3772 * _3772) * (_3754 + (-1.0))) + 1.0;
                                float _3777 = _3714 * _3753;
                                float _3778 = _3777 * _3777;
                                float _3784 = ((1.0 - _3778) * dot(vec3(_948, _951, _954), vec3(_3701, _3702, _3703))) + _3778;
                                float _4920 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3786 = 1.0 - _3753;
                                float _3796 = (0.5 / (((_3785 * ((_3768 * _3786) + _3753)) + 9.9999999392252902907785028219223e-09) + (((_3785 * _3786) + _3753) * _3768))) * _3785;
                                float _4931 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3806 = (_3731 * _3708) * (((_3754 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3776 * _3776) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3732 * _3578.y;
                                frontier_phi_78_pred_1 = _3732 * _3578.x;
                                frontier_phi_78_pred_2 = _3806 * _3590.z;
                                frontier_phi_78_pred_3 = _3806 * _3590.y;
                                frontier_phi_78_pred_4 = _3806 * _3590.x;
                                frontier_phi_78_pred_5 = _3732 * _3578.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3814 = frontier_phi_78_pred;
                            _3813 = frontier_phi_78_pred_1;
                            _3812 = frontier_phi_78_pred_2;
                            _3811 = frontier_phi_78_pred_3;
                            _3810 = frontier_phi_78_pred_4;
                            _3815 = frontier_phi_78_pred_5;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            if (_3537 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3537;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3522;
                        frontier_phi_72_pred_1 = _3521;
                        frontier_phi_72_pred_2 = _3520;
                        frontier_phi_72_pred_3 = _3519;
                        frontier_phi_72_pred_4 = _3518;
                        frontier_phi_72_pred_5 = _3517;
                    }
                    _3190 = frontier_phi_72_pred;
                    _3188 = frontier_phi_72_pred_1;
                    _3186 = frontier_phi_72_pred_2;
                    _3184 = frontier_phi_72_pred_3;
                    _3182 = frontier_phi_72_pred_4;
                    _3180 = frontier_phi_72_pred_5;
                    uint _3325 = _3324 + 1u;
                    if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3318 = _3180;
                        _3319 = _3182;
                        _3320 = _3184;
                        _3321 = _3186;
                        _3322 = _3188;
                        _3323 = _3190;
                        _3324 = _3325;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3190;
                frontier_phi_60_61_ladder_1 = _3188;
                frontier_phi_60_61_ladder_2 = _3184;
                frontier_phi_60_61_ladder_3 = _3182;
                frontier_phi_60_61_ladder_4 = _3180;
                frontier_phi_60_61_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_60_61_ladder = _3076;
                frontier_phi_60_61_ladder_1 = _3074;
                frontier_phi_60_61_ladder_2 = _3070;
                frontier_phi_60_61_ladder_3 = _3068;
                frontier_phi_60_61_ladder_4 = _3066;
                frontier_phi_60_61_ladder_5 = _3072;
            }
            _3179 = frontier_phi_60_61_ladder_4;
            _3181 = frontier_phi_60_61_ladder_3;
            _3183 = frontier_phi_60_61_ladder_2;
            _3185 = frontier_phi_60_61_ladder_5;
            _3187 = frontier_phi_60_61_ladder_1;
            _3189 = frontier_phi_60_61_ladder;
        }
        float _3194 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _2999 = (_3194 * _3185) + _2530;
        _3001 = (_3194 * _3187) + _2532;
        _3003 = (_3194 * _3189) + _2534;
        _3005 = ((_3179 * 0.039999999105930328369140625) * _3194) + _2853;
        _3007 = ((_3181 * 0.039999999105930328369140625) * _3194) + _2855;
        _3009 = ((_3183 * 0.039999999105930328369140625) * _3194) + _2857;
    }
    else
    {
        _2999 = _2530;
        _3001 = _2532;
        _3003 = _2534;
        _3005 = _2853;
        _3007 = _2855;
        _3009 = _2857;
    }
    float _4947 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4958 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4969 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    uint _3029 = _281 + 6u;
    float _3037 = _929 / cbSceneParam._m0[86u].x;
    float _3038 = _930 / cbSceneParam._m0[86u].y;
    vec4 _3052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, (log2((isnan(cbSceneParam._m0[77u].w) ? _864 : (isnan(_864) ? cbSceneParam._m0[77u].w : min(_864, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3054 = _3052.x;
    float _3055 = _3052.y;
    float _3056 = _3052.z;
    float _3057 = _3052.w;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_864 > cbSceneParam._m0[78u].w)
    {
        float _3091 = isnan(_864) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _864 : min(cbSceneParam._m0[80u].w, _864));
        float _3092 = _3091 / _864;
        float _3103 = _3092 * _914;
        float _3104 = _915 * _3092;
        float _3105 = (-0.0) - _3104;
        float _3107 = _3092 * _916;
        float _3109 = (cbSceneParam._m0[77u].w * _3105) / _3091;
        float _3110 = _3109 + cbSceneParam._m0[79u].w;
        float _3111 = cbSceneParam._m0[79u].w - _3104;
        float _3117 = sqrt(((_3103 * _3103) + (_3104 * _3104)) + (_3107 * _3107));
        float _3120 = (1.0 - (cbSceneParam._m0[77u].w / _3091)) * _3117;
        float _3125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3105 - _3109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3110 > 0.0) ? exp2(_3125 * _3110) : (2.0 - exp2(_3127 * _3110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3120;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : max(_3110, _3111));
            float _3242 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : min(_3110, _3111));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3280 = ((abs(_3117 / _3105) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3125 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3125 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3127 * _3251) - exp2(_3127 * _3252)) * _3240))) + (_3120 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3057);
        _3129 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3054;
        _3131 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3055;
        _3133 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3056;
        _3135 = _3291 * _3057;
    }
    else
    {
        _3129 = _3054;
        _3131 = _3055;
        _3133 = _3056;
        _3135 = _3057;
    }
    float _3147 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3148 = _3147 == 3.0;
    float _3149 = log2(_3135);
    float _3156 = exp2(_3149 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2999 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _992))) + ((_3005 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3157 = exp2(_3149 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_3001 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _992))) + ((_3007 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3158 = exp2(_3149 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_3003 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _992))) + ((_3009 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3167 = (_3147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3167 * (_3148 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.y = _3167 * (_3148 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
    SV_Target.z = _3167 * (_3148 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
    SV_Target.w = cbInstanceData._m0[_3029].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3029].w;
}


