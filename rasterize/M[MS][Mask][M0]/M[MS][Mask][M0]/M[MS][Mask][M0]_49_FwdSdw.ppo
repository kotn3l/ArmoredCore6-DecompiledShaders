#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1410;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3996 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4007 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4018 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4029 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _482 = (_337.x * cbMtdParam._m0[9u].x) * ((_472 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _483 = (_337.y * cbMtdParam._m0[9u].y) * ((_472 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _484 = (_337.z * cbMtdParam._m0[9u].z) * ((_472 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _488 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _482;
    float _491 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _483;
    float _494 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _484;
    float _502 = (((_482 - _488) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) + _488) * 4.55000019073486328125;
    float _504 = (((_483 - _491) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _491) * 4.55000019073486328125;
    float _506 = (((_484 - _494) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _494) * 4.55000019073486328125;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _602 = ((_572.z - _593) * _472) + _593;
    float _605 = ((((_572.x - _591) * _472) + _591) * 2.0) + (-1.0);
    float _606 = ((((_572.y - _592) * _472) + _592) * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _4040 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _644 = (_605 + ((((_545.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_632.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _645 = (_606 + ((((_545.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_632.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _648 = fma(_612, _250, fma(_645, _257, _644 * _243));
    float _651 = fma(_612, _251, fma(_645, _258, _644 * _244));
    float _654 = fma(_612, _252, fma(_645, _259, _644 * _245));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_658 * _648, _658 * _651, _658 * _654, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) * cbMtdParam._m0[21u].z);
    float _4051 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _697 = (-0.0) - cbMtdParam._m0[24u].x;
    float _699 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
    float _707 = _695 - ((_695 * TEXCOORD_8.x) * _700);
    float _708 = _695 - ((_695 * TEXCOORD_8.y) * _700);
    float _709 = _695 - ((_695 * TEXCOORD_8.z) * _700);
    float _716 = (_707 * ((_525.x * cbMtdParam._m0[18u].x) - _502)) + _502;
    float _717 = (_708 * ((_525.y * cbMtdParam._m0[18u].y) - _504)) + _504;
    float _718 = (_709 * ((_525.z * cbMtdParam._m0[18u].z) - _506)) + _506;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_732 - _733) * cbMtdParam._m0[24u].y) + _733) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4072 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _716) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _760) + _716;
    float _769 = ((((cbMtdParam._m0[10u].y - _717) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _760) + _717;
    float _770 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _718)) * _760) + _718;
    float _775 = (((_545.z - _602) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _602;
    float _779 = ((_632.z - _775) * cbMtdParam._m0[19u].w) + _775;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _800 = (_793.x * 2.0) + (-1.0);
    float _801 = (_793.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _4083 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _810 = ((_793.z - _779) * _707) + _779;
    float _813 = ((cbMtdParam._m0[23u].y - _810) * _760) + _810;
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _838 = (_832.x * 2.0) + (-1.0);
    float _839 = (_832.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _4094 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _855 = ((sqrt(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) - _612) * _709) + _612;
    float _858 = (((_800 - _644) * _707) + _644) + (cbMtdParam._m0[21u].x * _644);
    float _859 = (((_801 - _645) * _708) + _645) + (cbMtdParam._m0[21u].x * _645);
    float _870 = (((_838 - _858) + (_858 * cbMtdParam._m0[22u].z)) * _760) + _858;
    float _871 = (((_839 - _859) + (_859 * cbMtdParam._m0[22u].z)) * _760) + _859;
    float _872 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) - _855)) + _855;
    float _876 = cbMtdParam._m0[22u].x + _632.w;
    float _879 = fma(_872, _250, fma(_871, _257, _870 * _243));
    float _882 = fma(_872, _251, fma(_871, _258, _870 * _244));
    float _885 = fma(_872, _252, fma(_871, _259, _870 * _245));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _4105 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _893 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4127 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4138 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4149 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _961 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _951);
    float _962 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _951);
    float _963 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _951);
    float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
    float _968 = _961 * _967;
    float _969 = _962 * _967;
    float _970 = _963 * _967;
    float _976 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _977 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _995 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _998 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1001 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1015 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1021 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_1015].x;
    float _1022 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_1015].y;
    float _1023 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_1015].z;
    float _4160 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    vec4 _1035 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _976, cbSceneParam._m0[86u].y * _977));
    float _1039 = ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * TEXCOORD_5.w) * _1035.x;
    float _1040 = dot(vec3(_890, _891, _892), vec3(_968, _969, _970));
    float _1043 = _1040 * 2.0;
    float _1047 = (_1043 * _890) - _968;
    float _1048 = (_1043 * _891) - _969;
    float _1049 = (_1043 * _892) - _970;
    float _1053 = abs(dot(vec3(_968, _969, _970), vec3(_890, _891, _892)));
    float _4193 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1055 = sqrt(_893);
    float _1068 = exp2((_1055 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1055 * 3.0));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1138 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1142 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1167 = _1100 + _890;
        float _1168 = _1104 + _891;
        float _1169 = _1108 + _892;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_890, _891, _892), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4241 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_890, _891, _892), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4274 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_890, _891, _892), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4307 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1453 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1457 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1480 = _1100 + _890;
        float _1481 = _1104 + _891;
        float _1482 = _1108 + _892;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_890, _891, _892), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4370 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_890, _891, _892), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4403 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_890, _891, _892), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4436 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1410;
        _1719 = _1410;
        _1720 = _1410;
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1422)) + _1422;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1423)) + _1423;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1424)) + _1424;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1047 * 0.5;
    float _1787 = _1048 * 0.5;
    float _1788 = _1049 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1049, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047));
        float _1916 = fma(_1049, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047));
        float _1919 = fma(_1049, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1947 = frontier_phi_14_12_ladder;
        }
        float _2116;
        if (_1916 > 0.0)
        {
            _2116 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2116 = frontier_phi_23_19_ladder;
        }
        float _2411;
        if (_1919 > 0.0)
        {
            _2411 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2411 = frontier_phi_35_30_ladder;
        }
        float _2413 = isnan(_2116) ? _1947 : (isnan(_1947) ? _2116 : min(_1947, _2116));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1913) + _1902;
        float _2419 = (_2414 * _1916) + _1906;
        float _2420 = (_2414 * _1919) + _1910;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_13_35_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_13_35_ladder_2;
        _1937 = frontier_phi_13_35_ladder_1;
        _1939 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1047, _1048, _1049), _1855);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1049, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047));
        float _2011 = fma(_1049, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047));
        float _2014 = fma(_1049, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047));
        float _2121;
        if (_2008 > 0.0)
        {
            _2121 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2121 = frontier_phi_25_21_ladder;
        }
        float _2438;
        if (_2011 > 0.0)
        {
            _2438 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2438 = frontier_phi_37_32_ladder;
        }
        float _2765;
        if (_2014 > 0.0)
        {
            _2765 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2765 = frontier_phi_47_44_ladder;
        }
        float _2767 = isnan(_2438) ? _2121 : (isnan(_2121) ? _2438 : min(_2121, _2438));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _2008) + _1997;
        float _2773 = (_2768 * _2011) + _2001;
        float _2774 = (_2768 * _2014) + _2005;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_22_47_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_22_47_ladder_2;
        _2035 = frontier_phi_22_47_ladder_1;
        _2037 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1047, _1048, _1049), _1944);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2049 = ((((1.0 - _1068) * ((_1055 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1068 * _1055)) * _1039;
    float _2050 = _2049 * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2051 = _2049 * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2052 = _2049 * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2108 = _2095 / _2107;
    float _2109 = _2099 / _2107;
    float _2110 = _2103 / _2107;
    float _2257;
    float _2258;
    float _2259;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2137 = ((uint(_2110 > cbSceneParam._m0[59u].y) + uint(_2110 > cbSceneParam._m0[59u].x)) + uint(_2110 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2138 = _2137 + 43u;
        uint _2146 = _2137 + 44u;
        uint _2154 = _2137 + 45u;
        uint _2162 = _2137 + 46u;
        float _2173 = fma(_2107, cbSceneParam._m0[_2138].w, fma(_2103, cbSceneParam._m0[_2138].z, fma(_2099, cbSceneParam._m0[_2138].y, _2095 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2107, cbSceneParam._m0[_2146].w, fma(_2103, cbSceneParam._m0[_2146].z, fma(_2099, cbSceneParam._m0[_2146].y, _2095 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2107, cbSceneParam._m0[_2162].w, fma(_2103, cbSceneParam._m0[_2162].z, fma(_2099, cbSceneParam._m0[_2162].y, _2095 * cbSceneParam._m0[_2162].x)));
        float _2190 = cbSceneParam._m0[33u].z * _2185;
        float _2192 = cbSceneParam._m0[33u].w * _2185;
        float _2195 = fma(_2107, cbSceneParam._m0[_2154].w, fma(_2103, cbSceneParam._m0[_2154].z, fma(_2099, cbSceneParam._m0[_2154].y, _2095 * cbSceneParam._m0[_2154].x))) / _2185;
        float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
        float _4562 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2250 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2173) / _2185, (_2192 + _2177) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2173) / _2185, (_2177 - _2190) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2190) / _2185, (_2177 - _2192) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2192) / _2185, (_2190 + _2177) / _2185), _2195), 0.0)).x), vec4(0.25)));
        _2257 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
        _2258 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
        _2259 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2257 = 1.0;
        _2258 = 1.0;
        _2259 = 1.0;
    }
    float _2323;
    float _2325;
    float _2327;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2311 = fma(_2107, cbSceneParam._m0[63u].w, fma(_2103, cbSceneParam._m0[63u].z, fma(_2099, cbSceneParam._m0[63u].y, _2095 * cbSceneParam._m0[63u].x)));
        float _2312 = fma(_2107, cbSceneParam._m0[60u].w, fma(_2103, cbSceneParam._m0[60u].z, fma(_2099, cbSceneParam._m0[60u].y, _2095 * cbSceneParam._m0[60u].x))) / _2311;
        float _2313 = fma(_2107, cbSceneParam._m0[61u].w, fma(_2103, cbSceneParam._m0[61u].z, fma(_2099, cbSceneParam._m0[61u].y, _2095 * cbSceneParam._m0[61u].x))) / _2311;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2312 >= cbSceneParam._m0[64u].x) && (_2313 >= cbSceneParam._m0[64u].y)) && (_2312 <= cbSceneParam._m0[64u].z)) && (_2313 <= cbSceneParam._m0[64u].w))
        {
            float _2451 = fma(_2107, cbSceneParam._m0[62u].w, fma(_2103, cbSceneParam._m0[62u].z, fma(_2099, cbSceneParam._m0[62u].y, _2095 * cbSceneParam._m0[62u].x))) / _2311;
            float _2455 = isnan(cbSceneParam._m0[41u].w) ? _2451 : (isnan(_2451) ? cbSceneParam._m0[41u].w : max(_2451, cbSceneParam._m0[41u].w));
            float _2498 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
            float _4578 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
            float _2505 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2312, cbSceneParam._m0[33u].w + _2313), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2312, _2313 - cbSceneParam._m0[33u].z), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].z, _2313 - cbSceneParam._m0[33u].w), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2313), _2455), 0.0)).x), vec4(0.25)));
            float _2509 = 1.0 - (_2505 * cbSceneParam._m0[34u].x);
            float _2510 = 1.0 - (_2505 * cbSceneParam._m0[34u].y);
            float _2511 = 1.0 - (_2505 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
            frontier_phi_34_33_ladder_1 = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
            frontier_phi_34_33_ladder_2 = isnan(_2509) ? _2257 : (isnan(_2257) ? _2509 : min(_2257, _2509));
        }
        else
        {
            frontier_phi_34_33_ladder = _2259;
            frontier_phi_34_33_ladder_1 = _2258;
            frontier_phi_34_33_ladder_2 = _2257;
        }
        _2323 = frontier_phi_34_33_ladder_2;
        _2325 = frontier_phi_34_33_ladder_1;
        _2327 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2323 = _2257;
        _2325 = _2258;
        _2327 = _2259;
    }
    uvec4 _2332 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2334 = _2332.x * 14u;
    uint _2335 = _2334 + 13u;
    float _2342 = _1039 + (-1.0);
    float _2347 = (cbLight._m0[_2335].x * _2342) + 1.0;
    float _2348 = (cbLight._m0[_2335].y * _2342) + 1.0;
    float _2349 = (cbLight._m0[_2335].z * _2342) + 1.0;
    float _2350 = (cbLight._m0[_2335].w * _2342) + 1.0;
    uint _2351 = _2334 + 5u;
    float _2357 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2361 = _2334 + 4u;
    float _2370 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2374 = _2334 | 1u;
    float _2385 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_890, _891, _892));
    float _2388 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_890, _891, _892));
    float _4614 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _4625 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2393 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2395 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2402 = ((cbLight._m0[_2351].x * _2357) * _2395) + (((cbLight._m0[_2361].x * _2323) * _2370) * _2393);
    float _2403 = ((_2357 * cbLight._m0[_2351].y) * _2395) + (((cbLight._m0[_2361].y * _2325) * _2370) * _2393);
    float _2404 = ((_2357 * cbLight._m0[_2351].z) * _2395) + (((cbLight._m0[_2361].z * _2327) * _2370) * _2393);
    uvec4 _2408 = floatBitsToUint(cbLight._m0[_2334 + 12u]);
    bool _2410 = _2408.x == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2410)
    {
        _2512 = _2402;
        _2514 = _2403;
        _2516 = _2404;
    }
    else
    {
        uint _2520 = _2334 + 6u;
        float _2536 = (dot(vec3(cbLight._m0[_2334 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2537 = _2536 * _2536;
        float _4636 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2538 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2539 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2512 = (((cbLight._m0[_2520].x * 0.3183098733425140380859375) * _2538) * _2539) + _2402;
        _2514 = (((cbLight._m0[_2520].y * 0.3183098733425140380859375) * _2538) * _2539) + _2403;
        _2516 = (((cbLight._m0[_2520].z * 0.3183098733425140380859375) * _2538) * _2539) + _2404;
    }
    bool _2519 = _2408.y == 0u;
    float _2574;
    float _2576;
    float _2578;
    if (_2519)
    {
        _2574 = _2512;
        _2576 = _2514;
        _2578 = _2516;
    }
    else
    {
        uint _2736 = _2334 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2334 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4652 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2755 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2574 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2512;
        _2576 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2514;
        _2578 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2516;
    }
    uint _2581 = _2334 + 8u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _893) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2334].x + _968;
    float _2597 = cbLight._m0[_2334].y + _969;
    float _2598 = cbLight._m0[_2334].z + _970;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2334].xyz));
    float _4668 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2610 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2611 = dot(vec3(_890, _891, _892), vec3(_2603, _2604, _2605));
    float _4690 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2603, _2604, _2605));
    float _4701 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2595 * _2595;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2635 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2610 * ((_2609 * _2635) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2635) + _2595) * _2609))) * _2609;
    float _4712 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    uint _2662 = _2334 + 9u;
    float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _893) * 0.949999988079071044921875);
    float _2674 = _2673 * _2673;
    float _2675 = cbLight._m0[_2374].x + _968;
    float _2676 = cbLight._m0[_2374].y + _969;
    float _2677 = cbLight._m0[_2374].z + _970;
    float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
    float _2682 = _2681 * _2675;
    float _2683 = _2681 * _2676;
    float _2684 = _2681 * _2677;
    float _2685 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2374].xyz));
    float _4723 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2689 = dot(vec3(_890, _891, _892), vec3(_2682, _2683, _2684));
    float _4734 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2693 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2682, _2683, _2684));
    float _4745 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2697 = _2674 * _2674;
    float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
    float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2711 = 1.0 - _2674;
    float _2721 = (0.5 / (((_2610 * ((_2688 * _2711) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2711) + _2674) * _2688))) * _2688;
    float _4756 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
    float _2733 = (((_2710 * cbLight._m0[_2662].x) * _2723) * _2357) + ((((cbLight._m0[_2581].x * _2323) * _2634) * _2648) * _2370);
    float _2734 = (((_2710 * cbLight._m0[_2662].y) * _2723) * _2357) + ((((cbLight._m0[_2581].y * _2325) * _2634) * _2648) * _2370);
    float _2735 = (((_2710 * cbLight._m0[_2662].z) * _2723) * _2357) + ((((cbLight._m0[_2581].z * _2327) * _2634) * _2648) * _2370);
    float _2791;
    float _2793;
    float _2795;
    if (_2410)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2334 + 2u;
        uint _2801 = _2334 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _893) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _968;
        float _2818 = cbLight._m0[_2797].y + _969;
        float _2819 = cbLight._m0[_2797].z + _970;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2797].xyz));
        float _4767 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2831 = dot(vec3(_890, _891, _892), vec3(_2824, _2825, _2826));
        float _4778 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4789 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2852 = (exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2853 = 1.0 - _2816;
        float _2863 = (0.5 / (((_2610 * ((_2830 * _2853) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2853) + _2816) * _2830))) * _2830;
        float _4800 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2791 = (((_2852 * cbLight._m0[_2801].x) * _2865) * _2866) + _2733;
        _2793 = (((_2852 * cbLight._m0[_2801].y) * _2865) * _2866) + _2734;
        _2795 = (((_2852 * cbLight._m0[_2801].z) * _2865) * _2866) + _2735;
    }
    float _2897;
    float _2899;
    float _2901;
    if (_2519)
    {
        _2897 = _2791;
        _2899 = _2793;
        _2901 = _2795;
    }
    else
    {
        uint _2908 = _2334 + 3u;
        uint _2912 = _2334 + 11u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _893) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _968;
        float _2929 = cbLight._m0[_2908].y + _969;
        float _2930 = cbLight._m0[_2908].z + _970;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2908].xyz));
        float _4816 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2942 = dot(vec3(_890, _891, _892), vec3(_2935, _2936, _2937));
        float _4827 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4838 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2963 = (exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2964 = 1.0 - _2927;
        float _2974 = (0.5 / (((_2610 * ((_2941 * _2964) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2964) + _2927) * _2941))) * _2941;
        float _4849 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2897 = (((_2963 * cbLight._m0[_2912].x) * _2976) * _2977) + _2791;
        _2899 = (((_2963 * cbLight._m0[_2912].y) * _2976) * _2977) + _2793;
        _2901 = (((_2963 * cbLight._m0[_2912].z) * _2976) * _2977) + _2795;
    }
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_2332.y == 0u)
    {
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.x;
        uint _3010 = uint((float(_2998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _977) / _2999))) + floor(float(uint(cbSceneParam._m0[85u].x * _976) / _2999)));
        float _3020 = (log2(_2110 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3021 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        uint _3024 = uint(isnan(14.0) ? _3021 : (isnan(_3021) ? 14.0 : min(_3021, 14.0)));
        uvec4 _3029 = texelFetch(g_lightClusterGridBuffer, int(((_3024 << 2u) + (_3010 << 6u)) >> 2u));
        uint _3030 = _3029.x;
        uint _3031 = _2998.z;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((((1u << ((_3031 >> 4u) & 15u)) + 4294967295u) & _3030) == 0u) || ((_3031 & 240u) == 0u))
        {
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
        }
        else
        {
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            uint _3260 = 0u;
            uint _3269;
            bool _3270;
            for (;;)
            {
                _3269 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                _3270 = _3269 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3270)
                {
                    frontier_phi_66_pred = _3259;
                    frontier_phi_66_pred_1 = _3258;
                    frontier_phi_66_pred_2 = _3257;
                    frontier_phi_66_pred_3 = _3256;
                    frontier_phi_66_pred_4 = _3255;
                    frontier_phi_66_pred_5 = _3254;
                }
                else
                {
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    uint _3384;
                    _3378 = _3254;
                    _3379 = _3255;
                    _3380 = _3256;
                    _3381 = _3257;
                    _3382 = _3258;
                    _3383 = _3259;
                    _3384 = _3269;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    for (;;)
                    {
                        uint _3388 = uint(findLSB(_3384)) + (_3260 << 5u);
                        uint _3385 = (_3384 + 4294967295u) & _3384;
                        uint _3390 = _3388 * 48u;
                        vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3410 = (_3388 * 48u) + 4u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3429 = (_3388 * 48u) + 8u;
                        vec3 _3440 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x));
                        float _3444 = _3404.x - _2108;
                        float _3445 = _3404.y - _2109;
                        float _3446 = _3404.z - _2110;
                        float _3447 = dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446));
                        float _3450 = inversesqrt(_3447);
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3454 = dot(vec3(_995, _998, _1001), vec3(_3451, _3452, _3453));
                        float _3459 = 1.0 - (_3447 * _3404.w);
                        float _4875 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3461 = sqrt(_3447) * _3423.w;
                        float _3464 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                        float _3465 = _3464 * _3464;
                        float _3468 = ((1.0 - _3465) * _3454) + _3465;
                        float _3471 = _3461 * _3461;
                        float _3475 = ((isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))) * _3460) / ((_3471 * 0.699999988079071044921875) + 1.0);
                        float _3479 = (-0.0) - _2108;
                        float _3480 = (-0.0) - _2109;
                        float _3481 = (-0.0) - _2110;
                        float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                        float _3486 = _3485 * _3479;
                        float _3487 = _3485 * _3480;
                        float _3488 = _3485 * _3481;
                        float _3495 = exp2(log2(1.0 / ((_3471 * 3.5) + 5.0)) * 0.25);
                        float _3496 = 1.0 - _1055;
                        float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                        float _3504 = _3503 * _3503;
                        float _3505 = _3504 * _3504;
                        float _3506 = _3486 + _3451;
                        float _3507 = _3487 + _3452;
                        float _3508 = _3488 + _3453;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3516 = dot(vec3(_995, _998, _1001), vec3(_3486, _3487, _3488));
                        float _4891 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3519 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3520 = dot(vec3(_995, _998, _1001), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                        float _4902 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                        float _3528 = _3464 * _3504;
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3454) + _3529;
                        float _4913 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3533 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3534 = 1.0 - _3504;
                        float _3544 = (0.5 / (((_3533 * ((_3519 * _3534) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3504) * _3519))) * _3533;
                        float _4924 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3555 = (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3527 * _3527) * ((_3471 * 2.1991131305694580078125) + 3.141590118408203125))) * _3460;
                        _3313 = (_3475 * _3423.x) + _3381;
                        _3314 = (_3475 * _3423.y) + _3382;
                        _3315 = (_3475 * _3423.z) + _3383;
                        _3310 = (_3555 * _3440.x) + _3378;
                        _3311 = (_3555 * _3440.y) + _3379;
                        _3312 = (_3555 * _3440.z) + _3380;
                        if (_3385 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3378 = _3310;
                            _3379 = _3311;
                            _3380 = _3312;
                            _3381 = _3313;
                            _3382 = _3314;
                            _3383 = _3315;
                            _3384 = _3385;
                        }
                    }
                    frontier_phi_66_pred = _3315;
                    frontier_phi_66_pred_1 = _3314;
                    frontier_phi_66_pred_2 = _3313;
                    frontier_phi_66_pred_3 = _3312;
                    frontier_phi_66_pred_4 = _3311;
                    frontier_phi_66_pred_5 = _3310;
                }
                _3121 = frontier_phi_66_pred;
                _3119 = frontier_phi_66_pred_1;
                _3117 = frontier_phi_66_pred_2;
                _3115 = frontier_phi_66_pred_3;
                _3113 = frontier_phi_66_pred_4;
                _3111 = frontier_phi_66_pred_5;
                uint _3261 = _3260 + 1u;
                if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3254 = _3111;
                    _3255 = _3113;
                    _3256 = _3115;
                    _3257 = _3117;
                    _3258 = _3119;
                    _3259 = _3121;
                    _3260 = _3261;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
        }
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.z;
        uint _3127 = (_3125 >> 8u) & 15u;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        if (((4294967295u << _3127) & _3030) == 0u)
        {
            _3222 = _3110;
            _3224 = _3112;
            _3226 = _3114;
            _3228 = _3116;
            _3230 = _3118;
            _3232 = _3120;
        }
        else
        {
            float _3247 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
            float _3248 = _3247 * _2108;
            float _3249 = _3247 * _2109;
            float _3250 = _3247 * _2110;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3127 < ((_3125 >> 12u) & 15u))
            {
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3361 = _3110;
                float _3362 = _3112;
                float _3363 = _3114;
                float _3364 = _3116;
                float _3365 = _3118;
                float _3366 = _3120;
                uint _3367 = _3127;
                uint _3376;
                bool _3377;
                for (;;)
                {
                    _3376 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3367 << 2u)) >> 2u)).x;
                    _3377 = _3376 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3377)
                    {
                        frontier_phi_72_pred = _3366;
                        frontier_phi_72_pred_1 = _3365;
                        frontier_phi_72_pred_2 = _3364;
                        frontier_phi_72_pred_3 = _3363;
                        frontier_phi_72_pred_4 = _3362;
                        frontier_phi_72_pred_5 = _3361;
                    }
                    else
                    {
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3573 = _3361;
                        float _3574 = _3362;
                        float _3575 = _3363;
                        float _3576 = _3364;
                        float _3577 = _3365;
                        float _3578 = _3366;
                        uint _3579 = _3376;
                        uint _3580;
                        vec4 _3605;
                        float _3606;
                        vec4 _3621;
                        vec3 _3633;
                        vec4 _3648;
                        vec4 _3663;
                        float _3709;
                        bool _3710;
                        for (;;)
                        {
                            uint _3590 = ((_3367 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3579));
                            _3580 = (_3579 + 4294967295u) & _3579;
                            uint _3592 = _3590 * 40u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3606 = _3605.w;
                            uint _3608 = (_3590 * 40u) + 4u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3590 * 40u) + 8u;
                            _3633 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x));
                            uint _3635 = (_3590 * 40u) + 16u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3590 * 40u) + 20u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3590 * 40u) + 24u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3684 = (_3590 * 40u) + 28u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            _3709 = fma(_2110, _3697.z, fma(_2109, _3697.y, _3697.x * _2108)) + _3697.w;
                            _3710 = !((fma(_2110, _3678.z, fma(_2109, _3678.y, _3678.x * _2108)) + _3678.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3710)
                            {
                                float _3737 = _3605.x - _2108;
                                float _3738 = _3605.y - _2109;
                                float _3739 = _3605.z - _2110;
                                float _3740 = dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739));
                                float _3743 = inversesqrt(_3740);
                                float _3744 = _3743 * _3737;
                                float _3745 = _3743 * _3738;
                                float _3746 = _3743 * _3739;
                                float _3750 = 1.0 - (_3740 / (_3606 * _3606));
                                float _4935 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3755 = sqrt(_3740) * _3621.w;
                                float _3757 = 1.39999997615814208984375 / (_3755 + 1.39999997615814208984375);
                                float _3758 = _3757 * _3757;
                                float _3761 = ((1.0 - _3758) * dot(vec3(_3744, _3745, _3746), vec3(_995, _998, _1001))) + _3758;
                                float _3764 = _3755 * _3755;
                                float _3768 = (fma(_2110, _3648.z, fma(_2109, _3648.y, _3648.x * _2108)) + _3648.w) / _3709;
                                float _3769 = (fma(_2110, _3663.z, fma(_2109, _3663.y, _3663.x * _2108)) + _3663.w) / _3709;
                                float _3773 = 1.0 - dot(vec2(_3768, _3769), vec2(_3768, _3769));
                                float _4951 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3775 = _3774 * (((isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0))) * _3751) / ((_3764 * 0.699999988079071044921875) + 1.0));
                                float _3787 = exp2(log2(1.0 / ((_3764 * 3.5) + 5.0)) * 0.25);
                                float _3788 = 1.0 - _1055;
                                float _3795 = sqrt(1.0 - ((1.0 - (_3788 * _3788)) * (1.0 - (_3787 * _3787))));
                                float _3796 = _3795 * _3795;
                                float _3797 = _3796 * _3796;
                                float _3798 = _3744 - _3248;
                                float _3799 = _3745 - _3249;
                                float _3800 = _3746 - _3250;
                                float _3804 = inversesqrt(dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800)));
                                float _3808 = dot(vec3(_995, _998, _1001), vec3((-0.0) - _3248, (-0.0) - _3249, (-0.0) - _3250));
                                float _4962 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3812 = dot(vec3(_995, _998, _1001), vec3(_3804 * _3798, _3804 * _3799, _3804 * _3800));
                                float _4973 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3819 = ((_3815 * _3815) * (_3797 + (-1.0))) + 1.0;
                                float _3820 = _3757 * _3796;
                                float _3821 = _3820 * _3820;
                                float _3827 = ((1.0 - _3821) * dot(vec3(_995, _998, _1001), vec3(_3744, _3745, _3746))) + _3821;
                                float _4984 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3829 = 1.0 - _3796;
                                float _3839 = (0.5 / (((_3828 * ((_3811 * _3829) + _3796)) + 9.9999999392252902907785028219223e-09) + (((_3828 * _3829) + _3796) * _3811))) * _3828;
                                float _4995 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3849 = (_3774 * _3751) * (((_3797 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3819 * _3819) * ((_3764 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3775 * _3621.y;
                                frontier_phi_78_pred_1 = _3775 * _3621.x;
                                frontier_phi_78_pred_2 = _3849 * _3633.z;
                                frontier_phi_78_pred_3 = _3849 * _3633.y;
                                frontier_phi_78_pred_4 = _3849 * _3633.x;
                                frontier_phi_78_pred_5 = _3775 * _3621.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3857 = frontier_phi_78_pred;
                            _3856 = frontier_phi_78_pred_1;
                            _3855 = frontier_phi_78_pred_2;
                            _3854 = frontier_phi_78_pred_3;
                            _3853 = frontier_phi_78_pred_4;
                            _3858 = frontier_phi_78_pred_5;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            if (_3580 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3580;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3565;
                        frontier_phi_72_pred_1 = _3564;
                        frontier_phi_72_pred_2 = _3563;
                        frontier_phi_72_pred_3 = _3562;
                        frontier_phi_72_pred_4 = _3561;
                        frontier_phi_72_pred_5 = _3560;
                    }
                    _3233 = frontier_phi_72_pred;
                    _3231 = frontier_phi_72_pred_1;
                    _3229 = frontier_phi_72_pred_2;
                    _3227 = frontier_phi_72_pred_3;
                    _3225 = frontier_phi_72_pred_4;
                    _3223 = frontier_phi_72_pred_5;
                    uint _3368 = _3367 + 1u;
                    if (_3368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3361 = _3223;
                        _3362 = _3225;
                        _3363 = _3227;
                        _3364 = _3229;
                        _3365 = _3231;
                        _3366 = _3233;
                        _3367 = _3368;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3233;
                frontier_phi_60_61_ladder_1 = _3231;
                frontier_phi_60_61_ladder_2 = _3227;
                frontier_phi_60_61_ladder_3 = _3225;
                frontier_phi_60_61_ladder_4 = _3223;
                frontier_phi_60_61_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_60_61_ladder = _3120;
                frontier_phi_60_61_ladder_1 = _3118;
                frontier_phi_60_61_ladder_2 = _3114;
                frontier_phi_60_61_ladder_3 = _3112;
                frontier_phi_60_61_ladder_4 = _3110;
                frontier_phi_60_61_ladder_5 = _3116;
            }
            _3222 = frontier_phi_60_61_ladder_4;
            _3224 = frontier_phi_60_61_ladder_3;
            _3226 = frontier_phi_60_61_ladder_2;
            _3228 = frontier_phi_60_61_ladder_5;
            _3230 = frontier_phi_60_61_ladder_1;
            _3232 = frontier_phi_60_61_ladder;
        }
        float _3237 = isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0));
        _3043 = (_3237 * _3228) + _2574;
        _3045 = (_3237 * _3230) + _2576;
        _3047 = (_3237 * _3232) + _2578;
        _3049 = ((_3222 * 0.039999999105930328369140625) * _3237) + _2897;
        _3051 = ((_3224 * 0.039999999105930328369140625) * _3237) + _2899;
        _3053 = ((_3226 * 0.039999999105930328369140625) * _3237) + _2901;
    }
    else
    {
        _3043 = _2574;
        _3045 = _2576;
        _3047 = _2578;
        _3049 = _2897;
        _3051 = _2899;
        _3053 = _2901;
    }
    float _5011 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _5022 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5033 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    uint _3073 = _281 + 6u;
    float _3081 = _976 / cbSceneParam._m0[86u].x;
    float _3082 = _977 / cbSceneParam._m0[86u].y;
    vec4 _3096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3098 = _3096.x;
    float _3099 = _3096.y;
    float _3100 = _3096.z;
    float _3101 = _3096.w;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _3135 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _3136 = _3135 / _911;
        float _3147 = _3136 * _961;
        float _3148 = _962 * _3136;
        float _3149 = (-0.0) - _3148;
        float _3150 = _3136 * _963;
        float _3152 = (cbSceneParam._m0[77u].w * _3149) / _3135;
        float _3153 = _3152 + cbSceneParam._m0[79u].w;
        float _3154 = cbSceneParam._m0[79u].w - _3148;
        float _3160 = sqrt(((_3147 * _3147) + (_3148 * _3148)) + (_3150 * _3150));
        float _3163 = (1.0 - (cbSceneParam._m0[77u].w / _3135)) * _3160;
        float _3168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3323;
        if (abs((_3149 - _3152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3323 = ((((_3153 > 0.0) ? exp2(_3168 * _3153) : (2.0 - exp2(_3170 * _3153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3163;
        }
        else
        {
            float _3283 = 1.0 / cbSceneParam._m0[80u].x;
            float _3284 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : max(_3153, _3154));
            float _3285 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : min(_3153, _3154));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            _3323 = ((abs(_3160 / _3149) * cbSceneParam._m0[80u].y) * ((((_3294 - _3295) * 2.0) - ((exp2(_3168 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0)))) - exp2(_3168 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))))) * _3283)) - ((exp2(_3170 * _3294) - exp2(_3170 * _3295)) * _3283))) + (_3163 * cbSceneParam._m0[80u].z);
        }
        vec4 _3325 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, 1.0), 0.0);
        float _3334 = exp2((_3323 * (-1.44269502162933349609375)) * (1.0 - _3325.w));
        float _3335 = log2(_3334);
        float _3351 = log2(_3101);
        _3172 = (exp2(_3351 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].x)) * _3325.x) / cbSceneParam._m0[78u].x)) + _3098;
        _3174 = (exp2(_3351 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].y)) * _3325.y) / cbSceneParam._m0[78u].y)) + _3099;
        _3176 = (exp2(_3351 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].z)) * _3325.z) / cbSceneParam._m0[78u].z)) + _3100;
        _3178 = _3334 * _3101;
    }
    else
    {
        _3172 = _3098;
        _3174 = _3099;
        _3176 = _3100;
        _3178 = _3101;
    }
    float _3190 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3191 = _3190 == 3.0;
    float _3192 = log2(_3178);
    float _3199 = exp2(_3192 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_3043 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1039))) + ((_3049 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3200 = exp2(_3192 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_3045 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1039))) + ((_3051 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3201 = exp2(_3192 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3047 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1039))) + ((_3053 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3210 = (_3190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3210 * (_3191 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3172)));
    SV_Target.y = _3210 * (_3191 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3174)));
    SV_Target.z = _3210 * (_3191 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3176)));
    SV_Target.w = cbInstanceData._m0[_3073].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3073].w;
}


