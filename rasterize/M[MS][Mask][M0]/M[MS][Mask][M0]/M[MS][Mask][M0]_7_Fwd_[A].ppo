#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1204;
float _3567;
float _3568;
float _3569;
float _3570;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3579 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _419) + _472;
    float _484 = ((((_451.x - _470) * _419) + _470) * 2.0) + (-1.0);
    float _486 = ((((_451.y - _471) * _419) + _471) * 2.0) + (-1.0);
    float _487 = dot(vec2(_484, _486), vec2(_484, _486));
    float _3590 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _521 = (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _535 = _533.x;
    float _536 = 1.0 - _535;
    float _564 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_535 - _536) * cbMtdParam._m0[24u].y) + _536) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3601 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _573 = ((((cbMtdParam._m0[10u].x - _432) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _565) + _432;
    float _574 = ((((cbMtdParam._m0[10u].y - _435) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _565) + _435;
    float _575 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _438)) * _565) + _438;
    float _579 = (cbMtdParam._m0[19u].w * (_508.z - _481)) + _481;
    float _583 = ((cbMtdParam._m0[23u].y - _579) * _565) + _579;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _608 = (_602.x * 2.0) + (-1.0);
    float _609 = (_602.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3612 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _626 = (_565 * (((cbMtdParam._m0[22u].z * _520) - _520) + _608)) + _520;
    float _627 = (_565 * (((cbMtdParam._m0[22u].z * _521) - _521) + _609)) + _521;
    float _628 = (_565 * (sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) - _492)) + _492;
    float _630 = cbMtdParam._m0[22u].x + _508.w;
    float _633 = fma(_628, _232 * NORMAL.x, fma(_627, _239 * TANGENT.x, (_225 * _217) * _626));
    float _636 = fma(_628, _232 * NORMAL.y, fma(_627, _239 * TANGENT.y, (_225 * _218) * _626));
    float _639 = fma(_628, _232 * NORMAL.z, fma(_627, _239 * TANGENT.z, (_225 * _219) * _626));
    float _643 = inversesqrt(dot(vec3(_633, _636, _639), vec3(_633, _636, _639)));
    float _644 = _643 * _633;
    float _645 = _643 * _636;
    float _646 = _643 * _639;
    float _3623 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _647 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3645 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3656 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3667 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    vec4 _729 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _731 = _729.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _885 = sqrt(((_715 * _715) + (_716 * _716)) + (_717 * _717));
        float _891 = (cbMatDynParam._m0[5u].x * _885) + cbMatDynParam._m0[5u].y;
        float _3678 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _896 = (cbMatDynParam._m0[5u].z * _885) + cbMatDynParam._m0[5u].w;
        float _3689 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) - _892)) + _892) < ((_731 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _742 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _743 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _761 = fma(_646, cbSceneParam._m0[5u].z, fma(_645, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _644));
    float _764 = fma(_646, cbSceneParam._m0[6u].z, fma(_645, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _644));
    float _767 = fma(_646, cbSceneParam._m0[7u].z, fma(_645, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _644));
    uint _780 = _245 + 9u;
    uint _781 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _787 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_781].x;
    float _788 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_781].y;
    float _789 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_781].z;
    float _3700 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    vec4 _801 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _742, cbSceneParam._m0[86u].y * _743));
    float _805 = ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * TEXCOORD_5.w) * _801.x;
    float _806 = dot(vec3(_644, _645, _646), vec3(_722, _723, _724));
    float _809 = _806 * 2.0;
    float _813 = (_809 * _644) - _722;
    float _814 = (_809 * _645) - _723;
    float _815 = (_809 * _646) - _724;
    float _819 = abs(dot(vec3(_722, _723, _724), vec3(_644, _645, _646)));
    float _3733 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _821 = sqrt(_647);
    float _834 = exp2((_821 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_821 * 3.0));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1203;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _928 = fma(_874, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866));
        float _932 = fma(_874, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866));
        float _936 = fma(_874, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866));
        float _961 = _866 + _644;
        float _962 = _870 + _645;
        float _963 = _874 + _646;
        float _973 = fma(_963, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961)) - _928;
        float _974 = fma(_963, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961)) - _932;
        float _975 = fma(_963, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961)) - _936;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_928 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_932 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[34u].z) + ((((((_936 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1031 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_997.x + (-0.5));
        float _1033 = _1031 * (_997.y + (-0.5));
        float _1034 = _1031 * (_997.z + (-0.5));
        float _1041 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1004.x + (-0.5));
        float _1043 = _1041 * (_1004.y + (-0.5));
        float _1044 = _1041 * (_1004.z + (-0.5));
        float _1051 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1011.x + (-0.5));
        float _1053 = _1051 * (_1011.y + (-0.5));
        float _1054 = _1051 * (_1011.z + (-0.5));
        float _1061 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1018.x + (-0.5));
        float _1063 = _1061 * (_1018.y + (-0.5));
        float _1064 = _1061 * (_1018.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1085 = (dot(vec3(_644, _645, _646), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1095 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3781 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1097 + 1.0))) + _1102) * _1065;
        float _1112 = _1033 * 0.5;
        float _1113 = _1043 * 0.5;
        float _1114 = _1053 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_644, _645, _646), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3814 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1139 + 1.0))) + _1144) * _1066;
        float _1154 = _1034 * 0.5;
        float _1155 = _1044 * 0.5;
        float _1156 = _1054 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_644, _645, _646), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3847 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1181 + 1.0))) + _1186) * _1067;
        _1203 = _1034;
        _1205 = _1033;
        _1206 = _1032;
        _1207 = _1044;
        _1208 = _1043;
        _1209 = _1042;
        _1210 = _1054;
        _1211 = _1053;
        _1212 = _1052;
        _1213 = _1067;
        _1214 = _1066;
        _1215 = _1065;
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _1204;
        _1205 = _1204;
        _1206 = _1204;
        _1207 = _1204;
        _1208 = _1204;
        _1209 = _1204;
        _1210 = _1204;
        _1211 = _1204;
        _1212 = _1204;
        _1213 = _1204;
        _1214 = _1204;
        _1215 = _1204;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_874, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _866));
        float _1250 = fma(_874, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _866));
        float _1254 = fma(_874, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _866));
        float _1277 = _866 + _644;
        float _1278 = _870 + _645;
        float _1279 = _874 + _646;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_644, _645, _646), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3910 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_644, _645, _646), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3943 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_644, _645, _646), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3976 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1204;
        _1516 = _1204;
        _1517 = _1204;
        _1518 = _1204;
        _1519 = _1204;
        _1520 = _1204;
        _1521 = _1204;
        _1522 = _1204;
        _1523 = _1204;
        _1524 = _1204;
        _1525 = _1204;
        _1526 = _1204;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1216)) + _1216;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1217)) + _1217;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1218)) + _1218;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _813 * 0.5;
    float _1584 = _814 * 0.5;
    float _1585 = _815 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1203, _1207, _1210, _1213));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _647);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_874, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_874, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_874, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_815, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813));
        float _1715 = fma(_815, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813));
        float _1718 = fma(_815, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1746 = frontier_phi_17_15_ladder;
        }
        float _1948;
        if (_1715 > 0.0)
        {
            _1948 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1948 = frontier_phi_26_22_ladder;
        }
        float _2191;
        if (_1718 > 0.0)
        {
            _2191 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2191 = frontier_phi_38_33_ladder;
        }
        float _2193 = isnan(_1948) ? _1746 : (isnan(_1746) ? _1948 : min(_1746, _1948));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1712) + _1701;
        float _2199 = (_2194 * _1715) + _1705;
        float _2200 = (_2194 * _1718) + _1709;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_16_38_ladder = _2324.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2324.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2324.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_16_38_ladder_2;
        _1736 = frontier_phi_16_38_ladder_1;
        _1738 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_813, _814, _815), _1652);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _647);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1798 = fma(_874, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866)) + cbModelParam._m0[21u].w;
        float _1802 = fma(_874, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866)) + cbModelParam._m0[22u].w;
        float _1806 = fma(_874, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866)) + cbModelParam._m0[23u].w;
        float _1809 = fma(_815, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813));
        float _1812 = fma(_815, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813));
        float _1815 = fma(_815, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813));
        float _1953;
        if (_1809 > 0.0)
        {
            _1953 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1953 = frontier_phi_28_24_ladder;
        }
        float _2218;
        if (_1812 > 0.0)
        {
            _2218 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2218 = frontier_phi_40_35_ladder;
        }
        float _2423;
        if (_1815 > 0.0)
        {
            _2423 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2423 = frontier_phi_49_46_ladder;
        }
        float _2425 = isnan(_2218) ? _1953 : (isnan(_1953) ? _2218 : min(_1953, _2218));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1809) + _1798;
        float _2431 = (_2426 * _1812) + _1802;
        float _2432 = (_2426 * _1815) + _1806;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2433;
        float _2436 = _2433 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2432 > _2436) || ((_2432 < _2434) || ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 < _2434) || (_2430 > _2436))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2432, cbModelParam._m0[17u].z, fma(_2431, cbModelParam._m0[17u].y, _2430 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2432, cbModelParam._m0[18u].z, fma(_2431, cbModelParam._m0[18u].y, _2430 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2432, cbModelParam._m0[19u].z, fma(_2431, cbModelParam._m0[19u].y, _2430 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_25_49_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1834 = frontier_phi_25_49_ladder_2;
        _1836 = frontier_phi_25_49_ladder_1;
        _1838 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_813, _814, _815), _1743);
        _1834 = _1818.x * cbModelParam._m0[1u].z;
        _1836 = _1818.y * cbModelParam._m0[1u].z;
        _1838 = _1818.z * cbModelParam._m0[1u].z;
    }
    float _1850 = ((((1.0 - _834) * ((_821 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_834 * _821)) * _805;
    float _1851 = _1850 * ((cbModelParam._m0[1u].w * (_1834 - _1734)) + _1734);
    float _1852 = _1850 * ((cbModelParam._m0[1u].w * (_1836 - _1736)) + _1736);
    float _1853 = _1850 * ((cbModelParam._m0[1u].w * (_1838 - _1738)) + _1738);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1851 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1851 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1851 * cbSceneParam._m0[91u].x));
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _805 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1907 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1911 = _1874 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_644, _645, _646));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_644, _645, _646));
    float _4112 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4123 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1891].x * _1897) * _1932) + ((cbLight._m0[_1901].x * _1907) * _1930);
    float _1940 = ((_1897 * cbLight._m0[_1891].y) * _1932) + ((_1907 * cbLight._m0[_1901].y) * _1930);
    float _1941 = ((_1897 * cbLight._m0[_1891].z) * _1932) + ((_1907 * cbLight._m0[_1901].z) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1947)
    {
        _1958 = _1939;
        _1960 = _1940;
        _1962 = _1941;
    }
    else
    {
        uint _1966 = _1874 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4134 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1985 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1939;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1940;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1941;
    }
    bool _1965 = _1945.y == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1965)
    {
        _2003 = _1958;
        _2005 = _1960;
        _2007 = _1962;
    }
    else
    {
        uint _2162 = _1874 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4150 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2181 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2003 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1958;
        _2005 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1960;
        _2007 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1962;
    }
    uint _2010 = _1874 + 8u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _647) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1874].x + _722;
    float _2026 = cbLight._m0[_1874].y + _723;
    float _2027 = cbLight._m0[_1874].z + _724;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_1874].xyz));
    float _4166 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _2039 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2040 = dot(vec3(_644, _645, _646), vec3(_2032, _2033, _2034));
    float _4188 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2032, _2033, _2034));
    float _4199 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2024 * _2024;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2024;
    float _2075 = (0.5 / (((_2039 * ((_2038 * _2064) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2064) + _2024) * _2038))) * _2038;
    float _4210 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    uint _2088 = _1874 + 9u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _647) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1911].x + _722;
    float _2102 = cbLight._m0[_1911].y + _723;
    float _2103 = cbLight._m0[_1911].z + _724;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_1911].xyz));
    float _4221 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2115 = dot(vec3(_644, _645, _646), vec3(_2108, _2109, _2110));
    float _4232 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2108, _2109, _2110));
    float _4243 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2100 * _2100;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2100;
    float _2147 = (0.5 / (((_2039 * ((_2114 * _2137) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2137) + _2100) * _2114))) * _2114;
    float _4254 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    float _2159 = (((_2136 * cbLight._m0[_2088].x) * _2149) * _1897) + (((_2063 * cbLight._m0[_2010].x) * _2077) * _1907);
    float _2160 = (((_2136 * cbLight._m0[_2088].y) * _2149) * _1897) + (((_2063 * cbLight._m0[_2010].y) * _2077) * _1907);
    float _2161 = (((_2136 * cbLight._m0[_2088].z) * _2149) * _1897) + (((_2063 * cbLight._m0[_2010].z) * _2077) * _1907);
    float _2223;
    float _2225;
    float _2227;
    if (_1947)
    {
        _2223 = _2159;
        _2225 = _2160;
        _2227 = _2161;
    }
    else
    {
        uint _2229 = _1874 + 2u;
        uint _2233 = _1874 + 10u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _647) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _722;
        float _2250 = cbLight._m0[_2229].y + _723;
        float _2251 = cbLight._m0[_2229].z + _724;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2229].xyz));
        float _4265 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2263 = dot(vec3(_644, _645, _646), vec3(_2256, _2257, _2258));
        float _4276 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4287 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2284 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2285 = 1.0 - _2248;
        float _2295 = (0.5 / (((_2039 * ((_2262 * _2285) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2285) + _2248) * _2262))) * _2262;
        float _4298 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2297 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2298 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2223 = (((_2284 * cbLight._m0[_2233].x) * _2297) * _2298) + _2159;
        _2225 = (((_2284 * cbLight._m0[_2233].y) * _2297) * _2298) + _2160;
        _2227 = (((_2284 * cbLight._m0[_2233].z) * _2297) * _2298) + _2161;
    }
    float _2333;
    float _2335;
    float _2337;
    if (_1965)
    {
        _2333 = _2223;
        _2335 = _2225;
        _2337 = _2227;
    }
    else
    {
        uint _2344 = _1874 + 3u;
        uint _2348 = _1874 + 11u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _647) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _722;
        float _2365 = cbLight._m0[_2344].y + _723;
        float _2366 = cbLight._m0[_2344].z + _724;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2344].xyz));
        float _4314 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2378 = dot(vec3(_644, _645, _646), vec3(_2371, _2372, _2373));
        float _4325 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4336 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2400 = 1.0 - _2363;
        float _2410 = (0.5 / (((_2039 * ((_2377 * _2400) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2400) + _2363) * _2377))) * _2377;
        float _4347 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2333 = (((_2399 * cbLight._m0[_2348].x) * _2412) * _2413) + _2223;
        _2335 = (((_2399 * cbLight._m0[_2348].y) * _2412) * _2413) + _2225;
        _2337 = (((_2399 * cbLight._m0[_2348].z) * _2412) * _2413) + _2227;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1872.y == 0u)
    {
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2488;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2488;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2488;
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _743) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _742) / _2504)));
        float _2525 = (log2(_2491 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2805)
                {
                    frontier_phi_66_pred = _2789;
                    frontier_phi_66_pred_1 = _2794;
                    frontier_phi_66_pred_2 = _2793;
                    frontier_phi_66_pred_3 = _2792;
                    frontier_phi_66_pred_4 = _2791;
                    frontier_phi_66_pred_5 = _2790;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2804;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2795 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _2489;
                        float _3001 = _2960.y - _2490;
                        float _3002 = _2960.z - _2491;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_761, _764, _767), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4373 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _2489;
                        float _3036 = (-0.0) - _2490;
                        float _3037 = (-0.0) - _2491;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3052 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3053 = 1.0 - _821;
                        float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                        float _3061 = _3060 * _3060;
                        float _3062 = _3061 * _3061;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3073 = dot(vec3(_761, _764, _767), vec3(_3042, _3043, _3044));
                        float _4389 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3077 = dot(vec3(_761, _764, _767), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                        float _4400 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                        float _3085 = _3020 * _3061;
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3010) + _3086;
                        float _4411 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3091 = 1.0 - _3061;
                        float _3101 = (0.5 / (((_3090 * ((_3076 * _3091) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3061) * _3076))) * _3090;
                        float _4422 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3112 = (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3084 * _3084) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2864 = (_3031 * _2979.x) + _2937;
                        _2865 = (_3031 * _2979.y) + _2938;
                        _2866 = (_3031 * _2979.z) + _2939;
                        _2861 = (_3112 * _2996.x) + _2934;
                        _2862 = (_3112 * _2996.y) + _2935;
                        _2863 = (_3112 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_66_pred = _2861;
                    frontier_phi_66_pred_1 = _2866;
                    frontier_phi_66_pred_2 = _2865;
                    frontier_phi_66_pred_3 = _2864;
                    frontier_phi_66_pred_4 = _2863;
                    frontier_phi_66_pred_5 = _2862;
                }
                _2637 = frontier_phi_66_pred;
                _2647 = frontier_phi_66_pred_1;
                _2645 = frontier_phi_66_pred_2;
                _2643 = frontier_phi_66_pred_3;
                _2641 = frontier_phi_66_pred_4;
                _2639 = frontier_phi_66_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2637;
                    _2790 = _2639;
                    _2791 = _2641;
                    _2792 = _2643;
                    _2793 = _2645;
                    _2794 = _2647;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2653) & _2535) == 0u)
        {
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
            float _2783 = _2782 * _2489;
            float _2784 = _2782 * _2490;
            float _2785 = _2782 * _2491;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2917 = _2636;
                float _2918 = _2638;
                float _2919 = _2640;
                float _2920 = _2642;
                float _2921 = _2644;
                float _2922 = _2646;
                uint _2923 = _2653;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2933)
                    {
                        frontier_phi_77_pred = _2922;
                        frontier_phi_77_pred_1 = _2921;
                        frontier_phi_77_pred_2 = _2920;
                        frontier_phi_77_pred_3 = _2919;
                        frontier_phi_77_pred_4 = _2918;
                        frontier_phi_77_pred_5 = _2917;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        float _3144 = _2922;
                        uint _3145 = _2932;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3230;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3156 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3156 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3156 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3156 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_2491, _3264.z, fma(_2490, _3264.y, _3264.x * _2489)) + _3264.w;
                            _3277 = !((fma(_2491, _3245.z, fma(_2490, _3245.y, _3245.x * _2489)) + _3245.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3171.x - _2489;
                                float _3305 = _3171.y - _2490;
                                float _3306 = _3171.z - _2491;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3172 * _3172));
                                float _4433 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3322 = sqrt(_3307) * _3187.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_761, _764, _767))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_2491, _3214.z, fma(_2490, _3214.y, _3214.x * _2489)) + _3214.w) / _3276;
                                float _3336 = (fma(_2491, _3230.z, fma(_2490, _3230.y, _3230.x * _2489)) + _3230.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4449 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _821;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2783;
                                float _3366 = _3312 - _2784;
                                float _3367 = _3313 - _2785;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_761, _764, _767), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4460 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3379 = dot(vec3(_761, _764, _767), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4471 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_761, _764, _767), vec3(_3311, _3312, _3313))) + _3388;
                                float _4482 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4493 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3342 * _3187.y;
                                frontier_phi_83_pred_1 = _3342 * _3187.x;
                                frontier_phi_83_pred_2 = _3416 * _3199.z;
                                frontier_phi_83_pred_3 = _3416 * _3199.y;
                                frontier_phi_83_pred_4 = _3416 * _3199.x;
                                frontier_phi_83_pred_5 = _3342 * _3187.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3424 = frontier_phi_83_pred;
                            _3423 = frontier_phi_83_pred_1;
                            _3422 = frontier_phi_83_pred_2;
                            _3421 = frontier_phi_83_pred_3;
                            _3420 = frontier_phi_83_pred_4;
                            _3425 = frontier_phi_83_pred_5;
                            _3129 = _3423 + _3142;
                            _3130 = _3424 + _3143;
                            _3131 = _3425 + _3144;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3131;
                        frontier_phi_77_pred_1 = _3130;
                        frontier_phi_77_pred_2 = _3129;
                        frontier_phi_77_pred_3 = _3128;
                        frontier_phi_77_pred_4 = _3127;
                        frontier_phi_77_pred_5 = _3126;
                    }
                    _2768 = frontier_phi_77_pred;
                    _2766 = frontier_phi_77_pred_1;
                    _2764 = frontier_phi_77_pred_2;
                    _2762 = frontier_phi_77_pred_3;
                    _2760 = frontier_phi_77_pred_4;
                    _2758 = frontier_phi_77_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2758;
                        _2918 = _2760;
                        _2919 = _2762;
                        _2920 = _2764;
                        _2921 = _2766;
                        _2922 = _2768;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2762;
                frontier_phi_58_59_ladder_1 = _2768;
                frontier_phi_58_59_ladder_2 = _2766;
                frontier_phi_58_59_ladder_3 = _2764;
                frontier_phi_58_59_ladder_4 = _2760;
                frontier_phi_58_59_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_58_59_ladder = _2640;
                frontier_phi_58_59_ladder_1 = _2646;
                frontier_phi_58_59_ladder_2 = _2644;
                frontier_phi_58_59_ladder_3 = _2642;
                frontier_phi_58_59_ladder_4 = _2638;
                frontier_phi_58_59_ladder_5 = _2636;
            }
            _2757 = frontier_phi_58_59_ladder_5;
            _2759 = frontier_phi_58_59_ladder_4;
            _2761 = frontier_phi_58_59_ladder;
            _2763 = frontier_phi_58_59_ladder_3;
            _2765 = frontier_phi_58_59_ladder_2;
            _2767 = frontier_phi_58_59_ladder_1;
        }
        float _2772 = isnan(1.0) ? _805 : (isnan(_805) ? 1.0 : min(_805, 1.0));
        _2548 = (_2772 * _2763) + _2003;
        _2550 = (_2772 * _2765) + _2005;
        _2552 = (_2772 * _2767) + _2007;
        _2554 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2333;
        _2556 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2335;
        _2558 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2337;
    }
    else
    {
        _2548 = _2003;
        _2550 = _2005;
        _2552 = _2007;
        _2554 = _2333;
        _2556 = _2335;
        _2558 = _2337;
    }
    float _4509 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4520 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4531 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2575 = ((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2548 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _805))) + ((_2554 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2550 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _805))) + ((_2556 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2552 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _805))) + ((_2558 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    uint _2578 = _245 + 6u;
    float _2586 = _742 / cbSceneParam._m0[86u].x;
    float _2587 = _743 / cbSceneParam._m0[86u].y;
    vec4 _2601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2603 = _2601.x;
    float _2604 = _2601.y;
    float _2605 = _2601.z;
    float _2606 = _2601.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2662 = _2661 / _665;
        float _2673 = _2662 * _715;
        float _2674 = _716 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2677 = _2662 * _717;
        float _2679 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2674;
        float _2687 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2675 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2820 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2874 = ((abs(_2687 / _2675) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2697 * _2829) - exp2(_2697 * _2830)) * _2818))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2606);
        _2699 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2603;
        _2701 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2604;
        _2703 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2605;
        _2705 = _2885 * _2606;
    }
    else
    {
        _2699 = _2603;
        _2701 = _2604;
        _2703 = _2605;
        _2705 = _2606;
    }
    bool _2912;
    vec4 _2715;
    vec4 _2737;
    float _2739;
    float _2743;
    float _2744;
    float _2745;
    float _2746;
    bool _2756;
    for (;;)
    {
        _2715 = cbMatDynParam._m0[0u];
        float _2717 = roundEven(_2715.y);
        bool _2718 = _2717 == 3.0;
        float _2719 = log2(_2705);
        float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * _2575;
        float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * _2576;
        float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * _2577;
        float _2735 = _731 + (-0.5);
        _2737 = cbMtdParam._m0[1u];
        _2739 = _2737.y * _2735;
        float _2742 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2743 = _2742 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
        _2744 = _2742 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
        _2745 = _2742 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
        _2746 = _2735 * 0.999000012874603271484375;
        _2756 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2756)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2746) < 0.5)
            {
                _2912 = true;
                break;
            }
        }
        uint _2853 = _780 + uint(_2715.w);
        if ((cbInstanceData._m0[_2853].w < 1.0) && ((cbInstanceData._m0[_2853].w + _2746) < 0.5))
        {
            _2912 = true;
            break;
        }
        if ((_2739 + 1.0) < _2737.x)
        {
            _2912 = true;
            break;
        }
        _2912 = false;
        break;
    }
    float _3117;
    if (_2912)
    {
        discard_state = true;
        _3117 = 0.0;
    }
    else
    {
        _3117 = cbInstanceData._m0[_2578].w;
    }
    SV_Target.x = _2743;
    SV_Target.y = _2744;
    SV_Target.z = _2745;
    SV_Target.w = _3117;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2578].w;
    discard_exit();
}


