#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1208;
float _3852;
float _3853;
float _3854;
float _3855;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3864 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _427 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_414 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _430 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_414 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _433 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_414 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _414) + _472;
    float _484 = ((((_451.x - _470) * _414) + _470) * 2.0) + (-1.0);
    float _486 = ((((_451.y - _471) * _414) + _471) * 2.0) + (-1.0);
    float _487 = dot(vec2(_484, _486), vec2(_484, _486));
    float _3875 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _521 = (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    float _524 = fma(_492, _226, fma(_521, _233, _520 * _219));
    float _527 = fma(_492, _227, fma(_521, _234, _520 * _220));
    float _530 = fma(_492, _228, fma(_521, _235, _520 * _221));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) * cbMtdParam._m0[21u].z);
    float _3886 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _578 = (_571 * (cbMtdParam._m0[17u].x - _427)) + _427;
    float _579 = (_571 * (cbMtdParam._m0[17u].y - _430)) + _430;
    float _580 = (_571 * (cbMtdParam._m0[17u].z - _433)) + _433;
    float _584 = (cbMtdParam._m0[19u].w * (_508.z - _481)) + _481;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3897 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _614 = ((_597.z - _584) * _571) + _584;
    float _624 = ((sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) - _492) * _571) + _492;
    float _627 = (((_604 - _520) * _571) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _628 = (((_605 - _521) * _571) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _632 = cbMtdParam._m0[22u].x + _508.w;
    float _635 = fma(_624, _226, fma(_628, _233, _627 * _219));
    float _638 = fma(_624, _227, fma(_628, _234, _627 * _220));
    float _641 = fma(_624, _228, fma(_628, _235, _627 * _221));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    float _646 = _645 * _635;
    float _647 = _645 * _638;
    float _648 = _645 * _641;
    float _3908 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _649 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3930 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3941 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3952 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _667 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _718 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _708);
    float _719 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _708);
    float _720 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _708);
    float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
    float _725 = _718 * _724;
    float _726 = _719 * _724;
    float _727 = _720 * _724;
    vec4 _732 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _734 = _732.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _888 = sqrt(((_718 * _718) + (_719 * _719)) + (_720 * _720));
        float _894 = (cbMatDynParam._m0[5u].x * _888) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _899 = (cbMatDynParam._m0[5u].z * _888) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _895)) + _895) < ((_734 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _745 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _746 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _764 = fma(_648, cbSceneParam._m0[5u].z, fma(_647, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _646));
    float _767 = fma(_648, cbSceneParam._m0[6u].z, fma(_647, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _646));
    float _770 = fma(_648, cbSceneParam._m0[7u].z, fma(_647, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _646));
    uint _783 = _238 + 9u;
    uint _784 = _783 + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_784].z;
    float _3985 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _745, cbSceneParam._m0[86u].y * _746));
    float _808 = ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * TEXCOORD_5.w) * _804.x;
    float _809 = dot(vec3(_646, _647, _648), vec3(_725, _726, _727));
    float _812 = _809 * 2.0;
    float _816 = (_812 * _646) - _725;
    float _817 = (_812 * _647) - _726;
    float _818 = (_812 * _648) - _727;
    float _822 = abs(dot(vec3(_725, _726, _727), vec3(_646, _647, _648)));
    float _4018 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _824 = sqrt(_649);
    float _837 = exp2((_824 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_824 * 3.0));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_877, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869));
        float _936 = fma(_877, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869));
        float _940 = fma(_877, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869));
        float _965 = _869 + _646;
        float _966 = _873 + _647;
        float _967 = _877 + _648;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _932;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _936;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _940;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_646, _647, _648), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4066 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_646, _647, _648), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4099 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_646, _647, _648), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4132 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1250 = fma(_877, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869));
        float _1254 = fma(_877, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869));
        float _1258 = fma(_877, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869));
        float _1281 = _869 + _646;
        float _1282 = _873 + _647;
        float _1283 = _877 + _648;
        float _1293 = fma(_1283, cbModelParam._m0[30u].z, fma(_1282, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281)) - _1250;
        float _1294 = fma(_1283, cbModelParam._m0[31u].z, fma(_1282, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281)) - _1254;
        float _1295 = fma(_1283, cbModelParam._m0[32u].z, fma(_1282, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281)) - _1258;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1250 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1254 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[35u].z) + ((((((_1258 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1349 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1316.x + (-0.5));
        float _1351 = _1349 * (_1316.y + (-0.5));
        float _1352 = _1349 * (_1316.z + (-0.5));
        float _1359 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1323.x + (-0.5));
        float _1361 = _1359 * (_1323.y + (-0.5));
        float _1362 = _1359 * (_1323.z + (-0.5));
        float _1369 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1330.x + (-0.5));
        float _1371 = _1369 * (_1330.y + (-0.5));
        float _1372 = _1369 * (_1330.z + (-0.5));
        float _1379 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1337.x + (-0.5));
        float _1381 = _1379 * (_1337.y + (-0.5));
        float _1382 = _1379 * (_1337.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_646, _647, _648), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4195 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1413 + 1.0))) + _1418) * _1383;
        float _1428 = _1351 * 0.5;
        float _1429 = _1361 * 0.5;
        float _1430 = _1371 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_646, _647, _648), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4228 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1455 + 1.0))) + _1460) * _1384;
        float _1470 = _1352 * 0.5;
        float _1471 = _1362 * 0.5;
        float _1472 = _1372 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_646, _647, _648), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4261 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1497 + 1.0))) + _1502) * _1385;
        _1519 = _1352;
        _1520 = _1351;
        _1521 = _1350;
        _1522 = _1362;
        _1523 = _1361;
        _1524 = _1360;
        _1525 = _1372;
        _1526 = _1371;
        _1527 = _1370;
        _1528 = _1385;
        _1529 = _1384;
        _1530 = _1383;
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = _1208;
        _1530 = _1208;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1220)) + _1220;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1221)) + _1221;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1222)) + _1222;
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1543));
    float _1587 = _816 * 0.5;
    float _1588 = _817 * 0.5;
    float _1589 = _818 * 0.5;
    float _1590 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1593 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1596 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1630;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1603 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1611 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1618 = dot(vec4(cbModelParam._m0[39u]), vec4(_1587, _1588, _1589, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1641;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1632 = dot(vec4(cbModelParam._m0[40u]), vec4(_1587, _1588, _1589, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1645 = (_1641 * cbModelParam._m0[1u].x) + (_1630 * (1.0 - cbModelParam._m0[1u].x));
    float _1655 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _649);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1655 : min(cbModelParam._m0[25u].z, _1655));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1704 = fma(_877, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869)) + cbModelParam._m0[13u].w;
        float _1708 = fma(_877, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869)) + cbModelParam._m0[14u].w;
        float _1712 = fma(_877, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869)) + cbModelParam._m0[15u].w;
        float _1715 = fma(_818, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816));
        float _1718 = fma(_818, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816));
        float _1721 = fma(_818, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816));
        float _1749;
        if (_1715 > 0.0)
        {
            _1749 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1749 = frontier_phi_17_15_ladder;
        }
        float _1919;
        if (_1718 > 0.0)
        {
            _1919 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1919 = frontier_phi_26_22_ladder;
        }
        float _2214;
        if (_1721 > 0.0)
        {
            _2214 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2214 = frontier_phi_38_33_ladder;
        }
        float _2216 = isnan(_1919) ? _1749 : (isnan(_1749) ? _1919 : min(_1749, _1919));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1715) + _1704;
        float _2222 = (_2217 * _1718) + _1708;
        float _2223 = (_2217 * _1721) + _1712;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1656);
            frontier_phi_16_38_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1737 = frontier_phi_16_38_ladder_2;
        _1739 = frontier_phi_16_38_ladder_1;
        _1741 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_816, _817, _818), _1656);
        _1737 = _1725.x * cbModelParam._m0[1u].y;
        _1739 = _1725.y * cbModelParam._m0[1u].y;
        _1741 = _1725.z * cbModelParam._m0[1u].y;
    }
    float _1745 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _649);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1745 : min(cbModelParam._m0[25u].w, _1745));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1800 = fma(_877, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869)) + cbModelParam._m0[21u].w;
        float _1804 = fma(_877, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869)) + cbModelParam._m0[22u].w;
        float _1808 = fma(_877, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869)) + cbModelParam._m0[23u].w;
        float _1811 = fma(_818, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816));
        float _1814 = fma(_818, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816));
        float _1817 = fma(_818, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816));
        float _1924;
        if (_1811 > 0.0)
        {
            _1924 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1924 = frontier_phi_28_24_ladder;
        }
        float _2241;
        if (_1814 > 0.0)
        {
            _2241 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2241 = frontier_phi_40_35_ladder;
        }
        float _2568;
        if (_1817 > 0.0)
        {
            _2568 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2568 = frontier_phi_50_47_ladder;
        }
        float _2570 = isnan(_2241) ? _1924 : (isnan(_1924) ? _2241 : min(_1924, _2241));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1811) + _1800;
        float _2576 = (_2571 * _1814) + _1804;
        float _2577 = (_2571 * _1817) + _1808;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1746);
            frontier_phi_25_50_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1836 = frontier_phi_25_50_ladder_2;
        _1838 = frontier_phi_25_50_ladder_1;
        _1840 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_816, _817, _818), _1746);
        _1836 = _1820.x * cbModelParam._m0[1u].z;
        _1838 = _1820.y * cbModelParam._m0[1u].z;
        _1840 = _1820.z * cbModelParam._m0[1u].z;
    }
    float _1852 = ((((1.0 - _837) * ((_824 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_837 * _824)) * _808;
    float _1853 = _1852 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1854 = _1852 * ((cbModelParam._m0[1u].w * (_1838 - _1739)) + _1739);
    float _1855 = _1852 * ((cbModelParam._m0[1u].w * (_1840 - _1741)) + _1741);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1853 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1853 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, _1853 * cbSceneParam._m0[91u].x));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1902 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1911 = _1898 / _1910;
    float _1912 = _1902 / _1910;
    float _1913 = _1906 / _1910;
    float _2060;
    float _2061;
    float _2062;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1940 = ((uint(_1913 > cbSceneParam._m0[59u].y) + uint(_1913 > cbSceneParam._m0[59u].x)) + uint(_1913 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1941 = _1940 + 43u;
        uint _1949 = _1940 + 44u;
        uint _1957 = _1940 + 45u;
        uint _1965 = _1940 + 46u;
        float _1976 = fma(_1910, cbSceneParam._m0[_1941].w, fma(_1906, cbSceneParam._m0[_1941].z, fma(_1902, cbSceneParam._m0[_1941].y, _1898 * cbSceneParam._m0[_1941].x)));
        float _1980 = fma(_1910, cbSceneParam._m0[_1949].w, fma(_1906, cbSceneParam._m0[_1949].z, fma(_1902, cbSceneParam._m0[_1949].y, _1898 * cbSceneParam._m0[_1949].x)));
        float _1988 = fma(_1910, cbSceneParam._m0[_1965].w, fma(_1906, cbSceneParam._m0[_1965].z, fma(_1902, cbSceneParam._m0[_1965].y, _1898 * cbSceneParam._m0[_1965].x)));
        float _1993 = cbSceneParam._m0[33u].z * _1988;
        float _1995 = cbSceneParam._m0[33u].w * _1988;
        float _1998 = fma(_1910, cbSceneParam._m0[_1957].w, fma(_1906, cbSceneParam._m0[_1957].z, fma(_1902, cbSceneParam._m0[_1957].y, _1898 * cbSceneParam._m0[_1957].x))) / _1988;
        float _2046 = (cbSceneParam._m0[33u].x - sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913))) * cbSceneParam._m0[33u].y;
        float _4387 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2053 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 + _1976) / _1988, (_1995 + _1980) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 + _1976) / _1988, (_1980 - _1993) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 - _1993) / _1988, (_1980 - _1995) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 - _1995) / _1988, (_1993 + _1980) / _1988), _1998), 0.0)).x), vec4(0.25)));
        _2060 = 1.0 - (_2053 * cbSceneParam._m0[34u].x);
        _2061 = 1.0 - (_2053 * cbSceneParam._m0[34u].y);
        _2062 = 1.0 - (_2053 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2060 = 1.0;
        _2061 = 1.0;
        _2062 = 1.0;
    }
    float _2126;
    float _2128;
    float _2130;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2114 = fma(_1910, cbSceneParam._m0[63u].w, fma(_1906, cbSceneParam._m0[63u].z, fma(_1902, cbSceneParam._m0[63u].y, _1898 * cbSceneParam._m0[63u].x)));
        float _2115 = fma(_1910, cbSceneParam._m0[60u].w, fma(_1906, cbSceneParam._m0[60u].z, fma(_1902, cbSceneParam._m0[60u].y, _1898 * cbSceneParam._m0[60u].x))) / _2114;
        float _2116 = fma(_1910, cbSceneParam._m0[61u].w, fma(_1906, cbSceneParam._m0[61u].z, fma(_1902, cbSceneParam._m0[61u].y, _1898 * cbSceneParam._m0[61u].x))) / _2114;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2115 >= cbSceneParam._m0[64u].x) && (_2116 >= cbSceneParam._m0[64u].y)) && (_2115 <= cbSceneParam._m0[64u].z)) && (_2116 <= cbSceneParam._m0[64u].w))
        {
            float _2254 = fma(_1910, cbSceneParam._m0[62u].w, fma(_1906, cbSceneParam._m0[62u].z, fma(_1902, cbSceneParam._m0[62u].y, _1898 * cbSceneParam._m0[62u].x))) / _2114;
            float _2258 = isnan(cbSceneParam._m0[41u].w) ? _2254 : (isnan(_2254) ? cbSceneParam._m0[41u].w : max(_2254, cbSceneParam._m0[41u].w));
            float _2301 = (cbSceneParam._m0[33u].x - sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913))) * cbSceneParam._m0[33u].y;
            float _4403 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
            float _2308 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2115, cbSceneParam._m0[33u].w + _2116), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2115, _2116 - cbSceneParam._m0[33u].z), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2115 - cbSceneParam._m0[33u].z, _2116 - cbSceneParam._m0[33u].w), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2115 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2116), _2258), 0.0)).x), vec4(0.25)));
            float _2312 = 1.0 - (_2308 * cbSceneParam._m0[34u].x);
            float _2313 = 1.0 - (_2308 * cbSceneParam._m0[34u].y);
            float _2314 = 1.0 - (_2308 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2314) ? _2062 : (isnan(_2062) ? _2314 : min(_2062, _2314));
            frontier_phi_37_36_ladder_1 = isnan(_2313) ? _2061 : (isnan(_2061) ? _2313 : min(_2061, _2313));
            frontier_phi_37_36_ladder_2 = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
        }
        else
        {
            frontier_phi_37_36_ladder = _2062;
            frontier_phi_37_36_ladder_1 = _2061;
            frontier_phi_37_36_ladder_2 = _2060;
        }
        _2126 = frontier_phi_37_36_ladder_2;
        _2128 = frontier_phi_37_36_ladder_1;
        _2130 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2126 = _2060;
        _2128 = _2061;
        _2130 = _2062;
    }
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _808 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2173 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2177 = _2137 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_646, _647, _648));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_646, _647, _648));
    float _4439 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4450 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2154].x * _2160) * _2198) + (((cbLight._m0[_2164].x * _2126) * _2173) * _2196);
    float _2206 = ((_2160 * cbLight._m0[_2154].y) * _2198) + (((cbLight._m0[_2164].y * _2128) * _2173) * _2196);
    float _2207 = ((_2160 * cbLight._m0[_2154].z) * _2198) + (((cbLight._m0[_2164].z * _2130) * _2173) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2213)
    {
        _2315 = _2205;
        _2317 = _2206;
        _2319 = _2207;
    }
    else
    {
        uint _2323 = _2137 + 6u;
        float _2339 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4461 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2342 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2315 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2205;
        _2317 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2206;
        _2319 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2207;
    }
    bool _2322 = _2211.y == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2322)
    {
        _2377 = _2315;
        _2379 = _2317;
        _2381 = _2319;
    }
    else
    {
        uint _2539 = _2137 + 7u;
        float _2555 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2556 = _2555 * _2555;
        float _4477 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2557 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2558 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2377 = (((cbLight._m0[_2539].x * 0.3183098733425140380859375) * _2557) * _2558) + _2315;
        _2379 = (((cbLight._m0[_2539].y * 0.3183098733425140380859375) * _2557) * _2558) + _2317;
        _2381 = (((cbLight._m0[_2539].z * 0.3183098733425140380859375) * _2557) * _2558) + _2319;
    }
    uint _2384 = _2137 + 8u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _649) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2137].x + _725;
    float _2400 = cbLight._m0[_2137].y + _726;
    float _2401 = cbLight._m0[_2137].z + _727;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2137].xyz));
    float _4493 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2413 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2414 = dot(vec3(_646, _647, _648), vec3(_2406, _2407, _2408));
    float _4515 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2406, _2407, _2408));
    float _4526 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2398 * _2398;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2398;
    float _2449 = (0.5 / (((_2413 * ((_2412 * _2438) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2438) + _2398) * _2412))) * _2412;
    float _4537 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    uint _2465 = _2137 + 9u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _649) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2177].x + _725;
    float _2479 = cbLight._m0[_2177].y + _726;
    float _2480 = cbLight._m0[_2177].z + _727;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2177].xyz));
    float _4548 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2492 = dot(vec3(_646, _647, _648), vec3(_2485, _2486, _2487));
    float _4559 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2485, _2486, _2487));
    float _4570 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2477 * _2477;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2514 = 1.0 - _2477;
    float _2524 = (0.5 / (((_2413 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2514) + _2477) * _2491))) * _2491;
    float _4581 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    float _2536 = (((_2513 * cbLight._m0[_2465].x) * _2526) * _2160) + ((((cbLight._m0[_2384].x * _2126) * _2437) * _2451) * _2173);
    float _2537 = (((_2513 * cbLight._m0[_2465].y) * _2526) * _2160) + ((((cbLight._m0[_2384].y * _2128) * _2437) * _2451) * _2173);
    float _2538 = (((_2513 * cbLight._m0[_2465].z) * _2526) * _2160) + ((((cbLight._m0[_2384].z * _2130) * _2437) * _2451) * _2173);
    float _2594;
    float _2596;
    float _2598;
    if (_2213)
    {
        _2594 = _2536;
        _2596 = _2537;
        _2598 = _2538;
    }
    else
    {
        uint _2600 = _2137 + 2u;
        uint _2604 = _2137 + 10u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _649) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _725;
        float _2621 = cbLight._m0[_2600].y + _726;
        float _2622 = cbLight._m0[_2600].z + _727;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2600].xyz));
        float _4592 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2634 = dot(vec3(_646, _647, _648), vec3(_2627, _2628, _2629));
        float _4603 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4614 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2656 = 1.0 - _2619;
        float _2666 = (0.5 / (((_2413 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2656) + _2619) * _2633))) * _2633;
        float _4625 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2668 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2669 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2594 = (((_2655 * cbLight._m0[_2604].x) * _2668) * _2669) + _2536;
        _2596 = (((_2655 * cbLight._m0[_2604].y) * _2668) * _2669) + _2537;
        _2598 = (((_2655 * cbLight._m0[_2604].z) * _2668) * _2669) + _2538;
    }
    float _2700;
    float _2702;
    float _2704;
    if (_2322)
    {
        _2700 = _2594;
        _2702 = _2596;
        _2704 = _2598;
    }
    else
    {
        uint _2711 = _2137 + 3u;
        uint _2715 = _2137 + 11u;
        float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _649) * 0.949999988079071044921875);
        float _2730 = _2729 * _2729;
        float _2731 = cbLight._m0[_2711].x + _725;
        float _2732 = cbLight._m0[_2711].y + _726;
        float _2733 = cbLight._m0[_2711].z + _727;
        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
        float _2738 = _2737 * _2731;
        float _2739 = _2737 * _2732;
        float _2740 = _2737 * _2733;
        float _2741 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2711].xyz));
        float _4641 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2745 = dot(vec3(_646, _647, _648), vec3(_2738, _2739, _2740));
        float _4652 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2749 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_2738, _2739, _2740));
        float _4663 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2753 = _2730 * _2730;
        float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
        float _2766 = (exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2767 = 1.0 - _2730;
        float _2777 = (0.5 / (((_2413 * ((_2744 * _2767) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2767) + _2730) * _2744))) * _2744;
        float _4674 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2700 = (((_2766 * cbLight._m0[_2715].x) * _2779) * _2780) + _2594;
        _2702 = (((_2766 * cbLight._m0[_2715].y) * _2779) * _2780) + _2596;
        _2704 = (((_2766 * cbLight._m0[_2715].z) * _2779) * _2780) + _2598;
    }
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_2135.y == 0u)
    {
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.x;
        uint _2813 = uint((float(_2801.y) * floor(float(uint(cbSceneParam._m0[85u].y * _746) / _2802))) + floor(float(uint(cbSceneParam._m0[85u].x * _745) / _2802)));
        float _2823 = (log2(_1913 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2824 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        uint _2827 = uint(isnan(14.0) ? _2824 : (isnan(_2824) ? 14.0 : min(_2824, 14.0)));
        uvec4 _2832 = texelFetch(g_lightClusterGridBuffer, int(((_2827 << 2u) + (_2813 << 6u)) >> 2u));
        uint _2833 = _2832.x;
        uint _2834 = _2801.z;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((((1u << ((_2834 >> 4u) & 15u)) + 4294967295u) & _2833) == 0u) || ((_2834 & 240u) == 0u))
        {
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
        }
        else
        {
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3082)
                {
                    frontier_phi_71_pred = _3071;
                    frontier_phi_71_pred_1 = _3070;
                    frontier_phi_71_pred_2 = _3069;
                    frontier_phi_71_pred_3 = _3068;
                    frontier_phi_71_pred_4 = _3067;
                    frontier_phi_71_pred_5 = _3066;
                }
                else
                {
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    uint _3217;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3081;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    for (;;)
                    {
                        uint _3221 = uint(findLSB(_3217)) + (_3072 << 5u);
                        uint _3218 = (_3217 + 4294967295u) & _3217;
                        uint _3223 = _3221 * 48u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3243 = (_3221 * 48u) + 4u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3262 = (_3221 * 48u) + 8u;
                        vec3 _3273 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x));
                        float _3277 = _3237.x - _1911;
                        float _3278 = _3237.y - _1912;
                        float _3279 = _3237.z - _1913;
                        float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                        float _3283 = inversesqrt(_3280);
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3287 = dot(vec3(_764, _767, _770), vec3(_3284, _3285, _3286));
                        float _3292 = 1.0 - (_3280 * _3237.w);
                        float _4700 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3294 = sqrt(_3280) * _3256.w;
                        float _3297 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3287) + _3298;
                        float _3304 = _3294 * _3294;
                        float _3308 = ((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3293) / ((_3304 * 0.699999988079071044921875) + 1.0);
                        float _3312 = (-0.0) - _1911;
                        float _3313 = (-0.0) - _1912;
                        float _3314 = (-0.0) - _1913;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3328 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _824;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_764, _767, _770), vec3(_3319, _3320, _3321));
                        float _4716 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3353 = dot(vec3(_764, _767, _770), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4727 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3297 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3287) + _3362;
                        float _4738 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4749 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3360 * _3360) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125))) * _3293;
                        _3141 = (_3308 * _3256.x) + _3214;
                        _3142 = (_3308 * _3256.y) + _3215;
                        _3143 = (_3308 * _3256.z) + _3216;
                        _3138 = (_3388 * _3273.x) + _3211;
                        _3139 = (_3388 * _3273.y) + _3212;
                        _3140 = (_3388 * _3273.z) + _3213;
                        if (_3218 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3218;
                        }
                    }
                    frontier_phi_71_pred = _3143;
                    frontier_phi_71_pred_1 = _3142;
                    frontier_phi_71_pred_2 = _3141;
                    frontier_phi_71_pred_3 = _3140;
                    frontier_phi_71_pred_4 = _3139;
                    frontier_phi_71_pred_5 = _3138;
                }
                _2924 = frontier_phi_71_pred;
                _2922 = frontier_phi_71_pred_1;
                _2920 = frontier_phi_71_pred_2;
                _2918 = frontier_phi_71_pred_3;
                _2916 = frontier_phi_71_pred_4;
                _2914 = frontier_phi_71_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2914;
                    _3067 = _2916;
                    _3068 = _2918;
                    _3069 = _2920;
                    _3070 = _2922;
                    _3071 = _2924;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
        }
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.z;
        uint _2930 = (_2928 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2930) & _2833) == 0u)
        {
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
            float _3060 = _3059 * _1911;
            float _3061 = _3059 * _1912;
            float _3062 = _3059 * _1913;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2930 < ((_2928 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3194 = _2913;
                float _3195 = _2915;
                float _3196 = _2917;
                float _3197 = _2919;
                float _3198 = _2921;
                float _3199 = _2923;
                uint _3200 = _2930;
                uint _3209;
                bool _3210;
                for (;;)
                {
                    _3209 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                    _3210 = _3209 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3210)
                    {
                        frontier_phi_82_pred = _3199;
                        frontier_phi_82_pred_1 = _3198;
                        frontier_phi_82_pred_2 = _3197;
                        frontier_phi_82_pred_3 = _3196;
                        frontier_phi_82_pred_4 = _3195;
                        frontier_phi_82_pred_5 = _3194;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        uint _3421 = _3209;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3506;
                        float _3552;
                        bool _3553;
                        for (;;)
                        {
                            uint _3432 = ((_3200 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3493 = (_3432 * 40u) + 20u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3432 * 40u) + 24u;
                            vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3527 = (_3432 * 40u) + 28u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3552 = fma(_1913, _3540.z, fma(_1912, _3540.y, _3540.x * _1911)) + _3540.w;
                            _3553 = !((fma(_1913, _3521.z, fma(_1912, _3521.y, _3521.x * _1911)) + _3521.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3553)
                            {
                                float _3580 = _3447.x - _1911;
                                float _3581 = _3447.y - _1912;
                                float _3582 = _3447.z - _1913;
                                float _3583 = dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582));
                                float _3586 = inversesqrt(_3583);
                                float _3587 = _3586 * _3580;
                                float _3588 = _3586 * _3581;
                                float _3589 = _3586 * _3582;
                                float _3593 = 1.0 - (_3583 / (_3448 * _3448));
                                float _4760 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3598 = sqrt(_3583) * _3463.w;
                                float _3600 = 1.39999997615814208984375 / (_3598 + 1.39999997615814208984375);
                                float _3601 = _3600 * _3600;
                                float _3604 = ((1.0 - _3601) * dot(vec3(_3587, _3588, _3589), vec3(_764, _767, _770))) + _3601;
                                float _3607 = _3598 * _3598;
                                float _3611 = (fma(_1913, _3490.z, fma(_1912, _3490.y, _3490.x * _1911)) + _3490.w) / _3552;
                                float _3612 = (fma(_1913, _3506.z, fma(_1912, _3506.y, _3506.x * _1911)) + _3506.w) / _3552;
                                float _3616 = 1.0 - dot(vec2(_3611, _3612), vec2(_3611, _3612));
                                float _4776 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3618 = _3617 * (((isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))) * _3594) / ((_3607 * 0.699999988079071044921875) + 1.0));
                                float _3630 = exp2(log2(1.0 / ((_3607 * 3.5) + 5.0)) * 0.25);
                                float _3631 = 1.0 - _824;
                                float _3638 = sqrt(1.0 - ((1.0 - (_3631 * _3631)) * (1.0 - (_3630 * _3630))));
                                float _3639 = _3638 * _3638;
                                float _3640 = _3639 * _3639;
                                float _3641 = _3587 - _3060;
                                float _3642 = _3588 - _3061;
                                float _3643 = _3589 - _3062;
                                float _3647 = inversesqrt(dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643)));
                                float _3651 = dot(vec3(_764, _767, _770), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4787 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3655 = dot(vec3(_764, _767, _770), vec3(_3647 * _3641, _3647 * _3642, _3647 * _3643));
                                float _4798 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3662 = ((_3658 * _3658) * (_3640 + (-1.0))) + 1.0;
                                float _3663 = _3600 * _3639;
                                float _3664 = _3663 * _3663;
                                float _3670 = ((1.0 - _3664) * dot(vec3(_764, _767, _770), vec3(_3587, _3588, _3589))) + _3664;
                                float _4809 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3672 = 1.0 - _3639;
                                float _3682 = (0.5 / (((_3671 * ((_3654 * _3672) + _3639)) + 9.9999999392252902907785028219223e-09) + (((_3671 * _3672) + _3639) * _3654))) * _3671;
                                float _4820 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3692 = (_3617 * _3594) * (((_3640 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3662 * _3662) * ((_3607 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3618 * _3463.z;
                                frontier_phi_88_pred_1 = _3618 * _3463.y;
                                frontier_phi_88_pred_2 = _3618 * _3463.x;
                                frontier_phi_88_pred_3 = _3692 * _3475.z;
                                frontier_phi_88_pred_4 = _3692 * _3475.y;
                                frontier_phi_88_pred_5 = _3692 * _3475.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3701 = frontier_phi_88_pred;
                            _3700 = frontier_phi_88_pred_1;
                            _3699 = frontier_phi_88_pred_2;
                            _3698 = frontier_phi_88_pred_3;
                            _3697 = frontier_phi_88_pred_4;
                            _3696 = frontier_phi_88_pred_5;
                            _3405 = _3699 + _3418;
                            _3406 = _3700 + _3419;
                            _3407 = _3701 + _3420;
                            _3402 = _3696 + _3415;
                            _3403 = _3697 + _3416;
                            _3404 = _3698 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3407;
                        frontier_phi_82_pred_1 = _3406;
                        frontier_phi_82_pred_2 = _3405;
                        frontier_phi_82_pred_3 = _3404;
                        frontier_phi_82_pred_4 = _3403;
                        frontier_phi_82_pred_5 = _3402;
                    }
                    _3045 = frontier_phi_82_pred;
                    _3043 = frontier_phi_82_pred_1;
                    _3041 = frontier_phi_82_pred_2;
                    _3039 = frontier_phi_82_pred_3;
                    _3037 = frontier_phi_82_pred_4;
                    _3035 = frontier_phi_82_pred_5;
                    uint _3201 = _3200 + 1u;
                    if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3194 = _3035;
                        _3195 = _3037;
                        _3196 = _3039;
                        _3197 = _3041;
                        _3198 = _3043;
                        _3199 = _3045;
                        _3200 = _3201;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3041;
                frontier_phi_63_64_ladder_1 = _3045;
                frontier_phi_63_64_ladder_2 = _3043;
                frontier_phi_63_64_ladder_3 = _3039;
                frontier_phi_63_64_ladder_4 = _3037;
                frontier_phi_63_64_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_63_64_ladder = _2919;
                frontier_phi_63_64_ladder_1 = _2923;
                frontier_phi_63_64_ladder_2 = _2921;
                frontier_phi_63_64_ladder_3 = _2917;
                frontier_phi_63_64_ladder_4 = _2915;
                frontier_phi_63_64_ladder_5 = _2913;
            }
            _3034 = frontier_phi_63_64_ladder_5;
            _3036 = frontier_phi_63_64_ladder_4;
            _3038 = frontier_phi_63_64_ladder_3;
            _3040 = frontier_phi_63_64_ladder;
            _3042 = frontier_phi_63_64_ladder_2;
            _3044 = frontier_phi_63_64_ladder_1;
        }
        float _3049 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
        _2846 = (_3049 * _3040) + _2377;
        _2848 = (_3049 * _3042) + _2379;
        _2850 = (_3049 * _3044) + _2381;
        _2852 = ((_3034 * 0.039999999105930328369140625) * _3049) + _2700;
        _2854 = ((_3036 * 0.039999999105930328369140625) * _3049) + _2702;
        _2856 = ((_3038 * 0.039999999105930328369140625) * _3049) + _2704;
    }
    else
    {
        _2846 = _2377;
        _2848 = _2379;
        _2850 = _2381;
        _2852 = _2700;
        _2854 = _2702;
        _2856 = _2704;
    }
    float _4836 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4847 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4858 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2873 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2846 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _808))) + ((_2852 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2848 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _808))) + ((_2854 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2875 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2850 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _808))) + ((_2856 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    uint _2876 = _238 + 6u;
    float _2884 = _745 / cbSceneParam._m0[86u].x;
    float _2885 = _746 / cbSceneParam._m0[86u].y;
    vec4 _2899 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, (log2((isnan(cbSceneParam._m0[77u].w) ? _667 : (isnan(_667) ? cbSceneParam._m0[77u].w : min(_667, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2901 = _2899.x;
    float _2902 = _2899.y;
    float _2903 = _2899.z;
    float _2904 = _2899.w;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_667 > cbSceneParam._m0[78u].w)
    {
        float _2938 = isnan(_667) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _667 : min(cbSceneParam._m0[80u].w, _667));
        float _2939 = _2938 / _667;
        float _2950 = _2939 * _718;
        float _2951 = _719 * _2939;
        float _2952 = (-0.0) - _2951;
        float _2954 = _2939 * _720;
        float _2956 = (cbSceneParam._m0[77u].w * _2952) / _2938;
        float _2957 = _2956 + cbSceneParam._m0[79u].w;
        float _2958 = cbSceneParam._m0[79u].w - _2951;
        float _2964 = sqrt(((_2950 * _2950) + (_2951 * _2951)) + (_2954 * _2954));
        float _2967 = (1.0 - (cbSceneParam._m0[77u].w / _2938)) * _2964;
        float _2972 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2974 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3151;
        if (abs((_2952 - _2956) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3151 = ((((_2957 > 0.0) ? exp2(_2972 * _2957) : (2.0 - exp2(_2974 * _2957))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2967;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2958) ? _2957 : (isnan(_2957) ? _2958 : max(_2957, _2958));
            float _3097 = isnan(_2958) ? _2957 : (isnan(_2957) ? _2958 : min(_2957, _2958));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3151 = ((abs(_2964 / _2952) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2972 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2972 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2974 * _3106) - exp2(_2974 * _3107)) * _3095))) + (_2967 * cbSceneParam._m0[80u].z);
        }
        vec4 _3153 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, 1.0), 0.0);
        float _3162 = exp2((_3151 * (-1.44269502162933349609375)) * (1.0 - _3153.w));
        float _3163 = log2(_3162);
        float _3179 = log2(_2904);
        _2976 = (exp2(_3179 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].x)) * _3153.x) / cbSceneParam._m0[78u].x)) + _2901;
        _2978 = (exp2(_3179 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].y)) * _3153.y) / cbSceneParam._m0[78u].y)) + _2902;
        _2980 = (exp2(_3179 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].z)) * _3153.z) / cbSceneParam._m0[78u].z)) + _2903;
        _2982 = _3162 * _2904;
    }
    else
    {
        _2976 = _2901;
        _2978 = _2902;
        _2980 = _2903;
        _2982 = _2904;
    }
    bool _3189;
    vec4 _2992;
    vec4 _3014;
    float _3016;
    float _3020;
    float _3021;
    float _3022;
    float _3023;
    bool _3033;
    for (;;)
    {
        _2992 = cbMatDynParam._m0[0u];
        float _2994 = roundEven(_2992.y);
        bool _2995 = _2994 == 3.0;
        float _2996 = log2(_2982);
        float _3003 = exp2(_2996 * cbSceneParam._m0[78u].x) * _2873;
        float _3004 = exp2(_2996 * cbSceneParam._m0[78u].y) * _2874;
        float _3005 = exp2(_2996 * cbSceneParam._m0[78u].z) * _2875;
        float _3012 = _734 + (-0.5);
        _3014 = cbMtdParam._m0[1u];
        _3016 = _3014.y * _3012;
        float _3019 = (_2994 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3020 = _3019 * (_2995 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2976)));
        _3021 = _3019 * (_2995 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2978)));
        _3022 = _3019 * (_2995 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2980)));
        _3023 = _3012 * 0.999000012874603271484375;
        _3033 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3033)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _3023) < 0.5)
            {
                _3189 = true;
                break;
            }
        }
        uint _3130 = _783 + uint(_2992.w);
        if ((cbInstanceData._m0[_3130].w < 1.0) && ((cbInstanceData._m0[_3130].w + _3023) < 0.5))
        {
            _3189 = true;
            break;
        }
        if ((_3016 + 1.0) < _3014.x)
        {
            _3189 = true;
            break;
        }
        _3189 = false;
        break;
    }
    float _3393;
    if (_3189)
    {
        discard_state = true;
        _3393 = 0.0;
    }
    else
    {
        _3393 = cbInstanceData._m0[_2876].w;
    }
    SV_Target.x = _3020;
    SV_Target.y = _3021;
    SV_Target.z = _3022;
    SV_Target.w = _3393;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2876].w;
    discard_exit();
}


