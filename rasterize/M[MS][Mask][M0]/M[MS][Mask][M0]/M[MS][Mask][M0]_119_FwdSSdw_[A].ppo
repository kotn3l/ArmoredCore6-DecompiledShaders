#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1626;
float _4007;
float _4008;
float _4009;
float _4010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4019 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4030 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4041 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _474 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _491 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_462 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4052 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _499 = (_492 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _500 = (_492 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _501 = (_492 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _564 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _572 = (_565 * ((_518.x * cbMtdParam._m0[13u].x) - _499)) + _499;
    float _573 = (_565 * ((_518.y * cbMtdParam._m0[13u].y) - _500)) + _500;
    float _574 = (_565 * ((_518.z * cbMtdParam._m0[13u].z) - _501)) + _501;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _422.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4074 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _644 = (_351.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _572)) + _572);
    float _645 = (_351.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _573)) + _573);
    float _646 = (_351.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _574)) + _574);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _729 = _725.z;
    float _736 = ((_708.x - _727) * _492) + _727;
    float _737 = ((_708.y - _728) * _492) + _728;
    float _738 = ((_708.z - _729) * _492) + _729;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _761 = ((_750.x - _736) * _565) + _736;
    float _762 = ((_750.y - _737) * _565) + _737;
    float _763 = ((_750.z - _738) * _565) + _738;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _788 = ((_775.z - _763) * _634) + _763;
    float _791 = ((((_775.x - _761) * _634) + _761) * 2.0) + (-1.0);
    float _792 = ((((_775.y - _762) * _634) + _762) * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4085 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _798 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    vec4 _812 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _837 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _839 = _837.x;
    float _840 = 1.0 - _839;
    float _846 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _849 = ((isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : min(_846, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _858 = (_849 - ((((((_839 - _840) * cbMtdParam._m0[24u].w) + _840) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _849))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4106 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _859 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _866 = (_859 * (cbMtdParam._m0[17u].x - _664)) + _664;
    float _867 = (_859 * (cbMtdParam._m0[17u].y - _666)) + _666;
    float _868 = (_859 * (cbMtdParam._m0[17u].z - _668)) + _668;
    float _883 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _884 = _883 * TEXCOORD.z;
    float _885 = _883 * TEXCOORD.w;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _884) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _885) + cbTextureTilingScale._m0[19u].w));
    float _899 = _897.x;
    float _900 = 1.0 - _899;
    float _927 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_899 - _900) * cbMtdParam._m0[24u].y) + _900) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4117 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _928 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _936 = ((((cbMtdParam._m0[10u].x - _866) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _928) + _866;
    float _937 = ((((cbMtdParam._m0[10u].y - _867) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _928) + _867;
    float _938 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _868)) * _928) + _868;
    float _943 = (((_685.z - _788) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _788;
    float _947 = ((_812.z - _943) * cbMtdParam._m0[19u].w) + _943;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _968 = (_961.x * 2.0) + (-1.0);
    float _969 = (_961.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4128 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _978 = (_859 * (_961.z - _947)) + _947;
    float _981 = ((cbMtdParam._m0[23u].y - _978) * _928) + _978;
    vec4 _1000 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _884) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _885) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1006 = (_1000.x * 2.0) + (-1.0);
    float _1007 = (_1000.y * 2.0) + (-1.0);
    float _1008 = dot(vec2(_1006, _1007), vec2(_1006, _1007));
    float _4139 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1022 = (_791 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_685.x * 2.0) + (-1.0)))) + (((_812.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1023 = (_792 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_685.y * 2.0) + (-1.0)))) + (((_812.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1035 = (((_968 - _1022) + (cbMtdParam._m0[21u].x * _1022)) * _859) + _1022;
    float _1036 = (((_969 - _1023) + (cbMtdParam._m0[21u].x * _1023)) * _859) + _1023;
    float _1037 = (_859 * (sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) - _798)) + _798;
    float _1048 = (((_1006 - _1035) + (_1035 * cbMtdParam._m0[22u].z)) * _928) + _1035;
    float _1049 = (((_1007 - _1036) + (_1036 * cbMtdParam._m0[22u].z)) * _928) + _1036;
    float _1050 = ((sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) - _1037) * _928) + _1037;
    float _1052 = cbMtdParam._m0[22u].x + _812.w;
    float _1055 = fma(_1050, _263 * NORMAL.x, fma(_1049, _270 * TANGENT.x, (_256 * _248) * _1048));
    float _1058 = fma(_1050, _263 * NORMAL.y, fma(_1049, _270 * TANGENT.y, (_256 * _249) * _1048));
    float _1061 = fma(_1050, _263 * NORMAL.z, fma(_1049, _270 * TANGENT.z, (_256 * _250) * _1048));
    float _1065 = inversesqrt(dot(vec3(_1055, _1058, _1061), vec3(_1055, _1058, _1061)));
    float _1066 = _1065 * _1055;
    float _1067 = _1065 * _1058;
    float _1068 = _1065 * _1061;
    float _4150 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1069 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4172 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4183 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4194 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1087 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1137 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1127);
    float _1138 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1127);
    float _1139 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1127);
    float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
    float _1144 = _1137 * _1143;
    float _1145 = _1138 * _1143;
    float _1146 = _1139 * _1143;
    vec4 _1151 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1153 = _1151.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1307 = sqrt(((_1137 * _1137) + (_1138 * _1138)) + (_1139 * _1139));
        float _1313 = (cbMatDynParam._m0[5u].x * _1307) + cbMatDynParam._m0[5u].y;
        float _4205 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1318 = (cbMatDynParam._m0[5u].z * _1307) + cbMatDynParam._m0[5u].w;
        float _4216 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) - _1314)) + _1314) < ((_1153 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1183 = fma(_1068, cbSceneParam._m0[5u].z, fma(_1067, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1066));
    float _1186 = fma(_1068, cbSceneParam._m0[6u].z, fma(_1067, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1066));
    float _1189 = fma(_1068, cbSceneParam._m0[7u].z, fma(_1067, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1066));
    uint _1202 = _295 + 9u;
    uint _1203 = _1202 + uint(cbMatDynParam._m0[0u].w);
    float _1209 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_1203].x;
    float _1210 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_1203].y;
    float _1211 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1203].z;
    float _4227 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    vec4 _1223 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1164, cbSceneParam._m0[86u].y * _1165));
    float _1227 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * TEXCOORD_5.w) * _1223.x;
    float _1228 = dot(vec3(_1066, _1067, _1068), vec3(_1144, _1145, _1146));
    float _1231 = _1228 * 2.0;
    float _1235 = (_1231 * _1066) - _1144;
    float _1236 = (_1231 * _1067) - _1145;
    float _1237 = (_1231 * _1068) - _1146;
    float _1241 = abs(dot(vec3(_1144, _1145, _1146), vec3(_1066, _1067, _1068)));
    float _4260 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1243 = sqrt(_1069);
    float _1256 = exp2((_1243 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1243 * 3.0));
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1625;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1350 = fma(_1296, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288));
        float _1354 = fma(_1296, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288));
        float _1358 = fma(_1296, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288));
        float _1383 = _1288 + _1066;
        float _1384 = _1292 + _1067;
        float _1385 = _1296 + _1068;
        float _1395 = fma(_1385, cbModelParam._m0[26u].z, fma(_1384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383)) - _1350;
        float _1396 = fma(_1385, cbModelParam._m0[27u].z, fma(_1384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383)) - _1354;
        float _1397 = fma(_1385, cbModelParam._m0[28u].z, fma(_1384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383)) - _1358;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1350 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1354 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[34u].z) + ((((((_1358 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1453 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1419.x + (-0.5));
        float _1455 = _1453 * (_1419.y + (-0.5));
        float _1456 = _1453 * (_1419.z + (-0.5));
        float _1463 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1426.x + (-0.5));
        float _1465 = _1463 * (_1426.y + (-0.5));
        float _1466 = _1463 * (_1426.z + (-0.5));
        float _1473 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1433.x + (-0.5));
        float _1475 = _1473 * (_1433.y + (-0.5));
        float _1476 = _1473 * (_1433.z + (-0.5));
        float _1483 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1440.x + (-0.5));
        float _1485 = _1483 * (_1440.y + (-0.5));
        float _1486 = _1483 * (_1440.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1507 = (dot(vec3(_1066, _1067, _1068), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1517 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4308 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1519 + 1.0))) + _1524) * _1487;
        float _1534 = _1455 * 0.5;
        float _1535 = _1465 * 0.5;
        float _1536 = _1475 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1066, _1067, _1068), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4341 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1561 + 1.0))) + _1566) * _1488;
        float _1576 = _1456 * 0.5;
        float _1577 = _1466 * 0.5;
        float _1578 = _1476 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_1066, _1067, _1068), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4374 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1603 + 1.0))) + _1608) * _1489;
        _1625 = _1456;
        _1627 = _1455;
        _1628 = _1454;
        _1629 = _1466;
        _1630 = _1465;
        _1631 = _1464;
        _1632 = _1476;
        _1633 = _1475;
        _1634 = _1474;
        _1635 = _1489;
        _1636 = _1488;
        _1637 = _1487;
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1639 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1626;
        _1627 = _1626;
        _1628 = _1626;
        _1629 = _1626;
        _1630 = _1626;
        _1631 = _1626;
        _1632 = _1626;
        _1633 = _1626;
        _1634 = _1626;
        _1635 = _1626;
        _1636 = _1626;
        _1637 = _1626;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1666 = fma(_1296, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288));
        float _1670 = fma(_1296, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288));
        float _1674 = fma(_1296, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288));
        float _1697 = _1288 + _1066;
        float _1698 = _1292 + _1067;
        float _1699 = _1296 + _1068;
        float _1709 = fma(_1699, cbModelParam._m0[30u].z, fma(_1698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1697)) - _1666;
        float _1710 = fma(_1699, cbModelParam._m0[31u].z, fma(_1698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1697)) - _1670;
        float _1711 = fma(_1699, cbModelParam._m0[32u].z, fma(_1698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1697)) - _1674;
        float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
        float _1728 = ((_1715 * _1709) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1666 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1729 = ((_1715 * _1710) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1670 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1730 = ((_1715 * _1711) / cbModelParam._m0[35u].z) + ((((((_1674 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1753 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        float _1765 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1732.x + (-0.5));
        float _1767 = _1765 * (_1732.y + (-0.5));
        float _1768 = _1765 * (_1732.z + (-0.5));
        float _1775 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1776 = _1775 * (_1739.x + (-0.5));
        float _1777 = _1775 * (_1739.y + (-0.5));
        float _1778 = _1775 * (_1739.z + (-0.5));
        float _1785 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1786 = _1785 * (_1746.x + (-0.5));
        float _1787 = _1785 * (_1746.y + (-0.5));
        float _1788 = _1785 * (_1746.z + (-0.5));
        float _1795 = exp2((_1753.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1753.x + (-0.5));
        float _1797 = _1795 * (_1753.y + (-0.5));
        float _1798 = _1795 * (_1753.z + (-0.5));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = _1766 * 0.5;
        float _1803 = _1776 * 0.5;
        float _1804 = _1786 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1066, _1067, _1068), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4437 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1829 + 1.0))) + _1834) * _1799;
        float _1844 = _1767 * 0.5;
        float _1845 = _1777 * 0.5;
        float _1846 = _1787 * 0.5;
        float _1847 = dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846));
        float _1852 = (_1847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1847);
        float _1860 = (dot(vec3(_1066, _1067, _1068), vec3(_1852 * _1844, _1852 * _1845, _1852 * _1846)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1869 = sqrt(((_1845 * _1845) + (_1844 * _1844)) + (_1846 * _1846)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1871 = _1870 * 2.0;
        float _1875 = (1.0 - _1870) / (_1870 + 1.0);
        float _4470 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1885 = ((((1.0 - _1876) * (_1871 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1871 + 1.0))) + _1876) * _1800;
        float _1886 = _1768 * 0.5;
        float _1887 = _1778 * 0.5;
        float _1888 = _1788 * 0.5;
        float _1889 = dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888));
        float _1894 = (_1889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1889);
        float _1902 = (dot(vec3(_1066, _1067, _1068), vec3(_1894 * _1886, _1894 * _1887, _1894 * _1888)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1911 = sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1913 = _1912 * 2.0;
        float _1917 = (1.0 - _1912) / (_1912 + 1.0);
        float _4503 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1927 = ((((1.0 - _1918) * (_1913 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1913 + 1.0))) + _1918) * _1801;
        _1935 = _1768;
        _1936 = _1767;
        _1937 = _1766;
        _1938 = _1778;
        _1939 = _1777;
        _1940 = _1776;
        _1941 = _1788;
        _1942 = _1787;
        _1943 = _1786;
        _1944 = _1801;
        _1945 = _1800;
        _1946 = _1799;
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)));
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)));
    }
    else
    {
        _1935 = _1626;
        _1936 = _1626;
        _1937 = _1626;
        _1938 = _1626;
        _1939 = _1626;
        _1940 = _1626;
        _1941 = _1626;
        _1942 = _1626;
        _1943 = _1626;
        _1944 = _1626;
        _1945 = _1626;
        _1946 = _1626;
        _1947 = 0.0;
        _1948 = 0.0;
        _1949 = 0.0;
    }
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1638)) + _1638;
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1639)) + _1639;
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1640)) + _1640;
    float _1982 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1959));
    float _2003 = _1235 * 0.5;
    float _2004 = _1236 * 0.5;
    float _2005 = _1237 * 0.5;
    float _2006 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2009 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2012 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2046;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2019 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1625, _1629, _1632, _1635));
        float _2023 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1627, _1630, _1633, _1636));
        float _2027 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1628, _1631, _1634, _1637));
        float _2034 = dot(vec4(cbModelParam._m0[39u]), vec4(_2003, _2004, _2005, 1.0));
        _2046 = dot(vec3(isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2034) ? 0.0 : (isnan(0.0) ? _2034 : max(0.0, _2034))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2046 = 1.0;
    }
    float _2057;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2048 = dot(vec4(cbModelParam._m0[40u]), vec4(_2003, _2004, _2005, 1.0));
        _2057 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2048) ? 0.0 : (isnan(0.0) ? _2048 : max(0.0, _2048))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2057 = 1.0;
    }
    float _2061 = (_2057 * cbModelParam._m0[1u].x) + (_2046 * (1.0 - cbModelParam._m0[1u].x));
    float _2071 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1069);
    float _2072 = isnan(_2071) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2071 : min(cbModelParam._m0[25u].z, _2071));
    float _2152;
    float _2154;
    float _2156;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2119 = fma(_1296, cbModelParam._m0[13u].z, fma(_1292, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1288)) + cbModelParam._m0[13u].w;
        float _2123 = fma(_1296, cbModelParam._m0[14u].z, fma(_1292, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1288)) + cbModelParam._m0[14u].w;
        float _2127 = fma(_1296, cbModelParam._m0[15u].z, fma(_1292, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1288)) + cbModelParam._m0[15u].w;
        float _2130 = fma(_1237, cbModelParam._m0[13u].z, fma(_1236, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235));
        float _2133 = fma(_1237, cbModelParam._m0[14u].z, fma(_1236, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235));
        float _2136 = fma(_1237, cbModelParam._m0[15u].z, fma(_1236, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235));
        float _2164;
        if (_2130 > 0.0)
        {
            _2164 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2164 = frontier_phi_17_15_ladder;
        }
        float _2386;
        if (_2133 > 0.0)
        {
            _2386 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2386 = frontier_phi_26_22_ladder;
        }
        float _2632;
        if (_2136 > 0.0)
        {
            _2632 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2632 = frontier_phi_38_33_ladder;
        }
        float _2634 = isnan(_2386) ? _2164 : (isnan(_2164) ? _2386 : min(_2164, _2386));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _2130) + _2119;
        float _2640 = (_2635 * _2133) + _2123;
        float _2641 = (_2635 * _2136) + _2127;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2642;
        float _2646 = _2642 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 > _2646) || ((_2640 < _2644) || ((_2639 < _2644) || (_2639 > _2646))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2641, cbModelParam._m0[9u].z, fma(_2640, cbModelParam._m0[9u].y, _2639 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2641, cbModelParam._m0[10u].z, fma(_2640, cbModelParam._m0[10u].y, _2639 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2641, cbModelParam._m0[11u].z, fma(_2640, cbModelParam._m0[11u].y, _2639 * cbModelParam._m0[11u].x))), _2072);
            frontier_phi_16_38_ladder = _2765.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2765.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2765.x * cbModelParam._m0[1u].y;
        }
        _2152 = frontier_phi_16_38_ladder_2;
        _2154 = frontier_phi_16_38_ladder_1;
        _2156 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1235, _1236, _1237), _2072);
        _2152 = _2140.x * cbModelParam._m0[1u].y;
        _2154 = _2140.y * cbModelParam._m0[1u].y;
        _2156 = _2140.z * cbModelParam._m0[1u].y;
    }
    float _2160 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1069);
    float _2161 = isnan(_2160) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2160 : min(cbModelParam._m0[25u].w, _2160));
    float _2251;
    float _2253;
    float _2255;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2215 = fma(_1296, cbModelParam._m0[21u].z, fma(_1292, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1288)) + cbModelParam._m0[21u].w;
        float _2219 = fma(_1296, cbModelParam._m0[22u].z, fma(_1292, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1288)) + cbModelParam._m0[22u].w;
        float _2223 = fma(_1296, cbModelParam._m0[23u].z, fma(_1292, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1288)) + cbModelParam._m0[23u].w;
        float _2226 = fma(_1237, cbModelParam._m0[21u].z, fma(_1236, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235));
        float _2229 = fma(_1237, cbModelParam._m0[22u].z, fma(_1236, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235));
        float _2232 = fma(_1237, cbModelParam._m0[23u].z, fma(_1236, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235));
        float _2391;
        if (_2226 > 0.0)
        {
            _2391 = abs((1.0 - _2215) / _2226);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2215 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2391 = frontier_phi_28_24_ladder;
        }
        float _2659;
        if (_2229 > 0.0)
        {
            _2659 = abs((1.0 - _2219) / _2229);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2219 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2659 = frontier_phi_40_35_ladder;
        }
        float _2864;
        if (_2232 > 0.0)
        {
            _2864 = abs((1.0 - _2223) / _2232);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2223 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2864 = frontier_phi_49_46_ladder;
        }
        float _2866 = isnan(_2659) ? _2391 : (isnan(_2391) ? _2659 : min(_2391, _2659));
        float _2867 = isnan(_2864) ? _2866 : (isnan(_2866) ? _2864 : min(_2866, _2864));
        float _2871 = (_2867 * _2226) + _2215;
        float _2872 = (_2867 * _2229) + _2219;
        float _2873 = (_2867 * _2232) + _2223;
        float _2874 = _2867 * 9.9999997473787516355514526367188e-05;
        float _2875 = (-1.0) - _2874;
        float _2877 = _2874 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2873 > _2877) || ((_2873 < _2875) || ((_2872 > _2877) || ((_2872 < _2875) || ((_2871 < _2875) || (_2871 > _2877))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2873, cbModelParam._m0[17u].z, fma(_2872, cbModelParam._m0[17u].y, _2871 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2873, cbModelParam._m0[18u].z, fma(_2872, cbModelParam._m0[18u].y, _2871 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2873, cbModelParam._m0[19u].z, fma(_2872, cbModelParam._m0[19u].y, _2871 * cbModelParam._m0[19u].x))), _2161);
            frontier_phi_25_49_ladder = _3072.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3072.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3072.x * cbModelParam._m0[1u].z;
        }
        _2251 = frontier_phi_25_49_ladder_2;
        _2253 = frontier_phi_25_49_ladder_1;
        _2255 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2235 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1235, _1236, _1237), _2161);
        _2251 = _2235.x * cbModelParam._m0[1u].z;
        _2253 = _2235.y * cbModelParam._m0[1u].z;
        _2255 = _2235.z * cbModelParam._m0[1u].z;
    }
    float _2267 = ((((1.0 - _1256) * ((_1243 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1256 * _1243)) * _1227;
    float _2268 = _2267 * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2269 = _2267 * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2270 = _2267 * ((cbModelParam._m0[1u].w * (_2255 - _2156)) + _2156);
    float _2273 = fma(_2270, cbSceneParam._m0[89u].z, fma(_2269, cbSceneParam._m0[89u].y, _2268 * cbSceneParam._m0[89u].x));
    float _2276 = fma(_2270, cbSceneParam._m0[90u].z, fma(_2269, cbSceneParam._m0[90u].y, _2268 * cbSceneParam._m0[90u].x));
    float _2279 = fma(_2270, cbSceneParam._m0[91u].z, fma(_2269, cbSceneParam._m0[91u].y, _2268 * cbSceneParam._m0[91u].x));
    vec4 _2287 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1164, _1165));
    float _2289 = _2287.w;
    float _2301 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2289);
    float _2302 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2289);
    float _2303 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2289);
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _1227 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_1066, _1067, _1068));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_1066, _1067, _1068));
    float _4639 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4650 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2301) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2302) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2303) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2385)
    {
        _2396 = _2377;
        _2398 = _2378;
        _2400 = _2379;
    }
    else
    {
        uint _2404 = _2309 + 6u;
        float _2420 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4661 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2423 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2396 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2377;
        _2398 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2378;
        _2400 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2379;
    }
    bool _2403 = _2383.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2403)
    {
        _2441 = _2396;
        _2443 = _2398;
        _2445 = _2400;
    }
    else
    {
        uint _2603 = _2309 + 7u;
        float _2619 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _2620 = _2619 * _2619;
        float _4677 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2621 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2622 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2441 = (((cbLight._m0[_2603].x * 0.3183098733425140380859375) * _2621) * _2622) + _2396;
        _2443 = (((cbLight._m0[_2603].y * 0.3183098733425140380859375) * _2621) * _2622) + _2398;
        _2445 = (((cbLight._m0[_2603].z * 0.3183098733425140380859375) * _2621) * _2622) + _2400;
    }
    uint _2448 = _2309 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _1069) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2309].x + _1144;
    float _2464 = cbLight._m0[_2309].y + _1145;
    float _2465 = cbLight._m0[_2309].z + _1146;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2309].xyz));
    float _4693 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _4704 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _2477 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2478 = dot(vec3(_1066, _1067, _1068), vec3(_2470, _2471, _2472));
    float _4715 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2470, _2471, _2472));
    float _4726 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2502 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2477 * ((_2476 * _2502) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2502) + _2462) * _2476))) * _2476;
    float _4737 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2529 = _2309 + 9u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _1069) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2349].x + _1144;
    float _2543 = cbLight._m0[_2349].y + _1145;
    float _2544 = cbLight._m0[_2349].z + _1146;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2349].xyz));
    float _4748 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2556 = dot(vec3(_1066, _1067, _1068), vec3(_2549, _2550, _2551));
    float _4759 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2549, _2550, _2551));
    float _4770 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2541 * _2541;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2577 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2578 = 1.0 - _2541;
    float _2588 = (0.5 / (((_2477 * ((_2555 * _2578) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2578) + _2541) * _2555))) * _2555;
    float _4781 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    float _2600 = (((_2577 * cbLight._m0[_2529].x) * _2590) * _2332) + ((((cbLight._m0[_2448].x * _2301) * _2501) * _2515) * _2345);
    float _2601 = (((_2577 * cbLight._m0[_2529].y) * _2590) * _2332) + ((((cbLight._m0[_2448].y * _2302) * _2501) * _2515) * _2345);
    float _2602 = (((_2577 * cbLight._m0[_2529].z) * _2590) * _2332) + ((((cbLight._m0[_2448].z * _2303) * _2501) * _2515) * _2345);
    float _2664;
    float _2666;
    float _2668;
    if (_2385)
    {
        _2664 = _2600;
        _2666 = _2601;
        _2668 = _2602;
    }
    else
    {
        uint _2670 = _2309 + 2u;
        uint _2674 = _2309 + 10u;
        float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2670].w)) * _1069) * 0.949999988079071044921875);
        float _2689 = _2688 * _2688;
        float _2690 = cbLight._m0[_2670].x + _1144;
        float _2691 = cbLight._m0[_2670].y + _1145;
        float _2692 = cbLight._m0[_2670].z + _1146;
        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
        float _2697 = _2696 * _2690;
        float _2698 = _2696 * _2691;
        float _2699 = _2696 * _2692;
        float _2700 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2670].xyz));
        float _4792 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2704 = dot(vec3(_1066, _1067, _1068), vec3(_2697, _2698, _2699));
        float _4803 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2708 = dot(vec3(cbLight._m0[_2670].xyz), vec3(_2697, _2698, _2699));
        float _4814 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2712 = _2689 * _2689;
        float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
        float _2725 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2726 = 1.0 - _2689;
        float _2736 = (0.5 / (((_2477 * ((_2703 * _2726) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2726) + _2689) * _2703))) * _2703;
        float _4825 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2664 = (((_2725 * cbLight._m0[_2674].x) * _2738) * _2739) + _2600;
        _2666 = (((_2725 * cbLight._m0[_2674].y) * _2738) * _2739) + _2601;
        _2668 = (((_2725 * cbLight._m0[_2674].z) * _2738) * _2739) + _2602;
    }
    float _2774;
    float _2776;
    float _2778;
    if (_2403)
    {
        _2774 = _2664;
        _2776 = _2666;
        _2778 = _2668;
    }
    else
    {
        uint _2785 = _2309 + 3u;
        uint _2789 = _2309 + 11u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _1069) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _1144;
        float _2806 = cbLight._m0[_2785].y + _1145;
        float _2807 = cbLight._m0[_2785].z + _1146;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2785].xyz));
        float _4841 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2819 = dot(vec3(_1066, _1067, _1068), vec3(_2812, _2813, _2814));
        float _4852 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4863 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2840 = (exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2841 = 1.0 - _2804;
        float _2851 = (0.5 / (((_2477 * ((_2818 * _2841) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2841) + _2804) * _2818))) * _2818;
        float _4874 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2774 = (((_2840 * cbLight._m0[_2789].x) * _2853) * _2854) + _2664;
        _2776 = (((_2840 * cbLight._m0[_2789].y) * _2853) * _2854) + _2666;
        _2778 = (((_2840 * cbLight._m0[_2789].z) * _2853) * _2854) + _2668;
    }
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_2307.y == 0u)
    {
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2929;
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2929;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2929;
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.x;
        uint _2956 = uint((float(_2944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1165) / _2945))) + floor(float(uint(cbSceneParam._m0[85u].x * _1164) / _2945)));
        float _2966 = (log2(_2932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2967 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        uint _2970 = uint(isnan(14.0) ? _2967 : (isnan(_2967) ? 14.0 : min(_2967, 14.0)));
        uvec4 _2975 = texelFetch(g_lightClusterGridBuffer, int(((_2970 << 2u) + (_2956 << 6u)) >> 2u));
        uint _2976 = _2975.x;
        uint _2977 = _2944.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2977 >> 4u) & 15u)) + 4294967295u) & _2976) == 0u) || ((_2977 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3246)
                {
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                else
                {
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    uint _3381;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3245;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3385 = uint(findLSB(_3381)) + (_3236 << 5u);
                        uint _3382 = (_3381 + 4294967295u) & _3381;
                        uint _3387 = _3385 * 48u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3407 = (_3385 * 48u) + 4u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3426 = (_3385 * 48u) + 8u;
                        vec3 _3437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x));
                        float _3441 = _3401.x - _2930;
                        float _3442 = _3401.y - _2931;
                        float _3443 = _3401.z - _2932;
                        float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                        float _3447 = inversesqrt(_3444);
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3451 = dot(vec3(_1183, _1186, _1189), vec3(_3448, _3449, _3450));
                        float _3456 = 1.0 - (_3444 * _3401.w);
                        float _4900 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3458 = sqrt(_3444) * _3420.w;
                        float _3461 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3451) + _3462;
                        float _3468 = _3458 * _3458;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3457) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2930;
                        float _3477 = (-0.0) - _2931;
                        float _3478 = (-0.0) - _2932;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3493 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3494 = 1.0 - _1243;
                        float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                        float _3502 = _3501 * _3501;
                        float _3503 = _3502 * _3502;
                        float _3504 = _3483 + _3448;
                        float _3505 = _3484 + _3449;
                        float _3506 = _3485 + _3450;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3514 = dot(vec3(_1183, _1186, _1189), vec3(_3483, _3484, _3485));
                        float _4916 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3518 = dot(vec3(_1183, _1186, _1189), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                        float _4927 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                        float _3526 = _3461 * _3502;
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3451) + _3527;
                        float _4938 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3532 = 1.0 - _3502;
                        float _3542 = (0.5 / (((_3531 * ((_3517 * _3532) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3502) * _3517))) * _3531;
                        float _4949 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3553 = (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3525 * _3525) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3457;
                        _3305 = (_3472 * _3420.x) + _3378;
                        _3306 = (_3472 * _3420.y) + _3379;
                        _3307 = (_3472 * _3420.z) + _3380;
                        _3302 = (_3553 * _3437.x) + _3375;
                        _3303 = (_3553 * _3437.y) + _3376;
                        _3304 = (_3553 * _3437.z) + _3377;
                        if (_3382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3382;
                        }
                    }
                    frontier_phi_66_pred = _3302;
                    frontier_phi_66_pred_1 = _3307;
                    frontier_phi_66_pred_2 = _3306;
                    frontier_phi_66_pred_3 = _3305;
                    frontier_phi_66_pred_4 = _3304;
                    frontier_phi_66_pred_5 = _3303;
                }
                _3078 = frontier_phi_66_pred;
                _3088 = frontier_phi_66_pred_1;
                _3086 = frontier_phi_66_pred_2;
                _3084 = frontier_phi_66_pred_3;
                _3082 = frontier_phi_66_pred_4;
                _3080 = frontier_phi_66_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3078;
                    _3231 = _3080;
                    _3232 = _3082;
                    _3233 = _3084;
                    _3234 = _3086;
                    _3235 = _3088;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3094) & _2976) == 0u)
        {
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
            float _3224 = _3223 * _2930;
            float _3225 = _3223 * _2931;
            float _3226 = _3223 * _2932;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3358 = _3077;
                float _3359 = _3079;
                float _3360 = _3081;
                float _3361 = _3083;
                float _3362 = _3085;
                float _3363 = _3087;
                uint _3364 = _3094;
                uint _3373;
                bool _3374;
                for (;;)
                {
                    _3373 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                    _3374 = _3373 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3374)
                    {
                        frontier_phi_77_pred = _3363;
                        frontier_phi_77_pred_1 = _3362;
                        frontier_phi_77_pred_2 = _3361;
                        frontier_phi_77_pred_3 = _3360;
                        frontier_phi_77_pred_4 = _3359;
                        frontier_phi_77_pred_5 = _3358;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        uint _3586 = _3373;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3597 = ((_3364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3597 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3597 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2932, _3704.z, fma(_2931, _3704.y, _3704.x * _2930)) + _3704.w;
                            _3717 = !((fma(_2932, _3685.z, fma(_2931, _3685.y, _3685.x * _2930)) + _3685.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3612.x - _2930;
                                float _3745 = _3612.y - _2931;
                                float _3746 = _3612.z - _2932;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3613 * _3613));
                                float _4960 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3762 = sqrt(_3747) * _3628.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1183, _1186, _1189))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2932, _3655.z, fma(_2931, _3655.y, _3655.x * _2930)) + _3655.w) / _3716;
                                float _3776 = (fma(_2932, _3670.z, fma(_2931, _3670.y, _3670.x * _2930)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4976 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1243;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3224;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1183, _1186, _1189), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _4987 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3819 = dot(vec3(_1183, _1186, _1189), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4998 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1183, _1186, _1189), vec3(_3751, _3752, _3753))) + _3828;
                                float _5009 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _5020 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3782 * _3628.y;
                                frontier_phi_83_pred_1 = _3782 * _3628.x;
                                frontier_phi_83_pred_2 = _3856 * _3640.z;
                                frontier_phi_83_pred_3 = _3856 * _3640.y;
                                frontier_phi_83_pred_4 = _3856 * _3640.x;
                                frontier_phi_83_pred_5 = _3782 * _3628.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_83_pred;
                            _3863 = frontier_phi_83_pred_1;
                            _3862 = frontier_phi_83_pred_2;
                            _3861 = frontier_phi_83_pred_3;
                            _3860 = frontier_phi_83_pred_4;
                            _3865 = frontier_phi_83_pred_5;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3572;
                        frontier_phi_77_pred_1 = _3571;
                        frontier_phi_77_pred_2 = _3570;
                        frontier_phi_77_pred_3 = _3569;
                        frontier_phi_77_pred_4 = _3568;
                        frontier_phi_77_pred_5 = _3567;
                    }
                    _3209 = frontier_phi_77_pred;
                    _3207 = frontier_phi_77_pred_1;
                    _3205 = frontier_phi_77_pred_2;
                    _3203 = frontier_phi_77_pred_3;
                    _3201 = frontier_phi_77_pred_4;
                    _3199 = frontier_phi_77_pred_5;
                    uint _3365 = _3364 + 1u;
                    if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3358 = _3199;
                        _3359 = _3201;
                        _3360 = _3203;
                        _3361 = _3205;
                        _3362 = _3207;
                        _3363 = _3209;
                        _3364 = _3365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3203;
                frontier_phi_58_59_ladder_1 = _3209;
                frontier_phi_58_59_ladder_2 = _3207;
                frontier_phi_58_59_ladder_3 = _3205;
                frontier_phi_58_59_ladder_4 = _3201;
                frontier_phi_58_59_ladder_5 = _3199;
            }
            else
            {
                frontier_phi_58_59_ladder = _3081;
                frontier_phi_58_59_ladder_1 = _3087;
                frontier_phi_58_59_ladder_2 = _3085;
                frontier_phi_58_59_ladder_3 = _3083;
                frontier_phi_58_59_ladder_4 = _3079;
                frontier_phi_58_59_ladder_5 = _3077;
            }
            _3198 = frontier_phi_58_59_ladder_5;
            _3200 = frontier_phi_58_59_ladder_4;
            _3202 = frontier_phi_58_59_ladder;
            _3204 = frontier_phi_58_59_ladder_3;
            _3206 = frontier_phi_58_59_ladder_2;
            _3208 = frontier_phi_58_59_ladder_1;
        }
        float _3213 = isnan(1.0) ? _1227 : (isnan(_1227) ? 1.0 : min(_1227, 1.0));
        _2989 = (_3213 * _3204) + _2441;
        _2991 = (_3213 * _3206) + _2443;
        _2993 = (_3213 * _3208) + _2445;
        _2995 = ((_3198 * 0.039999999105930328369140625) * _3213) + _2774;
        _2997 = ((_3200 * 0.039999999105930328369140625) * _3213) + _2776;
        _2999 = ((_3202 * 0.039999999105930328369140625) * _3213) + _2778;
    }
    else
    {
        _2989 = _2441;
        _2991 = _2443;
        _2993 = _2445;
        _2995 = _2774;
        _2997 = _2776;
        _2999 = _2778;
    }
    float _5036 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _5047 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _5058 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _3016 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2989 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1227))) + ((_2995 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2991 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1227))) + ((_2997 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_2993 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1227))) + ((_2999 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    uint _3019 = _295 + 6u;
    float _3027 = _1164 / cbSceneParam._m0[86u].x;
    float _3028 = _1165 / cbSceneParam._m0[86u].y;
    vec4 _3042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, (log2((isnan(cbSceneParam._m0[77u].w) ? _1087 : (isnan(_1087) ? cbSceneParam._m0[77u].w : min(_1087, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3044 = _3042.x;
    float _3045 = _3042.y;
    float _3046 = _3042.z;
    float _3047 = _3042.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_1087 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_1087) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1087 : min(cbSceneParam._m0[80u].w, _1087));
        float _3103 = _3102 / _1087;
        float _3114 = _3103 * _1137;
        float _3115 = _1138 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3118 = _3103 * _1139;
        float _3120 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3115;
        float _3128 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3315;
        if (abs((_3116 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3315 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3261 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3315 = ((abs(_3128 / _3116) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3138 * _3270) - exp2(_3138 * _3271)) * _3259))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, 1.0), 0.0);
        float _3326 = exp2((_3315 * (-1.44269502162933349609375)) * (1.0 - _3317.w));
        float _3327 = log2(_3326);
        float _3343 = log2(_3047);
        _3140 = (exp2(_3343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].x)) * _3317.x) / cbSceneParam._m0[78u].x)) + _3044;
        _3142 = (exp2(_3343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].y)) * _3317.y) / cbSceneParam._m0[78u].y)) + _3045;
        _3144 = (exp2(_3343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].z)) * _3317.z) / cbSceneParam._m0[78u].z)) + _3046;
        _3146 = _3326 * _3047;
    }
    else
    {
        _3140 = _3044;
        _3142 = _3045;
        _3144 = _3046;
        _3146 = _3047;
    }
    bool _3353;
    vec4 _3156;
    vec4 _3178;
    float _3180;
    float _3184;
    float _3185;
    float _3186;
    float _3187;
    bool _3197;
    for (;;)
    {
        _3156 = cbMatDynParam._m0[0u];
        float _3158 = roundEven(_3156.y);
        bool _3159 = _3158 == 3.0;
        float _3160 = log2(_3146);
        float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * _3016;
        float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * _3017;
        float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * _3018;
        float _3176 = _1153 + (-0.5);
        _3178 = cbMtdParam._m0[1u];
        _3180 = _3178.y * _3176;
        float _3183 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3184 = _3183 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = _3183 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
        _3186 = _3183 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
        _3187 = _3176 * 0.999000012874603271484375;
        _3197 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3197)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3187) < 0.5)
            {
                _3353 = true;
                break;
            }
        }
        uint _3294 = _1202 + uint(_3156.w);
        if ((cbInstanceData._m0[_3294].w < 1.0) && ((cbInstanceData._m0[_3294].w + _3187) < 0.5))
        {
            _3353 = true;
            break;
        }
        if ((_3180 + 1.0) < _3178.x)
        {
            _3353 = true;
            break;
        }
        _3353 = false;
        break;
    }
    float _3558;
    if (_3353)
    {
        discard_state = true;
        _3558 = 0.0;
    }
    else
    {
        _3558 = cbInstanceData._m0[_3019].w;
    }
    SV_Target.x = _3184;
    SV_Target.y = _3185;
    SV_Target.z = _3186;
    SV_Target.w = _3558;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3019].w;
    discard_exit();
}


