#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1439;
float _4080;
float _4081;
float _4082;
float _4083;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _367.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4092 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _443 = (_436 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _444 = (_436 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _445 = (_436 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _367.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[24u].z) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4103 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _522 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443);
    float _525 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444);
    float _528 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445);
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    float _574 = ((_546.x - _565) * _436) + _565;
    float _575 = ((_546.y - _566) * _436) + _566;
    float _576 = ((_546.z - _567) * _436) + _567;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _601 = ((_588.z - _576) * _509) + _576;
    float _604 = ((((_588.x - _574) * _509) + _574) * 2.0) + (-1.0);
    float _606 = ((((_588.y - _575) * _509) + _575) * 2.0) + (-1.0);
    float _607 = dot(vec2(_604, _606), vec2(_604, _606));
    float _4114 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _638 = (((_626.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _604;
    float _639 = (((_626.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _606;
    float _642 = fma(_612, _247, fma(_639, _254, _638 * _240));
    float _645 = fma(_612, _248, fma(_639, _255, _638 * _241));
    float _648 = fma(_612, _249, fma(_639, _256, _638 * _242));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _681 = _679.x;
    float _682 = 1.0 - _681;
    float _688 = (cbMtdParam._m0[19u].x + dot(vec4(_652 * _642, _652 * _645, _652 * _648, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_681 - _682) * cbMtdParam._m0[24u].w) + _682) * cbMtdParam._m0[21u].z);
    float _4125 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _691 = (-0.0) - cbMtdParam._m0[24u].x;
    float _693 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
    float _701 = _689 - ((_689 * TEXCOORD_8.x) * _694);
    float _702 = _689 - ((_689 * TEXCOORD_8.y) * _694);
    float _703 = _689 - ((_689 * TEXCOORD_8.z) * _694);
    float _710 = (_701 * (cbMtdParam._m0[17u].x - _522)) + _522;
    float _711 = (_702 * (cbMtdParam._m0[17u].y - _525)) + _525;
    float _712 = (_703 * (cbMtdParam._m0[17u].z - _528)) + _528;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _726 = _724.x;
    float _727 = 1.0 - _726;
    float _755 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_726 - _727) * cbMtdParam._m0[24u].y) + _727) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4146 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _764 = ((((cbMtdParam._m0[10u].x - _710) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _756) + _710;
    float _765 = ((((cbMtdParam._m0[10u].y - _711) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _756) + _711;
    float _766 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _712)) * _756) + _712;
    float _770 = (cbMtdParam._m0[19u].w * (_626.z - _601)) + _601;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _791 = (_784.x * 2.0) + (-1.0);
    float _792 = (_784.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4157 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _801 = ((_784.z - _770) * _701) + _770;
    float _804 = ((cbMtdParam._m0[23u].y - _801) * _756) + _801;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _829 = (_823.x * 2.0) + (-1.0);
    float _830 = (_823.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _4168 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) - _612) * _703) + _612;
    float _849 = (((_791 - _638) * _701) + _638) + (cbMtdParam._m0[21u].x * _638);
    float _850 = (((_792 - _639) * _702) + _639) + (cbMtdParam._m0[21u].x * _639);
    float _861 = (((_829 - _849) + (_849 * cbMtdParam._m0[22u].z)) * _756) + _849;
    float _862 = (((_830 - _850) + (_850 * cbMtdParam._m0[22u].z)) * _756) + _850;
    float _863 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) - _846)) + _846;
    float _865 = cbMtdParam._m0[22u].x + _626.w;
    float _868 = fma(_863, _247, fma(_862, _254, _861 * _240));
    float _871 = fma(_863, _248, fma(_862, _255, _861 * _241));
    float _874 = fma(_863, _249, fma(_862, _256, _861 * _242));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _4179 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _882 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4201 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4212 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4223 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _900 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _950 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _940);
    float _951 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _940);
    float _952 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _940);
    float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
    float _957 = _950 * _956;
    float _958 = _951 * _956;
    float _959 = _952 * _956;
    vec4 _964 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _966 = _964.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1120 = sqrt(((_950 * _950) + (_951 * _951)) + (_952 * _952));
        float _1126 = (cbMatDynParam._m0[5u].x * _1120) + cbMatDynParam._m0[5u].y;
        float _4234 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1131 = (cbMatDynParam._m0[5u].z * _1120) + cbMatDynParam._m0[5u].w;
        float _4245 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) - _1127)) + _1127) < ((_966 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _996 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _999 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _1002 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1015 = _259 + 9u;
    uint _1016 = _1015 + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _4256 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1040 = ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_879, _880, _881), vec3(_957, _958, _959));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _879) - _957;
    float _1049 = (_1044 * _880) - _958;
    float _1050 = (_1044 * _881) - _959;
    float _1054 = abs(dot(vec3(_957, _958, _959), vec3(_879, _880, _881)));
    float _4289 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_882);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1438;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1163 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1167 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1171 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1196 = _1101 + _879;
        float _1197 = _1105 + _880;
        float _1198 = _1109 + _881;
        float _1208 = fma(_1198, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196)) - _1163;
        float _1209 = fma(_1198, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196)) - _1167;
        float _1210 = fma(_1198, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196)) - _1171;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1163 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1167 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[34u].z) + ((((((_1171 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1266 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1232.x + (-0.5));
        float _1268 = _1266 * (_1232.y + (-0.5));
        float _1269 = _1266 * (_1232.z + (-0.5));
        float _1276 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1239.x + (-0.5));
        float _1278 = _1276 * (_1239.y + (-0.5));
        float _1279 = _1276 * (_1239.z + (-0.5));
        float _1286 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1246.x + (-0.5));
        float _1288 = _1286 * (_1246.y + (-0.5));
        float _1289 = _1286 * (_1246.z + (-0.5));
        float _1296 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1253.x + (-0.5));
        float _1298 = _1296 * (_1253.y + (-0.5));
        float _1299 = _1296 * (_1253.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1320 = (dot(vec3(_879, _880, _881), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1330 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4337 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1332 + 1.0))) + _1337) * _1300;
        float _1347 = _1268 * 0.5;
        float _1348 = _1278 * 0.5;
        float _1349 = _1288 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_879, _880, _881), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4370 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1374 + 1.0))) + _1379) * _1301;
        float _1389 = _1269 * 0.5;
        float _1390 = _1279 * 0.5;
        float _1391 = _1289 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_879, _880, _881), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4403 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1416 + 1.0))) + _1421) * _1302;
        _1438 = _1269;
        _1440 = _1268;
        _1441 = _1267;
        _1442 = _1279;
        _1443 = _1278;
        _1444 = _1277;
        _1445 = _1289;
        _1446 = _1288;
        _1447 = _1287;
        _1448 = _1302;
        _1449 = _1301;
        _1450 = _1300;
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1439;
        _1440 = _1439;
        _1441 = _1439;
        _1442 = _1439;
        _1443 = _1439;
        _1444 = _1439;
        _1445 = _1439;
        _1446 = _1439;
        _1447 = _1439;
        _1448 = _1439;
        _1449 = _1439;
        _1450 = _1439;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1480 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1484 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1488 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1511 = _1101 + _879;
        float _1512 = _1105 + _880;
        float _1513 = _1109 + _881;
        float _1523 = fma(_1513, cbModelParam._m0[30u].z, fma(_1512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1511)) - _1480;
        float _1524 = fma(_1513, cbModelParam._m0[31u].z, fma(_1512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1511)) - _1484;
        float _1525 = fma(_1513, cbModelParam._m0[32u].z, fma(_1512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1511)) - _1488;
        float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
        float _1542 = ((_1529 * _1523) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1480 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1529 * _1524) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1484 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1529 * _1525) / cbModelParam._m0[35u].z) + ((((((_1488 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        float _1579 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1546.x + (-0.5));
        float _1581 = _1579 * (_1546.y + (-0.5));
        float _1582 = _1579 * (_1546.z + (-0.5));
        float _1589 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1553.x + (-0.5));
        float _1591 = _1589 * (_1553.y + (-0.5));
        float _1592 = _1589 * (_1553.z + (-0.5));
        float _1599 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1560.x + (-0.5));
        float _1601 = _1599 * (_1560.y + (-0.5));
        float _1602 = _1599 * (_1560.z + (-0.5));
        float _1609 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1567.x + (-0.5));
        float _1611 = _1609 * (_1567.y + (-0.5));
        float _1612 = _1609 * (_1567.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_879, _880, _881), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4466 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1643 + 1.0))) + _1648) * _1613;
        float _1658 = _1581 * 0.5;
        float _1659 = _1591 * 0.5;
        float _1660 = _1601 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_879, _880, _881), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4499 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1685 + 1.0))) + _1690) * _1614;
        float _1700 = _1582 * 0.5;
        float _1701 = _1592 * 0.5;
        float _1702 = _1602 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_879, _880, _881), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4532 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1727 + 1.0))) + _1732) * _1615;
        _1749 = _1582;
        _1750 = _1581;
        _1751 = _1580;
        _1752 = _1592;
        _1753 = _1591;
        _1754 = _1590;
        _1755 = _1602;
        _1756 = _1601;
        _1757 = _1600;
        _1758 = _1615;
        _1759 = _1614;
        _1760 = _1613;
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1439;
        _1750 = _1439;
        _1751 = _1439;
        _1752 = _1439;
        _1753 = _1439;
        _1754 = _1439;
        _1755 = _1439;
        _1756 = _1439;
        _1757 = _1439;
        _1758 = _1439;
        _1759 = _1439;
        _1760 = _1439;
        _1761 = 0.0;
        _1762 = 0.0;
        _1763 = 0.0;
    }
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1451)) + _1451;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1452)) + _1452;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1453)) + _1453;
    float _1796 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1773));
    float _1817 = _1048 * 0.5;
    float _1818 = _1049 * 0.5;
    float _1819 = _1050 * 0.5;
    float _1820 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1823 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1826 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1860;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1833 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1438, _1442, _1445, _1448));
        float _1837 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1841 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1848 = dot(vec4(cbModelParam._m0[39u]), vec4(_1817, _1818, _1819, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1871;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1862 = dot(vec4(cbModelParam._m0[40u]), vec4(_1817, _1818, _1819, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1875 = (_1871 * cbModelParam._m0[1u].x) + (_1860 * (1.0 - cbModelParam._m0[1u].x));
    float _1885 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1885 : min(cbModelParam._m0[25u].z, _1885));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1948 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1951 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2149;
        if (_1948 > 0.0)
        {
            _2149 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2149 = frontier_phi_26_22_ladder;
        }
        float _2444;
        if (_1951 > 0.0)
        {
            _2444 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2444 = frontier_phi_38_33_ladder;
        }
        float _2446 = isnan(_2149) ? _1979 : (isnan(_1979) ? _2149 : min(_1979, _2149));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1945) + _1934;
        float _2452 = (_2447 * _1948) + _1938;
        float _2453 = (_2447 * _1951) + _1942;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1886);
            frontier_phi_16_38_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1886);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2030 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2034 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2038 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2041 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2044 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2047 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2154;
        if (_2041 > 0.0)
        {
            _2154 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2154 = frontier_phi_28_24_ladder;
        }
        float _2471;
        if (_2044 > 0.0)
        {
            _2471 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2471 = frontier_phi_40_35_ladder;
        }
        float _2798;
        if (_2047 > 0.0)
        {
            _2798 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2798 = frontier_phi_50_47_ladder;
        }
        float _2800 = isnan(_2471) ? _2154 : (isnan(_2154) ? _2471 : min(_2154, _2471));
        float _2801 = isnan(_2798) ? _2800 : (isnan(_2800) ? _2798 : min(_2800, _2798));
        float _2805 = (_2801 * _2041) + _2030;
        float _2806 = (_2801 * _2044) + _2034;
        float _2807 = (_2801 * _2047) + _2038;
        float _2808 = _2801 * 9.9999997473787516355514526367188e-05;
        float _2809 = (-1.0) - _2808;
        float _2811 = _2808 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2807 > _2811) || ((_2807 < _2809) || ((_2806 > _2811) || ((_2806 < _2809) || ((_2805 < _2809) || (_2805 > _2811))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2807, cbModelParam._m0[17u].z, fma(_2806, cbModelParam._m0[17u].y, _2805 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2807, cbModelParam._m0[18u].z, fma(_2806, cbModelParam._m0[18u].y, _2805 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2807, cbModelParam._m0[19u].z, fma(_2806, cbModelParam._m0[19u].y, _2805 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_50_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2066 = frontier_phi_25_50_ladder_2;
        _2068 = frontier_phi_25_50_ladder_1;
        _2070 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1976);
        _2066 = _2050.x * cbModelParam._m0[1u].z;
        _2068 = _2050.y * cbModelParam._m0[1u].z;
        _2070 = _2050.z * cbModelParam._m0[1u].z;
    }
    float _2082 = ((((1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1069 * _1056)) * _1040;
    float _2083 = _2082 * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2084 = _2082 * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2085 = _2082 * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2088 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2083 * cbSceneParam._m0[91u].x));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2141 = _2128 / _2140;
    float _2142 = _2132 / _2140;
    float _2143 = _2136 / _2140;
    float _2290;
    float _2291;
    float _2292;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2170 = ((uint(_2143 > cbSceneParam._m0[59u].y) + uint(_2143 > cbSceneParam._m0[59u].x)) + uint(_2143 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2171 = _2170 + 43u;
        uint _2179 = _2170 + 44u;
        uint _2187 = _2170 + 45u;
        uint _2195 = _2170 + 46u;
        float _2206 = fma(_2140, cbSceneParam._m0[_2171].w, fma(_2136, cbSceneParam._m0[_2171].z, fma(_2132, cbSceneParam._m0[_2171].y, _2128 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2140, cbSceneParam._m0[_2179].w, fma(_2136, cbSceneParam._m0[_2179].z, fma(_2132, cbSceneParam._m0[_2179].y, _2128 * cbSceneParam._m0[_2179].x)));
        float _2218 = fma(_2140, cbSceneParam._m0[_2195].w, fma(_2136, cbSceneParam._m0[_2195].z, fma(_2132, cbSceneParam._m0[_2195].y, _2128 * cbSceneParam._m0[_2195].x)));
        float _2223 = cbSceneParam._m0[33u].z * _2218;
        float _2225 = cbSceneParam._m0[33u].w * _2218;
        float _2228 = fma(_2140, cbSceneParam._m0[_2187].w, fma(_2136, cbSceneParam._m0[_2187].z, fma(_2132, cbSceneParam._m0[_2187].y, _2128 * cbSceneParam._m0[_2187].x))) / _2218;
        float _2276 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
        float _4658 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2283 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 + _2206) / _2218, (_2225 + _2210) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 + _2206) / _2218, (_2210 - _2223) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2223) / _2218, (_2210 - _2225) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2225) / _2218, (_2223 + _2210) / _2218), _2228), 0.0)).x), vec4(0.25)));
        _2290 = 1.0 - (_2283 * cbSceneParam._m0[34u].x);
        _2291 = 1.0 - (_2283 * cbSceneParam._m0[34u].y);
        _2292 = 1.0 - (_2283 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2290 = 1.0;
        _2291 = 1.0;
        _2292 = 1.0;
    }
    float _2356;
    float _2358;
    float _2360;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2344 = fma(_2140, cbSceneParam._m0[63u].w, fma(_2136, cbSceneParam._m0[63u].z, fma(_2132, cbSceneParam._m0[63u].y, _2128 * cbSceneParam._m0[63u].x)));
        float _2345 = fma(_2140, cbSceneParam._m0[60u].w, fma(_2136, cbSceneParam._m0[60u].z, fma(_2132, cbSceneParam._m0[60u].y, _2128 * cbSceneParam._m0[60u].x))) / _2344;
        float _2346 = fma(_2140, cbSceneParam._m0[61u].w, fma(_2136, cbSceneParam._m0[61u].z, fma(_2132, cbSceneParam._m0[61u].y, _2128 * cbSceneParam._m0[61u].x))) / _2344;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2345 >= cbSceneParam._m0[64u].x) && (_2346 >= cbSceneParam._m0[64u].y)) && (_2345 <= cbSceneParam._m0[64u].z)) && (_2346 <= cbSceneParam._m0[64u].w))
        {
            float _2484 = fma(_2140, cbSceneParam._m0[62u].w, fma(_2136, cbSceneParam._m0[62u].z, fma(_2132, cbSceneParam._m0[62u].y, _2128 * cbSceneParam._m0[62u].x))) / _2344;
            float _2488 = isnan(cbSceneParam._m0[41u].w) ? _2484 : (isnan(_2484) ? cbSceneParam._m0[41u].w : max(_2484, cbSceneParam._m0[41u].w));
            float _2531 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
            float _4674 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
            float _2538 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2345, cbSceneParam._m0[33u].w + _2346), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2345, _2346 - cbSceneParam._m0[33u].z), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].z, _2346 - cbSceneParam._m0[33u].w), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2346), _2488), 0.0)).x), vec4(0.25)));
            float _2542 = 1.0 - (_2538 * cbSceneParam._m0[34u].x);
            float _2543 = 1.0 - (_2538 * cbSceneParam._m0[34u].y);
            float _2544 = 1.0 - (_2538 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2544) ? _2292 : (isnan(_2292) ? _2544 : min(_2292, _2544));
            frontier_phi_37_36_ladder_1 = isnan(_2543) ? _2291 : (isnan(_2291) ? _2543 : min(_2291, _2543));
            frontier_phi_37_36_ladder_2 = isnan(_2542) ? _2290 : (isnan(_2290) ? _2542 : min(_2290, _2542));
        }
        else
        {
            frontier_phi_37_36_ladder = _2292;
            frontier_phi_37_36_ladder_1 = _2291;
            frontier_phi_37_36_ladder_2 = _2290;
        }
        _2356 = frontier_phi_37_36_ladder_2;
        _2358 = frontier_phi_37_36_ladder_1;
        _2360 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2356 = _2290;
        _2358 = _2291;
        _2360 = _2292;
    }
    uvec4 _2365 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2367 = _2365.x * 14u;
    uint _2368 = _2367 + 13u;
    float _2375 = _1040 + (-1.0);
    float _2380 = (cbLight._m0[_2368].x * _2375) + 1.0;
    float _2381 = (cbLight._m0[_2368].y * _2375) + 1.0;
    float _2382 = (cbLight._m0[_2368].z * _2375) + 1.0;
    float _2383 = (cbLight._m0[_2368].w * _2375) + 1.0;
    uint _2384 = _2367 + 5u;
    float _2390 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
    uint _2394 = _2367 + 4u;
    float _2403 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
    uint _2407 = _2367 | 1u;
    float _2418 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_879, _880, _881));
    float _2421 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_879, _880, _881));
    float _4710 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _4721 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2426 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * 0.3183098733425140380859375;
    float _2428 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * 0.3183098733425140380859375;
    float _2435 = ((cbLight._m0[_2384].x * _2390) * _2428) + (((cbLight._m0[_2394].x * _2356) * _2403) * _2426);
    float _2436 = ((_2390 * cbLight._m0[_2384].y) * _2428) + (((cbLight._m0[_2394].y * _2358) * _2403) * _2426);
    float _2437 = ((_2390 * cbLight._m0[_2384].z) * _2428) + (((cbLight._m0[_2394].z * _2360) * _2403) * _2426);
    uvec4 _2441 = floatBitsToUint(cbLight._m0[_2367 + 12u]);
    bool _2443 = _2441.x == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2443)
    {
        _2545 = _2435;
        _2547 = _2436;
        _2549 = _2437;
    }
    else
    {
        uint _2553 = _2367 + 6u;
        float _2569 = (dot(vec3(cbLight._m0[_2367 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4732 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2572 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2545 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2435;
        _2547 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2436;
        _2549 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2437;
    }
    bool _2552 = _2441.y == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2552)
    {
        _2607 = _2545;
        _2609 = _2547;
        _2611 = _2549;
    }
    else
    {
        uint _2769 = _2367 + 7u;
        float _2785 = (dot(vec3(cbLight._m0[_2367 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2786 = _2785 * _2785;
        float _4748 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2787 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2788 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2607 = (((cbLight._m0[_2769].x * 0.3183098733425140380859375) * _2787) * _2788) + _2545;
        _2609 = (((cbLight._m0[_2769].y * 0.3183098733425140380859375) * _2787) * _2788) + _2547;
        _2611 = (((cbLight._m0[_2769].z * 0.3183098733425140380859375) * _2787) * _2788) + _2549;
    }
    uint _2614 = _2367 + 8u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _882) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2367].x + _957;
    float _2630 = cbLight._m0[_2367].y + _958;
    float _2631 = cbLight._m0[_2367].z + _959;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2367].xyz));
    float _4764 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _4775 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2643 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2644 = dot(vec3(_879, _880, _881), vec3(_2636, _2637, _2638));
    float _4786 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2636, _2637, _2638));
    float _4797 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2628 * _2628;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2667 = (exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2668 = 1.0 - _2628;
    float _2679 = (0.5 / (((_2643 * ((_2642 * _2668) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2668) + _2628) * _2642))) * _2642;
    float _4808 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    uint _2695 = _2367 + 9u;
    float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _882) * 0.949999988079071044921875);
    float _2707 = _2706 * _2706;
    float _2708 = cbLight._m0[_2407].x + _957;
    float _2709 = cbLight._m0[_2407].y + _958;
    float _2710 = cbLight._m0[_2407].z + _959;
    float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
    float _2715 = _2714 * _2708;
    float _2716 = _2714 * _2709;
    float _2717 = _2714 * _2710;
    float _2718 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2407].xyz));
    float _4819 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2722 = dot(vec3(_879, _880, _881), vec3(_2715, _2716, _2717));
    float _4830 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2726 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2715, _2716, _2717));
    float _4841 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2730 = _2707 * _2707;
    float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
    float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2744 = 1.0 - _2707;
    float _2754 = (0.5 / (((_2643 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2744) + _2707) * _2721))) * _2721;
    float _4852 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
    float _2766 = (((_2743 * cbLight._m0[_2695].x) * _2756) * _2390) + ((((cbLight._m0[_2614].x * _2356) * _2667) * _2681) * _2403);
    float _2767 = (((_2743 * cbLight._m0[_2695].y) * _2756) * _2390) + ((((cbLight._m0[_2614].y * _2358) * _2667) * _2681) * _2403);
    float _2768 = (((_2743 * cbLight._m0[_2695].z) * _2756) * _2390) + ((((cbLight._m0[_2614].z * _2360) * _2667) * _2681) * _2403);
    float _2824;
    float _2826;
    float _2828;
    if (_2443)
    {
        _2824 = _2766;
        _2826 = _2767;
        _2828 = _2768;
    }
    else
    {
        uint _2830 = _2367 + 2u;
        uint _2834 = _2367 + 10u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _882) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _957;
        float _2851 = cbLight._m0[_2830].y + _958;
        float _2852 = cbLight._m0[_2830].z + _959;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2830].xyz));
        float _4863 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2864 = dot(vec3(_879, _880, _881), vec3(_2857, _2858, _2859));
        float _4874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4885 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2885 = (exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2886 = 1.0 - _2849;
        float _2896 = (0.5 / (((_2643 * ((_2863 * _2886) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2886) + _2849) * _2863))) * _2863;
        float _4896 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2824 = (((_2885 * cbLight._m0[_2834].x) * _2898) * _2899) + _2766;
        _2826 = (((_2885 * cbLight._m0[_2834].y) * _2898) * _2899) + _2767;
        _2828 = (((_2885 * cbLight._m0[_2834].z) * _2898) * _2899) + _2768;
    }
    float _2930;
    float _2932;
    float _2934;
    if (_2552)
    {
        _2930 = _2824;
        _2932 = _2826;
        _2934 = _2828;
    }
    else
    {
        uint _2941 = _2367 + 3u;
        uint _2945 = _2367 + 11u;
        float _2959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2941].w)) * _882) * 0.949999988079071044921875);
        float _2960 = _2959 * _2959;
        float _2961 = cbLight._m0[_2941].x + _957;
        float _2962 = cbLight._m0[_2941].y + _958;
        float _2963 = cbLight._m0[_2941].z + _959;
        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
        float _2968 = _2967 * _2961;
        float _2969 = _2967 * _2962;
        float _2970 = _2967 * _2963;
        float _2971 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2941].xyz));
        float _4912 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2974 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2975 = dot(vec3(_879, _880, _881), vec3(_2968, _2969, _2970));
        float _4923 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2979 = dot(vec3(cbLight._m0[_2941].xyz), vec3(_2968, _2969, _2970));
        float _4934 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2983 = _2960 * _2960;
        float _2987 = ((_2978 * _2978) * (_2983 + (-1.0))) + 1.0;
        float _2996 = (exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2997 = 1.0 - _2960;
        float _3007 = (0.5 / (((_2643 * ((_2974 * _2997) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2997) + _2960) * _2974))) * _2974;
        float _4945 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3009 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2983 / ((_2987 * _2987) * 3.141590118408203125));
        float _3010 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2930 = (((_2996 * cbLight._m0[_2945].x) * _3009) * _3010) + _2824;
        _2932 = (((_2996 * cbLight._m0[_2945].y) * _3009) * _3010) + _2826;
        _2934 = (((_2996 * cbLight._m0[_2945].z) * _3009) * _3010) + _2828;
    }
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_2365.y == 0u)
    {
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.x;
        uint _3043 = uint((float(_3031.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _3032))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _3032)));
        float _3053 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3054 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        uint _3057 = uint(isnan(14.0) ? _3054 : (isnan(_3054) ? 14.0 : min(_3054, 14.0)));
        uvec4 _3062 = texelFetch(g_lightClusterGridBuffer, int(((_3057 << 2u) + (_3043 << 6u)) >> 2u));
        uint _3063 = _3062.x;
        uint _3064 = _3031.z;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((((1u << ((_3064 >> 4u) & 15u)) + 4294967295u) & _3063) == 0u) || ((_3064 & 240u) == 0u))
        {
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
        }
        else
        {
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            uint _3301 = 0u;
            uint _3310;
            bool _3311;
            for (;;)
            {
                _3310 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                _3311 = _3310 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3311)
                {
                    frontier_phi_71_pred = _3300;
                    frontier_phi_71_pred_1 = _3299;
                    frontier_phi_71_pred_2 = _3298;
                    frontier_phi_71_pred_3 = _3297;
                    frontier_phi_71_pred_4 = _3296;
                    frontier_phi_71_pred_5 = _3295;
                }
                else
                {
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    uint _3446;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3310;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    for (;;)
                    {
                        uint _3450 = uint(findLSB(_3446)) + (_3301 << 5u);
                        uint _3447 = (_3446 + 4294967295u) & _3446;
                        uint _3452 = _3450 * 48u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 3u)).x));
                        uint _3472 = (_3450 * 48u) + 4u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 3u)).x));
                        uint _3491 = (_3450 * 48u) + 8u;
                        vec3 _3502 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x));
                        float _3506 = _3466.x - _2141;
                        float _3507 = _3466.y - _2142;
                        float _3508 = _3466.z - _2143;
                        float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                        float _3512 = inversesqrt(_3509);
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3516 = dot(vec3(_996, _999, _1002), vec3(_3513, _3514, _3515));
                        float _3521 = 1.0 - (_3509 * _3466.w);
                        float _4971 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3523 = sqrt(_3509) * _3485.w;
                        float _3526 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3516) + _3527;
                        float _3533 = _3523 * _3523;
                        float _3537 = ((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3522) / ((_3533 * 0.699999988079071044921875) + 1.0);
                        float _3541 = (-0.0) - _2141;
                        float _3542 = (-0.0) - _2142;
                        float _3543 = (-0.0) - _2143;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3548 = _3547 * _3541;
                        float _3549 = _3547 * _3542;
                        float _3550 = _3547 * _3543;
                        float _3557 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                        float _3558 = 1.0 - _1056;
                        float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                        float _3566 = _3565 * _3565;
                        float _3567 = _3566 * _3566;
                        float _3568 = _3548 + _3513;
                        float _3569 = _3549 + _3514;
                        float _3570 = _3550 + _3515;
                        float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                        float _3578 = dot(vec3(_996, _999, _1002), vec3(_3548, _3549, _3550));
                        float _4987 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3582 = dot(vec3(_996, _999, _1002), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                        float _4998 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                        float _3590 = _3526 * _3566;
                        float _3591 = _3590 * _3590;
                        float _3594 = ((1.0 - _3591) * _3516) + _3591;
                        float _5009 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3595 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                        float _3596 = 1.0 - _3566;
                        float _3606 = (0.5 / (((_3595 * ((_3581 * _3596) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3595 * _3596) + _3566) * _3581))) * _3595;
                        float _5020 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3617 = (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3589 * _3589) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125))) * _3522;
                        _3370 = (_3537 * _3485.x) + _3443;
                        _3371 = (_3537 * _3485.y) + _3444;
                        _3372 = (_3537 * _3485.z) + _3445;
                        _3367 = (_3617 * _3502.x) + _3440;
                        _3368 = (_3617 * _3502.y) + _3441;
                        _3369 = (_3617 * _3502.z) + _3442;
                        if (_3447 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3447;
                        }
                    }
                    frontier_phi_71_pred = _3372;
                    frontier_phi_71_pred_1 = _3371;
                    frontier_phi_71_pred_2 = _3370;
                    frontier_phi_71_pred_3 = _3369;
                    frontier_phi_71_pred_4 = _3368;
                    frontier_phi_71_pred_5 = _3367;
                }
                _3154 = frontier_phi_71_pred;
                _3152 = frontier_phi_71_pred_1;
                _3150 = frontier_phi_71_pred_2;
                _3148 = frontier_phi_71_pred_3;
                _3146 = frontier_phi_71_pred_4;
                _3144 = frontier_phi_71_pred_5;
                uint _3302 = _3301 + 1u;
                if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3295 = _3144;
                    _3296 = _3146;
                    _3297 = _3148;
                    _3298 = _3150;
                    _3299 = _3152;
                    _3300 = _3154;
                    _3301 = _3302;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
        }
        uvec4 _3157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3158 = _3157.z;
        uint _3160 = (_3158 >> 8u) & 15u;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        if (((4294967295u << _3160) & _3063) == 0u)
        {
            _3263 = _3143;
            _3265 = _3145;
            _3267 = _3147;
            _3269 = _3149;
            _3271 = _3151;
            _3273 = _3153;
        }
        else
        {
            float _3288 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _3289 = _3288 * _2141;
            float _3290 = _3288 * _2142;
            float _3291 = _3288 * _2143;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3160 < ((_3158 >> 12u) & 15u))
            {
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3423 = _3143;
                float _3424 = _3145;
                float _3425 = _3147;
                float _3426 = _3149;
                float _3427 = _3151;
                float _3428 = _3153;
                uint _3429 = _3160;
                uint _3438;
                bool _3439;
                for (;;)
                {
                    _3438 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3429 << 2u)) >> 2u)).x;
                    _3439 = _3438 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3439)
                    {
                        frontier_phi_82_pred = _3428;
                        frontier_phi_82_pred_1 = _3427;
                        frontier_phi_82_pred_2 = _3426;
                        frontier_phi_82_pred_3 = _3425;
                        frontier_phi_82_pred_4 = _3424;
                        frontier_phi_82_pred_5 = _3423;
                    }
                    else
                    {
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        float _3646 = _3425;
                        float _3647 = _3426;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        uint _3650 = _3438;
                        uint _3651;
                        vec4 _3676;
                        float _3677;
                        vec4 _3692;
                        vec3 _3704;
                        vec4 _3719;
                        vec4 _3734;
                        float _3780;
                        bool _3781;
                        for (;;)
                        {
                            uint _3661 = ((_3429 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3650));
                            _3651 = (_3650 + 4294967295u) & _3650;
                            uint _3663 = _3661 * 40u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3677 = _3676.w;
                            uint _3679 = (_3661 * 40u) + 4u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3661 * 40u) + 8u;
                            _3704 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x));
                            uint _3706 = (_3661 * 40u) + 16u;
                            _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3721 = (_3661 * 40u) + 20u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3661 * 40u) + 24u;
                            vec4 _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3755 = (_3661 * 40u) + 28u;
                            vec4 _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3780 = fma(_2143, _3768.z, fma(_2142, _3768.y, _3768.x * _2141)) + _3768.w;
                            _3781 = !((fma(_2143, _3749.z, fma(_2142, _3749.y, _3749.x * _2141)) + _3749.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3781)
                            {
                                float _3808 = _3676.x - _2141;
                                float _3809 = _3676.y - _2142;
                                float _3810 = _3676.z - _2143;
                                float _3811 = dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810));
                                float _3814 = inversesqrt(_3811);
                                float _3815 = _3814 * _3808;
                                float _3816 = _3814 * _3809;
                                float _3817 = _3814 * _3810;
                                float _3821 = 1.0 - (_3811 / (_3677 * _3677));
                                float _5031 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3826 = sqrt(_3811) * _3692.w;
                                float _3828 = 1.39999997615814208984375 / (_3826 + 1.39999997615814208984375);
                                float _3829 = _3828 * _3828;
                                float _3832 = ((1.0 - _3829) * dot(vec3(_3815, _3816, _3817), vec3(_996, _999, _1002))) + _3829;
                                float _3835 = _3826 * _3826;
                                float _3839 = (fma(_2143, _3719.z, fma(_2142, _3719.y, _3719.x * _2141)) + _3719.w) / _3780;
                                float _3840 = (fma(_2143, _3734.z, fma(_2142, _3734.y, _3734.x * _2141)) + _3734.w) / _3780;
                                float _3844 = 1.0 - dot(vec2(_3839, _3840), vec2(_3839, _3840));
                                float _5047 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3846 = _3845 * (((isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0))) * _3822) / ((_3835 * 0.699999988079071044921875) + 1.0));
                                float _3858 = exp2(log2(1.0 / ((_3835 * 3.5) + 5.0)) * 0.25);
                                float _3859 = 1.0 - _1056;
                                float _3866 = sqrt(1.0 - ((1.0 - (_3859 * _3859)) * (1.0 - (_3858 * _3858))));
                                float _3867 = _3866 * _3866;
                                float _3868 = _3867 * _3867;
                                float _3869 = _3815 - _3289;
                                float _3870 = _3816 - _3290;
                                float _3871 = _3817 - _3291;
                                float _3875 = inversesqrt(dot(vec3(_3869, _3870, _3871), vec3(_3869, _3870, _3871)));
                                float _3879 = dot(vec3(_996, _999, _1002), vec3((-0.0) - _3289, (-0.0) - _3290, (-0.0) - _3291));
                                float _5058 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3883 = dot(vec3(_996, _999, _1002), vec3(_3875 * _3869, _3875 * _3870, _3875 * _3871));
                                float _5069 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3890 = ((_3886 * _3886) * (_3868 + (-1.0))) + 1.0;
                                float _3891 = _3828 * _3867;
                                float _3892 = _3891 * _3891;
                                float _3898 = ((1.0 - _3892) * dot(vec3(_996, _999, _1002), vec3(_3815, _3816, _3817))) + _3892;
                                float _5080 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3900 = 1.0 - _3867;
                                float _3910 = (0.5 / (((_3899 * ((_3882 * _3900) + _3867)) + 9.9999999392252902907785028219223e-09) + (((_3899 * _3900) + _3867) * _3882))) * _3899;
                                float _5091 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3920 = (_3845 * _3822) * (((_3868 * 3.1415927410125732421875) * (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0)))) / ((_3890 * _3890) * ((_3835 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3846 * _3692.z;
                                frontier_phi_88_pred_1 = _3846 * _3692.y;
                                frontier_phi_88_pred_2 = _3846 * _3692.x;
                                frontier_phi_88_pred_3 = _3920 * _3704.z;
                                frontier_phi_88_pred_4 = _3920 * _3704.y;
                                frontier_phi_88_pred_5 = _3920 * _3704.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3929 = frontier_phi_88_pred;
                            _3928 = frontier_phi_88_pred_1;
                            _3927 = frontier_phi_88_pred_2;
                            _3926 = frontier_phi_88_pred_3;
                            _3925 = frontier_phi_88_pred_4;
                            _3924 = frontier_phi_88_pred_5;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            if (_3651 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3651;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3636;
                        frontier_phi_82_pred_1 = _3635;
                        frontier_phi_82_pred_2 = _3634;
                        frontier_phi_82_pred_3 = _3633;
                        frontier_phi_82_pred_4 = _3632;
                        frontier_phi_82_pred_5 = _3631;
                    }
                    _3274 = frontier_phi_82_pred;
                    _3272 = frontier_phi_82_pred_1;
                    _3270 = frontier_phi_82_pred_2;
                    _3268 = frontier_phi_82_pred_3;
                    _3266 = frontier_phi_82_pred_4;
                    _3264 = frontier_phi_82_pred_5;
                    uint _3430 = _3429 + 1u;
                    if (_3430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3423 = _3264;
                        _3424 = _3266;
                        _3425 = _3268;
                        _3426 = _3270;
                        _3427 = _3272;
                        _3428 = _3274;
                        _3429 = _3430;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3270;
                frontier_phi_63_64_ladder_1 = _3274;
                frontier_phi_63_64_ladder_2 = _3272;
                frontier_phi_63_64_ladder_3 = _3268;
                frontier_phi_63_64_ladder_4 = _3266;
                frontier_phi_63_64_ladder_5 = _3264;
            }
            else
            {
                frontier_phi_63_64_ladder = _3149;
                frontier_phi_63_64_ladder_1 = _3153;
                frontier_phi_63_64_ladder_2 = _3151;
                frontier_phi_63_64_ladder_3 = _3147;
                frontier_phi_63_64_ladder_4 = _3145;
                frontier_phi_63_64_ladder_5 = _3143;
            }
            _3263 = frontier_phi_63_64_ladder_5;
            _3265 = frontier_phi_63_64_ladder_4;
            _3267 = frontier_phi_63_64_ladder_3;
            _3269 = frontier_phi_63_64_ladder;
            _3271 = frontier_phi_63_64_ladder_2;
            _3273 = frontier_phi_63_64_ladder_1;
        }
        float _3278 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3076 = (_3278 * _3269) + _2607;
        _3078 = (_3278 * _3271) + _2609;
        _3080 = (_3278 * _3273) + _2611;
        _3082 = ((_3263 * 0.039999999105930328369140625) * _3278) + _2930;
        _3084 = ((_3265 * 0.039999999105930328369140625) * _3278) + _2932;
        _3086 = ((_3267 * 0.039999999105930328369140625) * _3278) + _2934;
    }
    else
    {
        _3076 = _2607;
        _3078 = _2609;
        _3080 = _2611;
        _3082 = _2930;
        _3084 = _2932;
        _3086 = _2934;
    }
    float _5107 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5118 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _5129 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _3103 = ((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3076 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1040))) + ((_3082 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _3104 = ((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3078 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1040))) + ((_3084 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _3105 = ((isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0))) * (_3080 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1040))) + ((_3086 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    uint _3106 = _259 + 6u;
    float _3114 = _977 / cbSceneParam._m0[86u].x;
    float _3115 = _978 / cbSceneParam._m0[86u].y;
    vec4 _3129 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, (log2((isnan(cbSceneParam._m0[77u].w) ? _900 : (isnan(_900) ? cbSceneParam._m0[77u].w : min(_900, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3131 = _3129.x;
    float _3132 = _3129.y;
    float _3133 = _3129.z;
    float _3134 = _3129.w;
    float _3205;
    float _3207;
    float _3209;
    float _3211;
    if (_900 > cbSceneParam._m0[78u].w)
    {
        float _3168 = isnan(_900) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _900 : min(cbSceneParam._m0[80u].w, _900));
        float _3169 = _3168 / _900;
        float _3180 = _3169 * _950;
        float _3181 = _951 * _3169;
        float _3182 = (-0.0) - _3181;
        float _3183 = _3169 * _952;
        float _3185 = (cbSceneParam._m0[77u].w * _3182) / _3168;
        float _3186 = _3185 + cbSceneParam._m0[79u].w;
        float _3187 = cbSceneParam._m0[79u].w - _3181;
        float _3193 = sqrt(((_3180 * _3180) + (_3181 * _3181)) + (_3183 * _3183));
        float _3196 = (1.0 - (cbSceneParam._m0[77u].w / _3168)) * _3193;
        float _3201 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3203 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3380;
        if (abs((_3182 - _3185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3380 = ((((_3186 > 0.0) ? exp2(_3201 * _3186) : (2.0 - exp2(_3203 * _3186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3196;
        }
        else
        {
            float _3324 = 1.0 / cbSceneParam._m0[80u].x;
            float _3325 = isnan(_3187) ? _3186 : (isnan(_3186) ? _3187 : max(_3186, _3187));
            float _3326 = isnan(_3187) ? _3186 : (isnan(_3186) ? _3187 : min(_3186, _3187));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            _3380 = ((abs(_3193 / _3182) * cbSceneParam._m0[80u].y) * ((((_3335 - _3336) * 2.0) - ((exp2(_3201 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0)))) - exp2(_3201 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))))) * _3324)) - ((exp2(_3203 * _3335) - exp2(_3203 * _3336)) * _3324))) + (_3196 * cbSceneParam._m0[80u].z);
        }
        vec4 _3382 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, 1.0), 0.0);
        float _3391 = exp2((_3380 * (-1.44269502162933349609375)) * (1.0 - _3382.w));
        float _3392 = log2(_3391);
        float _3408 = log2(_3134);
        _3205 = (exp2(_3408 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].x)) * _3382.x) / cbSceneParam._m0[78u].x)) + _3131;
        _3207 = (exp2(_3408 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].y)) * _3382.y) / cbSceneParam._m0[78u].y)) + _3132;
        _3209 = (exp2(_3408 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].z)) * _3382.z) / cbSceneParam._m0[78u].z)) + _3133;
        _3211 = _3391 * _3134;
    }
    else
    {
        _3205 = _3131;
        _3207 = _3132;
        _3209 = _3133;
        _3211 = _3134;
    }
    bool _3418;
    vec4 _3221;
    vec4 _3243;
    float _3245;
    float _3249;
    float _3250;
    float _3251;
    float _3252;
    bool _3262;
    for (;;)
    {
        _3221 = cbMatDynParam._m0[0u];
        float _3223 = roundEven(_3221.y);
        bool _3224 = _3223 == 3.0;
        float _3225 = log2(_3211);
        float _3232 = exp2(_3225 * cbSceneParam._m0[78u].x) * _3103;
        float _3233 = exp2(_3225 * cbSceneParam._m0[78u].y) * _3104;
        float _3234 = exp2(_3225 * cbSceneParam._m0[78u].z) * _3105;
        float _3241 = _966 + (-0.5);
        _3243 = cbMtdParam._m0[1u];
        _3245 = _3243.y * _3241;
        float _3248 = (_3223 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3249 = _3248 * (_3224 ? _3232 : (_3232 + (cbSceneParam._m0[72u].w * _3205)));
        _3250 = _3248 * (_3224 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3207)));
        _3251 = _3248 * (_3224 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3209)));
        _3252 = _3241 * 0.999000012874603271484375;
        _3262 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3262)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3252) < 0.5)
            {
                _3418 = true;
                break;
            }
        }
        uint _3359 = _1015 + uint(_3221.w);
        if ((cbInstanceData._m0[_3359].w < 1.0) && ((cbInstanceData._m0[_3359].w + _3252) < 0.5))
        {
            _3418 = true;
            break;
        }
        if ((_3245 + 1.0) < _3243.x)
        {
            _3418 = true;
            break;
        }
        _3418 = false;
        break;
    }
    float _3622;
    if (_3418)
    {
        discard_state = true;
        _3622 = 0.0;
    }
    else
    {
        _3622 = cbInstanceData._m0[_3106].w;
    }
    SV_Target.x = _3249;
    SV_Target.y = _3250;
    SV_Target.z = _3251;
    SV_Target.w = _3622;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3106].w;
    discard_exit();
}


