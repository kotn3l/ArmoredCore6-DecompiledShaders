#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1403;
float _3764;
float _3765;
float _3766;
float _3767;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3776 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3787 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3798 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _408.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3809 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _482 = (_475 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368;
    float _483 = (_475 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _484 = (_475 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _408.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3820 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _558 = (_337.x * cbMtdParam._m0[9u].x) * ((_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _559 = (_337.y * cbMtdParam._m0[9u].y) * ((_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _560 = (_337.z * cbMtdParam._m0[9u].z) * ((_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _564 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _558;
    float _567 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _559;
    float _570 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _560;
    float _578 = (((_558 - _564) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _564) * 4.55000019073486328125;
    float _580 = (((_559 - _567) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _567) * 4.55000019073486328125;
    float _582 = (((_560 - _570) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _570) * 4.55000019073486328125;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    float _645 = ((_617.x - _636) * _475) + _636;
    float _646 = ((_617.y - _637) * _475) + _637;
    float _647 = ((_617.z - _638) * _475) + _638;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _672 = ((_659.z - _647) * _548) + _647;
    float _675 = ((((_659.x - _645) * _548) + _645) * 2.0) + (-1.0);
    float _676 = ((((_659.y - _646) * _548) + _646) * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3831 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _682 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _714 = (_675 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_594.x * 2.0) + (-1.0)))) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_676 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_594.y * 2.0) + (-1.0)))) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _756 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_729 - _730) * cbMtdParam._m0[24u].y) + _730) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3842 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _765 = ((((cbMtdParam._m0[10u].x - _578) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _757) + _578;
    float _766 = ((((cbMtdParam._m0[10u].y - _580) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _757) + _580;
    float _767 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _582)) * _757) + _582;
    float _772 = (((_594.z - _672) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _672;
    float _776 = ((_702.z - _772) * cbMtdParam._m0[19u].w) + _772;
    float _780 = ((cbMtdParam._m0[23u].y - _776) * _757) + _776;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _805 = (_799.x * 2.0) + (-1.0);
    float _806 = (_799.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _3853 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _823 = (_757 * (((cbMtdParam._m0[22u].z * _714) - _714) + _805)) + _714;
    float _824 = (_757 * (((cbMtdParam._m0[22u].z * _715) - _715) + _806)) + _715;
    float _825 = (_757 * (sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) - _682)) + _682;
    float _829 = cbMtdParam._m0[22u].x + _702.w;
    float _832 = fma(_825, _249 * NORMAL.x, fma(_824, _256 * TANGENT.x, (_242 * _234) * _823));
    float _835 = fma(_825, _249 * NORMAL.y, fma(_824, _256 * TANGENT.y, (_242 * _235) * _823));
    float _838 = fma(_825, _249 * NORMAL.z, fma(_824, _256 * TANGENT.z, (_242 * _236) * _823));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _3864 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _846 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _3886 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3897 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3908 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _864 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _904);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    vec4 _928 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _930 = _928.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1084 = sqrt(((_914 * _914) + (_915 * _915)) + (_916 * _916));
        float _1090 = (cbMatDynParam._m0[5u].x * _1084) + cbMatDynParam._m0[5u].y;
        float _3919 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1095 = (cbMatDynParam._m0[5u].z * _1084) + cbMatDynParam._m0[5u].w;
        float _3930 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) - _1091)) + _1091) < ((_930 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _941 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _942 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _960 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _963 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _966 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _979 = _281 + 9u;
    uint _980 = _979 + uint(cbMatDynParam._m0[0u].w);
    float _986 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_980].x;
    float _987 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_980].y;
    float _988 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_980].z;
    float _3941 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _941, cbSceneParam._m0[86u].y * _942));
    float _1004 = ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * TEXCOORD_5.w) * _1000.x;
    float _1005 = dot(vec3(_843, _844, _845), vec3(_921, _922, _923));
    float _1008 = _1005 * 2.0;
    float _1012 = (_1008 * _843) - _921;
    float _1013 = (_1008 * _844) - _922;
    float _1014 = (_1008 * _845) - _923;
    float _1018 = abs(dot(vec3(_921, _922, _923), vec3(_843, _844, _845)));
    float _3974 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1020 = sqrt(_846);
    float _1033 = exp2((_1020 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1020 * 3.0));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1131 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1135 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1160 = _1065 + _843;
        float _1161 = _1069 + _844;
        float _1162 = _1073 + _845;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1127;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1131;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1135;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_843, _844, _845), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4022 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_843, _844, _845), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4055 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_843, _844, _845), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4088 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1448 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1452 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1475 = _1065 + _843;
        float _1476 = _1069 + _844;
        float _1477 = _1073 + _845;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_843, _844, _845), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4151 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_843, _844, _845), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4184 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_843, _844, _845), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4217 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1403;
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = _1403;
        _1723 = _1403;
        _1724 = _1403;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1415)) + _1415;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1416)) + _1416;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1417)) + _1417;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1012 * 0.5;
    float _1782 = _1013 * 0.5;
    float _1783 = _1014 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1014, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012));
        float _1913 = fma(_1014, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012));
        float _1916 = fma(_1014, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1944 = frontier_phi_17_15_ladder;
        }
        float _2146;
        if (_1913 > 0.0)
        {
            _2146 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2146 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1916 > 0.0)
        {
            _2389 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2146) ? _1944 : (isnan(_1944) ? _2146 : min(_1944, _2146));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1910) + _1899;
        float _2397 = (_2392 * _1913) + _1903;
        float _2398 = (_2392 * _1916) + _1907;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_16_38_ladder_2;
        _1934 = frontier_phi_16_38_ladder_1;
        _1936 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1012, _1013, _1014), _1850);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1996 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _2000 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _2004 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _2007 = fma(_1014, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012));
        float _2010 = fma(_1014, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012));
        float _2013 = fma(_1014, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012));
        float _2151;
        if (_2007 > 0.0)
        {
            _2151 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2151 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_2010 > 0.0)
        {
            _2416 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2621;
        if (_2013 > 0.0)
        {
            _2621 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2621 = frontier_phi_49_46_ladder;
        }
        float _2623 = isnan(_2416) ? _2151 : (isnan(_2151) ? _2416 : min(_2151, _2416));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _2007) + _1996;
        float _2629 = (_2624 * _2010) + _2000;
        float _2630 = (_2624 * _2013) + _2004;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2631;
        float _2634 = _2631 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2630 > _2634) || ((_2630 < _2632) || ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 < _2632) || (_2628 > _2634))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2630, cbModelParam._m0[17u].z, fma(_2629, cbModelParam._m0[17u].y, _2628 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2630, cbModelParam._m0[18u].z, fma(_2629, cbModelParam._m0[18u].y, _2628 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2630, cbModelParam._m0[19u].z, fma(_2629, cbModelParam._m0[19u].y, _2628 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_25_49_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _2032 = frontier_phi_25_49_ladder_2;
        _2034 = frontier_phi_25_49_ladder_1;
        _2036 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1012, _1013, _1014), _1941);
        _2032 = _2016.x * cbModelParam._m0[1u].z;
        _2034 = _2016.y * cbModelParam._m0[1u].z;
        _2036 = _2016.z * cbModelParam._m0[1u].z;
    }
    float _2048 = ((((1.0 - _1033) * ((_1020 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1033 * _1020)) * _1004;
    float _2049 = _2048 * ((cbModelParam._m0[1u].w * (_2032 - _1932)) + _1932);
    float _2050 = _2048 * ((cbModelParam._m0[1u].w * (_2034 - _1934)) + _1934);
    float _2051 = _2048 * ((cbModelParam._m0[1u].w * (_2036 - _1936)) + _1936);
    float _2054 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2057 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2060 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2049 * cbSceneParam._m0[91u].x));
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _1004 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2105 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2109 = _2072 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_843, _844, _845));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_843, _844, _845));
    float _4353 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4364 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2089].x * _2095) * _2130) + ((cbLight._m0[_2099].x * _2105) * _2128);
    float _2138 = ((_2095 * cbLight._m0[_2089].y) * _2130) + ((_2105 * cbLight._m0[_2099].y) * _2128);
    float _2139 = ((_2095 * cbLight._m0[_2089].z) * _2130) + ((_2105 * cbLight._m0[_2099].z) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2145)
    {
        _2156 = _2137;
        _2158 = _2138;
        _2160 = _2139;
    }
    else
    {
        uint _2164 = _2072 + 6u;
        float _2180 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4375 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2183 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2156 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _2137;
        _2158 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _2138;
        _2160 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _2139;
    }
    bool _2163 = _2143.y == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2163)
    {
        _2201 = _2156;
        _2203 = _2158;
        _2205 = _2160;
    }
    else
    {
        uint _2360 = _2072 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4391 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2379 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2201 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2156;
        _2203 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2158;
        _2205 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2160;
    }
    uint _2208 = _2072 + 8u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _846) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2072].x + _921;
    float _2224 = cbLight._m0[_2072].y + _922;
    float _2225 = cbLight._m0[_2072].z + _923;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2072].xyz));
    float _4407 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _4418 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2237 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2238 = dot(vec3(_843, _844, _845), vec3(_2230, _2231, _2232));
    float _4429 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2230, _2231, _2232));
    float _4440 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2222 * _2222;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2262 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2237 * ((_2236 * _2262) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2262) + _2222) * _2236))) * _2236;
    float _4451 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    uint _2286 = _2072 + 9u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _846) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2109].x + _921;
    float _2300 = cbLight._m0[_2109].y + _922;
    float _2301 = cbLight._m0[_2109].z + _923;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2109].xyz));
    float _4462 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2313 = dot(vec3(_843, _844, _845), vec3(_2306, _2307, _2308));
    float _4473 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2306, _2307, _2308));
    float _4484 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2298 * _2298;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2335 = 1.0 - _2298;
    float _2345 = (0.5 / (((_2237 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2335) + _2298) * _2312))) * _2312;
    float _4495 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    float _2357 = (((_2334 * cbLight._m0[_2286].x) * _2347) * _2095) + (((_2261 * cbLight._m0[_2208].x) * _2275) * _2105);
    float _2358 = (((_2334 * cbLight._m0[_2286].y) * _2347) * _2095) + (((_2261 * cbLight._m0[_2208].y) * _2275) * _2105);
    float _2359 = (((_2334 * cbLight._m0[_2286].z) * _2347) * _2095) + (((_2261 * cbLight._m0[_2208].z) * _2275) * _2105);
    float _2421;
    float _2423;
    float _2425;
    if (_2145)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2072 + 2u;
        uint _2431 = _2072 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _846) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _921;
        float _2448 = cbLight._m0[_2427].y + _922;
        float _2449 = cbLight._m0[_2427].z + _923;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2427].xyz));
        float _4506 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2461 = dot(vec3(_843, _844, _845), vec3(_2454, _2455, _2456));
        float _4517 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4528 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2237 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2483) + _2446) * _2460))) * _2460;
        float _4539 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2421 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2357;
        _2423 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2358;
        _2425 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2359;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2163)
    {
        _2531 = _2421;
        _2533 = _2423;
        _2535 = _2425;
    }
    else
    {
        uint _2542 = _2072 + 3u;
        uint _2546 = _2072 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _846) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _921;
        float _2563 = cbLight._m0[_2542].y + _922;
        float _2564 = cbLight._m0[_2542].z + _923;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2542].xyz));
        float _4555 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2576 = dot(vec3(_843, _844, _845), vec3(_2569, _2570, _2571));
        float _4566 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4577 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2598 = 1.0 - _2561;
        float _2608 = (0.5 / (((_2237 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2598) + _2561) * _2575))) * _2575;
        float _4588 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2531 = (((_2597 * cbLight._m0[_2546].x) * _2610) * _2611) + _2421;
        _2533 = (((_2597 * cbLight._m0[_2546].y) * _2610) * _2611) + _2423;
        _2535 = (((_2597 * cbLight._m0[_2546].z) * _2610) * _2611) + _2425;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2070.y == 0u)
    {
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2686;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2686;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2686;
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _942) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _941) / _2702)));
        float _2723 = (log2(_2689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2992;
                    frontier_phi_66_pred_2 = _2991;
                    frontier_phi_66_pred_3 = _2990;
                    frontier_phi_66_pred_4 = _2989;
                    frontier_phi_66_pred_5 = _2988;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _3002;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_2993 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _2687;
                        float _3199 = _3158.y - _2688;
                        float _3200 = _3158.z - _2689;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_960, _963, _966), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4614 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _2687;
                        float _3234 = (-0.0) - _2688;
                        float _3235 = (-0.0) - _2689;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3250 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _1020;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_960, _963, _966), vec3(_3240, _3241, _3242));
                        float _4630 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3275 = dot(vec3(_960, _963, _966), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4641 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3218 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3208) + _3284;
                        float _4652 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4663 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3282 * _3282) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3062 = (_3229 * _3177.x) + _3135;
                        _3063 = (_3229 * _3177.y) + _3136;
                        _3064 = (_3229 * _3177.z) + _3137;
                        _3059 = (_3310 * _3194.x) + _3132;
                        _3060 = (_3310 * _3194.y) + _3133;
                        _3061 = (_3310 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_66_pred = _3059;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                _2835 = frontier_phi_66_pred;
                _2845 = frontier_phi_66_pred_1;
                _2843 = frontier_phi_66_pred_2;
                _2841 = frontier_phi_66_pred_3;
                _2839 = frontier_phi_66_pred_4;
                _2837 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2835;
                    _2988 = _2837;
                    _2989 = _2839;
                    _2990 = _2841;
                    _2991 = _2843;
                    _2992 = _2845;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2851) & _2733) == 0u)
        {
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
            float _2981 = _2980 * _2687;
            float _2982 = _2980 * _2688;
            float _2983 = _2980 * _2689;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3115 = _2834;
                float _3116 = _2836;
                float _3117 = _2838;
                float _3118 = _2840;
                float _3119 = _2842;
                float _3120 = _2844;
                uint _3121 = _2851;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3131)
                    {
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        uint _3343 = _3130;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3427;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3354 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3354 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3354 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3354 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_2689, _3461.z, fma(_2688, _3461.y, _3461.x * _2687)) + _3461.w;
                            _3474 = !((fma(_2689, _3442.z, fma(_2688, _3442.y, _3442.x * _2687)) + _3442.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3369.x - _2687;
                                float _3502 = _3369.y - _2688;
                                float _3503 = _3369.z - _2689;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3370 * _3370));
                                float _4674 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3519 = sqrt(_3504) * _3385.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_960, _963, _966))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_2689, _3412.z, fma(_2688, _3412.y, _3412.x * _2687)) + _3412.w) / _3473;
                                float _3533 = (fma(_2689, _3427.z, fma(_2688, _3427.y, _3427.x * _2687)) + _3427.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4690 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _1020;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _2981;
                                float _3563 = _3509 - _2982;
                                float _3564 = _3510 - _2983;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_960, _963, _966), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4701 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3576 = dot(vec3(_960, _963, _966), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4712 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_960, _963, _966), vec3(_3508, _3509, _3510))) + _3585;
                                float _4723 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4734 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3539 * _3385.y;
                                frontier_phi_83_pred_1 = _3539 * _3385.x;
                                frontier_phi_83_pred_2 = _3613 * _3397.z;
                                frontier_phi_83_pred_3 = _3613 * _3397.y;
                                frontier_phi_83_pred_4 = _3613 * _3397.x;
                                frontier_phi_83_pred_5 = _3539 * _3385.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_83_pred;
                            _3620 = frontier_phi_83_pred_1;
                            _3619 = frontier_phi_83_pred_2;
                            _3618 = frontier_phi_83_pred_3;
                            _3617 = frontier_phi_83_pred_4;
                            _3622 = frontier_phi_83_pred_5;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3329;
                        frontier_phi_77_pred_1 = _3328;
                        frontier_phi_77_pred_2 = _3327;
                        frontier_phi_77_pred_3 = _3326;
                        frontier_phi_77_pred_4 = _3325;
                        frontier_phi_77_pred_5 = _3324;
                    }
                    _2966 = frontier_phi_77_pred;
                    _2964 = frontier_phi_77_pred_1;
                    _2962 = frontier_phi_77_pred_2;
                    _2960 = frontier_phi_77_pred_3;
                    _2958 = frontier_phi_77_pred_4;
                    _2956 = frontier_phi_77_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2956;
                        _3116 = _2958;
                        _3117 = _2960;
                        _3118 = _2962;
                        _3119 = _2964;
                        _3120 = _2966;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_58_59_ladder = _2838;
                frontier_phi_58_59_ladder_1 = _2844;
                frontier_phi_58_59_ladder_2 = _2842;
                frontier_phi_58_59_ladder_3 = _2840;
                frontier_phi_58_59_ladder_4 = _2836;
                frontier_phi_58_59_ladder_5 = _2834;
            }
            _2955 = frontier_phi_58_59_ladder_5;
            _2957 = frontier_phi_58_59_ladder_4;
            _2959 = frontier_phi_58_59_ladder;
            _2961 = frontier_phi_58_59_ladder_3;
            _2963 = frontier_phi_58_59_ladder_2;
            _2965 = frontier_phi_58_59_ladder_1;
        }
        float _2970 = isnan(1.0) ? _1004 : (isnan(_1004) ? 1.0 : min(_1004, 1.0));
        _2746 = (_2970 * _2961) + _2201;
        _2748 = (_2970 * _2963) + _2203;
        _2750 = (_2970 * _2965) + _2205;
        _2752 = ((_2955 * 0.039999999105930328369140625) * _2970) + _2531;
        _2754 = ((_2957 * 0.039999999105930328369140625) * _2970) + _2533;
        _2756 = ((_2959 * 0.039999999105930328369140625) * _2970) + _2535;
    }
    else
    {
        _2746 = _2201;
        _2748 = _2203;
        _2750 = _2205;
        _2752 = _2531;
        _2754 = _2533;
        _2756 = _2535;
    }
    float _4750 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4761 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4772 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2773 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2746 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1004))) + ((_2752 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2748 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1004))) + ((_2754 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2750 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1004))) + ((_2756 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    uint _2776 = _281 + 6u;
    float _2784 = _941 / cbSceneParam._m0[86u].x;
    float _2785 = _942 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _864 : (isnan(_864) ? cbSceneParam._m0[77u].w : min(_864, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_864 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_864) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _864 : min(cbSceneParam._m0[80u].w, _864));
        float _2860 = _2859 / _864;
        float _2871 = _2860 * _914;
        float _2872 = _915 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2875 = _2860 * _916;
        float _2877 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2872;
        float _2885 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2873 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3018 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3072 = ((abs(_2885 / _2873) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2895 * _3027) - exp2(_2895 * _3028)) * _3016))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2804);
        _2897 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2899 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2901 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2903 = _3083 * _2804;
    }
    else
    {
        _2897 = _2801;
        _2899 = _2802;
        _2901 = _2803;
        _2903 = _2804;
    }
    bool _3110;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2944;
    bool _2954;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2903);
        float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * _2773;
        float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * _2774;
        float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * _2775;
        float _2933 = _930 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
        _2944 = _2933 * 0.999000012874603271484375;
        _2954 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2954)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2944) < 0.5)
            {
                _3110 = true;
                break;
            }
        }
        uint _3051 = _979 + uint(_2913.w);
        if ((cbInstanceData._m0[_3051].w < 1.0) && ((cbInstanceData._m0[_3051].w + _2944) < 0.5))
        {
            _3110 = true;
            break;
        }
        if ((_2937 + 1.0) < _2935.x)
        {
            _3110 = true;
            break;
        }
        _3110 = false;
        break;
    }
    float _3315;
    if (_3110)
    {
        discard_state = true;
        _3315 = 0.0;
    }
    else
    {
        _3315 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3315;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


