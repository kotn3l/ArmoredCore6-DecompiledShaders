#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1485;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3812 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3823 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3834 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3845 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _488 = (_481 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _489 = (_481 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _490 = (_481 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3856 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _564 = (_343.x * cbMtdParam._m0[9u].x) * ((_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488);
    float _565 = (_343.y * cbMtdParam._m0[9u].y) * ((_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489);
    float _566 = (_343.z * cbMtdParam._m0[9u].z) * ((_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490);
    float _570 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _564;
    float _573 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _565;
    float _576 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _566;
    float _584 = (((_564 - _570) * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) + _570) * 4.55000019073486328125;
    float _586 = (((_565 - _573) * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) + _573) * 4.55000019073486328125;
    float _588 = (((_566 - _576) * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) + _576) * 4.55000019073486328125;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _670 = _666.z;
    float _677 = ((_649.x - _668) * _481) + _668;
    float _678 = ((_649.y - _669) * _481) + _669;
    float _679 = ((_649.z - _670) * _481) + _670;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _704 = ((_691.z - _679) * _554) + _679;
    float _707 = ((((_691.x - _677) * _554) + _677) * 2.0) + (-1.0);
    float _708 = ((((_691.y - _678) * _554) + _678) * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3867 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _714 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _762 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _765 = ((isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : min(_762, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _774 = (_765 - ((((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _765))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3888 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _782 = (_775 * ((_607.x * cbMtdParam._m0[18u].x) - _584)) + _584;
    float _783 = (_775 * ((_607.y * cbMtdParam._m0[18u].y) - _586)) + _586;
    float _784 = (_775 * ((_607.z * cbMtdParam._m0[18u].z) - _588)) + _588;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _798 = _796.x;
    float _799 = 1.0 - _798;
    float _824 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_798 - _799) * cbMtdParam._m0[24u].y) + _799) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3899 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _833 = ((((cbMtdParam._m0[10u].x - _782) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _825) + _782;
    float _834 = ((((cbMtdParam._m0[10u].y - _783) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _825) + _783;
    float _835 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _784)) * _825) + _784;
    float _840 = (((_626.z - _704) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _704;
    float _844 = ((_728.z - _840) * cbMtdParam._m0[19u].w) + _840;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3910 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = (_775 * (_858.z - _844)) + _844;
    float _878 = ((cbMtdParam._m0[23u].y - _875) * _825) + _875;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _905 = (_899.x * 2.0) + (-1.0);
    float _906 = (_899.y * 2.0) + (-1.0);
    float _907 = dot(vec2(_905, _906), vec2(_905, _906));
    float _3921 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _921 = (_707 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_626.x * 2.0) + (-1.0)))) + (((_728.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _922 = (_708 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_626.y * 2.0) + (-1.0)))) + (((_728.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _934 = (((_865 - _921) + (cbMtdParam._m0[21u].x * _921)) * _775) + _921;
    float _935 = (((_866 - _922) + (cbMtdParam._m0[21u].x * _922)) * _775) + _922;
    float _936 = (_775 * (sqrt(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) - _714)) + _714;
    float _947 = (((_905 - _934) + (_934 * cbMtdParam._m0[22u].z)) * _825) + _934;
    float _948 = (((_906 - _935) + (_935 * cbMtdParam._m0[22u].z)) * _825) + _935;
    float _949 = ((sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) - _936) * _825) + _936;
    float _951 = cbMtdParam._m0[22u].x + _728.w;
    float _954 = fma(_949, _255 * NORMAL.x, fma(_948, _262 * TANGENT.x, (_248 * _240) * _947));
    float _957 = fma(_949, _255 * NORMAL.y, fma(_948, _262 * TANGENT.y, (_248 * _241) * _947));
    float _960 = fma(_949, _255 * NORMAL.z, fma(_948, _262 * TANGENT.z, (_248 * _242) * _947));
    float _964 = inversesqrt(dot(vec3(_954, _957, _960), vec3(_954, _957, _960)));
    float _965 = _964 * _954;
    float _966 = _964 * _957;
    float _967 = _964 * _960;
    float _3932 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _968 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _3954 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3965 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3976 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _986 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1036 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1026);
    float _1037 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1026);
    float _1038 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1026);
    float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
    float _1043 = _1036 * _1042;
    float _1044 = _1037 * _1042;
    float _1045 = _1038 * _1042;
    float _1051 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1052 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1070 = fma(_967, cbSceneParam._m0[5u].z, fma(_966, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _965));
    float _1073 = fma(_967, cbSceneParam._m0[6u].z, fma(_966, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _965));
    float _1076 = fma(_967, cbSceneParam._m0[7u].z, fma(_966, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _965));
    uint _1090 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1096 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_1090].x;
    float _1097 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_1090].y;
    float _1098 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1090].z;
    float _3987 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1051, cbSceneParam._m0[86u].y * _1052));
    float _1114 = ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * TEXCOORD_5.w) * _1110.x;
    float _1115 = dot(vec3(_965, _966, _967), vec3(_1043, _1044, _1045));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _965) - _1043;
    float _1123 = (_1118 * _966) - _1044;
    float _1124 = (_1118 * _967) - _1045;
    float _1128 = abs(dot(vec3(_1043, _1044, _1045), vec3(_965, _966, _967)));
    float _4020 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_968);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1484;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1209 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1213 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1217 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1242 = _1175 + _965;
        float _1243 = _1179 + _966;
        float _1244 = _1183 + _967;
        float _1254 = fma(_1244, cbModelParam._m0[26u].z, fma(_1243, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242)) - _1209;
        float _1255 = fma(_1244, cbModelParam._m0[27u].z, fma(_1243, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242)) - _1213;
        float _1256 = fma(_1244, cbModelParam._m0[28u].z, fma(_1243, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242)) - _1217;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1209 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1213 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[34u].z) + ((((((_1217 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1312 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1278.x + (-0.5));
        float _1314 = _1312 * (_1278.y + (-0.5));
        float _1315 = _1312 * (_1278.z + (-0.5));
        float _1322 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1285.x + (-0.5));
        float _1324 = _1322 * (_1285.y + (-0.5));
        float _1325 = _1322 * (_1285.z + (-0.5));
        float _1332 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1292.x + (-0.5));
        float _1334 = _1332 * (_1292.y + (-0.5));
        float _1335 = _1332 * (_1292.z + (-0.5));
        float _1342 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1299.x + (-0.5));
        float _1344 = _1342 * (_1299.y + (-0.5));
        float _1345 = _1342 * (_1299.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1366 = (dot(vec3(_965, _966, _967), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1376 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4068 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1378 + 1.0))) + _1383) * _1346;
        float _1393 = _1314 * 0.5;
        float _1394 = _1324 * 0.5;
        float _1395 = _1334 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_965, _966, _967), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4101 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1420 + 1.0))) + _1425) * _1347;
        float _1435 = _1315 * 0.5;
        float _1436 = _1325 * 0.5;
        float _1437 = _1335 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_965, _966, _967), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4134 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1462 + 1.0))) + _1467) * _1348;
        _1484 = _1315;
        _1486 = _1314;
        _1487 = _1313;
        _1488 = _1325;
        _1489 = _1324;
        _1490 = _1323;
        _1491 = _1335;
        _1492 = _1334;
        _1493 = _1333;
        _1494 = _1348;
        _1495 = _1347;
        _1496 = _1346;
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1485;
        _1486 = _1485;
        _1487 = _1485;
        _1488 = _1485;
        _1489 = _1485;
        _1490 = _1485;
        _1491 = _1485;
        _1492 = _1485;
        _1493 = _1485;
        _1494 = _1485;
        _1495 = _1485;
        _1496 = _1485;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1523 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1527 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1531 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1554 = _1175 + _965;
        float _1555 = _1179 + _966;
        float _1556 = _1183 + _967;
        float _1566 = fma(_1556, cbModelParam._m0[30u].z, fma(_1555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1554)) - _1523;
        float _1567 = fma(_1556, cbModelParam._m0[31u].z, fma(_1555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1554)) - _1527;
        float _1568 = fma(_1556, cbModelParam._m0[32u].z, fma(_1555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1554)) - _1531;
        float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
        float _1585 = ((_1572 * _1566) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1523 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1572 * _1567) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1527 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1572 * _1568) / cbModelParam._m0[35u].z) + ((((((_1531 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        float _1622 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1589.x + (-0.5));
        float _1624 = _1622 * (_1589.y + (-0.5));
        float _1625 = _1622 * (_1589.z + (-0.5));
        float _1632 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1596.x + (-0.5));
        float _1634 = _1632 * (_1596.y + (-0.5));
        float _1635 = _1632 * (_1596.z + (-0.5));
        float _1642 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1603.x + (-0.5));
        float _1644 = _1642 * (_1603.y + (-0.5));
        float _1645 = _1642 * (_1603.z + (-0.5));
        float _1652 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1610.x + (-0.5));
        float _1654 = _1652 * (_1610.y + (-0.5));
        float _1655 = _1652 * (_1610.z + (-0.5));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = _1623 * 0.5;
        float _1660 = _1633 * 0.5;
        float _1661 = _1643 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_965, _966, _967), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4197 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1686 + 1.0))) + _1691) * _1656;
        float _1701 = _1624 * 0.5;
        float _1702 = _1634 * 0.5;
        float _1703 = _1644 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_965, _966, _967), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4230 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1728 + 1.0))) + _1733) * _1657;
        float _1743 = _1625 * 0.5;
        float _1744 = _1635 * 0.5;
        float _1745 = _1645 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_965, _966, _967), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4263 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1770 + 1.0))) + _1775) * _1658;
        _1792 = _1625;
        _1793 = _1624;
        _1794 = _1623;
        _1795 = _1635;
        _1796 = _1634;
        _1797 = _1633;
        _1798 = _1645;
        _1799 = _1644;
        _1800 = _1643;
        _1801 = _1658;
        _1802 = _1657;
        _1803 = _1656;
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
    }
    else
    {
        _1792 = _1485;
        _1793 = _1485;
        _1794 = _1485;
        _1795 = _1485;
        _1796 = _1485;
        _1797 = _1485;
        _1798 = _1485;
        _1799 = _1485;
        _1800 = _1485;
        _1801 = _1485;
        _1802 = _1485;
        _1803 = _1485;
        _1804 = 0.0;
        _1805 = 0.0;
        _1806 = 0.0;
    }
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1497)) + _1497;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1498)) + _1498;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1499)) + _1499;
    float _1839 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1816));
    float _1860 = _1122 * 0.5;
    float _1861 = _1123 * 0.5;
    float _1862 = _1124 * 0.5;
    float _1863 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1866 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1869 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1903;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1876 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1484, _1488, _1491, _1494));
        float _1880 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1884 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1891 = dot(vec4(cbModelParam._m0[39u]), vec4(_1860, _1861, _1862, 1.0));
        _1903 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1903 = 1.0;
    }
    float _1914;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1905 = dot(vec4(cbModelParam._m0[40u]), vec4(_1860, _1861, _1862, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1905) ? 0.0 : (isnan(0.0) ? _1905 : max(0.0, _1905))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1918 = (_1914 * cbModelParam._m0[1u].x) + (_1903 * (1.0 - cbModelParam._m0[1u].x));
    float _1928 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _968);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1928 : min(cbModelParam._m0[25u].z, _1928));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1976 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _1980 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _1984 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _1987 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _1990 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _1993 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2021;
        if (_1987 > 0.0)
        {
            _2021 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2021 = frontier_phi_14_12_ladder;
        }
        float _2242;
        if (_1990 > 0.0)
        {
            _2242 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2242 = frontier_phi_23_19_ladder;
        }
        float _2488;
        if (_1993 > 0.0)
        {
            _2488 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2488 = frontier_phi_35_30_ladder;
        }
        float _2490 = isnan(_2242) ? _2021 : (isnan(_2021) ? _2242 : min(_2021, _2242));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1987) + _1976;
        float _2496 = (_2491 * _1990) + _1980;
        float _2497 = (_2491 * _1993) + _1984;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1929);
            frontier_phi_13_35_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _2009 = frontier_phi_13_35_ladder_2;
        _2011 = frontier_phi_13_35_ladder_1;
        _2013 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1929);
        _2009 = _1997.x * cbModelParam._m0[1u].y;
        _2011 = _1997.y * cbModelParam._m0[1u].y;
        _2013 = _1997.z * cbModelParam._m0[1u].y;
    }
    float _2017 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _968);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2017 : min(cbModelParam._m0[25u].w, _2017));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2071 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2075 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2079 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2082 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2085 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2088 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2247;
        if (_2082 > 0.0)
        {
            _2247 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2247 = frontier_phi_25_21_ladder;
        }
        float _2515;
        if (_2085 > 0.0)
        {
            _2515 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2515 = frontier_phi_37_32_ladder;
        }
        float _2720;
        if (_2088 > 0.0)
        {
            _2720 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2720 = frontier_phi_46_43_ladder;
        }
        float _2722 = isnan(_2515) ? _2247 : (isnan(_2247) ? _2515 : min(_2247, _2515));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2082) + _2071;
        float _2728 = (_2723 * _2085) + _2075;
        float _2729 = (_2723 * _2088) + _2079;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _2018);
            frontier_phi_22_46_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2107 = frontier_phi_22_46_ladder_2;
        _2109 = frontier_phi_22_46_ladder_1;
        _2111 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2018);
        _2107 = _2091.x * cbModelParam._m0[1u].z;
        _2109 = _2091.y * cbModelParam._m0[1u].z;
        _2111 = _2091.z * cbModelParam._m0[1u].z;
    }
    float _2123 = ((((1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1143 * _1130)) * _1114;
    float _2124 = _2123 * ((cbModelParam._m0[1u].w * (_2107 - _2009)) + _2009);
    float _2125 = _2123 * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2126 = _2123 * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2124 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2124 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2124 * cbSceneParam._m0[91u].x));
    vec4 _2143 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1051, _1052));
    float _2145 = _2143.w;
    float _2157 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2145);
    float _2158 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2145);
    float _2159 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2145);
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _1114 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2201 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2205 = _2165 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_965, _966, _967));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_965, _966, _967));
    float _4399 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4410 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2182].x * _2188) * _2226) + (((cbLight._m0[_2192].x * _2157) * _2201) * _2224);
    float _2234 = ((_2188 * cbLight._m0[_2182].y) * _2226) + (((cbLight._m0[_2192].y * _2158) * _2201) * _2224);
    float _2235 = ((_2188 * cbLight._m0[_2182].z) * _2226) + (((cbLight._m0[_2192].z * _2159) * _2201) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2241)
    {
        _2252 = _2233;
        _2254 = _2234;
        _2256 = _2235;
    }
    else
    {
        uint _2260 = _2165 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_965, _966, _967)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4421 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2279 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2233;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2234;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2235;
    }
    bool _2259 = _2239.y == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2259)
    {
        _2297 = _2252;
        _2299 = _2254;
        _2301 = _2256;
    }
    else
    {
        uint _2459 = _2165 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_965, _966, _967)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4437 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2478 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2297 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2252;
        _2299 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2254;
        _2301 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2256;
    }
    uint _2304 = _2165 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _968) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2165].x + _1043;
    float _2320 = cbLight._m0[_2165].y + _1044;
    float _2321 = cbLight._m0[_2165].z + _1045;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_965, _966, _967), vec3(cbLight._m0[_2165].xyz));
    float _4453 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _4464 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2333 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2334 = dot(vec3(_965, _966, _967), vec3(_2326, _2327, _2328));
    float _4475 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2326, _2327, _2328));
    float _4486 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2333 * ((_2332 * _2358) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2358) + _2318) * _2332))) * _2332;
    float _4497 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2385 = _2165 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _968) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2205].x + _1043;
    float _2399 = cbLight._m0[_2205].y + _1044;
    float _2400 = cbLight._m0[_2205].z + _1045;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_965, _966, _967), vec3(cbLight._m0[_2205].xyz));
    float _4508 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2412 = dot(vec3(_965, _966, _967), vec3(_2405, _2406, _2407));
    float _4519 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2405, _2406, _2407));
    float _4530 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2434 = 1.0 - _2397;
    float _2444 = (0.5 / (((_2333 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2434) + _2397) * _2411))) * _2411;
    float _4541 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2456 = (((_2433 * cbLight._m0[_2385].x) * _2446) * _2188) + ((((cbLight._m0[_2304].x * _2157) * _2357) * _2371) * _2201);
    float _2457 = (((_2433 * cbLight._m0[_2385].y) * _2446) * _2188) + ((((cbLight._m0[_2304].y * _2158) * _2357) * _2371) * _2201);
    float _2458 = (((_2433 * cbLight._m0[_2385].z) * _2446) * _2188) + ((((cbLight._m0[_2304].z * _2159) * _2357) * _2371) * _2201);
    float _2520;
    float _2522;
    float _2524;
    if (_2241)
    {
        _2520 = _2456;
        _2522 = _2457;
        _2524 = _2458;
    }
    else
    {
        uint _2526 = _2165 + 2u;
        uint _2530 = _2165 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _968) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _1043;
        float _2547 = cbLight._m0[_2526].y + _1044;
        float _2548 = cbLight._m0[_2526].z + _1045;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_965, _966, _967), vec3(cbLight._m0[_2526].xyz));
        float _4552 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2560 = dot(vec3(_965, _966, _967), vec3(_2553, _2554, _2555));
        float _4563 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2333 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2582) + _2545) * _2559))) * _2559;
        float _4585 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2520 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2456;
        _2522 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2457;
        _2524 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2458;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2259)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2165 + 3u;
        uint _2645 = _2165 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _968) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1043;
        float _2662 = cbLight._m0[_2641].y + _1044;
        float _2663 = cbLight._m0[_2641].z + _1045;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_965, _966, _967), vec3(cbLight._m0[_2641].xyz));
        float _4601 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2675 = dot(vec3(_965, _966, _967), vec3(_2668, _2669, _2670));
        float _4612 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4623 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2697 = 1.0 - _2660;
        float _2707 = (0.5 / (((_2333 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2697) + _2660) * _2674))) * _2674;
        float _4634 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2630 = (((_2696 * cbLight._m0[_2645].x) * _2709) * _2710) + _2520;
        _2632 = (((_2696 * cbLight._m0[_2645].y) * _2709) * _2710) + _2522;
        _2634 = (((_2696 * cbLight._m0[_2645].z) * _2709) * _2710) + _2524;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2163.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1052) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _1051) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3094)
                {
                    frontier_phi_61_pred = _3078;
                    frontier_phi_61_pred_1 = _3083;
                    frontier_phi_61_pred_2 = _3082;
                    frontier_phi_61_pred_3 = _3081;
                    frontier_phi_61_pred_4 = _3080;
                    frontier_phi_61_pred_5 = _3079;
                }
                else
                {
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    uint _3208;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3093;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3212 = uint(findLSB(_3208)) + (_3084 << 5u);
                        uint _3209 = (_3208 + 4294967295u) & _3208;
                        uint _3214 = _3212 * 48u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3234 = (_3212 * 48u) + 4u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3253 = (_3212 * 48u) + 8u;
                        vec3 _3264 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x));
                        float _3268 = _3228.x - _2786;
                        float _3269 = _3228.y - _2787;
                        float _3270 = _3228.z - _2788;
                        float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                        float _3274 = inversesqrt(_3271);
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3278 = dot(vec3(_1070, _1073, _1076), vec3(_3275, _3276, _3277));
                        float _3283 = 1.0 - (_3271 * _3228.w);
                        float _4660 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3285 = sqrt(_3271) * _3247.w;
                        float _3288 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3278) + _3289;
                        float _3295 = _3285 * _3285;
                        float _3299 = ((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3284) / ((_3295 * 0.699999988079071044921875) + 1.0);
                        float _3303 = (-0.0) - _2786;
                        float _3304 = (-0.0) - _2787;
                        float _3305 = (-0.0) - _2788;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3320 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                        float _3321 = 1.0 - _1130;
                        float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                        float _3329 = _3328 * _3328;
                        float _3330 = _3329 * _3329;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3341 = dot(vec3(_1070, _1073, _1076), vec3(_3310, _3311, _3312));
                        float _4676 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3345 = dot(vec3(_1070, _1073, _1076), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                        float _4687 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                        float _3353 = _3288 * _3329;
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3278) + _3354;
                        float _4698 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3359 = 1.0 - _3329;
                        float _3369 = (0.5 / (((_3358 * ((_3344 * _3359) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3329) * _3344))) * _3358;
                        float _4709 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3380 = (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) / ((_3352 * _3352) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125))) * _3284;
                        _3137 = (_3299 * _3247.x) + _3205;
                        _3138 = (_3299 * _3247.y) + _3206;
                        _3139 = (_3299 * _3247.z) + _3207;
                        _3134 = (_3380 * _3264.x) + _3202;
                        _3135 = (_3380 * _3264.y) + _3203;
                        _3136 = (_3380 * _3264.z) + _3204;
                        if (_3209 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3209;
                        }
                    }
                    frontier_phi_61_pred = _3134;
                    frontier_phi_61_pred_1 = _3139;
                    frontier_phi_61_pred_2 = _3138;
                    frontier_phi_61_pred_3 = _3137;
                    frontier_phi_61_pred_4 = _3136;
                    frontier_phi_61_pred_5 = _3135;
                }
                _2934 = frontier_phi_61_pred;
                _2944 = frontier_phi_61_pred_1;
                _2942 = frontier_phi_61_pred_2;
                _2940 = frontier_phi_61_pred_3;
                _2938 = frontier_phi_61_pred_4;
                _2936 = frontier_phi_61_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2934;
                    _3079 = _2936;
                    _3080 = _2938;
                    _3081 = _2940;
                    _3082 = _2942;
                    _3083 = _2944;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2950) & _2832) == 0u)
        {
            _3046 = _2933;
            _3048 = _2935;
            _3050 = _2937;
            _3052 = _2939;
            _3054 = _2941;
            _3056 = _2943;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3072 = _3071 * _2786;
            float _3073 = _3071 * _2787;
            float _3074 = _3071 * _2788;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3185 = _2933;
                float _3186 = _2935;
                float _3187 = _2937;
                float _3188 = _2939;
                float _3189 = _2941;
                float _3190 = _2943;
                uint _3191 = _2950;
                uint _3200;
                bool _3201;
                for (;;)
                {
                    _3200 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                    _3201 = _3200 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3201)
                    {
                        frontier_phi_67_pred = _3188;
                        frontier_phi_67_pred_1 = _3189;
                        frontier_phi_67_pred_2 = _3190;
                        frontier_phi_67_pred_3 = _3187;
                        frontier_phi_67_pred_4 = _3186;
                        frontier_phi_67_pred_5 = _3185;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        uint _3404 = _3200;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3415 = ((_3191 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3415 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3415 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_2788, _3522.z, fma(_2787, _3522.y, _3522.x * _2786)) + _3522.w;
                            _3535 = !((fma(_2788, _3503.z, fma(_2787, _3503.y, _3503.x * _2786)) + _3503.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3430.x - _2786;
                                float _3563 = _3430.y - _2787;
                                float _3564 = _3430.z - _2788;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3431 * _3431));
                                float _4720 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3580 = sqrt(_3565) * _3446.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_1070, _1073, _1076))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_2788, _3473.z, fma(_2787, _3473.y, _3473.x * _2786)) + _3473.w) / _3534;
                                float _3594 = (fma(_2788, _3488.z, fma(_2787, _3488.y, _3488.x * _2786)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4736 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _1130;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3072;
                                float _3624 = _3570 - _3073;
                                float _3625 = _3571 - _3074;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_1070, _1073, _1076), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4747 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3637 = dot(vec3(_1070, _1073, _1076), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4758 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_1070, _1073, _1076), vec3(_3569, _3570, _3571))) + _3646;
                                float _4769 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4780 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3674 * _3458.x;
                                frontier_phi_73_pred_1 = _3674 * _3458.y;
                                frontier_phi_73_pred_2 = _3600 * _3446.z;
                                frontier_phi_73_pred_3 = _3600 * _3446.y;
                                frontier_phi_73_pred_4 = _3600 * _3446.x;
                                frontier_phi_73_pred_5 = _3674 * _3458.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3678 = frontier_phi_73_pred;
                            _3679 = frontier_phi_73_pred_1;
                            _3683 = frontier_phi_73_pred_2;
                            _3682 = frontier_phi_73_pred_3;
                            _3681 = frontier_phi_73_pred_4;
                            _3680 = frontier_phi_73_pred_5;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3388;
                        frontier_phi_67_pred_1 = _3389;
                        frontier_phi_67_pred_2 = _3390;
                        frontier_phi_67_pred_3 = _3387;
                        frontier_phi_67_pred_4 = _3386;
                        frontier_phi_67_pred_5 = _3385;
                    }
                    _3053 = frontier_phi_67_pred;
                    _3055 = frontier_phi_67_pred_1;
                    _3057 = frontier_phi_67_pred_2;
                    _3051 = frontier_phi_67_pred_3;
                    _3049 = frontier_phi_67_pred_4;
                    _3047 = frontier_phi_67_pred_5;
                    uint _3192 = _3191 + 1u;
                    if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3185 = _3047;
                        _3186 = _3049;
                        _3187 = _3051;
                        _3188 = _3053;
                        _3189 = _3055;
                        _3190 = _3057;
                        _3191 = _3192;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3055;
                frontier_phi_55_56_ladder_1 = _3057;
                frontier_phi_55_56_ladder_2 = _3053;
                frontier_phi_55_56_ladder_3 = _3051;
                frontier_phi_55_56_ladder_4 = _3049;
                frontier_phi_55_56_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_55_56_ladder = _2941;
                frontier_phi_55_56_ladder_1 = _2943;
                frontier_phi_55_56_ladder_2 = _2939;
                frontier_phi_55_56_ladder_3 = _2937;
                frontier_phi_55_56_ladder_4 = _2935;
                frontier_phi_55_56_ladder_5 = _2933;
            }
            _3046 = frontier_phi_55_56_ladder_5;
            _3048 = frontier_phi_55_56_ladder_4;
            _3050 = frontier_phi_55_56_ladder_3;
            _3052 = frontier_phi_55_56_ladder_2;
            _3054 = frontier_phi_55_56_ladder;
            _3056 = frontier_phi_55_56_ladder_1;
        }
        float _3061 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _2845 = (_3061 * _3052) + _2297;
        _2847 = (_3061 * _3054) + _2299;
        _2849 = (_3061 * _3056) + _2301;
        _2851 = ((_3046 * 0.039999999105930328369140625) * _3061) + _2630;
        _2853 = ((_3048 * 0.039999999105930328369140625) * _3061) + _2632;
        _2855 = ((_3050 * 0.039999999105930328369140625) * _3061) + _2634;
    }
    else
    {
        _2845 = _2297;
        _2847 = _2299;
        _2849 = _2301;
        _2851 = _2630;
        _2853 = _2632;
        _2855 = _2634;
    }
    float _4796 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4807 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4818 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    uint _2875 = _287 + 6u;
    float _2883 = _1051 / cbSceneParam._m0[86u].x;
    float _2884 = _1052 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _986 : (isnan(_986) ? cbSceneParam._m0[77u].w : min(_986, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    if (_986 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_986) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _986 : min(cbSceneParam._m0[80u].w, _986));
        float _2959 = _2958 / _986;
        float _2970 = _2959 * _1036;
        float _2971 = _1037 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2974 = _2959 * _1038;
        float _2976 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2977 = _2976 + cbSceneParam._m0[79u].w;
        float _2978 = cbSceneParam._m0[79u].w - _2971;
        float _2984 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2974 * _2974));
        float _2987 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2984;
        float _2992 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2994 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2972 - _2976) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2977 > 0.0) ? exp2(_2992 * _2977) : (2.0 - exp2(_2994 * _2977))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2987;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : max(_2977, _2978));
            float _3109 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : min(_2977, _2978));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3147 = ((abs(_2984 / _2972) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2992 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2992 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2994 * _3118) - exp2(_2994 * _3119)) * _3107))) + (_2987 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2903);
        _2996 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2998 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2901;
        _3000 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3002 = _3158 * _2903;
    }
    else
    {
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
        _3002 = _2903;
    }
    float _3014 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3015 = _3014 == 3.0;
    float _3016 = log2(_3002);
    float _3023 = exp2(_3016 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2845 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1114))) + ((_2851 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1918)) * cbPerFrame._m0[3u].x));
    float _3024 = exp2(_3016 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2847 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1114))) + ((_2853 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1918)) * cbPerFrame._m0[3u].x));
    float _3025 = exp2(_3016 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2849 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1114))) + ((_2855 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1918)) * cbPerFrame._m0[3u].x));
    float _3034 = (_3014 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3034 * (_3015 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.y = _3034 * (_3015 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2998)));
    SV_Target.z = _3034 * (_3015 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _3000)));
    SV_Target.w = cbInstanceData._m0[_2875].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
}


