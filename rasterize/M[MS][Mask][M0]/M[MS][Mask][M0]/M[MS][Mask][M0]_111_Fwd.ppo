#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].z) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3622 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _409 = (_402 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _410 = (_402 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _411 = (_402 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _428 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _460 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _474 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_450 - _460) * cbMtdParam._m0[24u].z) + _460) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3633 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _482 = (_475 * ((_428.x * cbMtdParam._m0[13u].x) - _409)) + _409;
    float _483 = (_475 * ((_428.y * cbMtdParam._m0[13u].y) - _410)) + _410;
    float _484 = (_475 * ((_428.z * cbMtdParam._m0[13u].z) - _411)) + _411;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _262) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _263) + cbTextureTilingScale._m0[24u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _543 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _330.z) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3644 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _551 = (_544 * ((_502.x * cbMtdParam._m0[14u].x) - _482)) + _482;
    float _552 = (_544 * ((_502.y * cbMtdParam._m0[14u].y) - _483)) + _483;
    float _553 = (_544 * ((_502.z * cbMtdParam._m0[14u].z) - _484)) + _484;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _402) + _590;
    float _600 = ((_571.y - _591) * _402) + _591;
    float _601 = ((_571.z - _592) * _402) + _592;
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _624 = ((_613.x - _599) * _475) + _599;
    float _625 = ((_613.y - _600) * _475) + _600;
    float _626 = ((_613.z - _601) * _475) + _601;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _262) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _263) + cbTextureTilingScale._m0[23u].w));
    float _651 = ((_638.z - _626) * _544) + _626;
    float _654 = ((((_638.x - _624) * _544) + _624) * 2.0) + (-1.0);
    float _656 = ((((_638.y - _625) * _544) + _625) * 2.0) + (-1.0);
    float _657 = dot(vec2(_654, _656), vec2(_654, _656));
    float _3655 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _717 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3666 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _725 = (_718 * (cbMtdParam._m0[17u].x - _551)) + _551;
    float _726 = (_718 * (cbMtdParam._m0[17u].y - _552)) + _552;
    float _727 = (_718 * (cbMtdParam._m0[17u].z - _553)) + _553;
    float _731 = (cbMtdParam._m0[19u].w * (_676.z - _651)) + _651;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _751 = (_744.x * 2.0) + (-1.0);
    float _752 = (_744.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3677 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _761 = (_718 * (_744.z - _731)) + _731;
    float _764 = (((_676.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _654;
    float _765 = (((_676.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _656;
    float _777 = (((_751 - _764) + (cbMtdParam._m0[21u].x * _764)) * _718) + _764;
    float _778 = (((_752 - _765) + (cbMtdParam._m0[21u].x * _765)) * _718) + _765;
    float _779 = (_718 * (sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) - _662)) + _662;
    float _783 = cbMtdParam._m0[22u].x + _676.w;
    float _786 = fma(_779, _229 * NORMAL.x, fma(_778, _236 * TANGENT.x, (_222 * _214) * _777));
    float _789 = fma(_779, _229 * NORMAL.y, fma(_778, _236 * TANGENT.y, (_222 * _215) * _777));
    float _792 = fma(_779, _229 * NORMAL.z, fma(_778, _236 * TANGENT.z, (_222 * _216) * _777));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _3688 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _800 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _3710 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3721 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3732 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _907 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _910 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _924 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3743 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _948 = ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_797, _798, _799), vec3(_877, _878, _879));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _797) - _877;
    float _957 = (_952 * _798) - _878;
    float _958 = (_952 * _799) - _879;
    float _962 = abs(dot(vec3(_877, _878, _879), vec3(_797, _798, _799)));
    float _3776 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_800);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1047 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1051 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1076 = _1009 + _797;
        float _1077 = _1013 + _798;
        float _1078 = _1017 + _799;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_797, _798, _799), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3824 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_797, _798, _799), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3857 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_797, _798, _799), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3890 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1360 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1364 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1387 = _1009 + _797;
        float _1388 = _1013 + _798;
        float _1389 = _1017 + _799;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_797, _798, _799), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3953 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_797, _798, _799), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _3986 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_797, _798, _799), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4019 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1319;
        _1626 = _1319;
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1331)) + _1331;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1332)) + _1332;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1333)) + _1333;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _956 * 0.5;
    float _1694 = _957 * 0.5;
    float _1695 = _958 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1809 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1813 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1817 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1820 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1823 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1826 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1854;
        if (_1820 > 0.0)
        {
            _1854 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1854 = frontier_phi_14_12_ladder;
        }
        float _2055;
        if (_1823 > 0.0)
        {
            _2055 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2055 = frontier_phi_23_19_ladder;
        }
        float _2298;
        if (_1826 > 0.0)
        {
            _2298 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2298 = frontier_phi_35_30_ladder;
        }
        float _2300 = isnan(_2055) ? _1854 : (isnan(_1854) ? _2055 : min(_1854, _2055));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1820) + _1809;
        float _2306 = (_2301 * _1823) + _1813;
        float _2307 = (_2301 * _1826) + _1817;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_13_35_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1842 = frontier_phi_13_35_ladder_2;
        _1844 = frontier_phi_13_35_ladder_1;
        _1846 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1762);
        _1842 = _1830.x * cbModelParam._m0[1u].y;
        _1844 = _1830.y * cbModelParam._m0[1u].y;
        _1846 = _1830.z * cbModelParam._m0[1u].y;
    }
    float _1850 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1850 : min(cbModelParam._m0[25u].w, _1850));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1919 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1922 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2060;
        if (_1916 > 0.0)
        {
            _2060 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2060 = frontier_phi_25_21_ladder;
        }
        float _2325;
        if (_1919 > 0.0)
        {
            _2325 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2325 = frontier_phi_37_32_ladder;
        }
        float _2530;
        if (_1922 > 0.0)
        {
            _2530 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2530 = frontier_phi_46_43_ladder;
        }
        float _2532 = isnan(_2325) ? _2060 : (isnan(_2060) ? _2325 : min(_2060, _2325));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1916) + _1905;
        float _2538 = (_2533 * _1919) + _1909;
        float _2539 = (_2533 * _1922) + _1913;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1851);
            frontier_phi_22_46_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_22_46_ladder_2;
        _1943 = frontier_phi_22_46_ladder_1;
        _1945 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1851);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1957 = ((((1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_977 * _964)) * _948;
    float _1958 = _1957 * ((cbModelParam._m0[1u].w * (_1941 - _1842)) + _1842);
    float _1959 = _1957 * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1960 = _1957 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    uvec4 _1979 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1981 = _1979.x * 14u;
    uint _1982 = _1981 + 13u;
    float _1989 = _948 + (-1.0);
    float _1994 = (cbLight._m0[_1982].x * _1989) + 1.0;
    float _1995 = (cbLight._m0[_1982].y * _1989) + 1.0;
    float _1996 = (cbLight._m0[_1982].z * _1989) + 1.0;
    float _1997 = (cbLight._m0[_1982].w * _1989) + 1.0;
    uint _1998 = _1981 + 5u;
    float _2004 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2008 = _1981 + 4u;
    float _2014 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2018 = _1981 | 1u;
    float _2029 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_797, _798, _799));
    float _2032 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_797, _798, _799));
    float _4155 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _4166 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2037 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _2039 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _2046 = ((cbLight._m0[_1998].x * _2004) * _2039) + ((cbLight._m0[_2008].x * _2014) * _2037);
    float _2047 = ((_2004 * cbLight._m0[_1998].y) * _2039) + ((_2014 * cbLight._m0[_2008].y) * _2037);
    float _2048 = ((_2004 * cbLight._m0[_1998].z) * _2039) + ((_2014 * cbLight._m0[_2008].z) * _2037);
    uvec4 _2052 = floatBitsToUint(cbLight._m0[_1981 + 12u]);
    bool _2054 = _2052.x == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2054)
    {
        _2065 = _2046;
        _2067 = _2047;
        _2069 = _2048;
    }
    else
    {
        uint _2073 = _1981 + 6u;
        float _2089 = (dot(vec3(cbLight._m0[_1981 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4177 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2092 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2065 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _2046;
        _2067 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _2047;
        _2069 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _2048;
    }
    bool _2072 = _2052.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2072)
    {
        _2110 = _2065;
        _2112 = _2067;
        _2114 = _2069;
    }
    else
    {
        uint _2269 = _1981 + 7u;
        float _2285 = (dot(vec3(cbLight._m0[_1981 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4193 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2288 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2110 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2065;
        _2112 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2067;
        _2114 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2069;
    }
    uint _2117 = _1981 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _800) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1981].x + _877;
    float _2133 = cbLight._m0[_1981].y + _878;
    float _2134 = cbLight._m0[_1981].z + _879;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_1981].xyz));
    float _4209 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2146 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2147 = dot(vec3(_797, _798, _799), vec3(_2139, _2140, _2141));
    float _4231 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2139, _2140, _2141));
    float _4242 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2146 * ((_2145 * _2171) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2171) + _2131) * _2145))) * _2145;
    float _4253 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2195 = _1981 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _800) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2018].x + _877;
    float _2209 = cbLight._m0[_2018].y + _878;
    float _2210 = cbLight._m0[_2018].z + _879;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2018].xyz));
    float _4264 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2222 = dot(vec3(_797, _798, _799), vec3(_2215, _2216, _2217));
    float _4275 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2215, _2216, _2217));
    float _4286 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2243 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2244 = 1.0 - _2207;
    float _2254 = (0.5 / (((_2146 * ((_2221 * _2244) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2244) + _2207) * _2221))) * _2221;
    float _4297 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2266 = (((_2243 * cbLight._m0[_2195].x) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].x) * _2184) * _2014);
    float _2267 = (((_2243 * cbLight._m0[_2195].y) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].y) * _2184) * _2014);
    float _2268 = (((_2243 * cbLight._m0[_2195].z) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].z) * _2184) * _2014);
    float _2330;
    float _2332;
    float _2334;
    if (_2054)
    {
        _2330 = _2266;
        _2332 = _2267;
        _2334 = _2268;
    }
    else
    {
        uint _2336 = _1981 + 2u;
        uint _2340 = _1981 + 10u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _800) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _877;
        float _2357 = cbLight._m0[_2336].y + _878;
        float _2358 = cbLight._m0[_2336].z + _879;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2336].xyz));
        float _4308 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2370 = dot(vec3(_797, _798, _799), vec3(_2363, _2364, _2365));
        float _4319 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4330 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2392 = 1.0 - _2355;
        float _2402 = (0.5 / (((_2146 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2392) + _2355) * _2369))) * _2369;
        float _4341 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2330 = (((_2391 * cbLight._m0[_2340].x) * _2404) * _2405) + _2266;
        _2332 = (((_2391 * cbLight._m0[_2340].y) * _2404) * _2405) + _2267;
        _2334 = (((_2391 * cbLight._m0[_2340].z) * _2404) * _2405) + _2268;
    }
    float _2440;
    float _2442;
    float _2444;
    if (_2072)
    {
        _2440 = _2330;
        _2442 = _2332;
        _2444 = _2334;
    }
    else
    {
        uint _2451 = _1981 + 3u;
        uint _2455 = _1981 + 11u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _800) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _877;
        float _2472 = cbLight._m0[_2451].y + _878;
        float _2473 = cbLight._m0[_2451].z + _879;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2451].xyz));
        float _4357 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2485 = dot(vec3(_797, _798, _799), vec3(_2478, _2479, _2480));
        float _4368 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4379 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2506 = (exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2507 = 1.0 - _2470;
        float _2517 = (0.5 / (((_2146 * ((_2484 * _2507) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2507) + _2470) * _2484))) * _2484;
        float _4390 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2440 = (((_2506 * cbLight._m0[_2455].x) * _2519) * _2520) + _2330;
        _2442 = (((_2506 * cbLight._m0[_2455].y) * _2519) * _2520) + _2332;
        _2444 = (((_2506 * cbLight._m0[_2455].z) * _2519) * _2520) + _2334;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1979.y == 0u)
    {
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2595;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2595;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2595;
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2611)));
        float _2632 = (log2(_2598 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2904)
                {
                    frontier_phi_61_pred = _2888;
                    frontier_phi_61_pred_1 = _2893;
                    frontier_phi_61_pred_2 = _2892;
                    frontier_phi_61_pred_3 = _2891;
                    frontier_phi_61_pred_4 = _2890;
                    frontier_phi_61_pred_5 = _2889;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2903;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2894 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _2596;
                        float _3079 = _3038.y - _2597;
                        float _3080 = _3038.z - _2598;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_904, _907, _910), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4416 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2596;
                        float _3114 = (-0.0) - _2597;
                        float _3115 = (-0.0) - _2598;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _964;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_904, _907, _910), vec3(_3120, _3121, _3122));
                        float _4432 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3155 = dot(vec3(_904, _907, _910), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4443 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3098 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3088) + _3164;
                        float _4454 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4465 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3162 * _3162) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2947 = (_3109 * _3057.x) + _3015;
                        _2948 = (_3109 * _3057.y) + _3016;
                        _2949 = (_3109 * _3057.z) + _3017;
                        _2944 = (_3190 * _3074.x) + _3012;
                        _2945 = (_3190 * _3074.y) + _3013;
                        _2946 = (_3190 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_61_pred = _2944;
                    frontier_phi_61_pred_1 = _2949;
                    frontier_phi_61_pred_2 = _2948;
                    frontier_phi_61_pred_3 = _2947;
                    frontier_phi_61_pred_4 = _2946;
                    frontier_phi_61_pred_5 = _2945;
                }
                _2744 = frontier_phi_61_pred;
                _2754 = frontier_phi_61_pred_1;
                _2752 = frontier_phi_61_pred_2;
                _2750 = frontier_phi_61_pred_3;
                _2748 = frontier_phi_61_pred_4;
                _2746 = frontier_phi_61_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2744;
                    _2889 = _2746;
                    _2890 = _2748;
                    _2891 = _2750;
                    _2892 = _2752;
                    _2893 = _2754;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2760) & _2642) == 0u)
        {
            _2856 = _2743;
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
            float _2882 = _2881 * _2596;
            float _2883 = _2881 * _2597;
            float _2884 = _2881 * _2598;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2995 = _2743;
                float _2996 = _2745;
                float _2997 = _2747;
                float _2998 = _2749;
                float _2999 = _2751;
                float _3000 = _2753;
                uint _3001 = _2760;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3011)
                    {
                        frontier_phi_67_pred = _2998;
                        frontier_phi_67_pred_1 = _2999;
                        frontier_phi_67_pred_2 = _3000;
                        frontier_phi_67_pred_3 = _2997;
                        frontier_phi_67_pred_4 = _2996;
                        frontier_phi_67_pred_5 = _2995;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        uint _3214 = _3010;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3283;
                        vec4 _3298;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3225 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3270 = (_3225 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3225 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3225 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3225 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_2598, _3332.z, fma(_2597, _3332.y, _3332.x * _2596)) + _3332.w;
                            _3345 = !((fma(_2598, _3313.z, fma(_2597, _3313.y, _3313.x * _2596)) + _3313.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3240.x - _2596;
                                float _3373 = _3240.y - _2597;
                                float _3374 = _3240.z - _2598;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3241 * _3241));
                                float _4476 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3390 = sqrt(_3375) * _3256.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_904, _907, _910))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_2598, _3283.z, fma(_2597, _3283.y, _3283.x * _2596)) + _3283.w) / _3344;
                                float _3404 = (fma(_2598, _3298.z, fma(_2597, _3298.y, _3298.x * _2596)) + _3298.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4492 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _964;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_904, _907, _910), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4503 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3447 = dot(vec3(_904, _907, _910), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4514 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_904, _907, _910), vec3(_3379, _3380, _3381))) + _3456;
                                float _4525 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4536 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3484 * _3268.x;
                                frontier_phi_73_pred_1 = _3484 * _3268.y;
                                frontier_phi_73_pred_2 = _3410 * _3256.z;
                                frontier_phi_73_pred_3 = _3410 * _3256.y;
                                frontier_phi_73_pred_4 = _3410 * _3256.x;
                                frontier_phi_73_pred_5 = _3484 * _3268.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3488 = frontier_phi_73_pred;
                            _3489 = frontier_phi_73_pred_1;
                            _3493 = frontier_phi_73_pred_2;
                            _3492 = frontier_phi_73_pred_3;
                            _3491 = frontier_phi_73_pred_4;
                            _3490 = frontier_phi_73_pred_5;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3198;
                        frontier_phi_67_pred_1 = _3199;
                        frontier_phi_67_pred_2 = _3200;
                        frontier_phi_67_pred_3 = _3197;
                        frontier_phi_67_pred_4 = _3196;
                        frontier_phi_67_pred_5 = _3195;
                    }
                    _2863 = frontier_phi_67_pred;
                    _2865 = frontier_phi_67_pred_1;
                    _2867 = frontier_phi_67_pred_2;
                    _2861 = frontier_phi_67_pred_3;
                    _2859 = frontier_phi_67_pred_4;
                    _2857 = frontier_phi_67_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2857;
                        _2996 = _2859;
                        _2997 = _2861;
                        _2998 = _2863;
                        _2999 = _2865;
                        _3000 = _2867;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2865;
                frontier_phi_55_56_ladder_1 = _2867;
                frontier_phi_55_56_ladder_2 = _2863;
                frontier_phi_55_56_ladder_3 = _2861;
                frontier_phi_55_56_ladder_4 = _2859;
                frontier_phi_55_56_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_55_56_ladder = _2751;
                frontier_phi_55_56_ladder_1 = _2753;
                frontier_phi_55_56_ladder_2 = _2749;
                frontier_phi_55_56_ladder_3 = _2747;
                frontier_phi_55_56_ladder_4 = _2745;
                frontier_phi_55_56_ladder_5 = _2743;
            }
            _2856 = frontier_phi_55_56_ladder_5;
            _2858 = frontier_phi_55_56_ladder_4;
            _2860 = frontier_phi_55_56_ladder_3;
            _2862 = frontier_phi_55_56_ladder_2;
            _2864 = frontier_phi_55_56_ladder;
            _2866 = frontier_phi_55_56_ladder_1;
        }
        float _2871 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2655 = (_2871 * _2862) + _2110;
        _2657 = (_2871 * _2864) + _2112;
        _2659 = (_2871 * _2866) + _2114;
        _2661 = ((_2856 * 0.039999999105930328369140625) * _2871) + _2440;
        _2663 = ((_2858 * 0.039999999105930328369140625) * _2871) + _2442;
        _2665 = ((_2860 * 0.039999999105930328369140625) * _2871) + _2444;
    }
    else
    {
        _2655 = _2110;
        _2657 = _2112;
        _2659 = _2114;
        _2661 = _2440;
        _2663 = _2442;
        _2665 = _2444;
    }
    float _4552 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4563 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4574 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    uint _2685 = _242 + 6u;
    float _2693 = _885 / cbSceneParam._m0[86u].x;
    float _2694 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2769 = _2768 / _818;
        float _2780 = _2769 * _870;
        float _2781 = _871 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2784 = _2769 * _872;
        float _2786 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2787 = _2786 + cbSceneParam._m0[79u].w;
        float _2788 = cbSceneParam._m0[79u].w - _2781;
        float _2794 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2784 * _2784));
        float _2797 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2794;
        float _2802 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2804 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2782 - _2786) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2787 > 0.0) ? exp2(_2802 * _2787) : (2.0 - exp2(_2804 * _2787))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2797;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : max(_2787, _2788));
            float _2919 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : min(_2787, _2788));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2957 = ((abs(_2794 / _2782) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2802 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2802 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2804 * _2928) - exp2(_2804 * _2929)) * _2917))) + (_2797 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2713);
        _2806 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2808 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2810 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2812 = _2968 * _2713;
    }
    else
    {
        _2806 = _2710;
        _2808 = _2711;
        _2810 = _2712;
        _2812 = _2713;
    }
    float _2824 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2825 = _2824 == 3.0;
    float _2826 = log2(_2812);
    float _2833 = exp2(_2826 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2655 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _948))) + ((_2661 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2834 = exp2(_2826 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2657 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _948))) + ((_2663 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2835 = exp2(_2826 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2659 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _948))) + ((_2665 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2844 = (_2824 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2844 * (_2825 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2806)));
    SV_Target.y = _2844 * (_2825 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.z = _2844 * (_2825 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


