#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1518;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3843 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3854 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _560 = _558.x;
    float _570 = dot(vec4(_560, _558.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _582 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _369.z) * 2.0) - ((((_560 - _570) * cbMtdParam._m0[24u].z) + _570) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3865 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _596 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_583 * ((_541.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _599 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_583 * ((_541.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _602 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_583 * ((_541.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _661 = _657.z;
    float _668 = ((_640.x - _659) * _441) + _659;
    float _669 = ((_640.y - _660) * _441) + _660;
    float _670 = ((_640.z - _661) * _441) + _661;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _693 = ((_682.x - _668) * _514) + _668;
    float _694 = ((_682.y - _669) * _514) + _669;
    float _695 = ((_682.z - _670) * _514) + _670;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _720 = ((_707.z - _695) * _583) + _695;
    float _723 = ((((_707.x - _693) * _583) + _693) * 2.0) + (-1.0);
    float _725 = ((((_707.y - _694) * _583) + _694) * 2.0) + (-1.0);
    float _726 = dot(vec2(_723, _725), vec2(_723, _725));
    float _3876 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _731 = sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _757 = (((_745.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _723;
    float _758 = (((_745.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _725;
    float _761 = fma(_731, _249, fma(_758, _256, _757 * _242));
    float _764 = fma(_731, _250, fma(_758, _257, _757 * _243));
    float _767 = fma(_731, _251, fma(_758, _258, _757 * _244));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _800 = _798.x;
    float _801 = 1.0 - _800;
    float _807 = (cbMtdParam._m0[19u].x + dot(vec4(_771 * _761, _771 * _764, _771 * _767, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_800 - _801) * cbMtdParam._m0[24u].w) + _801) * cbMtdParam._m0[21u].z);
    float _3887 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _810 = (-0.0) - cbMtdParam._m0[24u].x;
    float _812 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
    float _820 = _808 - ((_808 * TEXCOORD_8.x) * _813);
    float _821 = _808 - ((_808 * TEXCOORD_8.y) * _813);
    float _822 = _808 - ((_808 * TEXCOORD_8.z) * _813);
    float _829 = (_820 * ((_620.x * cbMtdParam._m0[18u].x) - _596)) + _596;
    float _830 = (_821 * ((_620.y * cbMtdParam._m0[18u].y) - _599)) + _599;
    float _831 = (_822 * ((_620.z * cbMtdParam._m0[18u].z) - _602)) + _602;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _845 = _843.x;
    float _846 = 1.0 - _845;
    float _874 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_845 - _846) * cbMtdParam._m0[24u].y) + _846) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3908 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _875 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _883 = ((((cbMtdParam._m0[10u].x - _829) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _875) + _829;
    float _884 = ((((cbMtdParam._m0[10u].y - _830) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _875) + _830;
    float _885 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _831)) * _875) + _831;
    float _889 = (cbMtdParam._m0[19u].w * (_745.z - _720)) + _720;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _910 = (_903.x * 2.0) + (-1.0);
    float _911 = (_903.y * 2.0) + (-1.0);
    float _912 = dot(vec2(_910, _911), vec2(_910, _911));
    float _3919 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _920 = ((_903.z - _889) * _820) + _889;
    float _923 = ((cbMtdParam._m0[23u].y - _920) * _875) + _920;
    vec4 _942 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _948 = (_942.x * 2.0) + (-1.0);
    float _949 = (_942.y * 2.0) + (-1.0);
    float _950 = dot(vec2(_948, _949), vec2(_948, _949));
    float _3930 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _965 = ((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _731) * _822) + _731;
    float _968 = (((_910 - _757) * _820) + _757) + (cbMtdParam._m0[21u].x * _757);
    float _969 = (((_911 - _758) * _821) + _758) + (cbMtdParam._m0[21u].x * _758);
    float _980 = (((_948 - _968) + (_968 * cbMtdParam._m0[22u].z)) * _875) + _968;
    float _981 = (((_949 - _969) + (_969 * cbMtdParam._m0[22u].z)) * _875) + _969;
    float _982 = (_875 * (sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) - _965)) + _965;
    float _984 = cbMtdParam._m0[22u].x + _745.w;
    float _987 = fma(_982, _249, fma(_981, _256, _980 * _242));
    float _990 = fma(_982, _250, fma(_981, _257, _980 * _243));
    float _993 = fma(_982, _251, fma(_981, _258, _980 * _244));
    float _997 = inversesqrt(dot(vec3(_987, _990, _993), vec3(_987, _990, _993)));
    float _998 = _997 * _987;
    float _999 = _997 * _990;
    float _1000 = _997 * _993;
    float _3941 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _1001 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _3963 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _3974 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3985 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _1019 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1069 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1059);
    float _1070 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1059);
    float _1071 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1059);
    float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
    float _1076 = _1069 * _1075;
    float _1077 = _1070 * _1075;
    float _1078 = _1071 * _1075;
    float _1084 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1085 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1103 = fma(_1000, cbSceneParam._m0[5u].z, fma(_999, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _998));
    float _1106 = fma(_1000, cbSceneParam._m0[6u].z, fma(_999, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _998));
    float _1109 = fma(_1000, cbSceneParam._m0[7u].z, fma(_999, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _998));
    uint _1123 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1129 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_1123].x;
    float _1130 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1123].y;
    float _1131 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1123].z;
    float _3996 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1132 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1133 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1134 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    vec4 _1143 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1084, cbSceneParam._m0[86u].y * _1085));
    float _1147 = ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * TEXCOORD_5.w) * _1143.x;
    float _1148 = dot(vec3(_998, _999, _1000), vec3(_1076, _1077, _1078));
    float _1151 = _1148 * 2.0;
    float _1155 = (_1151 * _998) - _1076;
    float _1156 = (_1151 * _999) - _1077;
    float _1157 = (_1151 * _1000) - _1078;
    float _1161 = abs(dot(vec3(_1076, _1077, _1078), vec3(_998, _999, _1000)));
    float _4029 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1163 = sqrt(_1001);
    float _1176 = exp2((_1163 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1163 * 3.0));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1212 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1216 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1517;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1242 = fma(_1216, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208));
        float _1246 = fma(_1216, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208));
        float _1250 = fma(_1216, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208));
        float _1275 = _1208 + _998;
        float _1276 = _1212 + _999;
        float _1277 = _1216 + _1000;
        float _1287 = fma(_1277, cbModelParam._m0[26u].z, fma(_1276, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1275)) - _1242;
        float _1288 = fma(_1277, cbModelParam._m0[27u].z, fma(_1276, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1275)) - _1246;
        float _1289 = fma(_1277, cbModelParam._m0[28u].z, fma(_1276, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1275)) - _1250;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1242 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1246 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[34u].z) + ((((((_1250 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1345 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1311.x + (-0.5));
        float _1347 = _1345 * (_1311.y + (-0.5));
        float _1348 = _1345 * (_1311.z + (-0.5));
        float _1355 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1318.x + (-0.5));
        float _1357 = _1355 * (_1318.y + (-0.5));
        float _1358 = _1355 * (_1318.z + (-0.5));
        float _1365 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1325.x + (-0.5));
        float _1367 = _1365 * (_1325.y + (-0.5));
        float _1368 = _1365 * (_1325.z + (-0.5));
        float _1375 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1332.x + (-0.5));
        float _1377 = _1375 * (_1332.y + (-0.5));
        float _1378 = _1375 * (_1332.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1399 = (dot(vec3(_998, _999, _1000), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1409 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4077 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1411 + 1.0))) + _1416) * _1379;
        float _1426 = _1347 * 0.5;
        float _1427 = _1357 * 0.5;
        float _1428 = _1367 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_998, _999, _1000), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4110 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1453 + 1.0))) + _1458) * _1380;
        float _1468 = _1348 * 0.5;
        float _1469 = _1358 * 0.5;
        float _1470 = _1368 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_998, _999, _1000), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4143 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1495 + 1.0))) + _1500) * _1381;
        _1517 = _1348;
        _1519 = _1347;
        _1520 = _1346;
        _1521 = _1358;
        _1522 = _1357;
        _1523 = _1356;
        _1524 = _1368;
        _1525 = _1367;
        _1526 = _1366;
        _1527 = _1381;
        _1528 = _1380;
        _1529 = _1379;
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1518;
        _1519 = _1518;
        _1520 = _1518;
        _1521 = _1518;
        _1522 = _1518;
        _1523 = _1518;
        _1524 = _1518;
        _1525 = _1518;
        _1526 = _1518;
        _1527 = _1518;
        _1528 = _1518;
        _1529 = _1518;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1555 = fma(_1216, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208));
        float _1559 = fma(_1216, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208));
        float _1563 = fma(_1216, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208));
        float _1586 = _1208 + _998;
        float _1587 = _1212 + _999;
        float _1588 = _1216 + _1000;
        float _1598 = fma(_1588, cbModelParam._m0[30u].z, fma(_1587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1586)) - _1555;
        float _1599 = fma(_1588, cbModelParam._m0[31u].z, fma(_1587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1586)) - _1559;
        float _1600 = fma(_1588, cbModelParam._m0[32u].z, fma(_1587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1586)) - _1563;
        float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
        float _1617 = ((_1604 * _1598) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1555 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1604 * _1599) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1559 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1604 * _1600) / cbModelParam._m0[35u].z) + ((((((_1563 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        float _1654 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1621.x + (-0.5));
        float _1656 = _1654 * (_1621.y + (-0.5));
        float _1657 = _1654 * (_1621.z + (-0.5));
        float _1664 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1628.x + (-0.5));
        float _1666 = _1664 * (_1628.y + (-0.5));
        float _1667 = _1664 * (_1628.z + (-0.5));
        float _1674 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1635.x + (-0.5));
        float _1676 = _1674 * (_1635.y + (-0.5));
        float _1677 = _1674 * (_1635.z + (-0.5));
        float _1684 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1642.x + (-0.5));
        float _1686 = _1684 * (_1642.y + (-0.5));
        float _1687 = _1684 * (_1642.z + (-0.5));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = _1655 * 0.5;
        float _1692 = _1665 * 0.5;
        float _1693 = _1675 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_998, _999, _1000), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4206 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1718 + 1.0))) + _1723) * _1688;
        float _1733 = _1656 * 0.5;
        float _1734 = _1666 * 0.5;
        float _1735 = _1676 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_998, _999, _1000), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4239 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1760 + 1.0))) + _1765) * _1689;
        float _1775 = _1657 * 0.5;
        float _1776 = _1667 * 0.5;
        float _1777 = _1677 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_998, _999, _1000), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4272 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1802 + 1.0))) + _1807) * _1690;
        _1824 = _1657;
        _1825 = _1656;
        _1826 = _1655;
        _1827 = _1667;
        _1828 = _1666;
        _1829 = _1665;
        _1830 = _1677;
        _1831 = _1676;
        _1832 = _1675;
        _1833 = _1690;
        _1834 = _1689;
        _1835 = _1688;
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    }
    else
    {
        _1824 = _1518;
        _1825 = _1518;
        _1826 = _1518;
        _1827 = _1518;
        _1828 = _1518;
        _1829 = _1518;
        _1830 = _1518;
        _1831 = _1518;
        _1832 = _1518;
        _1833 = _1518;
        _1834 = _1518;
        _1835 = _1518;
        _1836 = 0.0;
        _1837 = 0.0;
        _1838 = 0.0;
    }
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1530)) + _1530;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1531)) + _1531;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1532)) + _1532;
    float _1871 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1848));
    float _1892 = _1155 * 0.5;
    float _1893 = _1156 * 0.5;
    float _1894 = _1157 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1517, _1521, _1524, _1527));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1520, _1523, _1526, _1529));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1001);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1216, cbModelParam._m0[13u].z, fma(_1212, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1208)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1216, cbModelParam._m0[14u].z, fma(_1212, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1208)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1216, cbModelParam._m0[15u].z, fma(_1212, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1208)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1157, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155));
        float _2022 = fma(_1157, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155));
        float _2025 = fma(_1157, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2053 = frontier_phi_14_12_ladder;
        }
        float _2274;
        if (_2022 > 0.0)
        {
            _2274 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2274 = frontier_phi_23_19_ladder;
        }
        float _2520;
        if (_2025 > 0.0)
        {
            _2520 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2520 = frontier_phi_35_30_ladder;
        }
        float _2522 = isnan(_2274) ? _2053 : (isnan(_2053) ? _2274 : min(_2053, _2274));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2019) + _2008;
        float _2528 = (_2523 * _2022) + _2012;
        float _2529 = (_2523 * _2025) + _2016;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_13_35_ladder = _2653.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2653.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2653.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_13_35_ladder_2;
        _2043 = frontier_phi_13_35_ladder_1;
        _2045 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1155, _1156, _1157), _1961);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1001);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2103 = fma(_1216, cbModelParam._m0[21u].z, fma(_1212, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1208)) + cbModelParam._m0[21u].w;
        float _2107 = fma(_1216, cbModelParam._m0[22u].z, fma(_1212, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1208)) + cbModelParam._m0[22u].w;
        float _2111 = fma(_1216, cbModelParam._m0[23u].z, fma(_1212, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1208)) + cbModelParam._m0[23u].w;
        float _2114 = fma(_1157, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155));
        float _2117 = fma(_1157, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155));
        float _2120 = fma(_1157, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155));
        float _2279;
        if (_2114 > 0.0)
        {
            _2279 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2279 = frontier_phi_25_21_ladder;
        }
        float _2547;
        if (_2117 > 0.0)
        {
            _2547 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2547 = frontier_phi_37_32_ladder;
        }
        float _2752;
        if (_2120 > 0.0)
        {
            _2752 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2752 = frontier_phi_46_43_ladder;
        }
        float _2754 = isnan(_2547) ? _2279 : (isnan(_2279) ? _2547 : min(_2279, _2547));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _2114) + _2103;
        float _2760 = (_2755 * _2117) + _2107;
        float _2761 = (_2755 * _2120) + _2111;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_22_46_ladder = _2960.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2960.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2960.x * cbModelParam._m0[1u].z;
        }
        _2139 = frontier_phi_22_46_ladder_2;
        _2141 = frontier_phi_22_46_ladder_1;
        _2143 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1155, _1156, _1157), _2050);
        _2139 = _2123.x * cbModelParam._m0[1u].z;
        _2141 = _2123.y * cbModelParam._m0[1u].z;
        _2143 = _2123.z * cbModelParam._m0[1u].z;
    }
    float _2155 = ((((1.0 - _1176) * ((_1163 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1176 * _1163)) * _1147;
    float _2156 = _2155 * ((cbModelParam._m0[1u].w * (_2139 - _2041)) + _2041);
    float _2157 = _2155 * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2158 = _2155 * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2161 = fma(_2158, cbSceneParam._m0[89u].z, fma(_2157, cbSceneParam._m0[89u].y, _2156 * cbSceneParam._m0[89u].x));
    float _2164 = fma(_2158, cbSceneParam._m0[90u].z, fma(_2157, cbSceneParam._m0[90u].y, _2156 * cbSceneParam._m0[90u].x));
    float _2167 = fma(_2158, cbSceneParam._m0[91u].z, fma(_2157, cbSceneParam._m0[91u].y, _2156 * cbSceneParam._m0[91u].x));
    vec4 _2175 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1084, _1085));
    float _2177 = _2175.w;
    float _2189 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2177);
    float _2190 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2177);
    float _2191 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2177);
    uvec4 _2195 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2197 = _2195.x * 14u;
    uint _2198 = _2197 + 13u;
    float _2205 = _1147 + (-1.0);
    float _2210 = (cbLight._m0[_2198].x * _2205) + 1.0;
    float _2211 = (cbLight._m0[_2198].y * _2205) + 1.0;
    float _2212 = (cbLight._m0[_2198].z * _2205) + 1.0;
    float _2213 = (cbLight._m0[_2198].w * _2205) + 1.0;
    uint _2214 = _2197 + 5u;
    float _2220 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2224 = _2197 + 4u;
    float _2233 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2237 = _2197 | 1u;
    float _2248 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_998, _999, _1000));
    float _2251 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_998, _999, _1000));
    float _4408 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _4419 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2256 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2258 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * 0.3183098733425140380859375;
    float _2265 = ((cbLight._m0[_2214].x * _2220) * _2258) + (((cbLight._m0[_2224].x * _2189) * _2233) * _2256);
    float _2266 = ((_2220 * cbLight._m0[_2214].y) * _2258) + (((cbLight._m0[_2224].y * _2190) * _2233) * _2256);
    float _2267 = ((_2220 * cbLight._m0[_2214].z) * _2258) + (((cbLight._m0[_2224].z * _2191) * _2233) * _2256);
    uvec4 _2271 = floatBitsToUint(cbLight._m0[_2197 + 12u]);
    bool _2273 = _2271.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2273)
    {
        _2284 = _2265;
        _2286 = _2266;
        _2288 = _2267;
    }
    else
    {
        uint _2292 = _2197 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2197 + 2u].xyz), vec3(_998, _999, _1000)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4430 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2311 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2265;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2266;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2267;
    }
    bool _2291 = _2271.y == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2291)
    {
        _2329 = _2284;
        _2331 = _2286;
        _2333 = _2288;
    }
    else
    {
        uint _2491 = _2197 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2197 + 3u].xyz), vec3(_998, _999, _1000)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4446 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2510 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2329 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2284;
        _2331 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2286;
        _2333 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2288;
    }
    uint _2336 = _2197 + 8u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _1001) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2197].x + _1076;
    float _2352 = cbLight._m0[_2197].y + _1077;
    float _2353 = cbLight._m0[_2197].z + _1078;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_998, _999, _1000), vec3(cbLight._m0[_2197].xyz));
    float _4462 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2365 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2366 = dot(vec3(_998, _999, _1000), vec3(_2358, _2359, _2360));
    float _4484 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2358, _2359, _2360));
    float _4495 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2350 * _2350;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2365 * ((_2364 * _2390) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2390) + _2350) * _2364))) * _2364;
    float _4506 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    uint _2417 = _2197 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _1001) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2237].x + _1076;
    float _2431 = cbLight._m0[_2237].y + _1077;
    float _2432 = cbLight._m0[_2237].z + _1078;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_998, _999, _1000), vec3(cbLight._m0[_2237].xyz));
    float _4517 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2444 = dot(vec3(_998, _999, _1000), vec3(_2437, _2438, _2439));
    float _4528 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2437, _2438, _2439));
    float _4539 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2466 = 1.0 - _2429;
    float _2476 = (0.5 / (((_2365 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2466) + _2429) * _2443))) * _2443;
    float _4550 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2488 = (((_2465 * cbLight._m0[_2417].x) * _2478) * _2220) + ((((cbLight._m0[_2336].x * _2189) * _2389) * _2403) * _2233);
    float _2489 = (((_2465 * cbLight._m0[_2417].y) * _2478) * _2220) + ((((cbLight._m0[_2336].y * _2190) * _2389) * _2403) * _2233);
    float _2490 = (((_2465 * cbLight._m0[_2417].z) * _2478) * _2220) + ((((cbLight._m0[_2336].z * _2191) * _2389) * _2403) * _2233);
    float _2552;
    float _2554;
    float _2556;
    if (_2273)
    {
        _2552 = _2488;
        _2554 = _2489;
        _2556 = _2490;
    }
    else
    {
        uint _2558 = _2197 + 2u;
        uint _2562 = _2197 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _1001) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _1076;
        float _2579 = cbLight._m0[_2558].y + _1077;
        float _2580 = cbLight._m0[_2558].z + _1078;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_998, _999, _1000), vec3(cbLight._m0[_2558].xyz));
        float _4561 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2592 = dot(vec3(_998, _999, _1000), vec3(_2585, _2586, _2587));
        float _4572 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4583 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2614 = 1.0 - _2577;
        float _2624 = (0.5 / (((_2365 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2614) + _2577) * _2591))) * _2591;
        float _4594 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2552 = (((_2613 * cbLight._m0[_2562].x) * _2626) * _2627) + _2488;
        _2554 = (((_2613 * cbLight._m0[_2562].y) * _2626) * _2627) + _2489;
        _2556 = (((_2613 * cbLight._m0[_2562].z) * _2626) * _2627) + _2490;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2291)
    {
        _2662 = _2552;
        _2664 = _2554;
        _2666 = _2556;
    }
    else
    {
        uint _2673 = _2197 + 3u;
        uint _2677 = _2197 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _1001) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _1076;
        float _2694 = cbLight._m0[_2673].y + _1077;
        float _2695 = cbLight._m0[_2673].z + _1078;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_998, _999, _1000), vec3(cbLight._m0[_2673].xyz));
        float _4610 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2707 = dot(vec3(_998, _999, _1000), vec3(_2700, _2701, _2702));
        float _4621 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4632 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2365 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2729) + _2692) * _2706))) * _2706;
        float _4643 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2662 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2552;
        _2664 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2554;
        _2666 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2556;
    }
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_2195.y == 0u)
    {
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2817;
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2817;
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2817;
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.x;
        uint _2844 = uint((float(_2832.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1085) / _2833))) + floor(float(uint(cbSceneParam._m0[85u].x * _1084) / _2833)));
        float _2854 = (log2(_2820 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2855 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        uint _2858 = uint(isnan(14.0) ? _2855 : (isnan(_2855) ? 14.0 : min(_2855, 14.0)));
        uvec4 _2863 = texelFetch(g_lightClusterGridBuffer, int(((_2858 << 2u) + (_2844 << 6u)) >> 2u));
        uint _2864 = _2863.x;
        uint _2865 = _2832.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2865 >> 4u) & 15u)) + 4294967295u) & _2864) == 0u) || ((_2865 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            uint _3115 = 0u;
            uint _3124;
            bool _3125;
            for (;;)
            {
                _3124 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                _3125 = _3124 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3125)
                {
                    frontier_phi_61_pred = _3109;
                    frontier_phi_61_pred_1 = _3114;
                    frontier_phi_61_pred_2 = _3113;
                    frontier_phi_61_pred_3 = _3112;
                    frontier_phi_61_pred_4 = _3111;
                    frontier_phi_61_pred_5 = _3110;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3124;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3115 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _2818;
                        float _3300 = _3259.y - _2819;
                        float _3301 = _3259.z - _2820;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_1103, _1106, _1109), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4669 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _2818;
                        float _3335 = (-0.0) - _2819;
                        float _3336 = (-0.0) - _2820;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3351 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3352 = 1.0 - _1163;
                        float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                        float _3360 = _3359 * _3359;
                        float _3361 = _3360 * _3360;
                        float _3362 = _3341 + _3306;
                        float _3363 = _3342 + _3307;
                        float _3364 = _3343 + _3308;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3372 = dot(vec3(_1103, _1106, _1109), vec3(_3341, _3342, _3343));
                        float _4685 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3376 = dot(vec3(_1103, _1106, _1109), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                        float _4696 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                        float _3384 = _3319 * _3360;
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3309) + _3385;
                        float _4707 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3390 = 1.0 - _3360;
                        float _3400 = (0.5 / (((_3389 * ((_3375 * _3390) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3360) * _3375))) * _3389;
                        float _4718 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3411 = (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3383 * _3383) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3168 = (_3330 * _3278.x) + _3236;
                        _3169 = (_3330 * _3278.y) + _3237;
                        _3170 = (_3330 * _3278.z) + _3238;
                        _3165 = (_3411 * _3295.x) + _3233;
                        _3166 = (_3411 * _3295.y) + _3234;
                        _3167 = (_3411 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_61_pred = _3165;
                    frontier_phi_61_pred_1 = _3170;
                    frontier_phi_61_pred_2 = _3169;
                    frontier_phi_61_pred_3 = _3168;
                    frontier_phi_61_pred_4 = _3167;
                    frontier_phi_61_pred_5 = _3166;
                }
                _2966 = frontier_phi_61_pred;
                _2976 = frontier_phi_61_pred_1;
                _2974 = frontier_phi_61_pred_2;
                _2972 = frontier_phi_61_pred_3;
                _2970 = frontier_phi_61_pred_4;
                _2968 = frontier_phi_61_pred_5;
                uint _3116 = _3115 + 1u;
                if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3109 = _2966;
                    _3110 = _2968;
                    _3111 = _2970;
                    _3112 = _2972;
                    _3113 = _2974;
                    _3114 = _2976;
                    _3115 = _3116;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((4294967295u << _2982) & _2864) == 0u)
        {
            _3077 = _2965;
            _3079 = _2967;
            _3081 = _2969;
            _3083 = _2971;
            _3085 = _2973;
            _3087 = _2975;
        }
        else
        {
            float _3102 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
            float _3103 = _3102 * _2818;
            float _3104 = _3102 * _2819;
            float _3105 = _3102 * _2820;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3216 = _2965;
                float _3217 = _2967;
                float _3218 = _2969;
                float _3219 = _2971;
                float _3220 = _2973;
                float _3221 = _2975;
                uint _3222 = _2982;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3232)
                    {
                        frontier_phi_67_pred = _3219;
                        frontier_phi_67_pred_1 = _3220;
                        frontier_phi_67_pred_2 = _3221;
                        frontier_phi_67_pred_3 = _3218;
                        frontier_phi_67_pred_4 = _3217;
                        frontier_phi_67_pred_5 = _3216;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3429 = _3216;
                        float _3430 = _3217;
                        float _3431 = _3218;
                        float _3432 = _3219;
                        float _3433 = _3220;
                        float _3434 = _3221;
                        uint _3435 = _3231;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3519;
                        float _3565;
                        bool _3566;
                        for (;;)
                        {
                            uint _3446 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3446 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3446 * 40u) + 24u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3540 = (_3446 * 40u) + 28u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3565 = fma(_2820, _3553.z, fma(_2819, _3553.y, _3553.x * _2818)) + _3553.w;
                            _3566 = !((fma(_2820, _3534.z, fma(_2819, _3534.y, _3534.x * _2818)) + _3534.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3566)
                            {
                                float _3593 = _3461.x - _2818;
                                float _3594 = _3461.y - _2819;
                                float _3595 = _3461.z - _2820;
                                float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                                float _3599 = inversesqrt(_3596);
                                float _3600 = _3599 * _3593;
                                float _3601 = _3599 * _3594;
                                float _3602 = _3599 * _3595;
                                float _3606 = 1.0 - (_3596 / (_3462 * _3462));
                                float _4729 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3611 = sqrt(_3596) * _3477.w;
                                float _3613 = 1.39999997615814208984375 / (_3611 + 1.39999997615814208984375);
                                float _3614 = _3613 * _3613;
                                float _3617 = ((1.0 - _3614) * dot(vec3(_3600, _3601, _3602), vec3(_1103, _1106, _1109))) + _3614;
                                float _3620 = _3611 * _3611;
                                float _3624 = (fma(_2820, _3504.z, fma(_2819, _3504.y, _3504.x * _2818)) + _3504.w) / _3565;
                                float _3625 = (fma(_2820, _3519.z, fma(_2819, _3519.y, _3519.x * _2818)) + _3519.w) / _3565;
                                float _3629 = 1.0 - dot(vec2(_3624, _3625), vec2(_3624, _3625));
                                float _4745 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3631 = _3630 * (((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3607) / ((_3620 * 0.699999988079071044921875) + 1.0));
                                float _3643 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                                float _3644 = 1.0 - _1163;
                                float _3651 = sqrt(1.0 - ((1.0 - (_3644 * _3644)) * (1.0 - (_3643 * _3643))));
                                float _3652 = _3651 * _3651;
                                float _3653 = _3652 * _3652;
                                float _3654 = _3600 - _3103;
                                float _3655 = _3601 - _3104;
                                float _3656 = _3602 - _3105;
                                float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                                float _3664 = dot(vec3(_1103, _1106, _1109), vec3((-0.0) - _3103, (-0.0) - _3104, (-0.0) - _3105));
                                float _4756 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3668 = dot(vec3(_1103, _1106, _1109), vec3(_3660 * _3654, _3660 * _3655, _3660 * _3656));
                                float _4767 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3675 = ((_3671 * _3671) * (_3653 + (-1.0))) + 1.0;
                                float _3676 = _3613 * _3652;
                                float _3677 = _3676 * _3676;
                                float _3683 = ((1.0 - _3677) * dot(vec3(_1103, _1106, _1109), vec3(_3600, _3601, _3602))) + _3677;
                                float _4778 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3685 = 1.0 - _3652;
                                float _3695 = (0.5 / (((_3684 * ((_3667 * _3685) + _3652)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3652) * _3667))) * _3684;
                                float _4789 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3705 = (_3630 * _3607) * (((_3653 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3675 * _3675) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3705 * _3489.x;
                                frontier_phi_73_pred_1 = _3705 * _3489.y;
                                frontier_phi_73_pred_2 = _3631 * _3477.z;
                                frontier_phi_73_pred_3 = _3631 * _3477.y;
                                frontier_phi_73_pred_4 = _3631 * _3477.x;
                                frontier_phi_73_pred_5 = _3705 * _3489.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3709 = frontier_phi_73_pred;
                            _3710 = frontier_phi_73_pred_1;
                            _3714 = frontier_phi_73_pred_2;
                            _3713 = frontier_phi_73_pred_3;
                            _3712 = frontier_phi_73_pred_4;
                            _3711 = frontier_phi_73_pred_5;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3419;
                        frontier_phi_67_pred_1 = _3420;
                        frontier_phi_67_pred_2 = _3421;
                        frontier_phi_67_pred_3 = _3418;
                        frontier_phi_67_pred_4 = _3417;
                        frontier_phi_67_pred_5 = _3416;
                    }
                    _3084 = frontier_phi_67_pred;
                    _3086 = frontier_phi_67_pred_1;
                    _3088 = frontier_phi_67_pred_2;
                    _3082 = frontier_phi_67_pred_3;
                    _3080 = frontier_phi_67_pred_4;
                    _3078 = frontier_phi_67_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3078;
                        _3217 = _3080;
                        _3218 = _3082;
                        _3219 = _3084;
                        _3220 = _3086;
                        _3221 = _3088;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3086;
                frontier_phi_55_56_ladder_1 = _3088;
                frontier_phi_55_56_ladder_2 = _3084;
                frontier_phi_55_56_ladder_3 = _3082;
                frontier_phi_55_56_ladder_4 = _3080;
                frontier_phi_55_56_ladder_5 = _3078;
            }
            else
            {
                frontier_phi_55_56_ladder = _2973;
                frontier_phi_55_56_ladder_1 = _2975;
                frontier_phi_55_56_ladder_2 = _2971;
                frontier_phi_55_56_ladder_3 = _2969;
                frontier_phi_55_56_ladder_4 = _2967;
                frontier_phi_55_56_ladder_5 = _2965;
            }
            _3077 = frontier_phi_55_56_ladder_5;
            _3079 = frontier_phi_55_56_ladder_4;
            _3081 = frontier_phi_55_56_ladder_3;
            _3083 = frontier_phi_55_56_ladder_2;
            _3085 = frontier_phi_55_56_ladder;
            _3087 = frontier_phi_55_56_ladder_1;
        }
        float _3092 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
        _2877 = (_3092 * _3083) + _2329;
        _2879 = (_3092 * _3085) + _2331;
        _2881 = (_3092 * _3087) + _2333;
        _2883 = ((_3077 * 0.039999999105930328369140625) * _3092) + _2662;
        _2885 = ((_3079 * 0.039999999105930328369140625) * _3092) + _2664;
        _2887 = ((_3081 * 0.039999999105930328369140625) * _3092) + _2666;
    }
    else
    {
        _2877 = _2329;
        _2879 = _2331;
        _2881 = _2333;
        _2883 = _2662;
        _2885 = _2664;
        _2887 = _2666;
    }
    float _4805 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _4816 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _4827 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    uint _2907 = _261 + 6u;
    float _2915 = _1084 / cbSceneParam._m0[86u].x;
    float _2916 = _1085 / cbSceneParam._m0[86u].y;
    vec4 _2930 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, (log2((isnan(cbSceneParam._m0[77u].w) ? _1019 : (isnan(_1019) ? cbSceneParam._m0[77u].w : min(_1019, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2932 = _2930.x;
    float _2933 = _2930.y;
    float _2934 = _2930.z;
    float _2935 = _2930.w;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    if (_1019 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_1019) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1019 : min(cbSceneParam._m0[80u].w, _1019));
        float _2991 = _2990 / _1019;
        float _3002 = _2991 * _1069;
        float _3003 = _1070 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3005 = _2991 * _1071;
        float _3007 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3008 = _3007 + cbSceneParam._m0[79u].w;
        float _3009 = cbSceneParam._m0[79u].w - _3003;
        float _3015 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3005 * _3005));
        float _3018 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3015;
        float _3023 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3025 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3178;
        if (abs((_3004 - _3007) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3178 = ((((_3008 > 0.0) ? exp2(_3023 * _3008) : (2.0 - exp2(_3025 * _3008))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3018;
        }
        else
        {
            float _3138 = 1.0 / cbSceneParam._m0[80u].x;
            float _3139 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : max(_3008, _3009));
            float _3140 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : min(_3008, _3009));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            _3178 = ((abs(_3015 / _3004) * cbSceneParam._m0[80u].y) * ((((_3149 - _3150) * 2.0) - ((exp2(_3023 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0)))) - exp2(_3023 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))))) * _3138)) - ((exp2(_3025 * _3149) - exp2(_3025 * _3150)) * _3138))) + (_3018 * cbSceneParam._m0[80u].z);
        }
        vec4 _3180 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, 1.0), 0.0);
        float _3189 = exp2((_3178 * (-1.44269502162933349609375)) * (1.0 - _3180.w));
        float _3190 = log2(_3189);
        float _3206 = log2(_2935);
        _3027 = (exp2(_3206 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].x)) * _3180.x) / cbSceneParam._m0[78u].x)) + _2932;
        _3029 = (exp2(_3206 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].y)) * _3180.y) / cbSceneParam._m0[78u].y)) + _2933;
        _3031 = (exp2(_3206 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].z)) * _3180.z) / cbSceneParam._m0[78u].z)) + _2934;
        _3033 = _3189 * _2935;
    }
    else
    {
        _3027 = _2932;
        _3029 = _2933;
        _3031 = _2934;
        _3033 = _2935;
    }
    float _3045 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3046 = _3045 == 3.0;
    float _3047 = log2(_3033);
    float _3054 = exp2(_3047 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2877 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1147))) + ((_2883 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3055 = exp2(_3047 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2879 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1147))) + ((_2885 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3056 = exp2(_3047 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2881 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1147))) + ((_2887 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3065 = (_3045 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3065 * (_3046 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.y = _3065 * (_3046 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3029)));
    SV_Target.z = _3065 * (_3046 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3031)));
    SV_Target.w = cbInstanceData._m0[_2907].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2907].w;
}


