#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1248;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3838 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3849 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3860 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _432 = _430.x;
    float _444 = dot(vec4(_432, _430.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _461 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_432 - _444) * cbMtdParam._m0[24u].z) + _444) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3871 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _469 = (_462 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _470 = (_462 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _471 = (_462 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _488 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _510 = _508.x;
    float _520 = dot(vec4(_510, _508.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _534 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_510 - _520) * cbMtdParam._m0[24u].z) + _520) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3882 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _545 = (_324.x * cbMtdParam._m0[9u].x) * ((_535 * ((_488.x * cbMtdParam._m0[13u].x) - _469)) + _469);
    float _546 = (_324.y * cbMtdParam._m0[9u].y) * ((_535 * ((_488.y * cbMtdParam._m0[13u].y) - _470)) + _470);
    float _547 = (_324.z * cbMtdParam._m0[9u].z) * ((_535 * ((_488.z * cbMtdParam._m0[13u].z) - _471)) + _471);
    float _551 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _545;
    float _554 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _546;
    float _557 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _547;
    float _565 = (((_545 - _551) * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) + _551) * 4.55000019073486328125;
    float _567 = (((_546 - _554) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) + _554) * 4.55000019073486328125;
    float _569 = (((_547 - _557) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _557) * 4.55000019073486328125;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _625 = _621.z;
    float _632 = ((_604.x - _623) * _462) + _623;
    float _633 = ((_604.y - _624) * _462) + _624;
    float _634 = ((_604.z - _625) * _462) + _625;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _659 = ((_646.z - _634) * _535) + _634;
    float _662 = ((((_646.x - _632) * _535) + _632) * 2.0) + (-1.0);
    float _663 = ((((_646.y - _633) * _535) + _633) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3893 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _701 = (_662 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_581.x * 2.0) + (-1.0)))) + (((_689.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _702 = (_663 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_581.y * 2.0) + (-1.0)))) + (((_689.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _707 = (((_581.z - _659) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _659;
    float _711 = ((_689.z - _707) * cbMtdParam._m0[19u].w) + _707;
    float _713 = cbMtdParam._m0[22u].x + _689.w;
    float _716 = fma(_669, _234 * NORMAL.x, fma(_702, _241 * TANGENT.x, (_227 * _219) * _701));
    float _719 = fma(_669, _234 * NORMAL.y, fma(_702, _241 * TANGENT.y, (_227 * _220) * _701));
    float _722 = fma(_669, _234 * NORMAL.z, fma(_702, _241 * TANGENT.z, (_227 * _221) * _701));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _3904 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _730 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3926 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3937 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3948 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _836 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _839 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _853 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3959 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _877 = ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_727, _728, _729), vec3(_806, _807, _808));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _727) - _806;
    float _886 = (_881 * _728) - _807;
    float _887 = (_881 * _729) - _808;
    float _891 = abs(dot(vec3(_806, _807, _808), vec3(_727, _728, _729)));
    float _3992 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_730);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _976 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _980 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1005 = _938 + _727;
        float _1006 = _942 + _728;
        float _1007 = _946 + _729;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _972;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _976;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _980;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_727, _728, _729), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _4040 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_727, _728, _729), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4073 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_727, _728, _729), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4106 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1290 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1294 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1317 = _938 + _727;
        float _1318 = _942 + _728;
        float _1319 = _946 + _729;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_727, _728, _729), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4169 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_727, _728, _729), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4202 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_727, _728, _729), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4235 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1248;
        _1556 = _1248;
        _1557 = _1248;
        _1558 = _1248;
        _1559 = _1248;
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1260)) + _1260;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1261)) + _1261;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1262)) + _1262;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _885 * 0.5;
    float _1624 = _886 * 0.5;
    float _1625 = _887 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1755 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1758 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1786 = frontier_phi_14_12_ladder;
        }
        float _1957;
        if (_1755 > 0.0)
        {
            _1957 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1957 = frontier_phi_23_19_ladder;
        }
        float _2252;
        if (_1758 > 0.0)
        {
            _2252 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2252 = frontier_phi_35_30_ladder;
        }
        float _2254 = isnan(_1957) ? _1786 : (isnan(_1786) ? _1957 : min(_1786, _1957));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1752) + _1741;
        float _2260 = (_2255 * _1755) + _1745;
        float _2261 = (_2255 * _1758) + _1749;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_13_35_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_13_35_ladder_2;
        _1776 = frontier_phi_13_35_ladder_1;
        _1778 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1692);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1838 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1842 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1846 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1849 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1852 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1855 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1962;
        if (_1849 > 0.0)
        {
            _1962 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1962 = frontier_phi_25_21_ladder;
        }
        float _2279;
        if (_1852 > 0.0)
        {
            _2279 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2279 = frontier_phi_37_32_ladder;
        }
        float _2606;
        if (_1855 > 0.0)
        {
            _2606 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2606 = frontier_phi_47_44_ladder;
        }
        float _2608 = isnan(_2279) ? _1962 : (isnan(_1962) ? _2279 : min(_1962, _2279));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1849) + _1838;
        float _2614 = (_2609 * _1852) + _1842;
        float _2615 = (_2609 * _1855) + _1846;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_22_47_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1874 = frontier_phi_22_47_ladder_2;
        _1876 = frontier_phi_22_47_ladder_1;
        _1878 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1783);
        _1874 = _1858.x * cbModelParam._m0[1u].z;
        _1876 = _1858.y * cbModelParam._m0[1u].z;
        _1878 = _1858.z * cbModelParam._m0[1u].z;
    }
    float _1890 = ((((1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _893)) * _877;
    float _1891 = _1890 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1892 = _1890 * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1893 = _1890 * ((cbModelParam._m0[1u].w * (_1878 - _1778)) + _1778);
    float _1896 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, _1891 * cbSceneParam._m0[91u].x));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1949 = _1936 / _1948;
    float _1950 = _1940 / _1948;
    float _1951 = _1944 / _1948;
    float _2098;
    float _2099;
    float _2100;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1978 = ((uint(_1951 > cbSceneParam._m0[59u].y) + uint(_1951 > cbSceneParam._m0[59u].x)) + uint(_1951 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1979 = _1978 + 43u;
        uint _1987 = _1978 + 44u;
        uint _1995 = _1978 + 45u;
        uint _2003 = _1978 + 46u;
        float _2014 = fma(_1948, cbSceneParam._m0[_1979].w, fma(_1944, cbSceneParam._m0[_1979].z, fma(_1940, cbSceneParam._m0[_1979].y, _1936 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1948, cbSceneParam._m0[_1987].w, fma(_1944, cbSceneParam._m0[_1987].z, fma(_1940, cbSceneParam._m0[_1987].y, _1936 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1948, cbSceneParam._m0[_2003].w, fma(_1944, cbSceneParam._m0[_2003].z, fma(_1940, cbSceneParam._m0[_2003].y, _1936 * cbSceneParam._m0[_2003].x)));
        float _2031 = cbSceneParam._m0[33u].z * _2026;
        float _2033 = cbSceneParam._m0[33u].w * _2026;
        float _2036 = fma(_1948, cbSceneParam._m0[_1995].w, fma(_1944, cbSceneParam._m0[_1995].z, fma(_1940, cbSceneParam._m0[_1995].y, _1936 * cbSceneParam._m0[_1995].x))) / _2026;
        float _2084 = (cbSceneParam._m0[33u].x - sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951))) * cbSceneParam._m0[33u].y;
        float _4361 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2091 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2014) / _2026, (_2033 + _2018) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2033 + _2014) / _2026, (_2018 - _2031) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 - _2031) / _2026, (_2018 - _2033) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 - _2033) / _2026, (_2031 + _2018) / _2026), _2036), 0.0)).x), vec4(0.25)));
        _2098 = 1.0 - (_2091 * cbSceneParam._m0[34u].x);
        _2099 = 1.0 - (_2091 * cbSceneParam._m0[34u].y);
        _2100 = 1.0 - (_2091 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2098 = 1.0;
        _2099 = 1.0;
        _2100 = 1.0;
    }
    float _2164;
    float _2166;
    float _2168;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2152 = fma(_1948, cbSceneParam._m0[63u].w, fma(_1944, cbSceneParam._m0[63u].z, fma(_1940, cbSceneParam._m0[63u].y, _1936 * cbSceneParam._m0[63u].x)));
        float _2153 = fma(_1948, cbSceneParam._m0[60u].w, fma(_1944, cbSceneParam._m0[60u].z, fma(_1940, cbSceneParam._m0[60u].y, _1936 * cbSceneParam._m0[60u].x))) / _2152;
        float _2154 = fma(_1948, cbSceneParam._m0[61u].w, fma(_1944, cbSceneParam._m0[61u].z, fma(_1940, cbSceneParam._m0[61u].y, _1936 * cbSceneParam._m0[61u].x))) / _2152;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2153 >= cbSceneParam._m0[64u].x) && (_2154 >= cbSceneParam._m0[64u].y)) && (_2153 <= cbSceneParam._m0[64u].z)) && (_2154 <= cbSceneParam._m0[64u].w))
        {
            float _2292 = fma(_1948, cbSceneParam._m0[62u].w, fma(_1944, cbSceneParam._m0[62u].z, fma(_1940, cbSceneParam._m0[62u].y, _1936 * cbSceneParam._m0[62u].x))) / _2152;
            float _2296 = isnan(cbSceneParam._m0[41u].w) ? _2292 : (isnan(_2292) ? cbSceneParam._m0[41u].w : max(_2292, cbSceneParam._m0[41u].w));
            float _2339 = (cbSceneParam._m0[33u].x - sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951))) * cbSceneParam._m0[33u].y;
            float _4377 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
            float _2346 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2153, cbSceneParam._m0[33u].w + _2154), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2153, _2154 - cbSceneParam._m0[33u].z), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2153 - cbSceneParam._m0[33u].z, _2154 - cbSceneParam._m0[33u].w), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2153 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2154), _2296), 0.0)).x), vec4(0.25)));
            float _2350 = 1.0 - (_2346 * cbSceneParam._m0[34u].x);
            float _2351 = 1.0 - (_2346 * cbSceneParam._m0[34u].y);
            float _2352 = 1.0 - (_2346 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2352) ? _2100 : (isnan(_2100) ? _2352 : min(_2100, _2352));
            frontier_phi_34_33_ladder_1 = isnan(_2351) ? _2099 : (isnan(_2099) ? _2351 : min(_2099, _2351));
            frontier_phi_34_33_ladder_2 = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
        }
        else
        {
            frontier_phi_34_33_ladder = _2100;
            frontier_phi_34_33_ladder_1 = _2099;
            frontier_phi_34_33_ladder_2 = _2098;
        }
        _2164 = frontier_phi_34_33_ladder_2;
        _2166 = frontier_phi_34_33_ladder_1;
        _2168 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2164 = _2098;
        _2166 = _2099;
        _2168 = _2100;
    }
    uvec4 _2173 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2175 = _2173.x * 14u;
    uint _2176 = _2175 + 13u;
    float _2183 = _877 + (-1.0);
    float _2188 = (cbLight._m0[_2176].x * _2183) + 1.0;
    float _2189 = (cbLight._m0[_2176].y * _2183) + 1.0;
    float _2190 = (cbLight._m0[_2176].z * _2183) + 1.0;
    float _2191 = (cbLight._m0[_2176].w * _2183) + 1.0;
    uint _2192 = _2175 + 5u;
    float _2198 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2202 = _2175 + 4u;
    float _2211 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2215 = _2175 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_727, _728, _729));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_727, _728, _729));
    float _4413 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4424 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2192].x * _2198) * _2236) + (((cbLight._m0[_2202].x * _2164) * _2211) * _2234);
    float _2244 = ((_2198 * cbLight._m0[_2192].y) * _2236) + (((cbLight._m0[_2202].y * _2166) * _2211) * _2234);
    float _2245 = ((_2198 * cbLight._m0[_2192].z) * _2236) + (((cbLight._m0[_2202].z * _2168) * _2211) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2175 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2251)
    {
        _2353 = _2243;
        _2355 = _2244;
        _2357 = _2245;
    }
    else
    {
        uint _2361 = _2175 + 6u;
        float _2377 = (dot(vec3(cbLight._m0[_2175 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4435 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2380 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2353 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2243;
        _2355 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2244;
        _2357 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2245;
    }
    bool _2360 = _2249.y == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2360)
    {
        _2415 = _2353;
        _2417 = _2355;
        _2419 = _2357;
    }
    else
    {
        uint _2577 = _2175 + 7u;
        float _2593 = (dot(vec3(cbLight._m0[_2175 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4451 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2596 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2415 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2353;
        _2417 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2355;
        _2419 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2357;
    }
    uint _2422 = _2175 + 8u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _730) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2175].x + _806;
    float _2438 = cbLight._m0[_2175].y + _807;
    float _2439 = cbLight._m0[_2175].z + _808;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2175].xyz));
    float _4467 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _4478 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2451 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2452 = dot(vec3(_727, _728, _729), vec3(_2444, _2445, _2446));
    float _4489 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2444, _2445, _2446));
    float _4500 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2436 * _2436;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2476 = 1.0 - _2436;
    float _2487 = (0.5 / (((_2451 * ((_2450 * _2476) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2476) + _2436) * _2450))) * _2450;
    float _4511 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    uint _2503 = _2175 + 9u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _730) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2215].x + _806;
    float _2517 = cbLight._m0[_2215].y + _807;
    float _2518 = cbLight._m0[_2215].z + _808;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2215].xyz));
    float _4522 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2530 = dot(vec3(_727, _728, _729), vec3(_2523, _2524, _2525));
    float _4533 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2523, _2524, _2525));
    float _4544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2515 * _2515;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2551 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2552 = 1.0 - _2515;
    float _2562 = (0.5 / (((_2451 * ((_2529 * _2552) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2552) + _2515) * _2529))) * _2529;
    float _4555 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    float _2574 = (((_2551 * cbLight._m0[_2503].x) * _2564) * _2198) + ((((cbLight._m0[_2422].x * _2164) * _2475) * _2489) * _2211);
    float _2575 = (((_2551 * cbLight._m0[_2503].y) * _2564) * _2198) + ((((cbLight._m0[_2422].y * _2166) * _2475) * _2489) * _2211);
    float _2576 = (((_2551 * cbLight._m0[_2503].z) * _2564) * _2198) + ((((cbLight._m0[_2422].z * _2168) * _2475) * _2489) * _2211);
    float _2632;
    float _2634;
    float _2636;
    if (_2251)
    {
        _2632 = _2574;
        _2634 = _2575;
        _2636 = _2576;
    }
    else
    {
        uint _2638 = _2175 + 2u;
        uint _2642 = _2175 + 10u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _730) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _806;
        float _2659 = cbLight._m0[_2638].y + _807;
        float _2660 = cbLight._m0[_2638].z + _808;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2638].xyz));
        float _4566 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2672 = dot(vec3(_727, _728, _729), vec3(_2665, _2666, _2667));
        float _4577 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4588 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2693 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2694 = 1.0 - _2657;
        float _2704 = (0.5 / (((_2451 * ((_2671 * _2694) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2694) + _2657) * _2671))) * _2671;
        float _4599 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2632 = (((_2693 * cbLight._m0[_2642].x) * _2706) * _2707) + _2574;
        _2634 = (((_2693 * cbLight._m0[_2642].y) * _2706) * _2707) + _2575;
        _2636 = (((_2693 * cbLight._m0[_2642].z) * _2706) * _2707) + _2576;
    }
    float _2738;
    float _2740;
    float _2742;
    if (_2360)
    {
        _2738 = _2632;
        _2740 = _2634;
        _2742 = _2636;
    }
    else
    {
        uint _2749 = _2175 + 3u;
        uint _2753 = _2175 + 11u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _730) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _806;
        float _2770 = cbLight._m0[_2749].y + _807;
        float _2771 = cbLight._m0[_2749].z + _808;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2749].xyz));
        float _4615 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2783 = dot(vec3(_727, _728, _729), vec3(_2776, _2777, _2778));
        float _4626 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4637 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2804 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2805 = 1.0 - _2768;
        float _2815 = (0.5 / (((_2451 * ((_2782 * _2805) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2805) + _2768) * _2782))) * _2782;
        float _4648 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2738 = (((_2804 * cbLight._m0[_2753].x) * _2817) * _2818) + _2632;
        _2740 = (((_2804 * cbLight._m0[_2753].y) * _2817) * _2818) + _2634;
        _2742 = (((_2804 * cbLight._m0[_2753].z) * _2817) * _2818) + _2636;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2173.y == 0u)
    {
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.x;
        uint _2851 = uint((float(_2839.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2840))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2840)));
        float _2861 = (log2(_1951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2862 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        uint _2865 = uint(isnan(14.0) ? _2862 : (isnan(_2862) ? 14.0 : min(_2862, 14.0)));
        uvec4 _2870 = texelFetch(g_lightClusterGridBuffer, int(((_2865 << 2u) + (_2851 << 6u)) >> 2u));
        uint _2871 = _2870.x;
        uint _2872 = _2839.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2872 >> 4u) & 15u)) + 4294967295u) & _2871) == 0u) || ((_2872 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3112)
                {
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3111;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3102 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _1949;
                        float _3287 = _3246.y - _1950;
                        float _3288 = _3246.z - _1951;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_833, _836, _839), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4674 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _1949;
                        float _3322 = (-0.0) - _1950;
                        float _3323 = (-0.0) - _1951;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3337 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _893;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3350 = _3330 + _3295;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_833, _836, _839), vec3(_3328, _3329, _3330));
                        float _4690 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3362 = dot(vec3(_833, _836, _839), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4701 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3306 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3296) + _3371;
                        float _4712 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4723 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3369 * _3369) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3155 = (_3317 * _3265.x) + _3223;
                        _3156 = (_3317 * _3265.y) + _3224;
                        _3157 = (_3317 * _3265.z) + _3225;
                        _3152 = (_3397 * _3282.x) + _3220;
                        _3153 = (_3397 * _3282.y) + _3221;
                        _3154 = (_3397 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3156;
                    frontier_phi_66_pred_2 = _3155;
                    frontier_phi_66_pred_3 = _3154;
                    frontier_phi_66_pred_4 = _3153;
                    frontier_phi_66_pred_5 = _3152;
                }
                _2962 = frontier_phi_66_pred;
                _2960 = frontier_phi_66_pred_1;
                _2958 = frontier_phi_66_pred_2;
                _2956 = frontier_phi_66_pred_3;
                _2954 = frontier_phi_66_pred_4;
                _2952 = frontier_phi_66_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2952;
                    _3097 = _2954;
                    _3098 = _2956;
                    _3099 = _2958;
                    _3100 = _2960;
                    _3101 = _2962;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2968) & _2871) == 0u)
        {
            _3064 = _2951;
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
            float _3090 = _3089 * _1949;
            float _3091 = _3089 * _1950;
            float _3092 = _3089 * _1951;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3203 = _2951;
                float _3204 = _2953;
                float _3205 = _2955;
                float _3206 = _2957;
                float _3207 = _2959;
                float _3208 = _2961;
                uint _3209 = _2968;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3219)
                    {
                        frontier_phi_72_pred = _3208;
                        frontier_phi_72_pred_1 = _3207;
                        frontier_phi_72_pred_2 = _3206;
                        frontier_phi_72_pred_3 = _3205;
                        frontier_phi_72_pred_4 = _3204;
                        frontier_phi_72_pred_5 = _3203;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3415 = _3203;
                        float _3416 = _3204;
                        float _3417 = _3205;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        uint _3421 = _3218;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3505;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3432 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3432 * 40u) + 20u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3432 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3432 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_1951, _3539.z, fma(_1950, _3539.y, _3539.x * _1949)) + _3539.w;
                            _3552 = !((fma(_1951, _3520.z, fma(_1950, _3520.y, _3520.x * _1949)) + _3520.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3447.x - _1949;
                                float _3580 = _3447.y - _1950;
                                float _3581 = _3447.z - _1951;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3448 * _3448));
                                float _4734 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3597 = sqrt(_3582) * _3463.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_833, _836, _839))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_1951, _3490.z, fma(_1950, _3490.y, _3490.x * _1949)) + _3490.w) / _3551;
                                float _3611 = (fma(_1951, _3505.z, fma(_1950, _3505.y, _3505.x * _1949)) + _3505.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4750 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _893;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3090;
                                float _3641 = _3587 - _3091;
                                float _3642 = _3588 - _3092;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_833, _836, _839), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4761 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3654 = dot(vec3(_833, _836, _839), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4772 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_833, _836, _839), vec3(_3586, _3587, _3588))) + _3663;
                                float _4783 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4794 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3617 * _3463.y;
                                frontier_phi_78_pred_1 = _3617 * _3463.x;
                                frontier_phi_78_pred_2 = _3691 * _3475.z;
                                frontier_phi_78_pred_3 = _3691 * _3475.y;
                                frontier_phi_78_pred_4 = _3691 * _3475.x;
                                frontier_phi_78_pred_5 = _3617 * _3463.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_78_pred;
                            _3698 = frontier_phi_78_pred_1;
                            _3697 = frontier_phi_78_pred_2;
                            _3696 = frontier_phi_78_pred_3;
                            _3695 = frontier_phi_78_pred_4;
                            _3700 = frontier_phi_78_pred_5;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3407;
                        frontier_phi_72_pred_1 = _3406;
                        frontier_phi_72_pred_2 = _3405;
                        frontier_phi_72_pred_3 = _3404;
                        frontier_phi_72_pred_4 = _3403;
                        frontier_phi_72_pred_5 = _3402;
                    }
                    _3075 = frontier_phi_72_pred;
                    _3073 = frontier_phi_72_pred_1;
                    _3071 = frontier_phi_72_pred_2;
                    _3069 = frontier_phi_72_pred_3;
                    _3067 = frontier_phi_72_pred_4;
                    _3065 = frontier_phi_72_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3065;
                        _3204 = _3067;
                        _3205 = _3069;
                        _3206 = _3071;
                        _3207 = _3073;
                        _3208 = _3075;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3075;
                frontier_phi_60_61_ladder_1 = _3073;
                frontier_phi_60_61_ladder_2 = _3069;
                frontier_phi_60_61_ladder_3 = _3067;
                frontier_phi_60_61_ladder_4 = _3065;
                frontier_phi_60_61_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_60_61_ladder = _2961;
                frontier_phi_60_61_ladder_1 = _2959;
                frontier_phi_60_61_ladder_2 = _2955;
                frontier_phi_60_61_ladder_3 = _2953;
                frontier_phi_60_61_ladder_4 = _2951;
                frontier_phi_60_61_ladder_5 = _2957;
            }
            _3064 = frontier_phi_60_61_ladder_4;
            _3066 = frontier_phi_60_61_ladder_3;
            _3068 = frontier_phi_60_61_ladder_2;
            _3070 = frontier_phi_60_61_ladder_5;
            _3072 = frontier_phi_60_61_ladder_1;
            _3074 = frontier_phi_60_61_ladder;
        }
        float _3079 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2884 = (_3079 * _3070) + _2415;
        _2886 = (_3079 * _3072) + _2417;
        _2888 = (_3079 * _3074) + _2419;
        _2890 = ((_3064 * 0.039999999105930328369140625) * _3079) + _2738;
        _2892 = ((_3066 * 0.039999999105930328369140625) * _3079) + _2740;
        _2894 = ((_3068 * 0.039999999105930328369140625) * _3079) + _2742;
    }
    else
    {
        _2884 = _2415;
        _2886 = _2417;
        _2888 = _2419;
        _2890 = _2738;
        _2892 = _2740;
        _2894 = _2742;
    }
    float _4810 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4821 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4832 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    uint _2914 = _268 + 6u;
    float _2922 = _814 / cbSceneParam._m0[86u].x;
    float _2923 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _2977 = _2976 / _748;
        float _2988 = _2977 * _799;
        float _2989 = _800 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2992 = _2977 * _801;
        float _2994 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2995 = _2994 + cbSceneParam._m0[79u].w;
        float _2996 = cbSceneParam._m0[79u].w - _2989;
        float _3002 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2992 * _2992));
        float _3005 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3002;
        float _3010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2990 - _2994) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2995 > 0.0) ? exp2(_3010 * _2995) : (2.0 - exp2(_3012 * _2995))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3005;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : max(_2995, _2996));
            float _3127 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : min(_2995, _2996));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3165 = ((abs(_3002 / _2990) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3010 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3010 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3012 * _3136) - exp2(_3012 * _3137)) * _3125))) + (_3005 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2942);
        _3014 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3016 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3018 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3020 = _3176 * _2942;
    }
    else
    {
        _3014 = _2939;
        _3016 = _2940;
        _3018 = _2941;
        _3020 = _2942;
    }
    float _3032 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3033 = _3032 == 3.0;
    float _3034 = log2(_3020);
    float _3041 = exp2(_3034 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2884 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _877))) + ((_2890 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3042 = exp2(_3034 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2886 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _877))) + ((_2892 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3043 = exp2(_3034 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2888 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _877))) + ((_2894 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3052 = (_3032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3052 * (_3033 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3014)));
    SV_Target.y = _3052 * (_3033 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.z = _3052 * (_3033 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.w = cbInstanceData._m0[_2914].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2914].w;
}


