#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _3756;
float _3757;
float _3758;
float _3759;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3768 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3779 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3790 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3801 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _457 = (_450 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _458 = (_450 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _459 = (_450 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3812 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _542;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_586.x - _605) * _450) + _605;
    float _615 = ((_586.y - _606) * _450) + _606;
    float _616 = ((_586.z - _607) * _450) + _607;
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _641 = ((_628.z - _616) * _523) + _616;
    float _644 = ((((_628.x - _614) * _523) + _614) * 2.0) + (-1.0);
    float _645 = ((((_628.y - _615) * _523) + _615) * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3823 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _651 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _683 = (_644 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_563.x * 2.0) + (-1.0)))) + (((_671.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _684 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_563.y * 2.0) + (-1.0)))) + (((_671.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _725 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_698 - _699) * cbMtdParam._m0[24u].y) + _699) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3834 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _734 = ((((cbMtdParam._m0[10u].x - _549) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _726) + _549;
    float _735 = ((((cbMtdParam._m0[10u].y - _550) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _726) + _550;
    float _736 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _551)) * _726) + _551;
    float _741 = (((_563.z - _641) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _641;
    float _745 = ((_671.z - _741) * cbMtdParam._m0[19u].w) + _741;
    float _749 = ((cbMtdParam._m0[23u].y - _745) * _726) + _745;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _774 = (_768.x * 2.0) + (-1.0);
    float _775 = (_768.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3845 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _792 = (_726 * (((cbMtdParam._m0[22u].z * _683) - _683) + _774)) + _683;
    float _793 = (_726 * (((cbMtdParam._m0[22u].z * _684) - _684) + _775)) + _684;
    float _794 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _651)) + _651;
    float _796 = cbMtdParam._m0[22u].x + _671.w;
    float _799 = fma(_794, _249 * NORMAL.x, fma(_793, _256 * TANGENT.x, (_242 * _234) * _792));
    float _802 = fma(_794, _249 * NORMAL.y, fma(_793, _256 * TANGENT.y, (_242 * _235) * _792));
    float _805 = fma(_794, _249 * NORMAL.z, fma(_793, _256 * TANGENT.z, (_242 * _236) * _792));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    float _810 = _809 * _799;
    float _811 = _809 * _802;
    float _812 = _809 * _805;
    float _3856 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _813 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3878 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3889 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3900 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _882 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _872);
    float _883 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _872);
    float _884 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _872);
    float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
    float _889 = _882 * _888;
    float _890 = _883 * _888;
    float _891 = _884 * _888;
    vec4 _896 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _898 = _896.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1052 = sqrt(((_882 * _882) + (_883 * _883)) + (_884 * _884));
        float _1058 = (cbMatDynParam._m0[5u].x * _1052) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1063 = (cbMatDynParam._m0[5u].z * _1052) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _1059)) + _1059) < ((_898 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _909 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _910 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _928 = fma(_812, cbSceneParam._m0[5u].z, fma(_811, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _810));
    float _931 = fma(_812, cbSceneParam._m0[6u].z, fma(_811, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _810));
    float _934 = fma(_812, cbSceneParam._m0[7u].z, fma(_811, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _810));
    uint _947 = _281 + 9u;
    uint _948 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_948].z;
    float _3933 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _909, cbSceneParam._m0[86u].y * _910));
    float _972 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _968.x;
    float _973 = dot(vec3(_810, _811, _812), vec3(_889, _890, _891));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _810) - _889;
    float _981 = (_976 * _811) - _890;
    float _982 = (_976 * _812) - _891;
    float _986 = abs(dot(vec3(_889, _890, _891), vec3(_810, _811, _812)));
    float _3966 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_813);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1099 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1103 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1128 = _1033 + _810;
        float _1129 = _1037 + _811;
        float _1130 = _1041 + _812;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_810, _811, _812), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4014 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_810, _811, _812), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4047 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_810, _811, _812), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4080 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1416 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1420 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1443 = _1033 + _810;
        float _1444 = _1037 + _811;
        float _1445 = _1041 + _812;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_810, _811, _812), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4143 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_810, _811, _812), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4176 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_810, _811, _812), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4209 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1371;
        _1682 = _1371;
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1383)) + _1383;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1384)) + _1384;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1385)) + _1385;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _980 * 0.5;
    float _1750 = _981 * 0.5;
    float _1751 = _982 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1881 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1884 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1912 = frontier_phi_17_15_ladder;
        }
        float _2135;
        if (_1881 > 0.0)
        {
            _2135 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2135 = frontier_phi_26_22_ladder;
        }
        float _2381;
        if (_1884 > 0.0)
        {
            _2381 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2381 = frontier_phi_38_33_ladder;
        }
        float _2383 = isnan(_2135) ? _1912 : (isnan(_1912) ? _2135 : min(_1912, _2135));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1878) + _1867;
        float _2389 = (_2384 * _1881) + _1871;
        float _2390 = (_2384 * _1884) + _1875;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_16_38_ladder_2;
        _1902 = frontier_phi_16_38_ladder_1;
        _1904 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1818);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1978 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1981 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2140;
        if (_1975 > 0.0)
        {
            _2140 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2140 = frontier_phi_28_24_ladder;
        }
        float _2408;
        if (_1978 > 0.0)
        {
            _2408 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2408 = frontier_phi_40_35_ladder;
        }
        float _2613;
        if (_1981 > 0.0)
        {
            _2613 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2613 = frontier_phi_49_46_ladder;
        }
        float _2615 = isnan(_2408) ? _2140 : (isnan(_2140) ? _2408 : min(_2140, _2408));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1975) + _1964;
        float _2621 = (_2616 * _1978) + _1968;
        float _2622 = (_2616 * _1981) + _1972;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_25_49_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_49_ladder_2;
        _2002 = frontier_phi_25_49_ladder_1;
        _2004 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1909);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2016 = ((((1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1001 * _988)) * _972;
    float _2017 = _2016 * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2018 = _2016 * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2019 = _2016 * ((cbModelParam._m0[1u].w * (_2004 - _1904)) + _1904);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    vec4 _2036 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_909, _910));
    float _2038 = _2036.w;
    float _2050 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2038);
    float _2051 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2038);
    float _2052 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2038);
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _972 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_810, _811, _812));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_810, _811, _812));
    float _4345 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4356 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2050) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2051) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2052) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2134)
    {
        _2145 = _2126;
        _2147 = _2127;
        _2149 = _2128;
    }
    else
    {
        uint _2153 = _2058 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4367 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2172 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2126;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2127;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2128;
    }
    bool _2152 = _2132.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2152)
    {
        _2190 = _2145;
        _2192 = _2147;
        _2194 = _2149;
    }
    else
    {
        uint _2352 = _2058 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4383 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2371 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2190 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2145;
        _2192 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2147;
        _2194 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2149;
    }
    uint _2197 = _2058 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _813) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2058].x + _889;
    float _2213 = cbLight._m0[_2058].y + _890;
    float _2214 = cbLight._m0[_2058].z + _891;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2058].xyz));
    float _4399 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2226 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2227 = dot(vec3(_810, _811, _812), vec3(_2219, _2220, _2221));
    float _4421 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2219, _2220, _2221));
    float _4432 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2226 * ((_2225 * _2251) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2251) + _2211) * _2225))) * _2225;
    float _4443 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2278 = _2058 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _813) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2098].x + _889;
    float _2292 = cbLight._m0[_2098].y + _890;
    float _2293 = cbLight._m0[_2098].z + _891;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2098].xyz));
    float _4454 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2305 = dot(vec3(_810, _811, _812), vec3(_2298, _2299, _2300));
    float _4465 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2298, _2299, _2300));
    float _4476 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2327 = 1.0 - _2290;
    float _2337 = (0.5 / (((_2226 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2327) + _2290) * _2304))) * _2304;
    float _4487 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2349 = (((_2326 * cbLight._m0[_2278].x) * _2339) * _2081) + ((((cbLight._m0[_2197].x * _2050) * _2250) * _2264) * _2094);
    float _2350 = (((_2326 * cbLight._m0[_2278].y) * _2339) * _2081) + ((((cbLight._m0[_2197].y * _2051) * _2250) * _2264) * _2094);
    float _2351 = (((_2326 * cbLight._m0[_2278].z) * _2339) * _2081) + ((((cbLight._m0[_2197].z * _2052) * _2250) * _2264) * _2094);
    float _2413;
    float _2415;
    float _2417;
    if (_2134)
    {
        _2413 = _2349;
        _2415 = _2350;
        _2417 = _2351;
    }
    else
    {
        uint _2419 = _2058 + 2u;
        uint _2423 = _2058 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _813) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _889;
        float _2440 = cbLight._m0[_2419].y + _890;
        float _2441 = cbLight._m0[_2419].z + _891;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2419].xyz));
        float _4498 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2453 = dot(vec3(_810, _811, _812), vec3(_2446, _2447, _2448));
        float _4509 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4520 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2226 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2475) + _2438) * _2452))) * _2452;
        float _4531 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2413 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2349;
        _2415 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2350;
        _2417 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2351;
    }
    float _2523;
    float _2525;
    float _2527;
    if (_2152)
    {
        _2523 = _2413;
        _2525 = _2415;
        _2527 = _2417;
    }
    else
    {
        uint _2534 = _2058 + 3u;
        uint _2538 = _2058 + 11u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _813) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _889;
        float _2555 = cbLight._m0[_2534].y + _890;
        float _2556 = cbLight._m0[_2534].z + _891;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2534].xyz));
        float _4547 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2568 = dot(vec3(_810, _811, _812), vec3(_2561, _2562, _2563));
        float _4558 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4569 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2590 = 1.0 - _2553;
        float _2600 = (0.5 / (((_2226 * ((_2567 * _2590) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2590) + _2553) * _2567))) * _2567;
        float _4580 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2523 = (((_2589 * cbLight._m0[_2538].x) * _2602) * _2603) + _2413;
        _2525 = (((_2589 * cbLight._m0[_2538].y) * _2602) * _2603) + _2415;
        _2527 = (((_2589 * cbLight._m0[_2538].z) * _2602) * _2603) + _2417;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2056.y == 0u)
    {
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2678;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2678;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2678;
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.x;
        uint _2705 = uint((float(_2693.y) * floor(float(uint(cbSceneParam._m0[85u].y * _910) / _2694))) + floor(float(uint(cbSceneParam._m0[85u].x * _909) / _2694)));
        float _2715 = (log2(_2681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2716 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        uint _2719 = uint(isnan(14.0) ? _2716 : (isnan(_2716) ? 14.0 : min(_2716, 14.0)));
        uvec4 _2724 = texelFetch(g_lightClusterGridBuffer, int(((_2719 << 2u) + (_2705 << 6u)) >> 2u));
        uint _2725 = _2724.x;
        uint _2726 = _2693.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2726 >> 4u) & 15u)) + 4294967295u) & _2725) == 0u) || ((_2726 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _2679;
                        float _3191 = _3150.y - _2680;
                        float _3192 = _3150.z - _2681;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_928, _931, _934), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4606 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _2679;
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3242 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _988;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_928, _931, _934), vec3(_3232, _3233, _3234));
                        float _4622 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3267 = dot(vec3(_928, _931, _934), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4633 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3210 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3200) + _3276;
                        float _4644 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4655 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3274 * _3274) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3302 * _3186.x) + _3124;
                        _3052 = (_3302 * _3186.y) + _3125;
                        _3053 = (_3302 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                _2827 = frontier_phi_66_pred;
                _2837 = frontier_phi_66_pred_1;
                _2835 = frontier_phi_66_pred_2;
                _2833 = frontier_phi_66_pred_3;
                _2831 = frontier_phi_66_pred_4;
                _2829 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2827;
                    _2980 = _2829;
                    _2981 = _2831;
                    _2982 = _2833;
                    _2983 = _2835;
                    _2984 = _2837;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2843) & _2725) == 0u)
        {
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
            float _2973 = _2972 * _2679;
            float _2974 = _2972 * _2680;
            float _2975 = _2972 * _2681;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2826;
                float _3108 = _2828;
                float _3109 = _2830;
                float _3110 = _2832;
                float _3111 = _2834;
                float _3112 = _2836;
                uint _3113 = _2843;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3123)
                    {
                        frontier_phi_77_pred = _3112;
                        frontier_phi_77_pred_1 = _3111;
                        frontier_phi_77_pred_2 = _3110;
                        frontier_phi_77_pred_3 = _3109;
                        frontier_phi_77_pred_4 = _3108;
                        frontier_phi_77_pred_5 = _3107;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        uint _3335 = _3122;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3346 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3346 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3346 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2681, _3453.z, fma(_2680, _3453.y, _3453.x * _2679)) + _3453.w;
                            _3466 = !((fma(_2681, _3434.z, fma(_2680, _3434.y, _3434.x * _2679)) + _3434.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3361.x - _2679;
                                float _3494 = _3361.y - _2680;
                                float _3495 = _3361.z - _2681;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3362 * _3362));
                                float _4666 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3511 = sqrt(_3496) * _3377.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_928, _931, _934))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2681, _3404.z, fma(_2680, _3404.y, _3404.x * _2679)) + _3404.w) / _3465;
                                float _3525 = (fma(_2681, _3419.z, fma(_2680, _3419.y, _3419.x * _2679)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4682 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _988;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _2973;
                                float _3555 = _3501 - _2974;
                                float _3556 = _3502 - _2975;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_928, _931, _934), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4693 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3568 = dot(vec3(_928, _931, _934), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4704 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_928, _931, _934), vec3(_3500, _3501, _3502))) + _3577;
                                float _4715 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4726 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3531 * _3377.y;
                                frontier_phi_83_pred_1 = _3531 * _3377.x;
                                frontier_phi_83_pred_2 = _3605 * _3389.z;
                                frontier_phi_83_pred_3 = _3605 * _3389.y;
                                frontier_phi_83_pred_4 = _3605 * _3389.x;
                                frontier_phi_83_pred_5 = _3531 * _3377.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_83_pred;
                            _3612 = frontier_phi_83_pred_1;
                            _3611 = frontier_phi_83_pred_2;
                            _3610 = frontier_phi_83_pred_3;
                            _3609 = frontier_phi_83_pred_4;
                            _3614 = frontier_phi_83_pred_5;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3321;
                        frontier_phi_77_pred_1 = _3320;
                        frontier_phi_77_pred_2 = _3319;
                        frontier_phi_77_pred_3 = _3318;
                        frontier_phi_77_pred_4 = _3317;
                        frontier_phi_77_pred_5 = _3316;
                    }
                    _2958 = frontier_phi_77_pred;
                    _2956 = frontier_phi_77_pred_1;
                    _2954 = frontier_phi_77_pred_2;
                    _2952 = frontier_phi_77_pred_3;
                    _2950 = frontier_phi_77_pred_4;
                    _2948 = frontier_phi_77_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            _2947 = frontier_phi_58_59_ladder_5;
            _2949 = frontier_phi_58_59_ladder_4;
            _2951 = frontier_phi_58_59_ladder;
            _2953 = frontier_phi_58_59_ladder_3;
            _2955 = frontier_phi_58_59_ladder_2;
            _2957 = frontier_phi_58_59_ladder_1;
        }
        float _2962 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _2738 = (_2962 * _2953) + _2190;
        _2740 = (_2962 * _2955) + _2192;
        _2742 = (_2962 * _2957) + _2194;
        _2744 = ((_2947 * 0.039999999105930328369140625) * _2962) + _2523;
        _2746 = ((_2949 * 0.039999999105930328369140625) * _2962) + _2525;
        _2748 = ((_2951 * 0.039999999105930328369140625) * _2962) + _2527;
    }
    else
    {
        _2738 = _2190;
        _2740 = _2192;
        _2742 = _2194;
        _2744 = _2523;
        _2746 = _2525;
        _2748 = _2527;
    }
    float _4742 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4753 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4764 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2765 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2738 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _972))) + ((_2744 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2766 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2740 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _972))) + ((_2746 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2742 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _972))) + ((_2748 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _2768 = _281 + 6u;
    float _2776 = _909 / cbSceneParam._m0[86u].x;
    float _2777 = _910 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _2852 = _2851 / _831;
        float _2863 = _2852 * _882;
        float _2864 = _883 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2867 = _2852 * _884;
        float _2869 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2864;
        float _2877 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2865 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3010 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2877 / _2865) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2887 * _3019) - exp2(_2887 * _3020)) * _3008))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2796);
        _2889 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2891 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2893 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2895 = _3075 * _2796;
    }
    else
    {
        _2889 = _2793;
        _2891 = _2794;
        _2893 = _2795;
        _2895 = _2796;
    }
    bool _3102;
    vec4 _2905;
    vec4 _2927;
    float _2929;
    float _2933;
    float _2934;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2905 = cbMatDynParam._m0[0u];
        float _2907 = roundEven(_2905.y);
        bool _2908 = _2907 == 3.0;
        float _2909 = log2(_2895);
        float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * _2765;
        float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * _2766;
        float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * _2767;
        float _2925 = _898 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        float _2932 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2933 = _2932 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = _2932 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
        _2935 = _2932 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
        _2936 = _2925 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _947 + uint(_2905.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2929 + 1.0) < _2927.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3307;
    if (_3102)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2768].w;
    }
    SV_Target.x = _2933;
    SV_Target.y = _2934;
    SV_Target.z = _2935;
    SV_Target.w = _3307;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
    discard_exit();
}


