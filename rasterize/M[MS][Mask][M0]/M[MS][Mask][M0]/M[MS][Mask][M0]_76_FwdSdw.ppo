#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1362;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _339.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3949 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _339.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3960 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _408) + _527;
    float _537 = ((_508.y - _528) * _408) + _528;
    float _538 = ((_508.z - _529) * _408) + _529;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _481) + _538;
    float _566 = ((((_550.x - _536) * _481) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _481) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _3971 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _600 = (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _601 = (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _604 = fma(_574, _241, fma(_601, _248, _600 * _234));
    float _607 = fma(_574, _242, fma(_601, _249, _600 * _235));
    float _610 = fma(_574, _243, fma(_601, _250, _600 * _236));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_614 * _604, _614 * _607, _614 * _610, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_643 - _644) * cbMtdParam._m0[24u].w) + _644) * cbMtdParam._m0[21u].z);
    float _3982 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _653 = (-0.0) - cbMtdParam._m0[24u].x;
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
    float _663 = _651 - ((_651 * TEXCOORD_8.x) * _656);
    float _664 = _651 - ((_651 * TEXCOORD_8.y) * _656);
    float _665 = _651 - ((_651 * TEXCOORD_8.z) * _656);
    float _672 = (_663 * (cbMtdParam._m0[17u].x - _488)) + _488;
    float _673 = (_664 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _674 = (_665 * (cbMtdParam._m0[17u].z - _490)) + _490;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _717 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_688 - _689) * cbMtdParam._m0[24u].y) + _689) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4003 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _726 = ((((cbMtdParam._m0[10u].x - _672) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _718) + _672;
    float _727 = ((((cbMtdParam._m0[10u].y - _673) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _718) + _673;
    float _728 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _674)) * _718) + _674;
    float _732 = (cbMtdParam._m0[19u].w * (_588.z - _563)) + _563;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _753 = (_746.x * 2.0) + (-1.0);
    float _754 = (_746.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _4014 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _763 = ((_746.z - _732) * _663) + _732;
    float _766 = ((cbMtdParam._m0[23u].y - _763) * _718) + _763;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _791 = (_785.x * 2.0) + (-1.0);
    float _792 = (_785.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4025 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _808 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _574) * _665) + _574;
    float _811 = (((_753 - _600) * _663) + _600) + (cbMtdParam._m0[21u].x * _600);
    float _812 = (((_754 - _601) * _664) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _823 = (((_791 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _718) + _811;
    float _824 = (((_792 - _812) + (_812 * cbMtdParam._m0[22u].z)) * _718) + _812;
    float _825 = (_718 * (sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) - _808)) + _808;
    float _827 = cbMtdParam._m0[22u].x + _588.w;
    float _830 = fma(_825, _241, fma(_824, _248, _823 * _234));
    float _833 = fma(_825, _242, fma(_824, _249, _823 * _235));
    float _836 = fma(_825, _243, fma(_824, _250, _823 * _236));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _4036 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _844 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4058 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4069 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4080 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _862 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _950 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _953 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _967 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_967].z;
    float _4091 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _991 = ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * TEXCOORD_5.w) * _987.x;
    float _992 = dot(vec3(_841, _842, _843), vec3(_920, _921, _922));
    float _995 = _992 * 2.0;
    float _999 = (_995 * _841) - _920;
    float _1000 = (_995 * _842) - _921;
    float _1001 = (_995 * _843) - _922;
    float _1005 = abs(dot(vec3(_920, _921, _922), vec3(_841, _842, _843)));
    float _4124 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1007 = sqrt(_844);
    float _1020 = exp2((_1007 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1007 * 3.0));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1060, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052));
        float _1090 = fma(_1060, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052));
        float _1094 = fma(_1060, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052));
        float _1119 = _1052 + _841;
        float _1120 = _1056 + _842;
        float _1121 = _1060 + _843;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_841, _842, _843), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4172 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_841, _842, _843), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4205 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_841, _842, _843), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4238 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1060, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052));
        float _1404 = fma(_1060, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052));
        float _1408 = fma(_1060, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052));
        float _1431 = _1052 + _841;
        float _1432 = _1056 + _842;
        float _1433 = _1060 + _843;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_841, _842, _843), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4301 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_841, _842, _843), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4334 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_841, _842, _843), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4367 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1362;
        _1670 = _1362;
        _1671 = _1362;
        _1672 = _1362;
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1374)) + _1374;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1375)) + _1375;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1376)) + _1376;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _999 * 0.5;
    float _1738 = _1000 * 0.5;
    float _1739 = _1001 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1854 = fma(_1060, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052)) + cbModelParam._m0[13u].w;
        float _1858 = fma(_1060, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052)) + cbModelParam._m0[14u].w;
        float _1862 = fma(_1060, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052)) + cbModelParam._m0[15u].w;
        float _1865 = fma(_1001, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999));
        float _1868 = fma(_1001, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999));
        float _1871 = fma(_1001, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999));
        float _1899;
        if (_1865 > 0.0)
        {
            _1899 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1899 = frontier_phi_14_12_ladder;
        }
        float _2069;
        if (_1868 > 0.0)
        {
            _2069 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2069 = frontier_phi_23_19_ladder;
        }
        float _2364;
        if (_1871 > 0.0)
        {
            _2364 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2364 = frontier_phi_35_30_ladder;
        }
        float _2366 = isnan(_2069) ? _1899 : (isnan(_1899) ? _2069 : min(_1899, _2069));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1865) + _1854;
        float _2372 = (_2367 * _1868) + _1858;
        float _2373 = (_2367 * _1871) + _1862;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_13_35_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1887 = frontier_phi_13_35_ladder_2;
        _1889 = frontier_phi_13_35_ladder_1;
        _1891 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_999, _1000, _1001), _1806);
        _1887 = _1875.x * cbModelParam._m0[1u].y;
        _1889 = _1875.y * cbModelParam._m0[1u].y;
        _1891 = _1875.z * cbModelParam._m0[1u].y;
    }
    float _1895 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1895 : min(cbModelParam._m0[25u].w, _1895));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1060, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1060, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1060, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_1001, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999));
        float _1964 = fma(_1001, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999));
        float _1967 = fma(_1001, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999));
        float _2074;
        if (_1961 > 0.0)
        {
            _2074 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2074 = frontier_phi_25_21_ladder;
        }
        float _2391;
        if (_1964 > 0.0)
        {
            _2391 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2391 = frontier_phi_37_32_ladder;
        }
        float _2718;
        if (_1967 > 0.0)
        {
            _2718 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2718 = frontier_phi_47_44_ladder;
        }
        float _2720 = isnan(_2391) ? _2074 : (isnan(_2074) ? _2391 : min(_2074, _2391));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _1961) + _1950;
        float _2726 = (_2721 * _1964) + _1954;
        float _2727 = (_2721 * _1967) + _1958;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _1896);
            frontier_phi_22_47_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_22_47_ladder_2;
        _1988 = frontier_phi_22_47_ladder_1;
        _1990 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_999, _1000, _1001), _1896);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2002 = ((((1.0 - _1020) * ((_1007 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1020 * _1007)) * _991;
    float _2003 = _2002 * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2004 = _2002 * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2005 = _2002 * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2061 = _2048 / _2060;
    float _2062 = _2052 / _2060;
    float _2063 = _2056 / _2060;
    float _2210;
    float _2211;
    float _2212;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2090 = ((uint(_2063 > cbSceneParam._m0[59u].y) + uint(_2063 > cbSceneParam._m0[59u].x)) + uint(_2063 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2091 = _2090 + 43u;
        uint _2099 = _2090 + 44u;
        uint _2107 = _2090 + 45u;
        uint _2115 = _2090 + 46u;
        float _2126 = fma(_2060, cbSceneParam._m0[_2091].w, fma(_2056, cbSceneParam._m0[_2091].z, fma(_2052, cbSceneParam._m0[_2091].y, _2048 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2060, cbSceneParam._m0[_2099].w, fma(_2056, cbSceneParam._m0[_2099].z, fma(_2052, cbSceneParam._m0[_2099].y, _2048 * cbSceneParam._m0[_2099].x)));
        float _2138 = fma(_2060, cbSceneParam._m0[_2115].w, fma(_2056, cbSceneParam._m0[_2115].z, fma(_2052, cbSceneParam._m0[_2115].y, _2048 * cbSceneParam._m0[_2115].x)));
        float _2143 = cbSceneParam._m0[33u].z * _2138;
        float _2145 = cbSceneParam._m0[33u].w * _2138;
        float _2148 = fma(_2060, cbSceneParam._m0[_2107].w, fma(_2056, cbSceneParam._m0[_2107].z, fma(_2052, cbSceneParam._m0[_2107].y, _2048 * cbSceneParam._m0[_2107].x))) / _2138;
        float _2196 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
        float _4493 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2203 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2126) / _2138, (_2145 + _2130) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2126) / _2138, (_2130 - _2143) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2143) / _2138, (_2130 - _2145) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2145) / _2138, (_2143 + _2130) / _2138), _2148), 0.0)).x), vec4(0.25)));
        _2210 = 1.0 - (_2203 * cbSceneParam._m0[34u].x);
        _2211 = 1.0 - (_2203 * cbSceneParam._m0[34u].y);
        _2212 = 1.0 - (_2203 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2210 = 1.0;
        _2211 = 1.0;
        _2212 = 1.0;
    }
    float _2276;
    float _2278;
    float _2280;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2264 = fma(_2060, cbSceneParam._m0[63u].w, fma(_2056, cbSceneParam._m0[63u].z, fma(_2052, cbSceneParam._m0[63u].y, _2048 * cbSceneParam._m0[63u].x)));
        float _2265 = fma(_2060, cbSceneParam._m0[60u].w, fma(_2056, cbSceneParam._m0[60u].z, fma(_2052, cbSceneParam._m0[60u].y, _2048 * cbSceneParam._m0[60u].x))) / _2264;
        float _2266 = fma(_2060, cbSceneParam._m0[61u].w, fma(_2056, cbSceneParam._m0[61u].z, fma(_2052, cbSceneParam._m0[61u].y, _2048 * cbSceneParam._m0[61u].x))) / _2264;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2265 >= cbSceneParam._m0[64u].x) && (_2266 >= cbSceneParam._m0[64u].y)) && (_2265 <= cbSceneParam._m0[64u].z)) && (_2266 <= cbSceneParam._m0[64u].w))
        {
            float _2404 = fma(_2060, cbSceneParam._m0[62u].w, fma(_2056, cbSceneParam._m0[62u].z, fma(_2052, cbSceneParam._m0[62u].y, _2048 * cbSceneParam._m0[62u].x))) / _2264;
            float _2408 = isnan(cbSceneParam._m0[41u].w) ? _2404 : (isnan(_2404) ? cbSceneParam._m0[41u].w : max(_2404, cbSceneParam._m0[41u].w));
            float _2451 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
            float _4509 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
            float _2458 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2265, cbSceneParam._m0[33u].w + _2266), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2265, _2266 - cbSceneParam._m0[33u].z), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].z, _2266 - cbSceneParam._m0[33u].w), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2266), _2408), 0.0)).x), vec4(0.25)));
            float _2462 = 1.0 - (_2458 * cbSceneParam._m0[34u].x);
            float _2463 = 1.0 - (_2458 * cbSceneParam._m0[34u].y);
            float _2464 = 1.0 - (_2458 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_34_33_ladder_1 = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
            frontier_phi_34_33_ladder_2 = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
        }
        else
        {
            frontier_phi_34_33_ladder = _2212;
            frontier_phi_34_33_ladder_1 = _2211;
            frontier_phi_34_33_ladder_2 = _2210;
        }
        _2276 = frontier_phi_34_33_ladder_2;
        _2278 = frontier_phi_34_33_ladder_1;
        _2280 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2276 = _2210;
        _2278 = _2211;
        _2280 = _2212;
    }
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _991 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2323 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2327 = _2287 | 1u;
    float _2338 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_841, _842, _843));
    float _2341 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_841, _842, _843));
    float _4545 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _4556 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2348 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * 0.3183098733425140380859375;
    float _2355 = ((cbLight._m0[_2304].x * _2310) * _2348) + (((cbLight._m0[_2314].x * _2276) * _2323) * _2346);
    float _2356 = ((_2310 * cbLight._m0[_2304].y) * _2348) + (((cbLight._m0[_2314].y * _2278) * _2323) * _2346);
    float _2357 = ((_2310 * cbLight._m0[_2304].z) * _2348) + (((cbLight._m0[_2314].z * _2280) * _2323) * _2346);
    uvec4 _2361 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2363 = _2361.x == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2363)
    {
        _2465 = _2355;
        _2467 = _2356;
        _2469 = _2357;
    }
    else
    {
        uint _2473 = _2287 + 6u;
        float _2489 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4567 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2492 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2465 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2355;
        _2467 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2356;
        _2469 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2357;
    }
    bool _2472 = _2361.y == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2472)
    {
        _2527 = _2465;
        _2529 = _2467;
        _2531 = _2469;
    }
    else
    {
        uint _2689 = _2287 + 7u;
        float _2705 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2706 = _2705 * _2705;
        float _4583 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2707 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2708 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2527 = (((cbLight._m0[_2689].x * 0.3183098733425140380859375) * _2707) * _2708) + _2465;
        _2529 = (((cbLight._m0[_2689].y * 0.3183098733425140380859375) * _2707) * _2708) + _2467;
        _2531 = (((cbLight._m0[_2689].z * 0.3183098733425140380859375) * _2707) * _2708) + _2469;
    }
    uint _2534 = _2287 + 8u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _844) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2287].x + _920;
    float _2550 = cbLight._m0[_2287].y + _921;
    float _2551 = cbLight._m0[_2287].z + _922;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2287].xyz));
    float _4599 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _4610 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2563 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2564 = dot(vec3(_841, _842, _843), vec3(_2556, _2557, _2558));
    float _4621 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2568 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2556, _2557, _2558));
    float _4632 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = _2548 * _2548;
    float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
    float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2588 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2563 * ((_2562 * _2588) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2588) + _2548) * _2562))) * _2562;
    float _4643 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
    uint _2615 = _2287 + 9u;
    float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _844) * 0.949999988079071044921875);
    float _2627 = _2626 * _2626;
    float _2628 = cbLight._m0[_2327].x + _920;
    float _2629 = cbLight._m0[_2327].y + _921;
    float _2630 = cbLight._m0[_2327].z + _922;
    float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
    float _2635 = _2634 * _2628;
    float _2636 = _2634 * _2629;
    float _2637 = _2634 * _2630;
    float _2638 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2327].xyz));
    float _4654 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2642 = dot(vec3(_841, _842, _843), vec3(_2635, _2636, _2637));
    float _4665 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2646 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2635, _2636, _2637));
    float _4676 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2650 = _2627 * _2627;
    float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
    float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2664 = 1.0 - _2627;
    float _2674 = (0.5 / (((_2563 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2664) + _2627) * _2641))) * _2641;
    float _4687 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
    float _2686 = (((_2663 * cbLight._m0[_2615].x) * _2676) * _2310) + ((((cbLight._m0[_2534].x * _2276) * _2587) * _2601) * _2323);
    float _2687 = (((_2663 * cbLight._m0[_2615].y) * _2676) * _2310) + ((((cbLight._m0[_2534].y * _2278) * _2587) * _2601) * _2323);
    float _2688 = (((_2663 * cbLight._m0[_2615].z) * _2676) * _2310) + ((((cbLight._m0[_2534].z * _2280) * _2587) * _2601) * _2323);
    float _2744;
    float _2746;
    float _2748;
    if (_2363)
    {
        _2744 = _2686;
        _2746 = _2687;
        _2748 = _2688;
    }
    else
    {
        uint _2750 = _2287 + 2u;
        uint _2754 = _2287 + 10u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _844) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _920;
        float _2771 = cbLight._m0[_2750].y + _921;
        float _2772 = cbLight._m0[_2750].z + _922;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2750].xyz));
        float _4698 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2784 = dot(vec3(_841, _842, _843), vec3(_2777, _2778, _2779));
        float _4709 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4720 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2805 = (exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2806 = 1.0 - _2769;
        float _2816 = (0.5 / (((_2563 * ((_2783 * _2806) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2806) + _2769) * _2783))) * _2783;
        float _4731 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2744 = (((_2805 * cbLight._m0[_2754].x) * _2818) * _2819) + _2686;
        _2746 = (((_2805 * cbLight._m0[_2754].y) * _2818) * _2819) + _2687;
        _2748 = (((_2805 * cbLight._m0[_2754].z) * _2818) * _2819) + _2688;
    }
    float _2850;
    float _2852;
    float _2854;
    if (_2472)
    {
        _2850 = _2744;
        _2852 = _2746;
        _2854 = _2748;
    }
    else
    {
        uint _2861 = _2287 + 3u;
        uint _2865 = _2287 + 11u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _844) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _920;
        float _2882 = cbLight._m0[_2861].y + _921;
        float _2883 = cbLight._m0[_2861].z + _922;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2861].xyz));
        float _4747 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2895 = dot(vec3(_841, _842, _843), vec3(_2888, _2889, _2890));
        float _4758 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4769 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2916 = (exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2917 = 1.0 - _2880;
        float _2927 = (0.5 / (((_2563 * ((_2894 * _2917) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2917) + _2880) * _2894))) * _2894;
        float _4780 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2929 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2930 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2850 = (((_2916 * cbLight._m0[_2865].x) * _2929) * _2930) + _2744;
        _2852 = (((_2916 * cbLight._m0[_2865].y) * _2929) * _2930) + _2746;
        _2854 = (((_2916 * cbLight._m0[_2865].z) * _2929) * _2930) + _2748;
    }
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_2285.y == 0u)
    {
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.x;
        uint _2963 = uint((float(_2951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2952))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2952)));
        float _2973 = (log2(_2063 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2974 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        uint _2977 = uint(isnan(14.0) ? _2974 : (isnan(_2974) ? 14.0 : min(_2974, 14.0)));
        uvec4 _2982 = texelFetch(g_lightClusterGridBuffer, int(((_2977 << 2u) + (_2963 << 6u)) >> 2u));
        uint _2983 = _2982.x;
        uint _2984 = _2951.z;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((((1u << ((_2984 >> 4u) & 15u)) + 4294967295u) & _2983) == 0u) || ((_2984 & 240u) == 0u))
        {
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
        }
        else
        {
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            uint _3213 = 0u;
            uint _3222;
            bool _3223;
            for (;;)
            {
                _3222 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                _3223 = _3222 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3223)
                {
                    frontier_phi_66_pred = _3212;
                    frontier_phi_66_pred_1 = _3211;
                    frontier_phi_66_pred_2 = _3210;
                    frontier_phi_66_pred_3 = _3209;
                    frontier_phi_66_pred_4 = _3208;
                    frontier_phi_66_pred_5 = _3207;
                }
                else
                {
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    uint _3337;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3222;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3341 = uint(findLSB(_3337)) + (_3213 << 5u);
                        uint _3338 = (_3337 + 4294967295u) & _3337;
                        uint _3343 = _3341 * 48u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3363 = (_3341 * 48u) + 4u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 3u)).x));
                        uint _3382 = (_3341 * 48u) + 8u;
                        vec3 _3393 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x));
                        float _3397 = _3357.x - _2061;
                        float _3398 = _3357.y - _2062;
                        float _3399 = _3357.z - _2063;
                        float _3400 = dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399));
                        float _3403 = inversesqrt(_3400);
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3407 = dot(vec3(_947, _950, _953), vec3(_3404, _3405, _3406));
                        float _3412 = 1.0 - (_3400 * _3357.w);
                        float _4806 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3414 = sqrt(_3400) * _3376.w;
                        float _3417 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3407) + _3418;
                        float _3424 = _3414 * _3414;
                        float _3428 = ((isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))) * _3413) / ((_3424 * 0.699999988079071044921875) + 1.0);
                        float _3432 = (-0.0) - _2061;
                        float _3433 = (-0.0) - _2062;
                        float _3434 = (-0.0) - _2063;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3448 = exp2(log2(1.0 / ((_3424 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _1007;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3461 = _3441 + _3406;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_947, _950, _953), vec3(_3439, _3440, _3441));
                        float _4822 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3473 = dot(vec3(_947, _950, _953), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4833 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3417 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3407) + _3482;
                        float _4844 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4855 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3480 * _3480) * ((_3424 * 2.1991131305694580078125) + 3.141590118408203125))) * _3413;
                        _3266 = (_3428 * _3376.x) + _3334;
                        _3267 = (_3428 * _3376.y) + _3335;
                        _3268 = (_3428 * _3376.z) + _3336;
                        _3263 = (_3508 * _3393.x) + _3331;
                        _3264 = (_3508 * _3393.y) + _3332;
                        _3265 = (_3508 * _3393.z) + _3333;
                        if (_3338 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3338;
                        }
                    }
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3267;
                    frontier_phi_66_pred_2 = _3266;
                    frontier_phi_66_pred_3 = _3265;
                    frontier_phi_66_pred_4 = _3264;
                    frontier_phi_66_pred_5 = _3263;
                }
                _3074 = frontier_phi_66_pred;
                _3072 = frontier_phi_66_pred_1;
                _3070 = frontier_phi_66_pred_2;
                _3068 = frontier_phi_66_pred_3;
                _3066 = frontier_phi_66_pred_4;
                _3064 = frontier_phi_66_pred_5;
                uint _3214 = _3213 + 1u;
                if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3207 = _3064;
                    _3208 = _3066;
                    _3209 = _3068;
                    _3210 = _3070;
                    _3211 = _3072;
                    _3212 = _3074;
                    _3213 = _3214;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
        }
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.z;
        uint _3080 = (_3078 >> 8u) & 15u;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((4294967295u << _3080) & _2983) == 0u)
        {
            _3175 = _3063;
            _3177 = _3065;
            _3179 = _3067;
            _3181 = _3069;
            _3183 = _3071;
            _3185 = _3073;
        }
        else
        {
            float _3200 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
            float _3201 = _3200 * _2061;
            float _3202 = _3200 * _2062;
            float _3203 = _3200 * _2063;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3080 < ((_3078 >> 12u) & 15u))
            {
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3314 = _3063;
                float _3315 = _3065;
                float _3316 = _3067;
                float _3317 = _3069;
                float _3318 = _3071;
                float _3319 = _3073;
                uint _3320 = _3080;
                uint _3329;
                bool _3330;
                for (;;)
                {
                    _3329 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                    _3330 = _3329 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3330)
                    {
                        frontier_phi_72_pred = _3319;
                        frontier_phi_72_pred_1 = _3318;
                        frontier_phi_72_pred_2 = _3317;
                        frontier_phi_72_pred_3 = _3316;
                        frontier_phi_72_pred_4 = _3315;
                        frontier_phi_72_pred_5 = _3314;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        uint _3532 = _3329;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3616;
                        float _3662;
                        bool _3663;
                        for (;;)
                        {
                            uint _3543 = ((_3320 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3543 * 40u) + 20u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3543 * 40u) + 24u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3637 = (_3543 * 40u) + 28u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3662 = fma(_2063, _3650.z, fma(_2062, _3650.y, _3650.x * _2061)) + _3650.w;
                            _3663 = !((fma(_2063, _3631.z, fma(_2062, _3631.y, _3631.x * _2061)) + _3631.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3663)
                            {
                                float _3690 = _3558.x - _2061;
                                float _3691 = _3558.y - _2062;
                                float _3692 = _3558.z - _2063;
                                float _3693 = dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692));
                                float _3696 = inversesqrt(_3693);
                                float _3697 = _3696 * _3690;
                                float _3698 = _3696 * _3691;
                                float _3699 = _3696 * _3692;
                                float _3703 = 1.0 - (_3693 / (_3559 * _3559));
                                float _4866 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3708 = sqrt(_3693) * _3574.w;
                                float _3710 = 1.39999997615814208984375 / (_3708 + 1.39999997615814208984375);
                                float _3711 = _3710 * _3710;
                                float _3714 = ((1.0 - _3711) * dot(vec3(_3697, _3698, _3699), vec3(_947, _950, _953))) + _3711;
                                float _3717 = _3708 * _3708;
                                float _3721 = (fma(_2063, _3601.z, fma(_2062, _3601.y, _3601.x * _2061)) + _3601.w) / _3662;
                                float _3722 = (fma(_2063, _3616.z, fma(_2062, _3616.y, _3616.x * _2061)) + _3616.w) / _3662;
                                float _3726 = 1.0 - dot(vec2(_3721, _3722), vec2(_3721, _3722));
                                float _4882 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3728 = _3727 * (((isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0))) * _3704) / ((_3717 * 0.699999988079071044921875) + 1.0));
                                float _3740 = exp2(log2(1.0 / ((_3717 * 3.5) + 5.0)) * 0.25);
                                float _3741 = 1.0 - _1007;
                                float _3748 = sqrt(1.0 - ((1.0 - (_3741 * _3741)) * (1.0 - (_3740 * _3740))));
                                float _3749 = _3748 * _3748;
                                float _3750 = _3749 * _3749;
                                float _3751 = _3697 - _3201;
                                float _3752 = _3698 - _3202;
                                float _3753 = _3699 - _3203;
                                float _3757 = inversesqrt(dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753)));
                                float _3761 = dot(vec3(_947, _950, _953), vec3((-0.0) - _3201, (-0.0) - _3202, (-0.0) - _3203));
                                float _4893 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3765 = dot(vec3(_947, _950, _953), vec3(_3757 * _3751, _3757 * _3752, _3757 * _3753));
                                float _4904 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3772 = ((_3768 * _3768) * (_3750 + (-1.0))) + 1.0;
                                float _3773 = _3710 * _3749;
                                float _3774 = _3773 * _3773;
                                float _3780 = ((1.0 - _3774) * dot(vec3(_947, _950, _953), vec3(_3697, _3698, _3699))) + _3774;
                                float _4915 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3782 = 1.0 - _3749;
                                float _3792 = (0.5 / (((_3781 * ((_3764 * _3782) + _3749)) + 9.9999999392252902907785028219223e-09) + (((_3781 * _3782) + _3749) * _3764))) * _3781;
                                float _4926 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3802 = (_3727 * _3704) * (((_3750 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3772 * _3772) * ((_3717 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3728 * _3574.y;
                                frontier_phi_78_pred_1 = _3728 * _3574.x;
                                frontier_phi_78_pred_2 = _3802 * _3586.z;
                                frontier_phi_78_pred_3 = _3802 * _3586.y;
                                frontier_phi_78_pred_4 = _3802 * _3586.x;
                                frontier_phi_78_pred_5 = _3728 * _3574.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3810 = frontier_phi_78_pred;
                            _3809 = frontier_phi_78_pred_1;
                            _3808 = frontier_phi_78_pred_2;
                            _3807 = frontier_phi_78_pred_3;
                            _3806 = frontier_phi_78_pred_4;
                            _3811 = frontier_phi_78_pred_5;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3518;
                        frontier_phi_72_pred_1 = _3517;
                        frontier_phi_72_pred_2 = _3516;
                        frontier_phi_72_pred_3 = _3515;
                        frontier_phi_72_pred_4 = _3514;
                        frontier_phi_72_pred_5 = _3513;
                    }
                    _3186 = frontier_phi_72_pred;
                    _3184 = frontier_phi_72_pred_1;
                    _3182 = frontier_phi_72_pred_2;
                    _3180 = frontier_phi_72_pred_3;
                    _3178 = frontier_phi_72_pred_4;
                    _3176 = frontier_phi_72_pred_5;
                    uint _3321 = _3320 + 1u;
                    if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3314 = _3176;
                        _3315 = _3178;
                        _3316 = _3180;
                        _3317 = _3182;
                        _3318 = _3184;
                        _3319 = _3186;
                        _3320 = _3321;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3186;
                frontier_phi_60_61_ladder_1 = _3184;
                frontier_phi_60_61_ladder_2 = _3180;
                frontier_phi_60_61_ladder_3 = _3178;
                frontier_phi_60_61_ladder_4 = _3176;
                frontier_phi_60_61_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_60_61_ladder = _3073;
                frontier_phi_60_61_ladder_1 = _3071;
                frontier_phi_60_61_ladder_2 = _3067;
                frontier_phi_60_61_ladder_3 = _3065;
                frontier_phi_60_61_ladder_4 = _3063;
                frontier_phi_60_61_ladder_5 = _3069;
            }
            _3175 = frontier_phi_60_61_ladder_4;
            _3177 = frontier_phi_60_61_ladder_3;
            _3179 = frontier_phi_60_61_ladder_2;
            _3181 = frontier_phi_60_61_ladder_5;
            _3183 = frontier_phi_60_61_ladder_1;
            _3185 = frontier_phi_60_61_ladder;
        }
        float _3190 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
        _2996 = (_3190 * _3181) + _2527;
        _2998 = (_3190 * _3183) + _2529;
        _3000 = (_3190 * _3185) + _2531;
        _3002 = ((_3175 * 0.039999999105930328369140625) * _3190) + _2850;
        _3004 = ((_3177 * 0.039999999105930328369140625) * _3190) + _2852;
        _3006 = ((_3179 * 0.039999999105930328369140625) * _3190) + _2854;
    }
    else
    {
        _2996 = _2527;
        _2998 = _2529;
        _3000 = _2531;
        _3002 = _2850;
        _3004 = _2852;
        _3006 = _2854;
    }
    float _4942 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4953 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4964 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    uint _3026 = _253 + 6u;
    float _3034 = _928 / cbSceneParam._m0[86u].x;
    float _3035 = _929 / cbSceneParam._m0[86u].y;
    vec4 _3049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, (log2((isnan(cbSceneParam._m0[77u].w) ? _862 : (isnan(_862) ? cbSceneParam._m0[77u].w : min(_862, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3051 = _3049.x;
    float _3052 = _3049.y;
    float _3053 = _3049.z;
    float _3054 = _3049.w;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_862 > cbSceneParam._m0[78u].w)
    {
        float _3088 = isnan(_862) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _862 : min(cbSceneParam._m0[80u].w, _862));
        float _3089 = _3088 / _862;
        float _3100 = _3089 * _913;
        float _3101 = _914 * _3089;
        float _3102 = (-0.0) - _3101;
        float _3103 = _3089 * _915;
        float _3105 = (cbSceneParam._m0[77u].w * _3102) / _3088;
        float _3106 = _3105 + cbSceneParam._m0[79u].w;
        float _3107 = cbSceneParam._m0[79u].w - _3101;
        float _3113 = sqrt(((_3100 * _3100) + (_3101 * _3101)) + (_3103 * _3103));
        float _3116 = (1.0 - (cbSceneParam._m0[77u].w / _3088)) * _3113;
        float _3121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3102 - _3105) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3106 > 0.0) ? exp2(_3121 * _3106) : (2.0 - exp2(_3123 * _3106))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3116;
        }
        else
        {
            float _3236 = 1.0 / cbSceneParam._m0[80u].x;
            float _3237 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : max(_3106, _3107));
            float _3238 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : min(_3106, _3107));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            _3276 = ((abs(_3113 / _3102) * cbSceneParam._m0[80u].y) * ((((_3247 - _3248) * 2.0) - ((exp2(_3121 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0)))) - exp2(_3121 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))))) * _3236)) - ((exp2(_3123 * _3247) - exp2(_3123 * _3248)) * _3236))) + (_3116 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3054);
        _3125 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3051;
        _3127 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3052;
        _3129 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3053;
        _3131 = _3287 * _3054;
    }
    else
    {
        _3125 = _3051;
        _3127 = _3052;
        _3129 = _3053;
        _3131 = _3054;
    }
    float _3143 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3144 = _3143 == 3.0;
    float _3145 = log2(_3131);
    float _3152 = exp2(_3145 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2996 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _991))) + ((_3002 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3153 = exp2(_3145 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2998 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _991))) + ((_3004 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3154 = exp2(_3145 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_3000 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _991))) + ((_3006 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3163 = (_3143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3163 * (_3144 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.y = _3163 * (_3144 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.z = _3163 * (_3144 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.w = cbInstanceData._m0[_3026].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3026].w;
}


