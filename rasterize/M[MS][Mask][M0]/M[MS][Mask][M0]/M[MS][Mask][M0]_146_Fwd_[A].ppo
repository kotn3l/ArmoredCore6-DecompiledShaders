#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1527;
float _3882;
float _3883;
float _3884;
float _3885;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3894 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[24u].z) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3905 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _560 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _347.z) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3916 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _568 = (_561 * ((_519.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _569 = (_561 * ((_519.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _570 = (_561 * ((_519.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _419) + _627;
    float _637 = ((_608.y - _628) * _419) + _628;
    float _638 = ((_608.z - _629) * _419) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_650.x - _636) * _492) + _636;
    float _662 = ((_650.y - _637) * _492) + _637;
    float _663 = ((_650.z - _638) * _492) + _638;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _688 = ((_675.z - _663) * _561) + _663;
    float _691 = ((((_675.x - _661) * _561) + _661) * 2.0) + (-1.0);
    float _693 = ((((_675.y - _662) * _561) + _662) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _3927 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _725 = (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _691;
    float _726 = (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    float _729 = fma(_699, _249, fma(_726, _256, _725 * _242));
    float _732 = fma(_699, _250, fma(_726, _257, _725 * _243));
    float _735 = fma(_699, _251, fma(_726, _258, _725 * _244));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _768 = _766.x;
    float _769 = 1.0 - _768;
    float _775 = (cbMtdParam._m0[19u].x + dot(vec4(_739 * _729, _739 * _732, _739 * _735, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_768 - _769) * cbMtdParam._m0[24u].w) + _769) * cbMtdParam._m0[21u].z);
    float _3938 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _778 = (-0.0) - cbMtdParam._m0[24u].x;
    float _780 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
    float _788 = _776 - ((_776 * TEXCOORD_8.x) * _781);
    float _789 = _776 - ((_776 * TEXCOORD_8.y) * _781);
    float _790 = _776 - ((_776 * TEXCOORD_8.z) * _781);
    float _797 = (_788 * ((_588.x * cbMtdParam._m0[18u].x) - _568)) + _568;
    float _798 = (_789 * ((_588.y * cbMtdParam._m0[18u].y) - _569)) + _569;
    float _799 = (_790 * ((_588.z * cbMtdParam._m0[18u].z) - _570)) + _570;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _842 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_813 - _814) * cbMtdParam._m0[24u].y) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3959 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _851 = ((((cbMtdParam._m0[10u].x - _797) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _843) + _797;
    float _852 = ((((cbMtdParam._m0[10u].y - _798) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _843) + _798;
    float _853 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _799)) * _843) + _799;
    float _857 = (cbMtdParam._m0[19u].w * (_713.z - _688)) + _688;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _878 = (_871.x * 2.0) + (-1.0);
    float _879 = (_871.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _3970 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _888 = ((_871.z - _857) * _788) + _857;
    float _891 = ((cbMtdParam._m0[23u].y - _888) * _843) + _888;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _916 = (_910.x * 2.0) + (-1.0);
    float _917 = (_910.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _3981 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _933 = ((sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) - _699) * _790) + _699;
    float _936 = (((_878 - _725) * _788) + _725) + (cbMtdParam._m0[21u].x * _725);
    float _937 = (((_879 - _726) * _789) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _948 = (((_916 - _936) + (_936 * cbMtdParam._m0[22u].z)) * _843) + _936;
    float _949 = (((_917 - _937) + (_937 * cbMtdParam._m0[22u].z)) * _843) + _937;
    float _950 = (_843 * (sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _933)) + _933;
    float _952 = cbMtdParam._m0[22u].x + _713.w;
    float _955 = fma(_950, _249, fma(_949, _256, _948 * _242));
    float _958 = fma(_950, _250, fma(_949, _257, _948 * _243));
    float _961 = fma(_950, _251, fma(_949, _258, _948 * _244));
    float _965 = inversesqrt(dot(vec3(_955, _958, _961), vec3(_955, _958, _961)));
    float _966 = _965 * _955;
    float _967 = _965 * _958;
    float _968 = _965 * _961;
    float _3992 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _969 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4014 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4025 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4036 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _987 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1038 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1028);
    float _1039 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1028);
    float _1040 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1028);
    float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
    float _1045 = _1038 * _1044;
    float _1046 = _1039 * _1044;
    float _1047 = _1040 * _1044;
    vec4 _1052 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1054 = _1052.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1208 = sqrt(((_1038 * _1038) + (_1039 * _1039)) + (_1040 * _1040));
        float _1214 = (cbMatDynParam._m0[5u].x * _1208) + cbMatDynParam._m0[5u].y;
        float _4047 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1219 = (cbMatDynParam._m0[5u].z * _1208) + cbMatDynParam._m0[5u].w;
        float _4058 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) - _1215)) + _1215) < ((_1054 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1065 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1066 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1084 = fma(_968, cbSceneParam._m0[5u].z, fma(_967, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _966));
    float _1087 = fma(_968, cbSceneParam._m0[6u].z, fma(_967, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _966));
    float _1090 = fma(_968, cbSceneParam._m0[7u].z, fma(_967, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _966));
    uint _1103 = _261 + 9u;
    uint _1104 = _1103 + uint(cbMatDynParam._m0[0u].w);
    float _1110 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1104].x;
    float _1111 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1104].y;
    float _1112 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1104].z;
    float _4069 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    vec4 _1124 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1065, cbSceneParam._m0[86u].y * _1066));
    float _1128 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _1124.x;
    float _1129 = dot(vec3(_966, _967, _968), vec3(_1045, _1046, _1047));
    float _1132 = _1129 * 2.0;
    float _1136 = (_1132 * _966) - _1045;
    float _1137 = (_1132 * _967) - _1046;
    float _1138 = (_1132 * _968) - _1047;
    float _1142 = abs(dot(vec3(_1045, _1046, _1047), vec3(_966, _967, _968)));
    float _4102 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1144 = sqrt(_969);
    float _1157 = exp2((_1144 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1144 * 3.0));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1526;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1251 = fma(_1197, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189));
        float _1255 = fma(_1197, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189));
        float _1259 = fma(_1197, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189));
        float _1284 = _1189 + _966;
        float _1285 = _1193 + _967;
        float _1286 = _1197 + _968;
        float _1296 = fma(_1286, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1284)) - _1251;
        float _1297 = fma(_1286, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1284)) - _1255;
        float _1298 = fma(_1286, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1284)) - _1259;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1251 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1255 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[34u].z) + ((((((_1259 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1354 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1320.x + (-0.5));
        float _1356 = _1354 * (_1320.y + (-0.5));
        float _1357 = _1354 * (_1320.z + (-0.5));
        float _1364 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1327.x + (-0.5));
        float _1366 = _1364 * (_1327.y + (-0.5));
        float _1367 = _1364 * (_1327.z + (-0.5));
        float _1374 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1334.x + (-0.5));
        float _1376 = _1374 * (_1334.y + (-0.5));
        float _1377 = _1374 * (_1334.z + (-0.5));
        float _1384 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1341.x + (-0.5));
        float _1386 = _1384 * (_1341.y + (-0.5));
        float _1387 = _1384 * (_1341.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1408 = (dot(vec3(_966, _967, _968), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1418 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4150 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1420 + 1.0))) + _1425) * _1388;
        float _1435 = _1356 * 0.5;
        float _1436 = _1366 * 0.5;
        float _1437 = _1376 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_966, _967, _968), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4183 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1462 + 1.0))) + _1467) * _1389;
        float _1477 = _1357 * 0.5;
        float _1478 = _1367 * 0.5;
        float _1479 = _1377 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_966, _967, _968), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4216 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1504 + 1.0))) + _1509) * _1390;
        _1526 = _1357;
        _1528 = _1356;
        _1529 = _1355;
        _1530 = _1367;
        _1531 = _1366;
        _1532 = _1365;
        _1533 = _1377;
        _1534 = _1376;
        _1535 = _1375;
        _1536 = _1390;
        _1537 = _1389;
        _1538 = _1388;
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1527;
        _1528 = _1527;
        _1529 = _1527;
        _1530 = _1527;
        _1531 = _1527;
        _1532 = _1527;
        _1533 = _1527;
        _1534 = _1527;
        _1535 = _1527;
        _1536 = _1527;
        _1537 = _1527;
        _1538 = _1527;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1197, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189));
        float _1571 = fma(_1197, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189));
        float _1575 = fma(_1197, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189));
        float _1598 = _1189 + _966;
        float _1599 = _1193 + _967;
        float _1600 = _1197 + _968;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_966, _967, _968), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4279 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_966, _967, _968), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4312 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_966, _967, _968), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4345 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1527;
        _1837 = _1527;
        _1838 = _1527;
        _1839 = _1527;
        _1840 = _1527;
        _1841 = _1527;
        _1842 = _1527;
        _1843 = _1527;
        _1844 = _1527;
        _1845 = _1527;
        _1846 = _1527;
        _1847 = _1527;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1539)) + _1539;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1540)) + _1540;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1136 * 0.5;
    float _1905 = _1137 * 0.5;
    float _1906 = _1138 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1526, _1530, _1533, _1536));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _969);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2020 = fma(_1197, cbModelParam._m0[13u].z, fma(_1193, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1189)) + cbModelParam._m0[13u].w;
        float _2024 = fma(_1197, cbModelParam._m0[14u].z, fma(_1193, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1189)) + cbModelParam._m0[14u].w;
        float _2028 = fma(_1197, cbModelParam._m0[15u].z, fma(_1193, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1189)) + cbModelParam._m0[15u].w;
        float _2031 = fma(_1138, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136));
        float _2034 = fma(_1138, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136));
        float _2037 = fma(_1138, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136));
        float _2065;
        if (_2031 > 0.0)
        {
            _2065 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2065 = frontier_phi_17_15_ladder;
        }
        float _2265;
        if (_2034 > 0.0)
        {
            _2265 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2265 = frontier_phi_26_22_ladder;
        }
        float _2508;
        if (_2037 > 0.0)
        {
            _2508 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2508 = frontier_phi_38_33_ladder;
        }
        float _2510 = isnan(_2265) ? _2065 : (isnan(_2065) ? _2265 : min(_2065, _2265));
        float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
        float _2515 = (_2511 * _2031) + _2020;
        float _2516 = (_2511 * _2034) + _2024;
        float _2517 = (_2511 * _2037) + _2028;
        float _2518 = _2511 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2518;
        float _2522 = _2518 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 > _2522) || ((_2516 < _2520) || ((_2515 < _2520) || (_2515 > _2522))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2517, cbModelParam._m0[9u].z, fma(_2516, cbModelParam._m0[9u].y, _2515 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2517, cbModelParam._m0[10u].z, fma(_2516, cbModelParam._m0[10u].y, _2515 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2517, cbModelParam._m0[11u].z, fma(_2516, cbModelParam._m0[11u].y, _2515 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_16_38_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2053 = frontier_phi_16_38_ladder_2;
        _2055 = frontier_phi_16_38_ladder_1;
        _2057 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1136, _1137, _1138), _1973);
        _2053 = _2041.x * cbModelParam._m0[1u].y;
        _2055 = _2041.y * cbModelParam._m0[1u].y;
        _2057 = _2041.z * cbModelParam._m0[1u].y;
    }
    float _2061 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _969);
    float _2062 = isnan(_2061) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2061 : min(cbModelParam._m0[25u].w, _2061));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2115 = fma(_1197, cbModelParam._m0[21u].z, fma(_1193, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1189)) + cbModelParam._m0[21u].w;
        float _2119 = fma(_1197, cbModelParam._m0[22u].z, fma(_1193, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1189)) + cbModelParam._m0[22u].w;
        float _2123 = fma(_1197, cbModelParam._m0[23u].z, fma(_1193, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1189)) + cbModelParam._m0[23u].w;
        float _2126 = fma(_1138, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136));
        float _2129 = fma(_1138, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136));
        float _2132 = fma(_1138, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136));
        float _2270;
        if (_2126 > 0.0)
        {
            _2270 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2270 = frontier_phi_28_24_ladder;
        }
        float _2535;
        if (_2129 > 0.0)
        {
            _2535 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2535 = frontier_phi_40_35_ladder;
        }
        float _2740;
        if (_2132 > 0.0)
        {
            _2740 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2740 = frontier_phi_49_46_ladder;
        }
        float _2742 = isnan(_2535) ? _2270 : (isnan(_2270) ? _2535 : min(_2270, _2535));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _2126) + _2115;
        float _2748 = (_2743 * _2129) + _2119;
        float _2749 = (_2743 * _2132) + _2123;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _2062);
            frontier_phi_25_49_ladder = _2948.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2948.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2948.x * cbModelParam._m0[1u].z;
        }
        _2151 = frontier_phi_25_49_ladder_2;
        _2153 = frontier_phi_25_49_ladder_1;
        _2155 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1136, _1137, _1138), _2062);
        _2151 = _2135.x * cbModelParam._m0[1u].z;
        _2153 = _2135.y * cbModelParam._m0[1u].z;
        _2155 = _2135.z * cbModelParam._m0[1u].z;
    }
    float _2167 = ((((1.0 - _1157) * ((_1144 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1157 * _1144)) * _1128;
    float _2168 = _2167 * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2169 = _2167 * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2170 = _2167 * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2173 = fma(_2170, cbSceneParam._m0[89u].z, fma(_2169, cbSceneParam._m0[89u].y, _2168 * cbSceneParam._m0[89u].x));
    float _2176 = fma(_2170, cbSceneParam._m0[90u].z, fma(_2169, cbSceneParam._m0[90u].y, _2168 * cbSceneParam._m0[90u].x));
    float _2179 = fma(_2170, cbSceneParam._m0[91u].z, fma(_2169, cbSceneParam._m0[91u].y, _2168 * cbSceneParam._m0[91u].x));
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1128 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2224 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2228 = _2191 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_966, _967, _968));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_966, _967, _968));
    float _4481 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4492 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2208].x * _2214) * _2249) + ((cbLight._m0[_2218].x * _2224) * _2247);
    float _2257 = ((_2214 * cbLight._m0[_2208].y) * _2249) + ((_2224 * cbLight._m0[_2218].y) * _2247);
    float _2258 = ((_2214 * cbLight._m0[_2208].z) * _2249) + ((_2224 * cbLight._m0[_2218].z) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2264)
    {
        _2275 = _2256;
        _2277 = _2257;
        _2279 = _2258;
    }
    else
    {
        uint _2283 = _2191 + 6u;
        float _2299 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4503 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2302 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2275 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2256;
        _2277 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2257;
        _2279 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2258;
    }
    bool _2282 = _2262.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2282)
    {
        _2320 = _2275;
        _2322 = _2277;
        _2324 = _2279;
    }
    else
    {
        uint _2479 = _2191 + 7u;
        float _2495 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4519 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2498 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2320 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2275;
        _2322 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2277;
        _2324 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2279;
    }
    uint _2327 = _2191 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _969) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2191].x + _1045;
    float _2343 = cbLight._m0[_2191].y + _1046;
    float _2344 = cbLight._m0[_2191].z + _1047;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2191].xyz));
    float _4535 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _2356 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2357 = dot(vec3(_966, _967, _968), vec3(_2349, _2350, _2351));
    float _4557 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2349, _2350, _2351));
    float _4568 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2341;
    float _2392 = (0.5 / (((_2356 * ((_2355 * _2381) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2381) + _2341) * _2355))) * _2355;
    float _4579 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2405 = _2191 + 9u;
    float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _969) * 0.949999988079071044921875);
    float _2417 = _2416 * _2416;
    float _2418 = cbLight._m0[_2228].x + _1045;
    float _2419 = cbLight._m0[_2228].y + _1046;
    float _2420 = cbLight._m0[_2228].z + _1047;
    float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
    float _2425 = _2424 * _2418;
    float _2426 = _2424 * _2419;
    float _2427 = _2424 * _2420;
    float _2428 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2228].xyz));
    float _4590 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2432 = dot(vec3(_966, _967, _968), vec3(_2425, _2426, _2427));
    float _4601 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2436 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2425, _2426, _2427));
    float _4612 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2440 = _2417 * _2417;
    float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
    float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2454 = 1.0 - _2417;
    float _2464 = (0.5 / (((_2356 * ((_2431 * _2454) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2454) + _2417) * _2431))) * _2431;
    float _4623 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
    float _2476 = (((_2453 * cbLight._m0[_2405].x) * _2466) * _2214) + (((_2380 * cbLight._m0[_2327].x) * _2394) * _2224);
    float _2477 = (((_2453 * cbLight._m0[_2405].y) * _2466) * _2214) + (((_2380 * cbLight._m0[_2327].y) * _2394) * _2224);
    float _2478 = (((_2453 * cbLight._m0[_2405].z) * _2466) * _2214) + (((_2380 * cbLight._m0[_2327].z) * _2394) * _2224);
    float _2540;
    float _2542;
    float _2544;
    if (_2264)
    {
        _2540 = _2476;
        _2542 = _2477;
        _2544 = _2478;
    }
    else
    {
        uint _2546 = _2191 + 2u;
        uint _2550 = _2191 + 10u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _969) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _1045;
        float _2567 = cbLight._m0[_2546].y + _1046;
        float _2568 = cbLight._m0[_2546].z + _1047;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2546].xyz));
        float _4634 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2580 = dot(vec3(_966, _967, _968), vec3(_2573, _2574, _2575));
        float _4645 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4656 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2602 = 1.0 - _2565;
        float _2612 = (0.5 / (((_2356 * ((_2579 * _2602) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2602) + _2565) * _2579))) * _2579;
        float _4667 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2540 = (((_2601 * cbLight._m0[_2550].x) * _2614) * _2615) + _2476;
        _2542 = (((_2601 * cbLight._m0[_2550].y) * _2614) * _2615) + _2477;
        _2544 = (((_2601 * cbLight._m0[_2550].z) * _2614) * _2615) + _2478;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2282)
    {
        _2650 = _2540;
        _2652 = _2542;
        _2654 = _2544;
    }
    else
    {
        uint _2661 = _2191 + 3u;
        uint _2665 = _2191 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _969) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _1045;
        float _2682 = cbLight._m0[_2661].y + _1046;
        float _2683 = cbLight._m0[_2661].z + _1047;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2661].xyz));
        float _4683 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2695 = dot(vec3(_966, _967, _968), vec3(_2688, _2689, _2690));
        float _4694 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4705 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2716 = (exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2717 = 1.0 - _2680;
        float _2727 = (0.5 / (((_2356 * ((_2694 * _2717) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2717) + _2680) * _2694))) * _2694;
        float _4716 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2650 = (((_2716 * cbLight._m0[_2665].x) * _2729) * _2730) + _2540;
        _2652 = (((_2716 * cbLight._m0[_2665].y) * _2729) * _2730) + _2542;
        _2654 = (((_2716 * cbLight._m0[_2665].z) * _2729) * _2730) + _2544;
    }
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_2189.y == 0u)
    {
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2805;
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2805;
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2805;
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.x;
        uint _2832 = uint((float(_2820.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1066) / _2821))) + floor(float(uint(cbSceneParam._m0[85u].x * _1065) / _2821)));
        float _2842 = (log2(_2808 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2843 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        uint _2846 = uint(isnan(14.0) ? _2843 : (isnan(_2843) ? 14.0 : min(_2843, 14.0)));
        uvec4 _2851 = texelFetch(g_lightClusterGridBuffer, int(((_2846 << 2u) + (_2832 << 6u)) >> 2u));
        uint _2852 = _2851.x;
        uint _2853 = _2820.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2853 >> 4u) & 15u)) + 4294967295u) & _2852) == 0u) || ((_2853 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3121)
                {
                    frontier_phi_66_pred = _3105;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                else
                {
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    uint _3256;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3120;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    for (;;)
                    {
                        uint _3260 = uint(findLSB(_3256)) + (_3111 << 5u);
                        uint _3257 = (_3256 + 4294967295u) & _3256;
                        uint _3262 = _3260 * 48u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3282 = (_3260 * 48u) + 4u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3301 = (_3260 * 48u) + 8u;
                        vec3 _3312 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x));
                        float _3316 = _3276.x - _2806;
                        float _3317 = _3276.y - _2807;
                        float _3318 = _3276.z - _2808;
                        float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                        float _3322 = inversesqrt(_3319);
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3326 = dot(vec3(_1084, _1087, _1090), vec3(_3323, _3324, _3325));
                        float _3331 = 1.0 - (_3319 * _3276.w);
                        float _4742 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3333 = sqrt(_3319) * _3295.w;
                        float _3336 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3326) + _3337;
                        float _3343 = _3333 * _3333;
                        float _3347 = ((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3332) / ((_3343 * 0.699999988079071044921875) + 1.0);
                        float _3351 = (-0.0) - _2806;
                        float _3352 = (-0.0) - _2807;
                        float _3353 = (-0.0) - _2808;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3368 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _1144;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_1084, _1087, _1090), vec3(_3358, _3359, _3360));
                        float _4758 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3393 = dot(vec3(_1084, _1087, _1090), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4769 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3336 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3326) + _3402;
                        float _4780 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4791 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3400 * _3400) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125))) * _3332;
                        _3180 = (_3347 * _3295.x) + _3253;
                        _3181 = (_3347 * _3295.y) + _3254;
                        _3182 = (_3347 * _3295.z) + _3255;
                        _3177 = (_3428 * _3312.x) + _3250;
                        _3178 = (_3428 * _3312.y) + _3251;
                        _3179 = (_3428 * _3312.z) + _3252;
                        if (_3257 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3257;
                        }
                    }
                    frontier_phi_66_pred = _3177;
                    frontier_phi_66_pred_1 = _3182;
                    frontier_phi_66_pred_2 = _3181;
                    frontier_phi_66_pred_3 = _3180;
                    frontier_phi_66_pred_4 = _3179;
                    frontier_phi_66_pred_5 = _3178;
                }
                _2954 = frontier_phi_66_pred;
                _2964 = frontier_phi_66_pred_1;
                _2962 = frontier_phi_66_pred_2;
                _2960 = frontier_phi_66_pred_3;
                _2958 = frontier_phi_66_pred_4;
                _2956 = frontier_phi_66_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2954;
                    _3106 = _2956;
                    _3107 = _2958;
                    _3108 = _2960;
                    _3109 = _2962;
                    _3110 = _2964;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2970) & _2852) == 0u)
        {
            _3073 = _2953;
            _3075 = _2955;
            _3077 = _2957;
            _3079 = _2959;
            _3081 = _2961;
            _3083 = _2963;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
            float _3099 = _3098 * _2806;
            float _3100 = _3098 * _2807;
            float _3101 = _3098 * _2808;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3233 = _2953;
                float _3234 = _2955;
                float _3235 = _2957;
                float _3236 = _2959;
                float _3237 = _2961;
                float _3238 = _2963;
                uint _3239 = _2970;
                uint _3248;
                bool _3249;
                for (;;)
                {
                    _3248 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                    _3249 = _3248 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3249)
                    {
                        frontier_phi_77_pred = _3238;
                        frontier_phi_77_pred_1 = _3237;
                        frontier_phi_77_pred_2 = _3236;
                        frontier_phi_77_pred_3 = _3235;
                        frontier_phi_77_pred_4 = _3234;
                        frontier_phi_77_pred_5 = _3233;
                    }
                    else
                    {
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        uint _3461 = _3248;
                        uint _3462;
                        vec4 _3487;
                        float _3488;
                        vec4 _3503;
                        vec3 _3515;
                        vec4 _3530;
                        vec4 _3545;
                        float _3591;
                        bool _3592;
                        for (;;)
                        {
                            uint _3472 = ((_3239 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3461));
                            _3462 = (_3461 + 4294967295u) & _3461;
                            uint _3474 = _3472 * 40u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3488 = _3487.w;
                            uint _3490 = (_3472 * 40u) + 4u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3472 * 40u) + 8u;
                            _3515 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x));
                            uint _3517 = (_3472 * 40u) + 16u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3472 * 40u) + 20u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3472 * 40u) + 24u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3566 = (_3472 * 40u) + 28u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3591 = fma(_2808, _3579.z, fma(_2807, _3579.y, _3579.x * _2806)) + _3579.w;
                            _3592 = !((fma(_2808, _3560.z, fma(_2807, _3560.y, _3560.x * _2806)) + _3560.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3592)
                            {
                                float _3619 = _3487.x - _2806;
                                float _3620 = _3487.y - _2807;
                                float _3621 = _3487.z - _2808;
                                float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                                float _3625 = inversesqrt(_3622);
                                float _3626 = _3625 * _3619;
                                float _3627 = _3625 * _3620;
                                float _3628 = _3625 * _3621;
                                float _3632 = 1.0 - (_3622 / (_3488 * _3488));
                                float _4802 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3637 = sqrt(_3622) * _3503.w;
                                float _3639 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                                float _3640 = _3639 * _3639;
                                float _3643 = ((1.0 - _3640) * dot(vec3(_3626, _3627, _3628), vec3(_1084, _1087, _1090))) + _3640;
                                float _3646 = _3637 * _3637;
                                float _3650 = (fma(_2808, _3530.z, fma(_2807, _3530.y, _3530.x * _2806)) + _3530.w) / _3591;
                                float _3651 = (fma(_2808, _3545.z, fma(_2807, _3545.y, _3545.x * _2806)) + _3545.w) / _3591;
                                float _3655 = 1.0 - dot(vec2(_3650, _3651), vec2(_3650, _3651));
                                float _4818 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3657 = _3656 * (((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3633) / ((_3646 * 0.699999988079071044921875) + 1.0));
                                float _3669 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                                float _3670 = 1.0 - _1144;
                                float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                                float _3678 = _3677 * _3677;
                                float _3679 = _3678 * _3678;
                                float _3680 = _3626 - _3099;
                                float _3681 = _3627 - _3100;
                                float _3682 = _3628 - _3101;
                                float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                                float _3690 = dot(vec3(_1084, _1087, _1090), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4829 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3694 = dot(vec3(_1084, _1087, _1090), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                                float _4840 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                                float _3702 = _3639 * _3678;
                                float _3703 = _3702 * _3702;
                                float _3709 = ((1.0 - _3703) * dot(vec3(_1084, _1087, _1090), vec3(_3626, _3627, _3628))) + _3703;
                                float _4851 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3711 = 1.0 - _3678;
                                float _3721 = (0.5 / (((_3710 * ((_3693 * _3711) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3678) * _3693))) * _3710;
                                float _4862 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3731 = (_3656 * _3633) * (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3701 * _3701) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3657 * _3503.y;
                                frontier_phi_83_pred_1 = _3657 * _3503.x;
                                frontier_phi_83_pred_2 = _3731 * _3515.z;
                                frontier_phi_83_pred_3 = _3731 * _3515.y;
                                frontier_phi_83_pred_4 = _3731 * _3515.x;
                                frontier_phi_83_pred_5 = _3657 * _3503.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3739 = frontier_phi_83_pred;
                            _3738 = frontier_phi_83_pred_1;
                            _3737 = frontier_phi_83_pred_2;
                            _3736 = frontier_phi_83_pred_3;
                            _3735 = frontier_phi_83_pred_4;
                            _3740 = frontier_phi_83_pred_5;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            if (_3462 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3462;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3447;
                        frontier_phi_77_pred_1 = _3446;
                        frontier_phi_77_pred_2 = _3445;
                        frontier_phi_77_pred_3 = _3444;
                        frontier_phi_77_pred_4 = _3443;
                        frontier_phi_77_pred_5 = _3442;
                    }
                    _3084 = frontier_phi_77_pred;
                    _3082 = frontier_phi_77_pred_1;
                    _3080 = frontier_phi_77_pred_2;
                    _3078 = frontier_phi_77_pred_3;
                    _3076 = frontier_phi_77_pred_4;
                    _3074 = frontier_phi_77_pred_5;
                    uint _3240 = _3239 + 1u;
                    if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3233 = _3074;
                        _3234 = _3076;
                        _3235 = _3078;
                        _3236 = _3080;
                        _3237 = _3082;
                        _3238 = _3084;
                        _3239 = _3240;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3078;
                frontier_phi_58_59_ladder_1 = _3084;
                frontier_phi_58_59_ladder_2 = _3082;
                frontier_phi_58_59_ladder_3 = _3080;
                frontier_phi_58_59_ladder_4 = _3076;
                frontier_phi_58_59_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_58_59_ladder = _2957;
                frontier_phi_58_59_ladder_1 = _2963;
                frontier_phi_58_59_ladder_2 = _2961;
                frontier_phi_58_59_ladder_3 = _2959;
                frontier_phi_58_59_ladder_4 = _2955;
                frontier_phi_58_59_ladder_5 = _2953;
            }
            _3073 = frontier_phi_58_59_ladder_5;
            _3075 = frontier_phi_58_59_ladder_4;
            _3077 = frontier_phi_58_59_ladder;
            _3079 = frontier_phi_58_59_ladder_3;
            _3081 = frontier_phi_58_59_ladder_2;
            _3083 = frontier_phi_58_59_ladder_1;
        }
        float _3088 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
        _2865 = (_3088 * _3079) + _2320;
        _2867 = (_3088 * _3081) + _2322;
        _2869 = (_3088 * _3083) + _2324;
        _2871 = ((_3073 * 0.039999999105930328369140625) * _3088) + _2650;
        _2873 = ((_3075 * 0.039999999105930328369140625) * _3088) + _2652;
        _2875 = ((_3077 * 0.039999999105930328369140625) * _3088) + _2654;
    }
    else
    {
        _2865 = _2320;
        _2867 = _2322;
        _2869 = _2324;
        _2871 = _2650;
        _2873 = _2652;
        _2875 = _2654;
    }
    float _4878 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _4889 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _4900 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2892 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2865 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1128))) + ((_2871 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2867 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1128))) + ((_2873 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2894 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2869 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1128))) + ((_2875 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    uint _2895 = _261 + 6u;
    float _2903 = _1065 / cbSceneParam._m0[86u].x;
    float _2904 = _1066 / cbSceneParam._m0[86u].y;
    vec4 _2918 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, (log2((isnan(cbSceneParam._m0[77u].w) ? _987 : (isnan(_987) ? cbSceneParam._m0[77u].w : min(_987, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2920 = _2918.x;
    float _2921 = _2918.y;
    float _2922 = _2918.z;
    float _2923 = _2918.w;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_987 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_987) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _987 : min(cbSceneParam._m0[80u].w, _987));
        float _2979 = _2978 / _987;
        float _2990 = _2979 * _1038;
        float _2991 = _1039 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2993 = _2979 * _1040;
        float _2995 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2996 = _2995 + cbSceneParam._m0[79u].w;
        float _2997 = cbSceneParam._m0[79u].w - _2991;
        float _3003 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2993 * _2993));
        float _3006 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3003;
        float _3011 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3013 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3190;
        if (abs((_2992 - _2995) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3190 = ((((_2996 > 0.0) ? exp2(_3011 * _2996) : (2.0 - exp2(_3013 * _2996))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3006;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : max(_2996, _2997));
            float _3136 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : min(_2996, _2997));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3190 = ((abs(_3003 / _2992) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_3011 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_3011 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_3013 * _3145) - exp2(_3013 * _3146)) * _3134))) + (_3006 * cbSceneParam._m0[80u].z);
        }
        vec4 _3192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, 1.0), 0.0);
        float _3201 = exp2((_3190 * (-1.44269502162933349609375)) * (1.0 - _3192.w));
        float _3202 = log2(_3201);
        float _3218 = log2(_2923);
        _3015 = (exp2(_3218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].x)) * _3192.x) / cbSceneParam._m0[78u].x)) + _2920;
        _3017 = (exp2(_3218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].y)) * _3192.y) / cbSceneParam._m0[78u].y)) + _2921;
        _3019 = (exp2(_3218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].z)) * _3192.z) / cbSceneParam._m0[78u].z)) + _2922;
        _3021 = _3201 * _2923;
    }
    else
    {
        _3015 = _2920;
        _3017 = _2921;
        _3019 = _2922;
        _3021 = _2923;
    }
    bool _3228;
    vec4 _3031;
    vec4 _3053;
    float _3055;
    float _3059;
    float _3060;
    float _3061;
    float _3062;
    bool _3072;
    for (;;)
    {
        _3031 = cbMatDynParam._m0[0u];
        float _3033 = roundEven(_3031.y);
        bool _3034 = _3033 == 3.0;
        float _3035 = log2(_3021);
        float _3042 = exp2(_3035 * cbSceneParam._m0[78u].x) * _2892;
        float _3043 = exp2(_3035 * cbSceneParam._m0[78u].y) * _2893;
        float _3044 = exp2(_3035 * cbSceneParam._m0[78u].z) * _2894;
        float _3051 = _1054 + (-0.5);
        _3053 = cbMtdParam._m0[1u];
        _3055 = _3053.y * _3051;
        float _3058 = (_3033 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3059 = _3058 * (_3034 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3015)));
        _3060 = _3058 * (_3034 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3017)));
        _3061 = _3058 * (_3034 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3019)));
        _3062 = _3051 * 0.999000012874603271484375;
        _3072 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3072)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3062) < 0.5)
            {
                _3228 = true;
                break;
            }
        }
        uint _3169 = _1103 + uint(_3031.w);
        if ((cbInstanceData._m0[_3169].w < 1.0) && ((cbInstanceData._m0[_3169].w + _3062) < 0.5))
        {
            _3228 = true;
            break;
        }
        if ((_3055 + 1.0) < _3053.x)
        {
            _3228 = true;
            break;
        }
        _3228 = false;
        break;
    }
    float _3433;
    if (_3228)
    {
        discard_state = true;
        _3433 = 0.0;
    }
    else
    {
        _3433 = cbInstanceData._m0[_2895].w;
    }
    SV_Target.x = _3059;
    SV_Target.y = _3060;
    SV_Target.z = _3061;
    SV_Target.w = _3433;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2895].w;
    discard_exit();
}


