#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1264;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _346.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].z) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3569 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _422 = (_415 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _423 = (_415 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _424 = (_415 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _346.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[24u].z) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3580 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _501 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422);
    float _504 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423);
    float _507 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424);
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _553 = ((_525.x - _544) * _415) + _544;
    float _554 = ((_525.y - _545) * _415) + _545;
    float _555 = ((_525.z - _546) * _415) + _546;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _580 = ((_567.z - _555) * _488) + _555;
    float _583 = ((((_567.x - _553) * _488) + _553) * 2.0) + (-1.0);
    float _585 = ((((_567.y - _554) * _488) + _554) * 2.0) + (-1.0);
    float _586 = dot(vec2(_583, _585), vec2(_583, _585));
    float _3591 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _583;
    float _618 = (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _621 = fma(_591, _224, fma(_618, _231, _617 * _217));
    float _624 = fma(_591, _225, fma(_618, _232, _617 * _218));
    float _627 = fma(_591, _226, fma(_618, _233, _617 * _219));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _667 = (cbMtdParam._m0[19u].x + dot(vec4(_631 * _621, _631 * _624, _631 * _627, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_660 - _661) * cbMtdParam._m0[24u].w) + _661) * cbMtdParam._m0[21u].z);
    float _3602 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _675 = (_668 * (cbMtdParam._m0[17u].x - _501)) + _501;
    float _676 = (_668 * (cbMtdParam._m0[17u].y - _504)) + _504;
    float _677 = (_668 * (cbMtdParam._m0[17u].z - _507)) + _507;
    float _681 = (cbMtdParam._m0[19u].w * (_605.z - _580)) + _580;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3613 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = ((_694.z - _681) * _668) + _681;
    float _721 = ((sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) - _591) * _668) + _591;
    float _724 = (((_701 - _617) * _668) + _617) + (cbMtdParam._m0[21u].x * _617);
    float _725 = (((_702 - _618) * _668) + _618) + (cbMtdParam._m0[21u].x * _618);
    float _729 = cbMtdParam._m0[22u].x + _605.w;
    float _732 = fma(_721, _224, fma(_725, _231, _724 * _217));
    float _735 = fma(_721, _225, fma(_725, _232, _724 * _218));
    float _738 = fma(_721, _226, fma(_725, _233, _724 * _219));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _3624 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _746 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3646 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3657 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3668 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _764 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _815 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _805);
    float _816 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _805);
    float _817 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _805);
    float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
    float _822 = _815 * _821;
    float _823 = _816 * _821;
    float _824 = _817 * _821;
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _849 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _852 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _855 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _869 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_869].z;
    float _3679 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _830, cbSceneParam._m0[86u].y * _831));
    float _893 = ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_743, _744, _745), vec3(_822, _823, _824));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _743) - _822;
    float _902 = (_897 * _744) - _823;
    float _903 = (_897 * _745) - _824;
    float _907 = abs(dot(vec3(_822, _823, _824), vec3(_743, _744, _745)));
    float _3712 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_746);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _992 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _996 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1021 = _954 + _743;
        float _1022 = _958 + _744;
        float _1023 = _962 + _745;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_743, _744, _745), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3760 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_743, _744, _745), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3793 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_743, _744, _745), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3826 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1306 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1310 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1333 = _954 + _743;
        float _1334 = _958 + _744;
        float _1335 = _962 + _745;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_743, _744, _745), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3889 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_743, _744, _745), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3922 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_743, _744, _745), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _3955 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1264;
        _1572 = _1264;
        _1573 = _1264;
        _1574 = _1264;
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1276)) + _1276;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1277)) + _1277;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1278)) + _1278;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _901 * 0.5;
    float _1640 = _902 * 0.5;
    float _1641 = _903 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1770 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1773 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1801 = frontier_phi_14_12_ladder;
        }
        float _2002;
        if (_1770 > 0.0)
        {
            _2002 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2002 = frontier_phi_23_19_ladder;
        }
        float _2245;
        if (_1773 > 0.0)
        {
            _2245 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2245 = frontier_phi_35_30_ladder;
        }
        float _2247 = isnan(_2002) ? _1801 : (isnan(_1801) ? _2002 : min(_1801, _2002));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1767) + _1756;
        float _2253 = (_2248 * _1770) + _1760;
        float _2254 = (_2248 * _1773) + _1764;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2255;
        float _2259 = _2255 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 > _2259) || ((_2253 < _2257) || ((_2252 < _2257) || (_2252 > _2259))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_13_35_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_13_35_ladder_2;
        _1791 = frontier_phi_13_35_ladder_1;
        _1793 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1708);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1866 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1869 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2007;
        if (_1863 > 0.0)
        {
            _2007 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2007 = frontier_phi_25_21_ladder;
        }
        float _2272;
        if (_1866 > 0.0)
        {
            _2272 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2272 = frontier_phi_37_32_ladder;
        }
        float _2477;
        if (_1869 > 0.0)
        {
            _2477 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2477 = frontier_phi_46_43_ladder;
        }
        float _2479 = isnan(_2272) ? _2007 : (isnan(_2007) ? _2272 : min(_2007, _2272));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1863) + _1852;
        float _2485 = (_2480 * _1866) + _1856;
        float _2486 = (_2480 * _1869) + _1860;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_22_46_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_22_46_ladder_2;
        _1890 = frontier_phi_22_46_ladder_1;
        _1892 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1798);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_922 * _909)) * _893;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _893 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1961 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1965 = _1928 | 1u;
    float _1976 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_743, _744, _745));
    float _1979 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_743, _744, _745));
    float _4091 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _4102 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1984 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1986 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1993 = ((cbLight._m0[_1945].x * _1951) * _1986) + ((cbLight._m0[_1955].x * _1961) * _1984);
    float _1994 = ((_1951 * cbLight._m0[_1945].y) * _1986) + ((_1961 * cbLight._m0[_1955].y) * _1984);
    float _1995 = ((_1951 * cbLight._m0[_1945].z) * _1986) + ((_1961 * cbLight._m0[_1955].z) * _1984);
    uvec4 _1999 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2001 = _1999.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_2001)
    {
        _2012 = _1993;
        _2014 = _1994;
        _2016 = _1995;
    }
    else
    {
        uint _2020 = _1928 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4113 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2039 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1993;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1994;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1995;
    }
    bool _2019 = _1999.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2019)
    {
        _2057 = _2012;
        _2059 = _2014;
        _2061 = _2016;
    }
    else
    {
        uint _2216 = _1928 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4129 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2235 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2057 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2012;
        _2059 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2014;
        _2061 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2016;
    }
    uint _2064 = _1928 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _746) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1928].x + _822;
    float _2080 = cbLight._m0[_1928].y + _823;
    float _2081 = cbLight._m0[_1928].z + _824;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1928].xyz));
    float _4145 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2093 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2094 = dot(vec3(_743, _744, _745), vec3(_2086, _2087, _2088));
    float _4167 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2086, _2087, _2088));
    float _4178 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2093 * ((_2092 * _2118) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2118) + _2078) * _2092))) * _2092;
    float _4189 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2142 = _1928 + 9u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _746) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1965].x + _822;
    float _2156 = cbLight._m0[_1965].y + _823;
    float _2157 = cbLight._m0[_1965].z + _824;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1965].xyz));
    float _4200 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2169 = dot(vec3(_743, _744, _745), vec3(_2162, _2163, _2164));
    float _4211 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2162, _2163, _2164));
    float _4222 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2154 * _2154;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2191 = 1.0 - _2154;
    float _2201 = (0.5 / (((_2093 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2191) + _2154) * _2168))) * _2168;
    float _4233 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    float _2213 = (((_2190 * cbLight._m0[_2142].x) * _2203) * _1951) + (((_2117 * cbLight._m0[_2064].x) * _2131) * _1961);
    float _2214 = (((_2190 * cbLight._m0[_2142].y) * _2203) * _1951) + (((_2117 * cbLight._m0[_2064].y) * _2131) * _1961);
    float _2215 = (((_2190 * cbLight._m0[_2142].z) * _2203) * _1951) + (((_2117 * cbLight._m0[_2064].z) * _2131) * _1961);
    float _2277;
    float _2279;
    float _2281;
    if (_2001)
    {
        _2277 = _2213;
        _2279 = _2214;
        _2281 = _2215;
    }
    else
    {
        uint _2283 = _1928 + 2u;
        uint _2287 = _1928 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _746) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _822;
        float _2304 = cbLight._m0[_2283].y + _823;
        float _2305 = cbLight._m0[_2283].z + _824;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2283].xyz));
        float _4244 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2317 = dot(vec3(_743, _744, _745), vec3(_2310, _2311, _2312));
        float _4255 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4266 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2339 = 1.0 - _2302;
        float _2349 = (0.5 / (((_2093 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2339) + _2302) * _2316))) * _2316;
        float _4277 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2277 = (((_2338 * cbLight._m0[_2287].x) * _2351) * _2352) + _2213;
        _2279 = (((_2338 * cbLight._m0[_2287].y) * _2351) * _2352) + _2214;
        _2281 = (((_2338 * cbLight._m0[_2287].z) * _2351) * _2352) + _2215;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_2019)
    {
        _2387 = _2277;
        _2389 = _2279;
        _2391 = _2281;
    }
    else
    {
        uint _2398 = _1928 + 3u;
        uint _2402 = _1928 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _746) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _822;
        float _2419 = cbLight._m0[_2398].y + _823;
        float _2420 = cbLight._m0[_2398].z + _824;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2398].xyz));
        float _4293 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2432 = dot(vec3(_743, _744, _745), vec3(_2425, _2426, _2427));
        float _4304 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4315 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2454 = 1.0 - _2417;
        float _2464 = (0.5 / (((_2093 * ((_2431 * _2454) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2454) + _2417) * _2431))) * _2431;
        float _4326 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2387 = (((_2453 * cbLight._m0[_2402].x) * _2466) * _2467) + _2277;
        _2389 = (((_2453 * cbLight._m0[_2402].y) * _2466) * _2467) + _2279;
        _2391 = (((_2453 * cbLight._m0[_2402].z) * _2466) * _2467) + _2281;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1926.y == 0u)
    {
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2542;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2542;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2542;
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _2558)));
        float _2579 = (log2(_2545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            uint _2841 = 0u;
            uint _2850;
            bool _2851;
            for (;;)
            {
                _2850 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                _2851 = _2850 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2851)
                {
                    frontier_phi_61_pred = _2835;
                    frontier_phi_61_pred_1 = _2840;
                    frontier_phi_61_pred_2 = _2839;
                    frontier_phi_61_pred_3 = _2838;
                    frontier_phi_61_pred_4 = _2837;
                    frontier_phi_61_pred_5 = _2836;
                }
                else
                {
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    uint _2965;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2850;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    for (;;)
                    {
                        uint _2969 = uint(findLSB(_2965)) + (_2841 << 5u);
                        uint _2966 = (_2965 + 4294967295u) & _2965;
                        uint _2971 = _2969 * 48u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2991 = (_2969 * 48u) + 4u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3010 = (_2969 * 48u) + 8u;
                        vec3 _3021 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x));
                        float _3025 = _2985.x - _2543;
                        float _3026 = _2985.y - _2544;
                        float _3027 = _2985.z - _2545;
                        float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                        float _3031 = inversesqrt(_3028);
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3035 = dot(vec3(_849, _852, _855), vec3(_3032, _3033, _3034));
                        float _3040 = 1.0 - (_3028 * _2985.w);
                        float _4352 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3042 = sqrt(_3028) * _3004.w;
                        float _3045 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _3035) + _3046;
                        float _3052 = _3042 * _3042;
                        float _3056 = ((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3041) / ((_3052 * 0.699999988079071044921875) + 1.0);
                        float _3060 = (-0.0) - _2543;
                        float _3061 = (-0.0) - _2544;
                        float _3062 = (-0.0) - _2545;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3077 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                        float _3078 = 1.0 - _909;
                        float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                        float _3086 = _3085 * _3085;
                        float _3087 = _3086 * _3086;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3090 = _3069 + _3034;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3098 = dot(vec3(_849, _852, _855), vec3(_3067, _3068, _3069));
                        float _4368 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3102 = dot(vec3(_849, _852, _855), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                        float _4379 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                        float _3110 = _3045 * _3086;
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3035) + _3111;
                        float _4390 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3116 = 1.0 - _3086;
                        float _3126 = (0.5 / (((_3115 * ((_3101 * _3116) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3086) * _3101))) * _3115;
                        float _4401 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3137 = (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3109 * _3109) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125))) * _3041;
                        _2894 = (_3056 * _3004.x) + _2962;
                        _2895 = (_3056 * _3004.y) + _2963;
                        _2896 = (_3056 * _3004.z) + _2964;
                        _2891 = (_3137 * _3021.x) + _2959;
                        _2892 = (_3137 * _3021.y) + _2960;
                        _2893 = (_3137 * _3021.z) + _2961;
                        if (_2966 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2966;
                        }
                    }
                    frontier_phi_61_pred = _2891;
                    frontier_phi_61_pred_1 = _2896;
                    frontier_phi_61_pred_2 = _2895;
                    frontier_phi_61_pred_3 = _2894;
                    frontier_phi_61_pred_4 = _2893;
                    frontier_phi_61_pred_5 = _2892;
                }
                _2691 = frontier_phi_61_pred;
                _2701 = frontier_phi_61_pred_1;
                _2699 = frontier_phi_61_pred_2;
                _2697 = frontier_phi_61_pred_3;
                _2695 = frontier_phi_61_pred_4;
                _2693 = frontier_phi_61_pred_5;
                uint _2842 = _2841 + 1u;
                if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2835 = _2691;
                    _2836 = _2693;
                    _2837 = _2695;
                    _2838 = _2697;
                    _2839 = _2699;
                    _2840 = _2701;
                    _2841 = _2842;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2803 = _2690;
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
            _2811 = _2698;
            _2813 = _2700;
        }
        else
        {
            float _2828 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
            float _2829 = _2828 * _2543;
            float _2830 = _2828 * _2544;
            float _2831 = _2828 * _2545;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2942 = _2690;
                float _2943 = _2692;
                float _2944 = _2694;
                float _2945 = _2696;
                float _2946 = _2698;
                float _2947 = _2700;
                uint _2948 = _2707;
                uint _2957;
                bool _2958;
                for (;;)
                {
                    _2957 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                    _2958 = _2957 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2958)
                    {
                        frontier_phi_67_pred = _2945;
                        frontier_phi_67_pred_1 = _2946;
                        frontier_phi_67_pred_2 = _2947;
                        frontier_phi_67_pred_3 = _2944;
                        frontier_phi_67_pred_4 = _2943;
                        frontier_phi_67_pred_5 = _2942;
                    }
                    else
                    {
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        uint _3161 = _2957;
                        uint _3162;
                        vec4 _3187;
                        float _3188;
                        vec4 _3203;
                        vec3 _3215;
                        vec4 _3230;
                        vec4 _3245;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3172 = ((_2948 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3161));
                            _3162 = (_3161 + 4294967295u) & _3161;
                            uint _3174 = _3172 * 40u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3188 = _3187.w;
                            uint _3190 = (_3172 * 40u) + 4u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3172 * 40u) + 8u;
                            _3215 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x));
                            uint _3217 = (_3172 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3172 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3172 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3172 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_2545, _3279.z, fma(_2544, _3279.y, _3279.x * _2543)) + _3279.w;
                            _3292 = !((fma(_2545, _3260.z, fma(_2544, _3260.y, _3260.x * _2543)) + _3260.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3187.x - _2543;
                                float _3320 = _3187.y - _2544;
                                float _3321 = _3187.z - _2545;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3188 * _3188));
                                float _4412 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3337 = sqrt(_3322) * _3203.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_849, _852, _855))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_2545, _3230.z, fma(_2544, _3230.y, _3230.x * _2543)) + _3230.w) / _3291;
                                float _3351 = (fma(_2545, _3245.z, fma(_2544, _3245.y, _3245.x * _2543)) + _3245.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4428 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _909;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2829;
                                float _3381 = _3327 - _2830;
                                float _3382 = _3328 - _2831;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_849, _852, _855), vec3((-0.0) - _2829, (-0.0) - _2830, (-0.0) - _2831));
                                float _4439 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3394 = dot(vec3(_849, _852, _855), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4450 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_849, _852, _855), vec3(_3326, _3327, _3328))) + _3403;
                                float _4461 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4472 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3431 * _3215.x;
                                frontier_phi_73_pred_1 = _3431 * _3215.y;
                                frontier_phi_73_pred_2 = _3357 * _3203.z;
                                frontier_phi_73_pred_3 = _3357 * _3203.y;
                                frontier_phi_73_pred_4 = _3357 * _3203.x;
                                frontier_phi_73_pred_5 = _3431 * _3215.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_73_pred;
                            _3436 = frontier_phi_73_pred_1;
                            _3440 = frontier_phi_73_pred_2;
                            _3439 = frontier_phi_73_pred_3;
                            _3438 = frontier_phi_73_pred_4;
                            _3437 = frontier_phi_73_pred_5;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            _3142 = _3435 + _3155;
                            _3143 = _3436 + _3156;
                            _3144 = _3437 + _3157;
                            if (_3162 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3162;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3145;
                        frontier_phi_67_pred_1 = _3146;
                        frontier_phi_67_pred_2 = _3147;
                        frontier_phi_67_pred_3 = _3144;
                        frontier_phi_67_pred_4 = _3143;
                        frontier_phi_67_pred_5 = _3142;
                    }
                    _2810 = frontier_phi_67_pred;
                    _2812 = frontier_phi_67_pred_1;
                    _2814 = frontier_phi_67_pred_2;
                    _2808 = frontier_phi_67_pred_3;
                    _2806 = frontier_phi_67_pred_4;
                    _2804 = frontier_phi_67_pred_5;
                    uint _2949 = _2948 + 1u;
                    if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2942 = _2804;
                        _2943 = _2806;
                        _2944 = _2808;
                        _2945 = _2810;
                        _2946 = _2812;
                        _2947 = _2814;
                        _2948 = _2949;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2812;
                frontier_phi_55_56_ladder_1 = _2814;
                frontier_phi_55_56_ladder_2 = _2810;
                frontier_phi_55_56_ladder_3 = _2808;
                frontier_phi_55_56_ladder_4 = _2806;
                frontier_phi_55_56_ladder_5 = _2804;
            }
            else
            {
                frontier_phi_55_56_ladder = _2698;
                frontier_phi_55_56_ladder_1 = _2700;
                frontier_phi_55_56_ladder_2 = _2696;
                frontier_phi_55_56_ladder_3 = _2694;
                frontier_phi_55_56_ladder_4 = _2692;
                frontier_phi_55_56_ladder_5 = _2690;
            }
            _2803 = frontier_phi_55_56_ladder_5;
            _2805 = frontier_phi_55_56_ladder_4;
            _2807 = frontier_phi_55_56_ladder_3;
            _2809 = frontier_phi_55_56_ladder_2;
            _2811 = frontier_phi_55_56_ladder;
            _2813 = frontier_phi_55_56_ladder_1;
        }
        float _2818 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2602 = (_2818 * _2809) + _2057;
        _2604 = (_2818 * _2811) + _2059;
        _2606 = (_2818 * _2813) + _2061;
        _2608 = ((_2803 * 0.039999999105930328369140625) * _2818) + _2387;
        _2610 = ((_2805 * 0.039999999105930328369140625) * _2818) + _2389;
        _2612 = ((_2807 * 0.039999999105930328369140625) * _2818) + _2391;
    }
    else
    {
        _2602 = _2057;
        _2604 = _2059;
        _2606 = _2061;
        _2608 = _2387;
        _2610 = _2389;
        _2612 = _2391;
    }
    float _4488 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4499 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4510 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    uint _2632 = _236 + 6u;
    float _2640 = _830 / cbSceneParam._m0[86u].x;
    float _2641 = _831 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _764 : (isnan(_764) ? cbSceneParam._m0[77u].w : min(_764, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_764 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_764) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _764 : min(cbSceneParam._m0[80u].w, _764));
        float _2716 = _2715 / _764;
        float _2727 = _2716 * _815;
        float _2728 = _816 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2731 = _2716 * _817;
        float _2733 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2734 = _2733 + cbSceneParam._m0[79u].w;
        float _2735 = cbSceneParam._m0[79u].w - _2728;
        float _2741 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2731 * _2731));
        float _2744 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2741;
        float _2749 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2904;
        if (abs((_2729 - _2733) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2904 = ((((_2734 > 0.0) ? exp2(_2749 * _2734) : (2.0 - exp2(_2751 * _2734))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2744;
        }
        else
        {
            float _2864 = 1.0 / cbSceneParam._m0[80u].x;
            float _2865 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : max(_2734, _2735));
            float _2866 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : min(_2734, _2735));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            _2904 = ((abs(_2741 / _2729) * cbSceneParam._m0[80u].y) * ((((_2875 - _2876) * 2.0) - ((exp2(_2749 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)))) - exp2(_2749 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))))) * _2864)) - ((exp2(_2751 * _2875) - exp2(_2751 * _2876)) * _2864))) + (_2744 * cbSceneParam._m0[80u].z);
        }
        vec4 _2906 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2915 = exp2((_2904 * (-1.44269502162933349609375)) * (1.0 - _2906.w));
        float _2916 = log2(_2915);
        float _2932 = log2(_2660);
        _2753 = (exp2(_2932 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].x)) * _2906.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2755 = (exp2(_2932 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].y)) * _2906.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2757 = (exp2(_2932 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].z)) * _2906.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2759 = _2915 * _2660;
    }
    else
    {
        _2753 = _2657;
        _2755 = _2658;
        _2757 = _2659;
        _2759 = _2660;
    }
    float _2771 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2772 = _2771 == 3.0;
    float _2773 = log2(_2759);
    float _2780 = exp2(_2773 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2602 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _893))) + ((_2608 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2781 = exp2(_2773 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2604 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _893))) + ((_2610 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2782 = exp2(_2773 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2606 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _893))) + ((_2612 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2791 = (_2771 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2791 * (_2772 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.y = _2791 * (_2772 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.z = _2791 * (_2772 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.w = cbInstanceData._m0[_2632].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
}


