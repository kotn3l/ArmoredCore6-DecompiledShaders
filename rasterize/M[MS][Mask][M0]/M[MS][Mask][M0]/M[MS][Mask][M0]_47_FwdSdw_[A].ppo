#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1357;
float _3998;
float _3999;
float _4000;
float _4001;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _399 = _397.x;
    float _411 = dot(vec4(_399, _397.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _428 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_399 - _411) * cbMtdParam._m0[24u].z) + _411) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4010 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _442 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_429 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323);
    float _445 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_429 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324);
    float _448 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_429 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325);
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _517 = ((_487.z - _508) * _429) + _508;
    float _520 = ((((_487.x - _506) * _429) + _506) * 2.0) + (-1.0);
    float _522 = ((((_487.y - _507) * _429) + _507) * 2.0) + (-1.0);
    float _523 = dot(vec2(_520, _522), vec2(_520, _522));
    float _4021 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _556 = (((_544.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _520;
    float _557 = (((_544.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _522;
    float _560 = fma(_528, _243, fma(_557, _250, _556 * _236));
    float _563 = fma(_528, _244, fma(_557, _251, _556 * _237));
    float _566 = fma(_528, _245, fma(_557, _252, _556 * _238));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _606 = (cbMtdParam._m0[19u].x + dot(vec4(_570 * _560, _570 * _563, _570 * _566, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_599 - _600) * cbMtdParam._m0[24u].w) + _600) * cbMtdParam._m0[21u].z);
    float _4032 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _609 = (-0.0) - cbMtdParam._m0[24u].x;
    float _611 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
    float _619 = _607 - ((_607 * TEXCOORD_8.x) * _612);
    float _620 = _607 - ((_607 * TEXCOORD_8.y) * _612);
    float _621 = _607 - ((_607 * TEXCOORD_8.z) * _612);
    float _628 = (_619 * ((_467.x * cbMtdParam._m0[18u].x) - _442)) + _442;
    float _629 = (_620 * ((_467.y * cbMtdParam._m0[18u].y) - _445)) + _445;
    float _630 = (_621 * ((_467.z * cbMtdParam._m0[18u].z) - _448)) + _448;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _673 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_644 - _645) * cbMtdParam._m0[24u].y) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4053 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _682 = ((((cbMtdParam._m0[10u].x - _628) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _674) + _628;
    float _683 = ((((cbMtdParam._m0[10u].y - _629) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _674) + _629;
    float _684 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _630)) * _674) + _630;
    float _688 = (cbMtdParam._m0[19u].w * (_544.z - _517)) + _517;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _4064 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = ((_702.z - _688) * _619) + _688;
    float _722 = ((cbMtdParam._m0[23u].y - _719) * _674) + _719;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _747 = (_741.x * 2.0) + (-1.0);
    float _748 = (_741.y * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _4075 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _764 = ((sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) - _528) * _621) + _528;
    float _767 = (((_709 - _556) * _619) + _556) + (cbMtdParam._m0[21u].x * _556);
    float _768 = (((_710 - _557) * _620) + _557) + (cbMtdParam._m0[21u].x * _557);
    float _779 = (((_747 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _674) + _767;
    float _780 = (((_748 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _674) + _768;
    float _781 = (_674 * (sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) - _764)) + _764;
    float _783 = cbMtdParam._m0[22u].x + _544.w;
    float _786 = fma(_781, _243, fma(_780, _250, _779 * _236));
    float _789 = fma(_781, _244, fma(_780, _251, _779 * _237));
    float _792 = fma(_781, _245, fma(_780, _252, _779 * _238));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _4086 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _800 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4108 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4119 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4130 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1038 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1044 = (cbMatDynParam._m0[5u].x * _1038) + cbMatDynParam._m0[5u].y;
        float _4141 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1049 = (cbMatDynParam._m0[5u].z * _1038) + cbMatDynParam._m0[5u].w;
        float _4152 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) - _1045)) + _1045) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _917 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _920 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _933 = _255 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_934].z;
    float _4163 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _958 = ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * TEXCOORD_5.w) * _954.x;
    float _959 = dot(vec3(_797, _798, _799), vec3(_875, _876, _877));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _797) - _875;
    float _967 = (_962 * _798) - _876;
    float _968 = (_962 * _799) - _877;
    float _972 = abs(dot(vec3(_875, _876, _877), vec3(_797, _798, _799)));
    float _4196 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_800);
    float _987 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1027, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019));
        float _1085 = fma(_1027, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019));
        float _1089 = fma(_1027, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019));
        float _1114 = _1019 + _797;
        float _1115 = _1023 + _798;
        float _1116 = _1027 + _799;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_797, _798, _799), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4244 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_797, _798, _799), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4277 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_797, _798, _799), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4310 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1027, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019));
        float _1403 = fma(_1027, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019));
        float _1407 = fma(_1027, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019));
        float _1430 = _1019 + _797;
        float _1431 = _1023 + _798;
        float _1432 = _1027 + _799;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_797, _798, _799), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4373 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_797, _798, _799), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4406 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_797, _798, _799), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4439 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = _1357;
        _1679 = _1357;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1369)) + _1369;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1370)) + _1370;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1371)) + _1371;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _966 * 0.5;
    float _1737 = _967 * 0.5;
    float _1738 = _968 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1027, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1027, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1027, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1866 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1869 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1897 = frontier_phi_17_15_ladder;
        }
        float _2066;
        if (_1866 > 0.0)
        {
            _2066 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2066 = frontier_phi_26_22_ladder;
        }
        float _2361;
        if (_1869 > 0.0)
        {
            _2361 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2361 = frontier_phi_38_33_ladder;
        }
        float _2363 = isnan(_2066) ? _1897 : (isnan(_1897) ? _2066 : min(_1897, _2066));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1863) + _1852;
        float _2369 = (_2364 * _1866) + _1856;
        float _2370 = (_2364 * _1869) + _1860;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_16_38_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_16_38_ladder_2;
        _1887 = frontier_phi_16_38_ladder_1;
        _1889 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1805);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1027, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1027, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1027, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1961 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1964 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2071;
        if (_1958 > 0.0)
        {
            _2071 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2071 = frontier_phi_28_24_ladder;
        }
        float _2388;
        if (_1961 > 0.0)
        {
            _2388 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2388 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_1964 > 0.0)
        {
            _2715 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2715 = frontier_phi_50_47_ladder;
        }
        float _2717 = isnan(_2388) ? _2071 : (isnan(_2071) ? _2388 : min(_2071, _2388));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _1958) + _1947;
        float _2723 = (_2718 * _1961) + _1951;
        float _2724 = (_2718 * _1964) + _1955;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_25_50_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_25_50_ladder_2;
        _1985 = frontier_phi_25_50_ladder_1;
        _1987 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1894);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _1999 = ((((1.0 - _987) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_987 * _974)) * _958;
    float _2000 = _1999 * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2001 = _1999 * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2002 = _1999 * ((cbModelParam._m0[1u].w * (_1987 - _1889)) + _1889);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2058 = _2045 / _2057;
    float _2059 = _2049 / _2057;
    float _2060 = _2053 / _2057;
    float _2207;
    float _2208;
    float _2209;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2087 = ((uint(_2060 > cbSceneParam._m0[59u].y) + uint(_2060 > cbSceneParam._m0[59u].x)) + uint(_2060 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2088 = _2087 + 43u;
        uint _2096 = _2087 + 44u;
        uint _2104 = _2087 + 45u;
        uint _2112 = _2087 + 46u;
        float _2123 = fma(_2057, cbSceneParam._m0[_2088].w, fma(_2053, cbSceneParam._m0[_2088].z, fma(_2049, cbSceneParam._m0[_2088].y, _2045 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2057, cbSceneParam._m0[_2096].w, fma(_2053, cbSceneParam._m0[_2096].z, fma(_2049, cbSceneParam._m0[_2096].y, _2045 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2057, cbSceneParam._m0[_2112].w, fma(_2053, cbSceneParam._m0[_2112].z, fma(_2049, cbSceneParam._m0[_2112].y, _2045 * cbSceneParam._m0[_2112].x)));
        float _2140 = cbSceneParam._m0[33u].z * _2135;
        float _2142 = cbSceneParam._m0[33u].w * _2135;
        float _2145 = fma(_2057, cbSceneParam._m0[_2104].w, fma(_2053, cbSceneParam._m0[_2104].z, fma(_2049, cbSceneParam._m0[_2104].y, _2045 * cbSceneParam._m0[_2104].x))) / _2135;
        float _2193 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
        float _4565 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2200 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2123) / _2135, (_2142 + _2127) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2123) / _2135, (_2127 - _2140) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2140) / _2135, (_2127 - _2142) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2142) / _2135, (_2140 + _2127) / _2135), _2145), 0.0)).x), vec4(0.25)));
        _2207 = 1.0 - (_2200 * cbSceneParam._m0[34u].x);
        _2208 = 1.0 - (_2200 * cbSceneParam._m0[34u].y);
        _2209 = 1.0 - (_2200 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2207 = 1.0;
        _2208 = 1.0;
        _2209 = 1.0;
    }
    float _2273;
    float _2275;
    float _2277;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2261 = fma(_2057, cbSceneParam._m0[63u].w, fma(_2053, cbSceneParam._m0[63u].z, fma(_2049, cbSceneParam._m0[63u].y, _2045 * cbSceneParam._m0[63u].x)));
        float _2262 = fma(_2057, cbSceneParam._m0[60u].w, fma(_2053, cbSceneParam._m0[60u].z, fma(_2049, cbSceneParam._m0[60u].y, _2045 * cbSceneParam._m0[60u].x))) / _2261;
        float _2263 = fma(_2057, cbSceneParam._m0[61u].w, fma(_2053, cbSceneParam._m0[61u].z, fma(_2049, cbSceneParam._m0[61u].y, _2045 * cbSceneParam._m0[61u].x))) / _2261;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2262 >= cbSceneParam._m0[64u].x) && (_2263 >= cbSceneParam._m0[64u].y)) && (_2262 <= cbSceneParam._m0[64u].z)) && (_2263 <= cbSceneParam._m0[64u].w))
        {
            float _2401 = fma(_2057, cbSceneParam._m0[62u].w, fma(_2053, cbSceneParam._m0[62u].z, fma(_2049, cbSceneParam._m0[62u].y, _2045 * cbSceneParam._m0[62u].x))) / _2261;
            float _2405 = isnan(cbSceneParam._m0[41u].w) ? _2401 : (isnan(_2401) ? cbSceneParam._m0[41u].w : max(_2401, cbSceneParam._m0[41u].w));
            float _2448 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
            float _4581 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
            float _2455 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2262, cbSceneParam._m0[33u].w + _2263), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2262, _2263 - cbSceneParam._m0[33u].z), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2262 - cbSceneParam._m0[33u].z, _2263 - cbSceneParam._m0[33u].w), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2262 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2263), _2405), 0.0)).x), vec4(0.25)));
            float _2459 = 1.0 - (_2455 * cbSceneParam._m0[34u].x);
            float _2460 = 1.0 - (_2455 * cbSceneParam._m0[34u].y);
            float _2461 = 1.0 - (_2455 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
            frontier_phi_37_36_ladder_1 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
            frontier_phi_37_36_ladder_2 = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
        }
        else
        {
            frontier_phi_37_36_ladder = _2209;
            frontier_phi_37_36_ladder_1 = _2208;
            frontier_phi_37_36_ladder_2 = _2207;
        }
        _2273 = frontier_phi_37_36_ladder_2;
        _2275 = frontier_phi_37_36_ladder_1;
        _2277 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2273 = _2207;
        _2275 = _2208;
        _2277 = _2209;
    }
    uvec4 _2282 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2284 = _2282.x * 14u;
    uint _2285 = _2284 + 13u;
    float _2292 = _958 + (-1.0);
    float _2297 = (cbLight._m0[_2285].x * _2292) + 1.0;
    float _2298 = (cbLight._m0[_2285].y * _2292) + 1.0;
    float _2299 = (cbLight._m0[_2285].z * _2292) + 1.0;
    float _2300 = (cbLight._m0[_2285].w * _2292) + 1.0;
    uint _2301 = _2284 + 5u;
    float _2307 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2311 = _2284 + 4u;
    float _2320 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2324 = _2284 | 1u;
    float _2335 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_797, _798, _799));
    float _2338 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_797, _798, _799));
    float _4617 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _4628 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2345 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2352 = ((cbLight._m0[_2301].x * _2307) * _2345) + (((cbLight._m0[_2311].x * _2273) * _2320) * _2343);
    float _2353 = ((_2307 * cbLight._m0[_2301].y) * _2345) + (((cbLight._m0[_2311].y * _2275) * _2320) * _2343);
    float _2354 = ((_2307 * cbLight._m0[_2301].z) * _2345) + (((cbLight._m0[_2311].z * _2277) * _2320) * _2343);
    uvec4 _2358 = floatBitsToUint(cbLight._m0[_2284 + 12u]);
    bool _2360 = _2358.x == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2360)
    {
        _2462 = _2352;
        _2464 = _2353;
        _2466 = _2354;
    }
    else
    {
        uint _2470 = _2284 + 6u;
        float _2486 = (dot(vec3(cbLight._m0[_2284 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2487 = _2486 * _2486;
        float _4639 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2488 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2489 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2462 = (((cbLight._m0[_2470].x * 0.3183098733425140380859375) * _2488) * _2489) + _2352;
        _2464 = (((cbLight._m0[_2470].y * 0.3183098733425140380859375) * _2488) * _2489) + _2353;
        _2466 = (((cbLight._m0[_2470].z * 0.3183098733425140380859375) * _2488) * _2489) + _2354;
    }
    bool _2469 = _2358.y == 0u;
    float _2524;
    float _2526;
    float _2528;
    if (_2469)
    {
        _2524 = _2462;
        _2526 = _2464;
        _2528 = _2466;
    }
    else
    {
        uint _2686 = _2284 + 7u;
        float _2702 = (dot(vec3(cbLight._m0[_2284 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2703 = _2702 * _2702;
        float _4655 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2704 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2705 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2524 = (((cbLight._m0[_2686].x * 0.3183098733425140380859375) * _2704) * _2705) + _2462;
        _2526 = (((cbLight._m0[_2686].y * 0.3183098733425140380859375) * _2704) * _2705) + _2464;
        _2528 = (((cbLight._m0[_2686].z * 0.3183098733425140380859375) * _2704) * _2705) + _2466;
    }
    uint _2531 = _2284 + 8u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _800) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2284].x + _875;
    float _2547 = cbLight._m0[_2284].y + _876;
    float _2548 = cbLight._m0[_2284].z + _877;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2284].xyz));
    float _4671 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _4682 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2560 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2561 = dot(vec3(_797, _798, _799), vec3(_2553, _2554, _2555));
    float _4693 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2553, _2554, _2555));
    float _4704 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2545 * _2545;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2585 = 1.0 - _2545;
    float _2596 = (0.5 / (((_2560 * ((_2559 * _2585) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2585) + _2545) * _2559))) * _2559;
    float _4715 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    uint _2612 = _2284 + 9u;
    float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _800) * 0.949999988079071044921875);
    float _2624 = _2623 * _2623;
    float _2625 = cbLight._m0[_2324].x + _875;
    float _2626 = cbLight._m0[_2324].y + _876;
    float _2627 = cbLight._m0[_2324].z + _877;
    float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
    float _2632 = _2631 * _2625;
    float _2633 = _2631 * _2626;
    float _2634 = _2631 * _2627;
    float _2635 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2324].xyz));
    float _4726 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2639 = dot(vec3(_797, _798, _799), vec3(_2632, _2633, _2634));
    float _4737 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2632, _2633, _2634));
    float _4748 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2624 * _2624;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2661 = 1.0 - _2624;
    float _2671 = (0.5 / (((_2560 * ((_2638 * _2661) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2661) + _2624) * _2638))) * _2638;
    float _4759 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    float _2683 = (((_2660 * cbLight._m0[_2612].x) * _2673) * _2307) + ((((cbLight._m0[_2531].x * _2273) * _2584) * _2598) * _2320);
    float _2684 = (((_2660 * cbLight._m0[_2612].y) * _2673) * _2307) + ((((cbLight._m0[_2531].y * _2275) * _2584) * _2598) * _2320);
    float _2685 = (((_2660 * cbLight._m0[_2612].z) * _2673) * _2307) + ((((cbLight._m0[_2531].z * _2277) * _2584) * _2598) * _2320);
    float _2741;
    float _2743;
    float _2745;
    if (_2360)
    {
        _2741 = _2683;
        _2743 = _2684;
        _2745 = _2685;
    }
    else
    {
        uint _2747 = _2284 + 2u;
        uint _2751 = _2284 + 10u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _800) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _875;
        float _2768 = cbLight._m0[_2747].y + _876;
        float _2769 = cbLight._m0[_2747].z + _877;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2747].xyz));
        float _4770 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2781 = dot(vec3(_797, _798, _799), vec3(_2774, _2775, _2776));
        float _4781 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4792 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2802 = (exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2803 = 1.0 - _2766;
        float _2813 = (0.5 / (((_2560 * ((_2780 * _2803) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2803) + _2766) * _2780))) * _2780;
        float _4803 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2815 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2816 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2741 = (((_2802 * cbLight._m0[_2751].x) * _2815) * _2816) + _2683;
        _2743 = (((_2802 * cbLight._m0[_2751].y) * _2815) * _2816) + _2684;
        _2745 = (((_2802 * cbLight._m0[_2751].z) * _2815) * _2816) + _2685;
    }
    float _2847;
    float _2849;
    float _2851;
    if (_2469)
    {
        _2847 = _2741;
        _2849 = _2743;
        _2851 = _2745;
    }
    else
    {
        uint _2858 = _2284 + 3u;
        uint _2862 = _2284 + 11u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _800) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _875;
        float _2879 = cbLight._m0[_2858].y + _876;
        float _2880 = cbLight._m0[_2858].z + _877;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2858].xyz));
        float _4819 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2892 = dot(vec3(_797, _798, _799), vec3(_2885, _2886, _2887));
        float _4830 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4841 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2913 = (exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2914 = 1.0 - _2877;
        float _2924 = (0.5 / (((_2560 * ((_2891 * _2914) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2914) + _2877) * _2891))) * _2891;
        float _4852 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2847 = (((_2913 * cbLight._m0[_2862].x) * _2926) * _2927) + _2741;
        _2849 = (((_2913 * cbLight._m0[_2862].y) * _2926) * _2927) + _2743;
        _2851 = (((_2913 * cbLight._m0[_2862].z) * _2926) * _2927) + _2745;
    }
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_2282.y == 0u)
    {
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.x;
        uint _2960 = uint((float(_2948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2949))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2949)));
        float _2970 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2971 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        uint _2974 = uint(isnan(14.0) ? _2971 : (isnan(_2971) ? 14.0 : min(_2971, 14.0)));
        uvec4 _2979 = texelFetch(g_lightClusterGridBuffer, int(((_2974 << 2u) + (_2960 << 6u)) >> 2u));
        uint _2980 = _2979.x;
        uint _2981 = _2948.z;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((((1u << ((_2981 >> 4u) & 15u)) + 4294967295u) & _2980) == 0u) || ((_2981 & 240u) == 0u))
        {
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
        }
        else
        {
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            uint _3218 = 0u;
            uint _3227;
            bool _3228;
            for (;;)
            {
                _3227 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                _3228 = _3227 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3228)
                {
                    frontier_phi_71_pred = _3217;
                    frontier_phi_71_pred_1 = _3216;
                    frontier_phi_71_pred_2 = _3215;
                    frontier_phi_71_pred_3 = _3214;
                    frontier_phi_71_pred_4 = _3213;
                    frontier_phi_71_pred_5 = _3212;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3227;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3218 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2058;
                        float _3424 = _3383.y - _2059;
                        float _3425 = _3383.z - _2060;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_914, _917, _920), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4878 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2058;
                        float _3459 = (-0.0) - _2059;
                        float _3460 = (-0.0) - _2060;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _974;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_914, _917, _920), vec3(_3465, _3466, _3467));
                        float _4894 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3499 = dot(vec3(_914, _917, _920), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4905 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4916 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4927 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3287 = (_3454 * _3402.x) + _3360;
                        _3288 = (_3454 * _3402.y) + _3361;
                        _3289 = (_3454 * _3402.z) + _3362;
                        _3284 = (_3534 * _3419.x) + _3357;
                        _3285 = (_3534 * _3419.y) + _3358;
                        _3286 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_71_pred = _3289;
                    frontier_phi_71_pred_1 = _3288;
                    frontier_phi_71_pred_2 = _3287;
                    frontier_phi_71_pred_3 = _3286;
                    frontier_phi_71_pred_4 = _3285;
                    frontier_phi_71_pred_5 = _3284;
                }
                _3071 = frontier_phi_71_pred;
                _3069 = frontier_phi_71_pred_1;
                _3067 = frontier_phi_71_pred_2;
                _3065 = frontier_phi_71_pred_3;
                _3063 = frontier_phi_71_pred_4;
                _3061 = frontier_phi_71_pred_5;
                uint _3219 = _3218 + 1u;
                if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3071;
                    _3218 = _3219;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
        }
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.z;
        uint _3077 = (_3075 >> 8u) & 15u;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        if (((4294967295u << _3077) & _2980) == 0u)
        {
            _3180 = _3060;
            _3182 = _3062;
            _3184 = _3064;
            _3186 = _3066;
            _3188 = _3068;
            _3190 = _3070;
        }
        else
        {
            float _3205 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _3206 = _3205 * _2058;
            float _3207 = _3205 * _2059;
            float _3208 = _3205 * _2060;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3077 < ((_3075 >> 12u) & 15u))
            {
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                float _3345 = _3070;
                uint _3346 = _3077;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3356)
                    {
                        frontier_phi_82_pred = _3345;
                        frontier_phi_82_pred_1 = _3344;
                        frontier_phi_82_pred_2 = _3343;
                        frontier_phi_82_pred_3 = _3342;
                        frontier_phi_82_pred_4 = _3341;
                        frontier_phi_82_pred_5 = _3340;
                    }
                    else
                    {
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        uint _3567 = _3355;
                        uint _3568;
                        vec4 _3593;
                        float _3594;
                        vec4 _3609;
                        vec3 _3621;
                        vec4 _3636;
                        vec4 _3652;
                        float _3698;
                        bool _3699;
                        for (;;)
                        {
                            uint _3578 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3567));
                            _3568 = (_3567 + 4294967295u) & _3567;
                            uint _3580 = _3578 * 40u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3594 = _3593.w;
                            uint _3596 = (_3578 * 40u) + 4u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3578 * 40u) + 8u;
                            _3621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x));
                            uint _3623 = (_3578 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3639 = (_3578 * 40u) + 20u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3578 * 40u) + 24u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3673 = (_3578 * 40u) + 28u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            _3698 = fma(_2060, _3686.z, fma(_2059, _3686.y, _3686.x * _2058)) + _3686.w;
                            _3699 = !((fma(_2060, _3667.z, fma(_2059, _3667.y, _3667.x * _2058)) + _3667.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3699)
                            {
                                float _3726 = _3593.x - _2058;
                                float _3727 = _3593.y - _2059;
                                float _3728 = _3593.z - _2060;
                                float _3729 = dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728));
                                float _3732 = inversesqrt(_3729);
                                float _3733 = _3732 * _3726;
                                float _3734 = _3732 * _3727;
                                float _3735 = _3732 * _3728;
                                float _3739 = 1.0 - (_3729 / (_3594 * _3594));
                                float _4938 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3744 = sqrt(_3729) * _3609.w;
                                float _3746 = 1.39999997615814208984375 / (_3744 + 1.39999997615814208984375);
                                float _3747 = _3746 * _3746;
                                float _3750 = ((1.0 - _3747) * dot(vec3(_3733, _3734, _3735), vec3(_914, _917, _920))) + _3747;
                                float _3753 = _3744 * _3744;
                                float _3757 = (fma(_2060, _3636.z, fma(_2059, _3636.y, _3636.x * _2058)) + _3636.w) / _3698;
                                float _3758 = (fma(_2060, _3652.z, fma(_2059, _3652.y, _3652.x * _2058)) + _3652.w) / _3698;
                                float _3762 = 1.0 - dot(vec2(_3757, _3758), vec2(_3757, _3758));
                                float _4954 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3764 = _3763 * (((isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0))) * _3740) / ((_3753 * 0.699999988079071044921875) + 1.0));
                                float _3776 = exp2(log2(1.0 / ((_3753 * 3.5) + 5.0)) * 0.25);
                                float _3777 = 1.0 - _974;
                                float _3784 = sqrt(1.0 - ((1.0 - (_3777 * _3777)) * (1.0 - (_3776 * _3776))));
                                float _3785 = _3784 * _3784;
                                float _3786 = _3785 * _3785;
                                float _3787 = _3733 - _3206;
                                float _3788 = _3734 - _3207;
                                float _3789 = _3735 - _3208;
                                float _3793 = inversesqrt(dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789)));
                                float _3797 = dot(vec3(_914, _917, _920), vec3((-0.0) - _3206, (-0.0) - _3207, (-0.0) - _3208));
                                float _4965 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3801 = dot(vec3(_914, _917, _920), vec3(_3793 * _3787, _3793 * _3788, _3793 * _3789));
                                float _4976 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3808 = ((_3804 * _3804) * (_3786 + (-1.0))) + 1.0;
                                float _3809 = _3746 * _3785;
                                float _3810 = _3809 * _3809;
                                float _3816 = ((1.0 - _3810) * dot(vec3(_914, _917, _920), vec3(_3733, _3734, _3735))) + _3810;
                                float _4987 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3818 = 1.0 - _3785;
                                float _3828 = (0.5 / (((_3817 * ((_3800 * _3818) + _3785)) + 9.9999999392252902907785028219223e-09) + (((_3817 * _3818) + _3785) * _3800))) * _3817;
                                float _4998 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3838 = (_3763 * _3740) * (((_3786 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3808 * _3808) * ((_3753 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3764 * _3609.z;
                                frontier_phi_88_pred_1 = _3764 * _3609.y;
                                frontier_phi_88_pred_2 = _3764 * _3609.x;
                                frontier_phi_88_pred_3 = _3838 * _3621.z;
                                frontier_phi_88_pred_4 = _3838 * _3621.y;
                                frontier_phi_88_pred_5 = _3838 * _3621.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_88_pred;
                            _3846 = frontier_phi_88_pred_1;
                            _3845 = frontier_phi_88_pred_2;
                            _3844 = frontier_phi_88_pred_3;
                            _3843 = frontier_phi_88_pred_4;
                            _3842 = frontier_phi_88_pred_5;
                            _3551 = _3845 + _3564;
                            _3552 = _3846 + _3565;
                            _3553 = _3847 + _3566;
                            _3548 = _3842 + _3561;
                            _3549 = _3843 + _3562;
                            _3550 = _3844 + _3563;
                            if (_3568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3568;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3553;
                        frontier_phi_82_pred_1 = _3552;
                        frontier_phi_82_pred_2 = _3551;
                        frontier_phi_82_pred_3 = _3550;
                        frontier_phi_82_pred_4 = _3549;
                        frontier_phi_82_pred_5 = _3548;
                    }
                    _3191 = frontier_phi_82_pred;
                    _3189 = frontier_phi_82_pred_1;
                    _3187 = frontier_phi_82_pred_2;
                    _3185 = frontier_phi_82_pred_3;
                    _3183 = frontier_phi_82_pred_4;
                    _3181 = frontier_phi_82_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3181;
                        _3341 = _3183;
                        _3342 = _3185;
                        _3343 = _3187;
                        _3344 = _3189;
                        _3345 = _3191;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3187;
                frontier_phi_63_64_ladder_1 = _3191;
                frontier_phi_63_64_ladder_2 = _3189;
                frontier_phi_63_64_ladder_3 = _3185;
                frontier_phi_63_64_ladder_4 = _3183;
                frontier_phi_63_64_ladder_5 = _3181;
            }
            else
            {
                frontier_phi_63_64_ladder = _3066;
                frontier_phi_63_64_ladder_1 = _3070;
                frontier_phi_63_64_ladder_2 = _3068;
                frontier_phi_63_64_ladder_3 = _3064;
                frontier_phi_63_64_ladder_4 = _3062;
                frontier_phi_63_64_ladder_5 = _3060;
            }
            _3180 = frontier_phi_63_64_ladder_5;
            _3182 = frontier_phi_63_64_ladder_4;
            _3184 = frontier_phi_63_64_ladder_3;
            _3186 = frontier_phi_63_64_ladder;
            _3188 = frontier_phi_63_64_ladder_2;
            _3190 = frontier_phi_63_64_ladder_1;
        }
        float _3195 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2993 = (_3195 * _3186) + _2524;
        _2995 = (_3195 * _3188) + _2526;
        _2997 = (_3195 * _3190) + _2528;
        _2999 = ((_3180 * 0.039999999105930328369140625) * _3195) + _2847;
        _3001 = ((_3182 * 0.039999999105930328369140625) * _3195) + _2849;
        _3003 = ((_3184 * 0.039999999105930328369140625) * _3195) + _2851;
    }
    else
    {
        _2993 = _2524;
        _2995 = _2526;
        _2997 = _2528;
        _2999 = _2847;
        _3001 = _2849;
        _3003 = _2851;
    }
    float _5014 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _5025 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5036 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _3020 = ((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_2993 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _958))) + ((_2999 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    float _3021 = ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2995 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _958))) + ((_3001 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    float _3022 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2997 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _958))) + ((_3003 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    uint _3023 = _255 + 6u;
    float _3031 = _895 / cbSceneParam._m0[86u].x;
    float _3032 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3085 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3086 = _3085 / _818;
        float _3097 = _3086 * _868;
        float _3098 = _869 * _3086;
        float _3099 = (-0.0) - _3098;
        float _3100 = _3086 * _870;
        float _3102 = (cbSceneParam._m0[77u].w * _3099) / _3085;
        float _3103 = _3102 + cbSceneParam._m0[79u].w;
        float _3104 = cbSceneParam._m0[79u].w - _3098;
        float _3110 = sqrt(((_3097 * _3097) + (_3098 * _3098)) + (_3100 * _3100));
        float _3113 = (1.0 - (cbSceneParam._m0[77u].w / _3085)) * _3110;
        float _3118 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3120 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3297;
        if (abs((_3099 - _3102) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3297 = ((((_3103 > 0.0) ? exp2(_3118 * _3103) : (2.0 - exp2(_3120 * _3103))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3113;
        }
        else
        {
            float _3241 = 1.0 / cbSceneParam._m0[80u].x;
            float _3242 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : max(_3103, _3104));
            float _3243 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : min(_3103, _3104));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            _3297 = ((abs(_3110 / _3099) * cbSceneParam._m0[80u].y) * ((((_3252 - _3253) * 2.0) - ((exp2(_3118 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0)))) - exp2(_3118 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))))) * _3241)) - ((exp2(_3120 * _3252) - exp2(_3120 * _3253)) * _3241))) + (_3113 * cbSceneParam._m0[80u].z);
        }
        vec4 _3299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3308 = exp2((_3297 * (-1.44269502162933349609375)) * (1.0 - _3299.w));
        float _3309 = log2(_3308);
        float _3325 = log2(_3051);
        _3122 = (exp2(_3325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].x)) * _3299.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3124 = (exp2(_3325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].y)) * _3299.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3126 = (exp2(_3325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].z)) * _3299.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3128 = _3308 * _3051;
    }
    else
    {
        _3122 = _3048;
        _3124 = _3049;
        _3126 = _3050;
        _3128 = _3051;
    }
    bool _3335;
    vec4 _3138;
    vec4 _3160;
    float _3162;
    float _3166;
    float _3167;
    float _3168;
    float _3169;
    bool _3179;
    for (;;)
    {
        _3138 = cbMatDynParam._m0[0u];
        float _3140 = roundEven(_3138.y);
        bool _3141 = _3140 == 3.0;
        float _3142 = log2(_3128);
        float _3149 = exp2(_3142 * cbSceneParam._m0[78u].x) * _3020;
        float _3150 = exp2(_3142 * cbSceneParam._m0[78u].y) * _3021;
        float _3151 = exp2(_3142 * cbSceneParam._m0[78u].z) * _3022;
        float _3158 = _884 + (-0.5);
        _3160 = cbMtdParam._m0[1u];
        _3162 = _3160.y * _3158;
        float _3165 = (_3140 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3166 = _3165 * (_3141 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3122)));
        _3167 = _3165 * (_3141 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3124)));
        _3168 = _3165 * (_3141 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3126)));
        _3169 = _3158 * 0.999000012874603271484375;
        _3179 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3179)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _3169) < 0.5)
            {
                _3335 = true;
                break;
            }
        }
        uint _3276 = _933 + uint(_3138.w);
        if ((cbInstanceData._m0[_3276].w < 1.0) && ((cbInstanceData._m0[_3276].w + _3169) < 0.5))
        {
            _3335 = true;
            break;
        }
        if ((_3162 + 1.0) < _3160.x)
        {
            _3335 = true;
            break;
        }
        _3335 = false;
        break;
    }
    float _3539;
    if (_3335)
    {
        discard_state = true;
        _3539 = 0.0;
    }
    else
    {
        _3539 = cbInstanceData._m0[_3023].w;
    }
    SV_Target.x = _3166;
    SV_Target.y = _3167;
    SV_Target.z = _3168;
    SV_Target.w = _3539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
    discard_exit();
}


