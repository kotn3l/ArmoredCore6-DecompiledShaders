#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3472 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _423 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_410 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303);
    float _426 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_410 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304);
    float _429 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_410 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305);
    vec4 _448 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _487 = _485.x;
    float _488 = _485.y;
    float _489 = _485.z;
    float _498 = ((_468.z - _489) * _410) + _489;
    float _501 = ((((_468.x - _487) * _410) + _487) * 2.0) + (-1.0);
    float _503 = ((((_468.y - _488) * _410) + _488) * 2.0) + (-1.0);
    float _504 = dot(vec2(_501, _503), vec2(_501, _503));
    float _3483 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _552 = _550.x;
    float _553 = 1.0 - _552;
    float _566 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_552 - _553) * cbMtdParam._m0[24u].w) + _553) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3494 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _574 = (_567 * ((_448.x * cbMtdParam._m0[18u].x) - _423)) + _423;
    float _575 = (_567 * ((_448.y * cbMtdParam._m0[18u].y) - _426)) + _426;
    float _576 = (_567 * ((_448.z * cbMtdParam._m0[18u].z) - _429)) + _429;
    float _580 = (cbMtdParam._m0[19u].w * (_525.z - _498)) + _498;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3505 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = (_567 * (_593.z - _580)) + _580;
    float _613 = (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _501;
    float _614 = (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _503;
    float _626 = (((_600 - _613) + (cbMtdParam._m0[21u].x * _613)) * _567) + _613;
    float _627 = (((_601 - _614) + (cbMtdParam._m0[21u].x * _614)) * _567) + _614;
    float _628 = (_567 * (sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) - _509)) + _509;
    float _632 = cbMtdParam._m0[22u].x + _525.w;
    float _635 = fma(_628, _221 * NORMAL.x, fma(_627, _228 * TANGENT.x, (_214 * _206) * _626));
    float _638 = fma(_628, _221 * NORMAL.y, fma(_627, _228 * TANGENT.y, (_214 * _207) * _626));
    float _641 = fma(_628, _221 * NORMAL.z, fma(_627, _228 * TANGENT.z, (_214 * _208) * _626));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    float _646 = _645 * _635;
    float _647 = _645 * _638;
    float _648 = _645 * _641;
    float _3516 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _649 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3538 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3549 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3560 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _667 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _718 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _708);
    float _719 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _708);
    float _720 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _708);
    float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
    float _725 = _718 * _724;
    float _726 = _719 * _724;
    float _727 = _720 * _724;
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_648, cbSceneParam._m0[5u].z, fma(_647, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _646));
    float _755 = fma(_648, cbSceneParam._m0[6u].z, fma(_647, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _646));
    float _758 = fma(_648, cbSceneParam._m0[7u].z, fma(_647, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _646));
    uint _772 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3571 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _796 = ((isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_646, _647, _648), vec3(_725, _726, _727));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _646) - _725;
    float _805 = (_800 * _647) - _726;
    float _806 = (_800 * _648) - _727;
    float _810 = abs(dot(vec3(_725, _726, _727), vec3(_646, _647, _648)));
    float _3604 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_649);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _895 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _899 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _924 = _857 + _646;
        float _925 = _861 + _647;
        float _926 = _865 + _648;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_646, _647, _648), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3652 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_646, _647, _648), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3685 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_646, _647, _648), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3718 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1210 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1214 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1237 = _857 + _646;
        float _1238 = _861 + _647;
        float _1239 = _865 + _648;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_646, _647, _648), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3781 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_646, _647, _648), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3814 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_646, _647, _648), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3847 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1167;
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _804 * 0.5;
    float _1544 = _805 * 0.5;
    float _1545 = _806 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _649);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1673 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1676 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1704 = frontier_phi_14_12_ladder;
        }
        float _1904;
        if (_1673 > 0.0)
        {
            _1904 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1904 = frontier_phi_23_19_ladder;
        }
        float _2147;
        if (_1676 > 0.0)
        {
            _2147 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2147 = frontier_phi_35_30_ladder;
        }
        float _2149 = isnan(_1904) ? _1704 : (isnan(_1704) ? _1904 : min(_1704, _1904));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1670) + _1659;
        float _2155 = (_2150 * _1673) + _1663;
        float _2156 = (_2150 * _1676) + _1667;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_13_35_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_13_35_ladder_2;
        _1694 = frontier_phi_13_35_ladder_1;
        _1696 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1612);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _649);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1754 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1758 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1762 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1765 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1768 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1771 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1909;
        if (_1765 > 0.0)
        {
            _1909 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1909 = frontier_phi_25_21_ladder;
        }
        float _2174;
        if (_1768 > 0.0)
        {
            _2174 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2174 = frontier_phi_37_32_ladder;
        }
        float _2379;
        if (_1771 > 0.0)
        {
            _2379 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2379 = frontier_phi_46_43_ladder;
        }
        float _2381 = isnan(_2174) ? _1909 : (isnan(_1909) ? _2174 : min(_1909, _2174));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1765) + _1754;
        float _2387 = (_2382 * _1768) + _1758;
        float _2388 = (_2382 * _1771) + _1762;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_22_46_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1790 = frontier_phi_22_46_ladder_2;
        _1792 = frontier_phi_22_46_ladder_1;
        _1794 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1701);
        _1790 = _1774.x * cbModelParam._m0[1u].z;
        _1792 = _1774.y * cbModelParam._m0[1u].z;
        _1794 = _1774.z * cbModelParam._m0[1u].z;
    }
    float _1806 = ((((1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _812)) * _796;
    float _1807 = _1806 * ((cbModelParam._m0[1u].w * (_1790 - _1692)) + _1692);
    float _1808 = _1806 * ((cbModelParam._m0[1u].w * (_1792 - _1694)) + _1694);
    float _1809 = _1806 * ((cbModelParam._m0[1u].w * (_1794 - _1696)) + _1696);
    float _1812 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1807 * cbSceneParam._m0[91u].x));
    uvec4 _1828 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1830 = _1828.x * 14u;
    uint _1831 = _1830 + 13u;
    float _1838 = _796 + (-1.0);
    float _1843 = (cbLight._m0[_1831].x * _1838) + 1.0;
    float _1844 = (cbLight._m0[_1831].y * _1838) + 1.0;
    float _1845 = (cbLight._m0[_1831].z * _1838) + 1.0;
    float _1846 = (cbLight._m0[_1831].w * _1838) + 1.0;
    uint _1847 = _1830 + 5u;
    float _1853 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1857 = _1830 + 4u;
    float _1863 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1867 = _1830 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_646, _647, _648));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_646, _647, _648));
    float _3983 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _3994 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1847].x * _1853) * _1888) + ((cbLight._m0[_1857].x * _1863) * _1886);
    float _1896 = ((_1853 * cbLight._m0[_1847].y) * _1888) + ((_1863 * cbLight._m0[_1857].y) * _1886);
    float _1897 = ((_1853 * cbLight._m0[_1847].z) * _1888) + ((_1863 * cbLight._m0[_1857].z) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1830 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1903)
    {
        _1914 = _1895;
        _1916 = _1896;
        _1918 = _1897;
    }
    else
    {
        uint _1922 = _1830 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1830 + 2u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _4005 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1941 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1895;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1896;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1897;
    }
    bool _1921 = _1901.y == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1921)
    {
        _1959 = _1914;
        _1961 = _1916;
        _1963 = _1918;
    }
    else
    {
        uint _2118 = _1830 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1830 + 3u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4021 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2137 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1959 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1914;
        _1961 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1916;
        _1963 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1918;
    }
    uint _1966 = _1830 + 8u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _649) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1830].x + _725;
    float _1982 = cbLight._m0[_1830].y + _726;
    float _1983 = cbLight._m0[_1830].z + _727;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_1830].xyz));
    float _4037 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _1995 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1996 = dot(vec3(_646, _647, _648), vec3(_1988, _1989, _1990));
    float _4059 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1988, _1989, _1990));
    float _4070 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1980 * _1980;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1980;
    float _2031 = (0.5 / (((_1995 * ((_1994 * _2020) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2020) + _1980) * _1994))) * _1994;
    float _4081 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    uint _2044 = _1830 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _649) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1867].x + _725;
    float _2058 = cbLight._m0[_1867].y + _726;
    float _2059 = cbLight._m0[_1867].z + _727;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_1867].xyz));
    float _4092 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2071 = dot(vec3(_646, _647, _648), vec3(_2064, _2065, _2066));
    float _4103 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2064, _2065, _2066));
    float _4114 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2056;
    float _2103 = (0.5 / (((_1995 * ((_2070 * _2093) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2093) + _2056) * _2070))) * _2070;
    float _4125 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2115 = (((_2092 * cbLight._m0[_2044].x) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].x) * _2033) * _1863);
    float _2116 = (((_2092 * cbLight._m0[_2044].y) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].y) * _2033) * _1863);
    float _2117 = (((_2092 * cbLight._m0[_2044].z) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].z) * _2033) * _1863);
    float _2179;
    float _2181;
    float _2183;
    if (_1903)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1830 + 2u;
        uint _2189 = _1830 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _649) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _725;
        float _2206 = cbLight._m0[_2185].y + _726;
        float _2207 = cbLight._m0[_2185].z + _727;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2185].xyz));
        float _4136 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2219 = dot(vec3(_646, _647, _648), vec3(_2212, _2213, _2214));
        float _4147 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4158 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = 1.0 - _2204;
        float _2251 = (0.5 / (((_1995 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2241) + _2204) * _2218))) * _2218;
        float _4169 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2179 = (((_2240 * cbLight._m0[_2189].x) * _2253) * _2254) + _2115;
        _2181 = (((_2240 * cbLight._m0[_2189].y) * _2253) * _2254) + _2116;
        _2183 = (((_2240 * cbLight._m0[_2189].z) * _2253) * _2254) + _2117;
    }
    float _2289;
    float _2291;
    float _2293;
    if (_1921)
    {
        _2289 = _2179;
        _2291 = _2181;
        _2293 = _2183;
    }
    else
    {
        uint _2300 = _1830 + 3u;
        uint _2304 = _1830 + 11u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _649) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _725;
        float _2321 = cbLight._m0[_2300].y + _726;
        float _2322 = cbLight._m0[_2300].z + _727;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2300].xyz));
        float _4185 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2334 = dot(vec3(_646, _647, _648), vec3(_2327, _2328, _2329));
        float _4196 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4207 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_1995 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2356) + _2319) * _2333))) * _2333;
        float _4218 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2289 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2179;
        _2291 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2181;
        _2293 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2183;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1828.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            uint _2743 = 0u;
            uint _2752;
            bool _2753;
            for (;;)
            {
                _2752 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                _2753 = _2752 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2753)
                {
                    frontier_phi_61_pred = _2737;
                    frontier_phi_61_pred_1 = _2742;
                    frontier_phi_61_pred_2 = _2741;
                    frontier_phi_61_pred_3 = _2740;
                    frontier_phi_61_pred_4 = _2739;
                    frontier_phi_61_pred_5 = _2738;
                }
                else
                {
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    uint _2867;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2752;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    for (;;)
                    {
                        uint _2871 = uint(findLSB(_2867)) + (_2743 << 5u);
                        uint _2868 = (_2867 + 4294967295u) & _2867;
                        uint _2873 = _2871 * 48u;
                        vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2893 = (_2871 * 48u) + 4u;
                        vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2912 = (_2871 * 48u) + 8u;
                        vec3 _2923 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x));
                        float _2927 = _2887.x - _2445;
                        float _2928 = _2887.y - _2446;
                        float _2929 = _2887.z - _2447;
                        float _2930 = dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929));
                        float _2933 = inversesqrt(_2930);
                        float _2934 = _2933 * _2927;
                        float _2935 = _2933 * _2928;
                        float _2936 = _2933 * _2929;
                        float _2937 = dot(vec3(_752, _755, _758), vec3(_2934, _2935, _2936));
                        float _2942 = 1.0 - (_2930 * _2887.w);
                        float _4244 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2944 = sqrt(_2930) * _2906.w;
                        float _2947 = 1.39999997615814208984375 / (_2944 + 1.39999997615814208984375);
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2937) + _2948;
                        float _2954 = _2944 * _2944;
                        float _2958 = ((isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))) * _2943) / ((_2954 * 0.699999988079071044921875) + 1.0);
                        float _2962 = (-0.0) - _2445;
                        float _2963 = (-0.0) - _2446;
                        float _2964 = (-0.0) - _2447;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2979 = exp2(log2(1.0 / ((_2954 * 3.5) + 5.0)) * 0.25);
                        float _2980 = 1.0 - _812;
                        float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                        float _2988 = _2987 * _2987;
                        float _2989 = _2988 * _2988;
                        float _2990 = _2969 + _2934;
                        float _2991 = _2970 + _2935;
                        float _2992 = _2971 + _2936;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _3000 = dot(vec3(_752, _755, _758), vec3(_2969, _2970, _2971));
                        float _4260 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _3004 = dot(vec3(_752, _755, _758), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                        float _4271 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                        float _3012 = _2947 * _2988;
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _2937) + _3013;
                        float _4282 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _3018 = 1.0 - _2988;
                        float _3028 = (0.5 / (((_3017 * ((_3003 * _3018) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2988) * _3003))) * _3017;
                        float _4293 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3039 = (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3011 * _3011) * ((_2954 * 2.1991131305694580078125) + 3.141590118408203125))) * _2943;
                        _2796 = (_2958 * _2906.x) + _2864;
                        _2797 = (_2958 * _2906.y) + _2865;
                        _2798 = (_2958 * _2906.z) + _2866;
                        _2793 = (_3039 * _2923.x) + _2861;
                        _2794 = (_3039 * _2923.y) + _2862;
                        _2795 = (_3039 * _2923.z) + _2863;
                        if (_2868 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2868;
                        }
                    }
                    frontier_phi_61_pred = _2793;
                    frontier_phi_61_pred_1 = _2798;
                    frontier_phi_61_pred_2 = _2797;
                    frontier_phi_61_pred_3 = _2796;
                    frontier_phi_61_pred_4 = _2795;
                    frontier_phi_61_pred_5 = _2794;
                }
                _2593 = frontier_phi_61_pred;
                _2603 = frontier_phi_61_pred_1;
                _2601 = frontier_phi_61_pred_2;
                _2599 = frontier_phi_61_pred_3;
                _2597 = frontier_phi_61_pred_4;
                _2595 = frontier_phi_61_pred_5;
                uint _2744 = _2743 + 1u;
                if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2737 = _2593;
                    _2738 = _2595;
                    _2739 = _2597;
                    _2740 = _2599;
                    _2741 = _2601;
                    _2742 = _2603;
                    _2743 = _2744;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((4294967295u << _2609) & _2491) == 0u)
        {
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
            _2713 = _2600;
            _2715 = _2602;
        }
        else
        {
            float _2730 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2731 = _2730 * _2445;
            float _2732 = _2730 * _2446;
            float _2733 = _2730 * _2447;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2844 = _2592;
                float _2845 = _2594;
                float _2846 = _2596;
                float _2847 = _2598;
                float _2848 = _2600;
                float _2849 = _2602;
                uint _2850 = _2609;
                uint _2859;
                bool _2860;
                for (;;)
                {
                    _2859 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                    _2860 = _2859 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2860)
                    {
                        frontier_phi_67_pred = _2847;
                        frontier_phi_67_pred_1 = _2848;
                        frontier_phi_67_pred_2 = _2849;
                        frontier_phi_67_pred_3 = _2846;
                        frontier_phi_67_pred_4 = _2845;
                        frontier_phi_67_pred_5 = _2844;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        float _3059 = _2846;
                        float _3060 = _2847;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        uint _3063 = _2859;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3132;
                        vec4 _3148;
                        float _3194;
                        bool _3195;
                        for (;;)
                        {
                            uint _3074 = ((_2850 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3119 = (_3074 * 40u) + 16u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3135 = (_3074 * 40u) + 20u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3074 * 40u) + 24u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3169 = (_3074 * 40u) + 28u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3194 = fma(_2447, _3182.z, fma(_2446, _3182.y, _3182.x * _2445)) + _3182.w;
                            _3195 = !((fma(_2447, _3163.z, fma(_2446, _3163.y, _3163.x * _2445)) + _3163.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3195)
                            {
                                float _3222 = _3089.x - _2445;
                                float _3223 = _3089.y - _2446;
                                float _3224 = _3089.z - _2447;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3090 * _3090));
                                float _4304 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3240 = sqrt(_3225) * _3105.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3246 = ((1.0 - _3243) * dot(vec3(_3229, _3230, _3231), vec3(_752, _755, _758))) + _3243;
                                float _3249 = _3240 * _3240;
                                float _3253 = (fma(_2447, _3132.z, fma(_2446, _3132.y, _3132.x * _2445)) + _3132.w) / _3194;
                                float _3254 = (fma(_2447, _3148.z, fma(_2446, _3148.y, _3148.x * _2445)) + _3148.w) / _3194;
                                float _3258 = 1.0 - dot(vec2(_3253, _3254), vec2(_3253, _3254));
                                float _4320 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3260 = _3259 * (((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3236) / ((_3249 * 0.699999988079071044921875) + 1.0));
                                float _3272 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                                float _3273 = 1.0 - _812;
                                float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                                float _3281 = _3280 * _3280;
                                float _3282 = _3281 * _3281;
                                float _3283 = _3229 - _2731;
                                float _3284 = _3230 - _2732;
                                float _3285 = _3231 - _2733;
                                float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                                float _3293 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2731, (-0.0) - _2732, (-0.0) - _2733));
                                float _4331 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3297 = dot(vec3(_752, _755, _758), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                                float _4342 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                                float _3305 = _3242 * _3281;
                                float _3306 = _3305 * _3305;
                                float _3312 = ((1.0 - _3306) * dot(vec3(_752, _755, _758), vec3(_3229, _3230, _3231))) + _3306;
                                float _4353 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3314 = 1.0 - _3281;
                                float _3324 = (0.5 / (((_3313 * ((_3296 * _3314) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3281) * _3296))) * _3313;
                                float _4364 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3334 = (_3259 * _3236) * (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3304 * _3304) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3334 * _3117.x;
                                frontier_phi_73_pred_1 = _3334 * _3117.y;
                                frontier_phi_73_pred_2 = _3260 * _3105.z;
                                frontier_phi_73_pred_3 = _3260 * _3105.y;
                                frontier_phi_73_pred_4 = _3260 * _3105.x;
                                frontier_phi_73_pred_5 = _3334 * _3117.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3338 = frontier_phi_73_pred;
                            _3339 = frontier_phi_73_pred_1;
                            _3343 = frontier_phi_73_pred_2;
                            _3342 = frontier_phi_73_pred_3;
                            _3341 = frontier_phi_73_pred_4;
                            _3340 = frontier_phi_73_pred_5;
                            _3047 = _3341 + _3060;
                            _3048 = _3342 + _3061;
                            _3049 = _3343 + _3062;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            _3046 = _3340 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3047;
                        frontier_phi_67_pred_1 = _3048;
                        frontier_phi_67_pred_2 = _3049;
                        frontier_phi_67_pred_3 = _3046;
                        frontier_phi_67_pred_4 = _3045;
                        frontier_phi_67_pred_5 = _3044;
                    }
                    _2712 = frontier_phi_67_pred;
                    _2714 = frontier_phi_67_pred_1;
                    _2716 = frontier_phi_67_pred_2;
                    _2710 = frontier_phi_67_pred_3;
                    _2708 = frontier_phi_67_pred_4;
                    _2706 = frontier_phi_67_pred_5;
                    uint _2851 = _2850 + 1u;
                    if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2844 = _2706;
                        _2845 = _2708;
                        _2846 = _2710;
                        _2847 = _2712;
                        _2848 = _2714;
                        _2849 = _2716;
                        _2850 = _2851;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2714;
                frontier_phi_55_56_ladder_1 = _2716;
                frontier_phi_55_56_ladder_2 = _2712;
                frontier_phi_55_56_ladder_3 = _2710;
                frontier_phi_55_56_ladder_4 = _2708;
                frontier_phi_55_56_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_55_56_ladder = _2600;
                frontier_phi_55_56_ladder_1 = _2602;
                frontier_phi_55_56_ladder_2 = _2598;
                frontier_phi_55_56_ladder_3 = _2596;
                frontier_phi_55_56_ladder_4 = _2594;
                frontier_phi_55_56_ladder_5 = _2592;
            }
            _2705 = frontier_phi_55_56_ladder_5;
            _2707 = frontier_phi_55_56_ladder_4;
            _2709 = frontier_phi_55_56_ladder_3;
            _2711 = frontier_phi_55_56_ladder_2;
            _2713 = frontier_phi_55_56_ladder;
            _2715 = frontier_phi_55_56_ladder_1;
        }
        float _2720 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2504 = (_2720 * _2711) + _1959;
        _2506 = (_2720 * _2713) + _1961;
        _2508 = (_2720 * _2715) + _1963;
        _2510 = ((_2705 * 0.039999999105930328369140625) * _2720) + _2289;
        _2512 = ((_2707 * 0.039999999105930328369140625) * _2720) + _2291;
        _2514 = ((_2709 * 0.039999999105930328369140625) * _2720) + _2293;
    }
    else
    {
        _2504 = _1959;
        _2506 = _1961;
        _2508 = _1963;
        _2510 = _2289;
        _2512 = _2291;
        _2514 = _2293;
    }
    float _4380 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4391 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4402 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    uint _2534 = _234 + 6u;
    float _2542 = _733 / cbSceneParam._m0[86u].x;
    float _2543 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _667 : (isnan(_667) ? cbSceneParam._m0[77u].w : min(_667, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_667 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_667) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _667 : min(cbSceneParam._m0[80u].w, _667));
        float _2618 = _2617 / _667;
        float _2629 = _2618 * _718;
        float _2630 = _719 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2633 = _2618 * _720;
        float _2635 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2630;
        float _2643 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2806;
        if (abs((_2631 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2806 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2766 = 1.0 / cbSceneParam._m0[80u].x;
            float _2767 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2768 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            _2806 = ((abs(_2643 / _2631) * cbSceneParam._m0[80u].y) * ((((_2777 - _2778) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))))) * _2766)) - ((exp2(_2653 * _2777) - exp2(_2653 * _2778)) * _2766))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2808 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2817 = exp2((_2806 * (-1.44269502162933349609375)) * (1.0 - _2808.w));
        float _2818 = log2(_2817);
        float _2834 = log2(_2562);
        _2655 = (exp2(_2834 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].x)) * _2808.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2657 = (exp2(_2834 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].y)) * _2808.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2659 = (exp2(_2834 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].z)) * _2808.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2661 = _2817 * _2562;
    }
    else
    {
        _2655 = _2559;
        _2657 = _2560;
        _2659 = _2561;
        _2661 = _2562;
    }
    float _2673 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2674 = _2673 == 3.0;
    float _2675 = log2(_2661);
    float _2682 = exp2(_2675 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2504 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _796))) + ((_2510 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2683 = exp2(_2675 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2506 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _796))) + ((_2512 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2684 = exp2(_2675 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2508 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _796))) + ((_2514 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2693 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2693 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.y = _2693 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.z = _2693 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.w = cbInstanceData._m0[_2534].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2534].w;
}


