#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1329;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3919 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3930 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3941 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3952 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _455 = (_448 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _456 = (_448 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _457 = (_448 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3963 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _540;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _448) + _603;
    float _613 = ((_584.y - _604) * _448) + _604;
    float _614 = ((_584.z - _605) * _448) + _605;
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _298) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _299) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _521) + _614;
    float _642 = ((((_626.x - _612) * _521) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _521) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3974 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _681 = (_642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)))) + (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _682 = (_643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)))) + (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _696 = _694.x;
    float _697 = 1.0 - _696;
    float _723 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_696 - _697) * cbMtdParam._m0[24u].y) + _697) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3985 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _732 = ((((cbMtdParam._m0[10u].x - _547) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _724) + _547;
    float _733 = ((((cbMtdParam._m0[10u].y - _548) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _724) + _548;
    float _734 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _549)) * _724) + _549;
    float _739 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    float _743 = ((_669.z - _739) * cbMtdParam._m0[19u].w) + _739;
    float _747 = ((cbMtdParam._m0[23u].y - _743) * _724) + _743;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3996 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _790 = (_724 * (((cbMtdParam._m0[22u].z * _681) - _681) + _772)) + _681;
    float _791 = (_724 * (((cbMtdParam._m0[22u].z * _682) - _682) + _773)) + _682;
    float _792 = (_724 * (sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _649)) + _649;
    float _794 = cbMtdParam._m0[22u].x + _669.w;
    float _797 = fma(_792, _247 * NORMAL.x, fma(_791, _254 * TANGENT.x, (_240 * _232) * _790));
    float _800 = fma(_792, _247 * NORMAL.y, fma(_791, _254 * TANGENT.y, (_240 * _233) * _790));
    float _803 = fma(_792, _247 * NORMAL.z, fma(_791, _254 * TANGENT.z, (_240 * _234) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _4007 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _811 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4029 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4040 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4051 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _917 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _920 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _934 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_934].z;
    float _4062 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _958 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * TEXCOORD_5.w) * _954.x;
    float _959 = dot(vec3(_808, _809, _810), vec3(_887, _888, _889));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _808) - _887;
    float _967 = (_962 * _809) - _888;
    float _968 = (_962 * _810) - _889;
    float _972 = abs(dot(vec3(_887, _888, _889), vec3(_808, _809, _810)));
    float _4095 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_811);
    float _987 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1328;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1053 = fma(_1027, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019));
        float _1057 = fma(_1027, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019));
        float _1061 = fma(_1027, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019));
        float _1086 = _1019 + _808;
        float _1087 = _1023 + _809;
        float _1088 = _1027 + _810;
        float _1098 = fma(_1088, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086)) - _1053;
        float _1099 = fma(_1088, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086)) - _1057;
        float _1100 = fma(_1088, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086)) - _1061;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1053 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1057 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[34u].z) + ((((((_1061 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1156 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1122.x + (-0.5));
        float _1158 = _1156 * (_1122.y + (-0.5));
        float _1159 = _1156 * (_1122.z + (-0.5));
        float _1166 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1129.x + (-0.5));
        float _1168 = _1166 * (_1129.y + (-0.5));
        float _1169 = _1166 * (_1129.z + (-0.5));
        float _1176 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1136.x + (-0.5));
        float _1178 = _1176 * (_1136.y + (-0.5));
        float _1179 = _1176 * (_1136.z + (-0.5));
        float _1186 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1143.x + (-0.5));
        float _1188 = _1186 * (_1143.y + (-0.5));
        float _1189 = _1186 * (_1143.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1210 = (dot(vec3(_808, _809, _810), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1220 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4143 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1222 + 1.0))) + _1227) * _1190;
        float _1237 = _1158 * 0.5;
        float _1238 = _1168 * 0.5;
        float _1239 = _1178 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_808, _809, _810), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4176 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1264 + 1.0))) + _1269) * _1191;
        float _1279 = _1159 * 0.5;
        float _1280 = _1169 * 0.5;
        float _1281 = _1179 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_808, _809, _810), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4209 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1306 + 1.0))) + _1311) * _1192;
        _1328 = _1159;
        _1330 = _1158;
        _1331 = _1157;
        _1332 = _1169;
        _1333 = _1168;
        _1334 = _1167;
        _1335 = _1179;
        _1336 = _1178;
        _1337 = _1177;
        _1338 = _1192;
        _1339 = _1191;
        _1340 = _1190;
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1329;
        _1330 = _1329;
        _1331 = _1329;
        _1332 = _1329;
        _1333 = _1329;
        _1334 = _1329;
        _1335 = _1329;
        _1336 = _1329;
        _1337 = _1329;
        _1338 = _1329;
        _1339 = _1329;
        _1340 = _1329;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_1027, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019));
        float _1371 = fma(_1027, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019));
        float _1375 = fma(_1027, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019));
        float _1398 = _1019 + _808;
        float _1399 = _1023 + _809;
        float _1400 = _1027 + _810;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_808, _809, _810), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4272 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_808, _809, _810), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4305 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_808, _809, _810), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4338 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1329;
        _1637 = _1329;
        _1638 = _1329;
        _1639 = _1329;
        _1640 = _1329;
        _1641 = _1329;
        _1642 = _1329;
        _1643 = _1329;
        _1644 = _1329;
        _1645 = _1329;
        _1646 = _1329;
        _1647 = _1329;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1341)) + _1341;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1342)) + _1342;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1343)) + _1343;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _966 * 0.5;
    float _1705 = _967 * 0.5;
    float _1706 = _968 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1328, _1332, _1335, _1338));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1822 = fma(_1027, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019)) + cbModelParam._m0[13u].w;
        float _1826 = fma(_1027, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019)) + cbModelParam._m0[14u].w;
        float _1830 = fma(_1027, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019)) + cbModelParam._m0[15u].w;
        float _1833 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1836 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1839 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1867;
        if (_1833 > 0.0)
        {
            _1867 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1867 = frontier_phi_14_12_ladder;
        }
        float _2038;
        if (_1836 > 0.0)
        {
            _2038 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2038 = frontier_phi_23_19_ladder;
        }
        float _2333;
        if (_1839 > 0.0)
        {
            _2333 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2333 = frontier_phi_35_30_ladder;
        }
        float _2335 = isnan(_2038) ? _1867 : (isnan(_1867) ? _2038 : min(_1867, _2038));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1833) + _1822;
        float _2341 = (_2336 * _1836) + _1826;
        float _2342 = (_2336 * _1839) + _1830;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_13_35_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1855 = frontier_phi_13_35_ladder_2;
        _1857 = frontier_phi_13_35_ladder_1;
        _1859 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1773);
        _1855 = _1843.x * cbModelParam._m0[1u].y;
        _1857 = _1843.y * cbModelParam._m0[1u].y;
        _1859 = _1843.z * cbModelParam._m0[1u].y;
    }
    float _1863 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1863 : min(cbModelParam._m0[25u].w, _1863));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_1027, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_1027, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_1027, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1933 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1936 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2043;
        if (_1930 > 0.0)
        {
            _2043 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2043 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1933 > 0.0)
        {
            _2360 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_1936 > 0.0)
        {
            _2687 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2687 = frontier_phi_47_44_ladder;
        }
        float _2689 = isnan(_2360) ? _2043 : (isnan(_2043) ? _2360 : min(_2043, _2360));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1930) + _1919;
        float _2695 = (_2690 * _1933) + _1923;
        float _2696 = (_2690 * _1936) + _1927;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1864);
            frontier_phi_22_47_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_22_47_ladder_2;
        _1957 = frontier_phi_22_47_ladder_1;
        _1959 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1864);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1971 = ((((1.0 - _987) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_987 * _974)) * _958;
    float _1972 = _1971 * ((cbModelParam._m0[1u].w * (_1955 - _1855)) + _1855);
    float _1973 = _1971 * ((cbModelParam._m0[1u].w * (_1957 - _1857)) + _1857);
    float _1974 = _1971 * ((cbModelParam._m0[1u].w * (_1959 - _1859)) + _1859);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2030 = _2017 / _2029;
    float _2031 = _2021 / _2029;
    float _2032 = _2025 / _2029;
    float _2179;
    float _2180;
    float _2181;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2059 = ((uint(_2032 > cbSceneParam._m0[59u].y) + uint(_2032 > cbSceneParam._m0[59u].x)) + uint(_2032 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2060 = _2059 + 43u;
        uint _2068 = _2059 + 44u;
        uint _2076 = _2059 + 45u;
        uint _2084 = _2059 + 46u;
        float _2095 = fma(_2029, cbSceneParam._m0[_2060].w, fma(_2025, cbSceneParam._m0[_2060].z, fma(_2021, cbSceneParam._m0[_2060].y, _2017 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2029, cbSceneParam._m0[_2068].w, fma(_2025, cbSceneParam._m0[_2068].z, fma(_2021, cbSceneParam._m0[_2068].y, _2017 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2029, cbSceneParam._m0[_2084].w, fma(_2025, cbSceneParam._m0[_2084].z, fma(_2021, cbSceneParam._m0[_2084].y, _2017 * cbSceneParam._m0[_2084].x)));
        float _2112 = cbSceneParam._m0[33u].z * _2107;
        float _2114 = cbSceneParam._m0[33u].w * _2107;
        float _2117 = fma(_2029, cbSceneParam._m0[_2076].w, fma(_2025, cbSceneParam._m0[_2076].z, fma(_2021, cbSceneParam._m0[_2076].y, _2017 * cbSceneParam._m0[_2076].x))) / _2107;
        float _2165 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
        float _4464 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2172 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2095) / _2107, (_2114 + _2099) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2095) / _2107, (_2099 - _2112) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2112) / _2107, (_2099 - _2114) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2114) / _2107, (_2112 + _2099) / _2107), _2117), 0.0)).x), vec4(0.25)));
        _2179 = 1.0 - (_2172 * cbSceneParam._m0[34u].x);
        _2180 = 1.0 - (_2172 * cbSceneParam._m0[34u].y);
        _2181 = 1.0 - (_2172 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2179 = 1.0;
        _2180 = 1.0;
        _2181 = 1.0;
    }
    float _2245;
    float _2247;
    float _2249;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2233 = fma(_2029, cbSceneParam._m0[63u].w, fma(_2025, cbSceneParam._m0[63u].z, fma(_2021, cbSceneParam._m0[63u].y, _2017 * cbSceneParam._m0[63u].x)));
        float _2234 = fma(_2029, cbSceneParam._m0[60u].w, fma(_2025, cbSceneParam._m0[60u].z, fma(_2021, cbSceneParam._m0[60u].y, _2017 * cbSceneParam._m0[60u].x))) / _2233;
        float _2235 = fma(_2029, cbSceneParam._m0[61u].w, fma(_2025, cbSceneParam._m0[61u].z, fma(_2021, cbSceneParam._m0[61u].y, _2017 * cbSceneParam._m0[61u].x))) / _2233;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2234 >= cbSceneParam._m0[64u].x) && (_2235 >= cbSceneParam._m0[64u].y)) && (_2234 <= cbSceneParam._m0[64u].z)) && (_2235 <= cbSceneParam._m0[64u].w))
        {
            float _2373 = fma(_2029, cbSceneParam._m0[62u].w, fma(_2025, cbSceneParam._m0[62u].z, fma(_2021, cbSceneParam._m0[62u].y, _2017 * cbSceneParam._m0[62u].x))) / _2233;
            float _2377 = isnan(cbSceneParam._m0[41u].w) ? _2373 : (isnan(_2373) ? cbSceneParam._m0[41u].w : max(_2373, cbSceneParam._m0[41u].w));
            float _2420 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
            float _4480 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
            float _2427 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2234, cbSceneParam._m0[33u].w + _2235), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2234, _2235 - cbSceneParam._m0[33u].z), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].z, _2235 - cbSceneParam._m0[33u].w), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2235), _2377), 0.0)).x), vec4(0.25)));
            float _2431 = 1.0 - (_2427 * cbSceneParam._m0[34u].x);
            float _2432 = 1.0 - (_2427 * cbSceneParam._m0[34u].y);
            float _2433 = 1.0 - (_2427 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_34_33_ladder_1 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
            frontier_phi_34_33_ladder_2 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
        }
        else
        {
            frontier_phi_34_33_ladder = _2181;
            frontier_phi_34_33_ladder_1 = _2180;
            frontier_phi_34_33_ladder_2 = _2179;
        }
        _2245 = frontier_phi_34_33_ladder_2;
        _2247 = frontier_phi_34_33_ladder_1;
        _2249 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2245 = _2179;
        _2247 = _2180;
        _2249 = _2181;
    }
    uvec4 _2254 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2256 = _2254.x * 14u;
    uint _2257 = _2256 + 13u;
    float _2264 = _958 + (-1.0);
    float _2269 = (cbLight._m0[_2257].x * _2264) + 1.0;
    float _2270 = (cbLight._m0[_2257].y * _2264) + 1.0;
    float _2271 = (cbLight._m0[_2257].z * _2264) + 1.0;
    float _2272 = (cbLight._m0[_2257].w * _2264) + 1.0;
    uint _2273 = _2256 + 5u;
    float _2279 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2283 = _2256 + 4u;
    float _2292 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2296 = _2256 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_808, _809, _810));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_808, _809, _810));
    float _4516 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4527 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2273].x * _2279) * _2317) + (((cbLight._m0[_2283].x * _2245) * _2292) * _2315);
    float _2325 = ((_2279 * cbLight._m0[_2273].y) * _2317) + (((cbLight._m0[_2283].y * _2247) * _2292) * _2315);
    float _2326 = ((_2279 * cbLight._m0[_2273].z) * _2317) + (((cbLight._m0[_2283].z * _2249) * _2292) * _2315);
    uvec4 _2330 = floatBitsToUint(cbLight._m0[_2256 + 12u]);
    bool _2332 = _2330.x == 0u;
    float _2434;
    float _2436;
    float _2438;
    if (_2332)
    {
        _2434 = _2324;
        _2436 = _2325;
        _2438 = _2326;
    }
    else
    {
        uint _2442 = _2256 + 6u;
        float _2458 = (dot(vec3(cbLight._m0[_2256 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4538 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2461 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2434 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2324;
        _2436 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2325;
        _2438 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2326;
    }
    bool _2441 = _2330.y == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2441)
    {
        _2496 = _2434;
        _2498 = _2436;
        _2500 = _2438;
    }
    else
    {
        uint _2658 = _2256 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2256 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4554 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2677 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2496 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2434;
        _2498 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2436;
        _2500 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2438;
    }
    uint _2503 = _2256 + 8u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _811) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2256].x + _887;
    float _2519 = cbLight._m0[_2256].y + _888;
    float _2520 = cbLight._m0[_2256].z + _889;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2256].xyz));
    float _4570 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _4581 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2532 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2533 = dot(vec3(_808, _809, _810), vec3(_2525, _2526, _2527));
    float _4592 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2525, _2526, _2527));
    float _4603 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2517 * _2517;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2556 = (exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2557 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2532 * ((_2531 * _2557) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2557) + _2517) * _2531))) * _2531;
    float _4614 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    uint _2584 = _2256 + 9u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _811) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2296].x + _887;
    float _2598 = cbLight._m0[_2296].y + _888;
    float _2599 = cbLight._m0[_2296].z + _889;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2296].xyz));
    float _4625 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2611 = dot(vec3(_808, _809, _810), vec3(_2604, _2605, _2606));
    float _4636 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2604, _2605, _2606));
    float _4647 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2596 * _2596;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2633 = 1.0 - _2596;
    float _2643 = (0.5 / (((_2532 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2633) + _2596) * _2610))) * _2610;
    float _4658 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    float _2655 = (((_2632 * cbLight._m0[_2584].x) * _2645) * _2279) + ((((cbLight._m0[_2503].x * _2245) * _2556) * _2570) * _2292);
    float _2656 = (((_2632 * cbLight._m0[_2584].y) * _2645) * _2279) + ((((cbLight._m0[_2503].y * _2247) * _2556) * _2570) * _2292);
    float _2657 = (((_2632 * cbLight._m0[_2584].z) * _2645) * _2279) + ((((cbLight._m0[_2503].z * _2249) * _2556) * _2570) * _2292);
    float _2713;
    float _2715;
    float _2717;
    if (_2332)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2256 + 2u;
        uint _2723 = _2256 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _811) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _887;
        float _2740 = cbLight._m0[_2719].y + _888;
        float _2741 = cbLight._m0[_2719].z + _889;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2719].xyz));
        float _4669 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2753 = dot(vec3(_808, _809, _810), vec3(_2746, _2747, _2748));
        float _4680 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4691 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2774 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2775 = 1.0 - _2738;
        float _2785 = (0.5 / (((_2532 * ((_2752 * _2775) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2775) + _2738) * _2752))) * _2752;
        float _4702 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2713 = (((_2774 * cbLight._m0[_2723].x) * _2787) * _2788) + _2655;
        _2715 = (((_2774 * cbLight._m0[_2723].y) * _2787) * _2788) + _2656;
        _2717 = (((_2774 * cbLight._m0[_2723].z) * _2787) * _2788) + _2657;
    }
    float _2819;
    float _2821;
    float _2823;
    if (_2441)
    {
        _2819 = _2713;
        _2821 = _2715;
        _2823 = _2717;
    }
    else
    {
        uint _2830 = _2256 + 3u;
        uint _2834 = _2256 + 11u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _811) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _887;
        float _2851 = cbLight._m0[_2830].y + _888;
        float _2852 = cbLight._m0[_2830].z + _889;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2830].xyz));
        float _4718 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2864 = dot(vec3(_808, _809, _810), vec3(_2857, _2858, _2859));
        float _4729 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4740 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2885 = (exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2886 = 1.0 - _2849;
        float _2896 = (0.5 / (((_2532 * ((_2863 * _2886) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2886) + _2849) * _2863))) * _2863;
        float _4751 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2819 = (((_2885 * cbLight._m0[_2834].x) * _2898) * _2899) + _2713;
        _2821 = (((_2885 * cbLight._m0[_2834].y) * _2898) * _2899) + _2715;
        _2823 = (((_2885 * cbLight._m0[_2834].z) * _2898) * _2899) + _2717;
    }
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_2254.y == 0u)
    {
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.x;
        uint _2932 = uint((float(_2920.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2921))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2921)));
        float _2942 = (log2(_2032 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        uint _2946 = uint(isnan(14.0) ? _2943 : (isnan(_2943) ? 14.0 : min(_2943, 14.0)));
        uvec4 _2951 = texelFetch(g_lightClusterGridBuffer, int(((_2946 << 2u) + (_2932 << 6u)) >> 2u));
        uint _2952 = _2951.x;
        uint _2953 = _2920.z;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((((1u << ((_2953 >> 4u) & 15u)) + 4294967295u) & _2952) == 0u) || ((_2953 & 240u) == 0u))
        {
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
        }
        else
        {
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            uint _3183 = 0u;
            uint _3192;
            bool _3193;
            for (;;)
            {
                _3192 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                _3193 = _3192 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3193)
                {
                    frontier_phi_66_pred = _3182;
                    frontier_phi_66_pred_1 = _3181;
                    frontier_phi_66_pred_2 = _3180;
                    frontier_phi_66_pred_3 = _3179;
                    frontier_phi_66_pred_4 = _3178;
                    frontier_phi_66_pred_5 = _3177;
                }
                else
                {
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    uint _3307;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3192;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    for (;;)
                    {
                        uint _3311 = uint(findLSB(_3307)) + (_3183 << 5u);
                        uint _3308 = (_3307 + 4294967295u) & _3307;
                        uint _3313 = _3311 * 48u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3333 = (_3311 * 48u) + 4u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3352 = (_3311 * 48u) + 8u;
                        vec3 _3363 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x));
                        float _3367 = _3327.x - _2030;
                        float _3368 = _3327.y - _2031;
                        float _3369 = _3327.z - _2032;
                        float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                        float _3373 = inversesqrt(_3370);
                        float _3374 = _3373 * _3367;
                        float _3375 = _3373 * _3368;
                        float _3376 = _3373 * _3369;
                        float _3377 = dot(vec3(_914, _917, _920), vec3(_3374, _3375, _3376));
                        float _3382 = 1.0 - (_3370 * _3327.w);
                        float _4777 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3384 = sqrt(_3370) * _3346.w;
                        float _3387 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3377) + _3388;
                        float _3394 = _3384 * _3384;
                        float _3398 = ((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3383) / ((_3394 * 0.699999988079071044921875) + 1.0);
                        float _3402 = (-0.0) - _2030;
                        float _3403 = (-0.0) - _2031;
                        float _3404 = (-0.0) - _2032;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3418 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _974;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3431 = _3411 + _3376;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_914, _917, _920), vec3(_3409, _3410, _3411));
                        float _4793 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3443 = dot(vec3(_914, _917, _920), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4804 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3387 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3377) + _3452;
                        float _4815 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4826 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) / ((_3450 * _3450) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125))) * _3383;
                        _3236 = (_3398 * _3346.x) + _3304;
                        _3237 = (_3398 * _3346.y) + _3305;
                        _3238 = (_3398 * _3346.z) + _3306;
                        _3233 = (_3478 * _3363.x) + _3301;
                        _3234 = (_3478 * _3363.y) + _3302;
                        _3235 = (_3478 * _3363.z) + _3303;
                        if (_3308 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3308;
                        }
                    }
                    frontier_phi_66_pred = _3238;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                _3043 = frontier_phi_66_pred;
                _3041 = frontier_phi_66_pred_1;
                _3039 = frontier_phi_66_pred_2;
                _3037 = frontier_phi_66_pred_3;
                _3035 = frontier_phi_66_pred_4;
                _3033 = frontier_phi_66_pred_5;
                uint _3184 = _3183 + 1u;
                if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3177 = _3033;
                    _3178 = _3035;
                    _3179 = _3037;
                    _3180 = _3039;
                    _3181 = _3041;
                    _3182 = _3043;
                    _3183 = _3184;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
        }
        uvec4 _3046 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3047 = _3046.z;
        uint _3049 = (_3047 >> 8u) & 15u;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        if (((4294967295u << _3049) & _2952) == 0u)
        {
            _3145 = _3032;
            _3147 = _3034;
            _3149 = _3036;
            _3151 = _3038;
            _3153 = _3040;
            _3155 = _3042;
        }
        else
        {
            float _3170 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
            float _3171 = _3170 * _2030;
            float _3172 = _3170 * _2031;
            float _3173 = _3170 * _2032;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3049 < ((_3047 >> 12u) & 15u))
            {
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3284 = _3032;
                float _3285 = _3034;
                float _3286 = _3036;
                float _3287 = _3038;
                float _3288 = _3040;
                float _3289 = _3042;
                uint _3290 = _3049;
                uint _3299;
                bool _3300;
                for (;;)
                {
                    _3299 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                    _3300 = _3299 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3300)
                    {
                        frontier_phi_72_pred = _3289;
                        frontier_phi_72_pred_1 = _3288;
                        frontier_phi_72_pred_2 = _3287;
                        frontier_phi_72_pred_3 = _3286;
                        frontier_phi_72_pred_4 = _3285;
                        frontier_phi_72_pred_5 = _3284;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        uint _3502 = _3299;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3586;
                        float _3632;
                        bool _3633;
                        for (;;)
                        {
                            uint _3513 = ((_3290 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3513 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3513 * 40u) + 24u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3607 = (_3513 * 40u) + 28u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3632 = fma(_2032, _3620.z, fma(_2031, _3620.y, _3620.x * _2030)) + _3620.w;
                            _3633 = !((fma(_2032, _3601.z, fma(_2031, _3601.y, _3601.x * _2030)) + _3601.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3633)
                            {
                                float _3660 = _3528.x - _2030;
                                float _3661 = _3528.y - _2031;
                                float _3662 = _3528.z - _2032;
                                float _3663 = dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662));
                                float _3666 = inversesqrt(_3663);
                                float _3667 = _3666 * _3660;
                                float _3668 = _3666 * _3661;
                                float _3669 = _3666 * _3662;
                                float _3673 = 1.0 - (_3663 / (_3529 * _3529));
                                float _4837 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3678 = sqrt(_3663) * _3544.w;
                                float _3680 = 1.39999997615814208984375 / (_3678 + 1.39999997615814208984375);
                                float _3681 = _3680 * _3680;
                                float _3684 = ((1.0 - _3681) * dot(vec3(_3667, _3668, _3669), vec3(_914, _917, _920))) + _3681;
                                float _3687 = _3678 * _3678;
                                float _3691 = (fma(_2032, _3571.z, fma(_2031, _3571.y, _3571.x * _2030)) + _3571.w) / _3632;
                                float _3692 = (fma(_2032, _3586.z, fma(_2031, _3586.y, _3586.x * _2030)) + _3586.w) / _3632;
                                float _3696 = 1.0 - dot(vec2(_3691, _3692), vec2(_3691, _3692));
                                float _4853 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3698 = _3697 * (((isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0))) * _3674) / ((_3687 * 0.699999988079071044921875) + 1.0));
                                float _3710 = exp2(log2(1.0 / ((_3687 * 3.5) + 5.0)) * 0.25);
                                float _3711 = 1.0 - _974;
                                float _3718 = sqrt(1.0 - ((1.0 - (_3711 * _3711)) * (1.0 - (_3710 * _3710))));
                                float _3719 = _3718 * _3718;
                                float _3720 = _3719 * _3719;
                                float _3721 = _3667 - _3171;
                                float _3722 = _3668 - _3172;
                                float _3723 = _3669 - _3173;
                                float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                                float _3731 = dot(vec3(_914, _917, _920), vec3((-0.0) - _3171, (-0.0) - _3172, (-0.0) - _3173));
                                float _4864 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3735 = dot(vec3(_914, _917, _920), vec3(_3727 * _3721, _3727 * _3722, _3727 * _3723));
                                float _4875 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3742 = ((_3738 * _3738) * (_3720 + (-1.0))) + 1.0;
                                float _3743 = _3680 * _3719;
                                float _3744 = _3743 * _3743;
                                float _3750 = ((1.0 - _3744) * dot(vec3(_914, _917, _920), vec3(_3667, _3668, _3669))) + _3744;
                                float _4886 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3752 = 1.0 - _3719;
                                float _3762 = (0.5 / (((_3751 * ((_3734 * _3752) + _3719)) + 9.9999999392252902907785028219223e-09) + (((_3751 * _3752) + _3719) * _3734))) * _3751;
                                float _4897 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3772 = (_3697 * _3674) * (((_3720 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3742 * _3742) * ((_3687 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3698 * _3544.y;
                                frontier_phi_78_pred_1 = _3698 * _3544.x;
                                frontier_phi_78_pred_2 = _3772 * _3556.z;
                                frontier_phi_78_pred_3 = _3772 * _3556.y;
                                frontier_phi_78_pred_4 = _3772 * _3556.x;
                                frontier_phi_78_pred_5 = _3698 * _3544.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3780 = frontier_phi_78_pred;
                            _3779 = frontier_phi_78_pred_1;
                            _3778 = frontier_phi_78_pred_2;
                            _3777 = frontier_phi_78_pred_3;
                            _3776 = frontier_phi_78_pred_4;
                            _3781 = frontier_phi_78_pred_5;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3488;
                        frontier_phi_72_pred_1 = _3487;
                        frontier_phi_72_pred_2 = _3486;
                        frontier_phi_72_pred_3 = _3485;
                        frontier_phi_72_pred_4 = _3484;
                        frontier_phi_72_pred_5 = _3483;
                    }
                    _3156 = frontier_phi_72_pred;
                    _3154 = frontier_phi_72_pred_1;
                    _3152 = frontier_phi_72_pred_2;
                    _3150 = frontier_phi_72_pred_3;
                    _3148 = frontier_phi_72_pred_4;
                    _3146 = frontier_phi_72_pred_5;
                    uint _3291 = _3290 + 1u;
                    if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3284 = _3146;
                        _3285 = _3148;
                        _3286 = _3150;
                        _3287 = _3152;
                        _3288 = _3154;
                        _3289 = _3156;
                        _3290 = _3291;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3156;
                frontier_phi_60_61_ladder_1 = _3154;
                frontier_phi_60_61_ladder_2 = _3150;
                frontier_phi_60_61_ladder_3 = _3148;
                frontier_phi_60_61_ladder_4 = _3146;
                frontier_phi_60_61_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3040;
                frontier_phi_60_61_ladder_2 = _3036;
                frontier_phi_60_61_ladder_3 = _3034;
                frontier_phi_60_61_ladder_4 = _3032;
                frontier_phi_60_61_ladder_5 = _3038;
            }
            _3145 = frontier_phi_60_61_ladder_4;
            _3147 = frontier_phi_60_61_ladder_3;
            _3149 = frontier_phi_60_61_ladder_2;
            _3151 = frontier_phi_60_61_ladder_5;
            _3153 = frontier_phi_60_61_ladder_1;
            _3155 = frontier_phi_60_61_ladder;
        }
        float _3160 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2965 = (_3160 * _3151) + _2496;
        _2967 = (_3160 * _3153) + _2498;
        _2969 = (_3160 * _3155) + _2500;
        _2971 = ((_3145 * 0.039999999105930328369140625) * _3160) + _2819;
        _2973 = ((_3147 * 0.039999999105930328369140625) * _3160) + _2821;
        _2975 = ((_3149 * 0.039999999105930328369140625) * _3160) + _2823;
    }
    else
    {
        _2965 = _2496;
        _2967 = _2498;
        _2969 = _2500;
        _2971 = _2819;
        _2973 = _2821;
        _2975 = _2823;
    }
    float _4913 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4924 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4935 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    uint _2995 = _279 + 6u;
    float _3003 = _895 / cbSceneParam._m0[86u].x;
    float _3004 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3020 = _3018.x;
    float _3021 = _3018.y;
    float _3022 = _3018.z;
    float _3023 = _3018.w;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _3057 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _3058 = _3057 / _829;
        float _3069 = _3058 * _880;
        float _3070 = _881 * _3058;
        float _3071 = (-0.0) - _3070;
        float _3073 = _3058 * _882;
        float _3075 = (cbSceneParam._m0[77u].w * _3071) / _3057;
        float _3076 = _3075 + cbSceneParam._m0[79u].w;
        float _3077 = cbSceneParam._m0[79u].w - _3070;
        float _3083 = sqrt(((_3069 * _3069) + (_3070 * _3070)) + (_3073 * _3073));
        float _3086 = (1.0 - (cbSceneParam._m0[77u].w / _3057)) * _3083;
        float _3091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3246;
        if (abs((_3071 - _3075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3246 = ((((_3076 > 0.0) ? exp2(_3091 * _3076) : (2.0 - exp2(_3093 * _3076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3086;
        }
        else
        {
            float _3206 = 1.0 / cbSceneParam._m0[80u].x;
            float _3207 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : max(_3076, _3077));
            float _3208 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : min(_3076, _3077));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            float _3218 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : min(_3208, 0.0));
            _3246 = ((abs(_3083 / _3071) * cbSceneParam._m0[80u].y) * ((((_3217 - _3218) * 2.0) - ((exp2(_3091 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0)))) - exp2(_3091 * (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))))) * _3206)) - ((exp2(_3093 * _3217) - exp2(_3093 * _3218)) * _3206))) + (_3086 * cbSceneParam._m0[80u].z);
        }
        vec4 _3248 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, 1.0), 0.0);
        float _3257 = exp2((_3246 * (-1.44269502162933349609375)) * (1.0 - _3248.w));
        float _3258 = log2(_3257);
        float _3274 = log2(_3023);
        _3095 = (exp2(_3274 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].x)) * _3248.x) / cbSceneParam._m0[78u].x)) + _3020;
        _3097 = (exp2(_3274 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].y)) * _3248.y) / cbSceneParam._m0[78u].y)) + _3021;
        _3099 = (exp2(_3274 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].z)) * _3248.z) / cbSceneParam._m0[78u].z)) + _3022;
        _3101 = _3257 * _3023;
    }
    else
    {
        _3095 = _3020;
        _3097 = _3021;
        _3099 = _3022;
        _3101 = _3023;
    }
    float _3113 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3114 = _3113 == 3.0;
    float _3115 = log2(_3101);
    float _3122 = exp2(_3115 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2965 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _958))) + ((_2971 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3123 = exp2(_3115 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2967 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _958))) + ((_2973 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3124 = exp2(_3115 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2969 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _958))) + ((_2975 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3133 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3133 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.y = _3133 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3097)));
    SV_Target.z = _3133 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3099)));
    SV_Target.w = cbInstanceData._m0[_2995].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2995].w;
}


