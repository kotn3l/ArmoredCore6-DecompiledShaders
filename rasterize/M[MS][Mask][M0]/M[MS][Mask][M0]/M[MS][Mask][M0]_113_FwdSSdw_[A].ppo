#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1460;
float _3841;
float _3842;
float _3843;
float _3844;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3853 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3864 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3875 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3886 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _459 = (_452 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _460 = (_452 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _461 = (_452 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3897 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[24u].z) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3908 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _532)) + _532;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _533)) + _533;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _534)) + _534;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _613;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _681 = _679.x;
    float _682 = _679.y;
    float _683 = _679.z;
    float _690 = ((_662.x - _681) * _452) + _681;
    float _691 = ((_662.y - _682) * _452) + _682;
    float _692 = ((_662.z - _683) * _452) + _683;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_704.x - _690) * _525) + _690;
    float _716 = ((_704.y - _691) * _525) + _691;
    float _717 = ((_704.z - _692) * _525) + _692;
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _742 = ((_729.z - _717) * _594) + _717;
    float _745 = ((((_729.x - _715) * _594) + _715) * 2.0) + (-1.0);
    float _746 = ((((_729.y - _716) * _594) + _716) * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3919 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _752 = sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _791 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _793 = _791.x;
    float _794 = 1.0 - _793;
    float _807 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_793 - _794) * cbMtdParam._m0[24u].w) + _794) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3930 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _815 = (_808 * (cbMtdParam._m0[17u].x - _620)) + _620;
    float _816 = (_808 * (cbMtdParam._m0[17u].y - _621)) + _621;
    float _817 = (_808 * (cbMtdParam._m0[17u].z - _622)) + _622;
    float _822 = (((_639.z - _742) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _742;
    float _826 = ((_766.z - _822) * cbMtdParam._m0[19u].w) + _822;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _846 = (_839.x * 2.0) + (-1.0);
    float _847 = (_839.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3941 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _856 = (_808 * (_839.z - _826)) + _826;
    float _865 = (_745 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_639.x * 2.0) + (-1.0)))) + (((_766.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _866 = (_746 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_639.y * 2.0) + (-1.0)))) + (((_766.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _878 = (((_846 - _865) + (cbMtdParam._m0[21u].x * _865)) * _808) + _865;
    float _879 = (((_847 - _866) + (cbMtdParam._m0[21u].x * _866)) * _808) + _866;
    float _880 = (_808 * (sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) - _752)) + _752;
    float _884 = cbMtdParam._m0[22u].x + _766.w;
    float _887 = fma(_880, _246 * NORMAL.x, fma(_879, _253 * TANGENT.x, (_239 * _231) * _878));
    float _890 = fma(_880, _246 * NORMAL.y, fma(_879, _253 * TANGENT.y, (_239 * _232) * _878));
    float _893 = fma(_880, _246 * NORMAL.z, fma(_879, _253 * TANGENT.z, (_239 * _233) * _878));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _3952 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _901 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3974 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _3985 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _3996 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _971 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _961);
    float _972 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _961);
    float _973 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _961);
    float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
    float _978 = _971 * _977;
    float _979 = _972 * _977;
    float _980 = _973 * _977;
    vec4 _985 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _987 = _985.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1141 = sqrt(((_971 * _971) + (_972 * _972)) + (_973 * _973));
        float _1147 = (cbMatDynParam._m0[5u].x * _1141) + cbMatDynParam._m0[5u].y;
        float _4007 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1152 = (cbMatDynParam._m0[5u].z * _1141) + cbMatDynParam._m0[5u].w;
        float _4018 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) - _1148)) + _1148) < ((_987 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1020 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1023 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1036 = _280 + 9u;
    uint _1037 = _1036 + uint(cbMatDynParam._m0[0u].w);
    float _1043 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1037].x;
    float _1044 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1037].y;
    float _1045 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1037].z;
    float _4029 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1061 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_898, _899, _900), vec3(_978, _979, _980));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _898) - _978;
    float _1070 = (_1065 * _899) - _979;
    float _1071 = (_1065 * _900) - _980;
    float _1075 = abs(dot(vec3(_978, _979, _980), vec3(_898, _899, _900)));
    float _4062 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_901);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1188 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1192 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1217 = _1122 + _898;
        float _1218 = _1126 + _899;
        float _1219 = _1130 + _900;
        float _1229 = fma(_1219, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217)) - _1184;
        float _1230 = fma(_1219, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217)) - _1188;
        float _1231 = fma(_1219, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217)) - _1192;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_898, _899, _900), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4110 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_898, _899, _900), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4143 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_898, _899, _900), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4176 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1504 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1508 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1531 = _1122 + _898;
        float _1532 = _1126 + _899;
        float _1533 = _1130 + _900;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_898, _899, _900), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4239 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_898, _899, _900), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4272 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_898, _899, _900), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4305 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1460;
        _1770 = _1460;
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = _1460;
        _1779 = _1460;
        _1780 = _1460;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1472)) + _1472;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1473)) + _1473;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1474)) + _1474;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1069 * 0.5;
    float _1838 = _1070 * 0.5;
    float _1839 = _1071 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1967 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1970 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1998 = frontier_phi_17_15_ladder;
        }
        float _2220;
        if (_1967 > 0.0)
        {
            _2220 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2220 = frontier_phi_26_22_ladder;
        }
        float _2466;
        if (_1970 > 0.0)
        {
            _2466 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2466 = frontier_phi_38_33_ladder;
        }
        float _2468 = isnan(_2220) ? _1998 : (isnan(_1998) ? _2220 : min(_1998, _2220));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1964) + _1953;
        float _2474 = (_2469 * _1967) + _1957;
        float _2475 = (_2469 * _1970) + _1961;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_16_38_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_16_38_ladder_2;
        _1988 = frontier_phi_16_38_ladder_1;
        _1990 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1906);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2049 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2053 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2057 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2060 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2063 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2066 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2225;
        if (_2060 > 0.0)
        {
            _2225 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2225 = frontier_phi_28_24_ladder;
        }
        float _2493;
        if (_2063 > 0.0)
        {
            _2493 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2493 = frontier_phi_40_35_ladder;
        }
        float _2698;
        if (_2066 > 0.0)
        {
            _2698 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2698 = frontier_phi_49_46_ladder;
        }
        float _2700 = isnan(_2493) ? _2225 : (isnan(_2225) ? _2493 : min(_2225, _2493));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _2060) + _2049;
        float _2706 = (_2701 * _2063) + _2053;
        float _2707 = (_2701 * _2066) + _2057;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_25_49_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2085 = frontier_phi_25_49_ladder_2;
        _2087 = frontier_phi_25_49_ladder_1;
        _2089 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1995);
        _2085 = _2069.x * cbModelParam._m0[1u].z;
        _2087 = _2069.y * cbModelParam._m0[1u].z;
        _2089 = _2069.z * cbModelParam._m0[1u].z;
    }
    float _2101 = ((((1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1090 * _1077)) * _1061;
    float _2102 = _2101 * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2103 = _2101 * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2104 = _2101 * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2102 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2102 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2102 * cbSceneParam._m0[91u].x));
    vec4 _2121 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_998, _999));
    float _2123 = _2121.w;
    float _2135 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2123);
    float _2136 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2123);
    float _2137 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2123);
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _1061 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2179 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2183 = _2143 | 1u;
    float _2194 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_898, _899, _900));
    float _2197 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_898, _899, _900));
    float _4441 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _4452 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2202 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2204 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2211 = ((cbLight._m0[_2160].x * _2166) * _2204) + (((cbLight._m0[_2170].x * _2135) * _2179) * _2202);
    float _2212 = ((_2166 * cbLight._m0[_2160].y) * _2204) + (((cbLight._m0[_2170].y * _2136) * _2179) * _2202);
    float _2213 = ((_2166 * cbLight._m0[_2160].z) * _2204) + (((cbLight._m0[_2170].z * _2137) * _2179) * _2202);
    uvec4 _2217 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2219 = _2217.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2219)
    {
        _2230 = _2211;
        _2232 = _2212;
        _2234 = _2213;
    }
    else
    {
        uint _2238 = _2143 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4463 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2257 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2211;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2212;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2213;
    }
    bool _2237 = _2217.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2237)
    {
        _2275 = _2230;
        _2277 = _2232;
        _2279 = _2234;
    }
    else
    {
        uint _2437 = _2143 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4479 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2456 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2275 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2230;
        _2277 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2232;
        _2279 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2234;
    }
    uint _2282 = _2143 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _901) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2143].x + _978;
    float _2298 = cbLight._m0[_2143].y + _979;
    float _2299 = cbLight._m0[_2143].z + _980;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2143].xyz));
    float _4495 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2311 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2312 = dot(vec3(_898, _899, _900), vec3(_2304, _2305, _2306));
    float _4517 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2304, _2305, _2306));
    float _4528 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2311 * ((_2310 * _2336) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2336) + _2296) * _2310))) * _2310;
    float _4539 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2363 = _2143 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _901) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2183].x + _978;
    float _2377 = cbLight._m0[_2183].y + _979;
    float _2378 = cbLight._m0[_2183].z + _980;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2183].xyz));
    float _4550 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2390 = dot(vec3(_898, _899, _900), vec3(_2383, _2384, _2385));
    float _4561 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2383, _2384, _2385));
    float _4572 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2375;
    float _2422 = (0.5 / (((_2311 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2412) + _2375) * _2389))) * _2389;
    float _4583 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2434 = (((_2411 * cbLight._m0[_2363].x) * _2424) * _2166) + ((((cbLight._m0[_2282].x * _2135) * _2335) * _2349) * _2179);
    float _2435 = (((_2411 * cbLight._m0[_2363].y) * _2424) * _2166) + ((((cbLight._m0[_2282].y * _2136) * _2335) * _2349) * _2179);
    float _2436 = (((_2411 * cbLight._m0[_2363].z) * _2424) * _2166) + ((((cbLight._m0[_2282].z * _2137) * _2335) * _2349) * _2179);
    float _2498;
    float _2500;
    float _2502;
    if (_2219)
    {
        _2498 = _2434;
        _2500 = _2435;
        _2502 = _2436;
    }
    else
    {
        uint _2504 = _2143 + 2u;
        uint _2508 = _2143 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _901) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _978;
        float _2525 = cbLight._m0[_2504].y + _979;
        float _2526 = cbLight._m0[_2504].z + _980;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2504].xyz));
        float _4594 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2538 = dot(vec3(_898, _899, _900), vec3(_2531, _2532, _2533));
        float _4605 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4616 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2311 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2560) + _2523) * _2537))) * _2537;
        float _4627 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2498 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2434;
        _2500 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2435;
        _2502 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2436;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2237)
    {
        _2608 = _2498;
        _2610 = _2500;
        _2612 = _2502;
    }
    else
    {
        uint _2619 = _2143 + 3u;
        uint _2623 = _2143 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _901) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _978;
        float _2640 = cbLight._m0[_2619].y + _979;
        float _2641 = cbLight._m0[_2619].z + _980;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2619].xyz));
        float _4643 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2653 = dot(vec3(_898, _899, _900), vec3(_2646, _2647, _2648));
        float _4654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4665 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2674 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2675 = 1.0 - _2638;
        float _2685 = (0.5 / (((_2311 * ((_2652 * _2675) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2675) + _2638) * _2652))) * _2652;
        float _4676 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2608 = (((_2674 * cbLight._m0[_2623].x) * _2687) * _2688) + _2498;
        _2610 = (((_2674 * cbLight._m0[_2623].y) * _2687) * _2688) + _2500;
        _2612 = (((_2674 * cbLight._m0[_2623].z) * _2687) * _2688) + _2502;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2141.y == 0u)
    {
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2763;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2763;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2763;
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _2779)));
        float _2800 = (log2(_2766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3080)
                {
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                else
                {
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    uint _3215;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3079;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    for (;;)
                    {
                        uint _3219 = uint(findLSB(_3215)) + (_3070 << 5u);
                        uint _3216 = (_3215 + 4294967295u) & _3215;
                        uint _3221 = _3219 * 48u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3241 = (_3219 * 48u) + 4u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3260 = (_3219 * 48u) + 8u;
                        vec3 _3271 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x));
                        float _3275 = _3235.x - _2764;
                        float _3276 = _3235.y - _2765;
                        float _3277 = _3235.z - _2766;
                        float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                        float _3281 = inversesqrt(_3278);
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3285 = dot(vec3(_1017, _1020, _1023), vec3(_3282, _3283, _3284));
                        float _3290 = 1.0 - (_3278 * _3235.w);
                        float _4702 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3292 = sqrt(_3278) * _3254.w;
                        float _3295 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3285) + _3296;
                        float _3302 = _3292 * _3292;
                        float _3306 = ((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3291) / ((_3302 * 0.699999988079071044921875) + 1.0);
                        float _3310 = (-0.0) - _2764;
                        float _3311 = (-0.0) - _2765;
                        float _3312 = (-0.0) - _2766;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3327 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _1077;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3317 + _3282;
                        float _3339 = _3318 + _3283;
                        float _3340 = _3319 + _3284;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_1017, _1020, _1023), vec3(_3317, _3318, _3319));
                        float _4718 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3352 = dot(vec3(_1017, _1020, _1023), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4729 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3295 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3285) + _3361;
                        float _4740 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4751 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3359 * _3359) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125))) * _3291;
                        _3139 = (_3306 * _3254.x) + _3212;
                        _3140 = (_3306 * _3254.y) + _3213;
                        _3141 = (_3306 * _3254.z) + _3214;
                        _3136 = (_3387 * _3271.x) + _3209;
                        _3137 = (_3387 * _3271.y) + _3210;
                        _3138 = (_3387 * _3271.z) + _3211;
                        if (_3216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3216;
                        }
                    }
                    frontier_phi_66_pred = _3136;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                _2912 = frontier_phi_66_pred;
                _2922 = frontier_phi_66_pred_1;
                _2920 = frontier_phi_66_pred_2;
                _2918 = frontier_phi_66_pred_3;
                _2916 = frontier_phi_66_pred_4;
                _2914 = frontier_phi_66_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2912;
                    _3065 = _2914;
                    _3066 = _2916;
                    _3067 = _2918;
                    _3068 = _2920;
                    _3069 = _2922;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2928) & _2810) == 0u)
        {
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
            float _3058 = _3057 * _2764;
            float _3059 = _3057 * _2765;
            float _3060 = _3057 * _2766;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3192 = _2911;
                float _3193 = _2913;
                float _3194 = _2915;
                float _3195 = _2917;
                float _3196 = _2919;
                float _3197 = _2921;
                uint _3198 = _2928;
                uint _3207;
                bool _3208;
                for (;;)
                {
                    _3207 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                    _3208 = _3207 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3208)
                    {
                        frontier_phi_77_pred = _3197;
                        frontier_phi_77_pred_1 = _3196;
                        frontier_phi_77_pred_2 = _3195;
                        frontier_phi_77_pred_3 = _3194;
                        frontier_phi_77_pred_4 = _3193;
                        frontier_phi_77_pred_5 = _3192;
                    }
                    else
                    {
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        uint _3420 = _3207;
                        uint _3421;
                        vec4 _3446;
                        float _3447;
                        vec4 _3462;
                        vec3 _3474;
                        vec4 _3489;
                        vec4 _3504;
                        float _3550;
                        bool _3551;
                        for (;;)
                        {
                            uint _3431 = ((_3198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3420));
                            _3421 = (_3420 + 4294967295u) & _3420;
                            uint _3433 = _3431 * 40u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3447 = _3446.w;
                            uint _3449 = (_3431 * 40u) + 4u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3431 * 40u) + 8u;
                            _3474 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x));
                            uint _3476 = (_3431 * 40u) + 16u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3431 * 40u) + 20u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3431 * 40u) + 24u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3525 = (_3431 * 40u) + 28u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3550 = fma(_2766, _3538.z, fma(_2765, _3538.y, _3538.x * _2764)) + _3538.w;
                            _3551 = !((fma(_2766, _3519.z, fma(_2765, _3519.y, _3519.x * _2764)) + _3519.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3551)
                            {
                                float _3578 = _3446.x - _2764;
                                float _3579 = _3446.y - _2765;
                                float _3580 = _3446.z - _2766;
                                float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                                float _3584 = inversesqrt(_3581);
                                float _3585 = _3584 * _3578;
                                float _3586 = _3584 * _3579;
                                float _3587 = _3584 * _3580;
                                float _3591 = 1.0 - (_3581 / (_3447 * _3447));
                                float _4762 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3596 = sqrt(_3581) * _3462.w;
                                float _3598 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                                float _3599 = _3598 * _3598;
                                float _3602 = ((1.0 - _3599) * dot(vec3(_3585, _3586, _3587), vec3(_1017, _1020, _1023))) + _3599;
                                float _3605 = _3596 * _3596;
                                float _3609 = (fma(_2766, _3489.z, fma(_2765, _3489.y, _3489.x * _2764)) + _3489.w) / _3550;
                                float _3610 = (fma(_2766, _3504.z, fma(_2765, _3504.y, _3504.x * _2764)) + _3504.w) / _3550;
                                float _3614 = 1.0 - dot(vec2(_3609, _3610), vec2(_3609, _3610));
                                float _4778 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3616 = _3615 * (((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3592) / ((_3605 * 0.699999988079071044921875) + 1.0));
                                float _3628 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                                float _3629 = 1.0 - _1077;
                                float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                                float _3637 = _3636 * _3636;
                                float _3638 = _3637 * _3637;
                                float _3639 = _3585 - _3058;
                                float _3640 = _3586 - _3059;
                                float _3641 = _3587 - _3060;
                                float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                                float _3649 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4789 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3653 = dot(vec3(_1017, _1020, _1023), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                                float _4800 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                                float _3661 = _3598 * _3637;
                                float _3662 = _3661 * _3661;
                                float _3668 = ((1.0 - _3662) * dot(vec3(_1017, _1020, _1023), vec3(_3585, _3586, _3587))) + _3662;
                                float _4811 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3670 = 1.0 - _3637;
                                float _3680 = (0.5 / (((_3669 * ((_3652 * _3670) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3637) * _3652))) * _3669;
                                float _4822 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3690 = (_3615 * _3592) * (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3660 * _3660) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3616 * _3462.y;
                                frontier_phi_83_pred_1 = _3616 * _3462.x;
                                frontier_phi_83_pred_2 = _3690 * _3474.z;
                                frontier_phi_83_pred_3 = _3690 * _3474.y;
                                frontier_phi_83_pred_4 = _3690 * _3474.x;
                                frontier_phi_83_pred_5 = _3616 * _3462.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_83_pred;
                            _3697 = frontier_phi_83_pred_1;
                            _3696 = frontier_phi_83_pred_2;
                            _3695 = frontier_phi_83_pred_3;
                            _3694 = frontier_phi_83_pred_4;
                            _3699 = frontier_phi_83_pred_5;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            if (_3421 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3421;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3406;
                        frontier_phi_77_pred_1 = _3405;
                        frontier_phi_77_pred_2 = _3404;
                        frontier_phi_77_pred_3 = _3403;
                        frontier_phi_77_pred_4 = _3402;
                        frontier_phi_77_pred_5 = _3401;
                    }
                    _3043 = frontier_phi_77_pred;
                    _3041 = frontier_phi_77_pred_1;
                    _3039 = frontier_phi_77_pred_2;
                    _3037 = frontier_phi_77_pred_3;
                    _3035 = frontier_phi_77_pred_4;
                    _3033 = frontier_phi_77_pred_5;
                    uint _3199 = _3198 + 1u;
                    if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3192 = _3033;
                        _3193 = _3035;
                        _3194 = _3037;
                        _3195 = _3039;
                        _3196 = _3041;
                        _3197 = _3043;
                        _3198 = _3199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3037;
                frontier_phi_58_59_ladder_1 = _3043;
                frontier_phi_58_59_ladder_2 = _3041;
                frontier_phi_58_59_ladder_3 = _3039;
                frontier_phi_58_59_ladder_4 = _3035;
                frontier_phi_58_59_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_58_59_ladder = _2915;
                frontier_phi_58_59_ladder_1 = _2921;
                frontier_phi_58_59_ladder_2 = _2919;
                frontier_phi_58_59_ladder_3 = _2917;
                frontier_phi_58_59_ladder_4 = _2913;
                frontier_phi_58_59_ladder_5 = _2911;
            }
            _3032 = frontier_phi_58_59_ladder_5;
            _3034 = frontier_phi_58_59_ladder_4;
            _3036 = frontier_phi_58_59_ladder;
            _3038 = frontier_phi_58_59_ladder_3;
            _3040 = frontier_phi_58_59_ladder_2;
            _3042 = frontier_phi_58_59_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2823 = (_3047 * _3038) + _2275;
        _2825 = (_3047 * _3040) + _2277;
        _2827 = (_3047 * _3042) + _2279;
        _2829 = ((_3032 * 0.039999999105930328369140625) * _3047) + _2608;
        _2831 = ((_3034 * 0.039999999105930328369140625) * _3047) + _2610;
        _2833 = ((_3036 * 0.039999999105930328369140625) * _3047) + _2612;
    }
    else
    {
        _2823 = _2275;
        _2825 = _2277;
        _2827 = _2279;
        _2829 = _2608;
        _2831 = _2610;
        _2833 = _2612;
    }
    float _4838 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4849 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4860 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2850 = ((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2823 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1061))) + ((_2829 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2851 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2825 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1061))) + ((_2831 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2827 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1061))) + ((_2833 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    uint _2853 = _280 + 6u;
    float _2861 = _998 / cbSceneParam._m0[86u].x;
    float _2862 = _999 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _2937 = _2936 / _919;
        float _2948 = _2937 * _971;
        float _2949 = _972 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _973;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3149;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3149 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3095 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3149 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2972 * _3104) - exp2(_2972 * _3105)) * _3093))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3151 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3160 = exp2((_3149 * (-1.44269502162933349609375)) * (1.0 - _3151.w));
        float _3161 = log2(_3160);
        float _3177 = log2(_2881);
        _2974 = (exp2(_3177 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].x)) * _3151.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2976 = (exp2(_3177 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].y)) * _3151.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2978 = (exp2(_3177 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].z)) * _3151.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2980 = _3160 * _2881;
    }
    else
    {
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
        _2980 = _2881;
    }
    bool _3187;
    vec4 _2990;
    vec4 _3012;
    float _3014;
    float _3018;
    float _3019;
    float _3020;
    float _3021;
    bool _3031;
    for (;;)
    {
        _2990 = cbMatDynParam._m0[0u];
        float _2992 = roundEven(_2990.y);
        bool _2993 = _2992 == 3.0;
        float _2994 = log2(_2980);
        float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * _2850;
        float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * _2851;
        float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * _2852;
        float _3010 = _987 + (-0.5);
        _3012 = cbMtdParam._m0[1u];
        _3014 = _3012.y * _3010;
        float _3017 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3018 = _3017 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
        _3019 = _3017 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
        _3020 = _3017 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
        _3021 = _3010 * 0.999000012874603271484375;
        _3031 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3031)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3021) < 0.5)
            {
                _3187 = true;
                break;
            }
        }
        uint _3128 = _1036 + uint(_2990.w);
        if ((cbInstanceData._m0[_3128].w < 1.0) && ((cbInstanceData._m0[_3128].w + _3021) < 0.5))
        {
            _3187 = true;
            break;
        }
        if ((_3014 + 1.0) < _3012.x)
        {
            _3187 = true;
            break;
        }
        _3187 = false;
        break;
    }
    float _3392;
    if (_3187)
    {
        discard_state = true;
        _3392 = 0.0;
    }
    else
    {
        _3392 = cbInstanceData._m0[_2853].w;
    }
    SV_Target.x = _3018;
    SV_Target.y = _3019;
    SV_Target.z = _3020;
    SV_Target.w = _3392;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
    discard_exit();
}


