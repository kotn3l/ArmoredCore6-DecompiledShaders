#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _4047;
float _4048;
float _4049;
float _4050;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _343.x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4059 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _419 = (_412 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _420 = (_412 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _421 = (_412 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _470 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _484 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _343.y) * 2.0) - ((((_460 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4070 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _492 = (_485 * ((_438.x * cbMtdParam._m0[13u].x) - _419)) + _419;
    float _493 = (_485 * ((_438.y * cbMtdParam._m0[13u].y) - _420)) + _420;
    float _494 = (_485 * ((_438.z * cbMtdParam._m0[13u].z) - _421)) + _421;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _540 = ((_512.x - _531) * _412) + _531;
    float _541 = ((_512.y - _532) * _412) + _532;
    float _542 = ((_512.z - _533) * _412) + _533;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _567 = ((_554.z - _542) * _485) + _542;
    float _570 = ((((_554.x - _540) * _485) + _540) * 2.0) + (-1.0);
    float _572 = ((((_554.y - _541) * _485) + _541) * 2.0) + (-1.0);
    float _573 = dot(vec2(_570, _572), vec2(_570, _572));
    float _4081 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _604 = (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _570;
    float _605 = (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _572;
    float _608 = fma(_578, _245, fma(_605, _252, _604 * _238));
    float _611 = fma(_578, _246, fma(_605, _253, _604 * _239));
    float _614 = fma(_578, _247, fma(_605, _254, _604 * _240));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _654 = (cbMtdParam._m0[19u].x + dot(vec4(_618 * _608, _618 * _611, _618 * _614, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_647 - _648) * cbMtdParam._m0[24u].w) + _648) * cbMtdParam._m0[21u].z);
    float _4092 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _657 = (-0.0) - cbMtdParam._m0[24u].x;
    float _659 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
    float _667 = _655 - ((_655 * TEXCOORD_8.x) * _660);
    float _668 = _655 - ((_655 * TEXCOORD_8.y) * _660);
    float _669 = _655 - ((_655 * TEXCOORD_8.z) * _660);
    float _676 = (_667 * (cbMtdParam._m0[17u].x - _492)) + _492;
    float _677 = (_668 * (cbMtdParam._m0[17u].y - _493)) + _493;
    float _678 = (_669 * (cbMtdParam._m0[17u].z - _494)) + _494;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _721 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_692 - _693) * cbMtdParam._m0[24u].y) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4113 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _730 = ((((cbMtdParam._m0[10u].x - _676) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _722) + _676;
    float _731 = ((((cbMtdParam._m0[10u].y - _677) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _722) + _677;
    float _732 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _678)) * _722) + _678;
    float _736 = (cbMtdParam._m0[19u].w * (_592.z - _567)) + _567;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _757 = (_750.x * 2.0) + (-1.0);
    float _758 = (_750.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _4124 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _767 = ((_750.z - _736) * _667) + _736;
    float _770 = ((cbMtdParam._m0[23u].y - _767) * _722) + _767;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _4135 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _812 = ((sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _578) * _669) + _578;
    float _815 = (((_757 - _604) * _667) + _604) + (cbMtdParam._m0[21u].x * _604);
    float _816 = (((_758 - _605) * _668) + _605) + (cbMtdParam._m0[21u].x * _605);
    float _827 = (((_795 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _722) + _815;
    float _828 = (((_796 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _722) + _816;
    float _829 = (_722 * (sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) - _812)) + _812;
    float _831 = cbMtdParam._m0[22u].x + _592.w;
    float _834 = fma(_829, _245, fma(_828, _252, _827 * _238));
    float _837 = fma(_829, _246, fma(_828, _253, _827 * _239));
    float _840 = fma(_829, _247, fma(_828, _254, _827 * _240));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _4146 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _848 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4168 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4179 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4190 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _866 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    vec4 _931 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _933 = _931.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1087 = sqrt(((_917 * _917) + (_918 * _918)) + (_919 * _919));
        float _1093 = (cbMatDynParam._m0[5u].x * _1087) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1098 = (cbMatDynParam._m0[5u].z * _1087) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1094)) + _1094) < ((_933 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _966 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _969 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _982 = _257 + 9u;
    uint _983 = _982 + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_983].z;
    float _4223 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1007 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * TEXCOORD_5.w) * _1003.x;
    float _1008 = dot(vec3(_845, _846, _847), vec3(_924, _925, _926));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _845) - _924;
    float _1016 = (_1011 * _846) - _925;
    float _1017 = (_1011 * _847) - _926;
    float _1021 = abs(dot(vec3(_924, _925, _926), vec3(_845, _846, _847)));
    float _4256 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_848);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1134 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1138 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1163 = _1068 + _845;
        float _1164 = _1072 + _846;
        float _1165 = _1076 + _847;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_845, _846, _847), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4304 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_845, _846, _847), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4337 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_845, _846, _847), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4370 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1451 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1455 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1478 = _1068 + _845;
        float _1479 = _1072 + _846;
        float _1480 = _1076 + _847;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_845, _846, _847), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4433 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_845, _846, _847), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4466 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_845, _846, _847), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4499 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1406;
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1418)) + _1418;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1419)) + _1419;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1420)) + _1420;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1015 * 0.5;
    float _1785 = _1016 * 0.5;
    float _1786 = _1017 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1915 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1918 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1946 = frontier_phi_17_15_ladder;
        }
        float _2116;
        if (_1915 > 0.0)
        {
            _2116 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2116 = frontier_phi_26_22_ladder;
        }
        float _2411;
        if (_1918 > 0.0)
        {
            _2411 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2411 = frontier_phi_38_33_ladder;
        }
        float _2413 = isnan(_2116) ? _1946 : (isnan(_1946) ? _2116 : min(_1946, _2116));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1912) + _1901;
        float _2419 = (_2414 * _1915) + _1905;
        float _2420 = (_2414 * _1918) + _1909;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_16_38_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_16_38_ladder_2;
        _1936 = frontier_phi_16_38_ladder_1;
        _1938 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1853);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _2011 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _2014 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2121;
        if (_2008 > 0.0)
        {
            _2121 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2121 = frontier_phi_28_24_ladder;
        }
        float _2438;
        if (_2011 > 0.0)
        {
            _2438 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2438 = frontier_phi_40_35_ladder;
        }
        float _2765;
        if (_2014 > 0.0)
        {
            _2765 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2765 = frontier_phi_50_47_ladder;
        }
        float _2767 = isnan(_2438) ? _2121 : (isnan(_2121) ? _2438 : min(_2121, _2438));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _2008) + _1997;
        float _2773 = (_2768 * _2011) + _2001;
        float _2774 = (_2768 * _2014) + _2005;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_25_50_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_25_50_ladder_2;
        _2035 = frontier_phi_25_50_ladder_1;
        _2037 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1943);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2049 = ((((1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1036 * _1023)) * _1007;
    float _2050 = _2049 * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2051 = _2049 * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2052 = _2049 * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2108 = _2095 / _2107;
    float _2109 = _2099 / _2107;
    float _2110 = _2103 / _2107;
    float _2257;
    float _2258;
    float _2259;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2137 = ((uint(_2110 > cbSceneParam._m0[59u].y) + uint(_2110 > cbSceneParam._m0[59u].x)) + uint(_2110 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2138 = _2137 + 43u;
        uint _2146 = _2137 + 44u;
        uint _2154 = _2137 + 45u;
        uint _2162 = _2137 + 46u;
        float _2173 = fma(_2107, cbSceneParam._m0[_2138].w, fma(_2103, cbSceneParam._m0[_2138].z, fma(_2099, cbSceneParam._m0[_2138].y, _2095 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2107, cbSceneParam._m0[_2146].w, fma(_2103, cbSceneParam._m0[_2146].z, fma(_2099, cbSceneParam._m0[_2146].y, _2095 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2107, cbSceneParam._m0[_2162].w, fma(_2103, cbSceneParam._m0[_2162].z, fma(_2099, cbSceneParam._m0[_2162].y, _2095 * cbSceneParam._m0[_2162].x)));
        float _2190 = cbSceneParam._m0[33u].z * _2185;
        float _2192 = cbSceneParam._m0[33u].w * _2185;
        float _2195 = fma(_2107, cbSceneParam._m0[_2154].w, fma(_2103, cbSceneParam._m0[_2154].z, fma(_2099, cbSceneParam._m0[_2154].y, _2095 * cbSceneParam._m0[_2154].x))) / _2185;
        float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
        float _4625 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2250 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2173) / _2185, (_2192 + _2177) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2173) / _2185, (_2177 - _2190) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2190) / _2185, (_2177 - _2192) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2192) / _2185, (_2190 + _2177) / _2185), _2195), 0.0)).x), vec4(0.25)));
        _2257 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
        _2258 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
        _2259 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2257 = 1.0;
        _2258 = 1.0;
        _2259 = 1.0;
    }
    float _2323;
    float _2325;
    float _2327;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2311 = fma(_2107, cbSceneParam._m0[63u].w, fma(_2103, cbSceneParam._m0[63u].z, fma(_2099, cbSceneParam._m0[63u].y, _2095 * cbSceneParam._m0[63u].x)));
        float _2312 = fma(_2107, cbSceneParam._m0[60u].w, fma(_2103, cbSceneParam._m0[60u].z, fma(_2099, cbSceneParam._m0[60u].y, _2095 * cbSceneParam._m0[60u].x))) / _2311;
        float _2313 = fma(_2107, cbSceneParam._m0[61u].w, fma(_2103, cbSceneParam._m0[61u].z, fma(_2099, cbSceneParam._m0[61u].y, _2095 * cbSceneParam._m0[61u].x))) / _2311;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2312 >= cbSceneParam._m0[64u].x) && (_2313 >= cbSceneParam._m0[64u].y)) && (_2312 <= cbSceneParam._m0[64u].z)) && (_2313 <= cbSceneParam._m0[64u].w))
        {
            float _2451 = fma(_2107, cbSceneParam._m0[62u].w, fma(_2103, cbSceneParam._m0[62u].z, fma(_2099, cbSceneParam._m0[62u].y, _2095 * cbSceneParam._m0[62u].x))) / _2311;
            float _2455 = isnan(cbSceneParam._m0[41u].w) ? _2451 : (isnan(_2451) ? cbSceneParam._m0[41u].w : max(_2451, cbSceneParam._m0[41u].w));
            float _2498 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
            float _4641 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
            float _2505 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2312, cbSceneParam._m0[33u].w + _2313), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2312, _2313 - cbSceneParam._m0[33u].z), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].z, _2313 - cbSceneParam._m0[33u].w), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2313), _2455), 0.0)).x), vec4(0.25)));
            float _2509 = 1.0 - (_2505 * cbSceneParam._m0[34u].x);
            float _2510 = 1.0 - (_2505 * cbSceneParam._m0[34u].y);
            float _2511 = 1.0 - (_2505 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
            frontier_phi_37_36_ladder_1 = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
            frontier_phi_37_36_ladder_2 = isnan(_2509) ? _2257 : (isnan(_2257) ? _2509 : min(_2257, _2509));
        }
        else
        {
            frontier_phi_37_36_ladder = _2259;
            frontier_phi_37_36_ladder_1 = _2258;
            frontier_phi_37_36_ladder_2 = _2257;
        }
        _2323 = frontier_phi_37_36_ladder_2;
        _2325 = frontier_phi_37_36_ladder_1;
        _2327 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2323 = _2257;
        _2325 = _2258;
        _2327 = _2259;
    }
    uvec4 _2332 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2334 = _2332.x * 14u;
    uint _2335 = _2334 + 13u;
    float _2342 = _1007 + (-1.0);
    float _2347 = (cbLight._m0[_2335].x * _2342) + 1.0;
    float _2348 = (cbLight._m0[_2335].y * _2342) + 1.0;
    float _2349 = (cbLight._m0[_2335].z * _2342) + 1.0;
    float _2350 = (cbLight._m0[_2335].w * _2342) + 1.0;
    uint _2351 = _2334 + 5u;
    float _2357 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2361 = _2334 + 4u;
    float _2370 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2374 = _2334 | 1u;
    float _2385 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_845, _846, _847));
    float _2388 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_845, _846, _847));
    float _4677 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _4688 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2393 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2395 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2402 = ((cbLight._m0[_2351].x * _2357) * _2395) + (((cbLight._m0[_2361].x * _2323) * _2370) * _2393);
    float _2403 = ((_2357 * cbLight._m0[_2351].y) * _2395) + (((cbLight._m0[_2361].y * _2325) * _2370) * _2393);
    float _2404 = ((_2357 * cbLight._m0[_2351].z) * _2395) + (((cbLight._m0[_2361].z * _2327) * _2370) * _2393);
    uvec4 _2408 = floatBitsToUint(cbLight._m0[_2334 + 12u]);
    bool _2410 = _2408.x == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2410)
    {
        _2512 = _2402;
        _2514 = _2403;
        _2516 = _2404;
    }
    else
    {
        uint _2520 = _2334 + 6u;
        float _2536 = (dot(vec3(cbLight._m0[_2334 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2537 = _2536 * _2536;
        float _4699 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2538 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2539 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2512 = (((cbLight._m0[_2520].x * 0.3183098733425140380859375) * _2538) * _2539) + _2402;
        _2514 = (((cbLight._m0[_2520].y * 0.3183098733425140380859375) * _2538) * _2539) + _2403;
        _2516 = (((cbLight._m0[_2520].z * 0.3183098733425140380859375) * _2538) * _2539) + _2404;
    }
    bool _2519 = _2408.y == 0u;
    float _2574;
    float _2576;
    float _2578;
    if (_2519)
    {
        _2574 = _2512;
        _2576 = _2514;
        _2578 = _2516;
    }
    else
    {
        uint _2736 = _2334 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2334 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4715 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2755 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2574 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2512;
        _2576 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2514;
        _2578 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2516;
    }
    uint _2581 = _2334 + 8u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _848) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2334].x + _924;
    float _2597 = cbLight._m0[_2334].y + _925;
    float _2598 = cbLight._m0[_2334].z + _926;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2334].xyz));
    float _4731 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2610 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2611 = dot(vec3(_845, _846, _847), vec3(_2603, _2604, _2605));
    float _4753 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2603, _2604, _2605));
    float _4764 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2595 * _2595;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2635 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2610 * ((_2609 * _2635) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2635) + _2595) * _2609))) * _2609;
    float _4775 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    uint _2662 = _2334 + 9u;
    float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _848) * 0.949999988079071044921875);
    float _2674 = _2673 * _2673;
    float _2675 = cbLight._m0[_2374].x + _924;
    float _2676 = cbLight._m0[_2374].y + _925;
    float _2677 = cbLight._m0[_2374].z + _926;
    float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
    float _2682 = _2681 * _2675;
    float _2683 = _2681 * _2676;
    float _2684 = _2681 * _2677;
    float _2685 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2374].xyz));
    float _4786 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2689 = dot(vec3(_845, _846, _847), vec3(_2682, _2683, _2684));
    float _4797 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2693 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2682, _2683, _2684));
    float _4808 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2697 = _2674 * _2674;
    float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
    float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2711 = 1.0 - _2674;
    float _2721 = (0.5 / (((_2610 * ((_2688 * _2711) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2711) + _2674) * _2688))) * _2688;
    float _4819 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
    float _2733 = (((_2710 * cbLight._m0[_2662].x) * _2723) * _2357) + ((((cbLight._m0[_2581].x * _2323) * _2634) * _2648) * _2370);
    float _2734 = (((_2710 * cbLight._m0[_2662].y) * _2723) * _2357) + ((((cbLight._m0[_2581].y * _2325) * _2634) * _2648) * _2370);
    float _2735 = (((_2710 * cbLight._m0[_2662].z) * _2723) * _2357) + ((((cbLight._m0[_2581].z * _2327) * _2634) * _2648) * _2370);
    float _2791;
    float _2793;
    float _2795;
    if (_2410)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2334 + 2u;
        uint _2801 = _2334 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _848) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _924;
        float _2818 = cbLight._m0[_2797].y + _925;
        float _2819 = cbLight._m0[_2797].z + _926;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2797].xyz));
        float _4830 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2831 = dot(vec3(_845, _846, _847), vec3(_2824, _2825, _2826));
        float _4841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4852 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2852 = (exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2853 = 1.0 - _2816;
        float _2863 = (0.5 / (((_2610 * ((_2830 * _2853) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2853) + _2816) * _2830))) * _2830;
        float _4863 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2791 = (((_2852 * cbLight._m0[_2801].x) * _2865) * _2866) + _2733;
        _2793 = (((_2852 * cbLight._m0[_2801].y) * _2865) * _2866) + _2734;
        _2795 = (((_2852 * cbLight._m0[_2801].z) * _2865) * _2866) + _2735;
    }
    float _2897;
    float _2899;
    float _2901;
    if (_2519)
    {
        _2897 = _2791;
        _2899 = _2793;
        _2901 = _2795;
    }
    else
    {
        uint _2908 = _2334 + 3u;
        uint _2912 = _2334 + 11u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _848) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _924;
        float _2929 = cbLight._m0[_2908].y + _925;
        float _2930 = cbLight._m0[_2908].z + _926;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2908].xyz));
        float _4879 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2942 = dot(vec3(_845, _846, _847), vec3(_2935, _2936, _2937));
        float _4890 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4901 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2963 = (exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2964 = 1.0 - _2927;
        float _2974 = (0.5 / (((_2610 * ((_2941 * _2964) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2964) + _2927) * _2941))) * _2941;
        float _4912 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2897 = (((_2963 * cbLight._m0[_2912].x) * _2976) * _2977) + _2791;
        _2899 = (((_2963 * cbLight._m0[_2912].y) * _2976) * _2977) + _2793;
        _2901 = (((_2963 * cbLight._m0[_2912].z) * _2976) * _2977) + _2795;
    }
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_2332.y == 0u)
    {
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.x;
        uint _3010 = uint((float(_2998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2999))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2999)));
        float _3020 = (log2(_2110 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3021 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        uint _3024 = uint(isnan(14.0) ? _3021 : (isnan(_3021) ? 14.0 : min(_3021, 14.0)));
        uvec4 _3029 = texelFetch(g_lightClusterGridBuffer, int(((_3024 << 2u) + (_3010 << 6u)) >> 2u));
        uint _3030 = _3029.x;
        uint _3031 = _2998.z;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((((1u << ((_3031 >> 4u) & 15u)) + 4294967295u) & _3030) == 0u) || ((_3031 & 240u) == 0u))
        {
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
        }
        else
        {
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3278)
                {
                    frontier_phi_71_pred = _3267;
                    frontier_phi_71_pred_1 = _3266;
                    frontier_phi_71_pred_2 = _3265;
                    frontier_phi_71_pred_3 = _3264;
                    frontier_phi_71_pred_4 = _3263;
                    frontier_phi_71_pred_5 = _3262;
                }
                else
                {
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    uint _3413;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3277;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    for (;;)
                    {
                        uint _3417 = uint(findLSB(_3413)) + (_3268 << 5u);
                        uint _3414 = (_3413 + 4294967295u) & _3413;
                        uint _3419 = _3417 * 48u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3439 = (_3417 * 48u) + 4u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 3u)).x));
                        uint _3458 = (_3417 * 48u) + 8u;
                        vec3 _3469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x));
                        float _3473 = _3433.x - _2108;
                        float _3474 = _3433.y - _2109;
                        float _3475 = _3433.z - _2110;
                        float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                        float _3479 = inversesqrt(_3476);
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3483 = dot(vec3(_963, _966, _969), vec3(_3480, _3481, _3482));
                        float _3488 = 1.0 - (_3476 * _3433.w);
                        float _4938 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3490 = sqrt(_3476) * _3452.w;
                        float _3493 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3483) + _3494;
                        float _3500 = _3490 * _3490;
                        float _3504 = ((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3489) / ((_3500 * 0.699999988079071044921875) + 1.0);
                        float _3508 = (-0.0) - _2108;
                        float _3509 = (-0.0) - _2109;
                        float _3510 = (-0.0) - _2110;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3524 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                        float _3525 = 1.0 - _1023;
                        float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                        float _3533 = _3532 * _3532;
                        float _3534 = _3533 * _3533;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3545 = dot(vec3(_963, _966, _969), vec3(_3515, _3516, _3517));
                        float _4954 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3549 = dot(vec3(_963, _966, _969), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                        float _4965 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                        float _3557 = _3493 * _3533;
                        float _3558 = _3557 * _3557;
                        float _3561 = ((1.0 - _3558) * _3483) + _3558;
                        float _4976 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3563 = 1.0 - _3533;
                        float _3573 = (0.5 / (((_3562 * ((_3548 * _3563) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3533) * _3548))) * _3562;
                        float _4987 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3584 = (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3556 * _3556) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125))) * _3489;
                        _3337 = (_3504 * _3452.x) + _3410;
                        _3338 = (_3504 * _3452.y) + _3411;
                        _3339 = (_3504 * _3452.z) + _3412;
                        _3334 = (_3584 * _3469.x) + _3407;
                        _3335 = (_3584 * _3469.y) + _3408;
                        _3336 = (_3584 * _3469.z) + _3409;
                        if (_3414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3414;
                        }
                    }
                    frontier_phi_71_pred = _3339;
                    frontier_phi_71_pred_1 = _3338;
                    frontier_phi_71_pred_2 = _3337;
                    frontier_phi_71_pred_3 = _3336;
                    frontier_phi_71_pred_4 = _3335;
                    frontier_phi_71_pred_5 = _3334;
                }
                _3121 = frontier_phi_71_pred;
                _3119 = frontier_phi_71_pred_1;
                _3117 = frontier_phi_71_pred_2;
                _3115 = frontier_phi_71_pred_3;
                _3113 = frontier_phi_71_pred_4;
                _3111 = frontier_phi_71_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3111;
                    _3263 = _3113;
                    _3264 = _3115;
                    _3265 = _3117;
                    _3266 = _3119;
                    _3267 = _3121;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
        }
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.z;
        uint _3127 = (_3125 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3127) & _3030) == 0u)
        {
            _3230 = _3110;
            _3232 = _3112;
            _3234 = _3114;
            _3236 = _3116;
            _3238 = _3118;
            _3240 = _3120;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
            float _3256 = _3255 * _2108;
            float _3257 = _3255 * _2109;
            float _3258 = _3255 * _2110;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3127 < ((_3125 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3390 = _3110;
                float _3391 = _3112;
                float _3392 = _3114;
                float _3393 = _3116;
                float _3394 = _3118;
                float _3395 = _3120;
                uint _3396 = _3127;
                uint _3405;
                bool _3406;
                for (;;)
                {
                    _3405 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3396 << 2u)) >> 2u)).x;
                    _3406 = _3405 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3406)
                    {
                        frontier_phi_82_pred = _3395;
                        frontier_phi_82_pred_1 = _3394;
                        frontier_phi_82_pred_2 = _3393;
                        frontier_phi_82_pred_3 = _3392;
                        frontier_phi_82_pred_4 = _3391;
                        frontier_phi_82_pred_5 = _3390;
                    }
                    else
                    {
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        uint _3617 = _3405;
                        uint _3618;
                        vec4 _3643;
                        float _3644;
                        vec4 _3659;
                        vec3 _3671;
                        vec4 _3686;
                        vec4 _3701;
                        float _3747;
                        bool _3748;
                        for (;;)
                        {
                            uint _3628 = ((_3396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3617));
                            _3618 = (_3617 + 4294967295u) & _3617;
                            uint _3630 = _3628 * 40u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3644 = _3643.w;
                            uint _3646 = (_3628 * 40u) + 4u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3628 * 40u) + 8u;
                            _3671 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x));
                            uint _3673 = (_3628 * 40u) + 16u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3628 * 40u) + 20u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3628 * 40u) + 24u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3722 = (_3628 * 40u) + 28u;
                            vec4 _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3747 = fma(_2110, _3735.z, fma(_2109, _3735.y, _3735.x * _2108)) + _3735.w;
                            _3748 = !((fma(_2110, _3716.z, fma(_2109, _3716.y, _3716.x * _2108)) + _3716.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3748)
                            {
                                float _3775 = _3643.x - _2108;
                                float _3776 = _3643.y - _2109;
                                float _3777 = _3643.z - _2110;
                                float _3778 = dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777));
                                float _3781 = inversesqrt(_3778);
                                float _3782 = _3781 * _3775;
                                float _3783 = _3781 * _3776;
                                float _3784 = _3781 * _3777;
                                float _3788 = 1.0 - (_3778 / (_3644 * _3644));
                                float _4998 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3793 = sqrt(_3778) * _3659.w;
                                float _3795 = 1.39999997615814208984375 / (_3793 + 1.39999997615814208984375);
                                float _3796 = _3795 * _3795;
                                float _3799 = ((1.0 - _3796) * dot(vec3(_3782, _3783, _3784), vec3(_963, _966, _969))) + _3796;
                                float _3802 = _3793 * _3793;
                                float _3806 = (fma(_2110, _3686.z, fma(_2109, _3686.y, _3686.x * _2108)) + _3686.w) / _3747;
                                float _3807 = (fma(_2110, _3701.z, fma(_2109, _3701.y, _3701.x * _2108)) + _3701.w) / _3747;
                                float _3811 = 1.0 - dot(vec2(_3806, _3807), vec2(_3806, _3807));
                                float _5014 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3813 = _3812 * (((isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0))) * _3789) / ((_3802 * 0.699999988079071044921875) + 1.0));
                                float _3825 = exp2(log2(1.0 / ((_3802 * 3.5) + 5.0)) * 0.25);
                                float _3826 = 1.0 - _1023;
                                float _3833 = sqrt(1.0 - ((1.0 - (_3826 * _3826)) * (1.0 - (_3825 * _3825))));
                                float _3834 = _3833 * _3833;
                                float _3835 = _3834 * _3834;
                                float _3836 = _3782 - _3256;
                                float _3837 = _3783 - _3257;
                                float _3838 = _3784 - _3258;
                                float _3842 = inversesqrt(dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838)));
                                float _3846 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _5025 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3850 = dot(vec3(_963, _966, _969), vec3(_3842 * _3836, _3842 * _3837, _3842 * _3838));
                                float _5036 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3857 = ((_3853 * _3853) * (_3835 + (-1.0))) + 1.0;
                                float _3858 = _3795 * _3834;
                                float _3859 = _3858 * _3858;
                                float _3865 = ((1.0 - _3859) * dot(vec3(_963, _966, _969), vec3(_3782, _3783, _3784))) + _3859;
                                float _5047 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3867 = 1.0 - _3834;
                                float _3877 = (0.5 / (((_3866 * ((_3849 * _3867) + _3834)) + 9.9999999392252902907785028219223e-09) + (((_3866 * _3867) + _3834) * _3849))) * _3866;
                                float _5058 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3887 = (_3812 * _3789) * (((_3835 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3857 * _3857) * ((_3802 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3813 * _3659.z;
                                frontier_phi_88_pred_1 = _3813 * _3659.y;
                                frontier_phi_88_pred_2 = _3813 * _3659.x;
                                frontier_phi_88_pred_3 = _3887 * _3671.z;
                                frontier_phi_88_pred_4 = _3887 * _3671.y;
                                frontier_phi_88_pred_5 = _3887 * _3671.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3896 = frontier_phi_88_pred;
                            _3895 = frontier_phi_88_pred_1;
                            _3894 = frontier_phi_88_pred_2;
                            _3893 = frontier_phi_88_pred_3;
                            _3892 = frontier_phi_88_pred_4;
                            _3891 = frontier_phi_88_pred_5;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            if (_3618 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3618;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3603;
                        frontier_phi_82_pred_1 = _3602;
                        frontier_phi_82_pred_2 = _3601;
                        frontier_phi_82_pred_3 = _3600;
                        frontier_phi_82_pred_4 = _3599;
                        frontier_phi_82_pred_5 = _3598;
                    }
                    _3241 = frontier_phi_82_pred;
                    _3239 = frontier_phi_82_pred_1;
                    _3237 = frontier_phi_82_pred_2;
                    _3235 = frontier_phi_82_pred_3;
                    _3233 = frontier_phi_82_pred_4;
                    _3231 = frontier_phi_82_pred_5;
                    uint _3397 = _3396 + 1u;
                    if (_3397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3390 = _3231;
                        _3391 = _3233;
                        _3392 = _3235;
                        _3393 = _3237;
                        _3394 = _3239;
                        _3395 = _3241;
                        _3396 = _3397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3237;
                frontier_phi_63_64_ladder_1 = _3241;
                frontier_phi_63_64_ladder_2 = _3239;
                frontier_phi_63_64_ladder_3 = _3235;
                frontier_phi_63_64_ladder_4 = _3233;
                frontier_phi_63_64_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            _3230 = frontier_phi_63_64_ladder_5;
            _3232 = frontier_phi_63_64_ladder_4;
            _3234 = frontier_phi_63_64_ladder_3;
            _3236 = frontier_phi_63_64_ladder;
            _3238 = frontier_phi_63_64_ladder_2;
            _3240 = frontier_phi_63_64_ladder_1;
        }
        float _3245 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3043 = (_3245 * _3236) + _2574;
        _3045 = (_3245 * _3238) + _2576;
        _3047 = (_3245 * _3240) + _2578;
        _3049 = ((_3230 * 0.039999999105930328369140625) * _3245) + _2897;
        _3051 = ((_3232 * 0.039999999105930328369140625) * _3245) + _2899;
        _3053 = ((_3234 * 0.039999999105930328369140625) * _3245) + _2901;
    }
    else
    {
        _3043 = _2574;
        _3045 = _2576;
        _3047 = _2578;
        _3049 = _2897;
        _3051 = _2899;
        _3053 = _2901;
    }
    float _5074 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5085 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5096 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _3070 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3043 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1007))) + ((_3049 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3045 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1007))) + ((_3051 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _3072 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3047 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1007))) + ((_3053 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    uint _3073 = _257 + 6u;
    float _3081 = _944 / cbSceneParam._m0[86u].x;
    float _3082 = _945 / cbSceneParam._m0[86u].y;
    vec4 _3096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, (log2((isnan(cbSceneParam._m0[77u].w) ? _866 : (isnan(_866) ? cbSceneParam._m0[77u].w : min(_866, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3098 = _3096.x;
    float _3099 = _3096.y;
    float _3100 = _3096.z;
    float _3101 = _3096.w;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_866 > cbSceneParam._m0[78u].w)
    {
        float _3135 = isnan(_866) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _866 : min(cbSceneParam._m0[80u].w, _866));
        float _3136 = _3135 / _866;
        float _3147 = _3136 * _917;
        float _3148 = _918 * _3136;
        float _3149 = (-0.0) - _3148;
        float _3150 = _3136 * _919;
        float _3152 = (cbSceneParam._m0[77u].w * _3149) / _3135;
        float _3153 = _3152 + cbSceneParam._m0[79u].w;
        float _3154 = cbSceneParam._m0[79u].w - _3148;
        float _3160 = sqrt(((_3147 * _3147) + (_3148 * _3148)) + (_3150 * _3150));
        float _3163 = (1.0 - (cbSceneParam._m0[77u].w / _3135)) * _3160;
        float _3168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3347;
        if (abs((_3149 - _3152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3347 = ((((_3153 > 0.0) ? exp2(_3168 * _3153) : (2.0 - exp2(_3170 * _3153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3163;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : max(_3153, _3154));
            float _3293 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : min(_3153, _3154));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3347 = ((abs(_3160 / _3149) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3168 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3168 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3170 * _3302) - exp2(_3170 * _3303)) * _3291))) + (_3163 * cbSceneParam._m0[80u].z);
        }
        vec4 _3349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, 1.0), 0.0);
        float _3358 = exp2((_3347 * (-1.44269502162933349609375)) * (1.0 - _3349.w));
        float _3359 = log2(_3358);
        float _3375 = log2(_3101);
        _3172 = (exp2(_3375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].x)) * _3349.x) / cbSceneParam._m0[78u].x)) + _3098;
        _3174 = (exp2(_3375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].y)) * _3349.y) / cbSceneParam._m0[78u].y)) + _3099;
        _3176 = (exp2(_3375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].z)) * _3349.z) / cbSceneParam._m0[78u].z)) + _3100;
        _3178 = _3358 * _3101;
    }
    else
    {
        _3172 = _3098;
        _3174 = _3099;
        _3176 = _3100;
        _3178 = _3101;
    }
    bool _3385;
    vec4 _3188;
    vec4 _3210;
    float _3212;
    float _3216;
    float _3217;
    float _3218;
    float _3219;
    bool _3229;
    for (;;)
    {
        _3188 = cbMatDynParam._m0[0u];
        float _3190 = roundEven(_3188.y);
        bool _3191 = _3190 == 3.0;
        float _3192 = log2(_3178);
        float _3199 = exp2(_3192 * cbSceneParam._m0[78u].x) * _3070;
        float _3200 = exp2(_3192 * cbSceneParam._m0[78u].y) * _3071;
        float _3201 = exp2(_3192 * cbSceneParam._m0[78u].z) * _3072;
        float _3208 = _933 + (-0.5);
        _3210 = cbMtdParam._m0[1u];
        _3212 = _3210.y * _3208;
        float _3215 = (_3190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3216 = _3215 * (_3191 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3172)));
        _3217 = _3215 * (_3191 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3174)));
        _3218 = _3215 * (_3191 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3176)));
        _3219 = _3208 * 0.999000012874603271484375;
        _3229 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3229)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3219) < 0.5)
            {
                _3385 = true;
                break;
            }
        }
        uint _3326 = _982 + uint(_3188.w);
        if ((cbInstanceData._m0[_3326].w < 1.0) && ((cbInstanceData._m0[_3326].w + _3219) < 0.5))
        {
            _3385 = true;
            break;
        }
        if ((_3212 + 1.0) < _3210.x)
        {
            _3385 = true;
            break;
        }
        _3385 = false;
        break;
    }
    float _3589;
    if (_3385)
    {
        discard_state = true;
        _3589 = 0.0;
    }
    else
    {
        _3589 = cbInstanceData._m0[_3073].w;
    }
    SV_Target.x = _3216;
    SV_Target.y = _3217;
    SV_Target.z = _3218;
    SV_Target.w = _3589;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3073].w;
    discard_exit();
}


