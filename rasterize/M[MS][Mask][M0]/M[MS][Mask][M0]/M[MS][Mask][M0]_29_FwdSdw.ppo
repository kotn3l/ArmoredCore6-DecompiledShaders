#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1387;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3975 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3986 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3997 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _366 = _361.x * cbMtdParam._m0[11u].x;
    float _367 = _361.y * cbMtdParam._m0[11u].y;
    float _368 = _361.z * cbMtdParam._m0[11u].z;
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4008 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _480 = (_335.x * cbMtdParam._m0[9u].x) * ((_470 * ((_387.x * cbMtdParam._m0[12u].x) - _366)) + _366);
    float _481 = (_335.y * cbMtdParam._m0[9u].y) * ((_470 * ((_387.y * cbMtdParam._m0[12u].y) - _367)) + _367);
    float _482 = (_335.z * cbMtdParam._m0[9u].z) * ((_470 * ((_387.z * cbMtdParam._m0[12u].z) - _368)) + _368);
    float _486 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _480;
    float _489 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _481;
    float _492 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _482;
    float _500 = (((_480 - _486) * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) + _486) * 4.55000019073486328125;
    float _502 = (((_481 - _489) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) + _489) * 4.55000019073486328125;
    float _504 = (((_482 - _492) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) + _492) * 4.55000019073486328125;
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _579 = ((_549.z - _570) * _470) + _570;
    float _582 = ((((_549.x - _568) * _470) + _568) * 2.0) + (-1.0);
    float _583 = ((((_549.y - _569) * _470) + _569) * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _4019 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (_582 + ((((_522.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _622 = (_583 + ((((_522.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _625 = fma(_589, _248, fma(_622, _255, _621 * _241));
    float _628 = fma(_589, _249, fma(_622, _256, _621 * _242));
    float _631 = fma(_589, _250, fma(_622, _257, _621 * _243));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _671 = (cbMtdParam._m0[19u].x + dot(vec4(_635 * _625, _635 * _628, _635 * _631, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) * cbMtdParam._m0[21u].z);
    float _4030 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _674 = (-0.0) - cbMtdParam._m0[24u].x;
    float _676 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
    float _684 = _672 - ((_672 * TEXCOORD_8.x) * _677);
    float _685 = _672 - ((_672 * TEXCOORD_8.y) * _677);
    float _686 = _672 - ((_672 * TEXCOORD_8.z) * _677);
    float _693 = (_684 * (cbMtdParam._m0[17u].x - _500)) + _500;
    float _694 = (_685 * (cbMtdParam._m0[17u].y - _502)) + _502;
    float _695 = (_686 * (cbMtdParam._m0[17u].z - _504)) + _504;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _709 = _707.x;
    float _710 = 1.0 - _709;
    float _736 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_709 - _710) * cbMtdParam._m0[24u].y) + _710) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4051 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _745 = ((((cbMtdParam._m0[10u].x - _693) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _737) + _693;
    float _746 = ((((cbMtdParam._m0[10u].y - _694) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _737) + _694;
    float _747 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _695)) * _737) + _695;
    float _752 = (((_522.z - _579) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _579;
    float _756 = ((_609.z - _752) * cbMtdParam._m0[19u].w) + _752;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4062 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = ((_770.z - _756) * _684) + _756;
    float _790 = ((cbMtdParam._m0[23u].y - _787) * _737) + _787;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4073 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _832 = ((sqrt(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) - _589) * _686) + _589;
    float _835 = (((_777 - _621) * _684) + _621) + (cbMtdParam._m0[21u].x * _621);
    float _836 = (((_778 - _622) * _685) + _622) + (cbMtdParam._m0[21u].x * _622);
    float _847 = (((_815 - _835) + (_835 * cbMtdParam._m0[22u].z)) * _737) + _835;
    float _848 = (((_816 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _737) + _836;
    float _849 = (_737 * (sqrt(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) - _832)) + _832;
    float _853 = cbMtdParam._m0[22u].x + _609.w;
    float _856 = fma(_849, _248, fma(_848, _255, _847 * _241));
    float _859 = fma(_849, _249, fma(_848, _256, _847 * _242));
    float _862 = fma(_849, _250, fma(_848, _257, _847 * _243));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _4084 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _870 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4106 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4117 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4128 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _975 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _978 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _992 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4139 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    vec4 _1012 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1016 = ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * TEXCOORD_5.w) * _1012.x;
    float _1017 = dot(vec3(_867, _868, _869), vec3(_945, _946, _947));
    float _1020 = _1017 * 2.0;
    float _1024 = (_1020 * _867) - _945;
    float _1025 = (_1020 * _868) - _946;
    float _1026 = (_1020 * _869) - _947;
    float _1030 = abs(dot(vec3(_945, _946, _947), vec3(_867, _868, _869)));
    float _4172 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1032 = sqrt(_870);
    float _1045 = exp2((_1032 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1032 * 3.0));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1115 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1119 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1144 = _1077 + _867;
        float _1145 = _1081 + _868;
        float _1146 = _1085 + _869;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_867, _868, _869), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4220 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_867, _868, _869), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4253 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_867, _868, _869), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4286 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1430 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1434 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1457 = _1077 + _867;
        float _1458 = _1081 + _868;
        float _1459 = _1085 + _869;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_867, _868, _869), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4349 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_867, _868, _869), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4382 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_867, _868, _869), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4415 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1387;
        _1696 = _1387;
        _1697 = _1387;
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = _1387;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1399)) + _1399;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1400)) + _1400;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1401)) + _1401;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1024 * 0.5;
    float _1764 = _1025 * 0.5;
    float _1765 = _1026 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_1026, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024));
        float _1894 = fma(_1026, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024));
        float _1897 = fma(_1026, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1925 = frontier_phi_14_12_ladder;
        }
        float _2095;
        if (_1894 > 0.0)
        {
            _2095 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2095 = frontier_phi_23_19_ladder;
        }
        float _2390;
        if (_1897 > 0.0)
        {
            _2390 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2390 = frontier_phi_35_30_ladder;
        }
        float _2392 = isnan(_2095) ? _1925 : (isnan(_1925) ? _2095 : min(_1925, _2095));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1891) + _1880;
        float _2398 = (_2393 * _1894) + _1884;
        float _2399 = (_2393 * _1897) + _1888;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2400;
        float _2404 = _2400 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 > _2404) || ((_2398 < _2402) || ((_2397 < _2402) || (_2397 > _2404))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2399, cbModelParam._m0[9u].z, fma(_2398, cbModelParam._m0[9u].y, _2397 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2399, cbModelParam._m0[10u].z, fma(_2398, cbModelParam._m0[10u].y, _2397 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2399, cbModelParam._m0[11u].z, fma(_2398, cbModelParam._m0[11u].y, _2397 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_13_35_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_13_35_ladder_2;
        _1915 = frontier_phi_13_35_ladder_1;
        _1917 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1024, _1025, _1026), _1832);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_1026, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024));
        float _1990 = fma(_1026, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024));
        float _1993 = fma(_1026, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024));
        float _2100;
        if (_1987 > 0.0)
        {
            _2100 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2100 = frontier_phi_25_21_ladder;
        }
        float _2417;
        if (_1990 > 0.0)
        {
            _2417 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2417 = frontier_phi_37_32_ladder;
        }
        float _2744;
        if (_1993 > 0.0)
        {
            _2744 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2744 = frontier_phi_47_44_ladder;
        }
        float _2746 = isnan(_2417) ? _2100 : (isnan(_2100) ? _2417 : min(_2100, _2417));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1987) + _1976;
        float _2752 = (_2747 * _1990) + _1980;
        float _2753 = (_2747 * _1993) + _1984;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_22_47_ladder = _2871.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2871.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2871.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_22_47_ladder_2;
        _2014 = frontier_phi_22_47_ladder_1;
        _2016 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1024, _1025, _1026), _1922);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2028 = ((((1.0 - _1045) * ((_1032 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1045 * _1032)) * _1016;
    float _2029 = _2028 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = _2028 * ((cbModelParam._m0[1u].w * (_2014 - _1915)) + _1915);
    float _2031 = _2028 * ((cbModelParam._m0[1u].w * (_2016 - _1917)) + _1917);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2087 = _2074 / _2086;
    float _2088 = _2078 / _2086;
    float _2089 = _2082 / _2086;
    float _2236;
    float _2237;
    float _2238;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2116 = ((uint(_2089 > cbSceneParam._m0[59u].y) + uint(_2089 > cbSceneParam._m0[59u].x)) + uint(_2089 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2117 = _2116 + 43u;
        uint _2125 = _2116 + 44u;
        uint _2133 = _2116 + 45u;
        uint _2141 = _2116 + 46u;
        float _2152 = fma(_2086, cbSceneParam._m0[_2117].w, fma(_2082, cbSceneParam._m0[_2117].z, fma(_2078, cbSceneParam._m0[_2117].y, _2074 * cbSceneParam._m0[_2117].x)));
        float _2156 = fma(_2086, cbSceneParam._m0[_2125].w, fma(_2082, cbSceneParam._m0[_2125].z, fma(_2078, cbSceneParam._m0[_2125].y, _2074 * cbSceneParam._m0[_2125].x)));
        float _2164 = fma(_2086, cbSceneParam._m0[_2141].w, fma(_2082, cbSceneParam._m0[_2141].z, fma(_2078, cbSceneParam._m0[_2141].y, _2074 * cbSceneParam._m0[_2141].x)));
        float _2169 = cbSceneParam._m0[33u].z * _2164;
        float _2171 = cbSceneParam._m0[33u].w * _2164;
        float _2174 = fma(_2086, cbSceneParam._m0[_2133].w, fma(_2082, cbSceneParam._m0[_2133].z, fma(_2078, cbSceneParam._m0[_2133].y, _2074 * cbSceneParam._m0[_2133].x))) / _2164;
        float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
        float _4541 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2229 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2152) / _2164, (_2171 + _2156) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2152) / _2164, (_2156 - _2169) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2169) / _2164, (_2156 - _2171) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2171) / _2164, (_2169 + _2156) / _2164), _2174), 0.0)).x), vec4(0.25)));
        _2236 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
        _2237 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
        _2238 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2236 = 1.0;
        _2237 = 1.0;
        _2238 = 1.0;
    }
    float _2302;
    float _2304;
    float _2306;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2290 = fma(_2086, cbSceneParam._m0[63u].w, fma(_2082, cbSceneParam._m0[63u].z, fma(_2078, cbSceneParam._m0[63u].y, _2074 * cbSceneParam._m0[63u].x)));
        float _2291 = fma(_2086, cbSceneParam._m0[60u].w, fma(_2082, cbSceneParam._m0[60u].z, fma(_2078, cbSceneParam._m0[60u].y, _2074 * cbSceneParam._m0[60u].x))) / _2290;
        float _2292 = fma(_2086, cbSceneParam._m0[61u].w, fma(_2082, cbSceneParam._m0[61u].z, fma(_2078, cbSceneParam._m0[61u].y, _2074 * cbSceneParam._m0[61u].x))) / _2290;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2291 >= cbSceneParam._m0[64u].x) && (_2292 >= cbSceneParam._m0[64u].y)) && (_2291 <= cbSceneParam._m0[64u].z)) && (_2292 <= cbSceneParam._m0[64u].w))
        {
            float _2430 = fma(_2086, cbSceneParam._m0[62u].w, fma(_2082, cbSceneParam._m0[62u].z, fma(_2078, cbSceneParam._m0[62u].y, _2074 * cbSceneParam._m0[62u].x))) / _2290;
            float _2434 = isnan(cbSceneParam._m0[41u].w) ? _2430 : (isnan(_2430) ? cbSceneParam._m0[41u].w : max(_2430, cbSceneParam._m0[41u].w));
            float _2477 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
            float _4557 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
            float _2484 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2291, cbSceneParam._m0[33u].w + _2292), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2291, _2292 - cbSceneParam._m0[33u].z), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].z, _2292 - cbSceneParam._m0[33u].w), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2292), _2434), 0.0)).x), vec4(0.25)));
            float _2488 = 1.0 - (_2484 * cbSceneParam._m0[34u].x);
            float _2489 = 1.0 - (_2484 * cbSceneParam._m0[34u].y);
            float _2490 = 1.0 - (_2484 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_34_33_ladder_1 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_34_33_ladder_2 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
        }
        else
        {
            frontier_phi_34_33_ladder = _2238;
            frontier_phi_34_33_ladder_1 = _2237;
            frontier_phi_34_33_ladder_2 = _2236;
        }
        _2302 = frontier_phi_34_33_ladder_2;
        _2304 = frontier_phi_34_33_ladder_1;
        _2306 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2302 = _2236;
        _2304 = _2237;
        _2306 = _2238;
    }
    uvec4 _2311 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2313 = _2311.x * 14u;
    uint _2314 = _2313 + 13u;
    float _2321 = _1016 + (-1.0);
    float _2326 = (cbLight._m0[_2314].x * _2321) + 1.0;
    float _2327 = (cbLight._m0[_2314].y * _2321) + 1.0;
    float _2328 = (cbLight._m0[_2314].z * _2321) + 1.0;
    float _2329 = (cbLight._m0[_2314].w * _2321) + 1.0;
    uint _2330 = _2313 + 5u;
    float _2336 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2340 = _2313 + 4u;
    float _2349 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2353 = _2313 | 1u;
    float _2364 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_867, _868, _869));
    float _2367 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_867, _868, _869));
    float _4593 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _4604 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2374 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2381 = ((cbLight._m0[_2330].x * _2336) * _2374) + (((cbLight._m0[_2340].x * _2302) * _2349) * _2372);
    float _2382 = ((_2336 * cbLight._m0[_2330].y) * _2374) + (((cbLight._m0[_2340].y * _2304) * _2349) * _2372);
    float _2383 = ((_2336 * cbLight._m0[_2330].z) * _2374) + (((cbLight._m0[_2340].z * _2306) * _2349) * _2372);
    uvec4 _2387 = floatBitsToUint(cbLight._m0[_2313 + 12u]);
    bool _2389 = _2387.x == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2389)
    {
        _2491 = _2381;
        _2493 = _2382;
        _2495 = _2383;
    }
    else
    {
        uint _2499 = _2313 + 6u;
        float _2515 = (dot(vec3(cbLight._m0[_2313 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2516 = _2515 * _2515;
        float _4615 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2517 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2518 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2491 = (((cbLight._m0[_2499].x * 0.3183098733425140380859375) * _2517) * _2518) + _2381;
        _2493 = (((cbLight._m0[_2499].y * 0.3183098733425140380859375) * _2517) * _2518) + _2382;
        _2495 = (((cbLight._m0[_2499].z * 0.3183098733425140380859375) * _2517) * _2518) + _2383;
    }
    bool _2498 = _2387.y == 0u;
    float _2553;
    float _2555;
    float _2557;
    if (_2498)
    {
        _2553 = _2491;
        _2555 = _2493;
        _2557 = _2495;
    }
    else
    {
        uint _2715 = _2313 + 7u;
        float _2731 = (dot(vec3(cbLight._m0[_2313 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2732 = _2731 * _2731;
        float _4631 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2733 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2734 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2553 = (((cbLight._m0[_2715].x * 0.3183098733425140380859375) * _2733) * _2734) + _2491;
        _2555 = (((cbLight._m0[_2715].y * 0.3183098733425140380859375) * _2733) * _2734) + _2493;
        _2557 = (((cbLight._m0[_2715].z * 0.3183098733425140380859375) * _2733) * _2734) + _2495;
    }
    uint _2560 = _2313 + 8u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _870) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2313].x + _945;
    float _2576 = cbLight._m0[_2313].y + _946;
    float _2577 = cbLight._m0[_2313].z + _947;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2313].xyz));
    float _4647 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _4658 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _2589 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2590 = dot(vec3(_867, _868, _869), vec3(_2582, _2583, _2584));
    float _4669 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2582, _2583, _2584));
    float _4680 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2574 * _2574;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2614 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2589 * ((_2588 * _2614) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2614) + _2574) * _2588))) * _2588;
    float _4691 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    uint _2641 = _2313 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _870) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2353].x + _945;
    float _2655 = cbLight._m0[_2353].y + _946;
    float _2656 = cbLight._m0[_2353].z + _947;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2353].xyz));
    float _4702 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2668 = dot(vec3(_867, _868, _869), vec3(_2661, _2662, _2663));
    float _4713 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2661, _2662, _2663));
    float _4724 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2690 = 1.0 - _2653;
    float _2700 = (0.5 / (((_2589 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2690) + _2653) * _2667))) * _2667;
    float _4735 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2712 = (((_2689 * cbLight._m0[_2641].x) * _2702) * _2336) + ((((cbLight._m0[_2560].x * _2302) * _2613) * _2627) * _2349);
    float _2713 = (((_2689 * cbLight._m0[_2641].y) * _2702) * _2336) + ((((cbLight._m0[_2560].y * _2304) * _2613) * _2627) * _2349);
    float _2714 = (((_2689 * cbLight._m0[_2641].z) * _2702) * _2336) + ((((cbLight._m0[_2560].z * _2306) * _2613) * _2627) * _2349);
    float _2770;
    float _2772;
    float _2774;
    if (_2389)
    {
        _2770 = _2712;
        _2772 = _2713;
        _2774 = _2714;
    }
    else
    {
        uint _2776 = _2313 + 2u;
        uint _2780 = _2313 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _870) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _945;
        float _2797 = cbLight._m0[_2776].y + _946;
        float _2798 = cbLight._m0[_2776].z + _947;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2776].xyz));
        float _4746 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2810 = dot(vec3(_867, _868, _869), vec3(_2803, _2804, _2805));
        float _4757 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4768 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2831 = (exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2832 = 1.0 - _2795;
        float _2842 = (0.5 / (((_2589 * ((_2809 * _2832) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2832) + _2795) * _2809))) * _2809;
        float _4779 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2770 = (((_2831 * cbLight._m0[_2780].x) * _2844) * _2845) + _2712;
        _2772 = (((_2831 * cbLight._m0[_2780].y) * _2844) * _2845) + _2713;
        _2774 = (((_2831 * cbLight._m0[_2780].z) * _2844) * _2845) + _2714;
    }
    float _2876;
    float _2878;
    float _2880;
    if (_2498)
    {
        _2876 = _2770;
        _2878 = _2772;
        _2880 = _2774;
    }
    else
    {
        uint _2887 = _2313 + 3u;
        uint _2891 = _2313 + 11u;
        float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2887].w)) * _870) * 0.949999988079071044921875);
        float _2906 = _2905 * _2905;
        float _2907 = cbLight._m0[_2887].x + _945;
        float _2908 = cbLight._m0[_2887].y + _946;
        float _2909 = cbLight._m0[_2887].z + _947;
        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
        float _2914 = _2913 * _2907;
        float _2915 = _2913 * _2908;
        float _2916 = _2913 * _2909;
        float _2917 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2887].xyz));
        float _4795 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2921 = dot(vec3(_867, _868, _869), vec3(_2914, _2915, _2916));
        float _4806 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2925 = dot(vec3(cbLight._m0[_2887].xyz), vec3(_2914, _2915, _2916));
        float _4817 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2929 = _2906 * _2906;
        float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
        float _2942 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2943 = 1.0 - _2906;
        float _2953 = (0.5 / (((_2589 * ((_2920 * _2943) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2943) + _2906) * _2920))) * _2920;
        float _4828 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2955 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
        float _2956 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2876 = (((_2942 * cbLight._m0[_2891].x) * _2955) * _2956) + _2770;
        _2878 = (((_2942 * cbLight._m0[_2891].y) * _2955) * _2956) + _2772;
        _2880 = (((_2942 * cbLight._m0[_2891].z) * _2955) * _2956) + _2774;
    }
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_2311.y == 0u)
    {
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.x;
        uint _2989 = uint((float(_2977.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _2978))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _2978)));
        float _2999 = (log2(_2089 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3000 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        uint _3003 = uint(isnan(14.0) ? _3000 : (isnan(_3000) ? 14.0 : min(_3000, 14.0)));
        uvec4 _3008 = texelFetch(g_lightClusterGridBuffer, int(((_3003 << 2u) + (_2989 << 6u)) >> 2u));
        uint _3009 = _3008.x;
        uint _3010 = _2977.z;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((((1u << ((_3010 >> 4u) & 15u)) + 4294967295u) & _3009) == 0u) || ((_3010 & 240u) == 0u))
        {
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
        }
        else
        {
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            uint _3239 = 0u;
            uint _3248;
            bool _3249;
            for (;;)
            {
                _3248 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                _3249 = _3248 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3249)
                {
                    frontier_phi_66_pred = _3238;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3248;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3239 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2087;
                        float _3424 = _3383.y - _2088;
                        float _3425 = _3383.z - _2089;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_972, _975, _978), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4854 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2087;
                        float _3459 = (-0.0) - _2088;
                        float _3460 = (-0.0) - _2089;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _1032;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_972, _975, _978), vec3(_3465, _3466, _3467));
                        float _4870 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3499 = dot(vec3(_972, _975, _978), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4881 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4892 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4903 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3292 = (_3454 * _3402.x) + _3360;
                        _3293 = (_3454 * _3402.y) + _3361;
                        _3294 = (_3454 * _3402.z) + _3362;
                        _3289 = (_3534 * _3419.x) + _3357;
                        _3290 = (_3534 * _3419.y) + _3358;
                        _3291 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_66_pred = _3294;
                    frontier_phi_66_pred_1 = _3293;
                    frontier_phi_66_pred_2 = _3292;
                    frontier_phi_66_pred_3 = _3291;
                    frontier_phi_66_pred_4 = _3290;
                    frontier_phi_66_pred_5 = _3289;
                }
                _3100 = frontier_phi_66_pred;
                _3098 = frontier_phi_66_pred_1;
                _3096 = frontier_phi_66_pred_2;
                _3094 = frontier_phi_66_pred_3;
                _3092 = frontier_phi_66_pred_4;
                _3090 = frontier_phi_66_pred_5;
                uint _3240 = _3239 + 1u;
                if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3233 = _3090;
                    _3234 = _3092;
                    _3235 = _3094;
                    _3236 = _3096;
                    _3237 = _3098;
                    _3238 = _3100;
                    _3239 = _3240;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
        }
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.z;
        uint _3106 = (_3104 >> 8u) & 15u;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((4294967295u << _3106) & _3009) == 0u)
        {
            _3201 = _3089;
            _3203 = _3091;
            _3205 = _3093;
            _3207 = _3095;
            _3209 = _3097;
            _3211 = _3099;
        }
        else
        {
            float _3226 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
            float _3227 = _3226 * _2087;
            float _3228 = _3226 * _2088;
            float _3229 = _3226 * _2089;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3106 < ((_3104 >> 12u) & 15u))
            {
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3340 = _3089;
                float _3341 = _3091;
                float _3342 = _3093;
                float _3343 = _3095;
                float _3344 = _3097;
                float _3345 = _3099;
                uint _3346 = _3106;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3356)
                    {
                        frontier_phi_72_pred = _3345;
                        frontier_phi_72_pred_1 = _3344;
                        frontier_phi_72_pred_2 = _3343;
                        frontier_phi_72_pred_3 = _3342;
                        frontier_phi_72_pred_4 = _3341;
                        frontier_phi_72_pred_5 = _3340;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        uint _3558 = _3355;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3627;
                        vec4 _3642;
                        float _3688;
                        bool _3689;
                        for (;;)
                        {
                            uint _3569 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3614 = (_3569 * 40u) + 16u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3569 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3569 * 40u) + 24u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3663 = (_3569 * 40u) + 28u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3688 = fma(_2089, _3676.z, fma(_2088, _3676.y, _3676.x * _2087)) + _3676.w;
                            _3689 = !((fma(_2089, _3657.z, fma(_2088, _3657.y, _3657.x * _2087)) + _3657.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3689)
                            {
                                float _3716 = _3584.x - _2087;
                                float _3717 = _3584.y - _2088;
                                float _3718 = _3584.z - _2089;
                                float _3719 = dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718));
                                float _3722 = inversesqrt(_3719);
                                float _3723 = _3722 * _3716;
                                float _3724 = _3722 * _3717;
                                float _3725 = _3722 * _3718;
                                float _3729 = 1.0 - (_3719 / (_3585 * _3585));
                                float _4914 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3734 = sqrt(_3719) * _3600.w;
                                float _3736 = 1.39999997615814208984375 / (_3734 + 1.39999997615814208984375);
                                float _3737 = _3736 * _3736;
                                float _3740 = ((1.0 - _3737) * dot(vec3(_3723, _3724, _3725), vec3(_972, _975, _978))) + _3737;
                                float _3743 = _3734 * _3734;
                                float _3747 = (fma(_2089, _3627.z, fma(_2088, _3627.y, _3627.x * _2087)) + _3627.w) / _3688;
                                float _3748 = (fma(_2089, _3642.z, fma(_2088, _3642.y, _3642.x * _2087)) + _3642.w) / _3688;
                                float _3752 = 1.0 - dot(vec2(_3747, _3748), vec2(_3747, _3748));
                                float _4930 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3754 = _3753 * (((isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0))) * _3730) / ((_3743 * 0.699999988079071044921875) + 1.0));
                                float _3766 = exp2(log2(1.0 / ((_3743 * 3.5) + 5.0)) * 0.25);
                                float _3767 = 1.0 - _1032;
                                float _3774 = sqrt(1.0 - ((1.0 - (_3767 * _3767)) * (1.0 - (_3766 * _3766))));
                                float _3775 = _3774 * _3774;
                                float _3776 = _3775 * _3775;
                                float _3777 = _3723 - _3227;
                                float _3778 = _3724 - _3228;
                                float _3779 = _3725 - _3229;
                                float _3783 = inversesqrt(dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779)));
                                float _3787 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3227, (-0.0) - _3228, (-0.0) - _3229));
                                float _4941 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3791 = dot(vec3(_972, _975, _978), vec3(_3783 * _3777, _3783 * _3778, _3783 * _3779));
                                float _4952 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3798 = ((_3794 * _3794) * (_3776 + (-1.0))) + 1.0;
                                float _3799 = _3736 * _3775;
                                float _3800 = _3799 * _3799;
                                float _3806 = ((1.0 - _3800) * dot(vec3(_972, _975, _978), vec3(_3723, _3724, _3725))) + _3800;
                                float _4963 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3808 = 1.0 - _3775;
                                float _3818 = (0.5 / (((_3807 * ((_3790 * _3808) + _3775)) + 9.9999999392252902907785028219223e-09) + (((_3807 * _3808) + _3775) * _3790))) * _3807;
                                float _4974 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3828 = (_3753 * _3730) * (((_3776 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3798 * _3798) * ((_3743 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3754 * _3600.y;
                                frontier_phi_78_pred_1 = _3754 * _3600.x;
                                frontier_phi_78_pred_2 = _3828 * _3612.z;
                                frontier_phi_78_pred_3 = _3828 * _3612.y;
                                frontier_phi_78_pred_4 = _3828 * _3612.x;
                                frontier_phi_78_pred_5 = _3754 * _3600.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3836 = frontier_phi_78_pred;
                            _3835 = frontier_phi_78_pred_1;
                            _3834 = frontier_phi_78_pred_2;
                            _3833 = frontier_phi_78_pred_3;
                            _3832 = frontier_phi_78_pred_4;
                            _3837 = frontier_phi_78_pred_5;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3544;
                        frontier_phi_72_pred_1 = _3543;
                        frontier_phi_72_pred_2 = _3542;
                        frontier_phi_72_pred_3 = _3541;
                        frontier_phi_72_pred_4 = _3540;
                        frontier_phi_72_pred_5 = _3539;
                    }
                    _3212 = frontier_phi_72_pred;
                    _3210 = frontier_phi_72_pred_1;
                    _3208 = frontier_phi_72_pred_2;
                    _3206 = frontier_phi_72_pred_3;
                    _3204 = frontier_phi_72_pred_4;
                    _3202 = frontier_phi_72_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3202;
                        _3341 = _3204;
                        _3342 = _3206;
                        _3343 = _3208;
                        _3344 = _3210;
                        _3345 = _3212;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3212;
                frontier_phi_60_61_ladder_1 = _3210;
                frontier_phi_60_61_ladder_2 = _3206;
                frontier_phi_60_61_ladder_3 = _3204;
                frontier_phi_60_61_ladder_4 = _3202;
                frontier_phi_60_61_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_60_61_ladder = _3099;
                frontier_phi_60_61_ladder_1 = _3097;
                frontier_phi_60_61_ladder_2 = _3093;
                frontier_phi_60_61_ladder_3 = _3091;
                frontier_phi_60_61_ladder_4 = _3089;
                frontier_phi_60_61_ladder_5 = _3095;
            }
            _3201 = frontier_phi_60_61_ladder_4;
            _3203 = frontier_phi_60_61_ladder_3;
            _3205 = frontier_phi_60_61_ladder_2;
            _3207 = frontier_phi_60_61_ladder_5;
            _3209 = frontier_phi_60_61_ladder_1;
            _3211 = frontier_phi_60_61_ladder;
        }
        float _3216 = isnan(1.0) ? _1016 : (isnan(_1016) ? 1.0 : min(_1016, 1.0));
        _3022 = (_3216 * _3207) + _2553;
        _3024 = (_3216 * _3209) + _2555;
        _3026 = (_3216 * _3211) + _2557;
        _3028 = ((_3201 * 0.039999999105930328369140625) * _3216) + _2876;
        _3030 = ((_3203 * 0.039999999105930328369140625) * _3216) + _2878;
        _3032 = ((_3205 * 0.039999999105930328369140625) * _3216) + _2880;
    }
    else
    {
        _3022 = _2553;
        _3024 = _2555;
        _3026 = _2557;
        _3028 = _2876;
        _3030 = _2878;
        _3032 = _2880;
    }
    float _4990 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5001 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _5012 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    uint _3052 = _279 + 6u;
    float _3060 = _953 / cbSceneParam._m0[86u].x;
    float _3061 = _954 / cbSceneParam._m0[86u].y;
    vec4 _3075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3077 = _3075.x;
    float _3078 = _3075.y;
    float _3079 = _3075.z;
    float _3080 = _3075.w;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _3114 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _3115 = _3114 / _888;
        float _3126 = _3115 * _938;
        float _3127 = _939 * _3115;
        float _3128 = (-0.0) - _3127;
        float _3129 = _3115 * _940;
        float _3131 = (cbSceneParam._m0[77u].w * _3128) / _3114;
        float _3132 = _3131 + cbSceneParam._m0[79u].w;
        float _3133 = cbSceneParam._m0[79u].w - _3127;
        float _3139 = sqrt(((_3126 * _3126) + (_3127 * _3127)) + (_3129 * _3129));
        float _3142 = (1.0 - (cbSceneParam._m0[77u].w / _3114)) * _3139;
        float _3147 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3149 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3128 - _3131) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3132 > 0.0) ? exp2(_3147 * _3132) : (2.0 - exp2(_3149 * _3132))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3142;
        }
        else
        {
            float _3262 = 1.0 / cbSceneParam._m0[80u].x;
            float _3263 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : max(_3132, _3133));
            float _3264 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : min(_3132, _3133));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            _3302 = ((abs(_3139 / _3128) * cbSceneParam._m0[80u].y) * ((((_3273 - _3274) * 2.0) - ((exp2(_3147 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0)))) - exp2(_3147 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))))) * _3262)) - ((exp2(_3149 * _3273) - exp2(_3149 * _3274)) * _3262))) + (_3142 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3080);
        _3151 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3077;
        _3153 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3078;
        _3155 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3079;
        _3157 = _3313 * _3080;
    }
    else
    {
        _3151 = _3077;
        _3153 = _3078;
        _3155 = _3079;
        _3157 = _3080;
    }
    float _3169 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3170 = _3169 == 3.0;
    float _3171 = log2(_3157);
    float _3178 = exp2(_3171 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3022 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1016))) + ((_3028 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3179 = exp2(_3171 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_3024 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1016))) + ((_3030 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3180 = exp2(_3171 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_3026 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1016))) + ((_3032 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3189 = (_3169 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3189 * (_3170 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.y = _3189 * (_3170 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.z = _3189 * (_3170 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3155)));
    SV_Target.w = cbInstanceData._m0[_3052].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3052].w;
}


