#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1412;
float _3771;
float _3772;
float _3773;
float _3774;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3783 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3794 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _556 = _554.x;
    float _566 = dot(vec4(_556, _554.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _578 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _365.z) * 2.0) - ((((_556 - _566) * cbMtdParam._m0[24u].z) + _566) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3805 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _592 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_579 * ((_537.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _595 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_579 * ((_537.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _598 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_579 * ((_537.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    float _639 = ((_611.x - _630) * _437) + _630;
    float _640 = ((_611.y - _631) * _437) + _631;
    float _641 = ((_611.z - _632) * _437) + _632;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_653.x - _639) * _510) + _639;
    float _665 = ((_653.y - _640) * _510) + _640;
    float _666 = ((_653.z - _641) * _510) + _641;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _691 = ((_678.z - _666) * _579) + _666;
    float _694 = ((((_678.x - _664) * _579) + _664) * 2.0) + (-1.0);
    float _696 = ((((_678.y - _665) * _579) + _665) * 2.0) + (-1.0);
    float _697 = dot(vec2(_694, _696), vec2(_694, _696));
    float _3816 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _728 = (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _729 = (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _772 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_743 - _744) * cbMtdParam._m0[24u].y) + _744) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3827 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _781 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _773) + _592;
    float _782 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _773) + _595;
    float _783 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _598)) * _773) + _598;
    float _787 = (cbMtdParam._m0[19u].w * (_716.z - _691)) + _691;
    float _791 = ((cbMtdParam._m0[23u].y - _787) * _773) + _787;
    vec4 _810 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _816 = (_810.x * 2.0) + (-1.0);
    float _817 = (_810.y * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _3838 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _834 = (_773 * (((cbMtdParam._m0[22u].z * _728) - _728) + _816)) + _728;
    float _835 = (_773 * (((cbMtdParam._m0[22u].z * _729) - _729) + _817)) + _729;
    float _836 = (_773 * (sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _702)) + _702;
    float _838 = cbMtdParam._m0[22u].x + _716.w;
    float _841 = fma(_836, _244 * NORMAL.x, fma(_835, _251 * TANGENT.x, (_237 * _229) * _834));
    float _844 = fma(_836, _244 * NORMAL.y, fma(_835, _251 * TANGENT.y, (_237 * _230) * _834));
    float _847 = fma(_836, _244 * NORMAL.z, fma(_835, _251 * TANGENT.z, (_237 * _231) * _834));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _3849 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _855 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _3871 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3882 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3893 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    vec4 _937 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _939 = _937.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1093 = sqrt(((_923 * _923) + (_924 * _924)) + (_925 * _925));
        float _1099 = (cbMatDynParam._m0[5u].x * _1093) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1104 = (cbMatDynParam._m0[5u].z * _1093) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1100)) + _1100) < ((_939 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _972 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _975 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _988 = _257 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_989].z;
    float _3926 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1013 = ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_852, _853, _854), vec3(_930, _931, _932));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _852) - _930;
    float _1022 = (_1017 * _853) - _931;
    float _1023 = (_1017 * _854) - _932;
    float _1027 = abs(dot(vec3(_930, _931, _932), vec3(_852, _853, _854)));
    float _3959 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_855);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1411;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1136 = fma(_1082, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074));
        float _1140 = fma(_1082, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074));
        float _1144 = fma(_1082, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074));
        float _1169 = _1074 + _852;
        float _1170 = _1078 + _853;
        float _1171 = _1082 + _854;
        float _1181 = fma(_1171, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169)) - _1136;
        float _1182 = fma(_1171, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169)) - _1140;
        float _1183 = fma(_1171, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169)) - _1144;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1136 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1140 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[34u].z) + ((((((_1144 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1239 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1205.x + (-0.5));
        float _1241 = _1239 * (_1205.y + (-0.5));
        float _1242 = _1239 * (_1205.z + (-0.5));
        float _1249 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1212.x + (-0.5));
        float _1251 = _1249 * (_1212.y + (-0.5));
        float _1252 = _1249 * (_1212.z + (-0.5));
        float _1259 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1219.x + (-0.5));
        float _1261 = _1259 * (_1219.y + (-0.5));
        float _1262 = _1259 * (_1219.z + (-0.5));
        float _1269 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1226.x + (-0.5));
        float _1271 = _1269 * (_1226.y + (-0.5));
        float _1272 = _1269 * (_1226.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1293 = (dot(vec3(_852, _853, _854), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1303 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4007 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1305 + 1.0))) + _1310) * _1273;
        float _1320 = _1241 * 0.5;
        float _1321 = _1251 * 0.5;
        float _1322 = _1261 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_852, _853, _854), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4040 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1347 + 1.0))) + _1352) * _1274;
        float _1362 = _1242 * 0.5;
        float _1363 = _1252 * 0.5;
        float _1364 = _1262 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_852, _853, _854), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4073 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1389 + 1.0))) + _1394) * _1275;
        _1411 = _1242;
        _1413 = _1241;
        _1414 = _1240;
        _1415 = _1252;
        _1416 = _1251;
        _1417 = _1250;
        _1418 = _1262;
        _1419 = _1261;
        _1420 = _1260;
        _1421 = _1275;
        _1422 = _1274;
        _1423 = _1273;
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1412;
        _1413 = _1412;
        _1414 = _1412;
        _1415 = _1412;
        _1416 = _1412;
        _1417 = _1412;
        _1418 = _1412;
        _1419 = _1412;
        _1420 = _1412;
        _1421 = _1412;
        _1422 = _1412;
        _1423 = _1412;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1082, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074));
        float _1456 = fma(_1082, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074));
        float _1460 = fma(_1082, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074));
        float _1483 = _1074 + _852;
        float _1484 = _1078 + _853;
        float _1485 = _1082 + _854;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_852, _853, _854), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4136 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_852, _853, _854), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4169 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_852, _853, _854), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4202 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1412;
        _1722 = _1412;
        _1723 = _1412;
        _1724 = _1412;
        _1725 = _1412;
        _1726 = _1412;
        _1727 = _1412;
        _1728 = _1412;
        _1729 = _1412;
        _1730 = _1412;
        _1731 = _1412;
        _1732 = _1412;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1424)) + _1424;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1425)) + _1425;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1426)) + _1426;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1021 * 0.5;
    float _1790 = _1022 * 0.5;
    float _1791 = _1023 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1411, _1415, _1418, _1421));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1906 = fma(_1082, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074)) + cbModelParam._m0[13u].w;
        float _1910 = fma(_1082, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074)) + cbModelParam._m0[14u].w;
        float _1914 = fma(_1082, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074)) + cbModelParam._m0[15u].w;
        float _1917 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1920 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1923 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1951;
        if (_1917 > 0.0)
        {
            _1951 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1951 = frontier_phi_17_15_ladder;
        }
        float _2153;
        if (_1920 > 0.0)
        {
            _2153 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2153 = frontier_phi_26_22_ladder;
        }
        float _2396;
        if (_1923 > 0.0)
        {
            _2396 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2396 = frontier_phi_38_33_ladder;
        }
        float _2398 = isnan(_2153) ? _1951 : (isnan(_1951) ? _2153 : min(_1951, _2153));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1917) + _1906;
        float _2404 = (_2399 * _1920) + _1910;
        float _2405 = (_2399 * _1923) + _1914;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_16_38_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1939 = frontier_phi_16_38_ladder_2;
        _1941 = frontier_phi_16_38_ladder_1;
        _1943 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1858);
        _1939 = _1927.x * cbModelParam._m0[1u].y;
        _1941 = _1927.y * cbModelParam._m0[1u].y;
        _1943 = _1927.z * cbModelParam._m0[1u].y;
    }
    float _1947 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1947 : min(cbModelParam._m0[25u].w, _1947));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1082, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1082, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1082, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _2017 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _2020 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2158;
        if (_2014 > 0.0)
        {
            _2158 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2158 = frontier_phi_28_24_ladder;
        }
        float _2423;
        if (_2017 > 0.0)
        {
            _2423 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2423 = frontier_phi_40_35_ladder;
        }
        float _2628;
        if (_2020 > 0.0)
        {
            _2628 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2628 = frontier_phi_49_46_ladder;
        }
        float _2630 = isnan(_2423) ? _2158 : (isnan(_2158) ? _2423 : min(_2158, _2423));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _2014) + _2003;
        float _2636 = (_2631 * _2017) + _2007;
        float _2637 = (_2631 * _2020) + _2011;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2638;
        float _2641 = _2638 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2637 > _2641) || ((_2637 < _2639) || ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 < _2639) || (_2635 > _2641))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2637, cbModelParam._m0[17u].z, fma(_2636, cbModelParam._m0[17u].y, _2635 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2637, cbModelParam._m0[18u].z, fma(_2636, cbModelParam._m0[18u].y, _2635 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2637, cbModelParam._m0[19u].z, fma(_2636, cbModelParam._m0[19u].y, _2635 * cbModelParam._m0[19u].x))), _1948);
            frontier_phi_25_49_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_25_49_ladder_2;
        _2041 = frontier_phi_25_49_ladder_1;
        _2043 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1948);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2055 = ((((1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1042 * _1029)) * _1013;
    float _2056 = _2055 * ((cbModelParam._m0[1u].w * (_2039 - _1939)) + _1939);
    float _2057 = _2055 * ((cbModelParam._m0[1u].w * (_2041 - _1941)) + _1941);
    float _2058 = _2055 * ((cbModelParam._m0[1u].w * (_2043 - _1943)) + _1943);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _1013 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2112 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2116 = _2079 | 1u;
    float _2127 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_852, _853, _854));
    float _2130 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_852, _853, _854));
    float _4338 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _4349 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2137 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2144 = ((cbLight._m0[_2096].x * _2102) * _2137) + ((cbLight._m0[_2106].x * _2112) * _2135);
    float _2145 = ((_2102 * cbLight._m0[_2096].y) * _2137) + ((_2112 * cbLight._m0[_2106].y) * _2135);
    float _2146 = ((_2102 * cbLight._m0[_2096].z) * _2137) + ((_2112 * cbLight._m0[_2106].z) * _2135);
    uvec4 _2150 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2152 = _2150.x == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2152)
    {
        _2163 = _2144;
        _2165 = _2145;
        _2167 = _2146;
    }
    else
    {
        uint _2171 = _2079 + 6u;
        float _2187 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4360 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2190 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2163 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _2144;
        _2165 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _2145;
        _2167 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _2146;
    }
    bool _2170 = _2150.y == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2170)
    {
        _2208 = _2163;
        _2210 = _2165;
        _2212 = _2167;
    }
    else
    {
        uint _2367 = _2079 + 7u;
        float _2383 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4376 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2386 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2208 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2163;
        _2210 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2165;
        _2212 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2167;
    }
    uint _2215 = _2079 + 8u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _855) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_2079].x + _930;
    float _2231 = cbLight._m0[_2079].y + _931;
    float _2232 = cbLight._m0[_2079].z + _932;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2079].xyz));
    float _4392 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2244 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2245 = dot(vec3(_852, _853, _854), vec3(_2237, _2238, _2239));
    float _4414 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2237, _2238, _2239));
    float _4425 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2229 * _2229;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2268 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2269 = 1.0 - _2229;
    float _2280 = (0.5 / (((_2244 * ((_2243 * _2269) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2269) + _2229) * _2243))) * _2243;
    float _4436 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    uint _2293 = _2079 + 9u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _855) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2116].x + _930;
    float _2307 = cbLight._m0[_2116].y + _931;
    float _2308 = cbLight._m0[_2116].z + _932;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2116].xyz));
    float _4447 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2320 = dot(vec3(_852, _853, _854), vec3(_2313, _2314, _2315));
    float _4458 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2313, _2314, _2315));
    float _4469 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2305 * _2305;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2305;
    float _2352 = (0.5 / (((_2244 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2342) + _2305) * _2319))) * _2319;
    float _4480 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    float _2364 = (((_2341 * cbLight._m0[_2293].x) * _2354) * _2102) + (((_2268 * cbLight._m0[_2215].x) * _2282) * _2112);
    float _2365 = (((_2341 * cbLight._m0[_2293].y) * _2354) * _2102) + (((_2268 * cbLight._m0[_2215].y) * _2282) * _2112);
    float _2366 = (((_2341 * cbLight._m0[_2293].z) * _2354) * _2102) + (((_2268 * cbLight._m0[_2215].z) * _2282) * _2112);
    float _2428;
    float _2430;
    float _2432;
    if (_2152)
    {
        _2428 = _2364;
        _2430 = _2365;
        _2432 = _2366;
    }
    else
    {
        uint _2434 = _2079 + 2u;
        uint _2438 = _2079 + 10u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _855) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _930;
        float _2455 = cbLight._m0[_2434].y + _931;
        float _2456 = cbLight._m0[_2434].z + _932;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2434].xyz));
        float _4491 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2468 = dot(vec3(_852, _853, _854), vec3(_2461, _2462, _2463));
        float _4502 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4513 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2490 = 1.0 - _2453;
        float _2500 = (0.5 / (((_2244 * ((_2467 * _2490) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2490) + _2453) * _2467))) * _2467;
        float _4524 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2428 = (((_2489 * cbLight._m0[_2438].x) * _2502) * _2503) + _2364;
        _2430 = (((_2489 * cbLight._m0[_2438].y) * _2502) * _2503) + _2365;
        _2432 = (((_2489 * cbLight._m0[_2438].z) * _2502) * _2503) + _2366;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2170)
    {
        _2538 = _2428;
        _2540 = _2430;
        _2542 = _2432;
    }
    else
    {
        uint _2549 = _2079 + 3u;
        uint _2553 = _2079 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _855) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _930;
        float _2570 = cbLight._m0[_2549].y + _931;
        float _2571 = cbLight._m0[_2549].z + _932;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2549].xyz));
        float _4540 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2583 = dot(vec3(_852, _853, _854), vec3(_2576, _2577, _2578));
        float _4551 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4562 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2604 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2605 = 1.0 - _2568;
        float _2615 = (0.5 / (((_2244 * ((_2582 * _2605) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2605) + _2568) * _2582))) * _2582;
        float _4573 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2538 = (((_2604 * cbLight._m0[_2553].x) * _2617) * _2618) + _2428;
        _2540 = (((_2604 * cbLight._m0[_2553].y) * _2617) * _2618) + _2430;
        _2542 = (((_2604 * cbLight._m0[_2553].z) * _2617) * _2618) + _2432;
    }
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_2077.y == 0u)
    {
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2693;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2693;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2693;
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.x;
        uint _2720 = uint((float(_2708.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _2709))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _2709)));
        float _2730 = (log2(_2696 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2731 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        uint _2734 = uint(isnan(14.0) ? _2731 : (isnan(_2731) ? 14.0 : min(_2731, 14.0)));
        uvec4 _2739 = texelFetch(g_lightClusterGridBuffer, int(((_2734 << 2u) + (_2720 << 6u)) >> 2u));
        uint _2740 = _2739.x;
        uint _2741 = _2708.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2741 >> 4u) & 15u)) + 4294967295u) & _2740) == 0u) || ((_2741 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3010)
                {
                    frontier_phi_66_pred = _2994;
                    frontier_phi_66_pred_1 = _2999;
                    frontier_phi_66_pred_2 = _2998;
                    frontier_phi_66_pred_3 = _2997;
                    frontier_phi_66_pred_4 = _2996;
                    frontier_phi_66_pred_5 = _2995;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3009;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3000 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _2694;
                        float _3206 = _3165.y - _2695;
                        float _3207 = _3165.z - _2696;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_969, _972, _975), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4599 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3236 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3240 = (-0.0) - _2694;
                        float _3241 = (-0.0) - _2695;
                        float _3242 = (-0.0) - _2696;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3257 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _1029;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3247 + _3212;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_969, _972, _975), vec3(_3247, _3248, _3249));
                        float _4615 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3282 = dot(vec3(_969, _972, _975), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4626 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3225 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3215) + _3291;
                        float _4637 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4648 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3289 * _3289) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3069 = (_3236 * _3184.x) + _3142;
                        _3070 = (_3236 * _3184.y) + _3143;
                        _3071 = (_3236 * _3184.z) + _3144;
                        _3066 = (_3317 * _3201.x) + _3139;
                        _3067 = (_3317 * _3201.y) + _3140;
                        _3068 = (_3317 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_66_pred = _3066;
                    frontier_phi_66_pred_1 = _3071;
                    frontier_phi_66_pred_2 = _3070;
                    frontier_phi_66_pred_3 = _3069;
                    frontier_phi_66_pred_4 = _3068;
                    frontier_phi_66_pred_5 = _3067;
                }
                _2842 = frontier_phi_66_pred;
                _2852 = frontier_phi_66_pred_1;
                _2850 = frontier_phi_66_pred_2;
                _2848 = frontier_phi_66_pred_3;
                _2846 = frontier_phi_66_pred_4;
                _2844 = frontier_phi_66_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2842;
                    _2995 = _2844;
                    _2996 = _2846;
                    _2997 = _2848;
                    _2998 = _2850;
                    _2999 = _2852;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2858) & _2740) == 0u)
        {
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
            float _2988 = _2987 * _2694;
            float _2989 = _2987 * _2695;
            float _2990 = _2987 * _2696;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3122 = _2841;
                float _3123 = _2843;
                float _3124 = _2845;
                float _3125 = _2847;
                float _3126 = _2849;
                float _3127 = _2851;
                uint _3128 = _2858;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3138)
                    {
                        frontier_phi_77_pred = _3127;
                        frontier_phi_77_pred_1 = _3126;
                        frontier_phi_77_pred_2 = _3125;
                        frontier_phi_77_pred_3 = _3124;
                        frontier_phi_77_pred_4 = _3123;
                        frontier_phi_77_pred_5 = _3122;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        uint _3350 = _3137;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        vec3 _3404;
                        vec4 _3419;
                        vec4 _3434;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3361 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3361 * 40u) + 8u;
                            _3404 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x));
                            uint _3406 = (_3361 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3361 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3361 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3361 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_2696, _3468.z, fma(_2695, _3468.y, _3468.x * _2694)) + _3468.w;
                            _3481 = !((fma(_2696, _3449.z, fma(_2695, _3449.y, _3449.x * _2694)) + _3449.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3376.x - _2694;
                                float _3509 = _3376.y - _2695;
                                float _3510 = _3376.z - _2696;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3377 * _3377));
                                float _4659 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3526 = sqrt(_3511) * _3392.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_969, _972, _975))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_2696, _3419.z, fma(_2695, _3419.y, _3419.x * _2694)) + _3419.w) / _3480;
                                float _3540 = (fma(_2696, _3434.z, fma(_2695, _3434.y, _3434.x * _2694)) + _3434.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4675 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _1029;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _2988;
                                float _3570 = _3516 - _2989;
                                float _3571 = _3517 - _2990;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_969, _972, _975), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4686 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3583 = dot(vec3(_969, _972, _975), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4697 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_969, _972, _975), vec3(_3515, _3516, _3517))) + _3592;
                                float _4708 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4719 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3546 * _3392.y;
                                frontier_phi_83_pred_1 = _3546 * _3392.x;
                                frontier_phi_83_pred_2 = _3620 * _3404.z;
                                frontier_phi_83_pred_3 = _3620 * _3404.y;
                                frontier_phi_83_pred_4 = _3620 * _3404.x;
                                frontier_phi_83_pred_5 = _3546 * _3392.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_83_pred;
                            _3627 = frontier_phi_83_pred_1;
                            _3626 = frontier_phi_83_pred_2;
                            _3625 = frontier_phi_83_pred_3;
                            _3624 = frontier_phi_83_pred_4;
                            _3629 = frontier_phi_83_pred_5;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3336;
                        frontier_phi_77_pred_1 = _3335;
                        frontier_phi_77_pred_2 = _3334;
                        frontier_phi_77_pred_3 = _3333;
                        frontier_phi_77_pred_4 = _3332;
                        frontier_phi_77_pred_5 = _3331;
                    }
                    _2973 = frontier_phi_77_pred;
                    _2971 = frontier_phi_77_pred_1;
                    _2969 = frontier_phi_77_pred_2;
                    _2967 = frontier_phi_77_pred_3;
                    _2965 = frontier_phi_77_pred_4;
                    _2963 = frontier_phi_77_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2963;
                        _3123 = _2965;
                        _3124 = _2967;
                        _3125 = _2969;
                        _3126 = _2971;
                        _3127 = _2973;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2967;
                frontier_phi_58_59_ladder_1 = _2973;
                frontier_phi_58_59_ladder_2 = _2971;
                frontier_phi_58_59_ladder_3 = _2969;
                frontier_phi_58_59_ladder_4 = _2965;
                frontier_phi_58_59_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_58_59_ladder = _2845;
                frontier_phi_58_59_ladder_1 = _2851;
                frontier_phi_58_59_ladder_2 = _2849;
                frontier_phi_58_59_ladder_3 = _2847;
                frontier_phi_58_59_ladder_4 = _2843;
                frontier_phi_58_59_ladder_5 = _2841;
            }
            _2962 = frontier_phi_58_59_ladder_5;
            _2964 = frontier_phi_58_59_ladder_4;
            _2966 = frontier_phi_58_59_ladder;
            _2968 = frontier_phi_58_59_ladder_3;
            _2970 = frontier_phi_58_59_ladder_2;
            _2972 = frontier_phi_58_59_ladder_1;
        }
        float _2977 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _2753 = (_2977 * _2968) + _2208;
        _2755 = (_2977 * _2970) + _2210;
        _2757 = (_2977 * _2972) + _2212;
        _2759 = ((_2962 * 0.039999999105930328369140625) * _2977) + _2538;
        _2761 = ((_2964 * 0.039999999105930328369140625) * _2977) + _2540;
        _2763 = ((_2966 * 0.039999999105930328369140625) * _2977) + _2542;
    }
    else
    {
        _2753 = _2208;
        _2755 = _2210;
        _2757 = _2212;
        _2759 = _2538;
        _2761 = _2540;
        _2763 = _2542;
    }
    float _4735 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4746 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4757 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2780 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2753 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1013))) + ((_2759 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2781 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2755 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1013))) + ((_2761 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2757 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1013))) + ((_2763 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    uint _2783 = _257 + 6u;
    float _2791 = _950 / cbSceneParam._m0[86u].x;
    float _2792 = _951 / cbSceneParam._m0[86u].y;
    vec4 _2806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2808 = _2806.x;
    float _2809 = _2806.y;
    float _2810 = _2806.z;
    float _2811 = _2806.w;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _2867 = _2866 / _873;
        float _2878 = _2867 * _923;
        float _2879 = _924 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2882 = _2867 * _925;
        float _2884 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2885 = _2884 + cbSceneParam._m0[79u].w;
        float _2886 = cbSceneParam._m0[79u].w - _2879;
        float _2892 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2882 * _2882));
        float _2895 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2892;
        float _2900 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2902 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2880 - _2884) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2885 > 0.0) ? exp2(_2900 * _2885) : (2.0 - exp2(_2902 * _2885))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2895;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : max(_2885, _2886));
            float _3025 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : min(_2885, _2886));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3079 = ((abs(_2892 / _2880) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2900 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2900 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2902 * _3034) - exp2(_2902 * _3035)) * _3023))) + (_2895 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2811);
        _2904 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2808;
        _2906 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2809;
        _2908 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2810;
        _2910 = _3090 * _2811;
    }
    else
    {
        _2904 = _2808;
        _2906 = _2809;
        _2908 = _2810;
        _2910 = _2811;
    }
    bool _3117;
    vec4 _2920;
    vec4 _2942;
    float _2944;
    float _2948;
    float _2949;
    float _2950;
    float _2951;
    bool _2961;
    for (;;)
    {
        _2920 = cbMatDynParam._m0[0u];
        float _2922 = roundEven(_2920.y);
        bool _2923 = _2922 == 3.0;
        float _2924 = log2(_2910);
        float _2931 = exp2(_2924 * cbSceneParam._m0[78u].x) * _2780;
        float _2932 = exp2(_2924 * cbSceneParam._m0[78u].y) * _2781;
        float _2933 = exp2(_2924 * cbSceneParam._m0[78u].z) * _2782;
        float _2940 = _939 + (-0.5);
        _2942 = cbMtdParam._m0[1u];
        _2944 = _2942.y * _2940;
        float _2947 = (_2922 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2948 = _2947 * (_2923 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2904)));
        _2949 = _2947 * (_2923 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2906)));
        _2950 = _2947 * (_2923 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2908)));
        _2951 = _2940 * 0.999000012874603271484375;
        _2961 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2961)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2951) < 0.5)
            {
                _3117 = true;
                break;
            }
        }
        uint _3058 = _988 + uint(_2920.w);
        if ((cbInstanceData._m0[_3058].w < 1.0) && ((cbInstanceData._m0[_3058].w + _2951) < 0.5))
        {
            _3117 = true;
            break;
        }
        if ((_2944 + 1.0) < _2942.x)
        {
            _3117 = true;
            break;
        }
        _3117 = false;
        break;
    }
    float _3322;
    if (_3117)
    {
        discard_state = true;
        _3322 = 0.0;
    }
    else
    {
        _3322 = cbInstanceData._m0[_2783].w;
    }
    SV_Target.x = _2948;
    SV_Target.y = _2949;
    SV_Target.z = _2950;
    SV_Target.w = _3322;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2783].w;
    discard_exit();
}


