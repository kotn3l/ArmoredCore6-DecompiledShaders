#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3648;
float _3649;
float _3650;
float _3651;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3660 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3671 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3682 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3693 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _439 = (_432 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _440 = (_432 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _441 = (_432 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _432) + _547;
    float _559 = ((((_526.x - _545) * _432) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _432) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3704 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (_559 + ((((_499.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = (_560 + ((((_499.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = fma(_566, _233, fma(_599, _240, _598 * _226));
    float _605 = fma(_566, _234, fma(_599, _241, _598 * _227));
    float _608 = fma(_566, _235, fma(_599, _242, _598 * _228));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _648 = (cbMtdParam._m0[19u].x + dot(vec4(_612 * _602, _612 * _605, _612 * _608, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_641 - _642) * cbMtdParam._m0[24u].w) + _642) * cbMtdParam._m0[21u].z);
    float _3715 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _656 = (_649 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) + _458;
    float _657 = (_649 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) + _459;
    float _658 = (_649 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) + _460;
    float _663 = (((_499.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    float _667 = ((_586.z - _663) * cbMtdParam._m0[19u].w) + _663;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _687 = (_680.x * 2.0) + (-1.0);
    float _688 = (_680.y * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3726 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _697 = ((_680.z - _667) * _649) + _667;
    float _707 = ((sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _566) * _649) + _566;
    float _710 = (((_687 - _598) * _649) + _598) + (cbMtdParam._m0[21u].x * _598);
    float _711 = (((_688 - _599) * _649) + _599) + (cbMtdParam._m0[21u].x * _599);
    float _713 = cbMtdParam._m0[22u].x + _586.w;
    float _716 = fma(_707, _233, fma(_711, _240, _710 * _226));
    float _719 = fma(_707, _234, fma(_711, _241, _710 * _227));
    float _722 = fma(_707, _235, fma(_711, _242, _710 * _228));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _3737 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _730 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3759 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3770 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3781 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _800 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _790);
    float _801 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _790);
    float _802 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _790);
    float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
    float _807 = _800 * _806;
    float _808 = _801 * _806;
    float _809 = _802 * _806;
    vec4 _814 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _816 = _814.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _970 = sqrt(((_800 * _800) + (_801 * _801)) + (_802 * _802));
        float _976 = (cbMatDynParam._m0[5u].x * _970) + cbMatDynParam._m0[5u].y;
        float _3792 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _981 = (cbMatDynParam._m0[5u].z * _970) + cbMatDynParam._m0[5u].w;
        float _3803 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) - _977)) + _977) < ((_816 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _827 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _828 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _846 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _849 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _852 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _865 = _266 + 9u;
    uint _866 = _865 + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_866].z;
    float _3814 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _827, cbSceneParam._m0[86u].y * _828));
    float _890 = ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * TEXCOORD_5.w) * _886.x;
    float _891 = dot(vec3(_727, _728, _729), vec3(_807, _808, _809));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _727) - _807;
    float _899 = (_894 * _728) - _808;
    float _900 = (_894 * _729) - _809;
    float _904 = abs(dot(vec3(_807, _808, _809), vec3(_727, _728, _729)));
    float _3847 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_730);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _1018 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _1022 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1047 = _951 + _727;
        float _1048 = _955 + _728;
        float _1049 = _959 + _729;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_727, _728, _729), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3895 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_727, _728, _729), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3928 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_727, _728, _729), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3961 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1332 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1336 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1340 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1363 = _951 + _727;
        float _1364 = _955 + _728;
        float _1365 = _959 + _729;
        float _1375 = fma(_1365, cbModelParam._m0[30u].z, fma(_1364, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363)) - _1332;
        float _1376 = fma(_1365, cbModelParam._m0[31u].z, fma(_1364, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363)) - _1336;
        float _1377 = fma(_1365, cbModelParam._m0[32u].z, fma(_1364, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363)) - _1340;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1332 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1336 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[35u].z) + ((((((_1340 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1431 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1398.x + (-0.5));
        float _1433 = _1431 * (_1398.y + (-0.5));
        float _1434 = _1431 * (_1398.z + (-0.5));
        float _1441 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1405.x + (-0.5));
        float _1443 = _1441 * (_1405.y + (-0.5));
        float _1444 = _1441 * (_1405.z + (-0.5));
        float _1451 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1412.x + (-0.5));
        float _1453 = _1451 * (_1412.y + (-0.5));
        float _1454 = _1451 * (_1412.z + (-0.5));
        float _1461 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1419.x + (-0.5));
        float _1463 = _1461 * (_1419.y + (-0.5));
        float _1464 = _1461 * (_1419.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_727, _728, _729), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4024 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1495 + 1.0))) + _1500) * _1465;
        float _1510 = _1433 * 0.5;
        float _1511 = _1443 * 0.5;
        float _1512 = _1453 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_727, _728, _729), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4057 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1537 + 1.0))) + _1542) * _1466;
        float _1552 = _1434 * 0.5;
        float _1553 = _1444 * 0.5;
        float _1554 = _1454 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_727, _728, _729), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4090 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1579 + 1.0))) + _1584) * _1467;
        _1601 = _1434;
        _1602 = _1433;
        _1603 = _1432;
        _1604 = _1444;
        _1605 = _1443;
        _1606 = _1442;
        _1607 = _1454;
        _1608 = _1453;
        _1609 = _1452;
        _1610 = _1467;
        _1611 = _1466;
        _1612 = _1465;
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1302)) + _1302;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1303)) + _1303;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1304)) + _1304;
    float _1648 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1625));
    float _1669 = _898 * 0.5;
    float _1670 = _899 * 0.5;
    float _1671 = _900 * 0.5;
    float _1672 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1675 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1678 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1685 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1689 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1693 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1700 = dot(vec4(cbModelParam._m0[39u]), vec4(_1669, _1670, _1671, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1669, _1670, _1671, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1799 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1802 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1830 = frontier_phi_17_15_ladder;
        }
        float _2030;
        if (_1799 > 0.0)
        {
            _2030 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2030 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1802 > 0.0)
        {
            _2273 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_2030) ? _1830 : (isnan(_1830) ? _2030 : min(_1830, _2030));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1796) + _1785;
        float _2281 = (_2276 * _1799) + _1789;
        float _2282 = (_2276 * _1802) + _1793;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_16_38_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_16_38_ladder_2;
        _1820 = frontier_phi_16_38_ladder_1;
        _1822 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1738);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1894 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1897 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2035;
        if (_1891 > 0.0)
        {
            _2035 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2035 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1894 > 0.0)
        {
            _2300 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2505;
        if (_1897 > 0.0)
        {
            _2505 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2505 = frontier_phi_49_46_ladder;
        }
        float _2507 = isnan(_2300) ? _2035 : (isnan(_2035) ? _2300 : min(_2035, _2300));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1891) + _1880;
        float _2513 = (_2508 * _1894) + _1884;
        float _2514 = (_2508 * _1897) + _1888;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2515;
        float _2518 = _2515 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2514 > _2518) || ((_2514 < _2516) || ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 < _2516) || (_2512 > _2518))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2514, cbModelParam._m0[17u].z, fma(_2513, cbModelParam._m0[17u].y, _2512 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2514, cbModelParam._m0[18u].z, fma(_2513, cbModelParam._m0[18u].y, _2512 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2514, cbModelParam._m0[19u].z, fma(_2513, cbModelParam._m0[19u].y, _2512 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_25_49_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_25_49_ladder_2;
        _1918 = frontier_phi_25_49_ladder_1;
        _1920 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1827);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1932 = ((((1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_919 * _906)) * _890;
    float _1933 = _1932 * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1934 = _1932 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1935 = _1932 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _890 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1989 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1993 = _1956 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_727, _728, _729));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_727, _728, _729));
    float _4226 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4237 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1973].x * _1979) * _2014) + ((cbLight._m0[_1983].x * _1989) * _2012);
    float _2022 = ((_1979 * cbLight._m0[_1973].y) * _2014) + ((_1989 * cbLight._m0[_1983].y) * _2012);
    float _2023 = ((_1979 * cbLight._m0[_1973].z) * _2014) + ((_1989 * cbLight._m0[_1983].z) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1956 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4248 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2067 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2244 = _1956 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4264 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2263 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2085 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2040;
        _2087 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2042;
        _2089 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2044;
    }
    uint _2092 = _1956 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _730) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1956].x + _807;
    float _2108 = cbLight._m0[_1956].y + _808;
    float _2109 = cbLight._m0[_1956].z + _809;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1956].xyz));
    float _4280 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2121 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2122 = dot(vec3(_727, _728, _729), vec3(_2114, _2115, _2116));
    float _4302 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2114, _2115, _2116));
    float _4313 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2121 * ((_2120 * _2146) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2146) + _2106) * _2120))) * _2120;
    float _4324 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2170 = _1956 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _730) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1993].x + _807;
    float _2184 = cbLight._m0[_1993].y + _808;
    float _2185 = cbLight._m0[_1993].z + _809;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1993].xyz));
    float _4335 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2197 = dot(vec3(_727, _728, _729), vec3(_2190, _2191, _2192));
    float _4346 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2190, _2191, _2192));
    float _4357 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2182;
    float _2229 = (0.5 / (((_2121 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2219) + _2182) * _2196))) * _2196;
    float _4368 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2241 = (((_2218 * cbLight._m0[_2170].x) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].x) * _2159) * _1989);
    float _2242 = (((_2218 * cbLight._m0[_2170].y) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].y) * _2159) * _1989);
    float _2243 = (((_2218 * cbLight._m0[_2170].z) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].z) * _2159) * _1989);
    float _2305;
    float _2307;
    float _2309;
    if (_2029)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1956 + 2u;
        uint _2315 = _1956 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _730) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _807;
        float _2332 = cbLight._m0[_2311].y + _808;
        float _2333 = cbLight._m0[_2311].z + _809;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2311].xyz));
        float _4379 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2345 = dot(vec3(_727, _728, _729), vec3(_2338, _2339, _2340));
        float _4390 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4401 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2367 = 1.0 - _2330;
        float _2377 = (0.5 / (((_2121 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2367) + _2330) * _2344))) * _2344;
        float _4412 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2305 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2380) + _2241;
        _2307 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2380) + _2242;
        _2309 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2380) + _2243;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2047)
    {
        _2415 = _2305;
        _2417 = _2307;
        _2419 = _2309;
    }
    else
    {
        uint _2426 = _1956 + 3u;
        uint _2430 = _1956 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _730) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _807;
        float _2447 = cbLight._m0[_2426].y + _808;
        float _2448 = cbLight._m0[_2426].z + _809;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2426].xyz));
        float _4428 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2460 = dot(vec3(_727, _728, _729), vec3(_2453, _2454, _2455));
        float _4439 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4450 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2121 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2482) + _2445) * _2459))) * _2459;
        float _4461 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2415 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2305;
        _2417 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2307;
        _2419 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2309;
    }
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_1954.y == 0u)
    {
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2570;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2570;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2570;
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.x;
        uint _2597 = uint((float(_2585.y) * floor(float(uint(cbSceneParam._m0[85u].y * _828) / _2586))) + floor(float(uint(cbSceneParam._m0[85u].x * _827) / _2586)));
        float _2607 = (log2(_2573 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        uint _2611 = uint(isnan(14.0) ? _2608 : (isnan(_2608) ? 14.0 : min(_2608, 14.0)));
        uvec4 _2616 = texelFetch(g_lightClusterGridBuffer, int(((_2611 << 2u) + (_2597 << 6u)) >> 2u));
        uint _2617 = _2616.x;
        uint _2618 = _2585.z;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((((1u << ((_2618 >> 4u) & 15u)) + 4294967295u) & _2617) == 0u) || ((_2618 & 240u) == 0u))
        {
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
        }
        else
        {
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2887)
                {
                    frontier_phi_66_pred = _2871;
                    frontier_phi_66_pred_1 = _2876;
                    frontier_phi_66_pred_2 = _2875;
                    frontier_phi_66_pred_3 = _2874;
                    frontier_phi_66_pred_4 = _2873;
                    frontier_phi_66_pred_5 = _2872;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2886;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2877 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _2571;
                        float _3083 = _3042.y - _2572;
                        float _3084 = _3042.z - _2573;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_846, _849, _852), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4487 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3102 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3092) + _3103;
                        float _3109 = _3099 * _3099;
                        float _3113 = ((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3098) / ((_3109 * 0.699999988079071044921875) + 1.0);
                        float _3117 = (-0.0) - _2571;
                        float _3118 = (-0.0) - _2572;
                        float _3119 = (-0.0) - _2573;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3134 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                        float _3135 = 1.0 - _906;
                        float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                        float _3143 = _3142 * _3142;
                        float _3144 = _3143 * _3143;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3147 = _3126 + _3091;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3155 = dot(vec3(_846, _849, _852), vec3(_3124, _3125, _3126));
                        float _4503 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3159 = dot(vec3(_846, _849, _852), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                        float _4514 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                        float _3167 = _3102 * _3143;
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3092) + _3168;
                        float _4525 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3173 = 1.0 - _3143;
                        float _3183 = (0.5 / (((_3172 * ((_3158 * _3173) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3143) * _3158))) * _3172;
                        float _4536 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3194 = (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3166 * _3166) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2946 = (_3113 * _3061.x) + _3019;
                        _2947 = (_3113 * _3061.y) + _3020;
                        _2948 = (_3113 * _3061.z) + _3021;
                        _2943 = (_3194 * _3078.x) + _3016;
                        _2944 = (_3194 * _3078.y) + _3017;
                        _2945 = (_3194 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_66_pred = _2943;
                    frontier_phi_66_pred_1 = _2948;
                    frontier_phi_66_pred_2 = _2947;
                    frontier_phi_66_pred_3 = _2946;
                    frontier_phi_66_pred_4 = _2945;
                    frontier_phi_66_pred_5 = _2944;
                }
                _2719 = frontier_phi_66_pred;
                _2729 = frontier_phi_66_pred_1;
                _2727 = frontier_phi_66_pred_2;
                _2725 = frontier_phi_66_pred_3;
                _2723 = frontier_phi_66_pred_4;
                _2721 = frontier_phi_66_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2719;
                    _2872 = _2721;
                    _2873 = _2723;
                    _2874 = _2725;
                    _2875 = _2727;
                    _2876 = _2729;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
        }
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.z;
        uint _2735 = (_2733 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2735) & _2617) == 0u)
        {
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
            float _2865 = _2864 * _2571;
            float _2866 = _2864 * _2572;
            float _2867 = _2864 * _2573;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2735 < ((_2733 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2999 = _2718;
                float _3000 = _2720;
                float _3001 = _2722;
                float _3002 = _2724;
                float _3003 = _2726;
                float _3004 = _2728;
                uint _3005 = _2735;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3015)
                    {
                        frontier_phi_77_pred = _3004;
                        frontier_phi_77_pred_1 = _3003;
                        frontier_phi_77_pred_2 = _3002;
                        frontier_phi_77_pred_3 = _3001;
                        frontier_phi_77_pred_4 = _3000;
                        frontier_phi_77_pred_5 = _2999;
                    }
                    else
                    {
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        float _3226 = _3004;
                        uint _3227 = _3014;
                        uint _3228;
                        vec4 _3253;
                        float _3254;
                        vec4 _3269;
                        vec3 _3281;
                        vec4 _3296;
                        vec4 _3311;
                        float _3357;
                        bool _3358;
                        for (;;)
                        {
                            uint _3238 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3227));
                            _3228 = (_3227 + 4294967295u) & _3227;
                            uint _3240 = _3238 * 40u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3254 = _3253.w;
                            uint _3256 = (_3238 * 40u) + 4u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3238 * 40u) + 8u;
                            _3281 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x));
                            uint _3283 = (_3238 * 40u) + 16u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3238 * 40u) + 20u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3238 * 40u) + 24u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3332 = (_3238 * 40u) + 28u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3357 = fma(_2573, _3345.z, fma(_2572, _3345.y, _3345.x * _2571)) + _3345.w;
                            _3358 = !((fma(_2573, _3326.z, fma(_2572, _3326.y, _3326.x * _2571)) + _3326.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3358)
                            {
                                float _3385 = _3253.x - _2571;
                                float _3386 = _3253.y - _2572;
                                float _3387 = _3253.z - _2573;
                                float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                                float _3391 = inversesqrt(_3388);
                                float _3392 = _3391 * _3385;
                                float _3393 = _3391 * _3386;
                                float _3394 = _3391 * _3387;
                                float _3398 = 1.0 - (_3388 / (_3254 * _3254));
                                float _4547 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3403 = sqrt(_3388) * _3269.w;
                                float _3405 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                                float _3406 = _3405 * _3405;
                                float _3409 = ((1.0 - _3406) * dot(vec3(_3392, _3393, _3394), vec3(_846, _849, _852))) + _3406;
                                float _3412 = _3403 * _3403;
                                float _3416 = (fma(_2573, _3296.z, fma(_2572, _3296.y, _3296.x * _2571)) + _3296.w) / _3357;
                                float _3417 = (fma(_2573, _3311.z, fma(_2572, _3311.y, _3311.x * _2571)) + _3311.w) / _3357;
                                float _3421 = 1.0 - dot(vec2(_3416, _3417), vec2(_3416, _3417));
                                float _4563 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3423 = _3422 * (((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3399) / ((_3412 * 0.699999988079071044921875) + 1.0));
                                float _3435 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                                float _3436 = 1.0 - _906;
                                float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                                float _3444 = _3443 * _3443;
                                float _3445 = _3444 * _3444;
                                float _3446 = _3392 - _2865;
                                float _3447 = _3393 - _2866;
                                float _3448 = _3394 - _2867;
                                float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                                float _3456 = dot(vec3(_846, _849, _852), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4574 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3460 = dot(vec3(_846, _849, _852), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                                float _4585 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                                float _3468 = _3405 * _3444;
                                float _3469 = _3468 * _3468;
                                float _3475 = ((1.0 - _3469) * dot(vec3(_846, _849, _852), vec3(_3392, _3393, _3394))) + _3469;
                                float _4596 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3477 = 1.0 - _3444;
                                float _3487 = (0.5 / (((_3476 * ((_3459 * _3477) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3444) * _3459))) * _3476;
                                float _4607 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3497 = (_3422 * _3399) * (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3467 * _3467) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3423 * _3269.y;
                                frontier_phi_83_pred_1 = _3423 * _3269.x;
                                frontier_phi_83_pred_2 = _3497 * _3281.z;
                                frontier_phi_83_pred_3 = _3497 * _3281.y;
                                frontier_phi_83_pred_4 = _3497 * _3281.x;
                                frontier_phi_83_pred_5 = _3423 * _3269.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3505 = frontier_phi_83_pred;
                            _3504 = frontier_phi_83_pred_1;
                            _3503 = frontier_phi_83_pred_2;
                            _3502 = frontier_phi_83_pred_3;
                            _3501 = frontier_phi_83_pred_4;
                            _3506 = frontier_phi_83_pred_5;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            if (_3228 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3228;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3213;
                        frontier_phi_77_pred_1 = _3212;
                        frontier_phi_77_pred_2 = _3211;
                        frontier_phi_77_pred_3 = _3210;
                        frontier_phi_77_pred_4 = _3209;
                        frontier_phi_77_pred_5 = _3208;
                    }
                    _2850 = frontier_phi_77_pred;
                    _2848 = frontier_phi_77_pred_1;
                    _2846 = frontier_phi_77_pred_2;
                    _2844 = frontier_phi_77_pred_3;
                    _2842 = frontier_phi_77_pred_4;
                    _2840 = frontier_phi_77_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2840;
                        _3000 = _2842;
                        _3001 = _2844;
                        _3002 = _2846;
                        _3003 = _2848;
                        _3004 = _2850;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2844;
                frontier_phi_58_59_ladder_1 = _2850;
                frontier_phi_58_59_ladder_2 = _2848;
                frontier_phi_58_59_ladder_3 = _2846;
                frontier_phi_58_59_ladder_4 = _2842;
                frontier_phi_58_59_ladder_5 = _2840;
            }
            else
            {
                frontier_phi_58_59_ladder = _2722;
                frontier_phi_58_59_ladder_1 = _2728;
                frontier_phi_58_59_ladder_2 = _2726;
                frontier_phi_58_59_ladder_3 = _2724;
                frontier_phi_58_59_ladder_4 = _2720;
                frontier_phi_58_59_ladder_5 = _2718;
            }
            _2839 = frontier_phi_58_59_ladder_5;
            _2841 = frontier_phi_58_59_ladder_4;
            _2843 = frontier_phi_58_59_ladder;
            _2845 = frontier_phi_58_59_ladder_3;
            _2847 = frontier_phi_58_59_ladder_2;
            _2849 = frontier_phi_58_59_ladder_1;
        }
        float _2854 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2630 = (_2854 * _2845) + _2085;
        _2632 = (_2854 * _2847) + _2087;
        _2634 = (_2854 * _2849) + _2089;
        _2636 = ((_2839 * 0.039999999105930328369140625) * _2854) + _2415;
        _2638 = ((_2841 * 0.039999999105930328369140625) * _2854) + _2417;
        _2640 = ((_2843 * 0.039999999105930328369140625) * _2854) + _2419;
    }
    else
    {
        _2630 = _2085;
        _2632 = _2087;
        _2634 = _2089;
        _2636 = _2415;
        _2638 = _2417;
        _2640 = _2419;
    }
    float _4623 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4634 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4645 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2657 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2630 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _890))) + ((_2636 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2658 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2632 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _890))) + ((_2638 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2659 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2634 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _890))) + ((_2640 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    uint _2660 = _266 + 6u;
    float _2668 = _827 / cbSceneParam._m0[86u].x;
    float _2669 = _828 / cbSceneParam._m0[86u].y;
    vec4 _2683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2685 = _2683.x;
    float _2686 = _2683.y;
    float _2687 = _2683.z;
    float _2688 = _2683.w;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _2743 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _2744 = _2743 / _748;
        float _2755 = _2744 * _800;
        float _2756 = _801 * _2744;
        float _2757 = (-0.0) - _2756;
        float _2759 = _2744 * _802;
        float _2761 = (cbSceneParam._m0[77u].w * _2757) / _2743;
        float _2762 = _2761 + cbSceneParam._m0[79u].w;
        float _2763 = cbSceneParam._m0[79u].w - _2756;
        float _2769 = sqrt(((_2755 * _2755) + (_2756 * _2756)) + (_2759 * _2759));
        float _2772 = (1.0 - (cbSceneParam._m0[77u].w / _2743)) * _2769;
        float _2777 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2779 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2757 - _2761) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2762 > 0.0) ? exp2(_2777 * _2762) : (2.0 - exp2(_2779 * _2762))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2772;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : max(_2762, _2763));
            float _2902 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : min(_2762, _2763));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2956 = ((abs(_2769 / _2757) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2777 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2777 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2779 * _2911) - exp2(_2779 * _2912)) * _2900))) + (_2772 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2688);
        _2781 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2685;
        _2783 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2686;
        _2785 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2687;
        _2787 = _2967 * _2688;
    }
    else
    {
        _2781 = _2685;
        _2783 = _2686;
        _2785 = _2687;
        _2787 = _2688;
    }
    bool _2994;
    vec4 _2797;
    vec4 _2819;
    float _2821;
    float _2825;
    float _2826;
    float _2827;
    float _2828;
    bool _2838;
    for (;;)
    {
        _2797 = cbMatDynParam._m0[0u];
        float _2799 = roundEven(_2797.y);
        bool _2800 = _2799 == 3.0;
        float _2801 = log2(_2787);
        float _2808 = exp2(_2801 * cbSceneParam._m0[78u].x) * _2657;
        float _2809 = exp2(_2801 * cbSceneParam._m0[78u].y) * _2658;
        float _2810 = exp2(_2801 * cbSceneParam._m0[78u].z) * _2659;
        float _2817 = _816 + (-0.5);
        _2819 = cbMtdParam._m0[1u];
        _2821 = _2819.y * _2817;
        float _2824 = (_2799 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2825 = _2824 * (_2800 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2781)));
        _2826 = _2824 * (_2800 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2783)));
        _2827 = _2824 * (_2800 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2785)));
        _2828 = _2817 * 0.999000012874603271484375;
        _2838 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2838)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _2828) < 0.5)
            {
                _2994 = true;
                break;
            }
        }
        uint _2935 = _865 + uint(_2797.w);
        if ((cbInstanceData._m0[_2935].w < 1.0) && ((cbInstanceData._m0[_2935].w + _2828) < 0.5))
        {
            _2994 = true;
            break;
        }
        if ((_2821 + 1.0) < _2819.x)
        {
            _2994 = true;
            break;
        }
        _2994 = false;
        break;
    }
    float _3199;
    if (_2994)
    {
        discard_state = true;
        _3199 = 0.0;
    }
    else
    {
        _3199 = cbInstanceData._m0[_2660].w;
    }
    SV_Target.x = _2825;
    SV_Target.y = _2826;
    SV_Target.z = _2827;
    SV_Target.w = _3199;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2660].w;
    discard_exit();
}


