#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1538;
float _3894;
float _3895;
float _3896;
float _3897;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3906 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _560 = _558.x;
    float _570 = dot(vec4(_560, _558.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _582 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _369.z) * 2.0) - ((((_560 - _570) * cbMtdParam._m0[24u].z) + _570) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3928 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _596 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_583 * ((_541.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _599 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_583 * ((_541.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _602 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_583 * ((_541.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _441) + _639;
    float _649 = ((_620.y - _640) * _441) + _640;
    float _650 = ((_620.z - _641) * _441) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_662.x - _648) * _514) + _648;
    float _674 = ((_662.y - _649) * _514) + _649;
    float _675 = ((_662.z - _650) * _514) + _650;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _700 = ((_687.z - _675) * _583) + _675;
    float _703 = ((((_687.x - _673) * _583) + _673) * 2.0) + (-1.0);
    float _705 = ((((_687.y - _674) * _583) + _674) * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _3939 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _737 = (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _738 = (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _741 = fma(_711, _249, fma(_738, _256, _737 * _242));
    float _744 = fma(_711, _250, fma(_738, _257, _737 * _243));
    float _747 = fma(_711, _251, fma(_738, _258, _737 * _244));
    float _751 = inversesqrt(dot(vec3(_741, _744, _747), vec3(_741, _744, _747)));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _780 = _778.x;
    float _781 = 1.0 - _780;
    float _787 = (cbMtdParam._m0[19u].x + dot(vec4(_751 * _741, _751 * _744, _751 * _747, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_780 - _781) * cbMtdParam._m0[24u].w) + _781) * cbMtdParam._m0[21u].z);
    float _3950 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _790 = (-0.0) - cbMtdParam._m0[24u].x;
    float _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
    float _800 = _788 - ((_788 * TEXCOORD_8.x) * _793);
    float _801 = _788 - ((_788 * TEXCOORD_8.y) * _793);
    float _802 = _788 - ((_788 * TEXCOORD_8.z) * _793);
    float _809 = (_800 * (cbMtdParam._m0[17u].x - _596)) + _596;
    float _810 = (_801 * (cbMtdParam._m0[17u].y - _599)) + _599;
    float _811 = (_802 * (cbMtdParam._m0[17u].z - _602)) + _602;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _825 = _823.x;
    float _826 = 1.0 - _825;
    float _854 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_825 - _826) * cbMtdParam._m0[24u].y) + _826) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3971 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _855 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _863 = ((((cbMtdParam._m0[10u].x - _809) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _855) + _809;
    float _864 = ((((cbMtdParam._m0[10u].y - _810) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _855) + _810;
    float _865 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _811)) * _855) + _811;
    float _869 = (cbMtdParam._m0[19u].w * (_725.z - _700)) + _700;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _890 = (_883.x * 2.0) + (-1.0);
    float _891 = (_883.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _3982 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _900 = ((_883.z - _869) * _800) + _869;
    float _903 = ((cbMtdParam._m0[23u].y - _900) * _855) + _900;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _928 = (_922.x * 2.0) + (-1.0);
    float _929 = (_922.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _3993 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _945 = ((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _711) * _802) + _711;
    float _948 = (((_890 - _737) * _800) + _737) + (cbMtdParam._m0[21u].x * _737);
    float _949 = (((_891 - _738) * _801) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _960 = (((_928 - _948) + (_948 * cbMtdParam._m0[22u].z)) * _855) + _948;
    float _961 = (((_929 - _949) + (_949 * cbMtdParam._m0[22u].z)) * _855) + _949;
    float _962 = (_855 * (sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _945)) + _945;
    float _964 = cbMtdParam._m0[22u].x + _725.w;
    float _967 = fma(_962, _249, fma(_961, _256, _960 * _242));
    float _970 = fma(_962, _250, fma(_961, _257, _960 * _243));
    float _973 = fma(_962, _251, fma(_961, _258, _960 * _244));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _978 = _977 * _967;
    float _979 = _977 * _970;
    float _980 = _977 * _973;
    float _4004 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _981 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4026 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4037 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4048 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _999 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1049 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1039);
    float _1050 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1039);
    float _1051 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1039);
    float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
    float _1056 = _1049 * _1055;
    float _1057 = _1050 * _1055;
    float _1058 = _1051 * _1055;
    vec4 _1063 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1065 = _1063.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1219 = sqrt(((_1049 * _1049) + (_1050 * _1050)) + (_1051 * _1051));
        float _1225 = (cbMatDynParam._m0[5u].x * _1219) + cbMatDynParam._m0[5u].y;
        float _4059 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1230 = (cbMatDynParam._m0[5u].z * _1219) + cbMatDynParam._m0[5u].w;
        float _4070 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) - _1226)) + _1226) < ((_1065 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1076 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1077 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1095 = fma(_980, cbSceneParam._m0[5u].z, fma(_979, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _978));
    float _1098 = fma(_980, cbSceneParam._m0[6u].z, fma(_979, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _978));
    float _1101 = fma(_980, cbSceneParam._m0[7u].z, fma(_979, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _978));
    uint _1114 = _261 + 9u;
    uint _1115 = _1114 + uint(cbMatDynParam._m0[0u].w);
    float _1121 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1115].x;
    float _1122 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1115].y;
    float _1123 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1115].z;
    float _4081 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    vec4 _1135 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1076, cbSceneParam._m0[86u].y * _1077));
    float _1139 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1135.x;
    float _1140 = dot(vec3(_978, _979, _980), vec3(_1056, _1057, _1058));
    float _1143 = _1140 * 2.0;
    float _1147 = (_1143 * _978) - _1056;
    float _1148 = (_1143 * _979) - _1057;
    float _1149 = (_1143 * _980) - _1058;
    float _1153 = abs(dot(vec3(_1056, _1057, _1058), vec3(_978, _979, _980)));
    float _4114 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1155 = sqrt(_981);
    float _1168 = exp2((_1155 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1155 * 3.0));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1537;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1262 = fma(_1208, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200));
        float _1266 = fma(_1208, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200));
        float _1270 = fma(_1208, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200));
        float _1295 = _1200 + _978;
        float _1296 = _1204 + _979;
        float _1297 = _1208 + _980;
        float _1307 = fma(_1297, cbModelParam._m0[26u].z, fma(_1296, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1295)) - _1262;
        float _1308 = fma(_1297, cbModelParam._m0[27u].z, fma(_1296, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1295)) - _1266;
        float _1309 = fma(_1297, cbModelParam._m0[28u].z, fma(_1296, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1295)) - _1270;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1262 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1266 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[34u].z) + ((((((_1270 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1365 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1331.x + (-0.5));
        float _1367 = _1365 * (_1331.y + (-0.5));
        float _1368 = _1365 * (_1331.z + (-0.5));
        float _1375 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1338.x + (-0.5));
        float _1377 = _1375 * (_1338.y + (-0.5));
        float _1378 = _1375 * (_1338.z + (-0.5));
        float _1385 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1345.x + (-0.5));
        float _1387 = _1385 * (_1345.y + (-0.5));
        float _1388 = _1385 * (_1345.z + (-0.5));
        float _1395 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1352.x + (-0.5));
        float _1397 = _1395 * (_1352.y + (-0.5));
        float _1398 = _1395 * (_1352.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1419 = (dot(vec3(_978, _979, _980), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1429 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4162 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1431 + 1.0))) + _1436) * _1399;
        float _1446 = _1367 * 0.5;
        float _1447 = _1377 * 0.5;
        float _1448 = _1387 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_978, _979, _980), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4195 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1473 + 1.0))) + _1478) * _1400;
        float _1488 = _1368 * 0.5;
        float _1489 = _1378 * 0.5;
        float _1490 = _1388 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_978, _979, _980), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4228 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1515 + 1.0))) + _1520) * _1401;
        _1537 = _1368;
        _1539 = _1367;
        _1540 = _1366;
        _1541 = _1378;
        _1542 = _1377;
        _1543 = _1376;
        _1544 = _1388;
        _1545 = _1387;
        _1546 = _1386;
        _1547 = _1401;
        _1548 = _1400;
        _1549 = _1399;
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1551 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1538;
        _1539 = _1538;
        _1540 = _1538;
        _1541 = _1538;
        _1542 = _1538;
        _1543 = _1538;
        _1544 = _1538;
        _1545 = _1538;
        _1546 = _1538;
        _1547 = _1538;
        _1548 = _1538;
        _1549 = _1538;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1578 = fma(_1208, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200));
        float _1582 = fma(_1208, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200));
        float _1586 = fma(_1208, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200));
        float _1609 = _1200 + _978;
        float _1610 = _1204 + _979;
        float _1611 = _1208 + _980;
        float _1621 = fma(_1611, cbModelParam._m0[30u].z, fma(_1610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1609)) - _1578;
        float _1622 = fma(_1611, cbModelParam._m0[31u].z, fma(_1610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1609)) - _1582;
        float _1623 = fma(_1611, cbModelParam._m0[32u].z, fma(_1610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1609)) - _1586;
        float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
        float _1640 = ((_1627 * _1621) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1578 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1627 * _1622) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1582 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1642 = ((_1627 * _1623) / cbModelParam._m0[35u].z) + ((((((_1586 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1640, _1641, _1642), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1640, _1641, _1642), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1640, _1641, _1642), 0.0);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1640, _1641, _1642), 0.0);
        float _1677 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1644.x + (-0.5));
        float _1679 = _1677 * (_1644.y + (-0.5));
        float _1680 = _1677 * (_1644.z + (-0.5));
        float _1687 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1651.x + (-0.5));
        float _1689 = _1687 * (_1651.y + (-0.5));
        float _1690 = _1687 * (_1651.z + (-0.5));
        float _1697 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1658.x + (-0.5));
        float _1699 = _1697 * (_1658.y + (-0.5));
        float _1700 = _1697 * (_1658.z + (-0.5));
        float _1707 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1665.x + (-0.5));
        float _1709 = _1707 * (_1665.y + (-0.5));
        float _1710 = _1707 * (_1665.z + (-0.5));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1714 = _1678 * 0.5;
        float _1715 = _1688 * 0.5;
        float _1716 = _1698 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_978, _979, _980), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4291 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1741 + 1.0))) + _1746) * _1711;
        float _1756 = _1679 * 0.5;
        float _1757 = _1689 * 0.5;
        float _1758 = _1699 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_978, _979, _980), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4324 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1783 + 1.0))) + _1788) * _1712;
        float _1798 = _1680 * 0.5;
        float _1799 = _1690 * 0.5;
        float _1800 = _1700 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_978, _979, _980), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1713 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4357 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1825 + 1.0))) + _1830) * _1713;
        _1847 = _1680;
        _1848 = _1679;
        _1849 = _1678;
        _1850 = _1690;
        _1851 = _1689;
        _1852 = _1688;
        _1853 = _1700;
        _1854 = _1699;
        _1855 = _1698;
        _1856 = _1713;
        _1857 = _1712;
        _1858 = _1711;
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
        _1861 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
    }
    else
    {
        _1847 = _1538;
        _1848 = _1538;
        _1849 = _1538;
        _1850 = _1538;
        _1851 = _1538;
        _1852 = _1538;
        _1853 = _1538;
        _1854 = _1538;
        _1855 = _1538;
        _1856 = _1538;
        _1857 = _1538;
        _1858 = _1538;
        _1859 = 0.0;
        _1860 = 0.0;
        _1861 = 0.0;
    }
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1550)) + _1550;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1551)) + _1551;
    float _1873 = (cbModelParam._m0[1u].x * (_1861 - _1552)) + _1552;
    float _1894 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1871));
    float _1915 = _1147 * 0.5;
    float _1916 = _1148 * 0.5;
    float _1917 = _1149 * 0.5;
    float _1918 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1849, _1852, _1855, _1858));
    float _1921 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1924 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1958;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1931 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1537, _1541, _1544, _1547));
        float _1935 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1539, _1542, _1545, _1548));
        float _1939 = dot(vec4(_1915, _1916, _1917, 1.0), vec4(_1540, _1543, _1546, _1549));
        float _1946 = dot(vec4(cbModelParam._m0[39u]), vec4(_1915, _1916, _1917, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1946) ? 0.0 : (isnan(0.0) ? _1946 : max(0.0, _1946))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1969;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1960 = dot(vec4(cbModelParam._m0[40u]), vec4(_1915, _1916, _1917, 1.0));
        _1969 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1960) ? 0.0 : (isnan(0.0) ? _1960 : max(0.0, _1960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1969 = 1.0;
    }
    float _1973 = (_1969 * cbModelParam._m0[1u].x) + (_1958 * (1.0 - cbModelParam._m0[1u].x));
    float _1983 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _981);
    float _1984 = isnan(_1983) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1983 : min(cbModelParam._m0[25u].z, _1983));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2031 = fma(_1208, cbModelParam._m0[13u].z, fma(_1204, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200)) + cbModelParam._m0[13u].w;
        float _2035 = fma(_1208, cbModelParam._m0[14u].z, fma(_1204, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200)) + cbModelParam._m0[14u].w;
        float _2039 = fma(_1208, cbModelParam._m0[15u].z, fma(_1204, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200)) + cbModelParam._m0[15u].w;
        float _2042 = fma(_1149, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147));
        float _2045 = fma(_1149, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147));
        float _2048 = fma(_1149, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147));
        float _2076;
        if (_2042 > 0.0)
        {
            _2076 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2076 = frontier_phi_17_15_ladder;
        }
        float _2277;
        if (_2045 > 0.0)
        {
            _2277 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2277 = frontier_phi_26_22_ladder;
        }
        float _2520;
        if (_2048 > 0.0)
        {
            _2520 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2520 = frontier_phi_38_33_ladder;
        }
        float _2522 = isnan(_2277) ? _2076 : (isnan(_2076) ? _2277 : min(_2076, _2277));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2042) + _2031;
        float _2528 = (_2523 * _2045) + _2035;
        float _2529 = (_2523 * _2048) + _2039;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1984);
            frontier_phi_16_38_ladder = _2653.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2653.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2653.x * cbModelParam._m0[1u].y;
        }
        _2064 = frontier_phi_16_38_ladder_2;
        _2066 = frontier_phi_16_38_ladder_1;
        _2068 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1147, _1148, _1149), _1984);
        _2064 = _2052.x * cbModelParam._m0[1u].y;
        _2066 = _2052.y * cbModelParam._m0[1u].y;
        _2068 = _2052.z * cbModelParam._m0[1u].y;
    }
    float _2072 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _981);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2072 : min(cbModelParam._m0[25u].w, _2072));
    float _2163;
    float _2165;
    float _2167;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2127 = fma(_1208, cbModelParam._m0[21u].z, fma(_1204, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200)) + cbModelParam._m0[21u].w;
        float _2131 = fma(_1208, cbModelParam._m0[22u].z, fma(_1204, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200)) + cbModelParam._m0[22u].w;
        float _2135 = fma(_1208, cbModelParam._m0[23u].z, fma(_1204, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200)) + cbModelParam._m0[23u].w;
        float _2138 = fma(_1149, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147));
        float _2141 = fma(_1149, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147));
        float _2144 = fma(_1149, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147));
        float _2282;
        if (_2138 > 0.0)
        {
            _2282 = abs((1.0 - _2127) / _2138);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2127 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2282 = frontier_phi_28_24_ladder;
        }
        float _2547;
        if (_2141 > 0.0)
        {
            _2547 = abs((1.0 - _2131) / _2141);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2131 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2547 = frontier_phi_40_35_ladder;
        }
        float _2752;
        if (_2144 > 0.0)
        {
            _2752 = abs((1.0 - _2135) / _2144);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2135 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2752 = frontier_phi_49_46_ladder;
        }
        float _2754 = isnan(_2547) ? _2282 : (isnan(_2282) ? _2547 : min(_2282, _2547));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _2138) + _2127;
        float _2760 = (_2755 * _2141) + _2131;
        float _2761 = (_2755 * _2144) + _2135;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _2073);
            frontier_phi_25_49_ladder = _2960.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2960.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2960.x * cbModelParam._m0[1u].z;
        }
        _2163 = frontier_phi_25_49_ladder_2;
        _2165 = frontier_phi_25_49_ladder_1;
        _2167 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1147, _1148, _1149), _2073);
        _2163 = _2147.x * cbModelParam._m0[1u].z;
        _2165 = _2147.y * cbModelParam._m0[1u].z;
        _2167 = _2147.z * cbModelParam._m0[1u].z;
    }
    float _2179 = ((((1.0 - _1168) * ((_1155 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1168 * _1155)) * _1139;
    float _2180 = _2179 * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2181 = _2179 * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2182 = _2179 * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2185 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2181, cbSceneParam._m0[89u].y, _2180 * cbSceneParam._m0[89u].x));
    float _2188 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2181, cbSceneParam._m0[90u].y, _2180 * cbSceneParam._m0[90u].x));
    float _2191 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2181, cbSceneParam._m0[91u].y, _2180 * cbSceneParam._m0[91u].x));
    uvec4 _2201 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2203 = _2201.x * 14u;
    uint _2204 = _2203 + 13u;
    float _2211 = _1139 + (-1.0);
    float _2216 = (cbLight._m0[_2204].x * _2211) + 1.0;
    float _2217 = (cbLight._m0[_2204].y * _2211) + 1.0;
    float _2218 = (cbLight._m0[_2204].z * _2211) + 1.0;
    float _2219 = (cbLight._m0[_2204].w * _2211) + 1.0;
    uint _2220 = _2203 + 5u;
    float _2226 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2230 = _2203 + 4u;
    float _2236 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2240 = _2203 | 1u;
    float _2251 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_978, _979, _980));
    float _2254 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_978, _979, _980));
    float _4493 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _4504 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2259 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2261 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2268 = ((cbLight._m0[_2220].x * _2226) * _2261) + ((cbLight._m0[_2230].x * _2236) * _2259);
    float _2269 = ((_2226 * cbLight._m0[_2220].y) * _2261) + ((_2236 * cbLight._m0[_2230].y) * _2259);
    float _2270 = ((_2226 * cbLight._m0[_2220].z) * _2261) + ((_2236 * cbLight._m0[_2230].z) * _2259);
    uvec4 _2274 = floatBitsToUint(cbLight._m0[_2203 + 12u]);
    bool _2276 = _2274.x == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2276)
    {
        _2287 = _2268;
        _2289 = _2269;
        _2291 = _2270;
    }
    else
    {
        uint _2295 = _2203 + 6u;
        float _2311 = (dot(vec3(cbLight._m0[_2203 + 2u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4515 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2314 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2287 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2268;
        _2289 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2269;
        _2291 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2270;
    }
    bool _2294 = _2274.y == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2294)
    {
        _2332 = _2287;
        _2334 = _2289;
        _2336 = _2291;
    }
    else
    {
        uint _2491 = _2203 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2203 + 3u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4531 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2510 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2332 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2287;
        _2334 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2289;
        _2336 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2291;
    }
    uint _2339 = _2203 + 8u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _981) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2203].x + _1056;
    float _2355 = cbLight._m0[_2203].y + _1057;
    float _2356 = cbLight._m0[_2203].z + _1058;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2203].xyz));
    float _4547 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _2368 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2369 = dot(vec3(_978, _979, _980), vec3(_2361, _2362, _2363));
    float _4569 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2361, _2362, _2363));
    float _4580 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2353 * _2353;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2393 = 1.0 - _2353;
    float _2404 = (0.5 / (((_2368 * ((_2367 * _2393) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2393) + _2353) * _2367))) * _2367;
    float _4591 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    uint _2417 = _2203 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _981) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2240].x + _1056;
    float _2431 = cbLight._m0[_2240].y + _1057;
    float _2432 = cbLight._m0[_2240].z + _1058;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2240].xyz));
    float _4602 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2444 = dot(vec3(_978, _979, _980), vec3(_2437, _2438, _2439));
    float _4613 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2437, _2438, _2439));
    float _4624 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2466 = 1.0 - _2429;
    float _2476 = (0.5 / (((_2368 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2466) + _2429) * _2443))) * _2443;
    float _4635 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2488 = (((_2465 * cbLight._m0[_2417].x) * _2478) * _2226) + (((_2392 * cbLight._m0[_2339].x) * _2406) * _2236);
    float _2489 = (((_2465 * cbLight._m0[_2417].y) * _2478) * _2226) + (((_2392 * cbLight._m0[_2339].y) * _2406) * _2236);
    float _2490 = (((_2465 * cbLight._m0[_2417].z) * _2478) * _2226) + (((_2392 * cbLight._m0[_2339].z) * _2406) * _2236);
    float _2552;
    float _2554;
    float _2556;
    if (_2276)
    {
        _2552 = _2488;
        _2554 = _2489;
        _2556 = _2490;
    }
    else
    {
        uint _2558 = _2203 + 2u;
        uint _2562 = _2203 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _981) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _1056;
        float _2579 = cbLight._m0[_2558].y + _1057;
        float _2580 = cbLight._m0[_2558].z + _1058;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2558].xyz));
        float _4646 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2592 = dot(vec3(_978, _979, _980), vec3(_2585, _2586, _2587));
        float _4657 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4668 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2614 = 1.0 - _2577;
        float _2624 = (0.5 / (((_2368 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2614) + _2577) * _2591))) * _2591;
        float _4679 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2552 = (((_2613 * cbLight._m0[_2562].x) * _2626) * _2627) + _2488;
        _2554 = (((_2613 * cbLight._m0[_2562].y) * _2626) * _2627) + _2489;
        _2556 = (((_2613 * cbLight._m0[_2562].z) * _2626) * _2627) + _2490;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2294)
    {
        _2662 = _2552;
        _2664 = _2554;
        _2666 = _2556;
    }
    else
    {
        uint _2673 = _2203 + 3u;
        uint _2677 = _2203 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _981) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _1056;
        float _2694 = cbLight._m0[_2673].y + _1057;
        float _2695 = cbLight._m0[_2673].z + _1058;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2673].xyz));
        float _4695 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2707 = dot(vec3(_978, _979, _980), vec3(_2700, _2701, _2702));
        float _4706 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4717 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2368 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2729) + _2692) * _2706))) * _2706;
        float _4728 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2662 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2552;
        _2664 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2554;
        _2666 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2556;
    }
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_2201.y == 0u)
    {
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2817;
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2817;
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2817;
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.x;
        uint _2844 = uint((float(_2832.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1077) / _2833))) + floor(float(uint(cbSceneParam._m0[85u].x * _1076) / _2833)));
        float _2854 = (log2(_2820 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2855 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        uint _2858 = uint(isnan(14.0) ? _2855 : (isnan(_2855) ? 14.0 : min(_2855, 14.0)));
        uvec4 _2863 = texelFetch(g_lightClusterGridBuffer, int(((_2858 << 2u) + (_2844 << 6u)) >> 2u));
        uint _2864 = _2863.x;
        uint _2865 = _2832.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2865 >> 4u) & 15u)) + 4294967295u) & _2864) == 0u) || ((_2865 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3133)
                {
                    frontier_phi_66_pred = _3117;
                    frontier_phi_66_pred_1 = _3122;
                    frontier_phi_66_pred_2 = _3121;
                    frontier_phi_66_pred_3 = _3120;
                    frontier_phi_66_pred_4 = _3119;
                    frontier_phi_66_pred_5 = _3118;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3132;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3123 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _2818;
                        float _3329 = _3288.y - _2819;
                        float _3330 = _3288.z - _2820;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_1095, _1098, _1101), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4754 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _2818;
                        float _3364 = (-0.0) - _2819;
                        float _3365 = (-0.0) - _2820;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3380 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _1155;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3370 + _3335;
                        float _3392 = _3371 + _3336;
                        float _3393 = _3372 + _3337;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_1095, _1098, _1101), vec3(_3370, _3371, _3372));
                        float _4770 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3405 = dot(vec3(_1095, _1098, _1101), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4781 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3348 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3338) + _3414;
                        float _4792 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4803 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3412 * _3412) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3192 = (_3359 * _3307.x) + _3265;
                        _3193 = (_3359 * _3307.y) + _3266;
                        _3194 = (_3359 * _3307.z) + _3267;
                        _3189 = (_3440 * _3324.x) + _3262;
                        _3190 = (_3440 * _3324.y) + _3263;
                        _3191 = (_3440 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3194;
                    frontier_phi_66_pred_2 = _3193;
                    frontier_phi_66_pred_3 = _3192;
                    frontier_phi_66_pred_4 = _3191;
                    frontier_phi_66_pred_5 = _3190;
                }
                _2966 = frontier_phi_66_pred;
                _2976 = frontier_phi_66_pred_1;
                _2974 = frontier_phi_66_pred_2;
                _2972 = frontier_phi_66_pred_3;
                _2970 = frontier_phi_66_pred_4;
                _2968 = frontier_phi_66_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2966;
                    _3118 = _2968;
                    _3119 = _2970;
                    _3120 = _2972;
                    _3121 = _2974;
                    _3122 = _2976;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2982) & _2864) == 0u)
        {
            _3085 = _2965;
            _3087 = _2967;
            _3089 = _2969;
            _3091 = _2971;
            _3093 = _2973;
            _3095 = _2975;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
            float _3111 = _3110 * _2818;
            float _3112 = _3110 * _2819;
            float _3113 = _3110 * _2820;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3245 = _2965;
                float _3246 = _2967;
                float _3247 = _2969;
                float _3248 = _2971;
                float _3249 = _2973;
                float _3250 = _2975;
                uint _3251 = _2982;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3261)
                    {
                        frontier_phi_77_pred = _3250;
                        frontier_phi_77_pred_1 = _3249;
                        frontier_phi_77_pred_2 = _3248;
                        frontier_phi_77_pred_3 = _3247;
                        frontier_phi_77_pred_4 = _3246;
                        frontier_phi_77_pred_5 = _3245;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        uint _3473 = _3260;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3542;
                        vec4 _3557;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3484 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3529 = (_3484 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3484 * 40u) + 20u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3484 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3484 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_2820, _3591.z, fma(_2819, _3591.y, _3591.x * _2818)) + _3591.w;
                            _3604 = !((fma(_2820, _3572.z, fma(_2819, _3572.y, _3572.x * _2818)) + _3572.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3499.x - _2818;
                                float _3632 = _3499.y - _2819;
                                float _3633 = _3499.z - _2820;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3500 * _3500));
                                float _4814 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3649 = sqrt(_3634) * _3515.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_1095, _1098, _1101))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_2820, _3542.z, fma(_2819, _3542.y, _3542.x * _2818)) + _3542.w) / _3603;
                                float _3663 = (fma(_2820, _3557.z, fma(_2819, _3557.y, _3557.x * _2818)) + _3557.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4830 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _1155;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_1095, _1098, _1101), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4841 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3706 = dot(vec3(_1095, _1098, _1101), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4852 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_1095, _1098, _1101), vec3(_3638, _3639, _3640))) + _3715;
                                float _4863 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4874 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3669 * _3515.y;
                                frontier_phi_83_pred_1 = _3669 * _3515.x;
                                frontier_phi_83_pred_2 = _3743 * _3527.z;
                                frontier_phi_83_pred_3 = _3743 * _3527.y;
                                frontier_phi_83_pred_4 = _3743 * _3527.x;
                                frontier_phi_83_pred_5 = _3669 * _3515.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_83_pred;
                            _3750 = frontier_phi_83_pred_1;
                            _3749 = frontier_phi_83_pred_2;
                            _3748 = frontier_phi_83_pred_3;
                            _3747 = frontier_phi_83_pred_4;
                            _3752 = frontier_phi_83_pred_5;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3459;
                        frontier_phi_77_pred_1 = _3458;
                        frontier_phi_77_pred_2 = _3457;
                        frontier_phi_77_pred_3 = _3456;
                        frontier_phi_77_pred_4 = _3455;
                        frontier_phi_77_pred_5 = _3454;
                    }
                    _3096 = frontier_phi_77_pred;
                    _3094 = frontier_phi_77_pred_1;
                    _3092 = frontier_phi_77_pred_2;
                    _3090 = frontier_phi_77_pred_3;
                    _3088 = frontier_phi_77_pred_4;
                    _3086 = frontier_phi_77_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3086;
                        _3246 = _3088;
                        _3247 = _3090;
                        _3248 = _3092;
                        _3249 = _3094;
                        _3250 = _3096;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3090;
                frontier_phi_58_59_ladder_1 = _3096;
                frontier_phi_58_59_ladder_2 = _3094;
                frontier_phi_58_59_ladder_3 = _3092;
                frontier_phi_58_59_ladder_4 = _3088;
                frontier_phi_58_59_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_58_59_ladder = _2969;
                frontier_phi_58_59_ladder_1 = _2975;
                frontier_phi_58_59_ladder_2 = _2973;
                frontier_phi_58_59_ladder_3 = _2971;
                frontier_phi_58_59_ladder_4 = _2967;
                frontier_phi_58_59_ladder_5 = _2965;
            }
            _3085 = frontier_phi_58_59_ladder_5;
            _3087 = frontier_phi_58_59_ladder_4;
            _3089 = frontier_phi_58_59_ladder;
            _3091 = frontier_phi_58_59_ladder_3;
            _3093 = frontier_phi_58_59_ladder_2;
            _3095 = frontier_phi_58_59_ladder_1;
        }
        float _3100 = isnan(1.0) ? _1139 : (isnan(_1139) ? 1.0 : min(_1139, 1.0));
        _2877 = (_3100 * _3091) + _2332;
        _2879 = (_3100 * _3093) + _2334;
        _2881 = (_3100 * _3095) + _2336;
        _2883 = ((_3085 * 0.039999999105930328369140625) * _3100) + _2662;
        _2885 = ((_3087 * 0.039999999105930328369140625) * _3100) + _2664;
        _2887 = ((_3089 * 0.039999999105930328369140625) * _3100) + _2666;
    }
    else
    {
        _2877 = _2332;
        _2879 = _2334;
        _2881 = _2336;
        _2883 = _2662;
        _2885 = _2664;
        _2887 = _2666;
    }
    float _4890 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4901 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4912 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2904 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2877 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1139))) + ((_2883 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1973)) * cbPerFrame._m0[3u].x);
    float _2905 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2879 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1139))) + ((_2885 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1973)) * cbPerFrame._m0[3u].x);
    float _2906 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2881 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1139))) + ((_2887 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1973)) * cbPerFrame._m0[3u].x);
    uint _2907 = _261 + 6u;
    float _2915 = _1076 / cbSceneParam._m0[86u].x;
    float _2916 = _1077 / cbSceneParam._m0[86u].y;
    vec4 _2930 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, (log2((isnan(cbSceneParam._m0[77u].w) ? _999 : (isnan(_999) ? cbSceneParam._m0[77u].w : min(_999, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2932 = _2930.x;
    float _2933 = _2930.y;
    float _2934 = _2930.z;
    float _2935 = _2930.w;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    if (_999 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_999) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _999 : min(cbSceneParam._m0[80u].w, _999));
        float _2991 = _2990 / _999;
        float _3002 = _2991 * _1049;
        float _3003 = _1050 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3005 = _2991 * _1051;
        float _3007 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3008 = _3007 + cbSceneParam._m0[79u].w;
        float _3009 = cbSceneParam._m0[79u].w - _3003;
        float _3015 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3005 * _3005));
        float _3018 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3015;
        float _3023 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3025 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_3004 - _3007) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_3008 > 0.0) ? exp2(_3023 * _3008) : (2.0 - exp2(_3025 * _3008))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3018;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : max(_3008, _3009));
            float _3148 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : min(_3008, _3009));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3202 = ((abs(_3015 / _3004) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3023 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3023 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3025 * _3157) - exp2(_3025 * _3158)) * _3146))) + (_3018 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2935);
        _3027 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2932;
        _3029 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2933;
        _3031 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2934;
        _3033 = _3213 * _2935;
    }
    else
    {
        _3027 = _2932;
        _3029 = _2933;
        _3031 = _2934;
        _3033 = _2935;
    }
    bool _3240;
    vec4 _3043;
    vec4 _3065;
    float _3067;
    float _3071;
    float _3072;
    float _3073;
    float _3074;
    bool _3084;
    for (;;)
    {
        _3043 = cbMatDynParam._m0[0u];
        float _3045 = roundEven(_3043.y);
        bool _3046 = _3045 == 3.0;
        float _3047 = log2(_3033);
        float _3054 = exp2(_3047 * cbSceneParam._m0[78u].x) * _2904;
        float _3055 = exp2(_3047 * cbSceneParam._m0[78u].y) * _2905;
        float _3056 = exp2(_3047 * cbSceneParam._m0[78u].z) * _2906;
        float _3063 = _1065 + (-0.5);
        _3065 = cbMtdParam._m0[1u];
        _3067 = _3065.y * _3063;
        float _3070 = (_3045 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3071 = _3070 * (_3046 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3027)));
        _3072 = _3070 * (_3046 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3029)));
        _3073 = _3070 * (_3046 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3031)));
        _3074 = _3063 * 0.999000012874603271484375;
        _3084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3084)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3074) < 0.5)
            {
                _3240 = true;
                break;
            }
        }
        uint _3181 = _1114 + uint(_3043.w);
        if ((cbInstanceData._m0[_3181].w < 1.0) && ((cbInstanceData._m0[_3181].w + _3074) < 0.5))
        {
            _3240 = true;
            break;
        }
        if ((_3067 + 1.0) < _3065.x)
        {
            _3240 = true;
            break;
        }
        _3240 = false;
        break;
    }
    float _3445;
    if (_3240)
    {
        discard_state = true;
        _3445 = 0.0;
    }
    else
    {
        _3445 = cbInstanceData._m0[_2907].w;
    }
    SV_Target.x = _3071;
    SV_Target.y = _3072;
    SV_Target.z = _3073;
    SV_Target.w = _3445;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2907].w;
    discard_exit();
}


