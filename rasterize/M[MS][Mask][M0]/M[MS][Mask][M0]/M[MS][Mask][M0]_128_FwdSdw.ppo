#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1579;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4164 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4175 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4186 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4197 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4208 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4219 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _622;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = _690.x;
    float _693 = _690.y;
    float _694 = _690.z;
    float _701 = ((_673.x - _692) * _461) + _692;
    float _702 = ((_673.y - _693) * _461) + _693;
    float _703 = ((_673.z - _694) * _461) + _694;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _726 = ((_715.x - _701) * _534) + _701;
    float _727 = ((_715.y - _702) * _534) + _702;
    float _728 = ((_715.z - _703) * _534) + _703;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _753 = ((_740.z - _728) * _603) + _728;
    float _756 = ((((_740.x - _726) * _603) + _726) * 2.0) + (-1.0);
    float _757 = ((((_740.y - _727) * _603) + _727) * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4230 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _763 = sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))));
    vec4 _781 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _793 = (_756 + ((((_648.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_781.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _794 = (_757 + ((((_648.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_781.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _797 = fma(_763, _258, fma(_794, _265, _793 * _251));
    float _800 = fma(_763, _259, fma(_794, _266, _793 * _252));
    float _803 = fma(_763, _260, fma(_794, _267, _793 * _253));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _843 = (cbMtdParam._m0[19u].x + dot(vec4(_807 * _797, _807 * _800, _807 * _803, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_836 - _837) * cbMtdParam._m0[24u].w) + _837) * cbMtdParam._m0[21u].z);
    float _4241 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _846 = (-0.0) - cbMtdParam._m0[24u].x;
    float _848 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
    float _856 = _844 - ((_844 * TEXCOORD_8.x) * _849);
    float _857 = _844 - ((_844 * TEXCOORD_8.y) * _849);
    float _858 = _844 - ((_844 * TEXCOORD_8.z) * _849);
    float _865 = (_856 * (cbMtdParam._m0[17u].x - _629)) + _629;
    float _866 = (_857 * (cbMtdParam._m0[17u].y - _630)) + _630;
    float _867 = (_858 * (cbMtdParam._m0[17u].z - _631)) + _631;
    float _882 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _883 = _882 * TEXCOORD.z;
    float _884 = _882 * TEXCOORD.w;
    vec4 _896 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _883) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _884) + cbTextureTilingScale._m0[19u].w));
    float _898 = _896.x;
    float _899 = 1.0 - _898;
    float _927 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_898 - _899) * cbMtdParam._m0[24u].y) + _899) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4262 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _928 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _936 = ((((cbMtdParam._m0[10u].x - _865) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _928) + _865;
    float _937 = ((((cbMtdParam._m0[10u].y - _866) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _928) + _866;
    float _938 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _867)) * _928) + _867;
    float _943 = (((_648.z - _753) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _753;
    float _947 = ((_781.z - _943) * cbMtdParam._m0[19u].w) + _943;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _968 = (_961.x * 2.0) + (-1.0);
    float _969 = (_961.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4273 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _978 = ((_961.z - _947) * _856) + _947;
    float _981 = ((cbMtdParam._m0[23u].y - _978) * _928) + _978;
    vec4 _1002 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _883) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _884) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1008 = (_1002.x * 2.0) + (-1.0);
    float _1009 = (_1002.y * 2.0) + (-1.0);
    float _1010 = dot(vec2(_1008, _1009), vec2(_1008, _1009));
    float _4284 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1025 = ((sqrt(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) - _763) * _858) + _763;
    float _1028 = (((_968 - _793) * _856) + _793) + (cbMtdParam._m0[21u].x * _793);
    float _1029 = (((_969 - _794) * _857) + _794) + (cbMtdParam._m0[21u].x * _794);
    float _1040 = (((_1008 - _1028) + (_1028 * cbMtdParam._m0[22u].z)) * _928) + _1028;
    float _1041 = (((_1009 - _1029) + (_1029 * cbMtdParam._m0[22u].z)) * _928) + _1029;
    float _1042 = (_928 * (sqrt(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) - _1025)) + _1025;
    float _1044 = cbMtdParam._m0[22u].x + _781.w;
    float _1047 = fma(_1042, _258, fma(_1041, _265, _1040 * _251));
    float _1050 = fma(_1042, _259, fma(_1041, _266, _1040 * _252));
    float _1053 = fma(_1042, _260, fma(_1041, _267, _1040 * _253));
    float _1057 = inversesqrt(dot(vec3(_1047, _1050, _1053), vec3(_1047, _1050, _1053)));
    float _1058 = _1057 * _1047;
    float _1059 = _1057 * _1050;
    float _1060 = _1057 * _1053;
    float _4295 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1061 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4317 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4328 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4339 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1079 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1130 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1120);
    float _1131 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1120);
    float _1132 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1120);
    float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
    float _1137 = _1130 * _1136;
    float _1138 = _1131 * _1136;
    float _1139 = _1132 * _1136;
    float _1145 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1146 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1164 = fma(_1060, cbSceneParam._m0[5u].z, fma(_1059, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1058));
    float _1167 = fma(_1060, cbSceneParam._m0[6u].z, fma(_1059, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1058));
    float _1170 = fma(_1060, cbSceneParam._m0[7u].z, fma(_1059, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1058));
    uint _1184 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1190 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbInstanceData._m0[_1184].x;
    float _1191 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * cbInstanceData._m0[_1184].y;
    float _1192 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * cbInstanceData._m0[_1184].z;
    float _4350 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1145, cbSceneParam._m0[86u].y * _1146));
    float _1208 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * TEXCOORD_5.w) * _1204.x;
    float _1209 = dot(vec3(_1058, _1059, _1060), vec3(_1137, _1138, _1139));
    float _1212 = _1209 * 2.0;
    float _1216 = (_1212 * _1058) - _1137;
    float _1217 = (_1212 * _1059) - _1138;
    float _1218 = (_1212 * _1060) - _1139;
    float _1222 = abs(dot(vec3(_1137, _1138, _1139), vec3(_1058, _1059, _1060)));
    float _4383 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = sqrt(_1061);
    float _1237 = exp2((_1224 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1224 * 3.0));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1578;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1303 = fma(_1277, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269));
        float _1307 = fma(_1277, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269));
        float _1311 = fma(_1277, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269));
        float _1336 = _1269 + _1058;
        float _1337 = _1273 + _1059;
        float _1338 = _1277 + _1060;
        float _1348 = fma(_1338, cbModelParam._m0[26u].z, fma(_1337, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1336)) - _1303;
        float _1349 = fma(_1338, cbModelParam._m0[27u].z, fma(_1337, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1336)) - _1307;
        float _1350 = fma(_1338, cbModelParam._m0[28u].z, fma(_1337, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1336)) - _1311;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1303 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1307 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[34u].z) + ((((((_1311 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1406 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1372.x + (-0.5));
        float _1408 = _1406 * (_1372.y + (-0.5));
        float _1409 = _1406 * (_1372.z + (-0.5));
        float _1416 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1379.x + (-0.5));
        float _1418 = _1416 * (_1379.y + (-0.5));
        float _1419 = _1416 * (_1379.z + (-0.5));
        float _1426 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1386.x + (-0.5));
        float _1428 = _1426 * (_1386.y + (-0.5));
        float _1429 = _1426 * (_1386.z + (-0.5));
        float _1436 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1393.x + (-0.5));
        float _1438 = _1436 * (_1393.y + (-0.5));
        float _1439 = _1436 * (_1393.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1460 = (dot(vec3(_1058, _1059, _1060), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1470 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4431 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1472 + 1.0))) + _1477) * _1440;
        float _1487 = _1408 * 0.5;
        float _1488 = _1418 * 0.5;
        float _1489 = _1428 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_1058, _1059, _1060), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4464 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1514 + 1.0))) + _1519) * _1441;
        float _1529 = _1409 * 0.5;
        float _1530 = _1419 * 0.5;
        float _1531 = _1429 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1058, _1059, _1060), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4497 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1556 + 1.0))) + _1561) * _1442;
        _1578 = _1409;
        _1580 = _1408;
        _1581 = _1407;
        _1582 = _1419;
        _1583 = _1418;
        _1584 = _1417;
        _1585 = _1429;
        _1586 = _1428;
        _1587 = _1427;
        _1588 = _1442;
        _1589 = _1441;
        _1590 = _1440;
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1579;
        _1580 = _1579;
        _1581 = _1579;
        _1582 = _1579;
        _1583 = _1579;
        _1584 = _1579;
        _1585 = _1579;
        _1586 = _1579;
        _1587 = _1579;
        _1588 = _1579;
        _1589 = _1579;
        _1590 = _1579;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1616 = fma(_1277, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269));
        float _1620 = fma(_1277, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269));
        float _1624 = fma(_1277, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269));
        float _1647 = _1269 + _1058;
        float _1648 = _1273 + _1059;
        float _1649 = _1277 + _1060;
        float _1659 = fma(_1649, cbModelParam._m0[30u].z, fma(_1648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1647)) - _1616;
        float _1660 = fma(_1649, cbModelParam._m0[31u].z, fma(_1648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1647)) - _1620;
        float _1661 = fma(_1649, cbModelParam._m0[32u].z, fma(_1648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1647)) - _1624;
        float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
        float _1678 = ((_1665 * _1659) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1616 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1665 * _1660) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1620 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1665 * _1661) / cbModelParam._m0[35u].z) + ((((((_1624 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        float _1715 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1682.x + (-0.5));
        float _1717 = _1715 * (_1682.y + (-0.5));
        float _1718 = _1715 * (_1682.z + (-0.5));
        float _1725 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1689.x + (-0.5));
        float _1727 = _1725 * (_1689.y + (-0.5));
        float _1728 = _1725 * (_1689.z + (-0.5));
        float _1735 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1696.x + (-0.5));
        float _1737 = _1735 * (_1696.y + (-0.5));
        float _1738 = _1735 * (_1696.z + (-0.5));
        float _1745 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1703.x + (-0.5));
        float _1747 = _1745 * (_1703.y + (-0.5));
        float _1748 = _1745 * (_1703.z + (-0.5));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = _1716 * 0.5;
        float _1753 = _1726 * 0.5;
        float _1754 = _1736 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_1058, _1059, _1060), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4538 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4549 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4560 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_1779 + 1.0))) + _1784) * _1749;
        float _1794 = _1717 * 0.5;
        float _1795 = _1727 * 0.5;
        float _1796 = _1737 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_1058, _1059, _1060), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4571 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4582 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4593 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_1821 + 1.0))) + _1826) * _1750;
        float _1836 = _1718 * 0.5;
        float _1837 = _1728 * 0.5;
        float _1838 = _1738 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_1058, _1059, _1060), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4604 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4615 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4626 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_1863 + 1.0))) + _1868) * _1751;
        _1885 = _1718;
        _1886 = _1717;
        _1887 = _1716;
        _1888 = _1728;
        _1889 = _1727;
        _1890 = _1726;
        _1891 = _1738;
        _1892 = _1737;
        _1893 = _1736;
        _1894 = _1751;
        _1895 = _1750;
        _1896 = _1749;
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
    }
    else
    {
        _1885 = _1579;
        _1886 = _1579;
        _1887 = _1579;
        _1888 = _1579;
        _1889 = _1579;
        _1890 = _1579;
        _1891 = _1579;
        _1892 = _1579;
        _1893 = _1579;
        _1894 = _1579;
        _1895 = _1579;
        _1896 = _1579;
        _1897 = 0.0;
        _1898 = 0.0;
        _1899 = 0.0;
    }
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1592)) + _1592;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1593)) + _1593;
    float _1932 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1909));
    float _1953 = _1216 * 0.5;
    float _1954 = _1217 * 0.5;
    float _1955 = _1218 * 0.5;
    float _1956 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1959 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1962 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1996;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1969 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1578, _1582, _1585, _1588));
        float _1973 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1580, _1583, _1586, _1589));
        float _1977 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1984 = dot(vec4(cbModelParam._m0[39u]), vec4(_1953, _1954, _1955, 1.0));
        _1996 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1996 = 1.0;
    }
    float _2007;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1998 = dot(vec4(cbModelParam._m0[40u]), vec4(_1953, _1954, _1955, 1.0));
        _2007 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2007 = 1.0;
    }
    float _2011 = (_2007 * cbModelParam._m0[1u].x) + (_1996 * (1.0 - cbModelParam._m0[1u].x));
    float _2021 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1061);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2021 : min(cbModelParam._m0[25u].z, _2021));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2069 = fma(_1277, cbModelParam._m0[13u].z, fma(_1273, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1269)) + cbModelParam._m0[13u].w;
        float _2073 = fma(_1277, cbModelParam._m0[14u].z, fma(_1273, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1269)) + cbModelParam._m0[14u].w;
        float _2077 = fma(_1277, cbModelParam._m0[15u].z, fma(_1273, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1269)) + cbModelParam._m0[15u].w;
        float _2080 = fma(_1218, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216));
        float _2083 = fma(_1218, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216));
        float _2086 = fma(_1218, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216));
        float _2114;
        if (_2080 > 0.0)
        {
            _2114 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2114 = frontier_phi_14_12_ladder;
        }
        float _2284;
        if (_2083 > 0.0)
        {
            _2284 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2284 = frontier_phi_23_19_ladder;
        }
        float _2579;
        if (_2086 > 0.0)
        {
            _2579 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2579 = frontier_phi_35_30_ladder;
        }
        float _2581 = isnan(_2284) ? _2114 : (isnan(_2114) ? _2284 : min(_2114, _2284));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _2080) + _2069;
        float _2587 = (_2582 * _2083) + _2073;
        float _2588 = (_2582 * _2086) + _2077;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2589;
        float _2593 = _2589 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 > _2593) || ((_2587 < _2591) || ((_2586 < _2591) || (_2586 > _2593))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2588, cbModelParam._m0[9u].z, fma(_2587, cbModelParam._m0[9u].y, _2586 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2588, cbModelParam._m0[10u].z, fma(_2587, cbModelParam._m0[10u].y, _2586 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2588, cbModelParam._m0[11u].z, fma(_2587, cbModelParam._m0[11u].y, _2586 * cbModelParam._m0[11u].x))), _2022);
            frontier_phi_13_35_ladder = _2733.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2733.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2733.x * cbModelParam._m0[1u].y;
        }
        _2102 = frontier_phi_13_35_ladder_2;
        _2104 = frontier_phi_13_35_ladder_1;
        _2106 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1216, _1217, _1218), _2022);
        _2102 = _2090.x * cbModelParam._m0[1u].y;
        _2104 = _2090.y * cbModelParam._m0[1u].y;
        _2106 = _2090.z * cbModelParam._m0[1u].y;
    }
    float _2110 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1061);
    float _2111 = isnan(_2110) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2110 : min(cbModelParam._m0[25u].w, _2110));
    float _2201;
    float _2203;
    float _2205;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2165 = fma(_1277, cbModelParam._m0[21u].z, fma(_1273, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1269)) + cbModelParam._m0[21u].w;
        float _2169 = fma(_1277, cbModelParam._m0[22u].z, fma(_1273, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1269)) + cbModelParam._m0[22u].w;
        float _2173 = fma(_1277, cbModelParam._m0[23u].z, fma(_1273, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1269)) + cbModelParam._m0[23u].w;
        float _2176 = fma(_1218, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216));
        float _2179 = fma(_1218, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216));
        float _2182 = fma(_1218, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216));
        float _2289;
        if (_2176 > 0.0)
        {
            _2289 = abs((1.0 - _2165) / _2176);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2165 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2289 = frontier_phi_25_21_ladder;
        }
        float _2606;
        if (_2179 > 0.0)
        {
            _2606 = abs((1.0 - _2169) / _2179);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2169 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2606 = frontier_phi_37_32_ladder;
        }
        float _2933;
        if (_2182 > 0.0)
        {
            _2933 = abs((1.0 - _2173) / _2182);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2173 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2933 = frontier_phi_47_44_ladder;
        }
        float _2935 = isnan(_2606) ? _2289 : (isnan(_2289) ? _2606 : min(_2289, _2606));
        float _2936 = isnan(_2933) ? _2935 : (isnan(_2935) ? _2933 : min(_2935, _2933));
        float _2940 = (_2936 * _2176) + _2165;
        float _2941 = (_2936 * _2179) + _2169;
        float _2942 = (_2936 * _2182) + _2173;
        float _2943 = _2936 * 9.9999997473787516355514526367188e-05;
        float _2944 = (-1.0) - _2943;
        float _2946 = _2943 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2942 > _2946) || ((_2942 < _2944) || ((_2941 > _2946) || ((_2941 < _2944) || ((_2940 < _2944) || (_2940 > _2946))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2942, cbModelParam._m0[17u].z, fma(_2941, cbModelParam._m0[17u].y, _2940 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2942, cbModelParam._m0[18u].z, fma(_2941, cbModelParam._m0[18u].y, _2940 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2942, cbModelParam._m0[19u].z, fma(_2941, cbModelParam._m0[19u].y, _2940 * cbModelParam._m0[19u].x))), _2111);
            frontier_phi_22_47_ladder = _3060.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3060.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3060.x * cbModelParam._m0[1u].z;
        }
        _2201 = frontier_phi_22_47_ladder_2;
        _2203 = frontier_phi_22_47_ladder_1;
        _2205 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1216, _1217, _1218), _2111);
        _2201 = _2185.x * cbModelParam._m0[1u].z;
        _2203 = _2185.y * cbModelParam._m0[1u].z;
        _2205 = _2185.z * cbModelParam._m0[1u].z;
    }
    float _2217 = ((((1.0 - _1237) * ((_1224 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1237 * _1224)) * _1208;
    float _2218 = _2217 * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2219 = _2217 * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2220 = _2217 * ((cbModelParam._m0[1u].w * (_2205 - _2106)) + _2106);
    float _2223 = fma(_2220, cbSceneParam._m0[89u].z, fma(_2219, cbSceneParam._m0[89u].y, _2218 * cbSceneParam._m0[89u].x));
    float _2226 = fma(_2220, cbSceneParam._m0[90u].z, fma(_2219, cbSceneParam._m0[90u].y, _2218 * cbSceneParam._m0[90u].x));
    float _2229 = fma(_2220, cbSceneParam._m0[91u].z, fma(_2219, cbSceneParam._m0[91u].y, _2218 * cbSceneParam._m0[91u].x));
    float _2263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2276 = _2263 / _2275;
    float _2277 = _2267 / _2275;
    float _2278 = _2271 / _2275;
    float _2425;
    float _2426;
    float _2427;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2305 = ((uint(_2278 > cbSceneParam._m0[59u].y) + uint(_2278 > cbSceneParam._m0[59u].x)) + uint(_2278 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2306 = _2305 + 43u;
        uint _2314 = _2305 + 44u;
        uint _2322 = _2305 + 45u;
        uint _2330 = _2305 + 46u;
        float _2341 = fma(_2275, cbSceneParam._m0[_2306].w, fma(_2271, cbSceneParam._m0[_2306].z, fma(_2267, cbSceneParam._m0[_2306].y, _2263 * cbSceneParam._m0[_2306].x)));
        float _2345 = fma(_2275, cbSceneParam._m0[_2314].w, fma(_2271, cbSceneParam._m0[_2314].z, fma(_2267, cbSceneParam._m0[_2314].y, _2263 * cbSceneParam._m0[_2314].x)));
        float _2353 = fma(_2275, cbSceneParam._m0[_2330].w, fma(_2271, cbSceneParam._m0[_2330].z, fma(_2267, cbSceneParam._m0[_2330].y, _2263 * cbSceneParam._m0[_2330].x)));
        float _2358 = cbSceneParam._m0[33u].z * _2353;
        float _2360 = cbSceneParam._m0[33u].w * _2353;
        float _2363 = fma(_2275, cbSceneParam._m0[_2322].w, fma(_2271, cbSceneParam._m0[_2322].z, fma(_2267, cbSceneParam._m0[_2322].y, _2263 * cbSceneParam._m0[_2322].x))) / _2353;
        float _2411 = (cbSceneParam._m0[33u].x - sqrt(((_2277 * _2277) + (_2276 * _2276)) + (_2278 * _2278))) * cbSceneParam._m0[33u].y;
        float _4752 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2418 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2358 + _2341) / _2353, (_2360 + _2345) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2360 + _2341) / _2353, (_2345 - _2358) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 - _2358) / _2353, (_2345 - _2360) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 - _2360) / _2353, (_2358 + _2345) / _2353), _2363), 0.0)).x), vec4(0.25)));
        _2425 = 1.0 - (_2418 * cbSceneParam._m0[34u].x);
        _2426 = 1.0 - (_2418 * cbSceneParam._m0[34u].y);
        _2427 = 1.0 - (_2418 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2425 = 1.0;
        _2426 = 1.0;
        _2427 = 1.0;
    }
    float _2491;
    float _2493;
    float _2495;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2479 = fma(_2275, cbSceneParam._m0[63u].w, fma(_2271, cbSceneParam._m0[63u].z, fma(_2267, cbSceneParam._m0[63u].y, _2263 * cbSceneParam._m0[63u].x)));
        float _2480 = fma(_2275, cbSceneParam._m0[60u].w, fma(_2271, cbSceneParam._m0[60u].z, fma(_2267, cbSceneParam._m0[60u].y, _2263 * cbSceneParam._m0[60u].x))) / _2479;
        float _2481 = fma(_2275, cbSceneParam._m0[61u].w, fma(_2271, cbSceneParam._m0[61u].z, fma(_2267, cbSceneParam._m0[61u].y, _2263 * cbSceneParam._m0[61u].x))) / _2479;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2480 >= cbSceneParam._m0[64u].x) && (_2481 >= cbSceneParam._m0[64u].y)) && (_2480 <= cbSceneParam._m0[64u].z)) && (_2481 <= cbSceneParam._m0[64u].w))
        {
            float _2619 = fma(_2275, cbSceneParam._m0[62u].w, fma(_2271, cbSceneParam._m0[62u].z, fma(_2267, cbSceneParam._m0[62u].y, _2263 * cbSceneParam._m0[62u].x))) / _2479;
            float _2623 = isnan(cbSceneParam._m0[41u].w) ? _2619 : (isnan(_2619) ? cbSceneParam._m0[41u].w : max(_2619, cbSceneParam._m0[41u].w));
            float _2666 = (cbSceneParam._m0[33u].x - sqrt(((_2277 * _2277) + (_2276 * _2276)) + (_2278 * _2278))) * cbSceneParam._m0[33u].y;
            float _4768 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
            float _2673 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2480, cbSceneParam._m0[33u].w + _2481), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2480, _2481 - cbSceneParam._m0[33u].z), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2480 - cbSceneParam._m0[33u].z, _2481 - cbSceneParam._m0[33u].w), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2480 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2481), _2623), 0.0)).x), vec4(0.25)));
            float _2677 = 1.0 - (_2673 * cbSceneParam._m0[34u].x);
            float _2678 = 1.0 - (_2673 * cbSceneParam._m0[34u].y);
            float _2679 = 1.0 - (_2673 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2679) ? _2427 : (isnan(_2427) ? _2679 : min(_2427, _2679));
            frontier_phi_34_33_ladder_1 = isnan(_2678) ? _2426 : (isnan(_2426) ? _2678 : min(_2426, _2678));
            frontier_phi_34_33_ladder_2 = isnan(_2677) ? _2425 : (isnan(_2425) ? _2677 : min(_2425, _2677));
        }
        else
        {
            frontier_phi_34_33_ladder = _2427;
            frontier_phi_34_33_ladder_1 = _2426;
            frontier_phi_34_33_ladder_2 = _2425;
        }
        _2491 = frontier_phi_34_33_ladder_2;
        _2493 = frontier_phi_34_33_ladder_1;
        _2495 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2491 = _2425;
        _2493 = _2426;
        _2495 = _2427;
    }
    uvec4 _2500 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2502 = _2500.x * 14u;
    uint _2503 = _2502 + 13u;
    float _2510 = _1208 + (-1.0);
    float _2515 = (cbLight._m0[_2503].x * _2510) + 1.0;
    float _2516 = (cbLight._m0[_2503].y * _2510) + 1.0;
    float _2517 = (cbLight._m0[_2503].z * _2510) + 1.0;
    float _2518 = (cbLight._m0[_2503].w * _2510) + 1.0;
    uint _2519 = _2502 + 5u;
    float _2525 = isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0));
    uint _2529 = _2502 + 4u;
    float _2538 = isnan(1.0) ? _2515 : (isnan(_2515) ? 1.0 : min(_2515, 1.0));
    uint _2542 = _2502 | 1u;
    float _2553 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_1058, _1059, _1060));
    float _2556 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_1058, _1059, _1060));
    float _4804 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _4815 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2561 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * 0.3183098733425140380859375;
    float _2563 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * 0.3183098733425140380859375;
    float _2570 = ((cbLight._m0[_2519].x * _2525) * _2563) + (((cbLight._m0[_2529].x * _2491) * _2538) * _2561);
    float _2571 = ((_2525 * cbLight._m0[_2519].y) * _2563) + (((cbLight._m0[_2529].y * _2493) * _2538) * _2561);
    float _2572 = ((_2525 * cbLight._m0[_2519].z) * _2563) + (((cbLight._m0[_2529].z * _2495) * _2538) * _2561);
    uvec4 _2576 = floatBitsToUint(cbLight._m0[_2502 + 12u]);
    bool _2578 = _2576.x == 0u;
    float _2680;
    float _2682;
    float _2684;
    if (_2578)
    {
        _2680 = _2570;
        _2682 = _2571;
        _2684 = _2572;
    }
    else
    {
        uint _2688 = _2502 + 6u;
        float _2704 = (dot(vec3(cbLight._m0[_2502 + 2u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4826 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2707 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
        _2680 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2570;
        _2682 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2571;
        _2684 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2572;
    }
    bool _2687 = _2576.y == 0u;
    float _2742;
    float _2744;
    float _2746;
    if (_2687)
    {
        _2742 = _2680;
        _2744 = _2682;
        _2746 = _2684;
    }
    else
    {
        uint _2904 = _2502 + 7u;
        float _2920 = (dot(vec3(cbLight._m0[_2502 + 3u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2921 = _2920 * _2920;
        float _4842 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2922 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2923 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _2742 = (((cbLight._m0[_2904].x * 0.3183098733425140380859375) * _2922) * _2923) + _2680;
        _2744 = (((cbLight._m0[_2904].y * 0.3183098733425140380859375) * _2922) * _2923) + _2682;
        _2746 = (((cbLight._m0[_2904].z * 0.3183098733425140380859375) * _2922) * _2923) + _2684;
    }
    uint _2749 = _2502 + 8u;
    float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _1061) * 0.949999988079071044921875);
    float _2763 = _2762 * _2762;
    float _2764 = cbLight._m0[_2502].x + _1137;
    float _2765 = cbLight._m0[_2502].y + _1138;
    float _2766 = cbLight._m0[_2502].z + _1139;
    float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
    float _2771 = _2770 * _2764;
    float _2772 = _2770 * _2765;
    float _2773 = _2770 * _2766;
    float _2774 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2502].xyz));
    float _4858 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _4869 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _2778 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2779 = dot(vec3(_1058, _1059, _1060), vec3(_2771, _2772, _2773));
    float _4880 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2783 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2771, _2772, _2773));
    float _4891 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2787 = _2763 * _2763;
    float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
    float _2802 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2803 = 1.0 - _2763;
    float _2814 = (0.5 / (((_2778 * ((_2777 * _2803) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2803) + _2763) * _2777))) * _2777;
    float _4902 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2816 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
    uint _2830 = _2502 + 9u;
    float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _1061) * 0.949999988079071044921875);
    float _2842 = _2841 * _2841;
    float _2843 = cbLight._m0[_2542].x + _1137;
    float _2844 = cbLight._m0[_2542].y + _1138;
    float _2845 = cbLight._m0[_2542].z + _1139;
    float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
    float _2850 = _2849 * _2843;
    float _2851 = _2849 * _2844;
    float _2852 = _2849 * _2845;
    float _2853 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2542].xyz));
    float _4913 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2856 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    float _2857 = dot(vec3(_1058, _1059, _1060), vec3(_2850, _2851, _2852));
    float _4924 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2860 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
    float _2861 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2850, _2851, _2852));
    float _4935 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2865 = _2842 * _2842;
    float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
    float _2878 = (exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2879 = 1.0 - _2842;
    float _2889 = (0.5 / (((_2778 * ((_2856 * _2879) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2879) + _2842) * _2856))) * _2856;
    float _4946 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
    float _2891 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
    float _2901 = (((_2878 * cbLight._m0[_2830].x) * _2891) * _2525) + ((((cbLight._m0[_2749].x * _2491) * _2802) * _2816) * _2538);
    float _2902 = (((_2878 * cbLight._m0[_2830].y) * _2891) * _2525) + ((((cbLight._m0[_2749].y * _2493) * _2802) * _2816) * _2538);
    float _2903 = (((_2878 * cbLight._m0[_2830].z) * _2891) * _2525) + ((((cbLight._m0[_2749].z * _2495) * _2802) * _2816) * _2538);
    float _2959;
    float _2961;
    float _2963;
    if (_2578)
    {
        _2959 = _2901;
        _2961 = _2902;
        _2963 = _2903;
    }
    else
    {
        uint _2965 = _2502 + 2u;
        uint _2969 = _2502 + 10u;
        float _2983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2965].w)) * _1061) * 0.949999988079071044921875);
        float _2984 = _2983 * _2983;
        float _2985 = cbLight._m0[_2965].x + _1137;
        float _2986 = cbLight._m0[_2965].y + _1138;
        float _2987 = cbLight._m0[_2965].z + _1139;
        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
        float _2992 = _2991 * _2985;
        float _2993 = _2991 * _2986;
        float _2994 = _2991 * _2987;
        float _2995 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2965].xyz));
        float _4957 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2998 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
        float _2999 = dot(vec3(_1058, _1059, _1060), vec3(_2992, _2993, _2994));
        float _4968 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
        float _3003 = dot(vec3(cbLight._m0[_2965].xyz), vec3(_2992, _2993, _2994));
        float _4979 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3007 = _2984 * _2984;
        float _3011 = ((_3002 * _3002) * (_3007 + (-1.0))) + 1.0;
        float _3020 = (exp2(log2(1.0 - (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3021 = 1.0 - _2984;
        float _3031 = (0.5 / (((_2778 * ((_2998 * _3021) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _3021) + _2984) * _2998))) * _2998;
        float _4990 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3033 = (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3007 / ((_3011 * _3011) * 3.141590118408203125));
        float _3034 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
        _2959 = (((_3020 * cbLight._m0[_2969].x) * _3033) * _3034) + _2901;
        _2961 = (((_3020 * cbLight._m0[_2969].y) * _3033) * _3034) + _2902;
        _2963 = (((_3020 * cbLight._m0[_2969].z) * _3033) * _3034) + _2903;
    }
    float _3065;
    float _3067;
    float _3069;
    if (_2687)
    {
        _3065 = _2959;
        _3067 = _2961;
        _3069 = _2963;
    }
    else
    {
        uint _3076 = _2502 + 3u;
        uint _3080 = _2502 + 11u;
        float _3094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3076].w)) * _1061) * 0.949999988079071044921875);
        float _3095 = _3094 * _3094;
        float _3096 = cbLight._m0[_3076].x + _1137;
        float _3097 = cbLight._m0[_3076].y + _1138;
        float _3098 = cbLight._m0[_3076].z + _1139;
        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
        float _3103 = _3102 * _3096;
        float _3104 = _3102 * _3097;
        float _3105 = _3102 * _3098;
        float _3106 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_3076].xyz));
        float _5006 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
        float _3109 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
        float _3110 = dot(vec3(_1058, _1059, _1060), vec3(_3103, _3104, _3105));
        float _5017 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        float _3113 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
        float _3114 = dot(vec3(cbLight._m0[_3076].xyz), vec3(_3103, _3104, _3105));
        float _5028 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        float _3118 = _3095 * _3095;
        float _3122 = ((_3113 * _3113) * (_3118 + (-1.0))) + 1.0;
        float _3131 = (exp2(log2(1.0 - (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3132 = 1.0 - _3095;
        float _3142 = (0.5 / (((_2778 * ((_3109 * _3132) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _3132) + _3095) * _3109))) * _3109;
        float _5039 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
        float _3144 = (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3118 / ((_3122 * _3122) * 3.141590118408203125));
        float _3145 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _3065 = (((_3131 * cbLight._m0[_3080].x) * _3144) * _3145) + _2959;
        _3067 = (((_3131 * cbLight._m0[_3080].y) * _3144) * _3145) + _2961;
        _3069 = (((_3131 * cbLight._m0[_3080].z) * _3144) * _3145) + _2963;
    }
    float _3211;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    float _3221;
    if (_2500.y == 0u)
    {
        uvec4 _3166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3167 = _3166.x;
        uint _3178 = uint((float(_3166.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1146) / _3167))) + floor(float(uint(cbSceneParam._m0[85u].x * _1145) / _3167)));
        float _3188 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3189 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
        uint _3192 = uint(isnan(14.0) ? _3189 : (isnan(_3189) ? 14.0 : min(_3189, 14.0)));
        uvec4 _3197 = texelFetch(g_lightClusterGridBuffer, int(((_3192 << 2u) + (_3178 << 6u)) >> 2u));
        uint _3198 = _3197.x;
        uint _3199 = _3166.z;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        if (((((1u << ((_3199 >> 4u) & 15u)) + 4294967295u) & _3198) == 0u) || ((_3199 & 240u) == 0u))
        {
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
        }
        else
        {
            float _3279;
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3289;
            float _3422 = 0.0;
            float _3423 = 0.0;
            float _3424 = 0.0;
            float _3425 = 0.0;
            float _3426 = 0.0;
            float _3427 = 0.0;
            uint _3428 = 0u;
            uint _3437;
            bool _3438;
            for (;;)
            {
                _3437 = texelFetch(g_lightClassification, int((((_3192 << 5u) + (_3178 << 9u)) + (_3428 << 2u)) >> 2u)).x;
                _3438 = _3437 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3438)
                {
                    frontier_phi_66_pred = _3427;
                    frontier_phi_66_pred_1 = _3426;
                    frontier_phi_66_pred_2 = _3425;
                    frontier_phi_66_pred_3 = _3424;
                    frontier_phi_66_pred_4 = _3423;
                    frontier_phi_66_pred_5 = _3422;
                }
                else
                {
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    uint _3552;
                    _3546 = _3422;
                    _3547 = _3423;
                    _3548 = _3424;
                    _3549 = _3425;
                    _3550 = _3426;
                    _3551 = _3427;
                    _3552 = _3437;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    for (;;)
                    {
                        uint _3556 = uint(findLSB(_3552)) + (_3428 << 5u);
                        uint _3553 = (_3552 + 4294967295u) & _3552;
                        uint _3558 = _3556 * 48u;
                        vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3558)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 3u)).x));
                        uint _3578 = (_3556 * 48u) + 4u;
                        vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3578)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 3u)).x));
                        uint _3597 = (_3556 * 48u) + 8u;
                        vec3 _3608 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3597)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 2u)).x));
                        float _3612 = _3572.x - _2276;
                        float _3613 = _3572.y - _2277;
                        float _3614 = _3572.z - _2278;
                        float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                        float _3618 = inversesqrt(_3615);
                        float _3619 = _3618 * _3612;
                        float _3620 = _3618 * _3613;
                        float _3621 = _3618 * _3614;
                        float _3622 = dot(vec3(_1164, _1167, _1170), vec3(_3619, _3620, _3621));
                        float _3627 = 1.0 - (_3615 * _3572.w);
                        float _5065 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3628 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                        float _3629 = sqrt(_3615) * _3591.w;
                        float _3632 = 1.39999997615814208984375 / (_3629 + 1.39999997615814208984375);
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3622) + _3633;
                        float _3639 = _3629 * _3629;
                        float _3643 = ((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3628) / ((_3639 * 0.699999988079071044921875) + 1.0);
                        float _3647 = (-0.0) - _2276;
                        float _3648 = (-0.0) - _2277;
                        float _3649 = (-0.0) - _2278;
                        float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                        float _3654 = _3653 * _3647;
                        float _3655 = _3653 * _3648;
                        float _3656 = _3653 * _3649;
                        float _3663 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                        float _3664 = 1.0 - _1224;
                        float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                        float _3672 = _3671 * _3671;
                        float _3673 = _3672 * _3672;
                        float _3674 = _3654 + _3619;
                        float _3675 = _3655 + _3620;
                        float _3676 = _3656 + _3621;
                        float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                        float _3684 = dot(vec3(_1164, _1167, _1170), vec3(_3654, _3655, _3656));
                        float _5081 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3687 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3688 = dot(vec3(_1164, _1167, _1170), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                        float _5092 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3691 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                        float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                        float _3696 = _3632 * _3672;
                        float _3697 = _3696 * _3696;
                        float _3700 = ((1.0 - _3697) * _3622) + _3697;
                        float _5103 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3701 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                        float _3702 = 1.0 - _3672;
                        float _3712 = (0.5 / (((_3701 * ((_3687 * _3702) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3672) * _3687))) * _3701;
                        float _5114 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3723 = (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0)))) / ((_3695 * _3695) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125))) * _3628;
                        _3481 = (_3643 * _3591.x) + _3549;
                        _3482 = (_3643 * _3591.y) + _3550;
                        _3483 = (_3643 * _3591.z) + _3551;
                        _3478 = (_3723 * _3608.x) + _3546;
                        _3479 = (_3723 * _3608.y) + _3547;
                        _3480 = (_3723 * _3608.z) + _3548;
                        if (_3553 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3546 = _3478;
                            _3547 = _3479;
                            _3548 = _3480;
                            _3549 = _3481;
                            _3550 = _3482;
                            _3551 = _3483;
                            _3552 = _3553;
                        }
                    }
                    frontier_phi_66_pred = _3483;
                    frontier_phi_66_pred_1 = _3482;
                    frontier_phi_66_pred_2 = _3481;
                    frontier_phi_66_pred_3 = _3480;
                    frontier_phi_66_pred_4 = _3479;
                    frontier_phi_66_pred_5 = _3478;
                }
                _3289 = frontier_phi_66_pred;
                _3287 = frontier_phi_66_pred_1;
                _3285 = frontier_phi_66_pred_2;
                _3283 = frontier_phi_66_pred_3;
                _3281 = frontier_phi_66_pred_4;
                _3279 = frontier_phi_66_pred_5;
                uint _3429 = _3428 + 1u;
                if (_3429 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3422 = _3279;
                    _3423 = _3281;
                    _3424 = _3283;
                    _3425 = _3285;
                    _3426 = _3287;
                    _3427 = _3289;
                    _3428 = _3429;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
        }
        uvec4 _3292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3293 = _3292.z;
        uint _3295 = (_3293 >> 8u) & 15u;
        float _3390;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        float _3400;
        if (((4294967295u << _3295) & _3198) == 0u)
        {
            _3390 = _3278;
            _3392 = _3280;
            _3394 = _3282;
            _3396 = _3284;
            _3398 = _3286;
            _3400 = _3288;
        }
        else
        {
            float _3415 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _3416 = _3415 * _2276;
            float _3417 = _3415 * _2277;
            float _3418 = _3415 * _2278;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3295 < ((_3293 >> 12u) & 15u))
            {
                float _3391;
                float _3393;
                float _3395;
                float _3397;
                float _3399;
                float _3401;
                float _3529 = _3278;
                float _3530 = _3280;
                float _3531 = _3282;
                float _3532 = _3284;
                float _3533 = _3286;
                float _3534 = _3288;
                uint _3535 = _3295;
                uint _3544;
                bool _3545;
                for (;;)
                {
                    _3544 = texelFetch(g_lightClassification, int((((_3192 << 5u) + (_3178 << 9u)) + (_3535 << 2u)) >> 2u)).x;
                    _3545 = _3544 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3545)
                    {
                        frontier_phi_72_pred = _3534;
                        frontier_phi_72_pred_1 = _3533;
                        frontier_phi_72_pred_2 = _3532;
                        frontier_phi_72_pred_3 = _3531;
                        frontier_phi_72_pred_4 = _3530;
                        frontier_phi_72_pred_5 = _3529;
                    }
                    else
                    {
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _3741 = _3529;
                        float _3742 = _3530;
                        float _3743 = _3531;
                        float _3744 = _3532;
                        float _3745 = _3533;
                        float _3746 = _3534;
                        uint _3747 = _3544;
                        uint _3748;
                        vec4 _3773;
                        float _3774;
                        vec4 _3789;
                        vec3 _3801;
                        vec4 _3816;
                        vec4 _3831;
                        float _3877;
                        bool _3878;
                        for (;;)
                        {
                            uint _3758 = ((_3535 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3747));
                            _3748 = (_3747 + 4294967295u) & _3747;
                            uint _3760 = _3758 * 40u;
                            _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            _3774 = _3773.w;
                            uint _3776 = (_3758 * 40u) + 4u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3791 = (_3758 * 40u) + 8u;
                            _3801 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x));
                            uint _3803 = (_3758 * 40u) + 16u;
                            _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            uint _3818 = (_3758 * 40u) + 20u;
                            _3831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 3u)).x));
                            uint _3833 = (_3758 * 40u) + 24u;
                            vec4 _3846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 3u)).x));
                            uint _3852 = (_3758 * 40u) + 28u;
                            vec4 _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            _3877 = fma(_2278, _3865.z, fma(_2277, _3865.y, _3865.x * _2276)) + _3865.w;
                            _3878 = !((fma(_2278, _3846.z, fma(_2277, _3846.y, _3846.x * _2276)) + _3846.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3878)
                            {
                                float _3905 = _3773.x - _2276;
                                float _3906 = _3773.y - _2277;
                                float _3907 = _3773.z - _2278;
                                float _3908 = dot(vec3(_3905, _3906, _3907), vec3(_3905, _3906, _3907));
                                float _3911 = inversesqrt(_3908);
                                float _3912 = _3911 * _3905;
                                float _3913 = _3911 * _3906;
                                float _3914 = _3911 * _3907;
                                float _3918 = 1.0 - (_3908 / (_3774 * _3774));
                                float _5125 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                                float _3923 = sqrt(_3908) * _3789.w;
                                float _3925 = 1.39999997615814208984375 / (_3923 + 1.39999997615814208984375);
                                float _3926 = _3925 * _3925;
                                float _3929 = ((1.0 - _3926) * dot(vec3(_3912, _3913, _3914), vec3(_1164, _1167, _1170))) + _3926;
                                float _3932 = _3923 * _3923;
                                float _3936 = (fma(_2278, _3816.z, fma(_2277, _3816.y, _3816.x * _2276)) + _3816.w) / _3877;
                                float _3937 = (fma(_2278, _3831.z, fma(_2277, _3831.y, _3831.x * _2276)) + _3831.w) / _3877;
                                float _3941 = 1.0 - dot(vec2(_3936, _3937), vec2(_3936, _3937));
                                float _5141 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3942 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3943 = _3942 * (((isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0))) * _3919) / ((_3932 * 0.699999988079071044921875) + 1.0));
                                float _3955 = exp2(log2(1.0 / ((_3932 * 3.5) + 5.0)) * 0.25);
                                float _3956 = 1.0 - _1224;
                                float _3963 = sqrt(1.0 - ((1.0 - (_3956 * _3956)) * (1.0 - (_3955 * _3955))));
                                float _3964 = _3963 * _3963;
                                float _3965 = _3964 * _3964;
                                float _3966 = _3912 - _3416;
                                float _3967 = _3913 - _3417;
                                float _3968 = _3914 - _3418;
                                float _3972 = inversesqrt(dot(vec3(_3966, _3967, _3968), vec3(_3966, _3967, _3968)));
                                float _3976 = dot(vec3(_1164, _1167, _1170), vec3((-0.0) - _3416, (-0.0) - _3417, (-0.0) - _3418));
                                float _5152 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3979 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3980 = dot(vec3(_1164, _1167, _1170), vec3(_3972 * _3966, _3972 * _3967, _3972 * _3968));
                                float _5163 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3983 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3987 = ((_3983 * _3983) * (_3965 + (-1.0))) + 1.0;
                                float _3988 = _3925 * _3964;
                                float _3989 = _3988 * _3988;
                                float _3995 = ((1.0 - _3989) * dot(vec3(_1164, _1167, _1170), vec3(_3912, _3913, _3914))) + _3989;
                                float _5174 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _3996 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                                float _3997 = 1.0 - _3964;
                                float _4007 = (0.5 / (((_3996 * ((_3979 * _3997) + _3964)) + 9.9999999392252902907785028219223e-09) + (((_3996 * _3997) + _3964) * _3979))) * _3996;
                                float _5185 = isnan(0.0) ? _4007 : (isnan(_4007) ? 0.0 : max(_4007, 0.0));
                                float _4017 = (_3942 * _3919) * (((_3965 * 3.1415927410125732421875) * (isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0)))) / ((_3987 * _3987) * ((_3932 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3943 * _3789.y;
                                frontier_phi_78_pred_1 = _3943 * _3789.x;
                                frontier_phi_78_pred_2 = _4017 * _3801.z;
                                frontier_phi_78_pred_3 = _4017 * _3801.y;
                                frontier_phi_78_pred_4 = _4017 * _3801.x;
                                frontier_phi_78_pred_5 = _3943 * _3789.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4025 = frontier_phi_78_pred;
                            _4024 = frontier_phi_78_pred_1;
                            _4023 = frontier_phi_78_pred_2;
                            _4022 = frontier_phi_78_pred_3;
                            _4021 = frontier_phi_78_pred_4;
                            _4026 = frontier_phi_78_pred_5;
                            _3731 = _4024 + _3744;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            _3728 = _4021 + _3741;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            if (_3748 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3748;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3733;
                        frontier_phi_72_pred_1 = _3732;
                        frontier_phi_72_pred_2 = _3731;
                        frontier_phi_72_pred_3 = _3730;
                        frontier_phi_72_pred_4 = _3729;
                        frontier_phi_72_pred_5 = _3728;
                    }
                    _3401 = frontier_phi_72_pred;
                    _3399 = frontier_phi_72_pred_1;
                    _3397 = frontier_phi_72_pred_2;
                    _3395 = frontier_phi_72_pred_3;
                    _3393 = frontier_phi_72_pred_4;
                    _3391 = frontier_phi_72_pred_5;
                    uint _3536 = _3535 + 1u;
                    if (_3536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3529 = _3391;
                        _3530 = _3393;
                        _3531 = _3395;
                        _3532 = _3397;
                        _3533 = _3399;
                        _3534 = _3401;
                        _3535 = _3536;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3401;
                frontier_phi_60_61_ladder_1 = _3399;
                frontier_phi_60_61_ladder_2 = _3395;
                frontier_phi_60_61_ladder_3 = _3393;
                frontier_phi_60_61_ladder_4 = _3391;
                frontier_phi_60_61_ladder_5 = _3397;
            }
            else
            {
                frontier_phi_60_61_ladder = _3288;
                frontier_phi_60_61_ladder_1 = _3286;
                frontier_phi_60_61_ladder_2 = _3282;
                frontier_phi_60_61_ladder_3 = _3280;
                frontier_phi_60_61_ladder_4 = _3278;
                frontier_phi_60_61_ladder_5 = _3284;
            }
            _3390 = frontier_phi_60_61_ladder_4;
            _3392 = frontier_phi_60_61_ladder_3;
            _3394 = frontier_phi_60_61_ladder_2;
            _3396 = frontier_phi_60_61_ladder_5;
            _3398 = frontier_phi_60_61_ladder_1;
            _3400 = frontier_phi_60_61_ladder;
        }
        float _3405 = isnan(1.0) ? _1208 : (isnan(_1208) ? 1.0 : min(_1208, 1.0));
        _3211 = (_3405 * _3396) + _2742;
        _3213 = (_3405 * _3398) + _2744;
        _3215 = (_3405 * _3400) + _2746;
        _3217 = ((_3390 * 0.039999999105930328369140625) * _3405) + _3065;
        _3219 = ((_3392 * 0.039999999105930328369140625) * _3405) + _3067;
        _3221 = ((_3394 * 0.039999999105930328369140625) * _3405) + _3069;
    }
    else
    {
        _3211 = _2742;
        _3213 = _2744;
        _3215 = _2746;
        _3217 = _3065;
        _3219 = _3067;
        _3221 = _3069;
    }
    float _5201 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5212 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5223 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    uint _3241 = _289 + 6u;
    float _3249 = _1145 / cbSceneParam._m0[86u].x;
    float _3250 = _1146 / cbSceneParam._m0[86u].y;
    vec4 _3264 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3249, _3250, (log2((isnan(cbSceneParam._m0[77u].w) ? _1079 : (isnan(_1079) ? cbSceneParam._m0[77u].w : min(_1079, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3266 = _3264.x;
    float _3267 = _3264.y;
    float _3268 = _3264.z;
    float _3269 = _3264.w;
    float _3340;
    float _3342;
    float _3344;
    float _3346;
    if (_1079 > cbSceneParam._m0[78u].w)
    {
        float _3303 = isnan(_1079) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1079 : min(cbSceneParam._m0[80u].w, _1079));
        float _3304 = _3303 / _1079;
        float _3315 = _3304 * _1130;
        float _3316 = _1131 * _3304;
        float _3317 = (-0.0) - _3316;
        float _3318 = _3304 * _1132;
        float _3320 = (cbSceneParam._m0[77u].w * _3317) / _3303;
        float _3321 = _3320 + cbSceneParam._m0[79u].w;
        float _3322 = cbSceneParam._m0[79u].w - _3316;
        float _3328 = sqrt(((_3315 * _3315) + (_3316 * _3316)) + (_3318 * _3318));
        float _3331 = (1.0 - (cbSceneParam._m0[77u].w / _3303)) * _3328;
        float _3336 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3338 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3491;
        if (abs((_3317 - _3320) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3491 = ((((_3321 > 0.0) ? exp2(_3336 * _3321) : (2.0 - exp2(_3338 * _3321))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3331;
        }
        else
        {
            float _3451 = 1.0 / cbSceneParam._m0[80u].x;
            float _3452 = isnan(_3322) ? _3321 : (isnan(_3321) ? _3322 : max(_3321, _3322));
            float _3453 = isnan(_3322) ? _3321 : (isnan(_3321) ? _3322 : min(_3321, _3322));
            float _3462 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : min(_3452, 0.0));
            float _3463 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : min(_3453, 0.0));
            _3491 = ((abs(_3328 / _3317) * cbSceneParam._m0[80u].y) * ((((_3462 - _3463) * 2.0) - ((exp2(_3336 * (isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0)))) - exp2(_3336 * (isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))))) * _3451)) - ((exp2(_3338 * _3462) - exp2(_3338 * _3463)) * _3451))) + (_3331 * cbSceneParam._m0[80u].z);
        }
        vec4 _3493 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3249, _3250, 1.0), 0.0);
        float _3502 = exp2((_3491 * (-1.44269502162933349609375)) * (1.0 - _3493.w));
        float _3503 = log2(_3502);
        float _3519 = log2(_3269);
        _3340 = (exp2(_3519 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].x)) * _3493.x) / cbSceneParam._m0[78u].x)) + _3266;
        _3342 = (exp2(_3519 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].y)) * _3493.y) / cbSceneParam._m0[78u].y)) + _3267;
        _3344 = (exp2(_3519 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].z)) * _3493.z) / cbSceneParam._m0[78u].z)) + _3268;
        _3346 = _3502 * _3269;
    }
    else
    {
        _3340 = _3266;
        _3342 = _3267;
        _3344 = _3268;
        _3346 = _3269;
    }
    float _3358 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3359 = _3358 == 3.0;
    float _3360 = log2(_3346);
    float _3367 = exp2(_3360 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3211 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1208))) + ((_3217 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3368 = exp2(_3360 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0))) * (_3213 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1208))) + ((_3219 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3369 = exp2(_3360 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3215 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1208))) + ((_3221 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3378 = (_3358 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3378 * (_3359 ? _3367 : (_3367 + (cbSceneParam._m0[72u].w * _3340)));
    SV_Target.y = _3378 * (_3359 ? _3368 : (_3368 + (cbSceneParam._m0[72u].w * _3342)));
    SV_Target.z = _3378 * (_3359 ? _3369 : (_3369 + (cbSceneParam._m0[72u].w * _3344)));
    SV_Target.w = cbInstanceData._m0[_3241].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3241].w;
}


