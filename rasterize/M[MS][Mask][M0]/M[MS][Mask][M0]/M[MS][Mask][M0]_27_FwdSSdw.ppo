#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1288;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3618 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _434 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_421 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315);
    float _437 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_421 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316);
    float _440 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_421 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317);
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    float _488 = ((_458.z - _479) * _421) + _479;
    float _491 = ((((_458.x - _477) * _421) + _477) * 2.0) + (-1.0);
    float _493 = ((((_458.y - _478) * _421) + _478) * 2.0) + (-1.0);
    float _494 = dot(vec2(_491, _493), vec2(_491, _493));
    float _3629 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _527 = (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _528 = (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _531 = fma(_499, _235, fma(_528, _242, _527 * _228));
    float _534 = fma(_499, _236, fma(_528, _243, _527 * _229));
    float _537 = fma(_499, _237, fma(_528, _244, _527 * _230));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _577 = (cbMtdParam._m0[19u].x + dot(vec4(_541 * _531, _541 * _534, _541 * _537, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_570 - _571) * cbMtdParam._m0[24u].w) + _571) * cbMtdParam._m0[21u].z);
    float _3640 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _580 = (-0.0) - cbMtdParam._m0[24u].x;
    float _582 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
    float _590 = _578 - ((_578 * TEXCOORD_8.x) * _583);
    float _591 = _578 - ((_578 * TEXCOORD_8.y) * _583);
    float _592 = _578 - ((_578 * TEXCOORD_8.z) * _583);
    float _599 = (_590 * (cbMtdParam._m0[17u].x - _434)) + _434;
    float _600 = (_591 * (cbMtdParam._m0[17u].y - _437)) + _437;
    float _601 = (_592 * (cbMtdParam._m0[17u].z - _440)) + _440;
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _644 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_615 - _616) * cbMtdParam._m0[24u].y) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3661 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _653 = ((((cbMtdParam._m0[10u].x - _599) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _645) + _599;
    float _654 = ((((cbMtdParam._m0[10u].y - _600) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _645) + _600;
    float _655 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _601)) * _645) + _601;
    float _659 = (cbMtdParam._m0[19u].w * (_515.z - _488)) + _488;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _680 = (_673.x * 2.0) + (-1.0);
    float _681 = (_673.y * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3672 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _690 = ((_673.z - _659) * _590) + _659;
    float _693 = ((cbMtdParam._m0[23u].y - _690) * _645) + _690;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _718 = (_712.x * 2.0) + (-1.0);
    float _719 = (_712.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _3683 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _735 = ((sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) - _499) * _592) + _499;
    float _738 = (((_680 - _527) * _590) + _527) + (cbMtdParam._m0[21u].x * _527);
    float _739 = (((_681 - _528) * _591) + _528) + (cbMtdParam._m0[21u].x * _528);
    float _750 = (((_718 - _738) + (_738 * cbMtdParam._m0[22u].z)) * _645) + _738;
    float _751 = (((_719 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _645) + _739;
    float _752 = (_645 * (sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) - _735)) + _735;
    float _754 = cbMtdParam._m0[22u].x + _515.w;
    float _757 = fma(_752, _235, fma(_751, _242, _750 * _228));
    float _760 = fma(_752, _236, fma(_751, _243, _750 * _229));
    float _763 = fma(_752, _237, fma(_751, _244, _750 * _230));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _3694 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _771 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3716 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3727 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3738 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _876 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _879 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _893 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3749 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_768, _769, _770), vec3(_846, _847, _848));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _768) - _846;
    float _926 = (_921 * _769) - _847;
    float _927 = (_921 * _770) - _848;
    float _931 = abs(dot(vec3(_846, _847, _848), vec3(_768, _769, _770)));
    float _3782 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_771);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1287;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1012 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1016 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1020 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1045 = _978 + _768;
        float _1046 = _982 + _769;
        float _1047 = _986 + _770;
        float _1057 = fma(_1047, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045)) - _1012;
        float _1058 = fma(_1047, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045)) - _1016;
        float _1059 = fma(_1047, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045)) - _1020;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1012 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1016 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[34u].z) + ((((((_1020 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1115 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1081.x + (-0.5));
        float _1117 = _1115 * (_1081.y + (-0.5));
        float _1118 = _1115 * (_1081.z + (-0.5));
        float _1125 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1088.x + (-0.5));
        float _1127 = _1125 * (_1088.y + (-0.5));
        float _1128 = _1125 * (_1088.z + (-0.5));
        float _1135 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1095.x + (-0.5));
        float _1137 = _1135 * (_1095.y + (-0.5));
        float _1138 = _1135 * (_1095.z + (-0.5));
        float _1145 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1102.x + (-0.5));
        float _1147 = _1145 * (_1102.y + (-0.5));
        float _1148 = _1145 * (_1102.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1169 = (dot(vec3(_768, _769, _770), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1179 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3830 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1181 + 1.0))) + _1186) * _1149;
        float _1196 = _1117 * 0.5;
        float _1197 = _1127 * 0.5;
        float _1198 = _1137 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_768, _769, _770), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3863 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1223 + 1.0))) + _1228) * _1150;
        float _1238 = _1118 * 0.5;
        float _1239 = _1128 * 0.5;
        float _1240 = _1138 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_768, _769, _770), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3896 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1265 + 1.0))) + _1270) * _1151;
        _1287 = _1118;
        _1289 = _1117;
        _1290 = _1116;
        _1291 = _1128;
        _1292 = _1127;
        _1293 = _1126;
        _1294 = _1138;
        _1295 = _1137;
        _1296 = _1136;
        _1297 = _1151;
        _1298 = _1150;
        _1299 = _1149;
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _1288;
        _1289 = _1288;
        _1290 = _1288;
        _1291 = _1288;
        _1292 = _1288;
        _1293 = _1288;
        _1294 = _1288;
        _1295 = _1288;
        _1296 = _1288;
        _1297 = _1288;
        _1298 = _1288;
        _1299 = _1288;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1327 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1331 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1335 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1358 = _978 + _768;
        float _1359 = _982 + _769;
        float _1360 = _986 + _770;
        float _1370 = fma(_1360, cbModelParam._m0[30u].z, fma(_1359, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1358)) - _1327;
        float _1371 = fma(_1360, cbModelParam._m0[31u].z, fma(_1359, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1358)) - _1331;
        float _1372 = fma(_1360, cbModelParam._m0[32u].z, fma(_1359, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1358)) - _1335;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1327 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1331 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[35u].z) + ((((((_1335 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1426 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1393.x + (-0.5));
        float _1428 = _1426 * (_1393.y + (-0.5));
        float _1429 = _1426 * (_1393.z + (-0.5));
        float _1436 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1400.x + (-0.5));
        float _1438 = _1436 * (_1400.y + (-0.5));
        float _1439 = _1436 * (_1400.z + (-0.5));
        float _1446 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1407.x + (-0.5));
        float _1448 = _1446 * (_1407.y + (-0.5));
        float _1449 = _1446 * (_1407.z + (-0.5));
        float _1456 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1414.x + (-0.5));
        float _1458 = _1456 * (_1414.y + (-0.5));
        float _1459 = _1456 * (_1414.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_768, _769, _770), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _3959 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1490 + 1.0))) + _1495) * _1460;
        float _1505 = _1428 * 0.5;
        float _1506 = _1438 * 0.5;
        float _1507 = _1448 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_768, _769, _770), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _3992 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1532 + 1.0))) + _1537) * _1461;
        float _1547 = _1429 * 0.5;
        float _1548 = _1439 * 0.5;
        float _1549 = _1449 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_768, _769, _770), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4025 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1574 + 1.0))) + _1579) * _1462;
        _1596 = _1429;
        _1597 = _1428;
        _1598 = _1427;
        _1599 = _1439;
        _1600 = _1438;
        _1601 = _1437;
        _1602 = _1449;
        _1603 = _1448;
        _1604 = _1447;
        _1605 = _1462;
        _1606 = _1461;
        _1607 = _1460;
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
    }
    else
    {
        _1596 = _1288;
        _1597 = _1288;
        _1598 = _1288;
        _1599 = _1288;
        _1600 = _1288;
        _1601 = _1288;
        _1602 = _1288;
        _1603 = _1288;
        _1604 = _1288;
        _1605 = _1288;
        _1606 = _1288;
        _1607 = _1288;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1300)) + _1300;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1301)) + _1301;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1302)) + _1302;
    float _1643 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1620));
    float _1664 = _925 * 0.5;
    float _1665 = _926 * 0.5;
    float _1666 = _927 * 0.5;
    float _1667 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1670 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1673 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1707;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1680 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1287, _1291, _1294, _1297));
        float _1684 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1688 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1695 = dot(vec4(cbModelParam._m0[39u]), vec4(_1664, _1665, _1666, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1718;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1709 = dot(vec4(cbModelParam._m0[40u]), vec4(_1664, _1665, _1666, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1722 = (_1718 * cbModelParam._m0[1u].x) + (_1707 * (1.0 - cbModelParam._m0[1u].x));
    float _1732 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1732 : min(cbModelParam._m0[25u].z, _1732));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1795 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1798 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1826 = frontier_phi_14_12_ladder;
        }
        float _2048;
        if (_1795 > 0.0)
        {
            _2048 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2048 = frontier_phi_23_19_ladder;
        }
        float _2294;
        if (_1798 > 0.0)
        {
            _2294 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2294 = frontier_phi_35_30_ladder;
        }
        float _2296 = isnan(_2048) ? _1826 : (isnan(_1826) ? _2048 : min(_1826, _2048));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1792) + _1781;
        float _2302 = (_2297 * _1795) + _1785;
        float _2303 = (_2297 * _1798) + _1789;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1733);
            frontier_phi_13_35_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_13_35_ladder_2;
        _1816 = frontier_phi_13_35_ladder_1;
        _1818 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1733);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1891 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1894 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2053;
        if (_1888 > 0.0)
        {
            _2053 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2053 = frontier_phi_25_21_ladder;
        }
        float _2321;
        if (_1891 > 0.0)
        {
            _2321 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2321 = frontier_phi_37_32_ladder;
        }
        float _2526;
        if (_1894 > 0.0)
        {
            _2526 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2526 = frontier_phi_46_43_ladder;
        }
        float _2528 = isnan(_2321) ? _2053 : (isnan(_2053) ? _2321 : min(_2053, _2321));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1888) + _1877;
        float _2534 = (_2529 * _1891) + _1881;
        float _2535 = (_2529 * _1894) + _1885;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_22_46_ladder = _2734.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2734.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_22_46_ladder_2;
        _1915 = frontier_phi_22_46_ladder_1;
        _1917 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1823);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    vec4 _1949 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_854, _855));
    float _1951 = _1949.w;
    float _1963 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1951);
    float _1964 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1951);
    float _1965 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1951);
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _917 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2007 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2011 = _1971 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_768, _769, _770));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_768, _769, _770));
    float _4161 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4172 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1963) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1964) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1965) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2047)
    {
        _2058 = _2039;
        _2060 = _2040;
        _2062 = _2041;
    }
    else
    {
        uint _2066 = _1971 + 6u;
        float _2082 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4183 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2085 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2058 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _2039;
        _2060 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _2040;
        _2062 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _2041;
    }
    bool _2065 = _2045.y == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2065)
    {
        _2103 = _2058;
        _2105 = _2060;
        _2107 = _2062;
    }
    else
    {
        uint _2265 = _1971 + 7u;
        float _2281 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4199 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2284 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2103 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2058;
        _2105 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2060;
        _2107 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2062;
    }
    uint _2110 = _1971 + 8u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _771) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1971].x + _846;
    float _2126 = cbLight._m0[_1971].y + _847;
    float _2127 = cbLight._m0[_1971].z + _848;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_1971].xyz));
    float _4215 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2139 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2140 = dot(vec3(_768, _769, _770), vec3(_2132, _2133, _2134));
    float _4237 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2132, _2133, _2134));
    float _4248 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2124 * _2124;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2164 = 1.0 - _2124;
    float _2175 = (0.5 / (((_2139 * ((_2138 * _2164) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2164) + _2124) * _2138))) * _2138;
    float _4259 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    uint _2191 = _1971 + 9u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _771) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2011].x + _846;
    float _2205 = cbLight._m0[_2011].y + _847;
    float _2206 = cbLight._m0[_2011].z + _848;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2011].xyz));
    float _4270 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2218 = dot(vec3(_768, _769, _770), vec3(_2211, _2212, _2213));
    float _4281 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2211, _2212, _2213));
    float _4292 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2203 * _2203;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2240 = 1.0 - _2203;
    float _2250 = (0.5 / (((_2139 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2240) + _2203) * _2217))) * _2217;
    float _4303 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    float _2262 = (((_2239 * cbLight._m0[_2191].x) * _2252) * _1994) + ((((cbLight._m0[_2110].x * _1963) * _2163) * _2177) * _2007);
    float _2263 = (((_2239 * cbLight._m0[_2191].y) * _2252) * _1994) + ((((cbLight._m0[_2110].y * _1964) * _2163) * _2177) * _2007);
    float _2264 = (((_2239 * cbLight._m0[_2191].z) * _2252) * _1994) + ((((cbLight._m0[_2110].z * _1965) * _2163) * _2177) * _2007);
    float _2326;
    float _2328;
    float _2330;
    if (_2047)
    {
        _2326 = _2262;
        _2328 = _2263;
        _2330 = _2264;
    }
    else
    {
        uint _2332 = _1971 + 2u;
        uint _2336 = _1971 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _771) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _846;
        float _2353 = cbLight._m0[_2332].y + _847;
        float _2354 = cbLight._m0[_2332].z + _848;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2332].xyz));
        float _4314 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2366 = dot(vec3(_768, _769, _770), vec3(_2359, _2360, _2361));
        float _4325 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4336 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2388 = 1.0 - _2351;
        float _2398 = (0.5 / (((_2139 * ((_2365 * _2388) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2388) + _2351) * _2365))) * _2365;
        float _4347 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2326 = (((_2387 * cbLight._m0[_2336].x) * _2400) * _2401) + _2262;
        _2328 = (((_2387 * cbLight._m0[_2336].y) * _2400) * _2401) + _2263;
        _2330 = (((_2387 * cbLight._m0[_2336].z) * _2400) * _2401) + _2264;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2065)
    {
        _2436 = _2326;
        _2438 = _2328;
        _2440 = _2330;
    }
    else
    {
        uint _2447 = _1971 + 3u;
        uint _2451 = _1971 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _771) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _846;
        float _2468 = cbLight._m0[_2447].y + _847;
        float _2469 = cbLight._m0[_2447].z + _848;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2447].xyz));
        float _4363 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2481 = dot(vec3(_768, _769, _770), vec3(_2474, _2475, _2476));
        float _4374 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4385 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2503 = 1.0 - _2466;
        float _2513 = (0.5 / (((_2139 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2503) + _2466) * _2480))) * _2480;
        float _4396 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2436 = (((_2502 * cbLight._m0[_2451].x) * _2515) * _2516) + _2326;
        _2438 = (((_2502 * cbLight._m0[_2451].y) * _2515) * _2516) + _2328;
        _2440 = (((_2502 * cbLight._m0[_2451].z) * _2515) * _2516) + _2330;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1969.y == 0u)
    {
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2591;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2591;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2591;
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2607)));
        float _2628 = (log2(_2594 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
        }
        else
        {
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2899)
                {
                    frontier_phi_61_pred = _2883;
                    frontier_phi_61_pred_1 = _2888;
                    frontier_phi_61_pred_2 = _2887;
                    frontier_phi_61_pred_3 = _2886;
                    frontier_phi_61_pred_4 = _2885;
                    frontier_phi_61_pred_5 = _2884;
                }
                else
                {
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    uint _3013;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2898;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3017 = uint(findLSB(_3013)) + (_2889 << 5u);
                        uint _3014 = (_3013 + 4294967295u) & _3013;
                        uint _3019 = _3017 * 48u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3039 = (_3017 * 48u) + 4u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3058 = (_3017 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        float _3073 = _3033.x - _2592;
                        float _3074 = _3033.y - _2593;
                        float _3075 = _3033.z - _2594;
                        float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                        float _3079 = inversesqrt(_3076);
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3083 = dot(vec3(_873, _876, _879), vec3(_3080, _3081, _3082));
                        float _3088 = 1.0 - (_3076 * _3033.w);
                        float _4422 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3090 = sqrt(_3076) * _3052.w;
                        float _3093 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3083) + _3094;
                        float _3100 = _3090 * _3090;
                        float _3104 = ((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3089) / ((_3100 * 0.699999988079071044921875) + 1.0);
                        float _3108 = (-0.0) - _2592;
                        float _3109 = (-0.0) - _2593;
                        float _3110 = (-0.0) - _2594;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3125 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                        float _3126 = 1.0 - _933;
                        float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                        float _3134 = _3133 * _3133;
                        float _3135 = _3134 * _3134;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3146 = dot(vec3(_873, _876, _879), vec3(_3115, _3116, _3117));
                        float _4438 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3150 = dot(vec3(_873, _876, _879), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                        float _4449 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                        float _3158 = _3093 * _3134;
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3083) + _3159;
                        float _4460 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3164 = 1.0 - _3134;
                        float _3174 = (0.5 / (((_3163 * ((_3149 * _3164) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3134) * _3149))) * _3163;
                        float _4471 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3185 = (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) / ((_3157 * _3157) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125))) * _3089;
                        _2942 = (_3104 * _3052.x) + _3010;
                        _2943 = (_3104 * _3052.y) + _3011;
                        _2944 = (_3104 * _3052.z) + _3012;
                        _2939 = (_3185 * _3069.x) + _3007;
                        _2940 = (_3185 * _3069.y) + _3008;
                        _2941 = (_3185 * _3069.z) + _3009;
                        if (_3014 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _3014;
                        }
                    }
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2944;
                    frontier_phi_61_pred_2 = _2943;
                    frontier_phi_61_pred_3 = _2942;
                    frontier_phi_61_pred_4 = _2941;
                    frontier_phi_61_pred_5 = _2940;
                }
                _2740 = frontier_phi_61_pred;
                _2750 = frontier_phi_61_pred_1;
                _2748 = frontier_phi_61_pred_2;
                _2746 = frontier_phi_61_pred_3;
                _2744 = frontier_phi_61_pred_4;
                _2742 = frontier_phi_61_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2740;
                    _2884 = _2742;
                    _2885 = _2744;
                    _2886 = _2746;
                    _2887 = _2748;
                    _2888 = _2750;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
        }
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.z;
        uint _2756 = (_2754 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2756) & _2638) == 0u)
        {
            _2851 = _2739;
            _2853 = _2741;
            _2855 = _2743;
            _2857 = _2745;
            _2859 = _2747;
            _2861 = _2749;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
            float _2877 = _2876 * _2592;
            float _2878 = _2876 * _2593;
            float _2879 = _2876 * _2594;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2756 < ((_2754 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2990 = _2739;
                float _2991 = _2741;
                float _2992 = _2743;
                float _2993 = _2745;
                float _2994 = _2747;
                float _2995 = _2749;
                uint _2996 = _2756;
                uint _3005;
                bool _3006;
                for (;;)
                {
                    _3005 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                    _3006 = _3005 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3006)
                    {
                        frontier_phi_67_pred = _2993;
                        frontier_phi_67_pred_1 = _2994;
                        frontier_phi_67_pred_2 = _2995;
                        frontier_phi_67_pred_3 = _2992;
                        frontier_phi_67_pred_4 = _2991;
                        frontier_phi_67_pred_5 = _2990;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        uint _3209 = _3005;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3294;
                        float _3340;
                        bool _3341;
                        for (;;)
                        {
                            uint _3220 = ((_2996 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3220 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3220 * 40u) + 24u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3315 = (_3220 * 40u) + 28u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3340 = fma(_2594, _3328.z, fma(_2593, _3328.y, _3328.x * _2592)) + _3328.w;
                            _3341 = !((fma(_2594, _3309.z, fma(_2593, _3309.y, _3309.x * _2592)) + _3309.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3341)
                            {
                                float _3368 = _3235.x - _2592;
                                float _3369 = _3235.y - _2593;
                                float _3370 = _3235.z - _2594;
                                float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                                float _3374 = inversesqrt(_3371);
                                float _3375 = _3374 * _3368;
                                float _3376 = _3374 * _3369;
                                float _3377 = _3374 * _3370;
                                float _3381 = 1.0 - (_3371 / (_3236 * _3236));
                                float _4482 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3386 = sqrt(_3371) * _3251.w;
                                float _3388 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                                float _3389 = _3388 * _3388;
                                float _3392 = ((1.0 - _3389) * dot(vec3(_3375, _3376, _3377), vec3(_873, _876, _879))) + _3389;
                                float _3395 = _3386 * _3386;
                                float _3399 = (fma(_2594, _3278.z, fma(_2593, _3278.y, _3278.x * _2592)) + _3278.w) / _3340;
                                float _3400 = (fma(_2594, _3294.z, fma(_2593, _3294.y, _3294.x * _2592)) + _3294.w) / _3340;
                                float _3404 = 1.0 - dot(vec2(_3399, _3400), vec2(_3399, _3400));
                                float _4498 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3406 = _3405 * (((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3382) / ((_3395 * 0.699999988079071044921875) + 1.0));
                                float _3418 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                                float _3419 = 1.0 - _933;
                                float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                                float _3427 = _3426 * _3426;
                                float _3428 = _3427 * _3427;
                                float _3429 = _3375 - _2877;
                                float _3430 = _3376 - _2878;
                                float _3431 = _3377 - _2879;
                                float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                                float _3439 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4509 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3443 = dot(vec3(_873, _876, _879), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                                float _4520 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                                float _3451 = _3388 * _3427;
                                float _3452 = _3451 * _3451;
                                float _3458 = ((1.0 - _3452) * dot(vec3(_873, _876, _879), vec3(_3375, _3376, _3377))) + _3452;
                                float _4531 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3460 = 1.0 - _3427;
                                float _3470 = (0.5 / (((_3459 * ((_3442 * _3460) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3427) * _3442))) * _3459;
                                float _4542 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3480 = (_3405 * _3382) * (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3450 * _3450) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3480 * _3263.x;
                                frontier_phi_73_pred_1 = _3480 * _3263.y;
                                frontier_phi_73_pred_2 = _3406 * _3251.z;
                                frontier_phi_73_pred_3 = _3406 * _3251.y;
                                frontier_phi_73_pred_4 = _3406 * _3251.x;
                                frontier_phi_73_pred_5 = _3480 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3484 = frontier_phi_73_pred;
                            _3485 = frontier_phi_73_pred_1;
                            _3489 = frontier_phi_73_pred_2;
                            _3488 = frontier_phi_73_pred_3;
                            _3487 = frontier_phi_73_pred_4;
                            _3486 = frontier_phi_73_pred_5;
                            _3193 = _3487 + _3206;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3190 = _3484 + _3203;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3193;
                        frontier_phi_67_pred_1 = _3194;
                        frontier_phi_67_pred_2 = _3195;
                        frontier_phi_67_pred_3 = _3192;
                        frontier_phi_67_pred_4 = _3191;
                        frontier_phi_67_pred_5 = _3190;
                    }
                    _2858 = frontier_phi_67_pred;
                    _2860 = frontier_phi_67_pred_1;
                    _2862 = frontier_phi_67_pred_2;
                    _2856 = frontier_phi_67_pred_3;
                    _2854 = frontier_phi_67_pred_4;
                    _2852 = frontier_phi_67_pred_5;
                    uint _2997 = _2996 + 1u;
                    if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2990 = _2852;
                        _2991 = _2854;
                        _2992 = _2856;
                        _2993 = _2858;
                        _2994 = _2860;
                        _2995 = _2862;
                        _2996 = _2997;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2860;
                frontier_phi_55_56_ladder_1 = _2862;
                frontier_phi_55_56_ladder_2 = _2858;
                frontier_phi_55_56_ladder_3 = _2856;
                frontier_phi_55_56_ladder_4 = _2854;
                frontier_phi_55_56_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_55_56_ladder = _2747;
                frontier_phi_55_56_ladder_1 = _2749;
                frontier_phi_55_56_ladder_2 = _2745;
                frontier_phi_55_56_ladder_3 = _2743;
                frontier_phi_55_56_ladder_4 = _2741;
                frontier_phi_55_56_ladder_5 = _2739;
            }
            _2851 = frontier_phi_55_56_ladder_5;
            _2853 = frontier_phi_55_56_ladder_4;
            _2855 = frontier_phi_55_56_ladder_3;
            _2857 = frontier_phi_55_56_ladder_2;
            _2859 = frontier_phi_55_56_ladder;
            _2861 = frontier_phi_55_56_ladder_1;
        }
        float _2866 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2651 = (_2866 * _2857) + _2103;
        _2653 = (_2866 * _2859) + _2105;
        _2655 = (_2866 * _2861) + _2107;
        _2657 = ((_2851 * 0.039999999105930328369140625) * _2866) + _2436;
        _2659 = ((_2853 * 0.039999999105930328369140625) * _2866) + _2438;
        _2661 = ((_2855 * 0.039999999105930328369140625) * _2866) + _2440;
    }
    else
    {
        _2651 = _2103;
        _2653 = _2105;
        _2655 = _2107;
        _2657 = _2436;
        _2659 = _2438;
        _2661 = _2440;
    }
    float _4558 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4569 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4580 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    uint _2681 = _247 + 6u;
    float _2689 = _854 / cbSceneParam._m0[86u].x;
    float _2690 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2764 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2765 = _2764 / _789;
        float _2776 = _2765 * _839;
        float _2777 = _840 * _2765;
        float _2778 = (-0.0) - _2777;
        float _2779 = _2765 * _841;
        float _2781 = (cbSceneParam._m0[77u].w * _2778) / _2764;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2777;
        float _2789 = sqrt(((_2776 * _2776) + (_2777 * _2777)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2764)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2778 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2914 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2952 = ((abs(_2789 / _2778) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2799 * _2923) - exp2(_2799 * _2924)) * _2912))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2709);
        _2801 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2803 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2805 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2807 = _2963 * _2709;
    }
    else
    {
        _2801 = _2706;
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
    }
    float _2819 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2820 = _2819 == 3.0;
    float _2821 = log2(_2807);
    float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2651 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _917))) + ((_2657 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2653 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _917))) + ((_2659 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2655 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _917))) + ((_2661 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2839 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2839 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
    SV_Target.y = _2839 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.z = _2839 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.w = cbInstanceData._m0[_2681].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
}


