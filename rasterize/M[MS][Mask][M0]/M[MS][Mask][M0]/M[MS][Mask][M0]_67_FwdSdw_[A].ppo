#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1414;
float _4056;
float _4057;
float _4058;
float _4059;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _406 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].z) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4068 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _445 = (_438 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _446 = (_438 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _447 = (_438 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _486 = _484.x;
    float _496 = dot(vec4(_486, _484.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _510 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_486 - _496) * cbMtdParam._m0[24u].z) + _496) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4079 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _524 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_511 * ((_464.x * cbMtdParam._m0[13u].x) - _445)) + _445);
    float _527 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_511 * ((_464.y * cbMtdParam._m0[13u].y) - _446)) + _446);
    float _530 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_511 * ((_464.z * cbMtdParam._m0[13u].z) - _447)) + _447);
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _569 = _565.z;
    float _576 = ((_548.x - _567) * _438) + _567;
    float _577 = ((_548.y - _568) * _438) + _568;
    float _578 = ((_548.z - _569) * _438) + _569;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _603 = ((_590.z - _578) * _511) + _578;
    float _606 = ((((_590.x - _576) * _511) + _576) * 2.0) + (-1.0);
    float _608 = ((((_590.y - _577) * _511) + _577) * 2.0) + (-1.0);
    float _609 = dot(vec2(_606, _608), vec2(_606, _608));
    float _4090 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _614 = sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _662 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _665 = ((isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : min(_662, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _674 = (_665 - ((((((_655 - _656) * cbMtdParam._m0[24u].w) + _656) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _665))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4111 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _682 = (_675 * (cbMtdParam._m0[17u].x - _524)) + _524;
    float _683 = (_675 * (cbMtdParam._m0[17u].y - _527)) + _527;
    float _684 = (_675 * (cbMtdParam._m0[17u].z - _530)) + _530;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _726 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_698 - _699) * cbMtdParam._m0[24u].y) + _699) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4122 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _727 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _735 = ((((cbMtdParam._m0[10u].x - _682) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _727) + _682;
    float _736 = ((((cbMtdParam._m0[10u].y - _683) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _727) + _683;
    float _737 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _684)) * _727) + _684;
    float _741 = (cbMtdParam._m0[19u].w * (_628.z - _603)) + _603;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _762 = (_755.x * 2.0) + (-1.0);
    float _763 = (_755.y * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4133 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _772 = (_675 * (_755.z - _741)) + _741;
    float _775 = ((cbMtdParam._m0[23u].y - _772) * _727) + _772;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _800 = (_794.x * 2.0) + (-1.0);
    float _801 = (_794.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _4144 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _810 = (((_628.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _606;
    float _811 = (((_628.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _608;
    float _823 = (((_762 - _810) + (cbMtdParam._m0[21u].x * _810)) * _675) + _810;
    float _824 = (((_763 - _811) + (cbMtdParam._m0[21u].x * _811)) * _675) + _811;
    float _825 = (_675 * (sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) - _614)) + _614;
    float _836 = (((_800 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _727) + _823;
    float _837 = (((_801 - _824) + (_824 * cbMtdParam._m0[22u].z)) * _727) + _824;
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) - _825) * _727) + _825;
    float _840 = cbMtdParam._m0[22u].x + _628.w;
    float _843 = fma(_838, _248 * NORMAL.x, fma(_837, _255 * TANGENT.x, (_241 * _233) * _836));
    float _846 = fma(_838, _248 * NORMAL.y, fma(_837, _255 * TANGENT.y, (_241 * _234) * _836));
    float _849 = fma(_838, _248 * NORMAL.z, fma(_837, _255 * TANGENT.z, (_241 * _235) * _836));
    float _853 = inversesqrt(dot(vec3(_843, _846, _849), vec3(_843, _846, _849)));
    float _854 = _853 * _843;
    float _855 = _853 * _846;
    float _856 = _853 * _849;
    float _4155 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _857 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4177 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4188 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4199 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _875 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    vec4 _939 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _941 = _939.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1095 = sqrt(((_925 * _925) + (_926 * _926)) + (_927 * _927));
        float _1101 = (cbMatDynParam._m0[5u].x * _1095) + cbMatDynParam._m0[5u].y;
        float _4210 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1106 = (cbMatDynParam._m0[5u].z * _1095) + cbMatDynParam._m0[5u].w;
        float _4221 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) - _1102)) + _1102) < ((_941 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_856, cbSceneParam._m0[5u].z, fma(_855, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _854));
    float _974 = fma(_856, cbSceneParam._m0[6u].z, fma(_855, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _854));
    float _977 = fma(_856, cbSceneParam._m0[7u].z, fma(_855, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _854));
    uint _990 = _261 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4232 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1015 = ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * TEXCOORD_5.w) * _1011.x;
    float _1016 = dot(vec3(_854, _855, _856), vec3(_932, _933, _934));
    float _1019 = _1016 * 2.0;
    float _1023 = (_1019 * _854) - _932;
    float _1024 = (_1019 * _855) - _933;
    float _1025 = (_1019 * _856) - _934;
    float _1029 = abs(dot(vec3(_932, _933, _934), vec3(_854, _855, _856)));
    float _4265 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1031 = sqrt(_857);
    float _1044 = exp2((_1031 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1031 * 3.0));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1084, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076));
        float _1142 = fma(_1084, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076));
        float _1146 = fma(_1084, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076));
        float _1171 = _1076 + _854;
        float _1172 = _1080 + _855;
        float _1173 = _1084 + _856;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_854, _855, _856), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4313 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_854, _855, _856), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4346 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_854, _855, _856), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4379 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1455 = fma(_1084, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076));
        float _1459 = fma(_1084, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076));
        float _1463 = fma(_1084, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076));
        float _1486 = _1076 + _854;
        float _1487 = _1080 + _855;
        float _1488 = _1084 + _856;
        float _1498 = fma(_1488, cbModelParam._m0[30u].z, fma(_1487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1486)) - _1455;
        float _1499 = fma(_1488, cbModelParam._m0[31u].z, fma(_1487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1486)) - _1459;
        float _1500 = fma(_1488, cbModelParam._m0[32u].z, fma(_1487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1486)) - _1463;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1455 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1459 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[35u].z) + ((((((_1463 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1554 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1521.x + (-0.5));
        float _1556 = _1554 * (_1521.y + (-0.5));
        float _1557 = _1554 * (_1521.z + (-0.5));
        float _1564 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1528.x + (-0.5));
        float _1566 = _1564 * (_1528.y + (-0.5));
        float _1567 = _1564 * (_1528.z + (-0.5));
        float _1574 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1535.x + (-0.5));
        float _1576 = _1574 * (_1535.y + (-0.5));
        float _1577 = _1574 * (_1535.z + (-0.5));
        float _1584 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1542.x + (-0.5));
        float _1586 = _1584 * (_1542.y + (-0.5));
        float _1587 = _1584 * (_1542.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_854, _855, _856), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4442 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1618 + 1.0))) + _1623) * _1588;
        float _1633 = _1556 * 0.5;
        float _1634 = _1566 * 0.5;
        float _1635 = _1576 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_854, _855, _856), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4475 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1660 + 1.0))) + _1665) * _1589;
        float _1675 = _1557 * 0.5;
        float _1676 = _1567 * 0.5;
        float _1677 = _1577 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_854, _855, _856), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4486 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4497 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4508 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_1702 + 1.0))) + _1707) * _1590;
        _1724 = _1557;
        _1725 = _1556;
        _1726 = _1555;
        _1727 = _1567;
        _1728 = _1566;
        _1729 = _1565;
        _1730 = _1577;
        _1731 = _1576;
        _1732 = _1575;
        _1733 = _1590;
        _1734 = _1589;
        _1735 = _1588;
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    }
    else
    {
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = _1414;
        _1735 = _1414;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1426)) + _1426;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1427)) + _1427;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1428)) + _1428;
    float _1771 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1748));
    float _1792 = _1023 * 0.5;
    float _1793 = _1024 * 0.5;
    float _1794 = _1025 * 0.5;
    float _1795 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1798 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1801 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1835;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1808 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1812 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1816 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1823 = dot(vec4(cbModelParam._m0[39u]), vec4(_1792, _1793, _1794, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1846;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1837 = dot(vec4(cbModelParam._m0[40u]), vec4(_1792, _1793, _1794, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1850 = (_1846 * cbModelParam._m0[1u].x) + (_1835 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _857);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1909 = fma(_1084, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1076)) + cbModelParam._m0[13u].w;
        float _1913 = fma(_1084, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1076)) + cbModelParam._m0[14u].w;
        float _1917 = fma(_1084, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1076)) + cbModelParam._m0[15u].w;
        float _1920 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1923 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1926 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1954;
        if (_1920 > 0.0)
        {
            _1954 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1954 = frontier_phi_17_15_ladder;
        }
        float _2124;
        if (_1923 > 0.0)
        {
            _2124 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2124 = frontier_phi_26_22_ladder;
        }
        float _2419;
        if (_1926 > 0.0)
        {
            _2419 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2419 = frontier_phi_38_33_ladder;
        }
        float _2421 = isnan(_2124) ? _1954 : (isnan(_1954) ? _2124 : min(_1954, _2124));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1920) + _1909;
        float _2427 = (_2422 * _1923) + _1913;
        float _2428 = (_2422 * _1926) + _1917;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_16_38_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1942 = frontier_phi_16_38_ladder_2;
        _1944 = frontier_phi_16_38_ladder_1;
        _1946 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1861);
        _1942 = _1930.x * cbModelParam._m0[1u].y;
        _1944 = _1930.y * cbModelParam._m0[1u].y;
        _1946 = _1930.z * cbModelParam._m0[1u].y;
    }
    float _1950 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _857);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1950 : min(cbModelParam._m0[25u].w, _1950));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1084, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1076)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1084, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1076)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1084, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1076)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _2019 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _2022 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2129;
        if (_2016 > 0.0)
        {
            _2129 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2129 = frontier_phi_28_24_ladder;
        }
        float _2446;
        if (_2019 > 0.0)
        {
            _2446 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2446 = frontier_phi_40_35_ladder;
        }
        float _2773;
        if (_2022 > 0.0)
        {
            _2773 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2773 = frontier_phi_50_47_ladder;
        }
        float _2775 = isnan(_2446) ? _2129 : (isnan(_2129) ? _2446 : min(_2129, _2446));
        float _2776 = isnan(_2773) ? _2775 : (isnan(_2775) ? _2773 : min(_2775, _2773));
        float _2780 = (_2776 * _2016) + _2005;
        float _2781 = (_2776 * _2019) + _2009;
        float _2782 = (_2776 * _2022) + _2013;
        float _2783 = _2776 * 9.9999997473787516355514526367188e-05;
        float _2784 = (-1.0) - _2783;
        float _2786 = _2783 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2782 > _2786) || ((_2782 < _2784) || ((_2781 > _2786) || ((_2781 < _2784) || ((_2780 < _2784) || (_2780 > _2786))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2782, cbModelParam._m0[17u].z, fma(_2781, cbModelParam._m0[17u].y, _2780 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2782, cbModelParam._m0[18u].z, fma(_2781, cbModelParam._m0[18u].y, _2780 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2782, cbModelParam._m0[19u].z, fma(_2781, cbModelParam._m0[19u].y, _2780 * cbModelParam._m0[19u].x))), _1951);
            frontier_phi_25_50_ladder = _2900.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2900.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2900.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_25_50_ladder_2;
        _2043 = frontier_phi_25_50_ladder_1;
        _2045 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1951);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2057 = ((((1.0 - _1044) * ((_1031 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1044 * _1031)) * _1015;
    float _2058 = _2057 * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2059 = _2057 * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2060 = _2057 * ((cbModelParam._m0[1u].w * (_2045 - _1946)) + _1946);
    float _2063 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2115 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2116 = _2103 / _2115;
    float _2117 = _2107 / _2115;
    float _2118 = _2111 / _2115;
    float _2265;
    float _2266;
    float _2267;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2145 = ((uint(_2118 > cbSceneParam._m0[59u].y) + uint(_2118 > cbSceneParam._m0[59u].x)) + uint(_2118 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2146 = _2145 + 43u;
        uint _2154 = _2145 + 44u;
        uint _2162 = _2145 + 45u;
        uint _2170 = _2145 + 46u;
        float _2181 = fma(_2115, cbSceneParam._m0[_2146].w, fma(_2111, cbSceneParam._m0[_2146].z, fma(_2107, cbSceneParam._m0[_2146].y, _2103 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2115, cbSceneParam._m0[_2154].w, fma(_2111, cbSceneParam._m0[_2154].z, fma(_2107, cbSceneParam._m0[_2154].y, _2103 * cbSceneParam._m0[_2154].x)));
        float _2193 = fma(_2115, cbSceneParam._m0[_2170].w, fma(_2111, cbSceneParam._m0[_2170].z, fma(_2107, cbSceneParam._m0[_2170].y, _2103 * cbSceneParam._m0[_2170].x)));
        float _2198 = cbSceneParam._m0[33u].z * _2193;
        float _2200 = cbSceneParam._m0[33u].w * _2193;
        float _2203 = fma(_2115, cbSceneParam._m0[_2162].w, fma(_2111, cbSceneParam._m0[_2162].z, fma(_2107, cbSceneParam._m0[_2162].y, _2103 * cbSceneParam._m0[_2162].x))) / _2193;
        float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_2117 * _2117) + (_2116 * _2116)) + (_2118 * _2118))) * cbSceneParam._m0[33u].y;
        float _4634 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2258 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2181) / _2193, (_2200 + _2185) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 + _2181) / _2193, (_2185 - _2198) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 - _2198) / _2193, (_2185 - _2200) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 - _2200) / _2193, (_2198 + _2185) / _2193), _2203), 0.0)).x), vec4(0.25)));
        _2265 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
        _2266 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
        _2267 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2265 = 1.0;
        _2266 = 1.0;
        _2267 = 1.0;
    }
    float _2331;
    float _2333;
    float _2335;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2319 = fma(_2115, cbSceneParam._m0[63u].w, fma(_2111, cbSceneParam._m0[63u].z, fma(_2107, cbSceneParam._m0[63u].y, _2103 * cbSceneParam._m0[63u].x)));
        float _2320 = fma(_2115, cbSceneParam._m0[60u].w, fma(_2111, cbSceneParam._m0[60u].z, fma(_2107, cbSceneParam._m0[60u].y, _2103 * cbSceneParam._m0[60u].x))) / _2319;
        float _2321 = fma(_2115, cbSceneParam._m0[61u].w, fma(_2111, cbSceneParam._m0[61u].z, fma(_2107, cbSceneParam._m0[61u].y, _2103 * cbSceneParam._m0[61u].x))) / _2319;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2320 >= cbSceneParam._m0[64u].x) && (_2321 >= cbSceneParam._m0[64u].y)) && (_2320 <= cbSceneParam._m0[64u].z)) && (_2321 <= cbSceneParam._m0[64u].w))
        {
            float _2459 = fma(_2115, cbSceneParam._m0[62u].w, fma(_2111, cbSceneParam._m0[62u].z, fma(_2107, cbSceneParam._m0[62u].y, _2103 * cbSceneParam._m0[62u].x))) / _2319;
            float _2463 = isnan(cbSceneParam._m0[41u].w) ? _2459 : (isnan(_2459) ? cbSceneParam._m0[41u].w : max(_2459, cbSceneParam._m0[41u].w));
            float _2506 = (cbSceneParam._m0[33u].x - sqrt(((_2117 * _2117) + (_2116 * _2116)) + (_2118 * _2118))) * cbSceneParam._m0[33u].y;
            float _4650 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
            float _2513 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2320, cbSceneParam._m0[33u].w + _2321), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2320, _2321 - cbSceneParam._m0[33u].z), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2320 - cbSceneParam._m0[33u].z, _2321 - cbSceneParam._m0[33u].w), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2320 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2321), _2463), 0.0)).x), vec4(0.25)));
            float _2517 = 1.0 - (_2513 * cbSceneParam._m0[34u].x);
            float _2518 = 1.0 - (_2513 * cbSceneParam._m0[34u].y);
            float _2519 = 1.0 - (_2513 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
            frontier_phi_37_36_ladder_1 = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
            frontier_phi_37_36_ladder_2 = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
        }
        else
        {
            frontier_phi_37_36_ladder = _2267;
            frontier_phi_37_36_ladder_1 = _2266;
            frontier_phi_37_36_ladder_2 = _2265;
        }
        _2331 = frontier_phi_37_36_ladder_2;
        _2333 = frontier_phi_37_36_ladder_1;
        _2335 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2331 = _2265;
        _2333 = _2266;
        _2335 = _2267;
    }
    uvec4 _2340 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2342 = _2340.x * 14u;
    uint _2343 = _2342 + 13u;
    float _2350 = _1015 + (-1.0);
    float _2355 = (cbLight._m0[_2343].x * _2350) + 1.0;
    float _2356 = (cbLight._m0[_2343].y * _2350) + 1.0;
    float _2357 = (cbLight._m0[_2343].z * _2350) + 1.0;
    float _2358 = (cbLight._m0[_2343].w * _2350) + 1.0;
    uint _2359 = _2342 + 5u;
    float _2365 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
    uint _2369 = _2342 + 4u;
    float _2378 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
    uint _2382 = _2342 | 1u;
    float _2393 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_854, _855, _856));
    float _2396 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_854, _855, _856));
    float _4686 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _4697 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2401 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2403 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2410 = ((cbLight._m0[_2359].x * _2365) * _2403) + (((cbLight._m0[_2369].x * _2331) * _2378) * _2401);
    float _2411 = ((_2365 * cbLight._m0[_2359].y) * _2403) + (((cbLight._m0[_2369].y * _2333) * _2378) * _2401);
    float _2412 = ((_2365 * cbLight._m0[_2359].z) * _2403) + (((cbLight._m0[_2369].z * _2335) * _2378) * _2401);
    uvec4 _2416 = floatBitsToUint(cbLight._m0[_2342 + 12u]);
    bool _2418 = _2416.x == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2418)
    {
        _2520 = _2410;
        _2522 = _2411;
        _2524 = _2412;
    }
    else
    {
        uint _2528 = _2342 + 6u;
        float _2544 = (dot(vec3(cbLight._m0[_2342 + 2u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4708 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2547 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2520 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2410;
        _2522 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2411;
        _2524 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2412;
    }
    bool _2527 = _2416.y == 0u;
    float _2582;
    float _2584;
    float _2586;
    if (_2527)
    {
        _2582 = _2520;
        _2584 = _2522;
        _2586 = _2524;
    }
    else
    {
        uint _2744 = _2342 + 7u;
        float _2760 = (dot(vec3(cbLight._m0[_2342 + 3u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2761 = _2760 * _2760;
        float _4724 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2762 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2763 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2582 = (((cbLight._m0[_2744].x * 0.3183098733425140380859375) * _2762) * _2763) + _2520;
        _2584 = (((cbLight._m0[_2744].y * 0.3183098733425140380859375) * _2762) * _2763) + _2522;
        _2586 = (((cbLight._m0[_2744].z * 0.3183098733425140380859375) * _2762) * _2763) + _2524;
    }
    uint _2589 = _2342 + 8u;
    float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _857) * 0.949999988079071044921875);
    float _2603 = _2602 * _2602;
    float _2604 = cbLight._m0[_2342].x + _932;
    float _2605 = cbLight._m0[_2342].y + _933;
    float _2606 = cbLight._m0[_2342].z + _934;
    float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
    float _2611 = _2610 * _2604;
    float _2612 = _2610 * _2605;
    float _2613 = _2610 * _2606;
    float _2614 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2342].xyz));
    float _4740 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _4751 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2618 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2619 = dot(vec3(_854, _855, _856), vec3(_2611, _2612, _2613));
    float _4762 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2623 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2611, _2612, _2613));
    float _4773 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = _2603 * _2603;
    float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
    float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2643 = 1.0 - _2603;
    float _2654 = (0.5 / (((_2618 * ((_2617 * _2643) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2643) + _2603) * _2617))) * _2617;
    float _4784 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2656 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
    uint _2670 = _2342 + 9u;
    float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _857) * 0.949999988079071044921875);
    float _2682 = _2681 * _2681;
    float _2683 = cbLight._m0[_2382].x + _932;
    float _2684 = cbLight._m0[_2382].y + _933;
    float _2685 = cbLight._m0[_2382].z + _934;
    float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
    float _2690 = _2689 * _2683;
    float _2691 = _2689 * _2684;
    float _2692 = _2689 * _2685;
    float _2693 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2382].xyz));
    float _4795 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2697 = dot(vec3(_854, _855, _856), vec3(_2690, _2691, _2692));
    float _4806 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2701 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2690, _2691, _2692));
    float _4817 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2705 = _2682 * _2682;
    float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
    float _2718 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2719 = 1.0 - _2682;
    float _2729 = (0.5 / (((_2618 * ((_2696 * _2719) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2719) + _2682) * _2696))) * _2696;
    float _4828 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2731 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
    float _2741 = (((_2718 * cbLight._m0[_2670].x) * _2731) * _2365) + ((((cbLight._m0[_2589].x * _2331) * _2642) * _2656) * _2378);
    float _2742 = (((_2718 * cbLight._m0[_2670].y) * _2731) * _2365) + ((((cbLight._m0[_2589].y * _2333) * _2642) * _2656) * _2378);
    float _2743 = (((_2718 * cbLight._m0[_2670].z) * _2731) * _2365) + ((((cbLight._m0[_2589].z * _2335) * _2642) * _2656) * _2378);
    float _2799;
    float _2801;
    float _2803;
    if (_2418)
    {
        _2799 = _2741;
        _2801 = _2742;
        _2803 = _2743;
    }
    else
    {
        uint _2805 = _2342 + 2u;
        uint _2809 = _2342 + 10u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _857) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _932;
        float _2826 = cbLight._m0[_2805].y + _933;
        float _2827 = cbLight._m0[_2805].z + _934;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2805].xyz));
        float _4839 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2839 = dot(vec3(_854, _855, _856), vec3(_2832, _2833, _2834));
        float _4850 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4861 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2860 = (exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2861 = 1.0 - _2824;
        float _2871 = (0.5 / (((_2618 * ((_2838 * _2861) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2861) + _2824) * _2838))) * _2838;
        float _4872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2873 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2874 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2799 = (((_2860 * cbLight._m0[_2809].x) * _2873) * _2874) + _2741;
        _2801 = (((_2860 * cbLight._m0[_2809].y) * _2873) * _2874) + _2742;
        _2803 = (((_2860 * cbLight._m0[_2809].z) * _2873) * _2874) + _2743;
    }
    float _2905;
    float _2907;
    float _2909;
    if (_2527)
    {
        _2905 = _2799;
        _2907 = _2801;
        _2909 = _2803;
    }
    else
    {
        uint _2916 = _2342 + 3u;
        uint _2920 = _2342 + 11u;
        float _2934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2916].w)) * _857) * 0.949999988079071044921875);
        float _2935 = _2934 * _2934;
        float _2936 = cbLight._m0[_2916].x + _932;
        float _2937 = cbLight._m0[_2916].y + _933;
        float _2938 = cbLight._m0[_2916].z + _934;
        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
        float _2943 = _2942 * _2936;
        float _2944 = _2942 * _2937;
        float _2945 = _2942 * _2938;
        float _2946 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2916].xyz));
        float _4888 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2950 = dot(vec3(_854, _855, _856), vec3(_2943, _2944, _2945));
        float _4899 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2954 = dot(vec3(cbLight._m0[_2916].xyz), vec3(_2943, _2944, _2945));
        float _4910 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2958 = _2935 * _2935;
        float _2962 = ((_2953 * _2953) * (_2958 + (-1.0))) + 1.0;
        float _2971 = (exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2972 = 1.0 - _2935;
        float _2982 = (0.5 / (((_2618 * ((_2949 * _2972) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2972) + _2935) * _2949))) * _2949;
        float _4921 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2958 / ((_2962 * _2962) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2905 = (((_2971 * cbLight._m0[_2920].x) * _2984) * _2985) + _2799;
        _2907 = (((_2971 * cbLight._m0[_2920].y) * _2984) * _2985) + _2801;
        _2909 = (((_2971 * cbLight._m0[_2920].z) * _2984) * _2985) + _2803;
    }
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    if (_2340.y == 0u)
    {
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.x;
        uint _3018 = uint((float(_3006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _3007))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _3007)));
        float _3028 = (log2(_2118 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3029 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        uint _3032 = uint(isnan(14.0) ? _3029 : (isnan(_3029) ? 14.0 : min(_3029, 14.0)));
        uvec4 _3037 = texelFetch(g_lightClusterGridBuffer, int(((_3032 << 2u) + (_3018 << 6u)) >> 2u));
        uint _3038 = _3037.x;
        uint _3039 = _3006.z;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((((1u << ((_3039 >> 4u) & 15u)) + 4294967295u) & _3038) == 0u) || ((_3039 & 240u) == 0u))
        {
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
        }
        else
        {
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            uint _3277 = 0u;
            uint _3286;
            bool _3287;
            for (;;)
            {
                _3286 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                _3287 = _3286 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3287)
                {
                    frontier_phi_71_pred = _3276;
                    frontier_phi_71_pred_1 = _3275;
                    frontier_phi_71_pred_2 = _3274;
                    frontier_phi_71_pred_3 = _3273;
                    frontier_phi_71_pred_4 = _3272;
                    frontier_phi_71_pred_5 = _3271;
                }
                else
                {
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    uint _3422;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3286;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    for (;;)
                    {
                        uint _3426 = uint(findLSB(_3422)) + (_3277 << 5u);
                        uint _3423 = (_3422 + 4294967295u) & _3422;
                        uint _3428 = _3426 * 48u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3448 = (_3426 * 48u) + 4u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 3u)).x));
                        uint _3467 = (_3426 * 48u) + 8u;
                        vec3 _3478 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x));
                        float _3482 = _3442.x - _2116;
                        float _3483 = _3442.y - _2117;
                        float _3484 = _3442.z - _2118;
                        float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                        float _3488 = inversesqrt(_3485);
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3492 = dot(vec3(_971, _974, _977), vec3(_3489, _3490, _3491));
                        float _3497 = 1.0 - (_3485 * _3442.w);
                        float _4947 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3499 = sqrt(_3485) * _3461.w;
                        float _3502 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3492) + _3503;
                        float _3509 = _3499 * _3499;
                        float _3513 = ((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3498) / ((_3509 * 0.699999988079071044921875) + 1.0);
                        float _3517 = (-0.0) - _2116;
                        float _3518 = (-0.0) - _2117;
                        float _3519 = (-0.0) - _2118;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3524 = _3523 * _3517;
                        float _3525 = _3523 * _3518;
                        float _3526 = _3523 * _3519;
                        float _3533 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                        float _3534 = 1.0 - _1031;
                        float _3541 = sqrt(1.0 - ((1.0 - (_3534 * _3534)) * (1.0 - (_3533 * _3533))));
                        float _3542 = _3541 * _3541;
                        float _3543 = _3542 * _3542;
                        float _3544 = _3524 + _3489;
                        float _3545 = _3525 + _3490;
                        float _3546 = _3526 + _3491;
                        float _3550 = inversesqrt(dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546)));
                        float _3554 = dot(vec3(_971, _974, _977), vec3(_3524, _3525, _3526));
                        float _4963 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3557 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3558 = dot(vec3(_971, _974, _977), vec3(_3550 * _3544, _3550 * _3545, _3550 * _3546));
                        float _4974 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3561 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3565 = ((_3561 * _3561) * (_3543 + (-1.0))) + 1.0;
                        float _3566 = _3502 * _3542;
                        float _3567 = _3566 * _3566;
                        float _3570 = ((1.0 - _3567) * _3492) + _3567;
                        float _4985 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3571 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3572 = 1.0 - _3542;
                        float _3582 = (0.5 / (((_3571 * ((_3557 * _3572) + _3542)) + 9.9999999392252902907785028219223e-09) + (((_3571 * _3572) + _3542) * _3557))) * _3571;
                        float _4996 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3593 = (((_3543 * 3.1415927410125732421875) * (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0)))) / ((_3565 * _3565) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125))) * _3498;
                        _3346 = (_3513 * _3461.x) + _3419;
                        _3347 = (_3513 * _3461.y) + _3420;
                        _3348 = (_3513 * _3461.z) + _3421;
                        _3343 = (_3593 * _3478.x) + _3416;
                        _3344 = (_3593 * _3478.y) + _3417;
                        _3345 = (_3593 * _3478.z) + _3418;
                        if (_3423 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3423;
                        }
                    }
                    frontier_phi_71_pred = _3348;
                    frontier_phi_71_pred_1 = _3347;
                    frontier_phi_71_pred_2 = _3346;
                    frontier_phi_71_pred_3 = _3345;
                    frontier_phi_71_pred_4 = _3344;
                    frontier_phi_71_pred_5 = _3343;
                }
                _3129 = frontier_phi_71_pred;
                _3127 = frontier_phi_71_pred_1;
                _3125 = frontier_phi_71_pred_2;
                _3123 = frontier_phi_71_pred_3;
                _3121 = frontier_phi_71_pred_4;
                _3119 = frontier_phi_71_pred_5;
                uint _3278 = _3277 + 1u;
                if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3271 = _3119;
                    _3272 = _3121;
                    _3273 = _3123;
                    _3274 = _3125;
                    _3275 = _3127;
                    _3276 = _3129;
                    _3277 = _3278;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
        }
        uvec4 _3132 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3133 = _3132.z;
        uint _3135 = (_3133 >> 8u) & 15u;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        if (((4294967295u << _3135) & _3038) == 0u)
        {
            _3239 = _3118;
            _3241 = _3120;
            _3243 = _3122;
            _3245 = _3124;
            _3247 = _3126;
            _3249 = _3128;
        }
        else
        {
            float _3264 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
            float _3265 = _3264 * _2116;
            float _3266 = _3264 * _2117;
            float _3267 = _3264 * _2118;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3135 < ((_3133 >> 12u) & 15u))
            {
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3399 = _3118;
                float _3400 = _3120;
                float _3401 = _3122;
                float _3402 = _3124;
                float _3403 = _3126;
                float _3404 = _3128;
                uint _3405 = _3135;
                uint _3414;
                bool _3415;
                for (;;)
                {
                    _3414 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3405 << 2u)) >> 2u)).x;
                    _3415 = _3414 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3415)
                    {
                        frontier_phi_82_pred = _3404;
                        frontier_phi_82_pred_1 = _3403;
                        frontier_phi_82_pred_2 = _3402;
                        frontier_phi_82_pred_3 = _3401;
                        frontier_phi_82_pred_4 = _3400;
                        frontier_phi_82_pred_5 = _3399;
                    }
                    else
                    {
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3620 = _3399;
                        float _3621 = _3400;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        float _3625 = _3404;
                        uint _3626 = _3414;
                        uint _3627;
                        vec4 _3652;
                        float _3653;
                        vec4 _3668;
                        vec3 _3680;
                        vec4 _3695;
                        vec4 _3710;
                        float _3756;
                        bool _3757;
                        for (;;)
                        {
                            uint _3637 = ((_3405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3626));
                            _3627 = (_3626 + 4294967295u) & _3626;
                            uint _3639 = _3637 * 40u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3653 = _3652.w;
                            uint _3655 = (_3637 * 40u) + 4u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3637 * 40u) + 8u;
                            _3680 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x));
                            uint _3682 = (_3637 * 40u) + 16u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3637 * 40u) + 20u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3712 = (_3637 * 40u) + 24u;
                            vec4 _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3731 = (_3637 * 40u) + 28u;
                            vec4 _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3756 = fma(_2118, _3744.z, fma(_2117, _3744.y, _3744.x * _2116)) + _3744.w;
                            _3757 = !((fma(_2118, _3725.z, fma(_2117, _3725.y, _3725.x * _2116)) + _3725.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3757)
                            {
                                float _3784 = _3652.x - _2116;
                                float _3785 = _3652.y - _2117;
                                float _3786 = _3652.z - _2118;
                                float _3787 = dot(vec3(_3784, _3785, _3786), vec3(_3784, _3785, _3786));
                                float _3790 = inversesqrt(_3787);
                                float _3791 = _3790 * _3784;
                                float _3792 = _3790 * _3785;
                                float _3793 = _3790 * _3786;
                                float _3797 = 1.0 - (_3787 / (_3653 * _3653));
                                float _5007 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3802 = sqrt(_3787) * _3668.w;
                                float _3804 = 1.39999997615814208984375 / (_3802 + 1.39999997615814208984375);
                                float _3805 = _3804 * _3804;
                                float _3808 = ((1.0 - _3805) * dot(vec3(_3791, _3792, _3793), vec3(_971, _974, _977))) + _3805;
                                float _3811 = _3802 * _3802;
                                float _3815 = (fma(_2118, _3695.z, fma(_2117, _3695.y, _3695.x * _2116)) + _3695.w) / _3756;
                                float _3816 = (fma(_2118, _3710.z, fma(_2117, _3710.y, _3710.x * _2116)) + _3710.w) / _3756;
                                float _3820 = 1.0 - dot(vec2(_3815, _3816), vec2(_3815, _3816));
                                float _5023 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3822 = _3821 * (((isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0))) * _3798) / ((_3811 * 0.699999988079071044921875) + 1.0));
                                float _3834 = exp2(log2(1.0 / ((_3811 * 3.5) + 5.0)) * 0.25);
                                float _3835 = 1.0 - _1031;
                                float _3842 = sqrt(1.0 - ((1.0 - (_3835 * _3835)) * (1.0 - (_3834 * _3834))));
                                float _3843 = _3842 * _3842;
                                float _3844 = _3843 * _3843;
                                float _3845 = _3791 - _3265;
                                float _3846 = _3792 - _3266;
                                float _3847 = _3793 - _3267;
                                float _3851 = inversesqrt(dot(vec3(_3845, _3846, _3847), vec3(_3845, _3846, _3847)));
                                float _3855 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3265, (-0.0) - _3266, (-0.0) - _3267));
                                float _5034 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3858 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3859 = dot(vec3(_971, _974, _977), vec3(_3851 * _3845, _3851 * _3846, _3851 * _3847));
                                float _5045 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3862 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3866 = ((_3862 * _3862) * (_3844 + (-1.0))) + 1.0;
                                float _3867 = _3804 * _3843;
                                float _3868 = _3867 * _3867;
                                float _3874 = ((1.0 - _3868) * dot(vec3(_971, _974, _977), vec3(_3791, _3792, _3793))) + _3868;
                                float _5056 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3876 = 1.0 - _3843;
                                float _3886 = (0.5 / (((_3875 * ((_3858 * _3876) + _3843)) + 9.9999999392252902907785028219223e-09) + (((_3875 * _3876) + _3843) * _3858))) * _3875;
                                float _5067 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3896 = (_3821 * _3798) * (((_3844 * 3.1415927410125732421875) * (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) / ((_3866 * _3866) * ((_3811 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3822 * _3668.z;
                                frontier_phi_88_pred_1 = _3822 * _3668.y;
                                frontier_phi_88_pred_2 = _3822 * _3668.x;
                                frontier_phi_88_pred_3 = _3896 * _3680.z;
                                frontier_phi_88_pred_4 = _3896 * _3680.y;
                                frontier_phi_88_pred_5 = _3896 * _3680.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3905 = frontier_phi_88_pred;
                            _3904 = frontier_phi_88_pred_1;
                            _3903 = frontier_phi_88_pred_2;
                            _3902 = frontier_phi_88_pred_3;
                            _3901 = frontier_phi_88_pred_4;
                            _3900 = frontier_phi_88_pred_5;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            if (_3627 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3627;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3612;
                        frontier_phi_82_pred_1 = _3611;
                        frontier_phi_82_pred_2 = _3610;
                        frontier_phi_82_pred_3 = _3609;
                        frontier_phi_82_pred_4 = _3608;
                        frontier_phi_82_pred_5 = _3607;
                    }
                    _3250 = frontier_phi_82_pred;
                    _3248 = frontier_phi_82_pred_1;
                    _3246 = frontier_phi_82_pred_2;
                    _3244 = frontier_phi_82_pred_3;
                    _3242 = frontier_phi_82_pred_4;
                    _3240 = frontier_phi_82_pred_5;
                    uint _3406 = _3405 + 1u;
                    if (_3406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3399 = _3240;
                        _3400 = _3242;
                        _3401 = _3244;
                        _3402 = _3246;
                        _3403 = _3248;
                        _3404 = _3250;
                        _3405 = _3406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3246;
                frontier_phi_63_64_ladder_1 = _3250;
                frontier_phi_63_64_ladder_2 = _3248;
                frontier_phi_63_64_ladder_3 = _3244;
                frontier_phi_63_64_ladder_4 = _3242;
                frontier_phi_63_64_ladder_5 = _3240;
            }
            else
            {
                frontier_phi_63_64_ladder = _3124;
                frontier_phi_63_64_ladder_1 = _3128;
                frontier_phi_63_64_ladder_2 = _3126;
                frontier_phi_63_64_ladder_3 = _3122;
                frontier_phi_63_64_ladder_4 = _3120;
                frontier_phi_63_64_ladder_5 = _3118;
            }
            _3239 = frontier_phi_63_64_ladder_5;
            _3241 = frontier_phi_63_64_ladder_4;
            _3243 = frontier_phi_63_64_ladder_3;
            _3245 = frontier_phi_63_64_ladder;
            _3247 = frontier_phi_63_64_ladder_2;
            _3249 = frontier_phi_63_64_ladder_1;
        }
        float _3254 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _3051 = (_3254 * _3245) + _2582;
        _3053 = (_3254 * _3247) + _2584;
        _3055 = (_3254 * _3249) + _2586;
        _3057 = ((_3239 * 0.039999999105930328369140625) * _3254) + _2905;
        _3059 = ((_3241 * 0.039999999105930328369140625) * _3254) + _2907;
        _3061 = ((_3243 * 0.039999999105930328369140625) * _3254) + _2909;
    }
    else
    {
        _3051 = _2582;
        _3053 = _2584;
        _3055 = _2586;
        _3057 = _2905;
        _3059 = _2907;
        _3061 = _2909;
    }
    float _5083 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _5094 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5105 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _3078 = ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3051 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1015))) + ((_3057 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3079 = ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3053 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1015))) + ((_3059 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3080 = ((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3055 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1015))) + ((_3061 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    uint _3081 = _261 + 6u;
    float _3089 = _952 / cbSceneParam._m0[86u].x;
    float _3090 = _953 / cbSceneParam._m0[86u].y;
    vec4 _3104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3089, _3090, (log2((isnan(cbSceneParam._m0[77u].w) ? _875 : (isnan(_875) ? cbSceneParam._m0[77u].w : min(_875, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3106 = _3104.x;
    float _3107 = _3104.y;
    float _3108 = _3104.z;
    float _3109 = _3104.w;
    float _3181;
    float _3183;
    float _3185;
    float _3187;
    if (_875 > cbSceneParam._m0[78u].w)
    {
        float _3143 = isnan(_875) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _875 : min(cbSceneParam._m0[80u].w, _875));
        float _3144 = _3143 / _875;
        float _3155 = _3144 * _925;
        float _3156 = _926 * _3144;
        float _3157 = (-0.0) - _3156;
        float _3159 = _3144 * _927;
        float _3161 = (cbSceneParam._m0[77u].w * _3157) / _3143;
        float _3162 = _3161 + cbSceneParam._m0[79u].w;
        float _3163 = cbSceneParam._m0[79u].w - _3156;
        float _3169 = sqrt(((_3155 * _3155) + (_3156 * _3156)) + (_3159 * _3159));
        float _3172 = (1.0 - (cbSceneParam._m0[77u].w / _3143)) * _3169;
        float _3177 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3179 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3356;
        if (abs((_3157 - _3161) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3356 = ((((_3162 > 0.0) ? exp2(_3177 * _3162) : (2.0 - exp2(_3179 * _3162))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3172;
        }
        else
        {
            float _3300 = 1.0 / cbSceneParam._m0[80u].x;
            float _3301 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : max(_3162, _3163));
            float _3302 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : min(_3162, _3163));
            float _3311 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : min(_3301, 0.0));
            float _3312 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : min(_3302, 0.0));
            _3356 = ((abs(_3169 / _3157) * cbSceneParam._m0[80u].y) * ((((_3311 - _3312) * 2.0) - ((exp2(_3177 * (isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0)))) - exp2(_3177 * (isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))))) * _3300)) - ((exp2(_3179 * _3311) - exp2(_3179 * _3312)) * _3300))) + (_3172 * cbSceneParam._m0[80u].z);
        }
        vec4 _3358 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3089, _3090, 1.0), 0.0);
        float _3367 = exp2((_3356 * (-1.44269502162933349609375)) * (1.0 - _3358.w));
        float _3368 = log2(_3367);
        float _3384 = log2(_3109);
        _3181 = (exp2(_3384 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].x)) * _3358.x) / cbSceneParam._m0[78u].x)) + _3106;
        _3183 = (exp2(_3384 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].y)) * _3358.y) / cbSceneParam._m0[78u].y)) + _3107;
        _3185 = (exp2(_3384 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].z)) * _3358.z) / cbSceneParam._m0[78u].z)) + _3108;
        _3187 = _3367 * _3109;
    }
    else
    {
        _3181 = _3106;
        _3183 = _3107;
        _3185 = _3108;
        _3187 = _3109;
    }
    bool _3394;
    vec4 _3197;
    vec4 _3219;
    float _3221;
    float _3225;
    float _3226;
    float _3227;
    float _3228;
    bool _3238;
    for (;;)
    {
        _3197 = cbMatDynParam._m0[0u];
        float _3199 = roundEven(_3197.y);
        bool _3200 = _3199 == 3.0;
        float _3201 = log2(_3187);
        float _3208 = exp2(_3201 * cbSceneParam._m0[78u].x) * _3078;
        float _3209 = exp2(_3201 * cbSceneParam._m0[78u].y) * _3079;
        float _3210 = exp2(_3201 * cbSceneParam._m0[78u].z) * _3080;
        float _3217 = _941 + (-0.5);
        _3219 = cbMtdParam._m0[1u];
        _3221 = _3219.y * _3217;
        float _3224 = (_3199 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3225 = _3224 * (_3200 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3181)));
        _3226 = _3224 * (_3200 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3183)));
        _3227 = _3224 * (_3200 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3185)));
        _3228 = _3217 * 0.999000012874603271484375;
        _3238 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3238)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3228) < 0.5)
            {
                _3394 = true;
                break;
            }
        }
        uint _3335 = _990 + uint(_3197.w);
        if ((cbInstanceData._m0[_3335].w < 1.0) && ((cbInstanceData._m0[_3335].w + _3228) < 0.5))
        {
            _3394 = true;
            break;
        }
        if ((_3221 + 1.0) < _3219.x)
        {
            _3394 = true;
            break;
        }
        _3394 = false;
        break;
    }
    float _3598;
    if (_3394)
    {
        discard_state = true;
        _3598 = 0.0;
    }
    else
    {
        _3598 = cbInstanceData._m0[_3081].w;
    }
    SV_Target.x = _3225;
    SV_Target.y = _3226;
    SV_Target.z = _3227;
    SV_Target.w = _3598;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3081].w;
    discard_exit();
}


