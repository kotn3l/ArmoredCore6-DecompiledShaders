#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3687;
float _3688;
float _3689;
float _3690;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3699 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3710 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3721 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _364 = _359.x * cbMtdParam._m0[11u].x;
    float _365 = _359.y * cbMtdParam._m0[11u].y;
    float _366 = _359.z * cbMtdParam._m0[11u].z;
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[24u].z) + _450) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3732 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _478 = (_333.x * cbMtdParam._m0[9u].x) * ((_468 * ((_385.x * cbMtdParam._m0[12u].x) - _364)) + _364);
    float _479 = (_333.y * cbMtdParam._m0[9u].y) * ((_468 * ((_385.y * cbMtdParam._m0[12u].y) - _365)) + _365);
    float _480 = (_333.z * cbMtdParam._m0[9u].z) * ((_468 * ((_385.z * cbMtdParam._m0[12u].z) - _366)) + _366);
    float _484 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _478;
    float _487 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _479;
    float _490 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _480;
    float _498 = (((_478 - _484) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _484) * 4.55000019073486328125;
    float _500 = (((_479 - _487) * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) + _487) * 4.55000019073486328125;
    float _502 = (((_480 - _490) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _490) * 4.55000019073486328125;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _570 = ((_540.z - _561) * _468) + _561;
    float _573 = ((((_540.x - _559) * _468) + _559) * 2.0) + (-1.0);
    float _574 = ((((_540.y - _560) * _468) + _560) * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3743 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _580 = sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _614 = (_573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_515.x * 2.0) + (-1.0)))) + (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _615 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_515.y * 2.0) + (-1.0)))) + (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _656 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_629 - _630) * cbMtdParam._m0[24u].y) + _630) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3754 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _665 = ((((cbMtdParam._m0[10u].x - _498) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _657) + _498;
    float _666 = ((((cbMtdParam._m0[10u].y - _500) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _657) + _500;
    float _667 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _502)) * _657) + _502;
    float _672 = (((_515.z - _570) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _570;
    float _676 = ((_602.z - _672) * cbMtdParam._m0[19u].w) + _672;
    float _680 = ((cbMtdParam._m0[23u].y - _676) * _657) + _676;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _705 = (_699.x * 2.0) + (-1.0);
    float _706 = (_699.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3765 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _723 = (_657 * (((cbMtdParam._m0[22u].z * _614) - _614) + _705)) + _614;
    float _724 = (_657 * (((cbMtdParam._m0[22u].z * _615) - _615) + _706)) + _615;
    float _725 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) - _580)) + _580;
    float _727 = cbMtdParam._m0[22u].x + _602.w;
    float _730 = fma(_725, _245 * NORMAL.x, fma(_724, _252 * TANGENT.x, (_238 * _230) * _723));
    float _733 = fma(_725, _245 * NORMAL.y, fma(_724, _252 * TANGENT.y, (_238 * _231) * _723));
    float _736 = fma(_725, _245 * NORMAL.z, fma(_724, _252 * TANGENT.z, (_238 * _232) * _723));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    float _741 = _740 * _730;
    float _742 = _740 * _733;
    float _743 = _740 * _736;
    float _3776 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _744 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3798 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3809 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3820 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3831 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3842 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) - _989)) + _989) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_743, cbSceneParam._m0[5u].z, fma(_742, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _741));
    float _861 = fma(_743, cbSceneParam._m0[6u].z, fma(_742, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _741));
    float _864 = fma(_743, cbSceneParam._m0[7u].z, fma(_742, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _741));
    uint _877 = _277 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3853 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _902 = ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * TEXCOORD_5.w) * _898.x;
    float _903 = dot(vec3(_741, _742, _743), vec3(_819, _820, _821));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _741) - _819;
    float _911 = (_906 * _742) - _820;
    float _912 = (_906 * _743) - _821;
    float _916 = abs(dot(vec3(_819, _820, _821), vec3(_741, _742, _743)));
    float _3886 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_744);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1029 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1033 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1058 = _963 + _741;
        float _1059 = _967 + _742;
        float _1060 = _971 + _743;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_741, _742, _743), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3934 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_741, _742, _743), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3967 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_741, _742, _743), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4000 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1347 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1351 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1374 = _963 + _741;
        float _1375 = _967 + _742;
        float _1376 = _971 + _743;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_741, _742, _743), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4063 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_741, _742, _743), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4096 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_741, _742, _743), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4129 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1301;
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = _1301;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1314)) + _1314;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _910 * 0.5;
    float _1681 = _911 * 0.5;
    float _1682 = _912 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _744);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1812 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1815 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1843 = frontier_phi_17_15_ladder;
        }
        float _2066;
        if (_1812 > 0.0)
        {
            _2066 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2066 = frontier_phi_26_22_ladder;
        }
        float _2312;
        if (_1815 > 0.0)
        {
            _2312 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2312 = frontier_phi_38_33_ladder;
        }
        float _2314 = isnan(_2066) ? _1843 : (isnan(_1843) ? _2066 : min(_1843, _2066));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1809) + _1798;
        float _2320 = (_2315 * _1812) + _1802;
        float _2321 = (_2315 * _1815) + _1806;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_16_38_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_16_38_ladder_2;
        _1833 = frontier_phi_16_38_ladder_1;
        _1835 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1749);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _744);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1895 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1899 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1903 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1906 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1909 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1912 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2071;
        if (_1906 > 0.0)
        {
            _2071 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2071 = frontier_phi_28_24_ladder;
        }
        float _2339;
        if (_1909 > 0.0)
        {
            _2339 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2339 = frontier_phi_40_35_ladder;
        }
        float _2544;
        if (_1912 > 0.0)
        {
            _2544 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2544 = frontier_phi_49_46_ladder;
        }
        float _2546 = isnan(_2339) ? _2071 : (isnan(_2071) ? _2339 : min(_2071, _2339));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1906) + _1895;
        float _2552 = (_2547 * _1909) + _1899;
        float _2553 = (_2547 * _1912) + _1903;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_25_49_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1931 = frontier_phi_25_49_ladder_2;
        _1933 = frontier_phi_25_49_ladder_1;
        _1935 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1840);
        _1931 = _1915.x * cbModelParam._m0[1u].z;
        _1933 = _1915.y * cbModelParam._m0[1u].z;
        _1935 = _1915.z * cbModelParam._m0[1u].z;
    }
    float _1947 = ((((1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_931 * _918)) * _902;
    float _1948 = _1947 * ((cbModelParam._m0[1u].w * (_1931 - _1831)) + _1831);
    float _1949 = _1947 * ((cbModelParam._m0[1u].w * (_1933 - _1833)) + _1833);
    float _1950 = _1947 * ((cbModelParam._m0[1u].w * (_1935 - _1835)) + _1835);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1948 * cbSceneParam._m0[91u].x));
    vec4 _1967 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_839, _840));
    float _1969 = _1967.w;
    float _1981 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1969);
    float _1982 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1969);
    float _1983 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1969);
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _902 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2025 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2029 = _1989 | 1u;
    float _2040 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_741, _742, _743));
    float _2043 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_741, _742, _743));
    float _4265 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _4276 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2048 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2050 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.3183098733425140380859375;
    float _2057 = ((cbLight._m0[_2006].x * _2012) * _2050) + (((cbLight._m0[_2016].x * _1981) * _2025) * _2048);
    float _2058 = ((_2012 * cbLight._m0[_2006].y) * _2050) + (((cbLight._m0[_2016].y * _1982) * _2025) * _2048);
    float _2059 = ((_2012 * cbLight._m0[_2006].z) * _2050) + (((cbLight._m0[_2016].z * _1983) * _2025) * _2048);
    uvec4 _2063 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2065 = _2063.x == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2065)
    {
        _2076 = _2057;
        _2078 = _2058;
        _2080 = _2059;
    }
    else
    {
        uint _2084 = _1989 + 6u;
        float _2100 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4287 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2103 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2076 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _2057;
        _2078 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _2058;
        _2080 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _2059;
    }
    bool _2083 = _2063.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2083)
    {
        _2121 = _2076;
        _2123 = _2078;
        _2125 = _2080;
    }
    else
    {
        uint _2283 = _1989 + 7u;
        float _2299 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4303 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2302 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2121 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2076;
        _2123 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2078;
        _2125 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2080;
    }
    uint _2128 = _1989 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _744) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1989].x + _819;
    float _2144 = cbLight._m0[_1989].y + _820;
    float _2145 = cbLight._m0[_1989].z + _821;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_1989].xyz));
    float _4319 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2157 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2158 = dot(vec3(_741, _742, _743), vec3(_2150, _2151, _2152));
    float _4341 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2150, _2151, _2152));
    float _4352 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2157 * ((_2156 * _2182) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2182) + _2142) * _2156))) * _2156;
    float _4363 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2209 = _1989 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _744) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2029].x + _819;
    float _2223 = cbLight._m0[_2029].y + _820;
    float _2224 = cbLight._m0[_2029].z + _821;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2029].xyz));
    float _4374 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2236 = dot(vec3(_741, _742, _743), vec3(_2229, _2230, _2231));
    float _4385 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2229, _2230, _2231));
    float _4396 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2221;
    float _2268 = (0.5 / (((_2157 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2258) + _2221) * _2235))) * _2235;
    float _4407 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2280 = (((_2257 * cbLight._m0[_2209].x) * _2270) * _2012) + ((((cbLight._m0[_2128].x * _1981) * _2181) * _2195) * _2025);
    float _2281 = (((_2257 * cbLight._m0[_2209].y) * _2270) * _2012) + ((((cbLight._m0[_2128].y * _1982) * _2181) * _2195) * _2025);
    float _2282 = (((_2257 * cbLight._m0[_2209].z) * _2270) * _2012) + ((((cbLight._m0[_2128].z * _1983) * _2181) * _2195) * _2025);
    float _2344;
    float _2346;
    float _2348;
    if (_2065)
    {
        _2344 = _2280;
        _2346 = _2281;
        _2348 = _2282;
    }
    else
    {
        uint _2350 = _1989 + 2u;
        uint _2354 = _1989 + 10u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _744) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _819;
        float _2371 = cbLight._m0[_2350].y + _820;
        float _2372 = cbLight._m0[_2350].z + _821;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2350].xyz));
        float _4418 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2384 = dot(vec3(_741, _742, _743), vec3(_2377, _2378, _2379));
        float _4429 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4440 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2406 = 1.0 - _2369;
        float _2416 = (0.5 / (((_2157 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2406) + _2369) * _2383))) * _2383;
        float _4451 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2344 = (((_2405 * cbLight._m0[_2354].x) * _2418) * _2419) + _2280;
        _2346 = (((_2405 * cbLight._m0[_2354].y) * _2418) * _2419) + _2281;
        _2348 = (((_2405 * cbLight._m0[_2354].z) * _2418) * _2419) + _2282;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2083)
    {
        _2454 = _2344;
        _2456 = _2346;
        _2458 = _2348;
    }
    else
    {
        uint _2465 = _1989 + 3u;
        uint _2469 = _1989 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _744) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _819;
        float _2486 = cbLight._m0[_2465].y + _820;
        float _2487 = cbLight._m0[_2465].z + _821;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2465].xyz));
        float _4467 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2499 = dot(vec3(_741, _742, _743), vec3(_2492, _2493, _2494));
        float _4478 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4489 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2520 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2521 = 1.0 - _2484;
        float _2531 = (0.5 / (((_2157 * ((_2498 * _2521) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2521) + _2484) * _2498))) * _2498;
        float _4500 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2454 = (((_2520 * cbLight._m0[_2469].x) * _2533) * _2534) + _2344;
        _2456 = (((_2520 * cbLight._m0[_2469].y) * _2533) * _2534) + _2346;
        _2458 = (((_2520 * cbLight._m0[_2469].z) * _2533) * _2534) + _2348;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1987.y == 0u)
    {
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2609;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2609;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2609;
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2625)));
        float _2646 = (log2(_2612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2926)
                {
                    frontier_phi_66_pred = _2910;
                    frontier_phi_66_pred_1 = _2915;
                    frontier_phi_66_pred_2 = _2914;
                    frontier_phi_66_pred_3 = _2913;
                    frontier_phi_66_pred_4 = _2912;
                    frontier_phi_66_pred_5 = _2911;
                }
                else
                {
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    uint _3061;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2925;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    for (;;)
                    {
                        uint _3065 = uint(findLSB(_3061)) + (_2916 << 5u);
                        uint _3062 = (_3061 + 4294967295u) & _3061;
                        uint _3067 = _3065 * 48u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3087 = (_3065 * 48u) + 4u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3106 = (_3065 * 48u) + 8u;
                        vec3 _3117 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x));
                        float _3121 = _3081.x - _2610;
                        float _3122 = _3081.y - _2611;
                        float _3123 = _3081.z - _2612;
                        float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                        float _3127 = inversesqrt(_3124);
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3131 = dot(vec3(_858, _861, _864), vec3(_3128, _3129, _3130));
                        float _3136 = 1.0 - (_3124 * _3081.w);
                        float _4526 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3138 = sqrt(_3124) * _3100.w;
                        float _3141 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3131) + _3142;
                        float _3148 = _3138 * _3138;
                        float _3152 = ((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3137) / ((_3148 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _2610;
                        float _3157 = (-0.0) - _2611;
                        float _3158 = (-0.0) - _2612;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3173 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _918;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_858, _861, _864), vec3(_3163, _3164, _3165));
                        float _4542 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3198 = dot(vec3(_858, _861, _864), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4553 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3141 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3131) + _3207;
                        float _4564 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4575 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3205 * _3205) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125))) * _3137;
                        _2985 = (_3152 * _3100.x) + _3058;
                        _2986 = (_3152 * _3100.y) + _3059;
                        _2987 = (_3152 * _3100.z) + _3060;
                        _2982 = (_3233 * _3117.x) + _3055;
                        _2983 = (_3233 * _3117.y) + _3056;
                        _2984 = (_3233 * _3117.z) + _3057;
                        if (_3062 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _3062;
                        }
                    }
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                _2758 = frontier_phi_66_pred;
                _2768 = frontier_phi_66_pred_1;
                _2766 = frontier_phi_66_pred_2;
                _2764 = frontier_phi_66_pred_3;
                _2762 = frontier_phi_66_pred_4;
                _2760 = frontier_phi_66_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2758;
                    _2911 = _2760;
                    _2912 = _2762;
                    _2913 = _2764;
                    _2914 = _2766;
                    _2915 = _2768;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2774) & _2656) == 0u)
        {
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
            float _2904 = _2903 * _2610;
            float _2905 = _2903 * _2611;
            float _2906 = _2903 * _2612;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3038 = _2757;
                float _3039 = _2759;
                float _3040 = _2761;
                float _3041 = _2763;
                float _3042 = _2765;
                float _3043 = _2767;
                uint _3044 = _2774;
                uint _3053;
                bool _3054;
                for (;;)
                {
                    _3053 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                    _3054 = _3053 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3054)
                    {
                        frontier_phi_77_pred = _3043;
                        frontier_phi_77_pred_1 = _3042;
                        frontier_phi_77_pred_2 = _3041;
                        frontier_phi_77_pred_3 = _3040;
                        frontier_phi_77_pred_4 = _3039;
                        frontier_phi_77_pred_5 = _3038;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        uint _3266 = _3053;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3335;
                        vec4 _3350;
                        float _3396;
                        bool _3397;
                        for (;;)
                        {
                            uint _3277 = ((_3044 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3322 = (_3277 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3277 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3277 * 40u) + 24u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3371 = (_3277 * 40u) + 28u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3396 = fma(_2612, _3384.z, fma(_2611, _3384.y, _3384.x * _2610)) + _3384.w;
                            _3397 = !((fma(_2612, _3365.z, fma(_2611, _3365.y, _3365.x * _2610)) + _3365.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3397)
                            {
                                float _3424 = _3292.x - _2610;
                                float _3425 = _3292.y - _2611;
                                float _3426 = _3292.z - _2612;
                                float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                                float _3430 = inversesqrt(_3427);
                                float _3431 = _3430 * _3424;
                                float _3432 = _3430 * _3425;
                                float _3433 = _3430 * _3426;
                                float _3437 = 1.0 - (_3427 / (_3293 * _3293));
                                float _4586 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3442 = sqrt(_3427) * _3308.w;
                                float _3444 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                                float _3445 = _3444 * _3444;
                                float _3448 = ((1.0 - _3445) * dot(vec3(_3431, _3432, _3433), vec3(_858, _861, _864))) + _3445;
                                float _3451 = _3442 * _3442;
                                float _3455 = (fma(_2612, _3335.z, fma(_2611, _3335.y, _3335.x * _2610)) + _3335.w) / _3396;
                                float _3456 = (fma(_2612, _3350.z, fma(_2611, _3350.y, _3350.x * _2610)) + _3350.w) / _3396;
                                float _3460 = 1.0 - dot(vec2(_3455, _3456), vec2(_3455, _3456));
                                float _4602 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3462 = _3461 * (((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3438) / ((_3451 * 0.699999988079071044921875) + 1.0));
                                float _3474 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                                float _3475 = 1.0 - _918;
                                float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                                float _3483 = _3482 * _3482;
                                float _3484 = _3483 * _3483;
                                float _3485 = _3431 - _2904;
                                float _3486 = _3432 - _2905;
                                float _3487 = _3433 - _2906;
                                float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                                float _3495 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4613 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3499 = dot(vec3(_858, _861, _864), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                                float _4624 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                                float _3507 = _3444 * _3483;
                                float _3508 = _3507 * _3507;
                                float _3514 = ((1.0 - _3508) * dot(vec3(_858, _861, _864), vec3(_3431, _3432, _3433))) + _3508;
                                float _4635 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3516 = 1.0 - _3483;
                                float _3526 = (0.5 / (((_3515 * ((_3498 * _3516) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3483) * _3498))) * _3515;
                                float _4646 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3536 = (_3461 * _3438) * (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3506 * _3506) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3462 * _3308.y;
                                frontier_phi_83_pred_1 = _3462 * _3308.x;
                                frontier_phi_83_pred_2 = _3536 * _3320.z;
                                frontier_phi_83_pred_3 = _3536 * _3320.y;
                                frontier_phi_83_pred_4 = _3536 * _3320.x;
                                frontier_phi_83_pred_5 = _3462 * _3308.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3544 = frontier_phi_83_pred;
                            _3543 = frontier_phi_83_pred_1;
                            _3542 = frontier_phi_83_pred_2;
                            _3541 = frontier_phi_83_pred_3;
                            _3540 = frontier_phi_83_pred_4;
                            _3545 = frontier_phi_83_pred_5;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3252;
                        frontier_phi_77_pred_1 = _3251;
                        frontier_phi_77_pred_2 = _3250;
                        frontier_phi_77_pred_3 = _3249;
                        frontier_phi_77_pred_4 = _3248;
                        frontier_phi_77_pred_5 = _3247;
                    }
                    _2889 = frontier_phi_77_pred;
                    _2887 = frontier_phi_77_pred_1;
                    _2885 = frontier_phi_77_pred_2;
                    _2883 = frontier_phi_77_pred_3;
                    _2881 = frontier_phi_77_pred_4;
                    _2879 = frontier_phi_77_pred_5;
                    uint _3045 = _3044 + 1u;
                    if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3038 = _2879;
                        _3039 = _2881;
                        _3040 = _2883;
                        _3041 = _2885;
                        _3042 = _2887;
                        _3043 = _2889;
                        _3044 = _3045;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2883;
                frontier_phi_58_59_ladder_1 = _2889;
                frontier_phi_58_59_ladder_2 = _2887;
                frontier_phi_58_59_ladder_3 = _2885;
                frontier_phi_58_59_ladder_4 = _2881;
                frontier_phi_58_59_ladder_5 = _2879;
            }
            else
            {
                frontier_phi_58_59_ladder = _2761;
                frontier_phi_58_59_ladder_1 = _2767;
                frontier_phi_58_59_ladder_2 = _2765;
                frontier_phi_58_59_ladder_3 = _2763;
                frontier_phi_58_59_ladder_4 = _2759;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            _2878 = frontier_phi_58_59_ladder_5;
            _2880 = frontier_phi_58_59_ladder_4;
            _2882 = frontier_phi_58_59_ladder;
            _2884 = frontier_phi_58_59_ladder_3;
            _2886 = frontier_phi_58_59_ladder_2;
            _2888 = frontier_phi_58_59_ladder_1;
        }
        float _2893 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2669 = (_2893 * _2884) + _2121;
        _2671 = (_2893 * _2886) + _2123;
        _2673 = (_2893 * _2888) + _2125;
        _2675 = ((_2878 * 0.039999999105930328369140625) * _2893) + _2454;
        _2677 = ((_2880 * 0.039999999105930328369140625) * _2893) + _2456;
        _2679 = ((_2882 * 0.039999999105930328369140625) * _2893) + _2458;
    }
    else
    {
        _2669 = _2121;
        _2671 = _2123;
        _2673 = _2125;
        _2675 = _2454;
        _2677 = _2456;
        _2679 = _2458;
    }
    float _4662 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4673 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4684 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2696 = ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2669 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _902))) + ((_2675 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2697 = ((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2671 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _902))) + ((_2677 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2698 = ((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2673 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _902))) + ((_2679 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    uint _2699 = _277 + 6u;
    float _2707 = _839 / cbSceneParam._m0[86u].x;
    float _2708 = _840 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _2783 = _2782 / _762;
        float _2794 = _2783 * _812;
        float _2795 = _813 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2798 = _2783 * _814;
        float _2800 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2795;
        float _2808 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2995;
        if (abs((_2796 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2995 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2941 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2995 = ((abs(_2808 / _2796) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2818 * _2950) - exp2(_2818 * _2951)) * _2939))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2997 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _3006 = exp2((_2995 * (-1.44269502162933349609375)) * (1.0 - _2997.w));
        float _3007 = log2(_3006);
        float _3023 = log2(_2727);
        _2820 = (exp2(_3023 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].x)) * _2997.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2822 = (exp2(_3023 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].y)) * _2997.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2824 = (exp2(_3023 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].z)) * _2997.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2826 = _3006 * _2727;
    }
    else
    {
        _2820 = _2724;
        _2822 = _2725;
        _2824 = _2726;
        _2826 = _2727;
    }
    bool _3033;
    vec4 _2836;
    vec4 _2858;
    float _2860;
    float _2864;
    float _2865;
    float _2866;
    float _2867;
    bool _2877;
    for (;;)
    {
        _2836 = cbMatDynParam._m0[0u];
        float _2838 = roundEven(_2836.y);
        bool _2839 = _2838 == 3.0;
        float _2840 = log2(_2826);
        float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * _2696;
        float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * _2697;
        float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * _2698;
        float _2856 = _828 + (-0.5);
        _2858 = cbMtdParam._m0[1u];
        _2860 = _2858.y * _2856;
        float _2863 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2864 = _2863 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
        _2865 = _2863 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
        _2866 = _2863 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
        _2867 = _2856 * 0.999000012874603271484375;
        _2877 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2877)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2867) < 0.5)
            {
                _3033 = true;
                break;
            }
        }
        uint _2974 = _877 + uint(_2836.w);
        if ((cbInstanceData._m0[_2974].w < 1.0) && ((cbInstanceData._m0[_2974].w + _2867) < 0.5))
        {
            _3033 = true;
            break;
        }
        if ((_2860 + 1.0) < _2858.x)
        {
            _3033 = true;
            break;
        }
        _3033 = false;
        break;
    }
    float _3238;
    if (_3033)
    {
        discard_state = true;
        _3238 = 0.0;
    }
    else
    {
        _3238 = cbInstanceData._m0[_2699].w;
    }
    SV_Target.x = _2864;
    SV_Target.y = _2865;
    SV_Target.z = _2866;
    SV_Target.w = _3238;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
    discard_exit();
}


