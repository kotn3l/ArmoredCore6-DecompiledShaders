#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1369;
float _3730;
float _3731;
float _3732;
float _3733;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3742 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3753 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3764 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3775 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _455 = (_448 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _456 = (_448 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _457 = (_448 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3786 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _540;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _448) + _603;
    float _613 = ((_584.y - _604) * _448) + _604;
    float _614 = ((_584.z - _605) * _448) + _605;
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _298) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _299) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _521) + _614;
    float _642 = ((((_626.x - _612) * _521) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _521) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3797 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _681 = (_642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)))) + (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _682 = (_643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)))) + (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _696 = _694.x;
    float _697 = 1.0 - _696;
    float _723 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_696 - _697) * cbMtdParam._m0[24u].y) + _697) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3808 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _732 = ((((cbMtdParam._m0[10u].x - _547) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _724) + _547;
    float _733 = ((((cbMtdParam._m0[10u].y - _548) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _724) + _548;
    float _734 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _549)) * _724) + _549;
    float _739 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    float _743 = ((_669.z - _739) * cbMtdParam._m0[19u].w) + _739;
    float _747 = ((cbMtdParam._m0[23u].y - _743) * _724) + _743;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3819 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _790 = (_724 * (((cbMtdParam._m0[22u].z * _681) - _681) + _772)) + _681;
    float _791 = (_724 * (((cbMtdParam._m0[22u].z * _682) - _682) + _773)) + _682;
    float _792 = (_724 * (sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _649)) + _649;
    float _794 = cbMtdParam._m0[22u].x + _669.w;
    float _797 = fma(_792, _247 * NORMAL.x, fma(_791, _254 * TANGENT.x, (_240 * _232) * _790));
    float _800 = fma(_792, _247 * NORMAL.y, fma(_791, _254 * TANGENT.y, (_240 * _233) * _790));
    float _803 = fma(_792, _247 * NORMAL.z, fma(_791, _254 * TANGENT.z, (_240 * _234) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _3830 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _811 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3852 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3863 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3874 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    vec4 _894 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _896 = _894.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1050 = sqrt(((_880 * _880) + (_881 * _881)) + (_882 * _882));
        float _1056 = (cbMatDynParam._m0[5u].x * _1050) + cbMatDynParam._m0[5u].y;
        float _3885 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1061 = (cbMatDynParam._m0[5u].z * _1050) + cbMatDynParam._m0[5u].w;
        float _3896 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) - _1057)) + _1057) < ((_896 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _929 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _932 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _945 = _279 + 9u;
    uint _946 = _945 + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_946].z;
    float _3907 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _970 = ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * TEXCOORD_5.w) * _966.x;
    float _971 = dot(vec3(_808, _809, _810), vec3(_887, _888, _889));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _808) - _887;
    float _979 = (_974 * _809) - _888;
    float _980 = (_974 * _810) - _889;
    float _984 = abs(dot(vec3(_887, _888, _889), vec3(_808, _809, _810)));
    float _3940 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_811);
    float _999 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1368;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1097 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1101 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1126 = _1031 + _808;
        float _1127 = _1035 + _809;
        float _1128 = _1039 + _810;
        float _1138 = fma(_1128, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126)) - _1093;
        float _1139 = fma(_1128, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126)) - _1097;
        float _1140 = fma(_1128, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126)) - _1101;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1196 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1162.x + (-0.5));
        float _1198 = _1196 * (_1162.y + (-0.5));
        float _1199 = _1196 * (_1162.z + (-0.5));
        float _1206 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1169.x + (-0.5));
        float _1208 = _1206 * (_1169.y + (-0.5));
        float _1209 = _1206 * (_1169.z + (-0.5));
        float _1216 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1176.x + (-0.5));
        float _1218 = _1216 * (_1176.y + (-0.5));
        float _1219 = _1216 * (_1176.z + (-0.5));
        float _1226 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1183.x + (-0.5));
        float _1228 = _1226 * (_1183.y + (-0.5));
        float _1229 = _1226 * (_1183.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1250 = (dot(vec3(_808, _809, _810), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1260 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3988 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1262 + 1.0))) + _1267) * _1230;
        float _1277 = _1198 * 0.5;
        float _1278 = _1208 * 0.5;
        float _1279 = _1218 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_808, _809, _810), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4021 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1304 + 1.0))) + _1309) * _1231;
        float _1319 = _1199 * 0.5;
        float _1320 = _1209 * 0.5;
        float _1321 = _1219 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_808, _809, _810), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4054 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1346 + 1.0))) + _1351) * _1232;
        _1368 = _1199;
        _1370 = _1198;
        _1371 = _1197;
        _1372 = _1209;
        _1373 = _1208;
        _1374 = _1207;
        _1375 = _1219;
        _1376 = _1218;
        _1377 = _1217;
        _1378 = _1232;
        _1379 = _1231;
        _1380 = _1230;
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1369;
        _1370 = _1369;
        _1371 = _1369;
        _1372 = _1369;
        _1373 = _1369;
        _1374 = _1369;
        _1375 = _1369;
        _1376 = _1369;
        _1377 = _1369;
        _1378 = _1369;
        _1379 = _1369;
        _1380 = _1369;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1414 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1418 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1441 = _1031 + _808;
        float _1442 = _1035 + _809;
        float _1443 = _1039 + _810;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_808, _809, _810), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4117 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_808, _809, _810), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4150 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_808, _809, _810), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4183 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1369;
        _1680 = _1369;
        _1681 = _1369;
        _1682 = _1369;
        _1683 = _1369;
        _1684 = _1369;
        _1685 = _1369;
        _1686 = _1369;
        _1687 = _1369;
        _1688 = _1369;
        _1689 = _1369;
        _1690 = _1369;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1381)) + _1381;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1382)) + _1382;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1383)) + _1383;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _978 * 0.5;
    float _1748 = _979 * 0.5;
    float _1749 = _980 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1368, _1372, _1375, _1378));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1879 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1882 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1910 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1879 > 0.0)
        {
            _2112 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2355;
        if (_1882 > 0.0)
        {
            _2355 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2355 = frontier_phi_38_33_ladder;
        }
        float _2357 = isnan(_2112) ? _1910 : (isnan(_1910) ? _2112 : min(_1910, _2112));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1876) + _1865;
        float _2363 = (_2358 * _1879) + _1869;
        float _2364 = (_2358 * _1882) + _1873;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_16_38_ladder_2;
        _1900 = frontier_phi_16_38_ladder_1;
        _1902 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1816);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1976 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1979 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2117;
        if (_1973 > 0.0)
        {
            _2117 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2382;
        if (_1976 > 0.0)
        {
            _2382 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2382 = frontier_phi_40_35_ladder;
        }
        float _2587;
        if (_1979 > 0.0)
        {
            _2587 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2587 = frontier_phi_49_46_ladder;
        }
        float _2589 = isnan(_2382) ? _2117 : (isnan(_2117) ? _2382 : min(_2117, _2382));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1973) + _1962;
        float _2595 = (_2590 * _1976) + _1966;
        float _2596 = (_2590 * _1979) + _1970;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_25_49_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_25_49_ladder_2;
        _2000 = frontier_phi_25_49_ladder_1;
        _2002 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1907);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2014 = ((((1.0 - _999) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_999 * _986)) * _970;
    float _2015 = _2014 * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2016 = _2014 * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2017 = _2014 * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _970 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2071 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2075 = _2038 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_808, _809, _810));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_808, _809, _810));
    float _4319 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4330 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2055].x * _2061) * _2096) + ((cbLight._m0[_2065].x * _2071) * _2094);
    float _2104 = ((_2061 * cbLight._m0[_2055].y) * _2096) + ((_2071 * cbLight._m0[_2065].y) * _2094);
    float _2105 = ((_2061 * cbLight._m0[_2055].z) * _2096) + ((_2071 * cbLight._m0[_2065].z) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2111)
    {
        _2122 = _2103;
        _2124 = _2104;
        _2126 = _2105;
    }
    else
    {
        uint _2130 = _2038 + 6u;
        float _2146 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2147 = _2146 * _2146;
        float _4341 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2148 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2149 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2122 = (((cbLight._m0[_2130].x * 0.3183098733425140380859375) * _2148) * _2149) + _2103;
        _2124 = (((cbLight._m0[_2130].y * 0.3183098733425140380859375) * _2148) * _2149) + _2104;
        _2126 = (((cbLight._m0[_2130].z * 0.3183098733425140380859375) * _2148) * _2149) + _2105;
    }
    bool _2129 = _2109.y == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2129)
    {
        _2167 = _2122;
        _2169 = _2124;
        _2171 = _2126;
    }
    else
    {
        uint _2326 = _2038 + 7u;
        float _2342 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4357 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2345 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2167 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2122;
        _2169 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2124;
        _2171 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2126;
    }
    uint _2174 = _2038 + 8u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _811) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_2038].x + _887;
    float _2190 = cbLight._m0[_2038].y + _888;
    float _2191 = cbLight._m0[_2038].z + _889;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2038].xyz));
    float _4373 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2203 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2204 = dot(vec3(_808, _809, _810), vec3(_2196, _2197, _2198));
    float _4395 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2196, _2197, _2198));
    float _4406 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2188 * _2188;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2203 * ((_2202 * _2228) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2228) + _2188) * _2202))) * _2202;
    float _4417 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    uint _2252 = _2038 + 9u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _811) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2075].x + _887;
    float _2266 = cbLight._m0[_2075].y + _888;
    float _2267 = cbLight._m0[_2075].z + _889;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2075].xyz));
    float _4428 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2279 = dot(vec3(_808, _809, _810), vec3(_2272, _2273, _2274));
    float _4439 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2272, _2273, _2274));
    float _4450 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2264 * _2264;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2301 = 1.0 - _2264;
    float _2311 = (0.5 / (((_2203 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2301) + _2264) * _2278))) * _2278;
    float _4461 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    float _2323 = (((_2300 * cbLight._m0[_2252].x) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].x) * _2241) * _2071);
    float _2324 = (((_2300 * cbLight._m0[_2252].y) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].y) * _2241) * _2071);
    float _2325 = (((_2300 * cbLight._m0[_2252].z) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].z) * _2241) * _2071);
    float _2387;
    float _2389;
    float _2391;
    if (_2111)
    {
        _2387 = _2323;
        _2389 = _2324;
        _2391 = _2325;
    }
    else
    {
        uint _2393 = _2038 + 2u;
        uint _2397 = _2038 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _811) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _887;
        float _2414 = cbLight._m0[_2393].y + _888;
        float _2415 = cbLight._m0[_2393].z + _889;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2393].xyz));
        float _4472 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2427 = dot(vec3(_808, _809, _810), vec3(_2420, _2421, _2422));
        float _4483 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4494 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2449 = 1.0 - _2412;
        float _2459 = (0.5 / (((_2203 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2449) + _2412) * _2426))) * _2426;
        float _4505 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2387 = (((_2448 * cbLight._m0[_2397].x) * _2461) * _2462) + _2323;
        _2389 = (((_2448 * cbLight._m0[_2397].y) * _2461) * _2462) + _2324;
        _2391 = (((_2448 * cbLight._m0[_2397].z) * _2461) * _2462) + _2325;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2129)
    {
        _2497 = _2387;
        _2499 = _2389;
        _2501 = _2391;
    }
    else
    {
        uint _2508 = _2038 + 3u;
        uint _2512 = _2038 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _811) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _887;
        float _2529 = cbLight._m0[_2508].y + _888;
        float _2530 = cbLight._m0[_2508].z + _889;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2508].xyz));
        float _4521 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2542 = dot(vec3(_808, _809, _810), vec3(_2535, _2536, _2537));
        float _4532 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4543 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2564 = 1.0 - _2527;
        float _2574 = (0.5 / (((_2203 * ((_2541 * _2564) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2564) + _2527) * _2541))) * _2541;
        float _4554 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2497 = (((_2563 * cbLight._m0[_2512].x) * _2576) * _2577) + _2387;
        _2499 = (((_2563 * cbLight._m0[_2512].y) * _2576) * _2577) + _2389;
        _2501 = (((_2563 * cbLight._m0[_2512].z) * _2576) * _2577) + _2391;
    }
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_2036.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2969)
                {
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                else
                {
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    uint _3104;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2968;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    for (;;)
                    {
                        uint _3108 = uint(findLSB(_3104)) + (_2959 << 5u);
                        uint _3105 = (_3104 + 4294967295u) & _3104;
                        uint _3110 = _3108 * 48u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3130 = (_3108 * 48u) + 4u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3149 = (_3108 * 48u) + 8u;
                        vec3 _3160 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x));
                        float _3164 = _3124.x - _2653;
                        float _3165 = _3124.y - _2654;
                        float _3166 = _3124.z - _2655;
                        float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                        float _3170 = inversesqrt(_3167);
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3174 = dot(vec3(_926, _929, _932), vec3(_3171, _3172, _3173));
                        float _3179 = 1.0 - (_3167 * _3124.w);
                        float _4580 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3181 = sqrt(_3167) * _3143.w;
                        float _3184 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3174) + _3185;
                        float _3191 = _3181 * _3181;
                        float _3195 = ((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3180) / ((_3191 * 0.699999988079071044921875) + 1.0);
                        float _3199 = (-0.0) - _2653;
                        float _3200 = (-0.0) - _2654;
                        float _3201 = (-0.0) - _2655;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3216 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                        float _3217 = 1.0 - _986;
                        float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                        float _3225 = _3224 * _3224;
                        float _3226 = _3225 * _3225;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3237 = dot(vec3(_926, _929, _932), vec3(_3206, _3207, _3208));
                        float _4596 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3241 = dot(vec3(_926, _929, _932), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                        float _4607 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                        float _3249 = _3184 * _3225;
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3174) + _3250;
                        float _4618 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3255 = 1.0 - _3225;
                        float _3265 = (0.5 / (((_3254 * ((_3240 * _3255) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3225) * _3240))) * _3254;
                        float _4629 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3276 = (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3248 * _3248) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125))) * _3180;
                        _3028 = (_3195 * _3143.x) + _3101;
                        _3029 = (_3195 * _3143.y) + _3102;
                        _3030 = (_3195 * _3143.z) + _3103;
                        _3025 = (_3276 * _3160.x) + _3098;
                        _3026 = (_3276 * _3160.y) + _3099;
                        _3027 = (_3276 * _3160.z) + _3100;
                        if (_3105 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3105;
                        }
                    }
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                _2801 = frontier_phi_66_pred;
                _2811 = frontier_phi_66_pred_1;
                _2809 = frontier_phi_66_pred_2;
                _2807 = frontier_phi_66_pred_3;
                _2805 = frontier_phi_66_pred_4;
                _2803 = frontier_phi_66_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2801;
                    _2954 = _2803;
                    _2955 = _2805;
                    _2956 = _2807;
                    _2957 = _2809;
                    _2958 = _2811;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2817) & _2699) == 0u)
        {
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
            _2929 = _2808;
            _2931 = _2810;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2947 = _2946 * _2653;
            float _2948 = _2946 * _2654;
            float _2949 = _2946 * _2655;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3081 = _2800;
                float _3082 = _2802;
                float _3083 = _2804;
                float _3084 = _2806;
                float _3085 = _2808;
                float _3086 = _2810;
                uint _3087 = _2817;
                uint _3096;
                bool _3097;
                for (;;)
                {
                    _3096 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                    _3097 = _3096 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3097)
                    {
                        frontier_phi_77_pred = _3086;
                        frontier_phi_77_pred_1 = _3085;
                        frontier_phi_77_pred_2 = _3084;
                        frontier_phi_77_pred_3 = _3083;
                        frontier_phi_77_pred_4 = _3082;
                        frontier_phi_77_pred_5 = _3081;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        uint _3309 = _3096;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3087 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2655, _3427.z, fma(_2654, _3427.y, _3427.x * _2653)) + _3427.w;
                            _3440 = !((fma(_2655, _3408.z, fma(_2654, _3408.y, _3408.x * _2653)) + _3408.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _2653;
                                float _3468 = _3335.y - _2654;
                                float _3469 = _3335.z - _2655;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4640 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_926, _929, _932))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2655, _3378.z, fma(_2654, _3378.y, _3378.x * _2653)) + _3378.w) / _3439;
                                float _3499 = (fma(_2655, _3393.z, fma(_2654, _3393.y, _3393.x * _2653)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4656 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _986;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2947;
                                float _3529 = _3475 - _2948;
                                float _3530 = _3476 - _2949;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_926, _929, _932), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4667 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3542 = dot(vec3(_926, _929, _932), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4678 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_926, _929, _932), vec3(_3474, _3475, _3476))) + _3551;
                                float _4689 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4700 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3505 * _3351.y;
                                frontier_phi_83_pred_1 = _3505 * _3351.x;
                                frontier_phi_83_pred_2 = _3579 * _3363.z;
                                frontier_phi_83_pred_3 = _3579 * _3363.y;
                                frontier_phi_83_pred_4 = _3579 * _3363.x;
                                frontier_phi_83_pred_5 = _3505 * _3351.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_83_pred;
                            _3586 = frontier_phi_83_pred_1;
                            _3585 = frontier_phi_83_pred_2;
                            _3584 = frontier_phi_83_pred_3;
                            _3583 = frontier_phi_83_pred_4;
                            _3588 = frontier_phi_83_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3295;
                        frontier_phi_77_pred_1 = _3294;
                        frontier_phi_77_pred_2 = _3293;
                        frontier_phi_77_pred_3 = _3292;
                        frontier_phi_77_pred_4 = _3291;
                        frontier_phi_77_pred_5 = _3290;
                    }
                    _2932 = frontier_phi_77_pred;
                    _2930 = frontier_phi_77_pred_1;
                    _2928 = frontier_phi_77_pred_2;
                    _2926 = frontier_phi_77_pred_3;
                    _2924 = frontier_phi_77_pred_4;
                    _2922 = frontier_phi_77_pred_5;
                    uint _3088 = _3087 + 1u;
                    if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3081 = _2922;
                        _3082 = _2924;
                        _3083 = _2926;
                        _3084 = _2928;
                        _3085 = _2930;
                        _3086 = _2932;
                        _3087 = _3088;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            else
            {
                frontier_phi_58_59_ladder = _2804;
                frontier_phi_58_59_ladder_1 = _2810;
                frontier_phi_58_59_ladder_2 = _2808;
                frontier_phi_58_59_ladder_3 = _2806;
                frontier_phi_58_59_ladder_4 = _2802;
                frontier_phi_58_59_ladder_5 = _2800;
            }
            _2921 = frontier_phi_58_59_ladder_5;
            _2923 = frontier_phi_58_59_ladder_4;
            _2925 = frontier_phi_58_59_ladder;
            _2927 = frontier_phi_58_59_ladder_3;
            _2929 = frontier_phi_58_59_ladder_2;
            _2931 = frontier_phi_58_59_ladder_1;
        }
        float _2936 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2712 = (_2936 * _2927) + _2167;
        _2714 = (_2936 * _2929) + _2169;
        _2716 = (_2936 * _2931) + _2171;
        _2718 = ((_2921 * 0.039999999105930328369140625) * _2936) + _2497;
        _2720 = ((_2923 * 0.039999999105930328369140625) * _2936) + _2499;
        _2722 = ((_2925 * 0.039999999105930328369140625) * _2936) + _2501;
    }
    else
    {
        _2712 = _2167;
        _2714 = _2169;
        _2716 = _2171;
        _2718 = _2497;
        _2720 = _2499;
        _2722 = _2501;
    }
    float _4716 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4727 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4738 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2739 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2712 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _970))) + ((_2718 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2714 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _970))) + ((_2720 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2741 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2716 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _970))) + ((_2722 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _2742 = _279 + 6u;
    float _2750 = _907 / cbSceneParam._m0[86u].x;
    float _2751 = _908 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _2826 = _2825 / _829;
        float _2837 = _2826 * _880;
        float _2838 = _881 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2841 = _2826 * _882;
        float _2843 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2844 = _2843 + cbSceneParam._m0[79u].w;
        float _2845 = cbSceneParam._m0[79u].w - _2838;
        float _2851 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2841 * _2841));
        float _2854 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2851;
        float _2859 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2861 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3038;
        if (abs((_2839 - _2843) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3038 = ((((_2844 > 0.0) ? exp2(_2859 * _2844) : (2.0 - exp2(_2861 * _2844))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2854;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : max(_2844, _2845));
            float _2984 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : min(_2844, _2845));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3038 = ((abs(_2851 / _2839) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2859 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2859 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2861 * _2993) - exp2(_2861 * _2994)) * _2982))) + (_2854 * cbSceneParam._m0[80u].z);
        }
        vec4 _3040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3049 = exp2((_3038 * (-1.44269502162933349609375)) * (1.0 - _3040.w));
        float _3050 = log2(_3049);
        float _3066 = log2(_2770);
        _2863 = (exp2(_3066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].x)) * _3040.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2865 = (exp2(_3066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].y)) * _3040.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2867 = (exp2(_3066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].z)) * _3040.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2869 = _3049 * _2770;
    }
    else
    {
        _2863 = _2767;
        _2865 = _2768;
        _2867 = _2769;
        _2869 = _2770;
    }
    bool _3076;
    vec4 _2879;
    vec4 _2901;
    float _2903;
    float _2907;
    float _2908;
    float _2909;
    float _2910;
    bool _2920;
    for (;;)
    {
        _2879 = cbMatDynParam._m0[0u];
        float _2881 = roundEven(_2879.y);
        bool _2882 = _2881 == 3.0;
        float _2883 = log2(_2869);
        float _2890 = exp2(_2883 * cbSceneParam._m0[78u].x) * _2739;
        float _2891 = exp2(_2883 * cbSceneParam._m0[78u].y) * _2740;
        float _2892 = exp2(_2883 * cbSceneParam._m0[78u].z) * _2741;
        float _2899 = _896 + (-0.5);
        _2901 = cbMtdParam._m0[1u];
        _2903 = _2901.y * _2899;
        float _2906 = (_2881 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2907 = _2906 * (_2882 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2863)));
        _2908 = _2906 * (_2882 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2865)));
        _2909 = _2906 * (_2882 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2867)));
        _2910 = _2899 * 0.999000012874603271484375;
        _2920 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2920)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2910) < 0.5)
            {
                _3076 = true;
                break;
            }
        }
        uint _3017 = _945 + uint(_2879.w);
        if ((cbInstanceData._m0[_3017].w < 1.0) && ((cbInstanceData._m0[_3017].w + _2910) < 0.5))
        {
            _3076 = true;
            break;
        }
        if ((_2903 + 1.0) < _2901.x)
        {
            _3076 = true;
            break;
        }
        _3076 = false;
        break;
    }
    float _3281;
    if (_3076)
    {
        discard_state = true;
        _3281 = 0.0;
    }
    else
    {
        _3281 = cbInstanceData._m0[_2742].w;
    }
    SV_Target.x = _2907;
    SV_Target.y = _2908;
    SV_Target.z = _2909;
    SV_Target.w = _3281;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2742].w;
    discard_exit();
}


