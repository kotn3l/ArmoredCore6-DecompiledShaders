#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1482;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3874 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3885 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3896 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3907 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _461 = (_454 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _462 = (_454 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _463 = (_454 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3918 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _583 = dot(vec4(_573, _571.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _595 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _384.z) * 2.0) - ((((_573 - _583) * cbMtdParam._m0[24u].z) + _583) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3929 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _603 = (_596 * ((_554.x * cbMtdParam._m0[14u].x) - _534)) + _534;
    float _604 = (_596 * ((_554.y * cbMtdParam._m0[14u].y) - _535)) + _535;
    float _605 = (_596 * ((_554.z * cbMtdParam._m0[14u].z) - _536)) + _536;
    float _609 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _603;
    float _612 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _604;
    float _615 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _605;
    float _622 = ((_603 - _609) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _609;
    float _623 = ((_604 - _612) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _612;
    float _624 = ((_605 - _615) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _615;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _705 = _701.z;
    float _712 = ((_684.x - _703) * _454) + _703;
    float _713 = ((_684.y - _704) * _454) + _704;
    float _714 = ((_684.z - _705) * _454) + _705;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _737 = ((_726.x - _712) * _527) + _712;
    float _738 = ((_726.y - _713) * _527) + _713;
    float _739 = ((_726.z - _714) * _527) + _714;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _764 = ((_751.z - _739) * _596) + _739;
    float _767 = ((((_751.x - _737) * _596) + _737) * 2.0) + (-1.0);
    float _768 = ((((_751.y - _738) * _596) + _738) * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3940 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _815 = _813.x;
    float _816 = 1.0 - _815;
    float _829 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_815 - _816) * cbMtdParam._m0[24u].w) + _816) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3951 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _830 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _837 = (_830 * ((_642.x * cbMtdParam._m0[18u].x) - _622)) + _622;
    float _838 = (_830 * ((_642.y * cbMtdParam._m0[18u].y) - _623)) + _623;
    float _839 = (_830 * ((_642.z * cbMtdParam._m0[18u].z) - _624)) + _624;
    float _844 = (((_661.z - _764) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _764;
    float _848 = ((_788.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _861 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _868 = (_861.x * 2.0) + (-1.0);
    float _869 = (_861.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _3962 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _878 = (_830 * (_861.z - _848)) + _848;
    float _887 = (_767 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_661.x * 2.0) + (-1.0)))) + (((_788.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _888 = (_768 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_661.y * 2.0) + (-1.0)))) + (((_788.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _900 = (((_868 - _887) + (cbMtdParam._m0[21u].x * _887)) * _830) + _887;
    float _901 = (((_869 - _888) + (cbMtdParam._m0[21u].x * _888)) * _830) + _888;
    float _902 = (_830 * (sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) - _774)) + _774;
    float _906 = cbMtdParam._m0[22u].x + _788.w;
    float _909 = fma(_902, _248 * NORMAL.x, fma(_901, _255 * TANGENT.x, (_241 * _233) * _900));
    float _912 = fma(_902, _248 * NORMAL.y, fma(_901, _255 * TANGENT.y, (_241 * _234) * _900));
    float _915 = fma(_902, _248 * NORMAL.z, fma(_901, _255 * TANGENT.z, (_241 * _235) * _900));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _3973 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _923 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _3995 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4006 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4017 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _941 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _993 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _983);
    float _994 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _983);
    float _995 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _983);
    float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
    float _1000 = _993 * _999;
    float _1001 = _994 * _999;
    float _1002 = _995 * _999;
    vec4 _1007 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1009 = _1007.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1163 = sqrt(((_993 * _993) + (_994 * _994)) + (_995 * _995));
        float _1169 = (cbMatDynParam._m0[5u].x * _1163) + cbMatDynParam._m0[5u].y;
        float _4028 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1174 = (cbMatDynParam._m0[5u].z * _1163) + cbMatDynParam._m0[5u].w;
        float _4039 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) - _1170)) + _1170) < ((_1009 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1020 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1021 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1039 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1042 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1045 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1058 = _282 + 9u;
    uint _1059 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _1065 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1059].x;
    float _1066 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1059].y;
    float _1067 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1059].z;
    float _4050 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1020, cbSceneParam._m0[86u].y * _1021));
    float _1083 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * TEXCOORD_5.w) * _1079.x;
    float _1084 = dot(vec3(_920, _921, _922), vec3(_1000, _1001, _1002));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _920) - _1000;
    float _1092 = (_1087 * _921) - _1001;
    float _1093 = (_1087 * _922) - _1002;
    float _1097 = abs(dot(vec3(_1000, _1001, _1002), vec3(_920, _921, _922)));
    float _4083 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_923);
    float _1112 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1481;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1206 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1210 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1214 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1239 = _1144 + _920;
        float _1240 = _1148 + _921;
        float _1241 = _1152 + _922;
        float _1251 = fma(_1241, cbModelParam._m0[26u].z, fma(_1240, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1239)) - _1206;
        float _1252 = fma(_1241, cbModelParam._m0[27u].z, fma(_1240, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1239)) - _1210;
        float _1253 = fma(_1241, cbModelParam._m0[28u].z, fma(_1240, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1239)) - _1214;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1206 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1210 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[34u].z) + ((((((_1214 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1309 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1275.x + (-0.5));
        float _1311 = _1309 * (_1275.y + (-0.5));
        float _1312 = _1309 * (_1275.z + (-0.5));
        float _1319 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1282.x + (-0.5));
        float _1321 = _1319 * (_1282.y + (-0.5));
        float _1322 = _1319 * (_1282.z + (-0.5));
        float _1329 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1289.x + (-0.5));
        float _1331 = _1329 * (_1289.y + (-0.5));
        float _1332 = _1329 * (_1289.z + (-0.5));
        float _1339 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1296.x + (-0.5));
        float _1341 = _1339 * (_1296.y + (-0.5));
        float _1342 = _1339 * (_1296.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1363 = (dot(vec3(_920, _921, _922), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1373 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4131 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1375 + 1.0))) + _1380) * _1343;
        float _1390 = _1311 * 0.5;
        float _1391 = _1321 * 0.5;
        float _1392 = _1331 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_920, _921, _922), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4164 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1417 + 1.0))) + _1422) * _1344;
        float _1432 = _1312 * 0.5;
        float _1433 = _1322 * 0.5;
        float _1434 = _1332 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_920, _921, _922), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4197 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1459 + 1.0))) + _1464) * _1345;
        _1481 = _1312;
        _1483 = _1311;
        _1484 = _1310;
        _1485 = _1322;
        _1486 = _1321;
        _1487 = _1320;
        _1488 = _1332;
        _1489 = _1331;
        _1490 = _1330;
        _1491 = _1345;
        _1492 = _1344;
        _1493 = _1343;
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1482;
        _1483 = _1482;
        _1484 = _1482;
        _1485 = _1482;
        _1486 = _1482;
        _1487 = _1482;
        _1488 = _1482;
        _1489 = _1482;
        _1490 = _1482;
        _1491 = _1482;
        _1492 = _1482;
        _1493 = _1482;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1526 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1530 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1553 = _1144 + _920;
        float _1554 = _1148 + _921;
        float _1555 = _1152 + _922;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_920, _921, _922), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4260 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_920, _921, _922), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4293 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_920, _921, _922), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4326 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1482;
        _1792 = _1482;
        _1793 = _1482;
        _1794 = _1482;
        _1795 = _1482;
        _1796 = _1482;
        _1797 = _1482;
        _1798 = _1482;
        _1799 = _1482;
        _1800 = _1482;
        _1801 = _1482;
        _1802 = _1482;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1494)) + _1494;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1495)) + _1495;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1496)) + _1496;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1091 * 0.5;
    float _1860 = _1092 * 0.5;
    float _1861 = _1093 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1481, _1485, _1488, _1491));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1989 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1992 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2020 = frontier_phi_17_15_ladder;
        }
        float _2241;
        if (_1989 > 0.0)
        {
            _2241 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2241 = frontier_phi_26_22_ladder;
        }
        float _2487;
        if (_1992 > 0.0)
        {
            _2487 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2487 = frontier_phi_38_33_ladder;
        }
        float _2489 = isnan(_2241) ? _2020 : (isnan(_2020) ? _2241 : min(_2020, _2241));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1986) + _1975;
        float _2495 = (_2490 * _1989) + _1979;
        float _2496 = (_2490 * _1992) + _1983;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_16_38_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_16_38_ladder_2;
        _2010 = frontier_phi_16_38_ladder_1;
        _2012 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2070 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2074 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2078 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2081 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2084 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2087 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2246;
        if (_2081 > 0.0)
        {
            _2246 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2246 = frontier_phi_28_24_ladder;
        }
        float _2514;
        if (_2084 > 0.0)
        {
            _2514 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2514 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_2087 > 0.0)
        {
            _2719 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2719 = frontier_phi_49_46_ladder;
        }
        float _2721 = isnan(_2514) ? _2246 : (isnan(_2246) ? _2514 : min(_2246, _2514));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2081) + _2070;
        float _2727 = (_2722 * _2084) + _2074;
        float _2728 = (_2722 * _2087) + _2078;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_25_49_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2106 = frontier_phi_25_49_ladder_2;
        _2108 = frontier_phi_25_49_ladder_1;
        _2110 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _2017);
        _2106 = _2090.x * cbModelParam._m0[1u].z;
        _2108 = _2090.y * cbModelParam._m0[1u].z;
        _2110 = _2090.z * cbModelParam._m0[1u].z;
    }
    float _2122 = ((((1.0 - _1112) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1112 * _1099)) * _1083;
    float _2123 = _2122 * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2124 = _2122 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2125 = _2122 * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2128 = fma(_2125, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2123 * cbSceneParam._m0[89u].x));
    float _2131 = fma(_2125, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2123 * cbSceneParam._m0[90u].x));
    float _2134 = fma(_2125, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2123 * cbSceneParam._m0[91u].x));
    vec4 _2142 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1020, _1021));
    float _2144 = _2142.w;
    float _2156 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2144);
    float _2157 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2144);
    float _2158 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2144);
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _1083 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2200 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2204 = _2164 | 1u;
    float _2215 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_920, _921, _922));
    float _2218 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_920, _921, _922));
    float _4462 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _4473 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2223 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2225 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2232 = ((cbLight._m0[_2181].x * _2187) * _2225) + (((cbLight._m0[_2191].x * _2156) * _2200) * _2223);
    float _2233 = ((_2187 * cbLight._m0[_2181].y) * _2225) + (((cbLight._m0[_2191].y * _2157) * _2200) * _2223);
    float _2234 = ((_2187 * cbLight._m0[_2181].z) * _2225) + (((cbLight._m0[_2191].z * _2158) * _2200) * _2223);
    uvec4 _2238 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2240 = _2238.x == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2240)
    {
        _2251 = _2232;
        _2253 = _2233;
        _2255 = _2234;
    }
    else
    {
        uint _2259 = _2164 + 6u;
        float _2275 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4484 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2278 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2251 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2232;
        _2253 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2233;
        _2255 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2234;
    }
    bool _2258 = _2238.y == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2258)
    {
        _2296 = _2251;
        _2298 = _2253;
        _2300 = _2255;
    }
    else
    {
        uint _2458 = _2164 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4500 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2477 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2296 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2251;
        _2298 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2253;
        _2300 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2255;
    }
    uint _2303 = _2164 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _923) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2164].x + _1000;
    float _2319 = cbLight._m0[_2164].y + _1001;
    float _2320 = cbLight._m0[_2164].z + _1002;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2164].xyz));
    float _4516 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _4527 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2332 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2333 = dot(vec3(_920, _921, _922), vec3(_2325, _2326, _2327));
    float _4538 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2325, _2326, _2327));
    float _4549 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2356 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2357 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2332 * ((_2331 * _2357) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2357) + _2317) * _2331))) * _2331;
    float _4560 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2384 = _2164 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _923) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2204].x + _1000;
    float _2398 = cbLight._m0[_2204].y + _1001;
    float _2399 = cbLight._m0[_2204].z + _1002;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2204].xyz));
    float _4571 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2411 = dot(vec3(_920, _921, _922), vec3(_2404, _2405, _2406));
    float _4582 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2404, _2405, _2406));
    float _4593 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2396;
    float _2443 = (0.5 / (((_2332 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2433) + _2396) * _2410))) * _2410;
    float _4604 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2455 = (((_2432 * cbLight._m0[_2384].x) * _2445) * _2187) + ((((cbLight._m0[_2303].x * _2156) * _2356) * _2370) * _2200);
    float _2456 = (((_2432 * cbLight._m0[_2384].y) * _2445) * _2187) + ((((cbLight._m0[_2303].y * _2157) * _2356) * _2370) * _2200);
    float _2457 = (((_2432 * cbLight._m0[_2384].z) * _2445) * _2187) + ((((cbLight._m0[_2303].z * _2158) * _2356) * _2370) * _2200);
    float _2519;
    float _2521;
    float _2523;
    if (_2240)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2164 + 2u;
        uint _2529 = _2164 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _923) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _1000;
        float _2546 = cbLight._m0[_2525].y + _1001;
        float _2547 = cbLight._m0[_2525].z + _1002;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2525].xyz));
        float _4615 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2559 = dot(vec3(_920, _921, _922), vec3(_2552, _2553, _2554));
        float _4626 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4637 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2332 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2581) + _2544) * _2558))) * _2558;
        float _4648 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2519 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2455;
        _2521 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2456;
        _2523 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2457;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2258)
    {
        _2629 = _2519;
        _2631 = _2521;
        _2633 = _2523;
    }
    else
    {
        uint _2640 = _2164 + 3u;
        uint _2644 = _2164 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _923) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1000;
        float _2661 = cbLight._m0[_2640].y + _1001;
        float _2662 = cbLight._m0[_2640].z + _1002;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2640].xyz));
        float _4664 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2674 = dot(vec3(_920, _921, _922), vec3(_2667, _2668, _2669));
        float _4675 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4686 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2332 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2696) + _2659) * _2673))) * _2673;
        float _4697 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2519;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2521;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2523;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2162.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1021) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1020) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            uint _3091 = 0u;
            uint _3100;
            bool _3101;
            for (;;)
            {
                _3100 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                _3101 = _3100 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3101)
                {
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    uint _3236;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3100;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    for (;;)
                    {
                        uint _3240 = uint(findLSB(_3236)) + (_3091 << 5u);
                        uint _3237 = (_3236 + 4294967295u) & _3236;
                        uint _3242 = _3240 * 48u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3262 = (_3240 * 48u) + 4u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3281 = (_3240 * 48u) + 8u;
                        vec3 _3292 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x));
                        float _3296 = _3256.x - _2785;
                        float _3297 = _3256.y - _2786;
                        float _3298 = _3256.z - _2787;
                        float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                        float _3302 = inversesqrt(_3299);
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3306 = dot(vec3(_1039, _1042, _1045), vec3(_3303, _3304, _3305));
                        float _3311 = 1.0 - (_3299 * _3256.w);
                        float _4723 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3313 = sqrt(_3299) * _3275.w;
                        float _3316 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3306) + _3317;
                        float _3323 = _3313 * _3313;
                        float _3327 = ((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3312) / ((_3323 * 0.699999988079071044921875) + 1.0);
                        float _3331 = (-0.0) - _2785;
                        float _3332 = (-0.0) - _2786;
                        float _3333 = (-0.0) - _2787;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3348 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _1099;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_1039, _1042, _1045), vec3(_3338, _3339, _3340));
                        float _4739 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3373 = dot(vec3(_1039, _1042, _1045), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4750 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3316 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3306) + _3382;
                        float _4761 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4772 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3380 * _3380) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125))) * _3312;
                        _3160 = (_3327 * _3275.x) + _3233;
                        _3161 = (_3327 * _3275.y) + _3234;
                        _3162 = (_3327 * _3275.z) + _3235;
                        _3157 = (_3408 * _3292.x) + _3230;
                        _3158 = (_3408 * _3292.y) + _3231;
                        _3159 = (_3408 * _3292.z) + _3232;
                        if (_3237 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3237;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                _2933 = frontier_phi_66_pred;
                _2943 = frontier_phi_66_pred_1;
                _2941 = frontier_phi_66_pred_2;
                _2939 = frontier_phi_66_pred_3;
                _2937 = frontier_phi_66_pred_4;
                _2935 = frontier_phi_66_pred_5;
                uint _3092 = _3091 + 1u;
                if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3085 = _2933;
                    _3086 = _2935;
                    _3087 = _2937;
                    _3088 = _2939;
                    _3089 = _2941;
                    _3090 = _2943;
                    _3091 = _3092;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((4294967295u << _2949) & _2831) == 0u)
        {
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
        }
        else
        {
            float _3078 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3079 = _3078 * _2785;
            float _3080 = _3078 * _2786;
            float _3081 = _3078 * _2787;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3213 = _2932;
                float _3214 = _2934;
                float _3215 = _2936;
                float _3216 = _2938;
                float _3217 = _2940;
                float _3218 = _2942;
                uint _3219 = _2949;
                uint _3228;
                bool _3229;
                for (;;)
                {
                    _3228 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                    _3229 = _3228 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3229)
                    {
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        uint _3441 = _3228;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3510;
                        vec4 _3525;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3452 = ((_3219 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3497 = (_3452 * 40u) + 16u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3452 * 40u) + 20u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3452 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3452 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_2787, _3559.z, fma(_2786, _3559.y, _3559.x * _2785)) + _3559.w;
                            _3572 = !((fma(_2787, _3540.z, fma(_2786, _3540.y, _3540.x * _2785)) + _3540.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3467.x - _2785;
                                float _3600 = _3467.y - _2786;
                                float _3601 = _3467.z - _2787;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3468 * _3468));
                                float _4783 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3617 = sqrt(_3602) * _3483.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_1039, _1042, _1045))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_2787, _3510.z, fma(_2786, _3510.y, _3510.x * _2785)) + _3510.w) / _3571;
                                float _3631 = (fma(_2787, _3525.z, fma(_2786, _3525.y, _3525.x * _2785)) + _3525.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4799 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _1099;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_1039, _1042, _1045), vec3((-0.0) - _3079, (-0.0) - _3080, (-0.0) - _3081));
                                float _4810 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3674 = dot(vec3(_1039, _1042, _1045), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4821 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_1039, _1042, _1045), vec3(_3606, _3607, _3608))) + _3683;
                                float _4832 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4843 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3637 * _3483.y;
                                frontier_phi_83_pred_1 = _3637 * _3483.x;
                                frontier_phi_83_pred_2 = _3711 * _3495.z;
                                frontier_phi_83_pred_3 = _3711 * _3495.y;
                                frontier_phi_83_pred_4 = _3711 * _3495.x;
                                frontier_phi_83_pred_5 = _3637 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_83_pred;
                            _3718 = frontier_phi_83_pred_1;
                            _3717 = frontier_phi_83_pred_2;
                            _3716 = frontier_phi_83_pred_3;
                            _3715 = frontier_phi_83_pred_4;
                            _3720 = frontier_phi_83_pred_5;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3427;
                        frontier_phi_77_pred_1 = _3426;
                        frontier_phi_77_pred_2 = _3425;
                        frontier_phi_77_pred_3 = _3424;
                        frontier_phi_77_pred_4 = _3423;
                        frontier_phi_77_pred_5 = _3422;
                    }
                    _3064 = frontier_phi_77_pred;
                    _3062 = frontier_phi_77_pred_1;
                    _3060 = frontier_phi_77_pred_2;
                    _3058 = frontier_phi_77_pred_3;
                    _3056 = frontier_phi_77_pred_4;
                    _3054 = frontier_phi_77_pred_5;
                    uint _3220 = _3219 + 1u;
                    if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3213 = _3054;
                        _3214 = _3056;
                        _3215 = _3058;
                        _3216 = _3060;
                        _3217 = _3062;
                        _3218 = _3064;
                        _3219 = _3220;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3058;
                frontier_phi_58_59_ladder_1 = _3064;
                frontier_phi_58_59_ladder_2 = _3062;
                frontier_phi_58_59_ladder_3 = _3060;
                frontier_phi_58_59_ladder_4 = _3056;
                frontier_phi_58_59_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_58_59_ladder = _2936;
                frontier_phi_58_59_ladder_1 = _2942;
                frontier_phi_58_59_ladder_2 = _2940;
                frontier_phi_58_59_ladder_3 = _2938;
                frontier_phi_58_59_ladder_4 = _2934;
                frontier_phi_58_59_ladder_5 = _2932;
            }
            _3053 = frontier_phi_58_59_ladder_5;
            _3055 = frontier_phi_58_59_ladder_4;
            _3057 = frontier_phi_58_59_ladder;
            _3059 = frontier_phi_58_59_ladder_3;
            _3061 = frontier_phi_58_59_ladder_2;
            _3063 = frontier_phi_58_59_ladder_1;
        }
        float _3068 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _2844 = (_3068 * _3059) + _2296;
        _2846 = (_3068 * _3061) + _2298;
        _2848 = (_3068 * _3063) + _2300;
        _2850 = ((_3053 * 0.039999999105930328369140625) * _3068) + _2629;
        _2852 = ((_3055 * 0.039999999105930328369140625) * _3068) + _2631;
        _2854 = ((_3057 * 0.039999999105930328369140625) * _3068) + _2633;
    }
    else
    {
        _2844 = _2296;
        _2846 = _2298;
        _2848 = _2300;
        _2850 = _2629;
        _2852 = _2631;
        _2854 = _2633;
    }
    float _4859 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4870 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4881 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2871 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2844 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1083))) + ((_2850 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2846 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1083))) + ((_2852 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2848 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1083))) + ((_2854 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    uint _2874 = _282 + 6u;
    float _2882 = _1020 / cbSceneParam._m0[86u].x;
    float _2883 = _1021 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _941 : (isnan(_941) ? cbSceneParam._m0[77u].w : min(_941, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_941 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_941) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _941 : min(cbSceneParam._m0[80u].w, _941));
        float _2958 = _2957 / _941;
        float _2969 = _2958 * _993;
        float _2970 = _994 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2973 = _2958 * _995;
        float _2975 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2970;
        float _2983 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3170;
        if (abs((_2971 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3170 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3114 = 1.0 / cbSceneParam._m0[80u].x;
            float _3115 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3116 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            _3170 = ((abs(_2983 / _2971) * cbSceneParam._m0[80u].y) * ((((_3125 - _3126) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))))) * _3114)) - ((exp2(_2993 * _3125) - exp2(_2993 * _3126)) * _3114))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3181 = exp2((_3170 * (-1.44269502162933349609375)) * (1.0 - _3172.w));
        float _3182 = log2(_3181);
        float _3198 = log2(_2902);
        _2995 = (exp2(_3198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].x)) * _3172.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2997 = (exp2(_3198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].y)) * _3172.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2999 = (exp2(_3198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].z)) * _3172.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3001 = _3181 * _2902;
    }
    else
    {
        _2995 = _2899;
        _2997 = _2900;
        _2999 = _2901;
        _3001 = _2902;
    }
    bool _3208;
    vec4 _3011;
    vec4 _3033;
    float _3035;
    float _3039;
    float _3040;
    float _3041;
    float _3042;
    bool _3052;
    for (;;)
    {
        _3011 = cbMatDynParam._m0[0u];
        float _3013 = roundEven(_3011.y);
        bool _3014 = _3013 == 3.0;
        float _3015 = log2(_3001);
        float _3022 = exp2(_3015 * cbSceneParam._m0[78u].x) * _2871;
        float _3023 = exp2(_3015 * cbSceneParam._m0[78u].y) * _2872;
        float _3024 = exp2(_3015 * cbSceneParam._m0[78u].z) * _2873;
        float _3031 = _1009 + (-0.5);
        _3033 = cbMtdParam._m0[1u];
        _3035 = _3033.y * _3031;
        float _3038 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3039 = _3038 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
        _3040 = _3038 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
        _3041 = _3038 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
        _3042 = _3031 * 0.999000012874603271484375;
        _3052 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3052)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3042) < 0.5)
            {
                _3208 = true;
                break;
            }
        }
        uint _3149 = _1058 + uint(_3011.w);
        if ((cbInstanceData._m0[_3149].w < 1.0) && ((cbInstanceData._m0[_3149].w + _3042) < 0.5))
        {
            _3208 = true;
            break;
        }
        if ((_3035 + 1.0) < _3033.x)
        {
            _3208 = true;
            break;
        }
        _3208 = false;
        break;
    }
    float _3413;
    if (_3208)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = cbInstanceData._m0[_2874].w;
    }
    SV_Target.x = _3039;
    SV_Target.y = _3040;
    SV_Target.z = _3041;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
    discard_exit();
}


