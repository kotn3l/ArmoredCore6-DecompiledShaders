#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1341;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3643 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _411 = (_404 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _412 = (_404 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _413 = (_404 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3654 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _264) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _265) + cbTextureTilingScale._m0[24u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _545 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _332.z) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3665 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _553 = (_546 * ((_504.x * cbMtdParam._m0[14u].x) - _484)) + _484;
    float _554 = (_546 * ((_504.y * cbMtdParam._m0[14u].y) - _485)) + _485;
    float _555 = (_546 * ((_504.z * cbMtdParam._m0[14u].z) - _486)) + _486;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _612 = _610.x;
    float _613 = _610.y;
    float _614 = _610.z;
    float _621 = ((_593.x - _612) * _404) + _612;
    float _622 = ((_593.y - _613) * _404) + _613;
    float _623 = ((_593.z - _614) * _404) + _614;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_635.x - _621) * _477) + _621;
    float _647 = ((_635.y - _622) * _477) + _622;
    float _648 = ((_635.z - _623) * _477) + _623;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _264) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _265) + cbTextureTilingScale._m0[23u].w));
    float _673 = ((_660.z - _648) * _546) + _648;
    float _676 = ((((_660.x - _646) * _546) + _646) * 2.0) + (-1.0);
    float _678 = ((((_660.y - _647) * _546) + _647) * 2.0) + (-1.0);
    float _679 = dot(vec2(_676, _678), vec2(_676, _678));
    float _3676 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _739 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3687 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _747 = (_740 * ((_573.x * cbMtdParam._m0[18u].x) - _553)) + _553;
    float _748 = (_740 * ((_573.y * cbMtdParam._m0[18u].y) - _554)) + _554;
    float _749 = (_740 * ((_573.z * cbMtdParam._m0[18u].z) - _555)) + _555;
    float _753 = (cbMtdParam._m0[19u].w * (_698.z - _673)) + _673;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3698 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = (_740 * (_766.z - _753)) + _753;
    float _786 = (((_698.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _676;
    float _787 = (((_698.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _678;
    float _799 = (((_773 - _786) + (cbMtdParam._m0[21u].x * _786)) * _740) + _786;
    float _800 = (((_774 - _787) + (cbMtdParam._m0[21u].x * _787)) * _740) + _787;
    float _801 = (_740 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _684)) + _684;
    float _805 = cbMtdParam._m0[22u].x + _698.w;
    float _808 = fma(_801, _231 * NORMAL.x, fma(_800, _238 * TANGENT.x, (_224 * _216) * _799));
    float _811 = fma(_801, _231 * NORMAL.y, fma(_800, _238 * TANGENT.y, (_224 * _217) * _799));
    float _814 = fma(_801, _231 * NORMAL.z, fma(_800, _238 * TANGENT.z, (_224 * _218) * _799));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3709 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _822 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3731 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3742 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3753 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _929 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _932 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _946 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_946].z;
    float _3764 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _970 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _966.x;
    float _971 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _819) - _899;
    float _979 = (_974 * _820) - _900;
    float _980 = (_974 * _821) - _901;
    float _984 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _3797 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_822);
    float _999 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1069 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1073 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1098 = _1031 + _819;
        float _1099 = _1035 + _820;
        float _1100 = _1039 + _821;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_819, _820, _821), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3845 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_819, _820, _821), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3878 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_819, _820, _821), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3911 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1378 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1382 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1386 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1409 = _1031 + _819;
        float _1410 = _1035 + _820;
        float _1411 = _1039 + _821;
        float _1421 = fma(_1411, cbModelParam._m0[30u].z, fma(_1410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409)) - _1378;
        float _1422 = fma(_1411, cbModelParam._m0[31u].z, fma(_1410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409)) - _1382;
        float _1423 = fma(_1411, cbModelParam._m0[32u].z, fma(_1410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409)) - _1386;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1440 = ((_1427 * _1421) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1378 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1427 * _1422) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1382 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1427 * _1423) / cbModelParam._m0[35u].z) + ((((((_1386 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        float _1477 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1444.x + (-0.5));
        float _1479 = _1477 * (_1444.y + (-0.5));
        float _1480 = _1477 * (_1444.z + (-0.5));
        float _1487 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1451.x + (-0.5));
        float _1489 = _1487 * (_1451.y + (-0.5));
        float _1490 = _1487 * (_1451.z + (-0.5));
        float _1497 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1458.x + (-0.5));
        float _1499 = _1497 * (_1458.y + (-0.5));
        float _1500 = _1497 * (_1458.z + (-0.5));
        float _1507 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1465.x + (-0.5));
        float _1509 = _1507 * (_1465.y + (-0.5));
        float _1510 = _1507 * (_1465.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_819, _820, _821), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _3974 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1541 + 1.0))) + _1546) * _1511;
        float _1556 = _1479 * 0.5;
        float _1557 = _1489 * 0.5;
        float _1558 = _1499 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_819, _820, _821), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4007 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1583 + 1.0))) + _1588) * _1512;
        float _1598 = _1480 * 0.5;
        float _1599 = _1490 * 0.5;
        float _1600 = _1500 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_819, _820, _821), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4040 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1625 + 1.0))) + _1630) * _1513;
        _1647 = _1480;
        _1648 = _1479;
        _1649 = _1478;
        _1650 = _1490;
        _1651 = _1489;
        _1652 = _1488;
        _1653 = _1500;
        _1654 = _1499;
        _1655 = _1498;
        _1656 = _1513;
        _1657 = _1512;
        _1658 = _1511;
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1341;
        _1648 = _1341;
        _1649 = _1341;
        _1650 = _1341;
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1353)) + _1353;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1354)) + _1354;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1355)) + _1355;
    float _1694 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1671));
    float _1715 = _978 * 0.5;
    float _1716 = _979 * 0.5;
    float _1717 = _980 * 0.5;
    float _1718 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1721 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1724 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1758;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1731 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1735 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1739 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1746 = dot(vec4(cbModelParam._m0[39u]), vec4(_1715, _1716, _1717, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1769;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1760 = dot(vec4(cbModelParam._m0[40u]), vec4(_1715, _1716, _1717, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1773 = (_1769 * cbModelParam._m0[1u].x) + (_1758 * (1.0 - cbModelParam._m0[1u].x));
    float _1783 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1783 : min(cbModelParam._m0[25u].z, _1783));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1845 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1848 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1876 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1845 > 0.0)
        {
            _2076 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2319;
        if (_1848 > 0.0)
        {
            _2319 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2319 = frontier_phi_35_30_ladder;
        }
        float _2321 = isnan(_2076) ? _1876 : (isnan(_1876) ? _2076 : min(_1876, _2076));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1842) + _1831;
        float _2327 = (_2322 * _1845) + _1835;
        float _2328 = (_2322 * _1848) + _1839;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1784);
            frontier_phi_13_35_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_13_35_ladder_2;
        _1866 = frontier_phi_13_35_ladder_1;
        _1868 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1784);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1940 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1943 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2081;
        if (_1937 > 0.0)
        {
            _2081 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2346;
        if (_1940 > 0.0)
        {
            _2346 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2346 = frontier_phi_37_32_ladder;
        }
        float _2551;
        if (_1943 > 0.0)
        {
            _2551 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2551 = frontier_phi_46_43_ladder;
        }
        float _2553 = isnan(_2346) ? _2081 : (isnan(_2081) ? _2346 : min(_2081, _2346));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1937) + _1926;
        float _2559 = (_2554 * _1940) + _1930;
        float _2560 = (_2554 * _1943) + _1934;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_22_46_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_46_ladder_2;
        _1964 = frontier_phi_22_46_ladder_1;
        _1966 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1873);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1978 = ((((1.0 - _999) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_999 * _986)) * _970;
    float _1979 = _1978 * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1980 = _1978 * ((cbModelParam._m0[1u].w * (_1964 - _1866)) + _1866);
    float _1981 = _1978 * ((cbModelParam._m0[1u].w * (_1966 - _1868)) + _1868);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _970 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2035 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2039 = _2002 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_819, _820, _821));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_819, _820, _821));
    float _4176 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4187 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2019].x * _2025) * _2060) + ((cbLight._m0[_2029].x * _2035) * _2058);
    float _2068 = ((_2025 * cbLight._m0[_2019].y) * _2060) + ((_2035 * cbLight._m0[_2029].y) * _2058);
    float _2069 = ((_2025 * cbLight._m0[_2019].z) * _2060) + ((_2035 * cbLight._m0[_2029].z) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2075)
    {
        _2086 = _2067;
        _2088 = _2068;
        _2090 = _2069;
    }
    else
    {
        uint _2094 = _2002 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4198 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2113 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _2067;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _2068;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _2069;
    }
    bool _2093 = _2073.y == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2093)
    {
        _2131 = _2086;
        _2133 = _2088;
        _2135 = _2090;
    }
    else
    {
        uint _2290 = _2002 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4214 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2309 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2131 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2086;
        _2133 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2088;
        _2135 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2090;
    }
    uint _2138 = _2002 + 8u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _822) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_2002].x + _899;
    float _2154 = cbLight._m0[_2002].y + _900;
    float _2155 = cbLight._m0[_2002].z + _901;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2002].xyz));
    float _4230 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2167 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2168 = dot(vec3(_819, _820, _821), vec3(_2160, _2161, _2162));
    float _4252 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2160, _2161, _2162));
    float _4263 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2152 * _2152;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2192 = 1.0 - _2152;
    float _2203 = (0.5 / (((_2167 * ((_2166 * _2192) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2192) + _2152) * _2166))) * _2166;
    float _4274 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    uint _2216 = _2002 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _822) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2039].x + _899;
    float _2230 = cbLight._m0[_2039].y + _900;
    float _2231 = cbLight._m0[_2039].z + _901;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2039].xyz));
    float _4285 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2243 = dot(vec3(_819, _820, _821), vec3(_2236, _2237, _2238));
    float _4296 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2236, _2237, _2238));
    float _4307 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2265 = 1.0 - _2228;
    float _2275 = (0.5 / (((_2167 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2265) + _2228) * _2242))) * _2242;
    float _4318 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2287 = (((_2264 * cbLight._m0[_2216].x) * _2277) * _2025) + (((_2191 * cbLight._m0[_2138].x) * _2205) * _2035);
    float _2288 = (((_2264 * cbLight._m0[_2216].y) * _2277) * _2025) + (((_2191 * cbLight._m0[_2138].y) * _2205) * _2035);
    float _2289 = (((_2264 * cbLight._m0[_2216].z) * _2277) * _2025) + (((_2191 * cbLight._m0[_2138].z) * _2205) * _2035);
    float _2351;
    float _2353;
    float _2355;
    if (_2075)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _2002 + 2u;
        uint _2361 = _2002 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _822) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _899;
        float _2378 = cbLight._m0[_2357].y + _900;
        float _2379 = cbLight._m0[_2357].z + _901;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2357].xyz));
        float _4329 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2391 = dot(vec3(_819, _820, _821), vec3(_2384, _2385, _2386));
        float _4340 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4351 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2167 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2413) + _2376) * _2390))) * _2390;
        float _4362 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2351 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2287;
        _2353 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2288;
        _2355 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2289;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2093)
    {
        _2461 = _2351;
        _2463 = _2353;
        _2465 = _2355;
    }
    else
    {
        uint _2472 = _2002 + 3u;
        uint _2476 = _2002 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _822) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _899;
        float _2493 = cbLight._m0[_2472].y + _900;
        float _2494 = cbLight._m0[_2472].z + _901;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2472].xyz));
        float _4378 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2506 = dot(vec3(_819, _820, _821), vec3(_2499, _2500, _2501));
        float _4389 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4400 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2167 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2528) + _2491) * _2505))) * _2505;
        float _4411 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2461 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2351;
        _2463 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2353;
        _2465 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2355;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_2000.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            uint _2915 = 0u;
            uint _2924;
            bool _2925;
            for (;;)
            {
                _2924 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                _2925 = _2924 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2925)
                {
                    frontier_phi_61_pred = _2909;
                    frontier_phi_61_pred_1 = _2914;
                    frontier_phi_61_pred_2 = _2913;
                    frontier_phi_61_pred_3 = _2912;
                    frontier_phi_61_pred_4 = _2911;
                    frontier_phi_61_pred_5 = _2910;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2924;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2915 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _2617;
                        float _3100 = _3059.y - _2618;
                        float _3101 = _3059.z - _2619;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_926, _929, _932), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4437 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _2617;
                        float _3135 = (-0.0) - _2618;
                        float _3136 = (-0.0) - _2619;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3151 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _986;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_926, _929, _932), vec3(_3141, _3142, _3143));
                        float _4453 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3176 = dot(vec3(_926, _929, _932), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4464 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3119 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3109) + _3185;
                        float _4475 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4486 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3183 * _3183) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2968 = (_3130 * _3078.x) + _3036;
                        _2969 = (_3130 * _3078.y) + _3037;
                        _2970 = (_3130 * _3078.z) + _3038;
                        _2965 = (_3211 * _3095.x) + _3033;
                        _2966 = (_3211 * _3095.y) + _3034;
                        _2967 = (_3211 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_61_pred = _2965;
                    frontier_phi_61_pred_1 = _2970;
                    frontier_phi_61_pred_2 = _2969;
                    frontier_phi_61_pred_3 = _2968;
                    frontier_phi_61_pred_4 = _2967;
                    frontier_phi_61_pred_5 = _2966;
                }
                _2765 = frontier_phi_61_pred;
                _2775 = frontier_phi_61_pred_1;
                _2773 = frontier_phi_61_pred_2;
                _2771 = frontier_phi_61_pred_3;
                _2769 = frontier_phi_61_pred_4;
                _2767 = frontier_phi_61_pred_5;
                uint _2916 = _2915 + 1u;
                if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2909 = _2765;
                    _2910 = _2767;
                    _2911 = _2769;
                    _2912 = _2771;
                    _2913 = _2773;
                    _2914 = _2775;
                    _2915 = _2916;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((4294967295u << _2781) & _2663) == 0u)
        {
            _2877 = _2764;
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
        }
        else
        {
            float _2902 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2903 = _2902 * _2617;
            float _2904 = _2902 * _2618;
            float _2905 = _2902 * _2619;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _3016 = _2764;
                float _3017 = _2766;
                float _3018 = _2768;
                float _3019 = _2770;
                float _3020 = _2772;
                float _3021 = _2774;
                uint _3022 = _2781;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3032)
                    {
                        frontier_phi_67_pred = _3019;
                        frontier_phi_67_pred_1 = _3020;
                        frontier_phi_67_pred_2 = _3021;
                        frontier_phi_67_pred_3 = _3018;
                        frontier_phi_67_pred_4 = _3017;
                        frontier_phi_67_pred_5 = _3016;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        uint _3235 = _3031;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3304;
                        vec4 _3319;
                        float _3365;
                        bool _3366;
                        for (;;)
                        {
                            uint _3246 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3291 = (_3246 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3246 * 40u) + 20u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3246 * 40u) + 24u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3340 = (_3246 * 40u) + 28u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3365 = fma(_2619, _3353.z, fma(_2618, _3353.y, _3353.x * _2617)) + _3353.w;
                            _3366 = !((fma(_2619, _3334.z, fma(_2618, _3334.y, _3334.x * _2617)) + _3334.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3366)
                            {
                                float _3393 = _3261.x - _2617;
                                float _3394 = _3261.y - _2618;
                                float _3395 = _3261.z - _2619;
                                float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                                float _3399 = inversesqrt(_3396);
                                float _3400 = _3399 * _3393;
                                float _3401 = _3399 * _3394;
                                float _3402 = _3399 * _3395;
                                float _3406 = 1.0 - (_3396 / (_3262 * _3262));
                                float _4497 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3411 = sqrt(_3396) * _3277.w;
                                float _3413 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                                float _3414 = _3413 * _3413;
                                float _3417 = ((1.0 - _3414) * dot(vec3(_3400, _3401, _3402), vec3(_926, _929, _932))) + _3414;
                                float _3420 = _3411 * _3411;
                                float _3424 = (fma(_2619, _3304.z, fma(_2618, _3304.y, _3304.x * _2617)) + _3304.w) / _3365;
                                float _3425 = (fma(_2619, _3319.z, fma(_2618, _3319.y, _3319.x * _2617)) + _3319.w) / _3365;
                                float _3429 = 1.0 - dot(vec2(_3424, _3425), vec2(_3424, _3425));
                                float _4513 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3431 = _3430 * (((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3407) / ((_3420 * 0.699999988079071044921875) + 1.0));
                                float _3443 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                                float _3444 = 1.0 - _986;
                                float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                                float _3452 = _3451 * _3451;
                                float _3453 = _3452 * _3452;
                                float _3454 = _3400 - _2903;
                                float _3455 = _3401 - _2904;
                                float _3456 = _3402 - _2905;
                                float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                                float _3464 = dot(vec3(_926, _929, _932), vec3((-0.0) - _2903, (-0.0) - _2904, (-0.0) - _2905));
                                float _4524 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3468 = dot(vec3(_926, _929, _932), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                                float _4535 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3471 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                                float _3476 = _3413 * _3452;
                                float _3477 = _3476 * _3476;
                                float _3483 = ((1.0 - _3477) * dot(vec3(_926, _929, _932), vec3(_3400, _3401, _3402))) + _3477;
                                float _4546 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3485 = 1.0 - _3452;
                                float _3495 = (0.5 / (((_3484 * ((_3467 * _3485) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3452) * _3467))) * _3484;
                                float _4557 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3505 = (_3430 * _3407) * (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3475 * _3475) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3505 * _3289.x;
                                frontier_phi_73_pred_1 = _3505 * _3289.y;
                                frontier_phi_73_pred_2 = _3431 * _3277.z;
                                frontier_phi_73_pred_3 = _3431 * _3277.y;
                                frontier_phi_73_pred_4 = _3431 * _3277.x;
                                frontier_phi_73_pred_5 = _3505 * _3289.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3509 = frontier_phi_73_pred;
                            _3510 = frontier_phi_73_pred_1;
                            _3514 = frontier_phi_73_pred_2;
                            _3513 = frontier_phi_73_pred_3;
                            _3512 = frontier_phi_73_pred_4;
                            _3511 = frontier_phi_73_pred_5;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3221 = _3514 + _3234;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3219;
                        frontier_phi_67_pred_1 = _3220;
                        frontier_phi_67_pred_2 = _3221;
                        frontier_phi_67_pred_3 = _3218;
                        frontier_phi_67_pred_4 = _3217;
                        frontier_phi_67_pred_5 = _3216;
                    }
                    _2884 = frontier_phi_67_pred;
                    _2886 = frontier_phi_67_pred_1;
                    _2888 = frontier_phi_67_pred_2;
                    _2882 = frontier_phi_67_pred_3;
                    _2880 = frontier_phi_67_pred_4;
                    _2878 = frontier_phi_67_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2878;
                        _3017 = _2880;
                        _3018 = _2882;
                        _3019 = _2884;
                        _3020 = _2886;
                        _3021 = _2888;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2886;
                frontier_phi_55_56_ladder_1 = _2888;
                frontier_phi_55_56_ladder_2 = _2884;
                frontier_phi_55_56_ladder_3 = _2882;
                frontier_phi_55_56_ladder_4 = _2880;
                frontier_phi_55_56_ladder_5 = _2878;
            }
            else
            {
                frontier_phi_55_56_ladder = _2772;
                frontier_phi_55_56_ladder_1 = _2774;
                frontier_phi_55_56_ladder_2 = _2770;
                frontier_phi_55_56_ladder_3 = _2768;
                frontier_phi_55_56_ladder_4 = _2766;
                frontier_phi_55_56_ladder_5 = _2764;
            }
            _2877 = frontier_phi_55_56_ladder_5;
            _2879 = frontier_phi_55_56_ladder_4;
            _2881 = frontier_phi_55_56_ladder_3;
            _2883 = frontier_phi_55_56_ladder_2;
            _2885 = frontier_phi_55_56_ladder;
            _2887 = frontier_phi_55_56_ladder_1;
        }
        float _2892 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2676 = (_2892 * _2883) + _2131;
        _2678 = (_2892 * _2885) + _2133;
        _2680 = (_2892 * _2887) + _2135;
        _2682 = ((_2877 * 0.039999999105930328369140625) * _2892) + _2461;
        _2684 = ((_2879 * 0.039999999105930328369140625) * _2892) + _2463;
        _2686 = ((_2881 * 0.039999999105930328369140625) * _2892) + _2465;
    }
    else
    {
        _2676 = _2131;
        _2678 = _2133;
        _2680 = _2135;
        _2682 = _2461;
        _2684 = _2463;
        _2686 = _2465;
    }
    float _4573 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4584 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4595 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    uint _2706 = _244 + 6u;
    float _2714 = _907 / cbSceneParam._m0[86u].x;
    float _2715 = _908 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _2790 = _2789 / _840;
        float _2801 = _2790 * _892;
        float _2802 = _893 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2805 = _2790 * _894;
        float _2807 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2802;
        float _2815 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2978;
        if (abs((_2803 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2978 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2938 = 1.0 / cbSceneParam._m0[80u].x;
            float _2939 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2940 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            _2978 = ((abs(_2815 / _2803) * cbSceneParam._m0[80u].y) * ((((_2949 - _2950) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))))) * _2938)) - ((exp2(_2825 * _2949) - exp2(_2825 * _2950)) * _2938))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _2980 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _2989 = exp2((_2978 * (-1.44269502162933349609375)) * (1.0 - _2980.w));
        float _2990 = log2(_2989);
        float _3006 = log2(_2734);
        _2827 = (exp2(_3006 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].x)) * _2980.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2829 = (exp2(_3006 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].y)) * _2980.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2831 = (exp2(_3006 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].z)) * _2980.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2833 = _2989 * _2734;
    }
    else
    {
        _2827 = _2731;
        _2829 = _2732;
        _2831 = _2733;
        _2833 = _2734;
    }
    float _2845 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2846 = _2845 == 3.0;
    float _2847 = log2(_2833);
    float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2676 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _970))) + ((_2682 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2678 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _970))) + ((_2684 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2680 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _970))) + ((_2686 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2865 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2865 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
    SV_Target.y = _2865 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.z = _2865 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.w = cbInstanceData._m0[_2706].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
}


