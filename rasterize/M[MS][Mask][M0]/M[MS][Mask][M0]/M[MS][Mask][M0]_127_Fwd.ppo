#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1494;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3796 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3807 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _556 = _554.x;
    float _566 = dot(vec4(_556, _554.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _578 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _365.z) * 2.0) - ((((_556 - _566) * cbMtdParam._m0[24u].z) + _566) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3818 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _592 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_579 * ((_537.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _595 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_579 * ((_537.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _598 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_579 * ((_537.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _637 = _633.z;
    float _644 = ((_616.x - _635) * _437) + _635;
    float _645 = ((_616.y - _636) * _437) + _636;
    float _646 = ((_616.z - _637) * _437) + _637;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_658.x - _644) * _510) + _644;
    float _670 = ((_658.y - _645) * _510) + _645;
    float _671 = ((_658.z - _646) * _510) + _646;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _696 = ((_683.z - _671) * _579) + _671;
    float _699 = ((((_683.x - _669) * _579) + _669) * 2.0) + (-1.0);
    float _701 = ((((_683.y - _670) * _579) + _670) * 2.0) + (-1.0);
    float _702 = dot(vec2(_699, _701), vec2(_699, _701));
    float _3829 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _707 = sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _733 = (((_721.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _699;
    float _734 = (((_721.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _737 = fma(_707, _245, fma(_734, _252, _733 * _238));
    float _740 = fma(_707, _246, fma(_734, _253, _733 * _239));
    float _743 = fma(_707, _247, fma(_734, _254, _733 * _240));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _776 = _774.x;
    float _777 = 1.0 - _776;
    float _783 = (cbMtdParam._m0[19u].x + dot(vec4(_747 * _737, _747 * _740, _747 * _743, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_776 - _777) * cbMtdParam._m0[24u].w) + _777) * cbMtdParam._m0[21u].z);
    float _3840 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _784 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _786 = (-0.0) - cbMtdParam._m0[24u].x;
    float _788 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
    float _796 = _784 - ((_784 * TEXCOORD_8.x) * _789);
    float _797 = _784 - ((_784 * TEXCOORD_8.y) * _789);
    float _798 = _784 - ((_784 * TEXCOORD_8.z) * _789);
    float _805 = (_796 * (cbMtdParam._m0[17u].x - _592)) + _592;
    float _806 = (_797 * (cbMtdParam._m0[17u].y - _595)) + _595;
    float _807 = (_798 * (cbMtdParam._m0[17u].z - _598)) + _598;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _850 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_821 - _822) * cbMtdParam._m0[24u].y) + _822) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3861 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _851 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _859 = ((((cbMtdParam._m0[10u].x - _805) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _851) + _805;
    float _860 = ((((cbMtdParam._m0[10u].y - _806) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _851) + _806;
    float _861 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _807)) * _851) + _807;
    float _865 = (cbMtdParam._m0[19u].w * (_721.z - _696)) + _696;
    vec4 _879 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _886 = (_879.x * 2.0) + (-1.0);
    float _887 = (_879.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3872 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _896 = ((_879.z - _865) * _796) + _865;
    float _899 = ((cbMtdParam._m0[23u].y - _896) * _851) + _896;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _924 = (_918.x * 2.0) + (-1.0);
    float _925 = (_918.y * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _3883 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _941 = ((sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) - _707) * _798) + _707;
    float _944 = (((_886 - _733) * _796) + _733) + (cbMtdParam._m0[21u].x * _733);
    float _945 = (((_887 - _734) * _797) + _734) + (cbMtdParam._m0[21u].x * _734);
    float _956 = (((_924 - _944) + (_944 * cbMtdParam._m0[22u].z)) * _851) + _944;
    float _957 = (((_925 - _945) + (_945 * cbMtdParam._m0[22u].z)) * _851) + _945;
    float _958 = (_851 * (sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) - _941)) + _941;
    float _960 = cbMtdParam._m0[22u].x + _721.w;
    float _963 = fma(_958, _245, fma(_957, _252, _956 * _238));
    float _966 = fma(_958, _246, fma(_957, _253, _956 * _239));
    float _969 = fma(_958, _247, fma(_957, _254, _956 * _240));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _974 = _973 * _963;
    float _975 = _973 * _966;
    float _976 = _973 * _969;
    float _3894 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _977 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _3916 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _3927 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _3938 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _995 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1045 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1035);
    float _1046 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1035);
    float _1047 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1035);
    float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
    float _1052 = _1045 * _1051;
    float _1053 = _1046 * _1051;
    float _1054 = _1047 * _1051;
    float _1060 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1061 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1079 = fma(_976, cbSceneParam._m0[5u].z, fma(_975, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _974));
    float _1082 = fma(_976, cbSceneParam._m0[6u].z, fma(_975, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _974));
    float _1085 = fma(_976, cbSceneParam._m0[7u].z, fma(_975, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _974));
    uint _1099 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _3949 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    vec4 _1119 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1060, cbSceneParam._m0[86u].y * _1061));
    float _1123 = ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * TEXCOORD_5.w) * _1119.x;
    float _1124 = dot(vec3(_974, _975, _976), vec3(_1052, _1053, _1054));
    float _1127 = _1124 * 2.0;
    float _1131 = (_1127 * _974) - _1052;
    float _1132 = (_1127 * _975) - _1053;
    float _1133 = (_1127 * _976) - _1054;
    float _1137 = abs(dot(vec3(_1052, _1053, _1054), vec3(_974, _975, _976)));
    float _3982 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1139 = sqrt(_977);
    float _1152 = exp2((_1139 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1139 * 3.0));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1493;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1218 = fma(_1192, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184));
        float _1222 = fma(_1192, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184));
        float _1226 = fma(_1192, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184));
        float _1251 = _1184 + _974;
        float _1252 = _1188 + _975;
        float _1253 = _1192 + _976;
        float _1263 = fma(_1253, cbModelParam._m0[26u].z, fma(_1252, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251)) - _1218;
        float _1264 = fma(_1253, cbModelParam._m0[27u].z, fma(_1252, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251)) - _1222;
        float _1265 = fma(_1253, cbModelParam._m0[28u].z, fma(_1252, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251)) - _1226;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1218 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1222 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[34u].z) + ((((((_1226 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1321 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1287.x + (-0.5));
        float _1323 = _1321 * (_1287.y + (-0.5));
        float _1324 = _1321 * (_1287.z + (-0.5));
        float _1331 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1294.x + (-0.5));
        float _1333 = _1331 * (_1294.y + (-0.5));
        float _1334 = _1331 * (_1294.z + (-0.5));
        float _1341 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1301.x + (-0.5));
        float _1343 = _1341 * (_1301.y + (-0.5));
        float _1344 = _1341 * (_1301.z + (-0.5));
        float _1351 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1308.x + (-0.5));
        float _1353 = _1351 * (_1308.y + (-0.5));
        float _1354 = _1351 * (_1308.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1375 = (dot(vec3(_974, _975, _976), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1385 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4030 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1387 + 1.0))) + _1392) * _1355;
        float _1402 = _1323 * 0.5;
        float _1403 = _1333 * 0.5;
        float _1404 = _1343 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_974, _975, _976), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4063 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1429 + 1.0))) + _1434) * _1356;
        float _1444 = _1324 * 0.5;
        float _1445 = _1334 * 0.5;
        float _1446 = _1344 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_974, _975, _976), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4096 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1471 + 1.0))) + _1476) * _1357;
        _1493 = _1324;
        _1495 = _1323;
        _1496 = _1322;
        _1497 = _1334;
        _1498 = _1333;
        _1499 = _1332;
        _1500 = _1344;
        _1501 = _1343;
        _1502 = _1342;
        _1503 = _1357;
        _1504 = _1356;
        _1505 = _1355;
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1494;
        _1495 = _1494;
        _1496 = _1494;
        _1497 = _1494;
        _1498 = _1494;
        _1499 = _1494;
        _1500 = _1494;
        _1501 = _1494;
        _1502 = _1494;
        _1503 = _1494;
        _1504 = _1494;
        _1505 = _1494;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1531 = fma(_1192, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184));
        float _1535 = fma(_1192, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184));
        float _1539 = fma(_1192, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184));
        float _1562 = _1184 + _974;
        float _1563 = _1188 + _975;
        float _1564 = _1192 + _976;
        float _1574 = fma(_1564, cbModelParam._m0[30u].z, fma(_1563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1562)) - _1531;
        float _1575 = fma(_1564, cbModelParam._m0[31u].z, fma(_1563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1562)) - _1535;
        float _1576 = fma(_1564, cbModelParam._m0[32u].z, fma(_1563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1562)) - _1539;
        float _1580 = inversesqrt(dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576)));
        float _1593 = ((_1580 * _1574) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1531 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1580 * _1575) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1535 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1595 = ((_1580 * _1576) / cbModelParam._m0[35u].z) + ((((((_1539 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        float _1630 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1597.x + (-0.5));
        float _1632 = _1630 * (_1597.y + (-0.5));
        float _1633 = _1630 * (_1597.z + (-0.5));
        float _1640 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1604.x + (-0.5));
        float _1642 = _1640 * (_1604.y + (-0.5));
        float _1643 = _1640 * (_1604.z + (-0.5));
        float _1650 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1611.x + (-0.5));
        float _1652 = _1650 * (_1611.y + (-0.5));
        float _1653 = _1650 * (_1611.z + (-0.5));
        float _1660 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1618.x + (-0.5));
        float _1662 = _1660 * (_1618.y + (-0.5));
        float _1663 = _1660 * (_1618.z + (-0.5));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = _1631 * 0.5;
        float _1668 = _1641 * 0.5;
        float _1669 = _1651 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_974, _975, _976), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4159 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1694 + 1.0))) + _1699) * _1664;
        float _1709 = _1632 * 0.5;
        float _1710 = _1642 * 0.5;
        float _1711 = _1652 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_974, _975, _976), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4192 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1736 + 1.0))) + _1741) * _1665;
        float _1751 = _1633 * 0.5;
        float _1752 = _1643 * 0.5;
        float _1753 = _1653 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_974, _975, _976), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4225 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1778 + 1.0))) + _1783) * _1666;
        _1800 = _1633;
        _1801 = _1632;
        _1802 = _1631;
        _1803 = _1643;
        _1804 = _1642;
        _1805 = _1641;
        _1806 = _1653;
        _1807 = _1652;
        _1808 = _1651;
        _1809 = _1666;
        _1810 = _1665;
        _1811 = _1664;
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
    }
    else
    {
        _1800 = _1494;
        _1801 = _1494;
        _1802 = _1494;
        _1803 = _1494;
        _1804 = _1494;
        _1805 = _1494;
        _1806 = _1494;
        _1807 = _1494;
        _1808 = _1494;
        _1809 = _1494;
        _1810 = _1494;
        _1811 = _1494;
        _1812 = 0.0;
        _1813 = 0.0;
        _1814 = 0.0;
    }
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1506)) + _1506;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1507)) + _1507;
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1508)) + _1508;
    float _1847 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1824));
    float _1868 = _1131 * 0.5;
    float _1869 = _1132 * 0.5;
    float _1870 = _1133 * 0.5;
    float _1871 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1874 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1877 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1911;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1884 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1493, _1497, _1500, _1503));
        float _1888 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1892 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1899 = dot(vec4(cbModelParam._m0[39u]), vec4(_1868, _1869, _1870, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1922;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1913 = dot(vec4(cbModelParam._m0[40u]), vec4(_1868, _1869, _1870, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1926 = (_1922 * cbModelParam._m0[1u].x) + (_1911 * (1.0 - cbModelParam._m0[1u].x));
    float _1936 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _977);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1936 : min(cbModelParam._m0[25u].z, _1936));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1984 = fma(_1192, cbModelParam._m0[13u].z, fma(_1188, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184)) + cbModelParam._m0[13u].w;
        float _1988 = fma(_1192, cbModelParam._m0[14u].z, fma(_1188, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184)) + cbModelParam._m0[14u].w;
        float _1992 = fma(_1192, cbModelParam._m0[15u].z, fma(_1188, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184)) + cbModelParam._m0[15u].w;
        float _1995 = fma(_1133, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1131));
        float _1998 = fma(_1133, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1131));
        float _2001 = fma(_1133, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1131));
        float _2029;
        if (_1995 > 0.0)
        {
            _2029 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2029 = frontier_phi_14_12_ladder;
        }
        float _2230;
        if (_1998 > 0.0)
        {
            _2230 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2230 = frontier_phi_23_19_ladder;
        }
        float _2473;
        if (_2001 > 0.0)
        {
            _2473 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2473 = frontier_phi_35_30_ladder;
        }
        float _2475 = isnan(_2230) ? _2029 : (isnan(_2029) ? _2230 : min(_2029, _2230));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1995) + _1984;
        float _2481 = (_2476 * _1998) + _1988;
        float _2482 = (_2476 * _2001) + _1992;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1937);
            frontier_phi_13_35_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _2017 = frontier_phi_13_35_ladder_2;
        _2019 = frontier_phi_13_35_ladder_1;
        _2021 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1131, _1132, _1133), _1937);
        _2017 = _2005.x * cbModelParam._m0[1u].y;
        _2019 = _2005.y * cbModelParam._m0[1u].y;
        _2021 = _2005.z * cbModelParam._m0[1u].y;
    }
    float _2025 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _977);
    float _2026 = isnan(_2025) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2025 : min(cbModelParam._m0[25u].w, _2025));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2080 = fma(_1192, cbModelParam._m0[21u].z, fma(_1188, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184)) + cbModelParam._m0[21u].w;
        float _2084 = fma(_1192, cbModelParam._m0[22u].z, fma(_1188, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184)) + cbModelParam._m0[22u].w;
        float _2088 = fma(_1192, cbModelParam._m0[23u].z, fma(_1188, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184)) + cbModelParam._m0[23u].w;
        float _2091 = fma(_1133, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1131));
        float _2094 = fma(_1133, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1131));
        float _2097 = fma(_1133, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1131));
        float _2235;
        if (_2091 > 0.0)
        {
            _2235 = abs((1.0 - _2080) / _2091);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2080 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2235 = frontier_phi_25_21_ladder;
        }
        float _2500;
        if (_2094 > 0.0)
        {
            _2500 = abs((1.0 - _2084) / _2094);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2084 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2500 = frontier_phi_37_32_ladder;
        }
        float _2705;
        if (_2097 > 0.0)
        {
            _2705 = abs((1.0 - _2088) / _2097);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2088 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2705 = frontier_phi_46_43_ladder;
        }
        float _2707 = isnan(_2500) ? _2235 : (isnan(_2235) ? _2500 : min(_2235, _2500));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _2091) + _2080;
        float _2713 = (_2708 * _2094) + _2084;
        float _2714 = (_2708 * _2097) + _2088;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _2026);
            frontier_phi_22_46_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2116 = frontier_phi_22_46_ladder_2;
        _2118 = frontier_phi_22_46_ladder_1;
        _2120 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2100 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1131, _1132, _1133), _2026);
        _2116 = _2100.x * cbModelParam._m0[1u].z;
        _2118 = _2100.y * cbModelParam._m0[1u].z;
        _2120 = _2100.z * cbModelParam._m0[1u].z;
    }
    float _2132 = ((((1.0 - _1152) * ((_1139 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1152 * _1139)) * _1123;
    float _2133 = _2132 * ((cbModelParam._m0[1u].w * (_2116 - _2017)) + _2017);
    float _2134 = _2132 * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2135 = _2132 * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2138 = fma(_2135, cbSceneParam._m0[89u].z, fma(_2134, cbSceneParam._m0[89u].y, _2133 * cbSceneParam._m0[89u].x));
    float _2141 = fma(_2135, cbSceneParam._m0[90u].z, fma(_2134, cbSceneParam._m0[90u].y, _2133 * cbSceneParam._m0[90u].x));
    float _2144 = fma(_2135, cbSceneParam._m0[91u].z, fma(_2134, cbSceneParam._m0[91u].y, _2133 * cbSceneParam._m0[91u].x));
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2164 = _1123 + (-1.0);
    float _2169 = (cbLight._m0[_2157].x * _2164) + 1.0;
    float _2170 = (cbLight._m0[_2157].y * _2164) + 1.0;
    float _2171 = (cbLight._m0[_2157].z * _2164) + 1.0;
    float _2172 = (cbLight._m0[_2157].w * _2164) + 1.0;
    uint _2173 = _2156 + 5u;
    float _2179 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2183 = _2156 + 4u;
    float _2189 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2193 = _2156 | 1u;
    float _2204 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_974, _975, _976));
    float _2207 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_974, _975, _976));
    float _4361 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _4372 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2212 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2214 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2221 = ((cbLight._m0[_2173].x * _2179) * _2214) + ((cbLight._m0[_2183].x * _2189) * _2212);
    float _2222 = ((_2179 * cbLight._m0[_2173].y) * _2214) + ((_2189 * cbLight._m0[_2183].y) * _2212);
    float _2223 = ((_2179 * cbLight._m0[_2173].z) * _2214) + ((_2189 * cbLight._m0[_2183].z) * _2212);
    uvec4 _2227 = floatBitsToUint(cbLight._m0[_2156 + 12u]);
    bool _2229 = _2227.x == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2229)
    {
        _2240 = _2221;
        _2242 = _2222;
        _2244 = _2223;
    }
    else
    {
        uint _2248 = _2156 + 6u;
        float _2264 = (dot(vec3(cbLight._m0[_2156 + 2u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4383 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2267 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2240 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2221;
        _2242 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2222;
        _2244 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2223;
    }
    bool _2247 = _2227.y == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2247)
    {
        _2285 = _2240;
        _2287 = _2242;
        _2289 = _2244;
    }
    else
    {
        uint _2444 = _2156 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2156 + 3u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4399 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2463 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2285 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2240;
        _2287 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2242;
        _2289 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2244;
    }
    uint _2292 = _2156 + 8u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _977) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2156].x + _1052;
    float _2308 = cbLight._m0[_2156].y + _1053;
    float _2309 = cbLight._m0[_2156].z + _1054;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2156].xyz));
    float _4415 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _2321 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2322 = dot(vec3(_974, _975, _976), vec3(_2314, _2315, _2316));
    float _4437 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2314, _2315, _2316));
    float _4448 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2306 * _2306;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2346 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2321 * ((_2320 * _2346) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2346) + _2306) * _2320))) * _2320;
    float _4459 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    uint _2370 = _2156 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _977) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2193].x + _1052;
    float _2384 = cbLight._m0[_2193].y + _1053;
    float _2385 = cbLight._m0[_2193].z + _1054;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2193].xyz));
    float _4470 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2397 = dot(vec3(_974, _975, _976), vec3(_2390, _2391, _2392));
    float _4481 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2390, _2391, _2392));
    float _4492 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2419 = 1.0 - _2382;
    float _2429 = (0.5 / (((_2321 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2419) + _2382) * _2396))) * _2396;
    float _4503 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2441 = (((_2418 * cbLight._m0[_2370].x) * _2431) * _2179) + (((_2345 * cbLight._m0[_2292].x) * _2359) * _2189);
    float _2442 = (((_2418 * cbLight._m0[_2370].y) * _2431) * _2179) + (((_2345 * cbLight._m0[_2292].y) * _2359) * _2189);
    float _2443 = (((_2418 * cbLight._m0[_2370].z) * _2431) * _2179) + (((_2345 * cbLight._m0[_2292].z) * _2359) * _2189);
    float _2505;
    float _2507;
    float _2509;
    if (_2229)
    {
        _2505 = _2441;
        _2507 = _2442;
        _2509 = _2443;
    }
    else
    {
        uint _2511 = _2156 + 2u;
        uint _2515 = _2156 + 10u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _977) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _1052;
        float _2532 = cbLight._m0[_2511].y + _1053;
        float _2533 = cbLight._m0[_2511].z + _1054;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2511].xyz));
        float _4514 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2545 = dot(vec3(_974, _975, _976), vec3(_2538, _2539, _2540));
        float _4525 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4536 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2566 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2567 = 1.0 - _2530;
        float _2577 = (0.5 / (((_2321 * ((_2544 * _2567) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2567) + _2530) * _2544))) * _2544;
        float _4547 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2505 = (((_2566 * cbLight._m0[_2515].x) * _2579) * _2580) + _2441;
        _2507 = (((_2566 * cbLight._m0[_2515].y) * _2579) * _2580) + _2442;
        _2509 = (((_2566 * cbLight._m0[_2515].z) * _2579) * _2580) + _2443;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2247)
    {
        _2615 = _2505;
        _2617 = _2507;
        _2619 = _2509;
    }
    else
    {
        uint _2626 = _2156 + 3u;
        uint _2630 = _2156 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _977) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _1052;
        float _2647 = cbLight._m0[_2626].y + _1053;
        float _2648 = cbLight._m0[_2626].z + _1054;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2626].xyz));
        float _4563 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2660 = dot(vec3(_974, _975, _976), vec3(_2653, _2654, _2655));
        float _4574 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4585 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2681 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2682 = 1.0 - _2645;
        float _2692 = (0.5 / (((_2321 * ((_2659 * _2682) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2682) + _2645) * _2659))) * _2659;
        float _4596 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2615 = (((_2681 * cbLight._m0[_2630].x) * _2694) * _2695) + _2505;
        _2617 = (((_2681 * cbLight._m0[_2630].y) * _2694) * _2695) + _2507;
        _2619 = (((_2681 * cbLight._m0[_2630].z) * _2694) * _2695) + _2509;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2154.y == 0u)
    {
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2770;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2770;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2770;
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1061) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _1060) / _2786)));
        float _2807 = (log2(_2773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3078)
                {
                    frontier_phi_61_pred = _3062;
                    frontier_phi_61_pred_1 = _3067;
                    frontier_phi_61_pred_2 = _3066;
                    frontier_phi_61_pred_3 = _3065;
                    frontier_phi_61_pred_4 = _3064;
                    frontier_phi_61_pred_5 = _3063;
                }
                else
                {
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    uint _3192;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3077;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    for (;;)
                    {
                        uint _3196 = uint(findLSB(_3192)) + (_3068 << 5u);
                        uint _3193 = (_3192 + 4294967295u) & _3192;
                        uint _3198 = _3196 * 48u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3218 = (_3196 * 48u) + 4u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3237 = (_3196 * 48u) + 8u;
                        vec3 _3248 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x));
                        float _3252 = _3212.x - _2771;
                        float _3253 = _3212.y - _2772;
                        float _3254 = _3212.z - _2773;
                        float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                        float _3258 = inversesqrt(_3255);
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3262 = dot(vec3(_1079, _1082, _1085), vec3(_3259, _3260, _3261));
                        float _3267 = 1.0 - (_3255 * _3212.w);
                        float _4622 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3268 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3269 = sqrt(_3255) * _3231.w;
                        float _3272 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3262) + _3273;
                        float _3279 = _3269 * _3269;
                        float _3283 = ((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3268) / ((_3279 * 0.699999988079071044921875) + 1.0);
                        float _3287 = (-0.0) - _2771;
                        float _3288 = (-0.0) - _2772;
                        float _3289 = (-0.0) - _2773;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3304 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _1139;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3294 + _3259;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_1079, _1082, _1085), vec3(_3294, _3295, _3296));
                        float _4638 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3329 = dot(vec3(_1079, _1082, _1085), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4649 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3272 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3262) + _3338;
                        float _4660 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4671 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3336 * _3336) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125))) * _3268;
                        _3121 = (_3283 * _3231.x) + _3189;
                        _3122 = (_3283 * _3231.y) + _3190;
                        _3123 = (_3283 * _3231.z) + _3191;
                        _3118 = (_3364 * _3248.x) + _3186;
                        _3119 = (_3364 * _3248.y) + _3187;
                        _3120 = (_3364 * _3248.z) + _3188;
                        if (_3193 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3193;
                        }
                    }
                    frontier_phi_61_pred = _3118;
                    frontier_phi_61_pred_1 = _3123;
                    frontier_phi_61_pred_2 = _3122;
                    frontier_phi_61_pred_3 = _3121;
                    frontier_phi_61_pred_4 = _3120;
                    frontier_phi_61_pred_5 = _3119;
                }
                _2919 = frontier_phi_61_pred;
                _2929 = frontier_phi_61_pred_1;
                _2927 = frontier_phi_61_pred_2;
                _2925 = frontier_phi_61_pred_3;
                _2923 = frontier_phi_61_pred_4;
                _2921 = frontier_phi_61_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2919;
                    _3063 = _2921;
                    _3064 = _2923;
                    _3065 = _2925;
                    _3066 = _2927;
                    _3067 = _2929;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2935) & _2817) == 0u)
        {
            _3030 = _2918;
            _3032 = _2920;
            _3034 = _2922;
            _3036 = _2924;
            _3038 = _2926;
            _3040 = _2928;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
            float _3056 = _3055 * _2771;
            float _3057 = _3055 * _2772;
            float _3058 = _3055 * _2773;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3169 = _2918;
                float _3170 = _2920;
                float _3171 = _2922;
                float _3172 = _2924;
                float _3173 = _2926;
                float _3174 = _2928;
                uint _3175 = _2935;
                uint _3184;
                bool _3185;
                for (;;)
                {
                    _3184 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                    _3185 = _3184 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3185)
                    {
                        frontier_phi_67_pred = _3172;
                        frontier_phi_67_pred_1 = _3173;
                        frontier_phi_67_pred_2 = _3174;
                        frontier_phi_67_pred_3 = _3171;
                        frontier_phi_67_pred_4 = _3170;
                        frontier_phi_67_pred_5 = _3169;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3382 = _3169;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        uint _3388 = _3184;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3472;
                        float _3518;
                        bool _3519;
                        for (;;)
                        {
                            uint _3399 = ((_3175 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3399 * 40u) + 20u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3399 * 40u) + 24u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3493 = (_3399 * 40u) + 28u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3518 = fma(_2773, _3506.z, fma(_2772, _3506.y, _3506.x * _2771)) + _3506.w;
                            _3519 = !((fma(_2773, _3487.z, fma(_2772, _3487.y, _3487.x * _2771)) + _3487.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3519)
                            {
                                float _3546 = _3414.x - _2771;
                                float _3547 = _3414.y - _2772;
                                float _3548 = _3414.z - _2773;
                                float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                                float _3552 = inversesqrt(_3549);
                                float _3553 = _3552 * _3546;
                                float _3554 = _3552 * _3547;
                                float _3555 = _3552 * _3548;
                                float _3559 = 1.0 - (_3549 / (_3415 * _3415));
                                float _4682 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3564 = sqrt(_3549) * _3430.w;
                                float _3566 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                                float _3567 = _3566 * _3566;
                                float _3570 = ((1.0 - _3567) * dot(vec3(_3553, _3554, _3555), vec3(_1079, _1082, _1085))) + _3567;
                                float _3573 = _3564 * _3564;
                                float _3577 = (fma(_2773, _3457.z, fma(_2772, _3457.y, _3457.x * _2771)) + _3457.w) / _3518;
                                float _3578 = (fma(_2773, _3472.z, fma(_2772, _3472.y, _3472.x * _2771)) + _3472.w) / _3518;
                                float _3582 = 1.0 - dot(vec2(_3577, _3578), vec2(_3577, _3578));
                                float _4698 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3584 = _3583 * (((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3560) / ((_3573 * 0.699999988079071044921875) + 1.0));
                                float _3596 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                                float _3597 = 1.0 - _1139;
                                float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                                float _3605 = _3604 * _3604;
                                float _3606 = _3605 * _3605;
                                float _3607 = _3553 - _3056;
                                float _3608 = _3554 - _3057;
                                float _3609 = _3555 - _3058;
                                float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                                float _3617 = dot(vec3(_1079, _1082, _1085), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4709 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3621 = dot(vec3(_1079, _1082, _1085), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                                float _4720 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                                float _3629 = _3566 * _3605;
                                float _3630 = _3629 * _3629;
                                float _3636 = ((1.0 - _3630) * dot(vec3(_1079, _1082, _1085), vec3(_3553, _3554, _3555))) + _3630;
                                float _4731 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3638 = 1.0 - _3605;
                                float _3648 = (0.5 / (((_3637 * ((_3620 * _3638) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3605) * _3620))) * _3637;
                                float _4742 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3658 = (_3583 * _3560) * (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3628 * _3628) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3658 * _3442.x;
                                frontier_phi_73_pred_1 = _3658 * _3442.y;
                                frontier_phi_73_pred_2 = _3584 * _3430.z;
                                frontier_phi_73_pred_3 = _3584 * _3430.y;
                                frontier_phi_73_pred_4 = _3584 * _3430.x;
                                frontier_phi_73_pred_5 = _3658 * _3442.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3662 = frontier_phi_73_pred;
                            _3663 = frontier_phi_73_pred_1;
                            _3667 = frontier_phi_73_pred_2;
                            _3666 = frontier_phi_73_pred_3;
                            _3665 = frontier_phi_73_pred_4;
                            _3664 = frontier_phi_73_pred_5;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3372;
                        frontier_phi_67_pred_1 = _3373;
                        frontier_phi_67_pred_2 = _3374;
                        frontier_phi_67_pred_3 = _3371;
                        frontier_phi_67_pred_4 = _3370;
                        frontier_phi_67_pred_5 = _3369;
                    }
                    _3037 = frontier_phi_67_pred;
                    _3039 = frontier_phi_67_pred_1;
                    _3041 = frontier_phi_67_pred_2;
                    _3035 = frontier_phi_67_pred_3;
                    _3033 = frontier_phi_67_pred_4;
                    _3031 = frontier_phi_67_pred_5;
                    uint _3176 = _3175 + 1u;
                    if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3169 = _3031;
                        _3170 = _3033;
                        _3171 = _3035;
                        _3172 = _3037;
                        _3173 = _3039;
                        _3174 = _3041;
                        _3175 = _3176;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3039;
                frontier_phi_55_56_ladder_1 = _3041;
                frontier_phi_55_56_ladder_2 = _3037;
                frontier_phi_55_56_ladder_3 = _3035;
                frontier_phi_55_56_ladder_4 = _3033;
                frontier_phi_55_56_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_55_56_ladder = _2926;
                frontier_phi_55_56_ladder_1 = _2928;
                frontier_phi_55_56_ladder_2 = _2924;
                frontier_phi_55_56_ladder_3 = _2922;
                frontier_phi_55_56_ladder_4 = _2920;
                frontier_phi_55_56_ladder_5 = _2918;
            }
            _3030 = frontier_phi_55_56_ladder_5;
            _3032 = frontier_phi_55_56_ladder_4;
            _3034 = frontier_phi_55_56_ladder_3;
            _3036 = frontier_phi_55_56_ladder_2;
            _3038 = frontier_phi_55_56_ladder;
            _3040 = frontier_phi_55_56_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _2830 = (_3045 * _3036) + _2285;
        _2832 = (_3045 * _3038) + _2287;
        _2834 = (_3045 * _3040) + _2289;
        _2836 = ((_3030 * 0.039999999105930328369140625) * _3045) + _2615;
        _2838 = ((_3032 * 0.039999999105930328369140625) * _3045) + _2617;
        _2840 = ((_3034 * 0.039999999105930328369140625) * _3045) + _2619;
    }
    else
    {
        _2830 = _2285;
        _2832 = _2287;
        _2834 = _2289;
        _2836 = _2615;
        _2838 = _2617;
        _2840 = _2619;
    }
    float _4758 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4769 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4780 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    uint _2860 = _257 + 6u;
    float _2868 = _1060 / cbSceneParam._m0[86u].x;
    float _2869 = _1061 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _995 : (isnan(_995) ? cbSceneParam._m0[77u].w : min(_995, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_995 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_995) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _995 : min(cbSceneParam._m0[80u].w, _995));
        float _2944 = _2943 / _995;
        float _2955 = _2944 * _1045;
        float _2956 = _1046 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2958 = _2944 * _1047;
        float _2960 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2961 = _2960 + cbSceneParam._m0[79u].w;
        float _2962 = cbSceneParam._m0[79u].w - _2956;
        float _2968 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2958 * _2958));
        float _2971 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2968;
        float _2976 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2978 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2957 - _2960) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2961 > 0.0) ? exp2(_2976 * _2961) : (2.0 - exp2(_2978 * _2961))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2971;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : max(_2961, _2962));
            float _3093 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : min(_2961, _2962));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3131 = ((abs(_2968 / _2957) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2976 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2976 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2978 * _3102) - exp2(_2978 * _3103)) * _3091))) + (_2971 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2888);
        _2980 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2982 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2984 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2986 = _3142 * _2888;
    }
    else
    {
        _2980 = _2885;
        _2982 = _2886;
        _2984 = _2887;
        _2986 = _2888;
    }
    float _2998 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2999 = _2998 == 3.0;
    float _3000 = log2(_2986);
    float _3007 = exp2(_3000 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2830 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1123))) + ((_2836 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1926)) * cbPerFrame._m0[3u].x));
    float _3008 = exp2(_3000 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2832 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1123))) + ((_2838 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1926)) * cbPerFrame._m0[3u].x));
    float _3009 = exp2(_3000 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2834 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1123))) + ((_2840 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1926)) * cbPerFrame._m0[3u].x));
    float _3018 = (_2998 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3018 * (_2999 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.y = _3018 * (_2999 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.z = _3018 * (_2999 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.w = cbInstanceData._m0[_2860].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
}


