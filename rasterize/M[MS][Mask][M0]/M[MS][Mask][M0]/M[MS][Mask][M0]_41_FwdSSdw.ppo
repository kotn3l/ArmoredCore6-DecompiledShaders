#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1151;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3480 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _393 = (_386 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _394 = (_386 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _395 = (_386 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3491 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _504 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _507 = fma(_475, _220, fma(_504, _227, _503 * _213));
    float _510 = fma(_475, _221, fma(_504, _228, _503 * _214));
    float _513 = fma(_475, _222, fma(_504, _229, _503 * _215));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _553 = (cbMtdParam._m0[19u].x + dot(vec4(_517 * _507, _517 * _510, _517 * _513, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_546 - _547) * cbMtdParam._m0[24u].w) + _547) * cbMtdParam._m0[21u].z);
    float _3502 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _561 = (_554 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _562 = (_554 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _563 = (_554 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    float _567 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _587 = (_580.x * 2.0) + (-1.0);
    float _588 = (_580.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3513 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _597 = ((_580.z - _567) * _554) + _567;
    float _607 = ((sqrt(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) - _475) * _554) + _475;
    float _610 = (((_587 - _503) * _554) + _503) + (cbMtdParam._m0[21u].x * _503);
    float _611 = (((_588 - _504) * _554) + _504) + (cbMtdParam._m0[21u].x * _504);
    float _615 = cbMtdParam._m0[22u].x + _491.w;
    float _618 = fma(_607, _220, fma(_611, _227, _610 * _213));
    float _621 = fma(_607, _221, fma(_611, _228, _610 * _214));
    float _624 = fma(_607, _222, fma(_611, _229, _610 * _215));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3524 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _632 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3546 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3557 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3568 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _739 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _742 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _756 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3579 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _780 = ((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _629) - _709;
    float _789 = (_784 * _630) - _710;
    float _790 = (_784 * _631) - _711;
    float _794 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3612 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_632);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1150;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _875 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _879 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _883 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _908 = _841 + _629;
        float _909 = _845 + _630;
        float _910 = _849 + _631;
        float _920 = fma(_910, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908)) - _875;
        float _921 = fma(_910, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908)) - _879;
        float _922 = fma(_910, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908)) - _883;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_875 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_879 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[34u].z) + ((((((_883 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _978 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_944.x + (-0.5));
        float _980 = _978 * (_944.y + (-0.5));
        float _981 = _978 * (_944.z + (-0.5));
        float _988 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_951.x + (-0.5));
        float _990 = _988 * (_951.y + (-0.5));
        float _991 = _988 * (_951.z + (-0.5));
        float _998 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_958.x + (-0.5));
        float _1000 = _998 * (_958.y + (-0.5));
        float _1001 = _998 * (_958.z + (-0.5));
        float _1008 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_965.x + (-0.5));
        float _1010 = _1008 * (_965.y + (-0.5));
        float _1011 = _1008 * (_965.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1032 = (dot(vec3(_629, _630, _631), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1042 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3660 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1044 + 1.0))) + _1049) * _1012;
        float _1059 = _980 * 0.5;
        float _1060 = _990 * 0.5;
        float _1061 = _1000 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_629, _630, _631), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3693 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1086 + 1.0))) + _1091) * _1013;
        float _1101 = _981 * 0.5;
        float _1102 = _991 * 0.5;
        float _1103 = _1001 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_629, _630, _631), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3726 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1128 + 1.0))) + _1133) * _1014;
        _1150 = _981;
        _1152 = _980;
        _1153 = _979;
        _1154 = _991;
        _1155 = _990;
        _1156 = _989;
        _1157 = _1001;
        _1158 = _1000;
        _1159 = _999;
        _1160 = _1014;
        _1161 = _1013;
        _1162 = _1012;
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = _1151;
        _1152 = _1151;
        _1153 = _1151;
        _1154 = _1151;
        _1155 = _1151;
        _1156 = _1151;
        _1157 = _1151;
        _1158 = _1151;
        _1159 = _1151;
        _1160 = _1151;
        _1161 = _1151;
        _1162 = _1151;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1194 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1198 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1221 = _841 + _629;
        float _1222 = _845 + _630;
        float _1223 = _849 + _631;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_629, _630, _631), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3789 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_629, _630, _631), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3822 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_629, _630, _631), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3855 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1151;
        _1460 = _1151;
        _1461 = _1151;
        _1462 = _1151;
        _1463 = _1151;
        _1464 = _1151;
        _1465 = _1151;
        _1466 = _1151;
        _1467 = _1151;
        _1468 = _1151;
        _1469 = _1151;
        _1470 = _1151;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _788 * 0.5;
    float _1528 = _789 * 0.5;
    float _1529 = _790 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1570;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1150, _1154, _1157, _1160));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1581;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1572 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1585 = (_1581 * cbModelParam._m0[1u].x) + (_1570 * (1.0 - cbModelParam._m0[1u].x));
    float _1595 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1595 : min(cbModelParam._m0[25u].z, _1595));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1657 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1660 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1688 = frontier_phi_14_12_ladder;
        }
        float _1909;
        if (_1657 > 0.0)
        {
            _1909 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1909 = frontier_phi_23_19_ladder;
        }
        float _2155;
        if (_1660 > 0.0)
        {
            _2155 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2155 = frontier_phi_35_30_ladder;
        }
        float _2157 = isnan(_1909) ? _1688 : (isnan(_1688) ? _1909 : min(_1688, _1909));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1654) + _1643;
        float _2163 = (_2158 * _1657) + _1647;
        float _2164 = (_2158 * _1660) + _1651;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1596);
            frontier_phi_13_35_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_13_35_ladder_2;
        _1678 = frontier_phi_13_35_ladder_1;
        _1680 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1596);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1738 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1742 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1746 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1749 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1752 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1755 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1914;
        if (_1749 > 0.0)
        {
            _1914 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1914 = frontier_phi_25_21_ladder;
        }
        float _2182;
        if (_1752 > 0.0)
        {
            _2182 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2182 = frontier_phi_37_32_ladder;
        }
        float _2387;
        if (_1755 > 0.0)
        {
            _2387 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2387 = frontier_phi_46_43_ladder;
        }
        float _2389 = isnan(_2182) ? _1914 : (isnan(_1914) ? _2182 : min(_1914, _2182));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1749) + _1738;
        float _2395 = (_2390 * _1752) + _1742;
        float _2396 = (_2390 * _1755) + _1746;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_22_46_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1774 = frontier_phi_22_46_ladder_2;
        _1776 = frontier_phi_22_46_ladder_1;
        _1778 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1685);
        _1774 = _1758.x * cbModelParam._m0[1u].z;
        _1776 = _1758.y * cbModelParam._m0[1u].z;
        _1778 = _1758.z * cbModelParam._m0[1u].z;
    }
    float _1790 = ((((1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_809 * _796)) * _780;
    float _1791 = _1790 * ((cbModelParam._m0[1u].w * (_1774 - _1676)) + _1676);
    float _1792 = _1790 * ((cbModelParam._m0[1u].w * (_1776 - _1678)) + _1678);
    float _1793 = _1790 * ((cbModelParam._m0[1u].w * (_1778 - _1680)) + _1680);
    float _1796 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1791 * cbSceneParam._m0[91u].x));
    vec4 _1810 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_717, _718));
    float _1812 = _1810.w;
    float _1824 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1812);
    float _1825 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1812);
    float _1826 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1812);
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _780 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1868 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1872 = _1832 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_629, _630, _631));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_629, _630, _631));
    float _3991 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4002 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1849].x * _1855) * _1893) + (((cbLight._m0[_1859].x * _1824) * _1868) * _1891);
    float _1901 = ((_1855 * cbLight._m0[_1849].y) * _1893) + (((cbLight._m0[_1859].y * _1825) * _1868) * _1891);
    float _1902 = ((_1855 * cbLight._m0[_1849].z) * _1893) + (((cbLight._m0[_1859].z * _1826) * _1868) * _1891);
    uvec4 _1906 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1908 = _1906.x == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1908)
    {
        _1919 = _1900;
        _1921 = _1901;
        _1923 = _1902;
    }
    else
    {
        uint _1927 = _1832 + 6u;
        float _1943 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4013 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1946 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1919 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1900;
        _1921 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1901;
        _1923 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1902;
    }
    bool _1926 = _1906.y == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1926)
    {
        _1964 = _1919;
        _1966 = _1921;
        _1968 = _1923;
    }
    else
    {
        uint _2126 = _1832 + 7u;
        float _2142 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4029 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2145 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1964 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _1919;
        _1966 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _1921;
        _1968 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _1923;
    }
    uint _1971 = _1832 + 8u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _632) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1832].x + _709;
    float _1987 = cbLight._m0[_1832].y + _710;
    float _1988 = cbLight._m0[_1832].z + _711;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1832].xyz));
    float _4045 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2000 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2001 = dot(vec3(_629, _630, _631), vec3(_1993, _1994, _1995));
    float _4067 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1993, _1994, _1995));
    float _4078 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1985 * _1985;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1985;
    float _2036 = (0.5 / (((_2000 * ((_1999 * _2025) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2025) + _1985) * _1999))) * _1999;
    float _4089 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    uint _2052 = _1832 + 9u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _632) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1872].x + _709;
    float _2066 = cbLight._m0[_1872].y + _710;
    float _2067 = cbLight._m0[_1872].z + _711;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1872].xyz));
    float _4100 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2079 = dot(vec3(_629, _630, _631), vec3(_2072, _2073, _2074));
    float _4111 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2072, _2073, _2074));
    float _4122 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2064 * _2064;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = 1.0 - _2064;
    float _2111 = (0.5 / (((_2000 * ((_2078 * _2101) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2101) + _2064) * _2078))) * _2078;
    float _4133 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    float _2123 = (((_2100 * cbLight._m0[_2052].x) * _2113) * _1855) + ((((cbLight._m0[_1971].x * _1824) * _2024) * _2038) * _1868);
    float _2124 = (((_2100 * cbLight._m0[_2052].y) * _2113) * _1855) + ((((cbLight._m0[_1971].y * _1825) * _2024) * _2038) * _1868);
    float _2125 = (((_2100 * cbLight._m0[_2052].z) * _2113) * _1855) + ((((cbLight._m0[_1971].z * _1826) * _2024) * _2038) * _1868);
    float _2187;
    float _2189;
    float _2191;
    if (_1908)
    {
        _2187 = _2123;
        _2189 = _2124;
        _2191 = _2125;
    }
    else
    {
        uint _2193 = _1832 + 2u;
        uint _2197 = _1832 + 10u;
        float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _632) * 0.949999988079071044921875);
        float _2212 = _2211 * _2211;
        float _2213 = cbLight._m0[_2193].x + _709;
        float _2214 = cbLight._m0[_2193].y + _710;
        float _2215 = cbLight._m0[_2193].z + _711;
        float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
        float _2220 = _2219 * _2213;
        float _2221 = _2219 * _2214;
        float _2222 = _2219 * _2215;
        float _2223 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2193].xyz));
        float _4144 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2227 = dot(vec3(_629, _630, _631), vec3(_2220, _2221, _2222));
        float _4155 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2220, _2221, _2222));
        float _4166 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2235 = _2212 * _2212;
        float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
        float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2249 = 1.0 - _2212;
        float _2259 = (0.5 / (((_2000 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2249) + _2212) * _2226))) * _2226;
        float _4177 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2187 = (((_2248 * cbLight._m0[_2197].x) * _2261) * _2262) + _2123;
        _2189 = (((_2248 * cbLight._m0[_2197].y) * _2261) * _2262) + _2124;
        _2191 = (((_2248 * cbLight._m0[_2197].z) * _2261) * _2262) + _2125;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1926)
    {
        _2297 = _2187;
        _2299 = _2189;
        _2301 = _2191;
    }
    else
    {
        uint _2308 = _1832 + 3u;
        uint _2312 = _1832 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _632) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _709;
        float _2329 = cbLight._m0[_2308].y + _710;
        float _2330 = cbLight._m0[_2308].z + _711;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2308].xyz));
        float _4193 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2342 = dot(vec3(_629, _630, _631), vec3(_2335, _2336, _2337));
        float _4204 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4215 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2000 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2364) + _2327) * _2341))) * _2341;
        float _4226 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2297 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2187;
        _2299 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2189;
        _2301 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2191;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1830.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2761)
                {
                    frontier_phi_61_pred = _2745;
                    frontier_phi_61_pred_1 = _2750;
                    frontier_phi_61_pred_2 = _2749;
                    frontier_phi_61_pred_3 = _2748;
                    frontier_phi_61_pred_4 = _2747;
                    frontier_phi_61_pred_5 = _2746;
                }
                else
                {
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    uint _2875;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2760;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2879 = uint(findLSB(_2875)) + (_2751 << 5u);
                        uint _2876 = (_2875 + 4294967295u) & _2875;
                        uint _2881 = _2879 * 48u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2901 = (_2879 * 48u) + 4u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2920 = (_2879 * 48u) + 8u;
                        vec3 _2931 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x));
                        float _2935 = _2895.x - _2453;
                        float _2936 = _2895.y - _2454;
                        float _2937 = _2895.z - _2455;
                        float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                        float _2941 = inversesqrt(_2938);
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2945 = dot(vec3(_736, _739, _742), vec3(_2942, _2943, _2944));
                        float _2950 = 1.0 - (_2938 * _2895.w);
                        float _4252 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2952 = sqrt(_2938) * _2914.w;
                        float _2955 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2945) + _2956;
                        float _2962 = _2952 * _2952;
                        float _2966 = ((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2951) / ((_2962 * 0.699999988079071044921875) + 1.0);
                        float _2970 = (-0.0) - _2453;
                        float _2971 = (-0.0) - _2454;
                        float _2972 = (-0.0) - _2455;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2987 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _796;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_736, _739, _742), vec3(_2977, _2978, _2979));
                        float _4268 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _3012 = dot(vec3(_736, _739, _742), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4279 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2955 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2945) + _3021;
                        float _4290 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4301 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3019 * _3019) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125))) * _2951;
                        _2804 = (_2966 * _2914.x) + _2872;
                        _2805 = (_2966 * _2914.y) + _2873;
                        _2806 = (_2966 * _2914.z) + _2874;
                        _2801 = (_3047 * _2931.x) + _2869;
                        _2802 = (_3047 * _2931.y) + _2870;
                        _2803 = (_3047 * _2931.z) + _2871;
                        if (_2876 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2876;
                        }
                    }
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                _2601 = frontier_phi_61_pred;
                _2611 = frontier_phi_61_pred_1;
                _2609 = frontier_phi_61_pred_2;
                _2607 = frontier_phi_61_pred_3;
                _2605 = frontier_phi_61_pred_4;
                _2603 = frontier_phi_61_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2601;
                    _2746 = _2603;
                    _2747 = _2605;
                    _2748 = _2607;
                    _2749 = _2609;
                    _2750 = _2611;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2713 = _2600;
            _2715 = _2602;
            _2717 = _2604;
            _2719 = _2606;
            _2721 = _2608;
            _2723 = _2610;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2739 = _2738 * _2453;
            float _2740 = _2738 * _2454;
            float _2741 = _2738 * _2455;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2852 = _2600;
                float _2853 = _2602;
                float _2854 = _2604;
                float _2855 = _2606;
                float _2856 = _2608;
                float _2857 = _2610;
                uint _2858 = _2617;
                uint _2867;
                bool _2868;
                for (;;)
                {
                    _2867 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                    _2868 = _2867 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2868)
                    {
                        frontier_phi_67_pred = _2855;
                        frontier_phi_67_pred_1 = _2856;
                        frontier_phi_67_pred_2 = _2857;
                        frontier_phi_67_pred_3 = _2854;
                        frontier_phi_67_pred_4 = _2853;
                        frontier_phi_67_pred_5 = _2852;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        uint _3071 = _2867;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3140;
                        vec4 _3156;
                        float _3202;
                        bool _3203;
                        for (;;)
                        {
                            uint _3082 = ((_2858 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3127 = (_3082 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3082 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3082 * 40u) + 24u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3177 = (_3082 * 40u) + 28u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3202 = fma(_2455, _3190.z, fma(_2454, _3190.y, _3190.x * _2453)) + _3190.w;
                            _3203 = !((fma(_2455, _3171.z, fma(_2454, _3171.y, _3171.x * _2453)) + _3171.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3203)
                            {
                                float _3230 = _3097.x - _2453;
                                float _3231 = _3097.y - _2454;
                                float _3232 = _3097.z - _2455;
                                float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                                float _3236 = inversesqrt(_3233);
                                float _3237 = _3236 * _3230;
                                float _3238 = _3236 * _3231;
                                float _3239 = _3236 * _3232;
                                float _3243 = 1.0 - (_3233 / (_3098 * _3098));
                                float _4312 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3248 = sqrt(_3233) * _3113.w;
                                float _3250 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                                float _3251 = _3250 * _3250;
                                float _3254 = ((1.0 - _3251) * dot(vec3(_3237, _3238, _3239), vec3(_736, _739, _742))) + _3251;
                                float _3257 = _3248 * _3248;
                                float _3261 = (fma(_2455, _3140.z, fma(_2454, _3140.y, _3140.x * _2453)) + _3140.w) / _3202;
                                float _3262 = (fma(_2455, _3156.z, fma(_2454, _3156.y, _3156.x * _2453)) + _3156.w) / _3202;
                                float _3266 = 1.0 - dot(vec2(_3261, _3262), vec2(_3261, _3262));
                                float _4328 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3268 = _3267 * (((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3244) / ((_3257 * 0.699999988079071044921875) + 1.0));
                                float _3280 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                                float _3281 = 1.0 - _796;
                                float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                                float _3289 = _3288 * _3288;
                                float _3290 = _3289 * _3289;
                                float _3291 = _3237 - _2739;
                                float _3292 = _3238 - _2740;
                                float _3293 = _3239 - _2741;
                                float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                                float _3301 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4339 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3305 = dot(vec3(_736, _739, _742), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                                float _4350 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                                float _3313 = _3250 * _3289;
                                float _3314 = _3313 * _3313;
                                float _3320 = ((1.0 - _3314) * dot(vec3(_736, _739, _742), vec3(_3237, _3238, _3239))) + _3314;
                                float _4361 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3322 = 1.0 - _3289;
                                float _3332 = (0.5 / (((_3321 * ((_3304 * _3322) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3289) * _3304))) * _3321;
                                float _4372 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3342 = (_3267 * _3244) * (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3312 * _3312) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3342 * _3125.x;
                                frontier_phi_73_pred_1 = _3342 * _3125.y;
                                frontier_phi_73_pred_2 = _3268 * _3113.z;
                                frontier_phi_73_pred_3 = _3268 * _3113.y;
                                frontier_phi_73_pred_4 = _3268 * _3113.x;
                                frontier_phi_73_pred_5 = _3342 * _3125.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3346 = frontier_phi_73_pred;
                            _3347 = frontier_phi_73_pred_1;
                            _3351 = frontier_phi_73_pred_2;
                            _3350 = frontier_phi_73_pred_3;
                            _3349 = frontier_phi_73_pred_4;
                            _3348 = frontier_phi_73_pred_5;
                            _3055 = _3349 + _3068;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3052 = _3346 + _3065;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3055;
                        frontier_phi_67_pred_1 = _3056;
                        frontier_phi_67_pred_2 = _3057;
                        frontier_phi_67_pred_3 = _3054;
                        frontier_phi_67_pred_4 = _3053;
                        frontier_phi_67_pred_5 = _3052;
                    }
                    _2720 = frontier_phi_67_pred;
                    _2722 = frontier_phi_67_pred_1;
                    _2724 = frontier_phi_67_pred_2;
                    _2718 = frontier_phi_67_pred_3;
                    _2716 = frontier_phi_67_pred_4;
                    _2714 = frontier_phi_67_pred_5;
                    uint _2859 = _2858 + 1u;
                    if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2852 = _2714;
                        _2853 = _2716;
                        _2854 = _2718;
                        _2855 = _2720;
                        _2856 = _2722;
                        _2857 = _2724;
                        _2858 = _2859;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2722;
                frontier_phi_55_56_ladder_1 = _2724;
                frontier_phi_55_56_ladder_2 = _2720;
                frontier_phi_55_56_ladder_3 = _2718;
                frontier_phi_55_56_ladder_4 = _2716;
                frontier_phi_55_56_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            _2713 = frontier_phi_55_56_ladder_5;
            _2715 = frontier_phi_55_56_ladder_4;
            _2717 = frontier_phi_55_56_ladder_3;
            _2719 = frontier_phi_55_56_ladder_2;
            _2721 = frontier_phi_55_56_ladder;
            _2723 = frontier_phi_55_56_ladder_1;
        }
        float _2728 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2512 = (_2728 * _2719) + _1964;
        _2514 = (_2728 * _2721) + _1966;
        _2516 = (_2728 * _2723) + _1968;
        _2518 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2297;
        _2520 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2299;
        _2522 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2301;
    }
    else
    {
        _2512 = _1964;
        _2514 = _1966;
        _2516 = _1968;
        _2518 = _2297;
        _2520 = _2299;
        _2522 = _2301;
    }
    float _4388 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4399 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4410 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    uint _2542 = _232 + 6u;
    float _2550 = _717 / cbSceneParam._m0[86u].x;
    float _2551 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2626 = _2625 / _650;
        float _2637 = _2626 * _702;
        float _2638 = _703 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2641 = _2626 * _704;
        float _2643 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2638;
        float _2651 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2639 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2776 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2814 = ((abs(_2651 / _2639) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2661 * _2785) - exp2(_2661 * _2786)) * _2774))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2570);
        _2663 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2665 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2667 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2669 = _2825 * _2570;
    }
    else
    {
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
        _2669 = _2570;
    }
    float _2681 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2682 = _2681 == 3.0;
    float _2683 = log2(_2669);
    float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2512 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _780))) + ((_2518 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2514 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _780))) + ((_2520 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2516 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _780))) + ((_2522 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2701 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2701 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.y = _2701 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.z = _2701 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.w = cbInstanceData._m0[_2542].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
}


