#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1334;
float _3977;
float _3978;
float _3979;
float _3980;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].z) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3989 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _440 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_427 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321);
    float _443 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_427 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322);
    float _446 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_427 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323);
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _494 = ((_464.z - _485) * _427) + _485;
    float _497 = ((((_464.x - _483) * _427) + _483) * 2.0) + (-1.0);
    float _499 = ((((_464.y - _484) * _427) + _484) * 2.0) + (-1.0);
    float _500 = dot(vec2(_497, _499), vec2(_497, _499));
    float _4000 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _533 = (((_521.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _497;
    float _534 = (((_521.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _499;
    float _537 = fma(_505, _241, fma(_534, _248, _533 * _234));
    float _540 = fma(_505, _242, fma(_534, _249, _533 * _235));
    float _543 = fma(_505, _243, fma(_534, _250, _533 * _236));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _583 = (cbMtdParam._m0[19u].x + dot(vec4(_547 * _537, _547 * _540, _547 * _543, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_576 - _577) * cbMtdParam._m0[24u].w) + _577) * cbMtdParam._m0[21u].z);
    float _4011 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _586 = (-0.0) - cbMtdParam._m0[24u].x;
    float _588 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
    float _596 = _584 - ((_584 * TEXCOORD_8.x) * _589);
    float _597 = _584 - ((_584 * TEXCOORD_8.y) * _589);
    float _598 = _584 - ((_584 * TEXCOORD_8.z) * _589);
    float _605 = (_596 * (cbMtdParam._m0[17u].x - _440)) + _440;
    float _606 = (_597 * (cbMtdParam._m0[17u].y - _443)) + _443;
    float _607 = (_598 * (cbMtdParam._m0[17u].z - _446)) + _446;
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _650 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_621 - _622) * cbMtdParam._m0[24u].y) + _622) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4032 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _659 = ((((cbMtdParam._m0[10u].x - _605) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _651) + _605;
    float _660 = ((((cbMtdParam._m0[10u].y - _606) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _651) + _606;
    float _661 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _607)) * _651) + _607;
    float _665 = (cbMtdParam._m0[19u].w * (_521.z - _494)) + _494;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _686 = (_679.x * 2.0) + (-1.0);
    float _687 = (_679.y * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _4043 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _696 = ((_679.z - _665) * _596) + _665;
    float _699 = ((cbMtdParam._m0[23u].y - _696) * _651) + _696;
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _724 = (_718.x * 2.0) + (-1.0);
    float _725 = (_718.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _4054 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _741 = ((sqrt(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) - _505) * _598) + _505;
    float _744 = (((_686 - _533) * _596) + _533) + (cbMtdParam._m0[21u].x * _533);
    float _745 = (((_687 - _534) * _597) + _534) + (cbMtdParam._m0[21u].x * _534);
    float _756 = (((_724 - _744) + (_744 * cbMtdParam._m0[22u].z)) * _651) + _744;
    float _757 = (((_725 - _745) + (_745 * cbMtdParam._m0[22u].z)) * _651) + _745;
    float _758 = (_651 * (sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) - _741)) + _741;
    float _760 = cbMtdParam._m0[22u].x + _521.w;
    float _763 = fma(_758, _241, fma(_757, _248, _756 * _234));
    float _766 = fma(_758, _242, fma(_757, _249, _756 * _235));
    float _769 = fma(_758, _243, fma(_757, _250, _756 * _236));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _4065 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _777 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4087 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4098 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4109 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _845 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _835);
    float _846 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _835);
    float _847 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _835);
    float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
    float _852 = _845 * _851;
    float _853 = _846 * _851;
    float _854 = _847 * _851;
    vec4 _859 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _861 = _859.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1015 = sqrt(((_845 * _845) + (_846 * _846)) + (_847 * _847));
        float _1021 = (cbMatDynParam._m0[5u].x * _1015) + cbMatDynParam._m0[5u].y;
        float _4120 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1026 = (cbMatDynParam._m0[5u].z * _1015) + cbMatDynParam._m0[5u].w;
        float _4131 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) - _1022)) + _1022) < ((_861 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _891 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _894 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _897 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _910 = _253 + 9u;
    uint _911 = _910 + uint(cbMatDynParam._m0[0u].w);
    float _917 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_911].x;
    float _918 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_911].y;
    float _919 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_911].z;
    float _4142 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _935 = ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_774, _775, _776), vec3(_852, _853, _854));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _774) - _852;
    float _944 = (_939 * _775) - _853;
    float _945 = (_939 * _776) - _854;
    float _949 = abs(dot(vec3(_852, _853, _854), vec3(_774, _775, _776)));
    float _4175 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_777);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1062 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1066 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1091 = _996 + _774;
        float _1092 = _1000 + _775;
        float _1093 = _1004 + _776;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_774, _775, _776), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4223 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_774, _775, _776), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4256 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_774, _775, _776), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4289 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1380 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1384 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1407 = _996 + _774;
        float _1408 = _1000 + _775;
        float _1409 = _1004 + _776;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_774, _775, _776), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4352 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_774, _775, _776), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4385 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_774, _775, _776), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4418 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = _1334;
        _1655 = _1334;
        _1656 = _1334;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1348)) + _1348;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _943 * 0.5;
    float _1714 = _944 * 0.5;
    float _1715 = _945 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1844 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1847 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1875 = frontier_phi_17_15_ladder;
        }
        float _2045;
        if (_1844 > 0.0)
        {
            _2045 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2045 = frontier_phi_26_22_ladder;
        }
        float _2340;
        if (_1847 > 0.0)
        {
            _2340 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2340 = frontier_phi_38_33_ladder;
        }
        float _2342 = isnan(_2045) ? _1875 : (isnan(_1875) ? _2045 : min(_1875, _2045));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1841) + _1830;
        float _2348 = (_2343 * _1844) + _1834;
        float _2349 = (_2343 * _1847) + _1838;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_16_38_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_16_38_ladder_2;
        _1865 = frontier_phi_16_38_ladder_1;
        _1867 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1782);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1940 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1943 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2050;
        if (_1937 > 0.0)
        {
            _2050 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2050 = frontier_phi_28_24_ladder;
        }
        float _2367;
        if (_1940 > 0.0)
        {
            _2367 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2367 = frontier_phi_40_35_ladder;
        }
        float _2694;
        if (_1943 > 0.0)
        {
            _2694 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2694 = frontier_phi_50_47_ladder;
        }
        float _2696 = isnan(_2367) ? _2050 : (isnan(_2050) ? _2367 : min(_2050, _2367));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _1937) + _1926;
        float _2702 = (_2697 * _1940) + _1930;
        float _2703 = (_2697 * _1943) + _1934;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_25_50_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_25_50_ladder_2;
        _1964 = frontier_phi_25_50_ladder_1;
        _1966 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1872);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1978 = ((((1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_964 * _951)) * _935;
    float _1979 = _1978 * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1980 = _1978 * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1981 = _1978 * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2037 = _2024 / _2036;
    float _2038 = _2028 / _2036;
    float _2039 = _2032 / _2036;
    float _2186;
    float _2187;
    float _2188;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2066 = ((uint(_2039 > cbSceneParam._m0[59u].y) + uint(_2039 > cbSceneParam._m0[59u].x)) + uint(_2039 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2067 = _2066 + 43u;
        uint _2075 = _2066 + 44u;
        uint _2083 = _2066 + 45u;
        uint _2091 = _2066 + 46u;
        float _2102 = fma(_2036, cbSceneParam._m0[_2067].w, fma(_2032, cbSceneParam._m0[_2067].z, fma(_2028, cbSceneParam._m0[_2067].y, _2024 * cbSceneParam._m0[_2067].x)));
        float _2106 = fma(_2036, cbSceneParam._m0[_2075].w, fma(_2032, cbSceneParam._m0[_2075].z, fma(_2028, cbSceneParam._m0[_2075].y, _2024 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2036, cbSceneParam._m0[_2091].w, fma(_2032, cbSceneParam._m0[_2091].z, fma(_2028, cbSceneParam._m0[_2091].y, _2024 * cbSceneParam._m0[_2091].x)));
        float _2119 = cbSceneParam._m0[33u].z * _2114;
        float _2121 = cbSceneParam._m0[33u].w * _2114;
        float _2124 = fma(_2036, cbSceneParam._m0[_2083].w, fma(_2032, cbSceneParam._m0[_2083].z, fma(_2028, cbSceneParam._m0[_2083].y, _2024 * cbSceneParam._m0[_2083].x))) / _2114;
        float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
        float _4544 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2179 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2102) / _2114, (_2121 + _2106) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2102) / _2114, (_2106 - _2119) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2119) / _2114, (_2106 - _2121) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2121) / _2114, (_2119 + _2106) / _2114), _2124), 0.0)).x), vec4(0.25)));
        _2186 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
        _2187 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
        _2188 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2186 = 1.0;
        _2187 = 1.0;
        _2188 = 1.0;
    }
    float _2252;
    float _2254;
    float _2256;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2240 = fma(_2036, cbSceneParam._m0[63u].w, fma(_2032, cbSceneParam._m0[63u].z, fma(_2028, cbSceneParam._m0[63u].y, _2024 * cbSceneParam._m0[63u].x)));
        float _2241 = fma(_2036, cbSceneParam._m0[60u].w, fma(_2032, cbSceneParam._m0[60u].z, fma(_2028, cbSceneParam._m0[60u].y, _2024 * cbSceneParam._m0[60u].x))) / _2240;
        float _2242 = fma(_2036, cbSceneParam._m0[61u].w, fma(_2032, cbSceneParam._m0[61u].z, fma(_2028, cbSceneParam._m0[61u].y, _2024 * cbSceneParam._m0[61u].x))) / _2240;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2241 >= cbSceneParam._m0[64u].x) && (_2242 >= cbSceneParam._m0[64u].y)) && (_2241 <= cbSceneParam._m0[64u].z)) && (_2242 <= cbSceneParam._m0[64u].w))
        {
            float _2380 = fma(_2036, cbSceneParam._m0[62u].w, fma(_2032, cbSceneParam._m0[62u].z, fma(_2028, cbSceneParam._m0[62u].y, _2024 * cbSceneParam._m0[62u].x))) / _2240;
            float _2384 = isnan(cbSceneParam._m0[41u].w) ? _2380 : (isnan(_2380) ? cbSceneParam._m0[41u].w : max(_2380, cbSceneParam._m0[41u].w));
            float _2427 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
            float _4560 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
            float _2434 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2241, cbSceneParam._m0[33u].w + _2242), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2241, _2242 - cbSceneParam._m0[33u].z), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].z, _2242 - cbSceneParam._m0[33u].w), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2242), _2384), 0.0)).x), vec4(0.25)));
            float _2438 = 1.0 - (_2434 * cbSceneParam._m0[34u].x);
            float _2439 = 1.0 - (_2434 * cbSceneParam._m0[34u].y);
            float _2440 = 1.0 - (_2434 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_37_36_ladder_1 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_37_36_ladder_2 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
        }
        else
        {
            frontier_phi_37_36_ladder = _2188;
            frontier_phi_37_36_ladder_1 = _2187;
            frontier_phi_37_36_ladder_2 = _2186;
        }
        _2252 = frontier_phi_37_36_ladder_2;
        _2254 = frontier_phi_37_36_ladder_1;
        _2256 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2252 = _2186;
        _2254 = _2187;
        _2256 = _2188;
    }
    uvec4 _2261 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2263 = _2261.x * 14u;
    uint _2264 = _2263 + 13u;
    float _2271 = _935 + (-1.0);
    float _2276 = (cbLight._m0[_2264].x * _2271) + 1.0;
    float _2277 = (cbLight._m0[_2264].y * _2271) + 1.0;
    float _2278 = (cbLight._m0[_2264].z * _2271) + 1.0;
    float _2279 = (cbLight._m0[_2264].w * _2271) + 1.0;
    uint _2280 = _2263 + 5u;
    float _2286 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2290 = _2263 + 4u;
    float _2299 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2303 = _2263 | 1u;
    float _2314 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_774, _775, _776));
    float _2317 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_774, _775, _776));
    float _4596 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _4607 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2324 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2331 = ((cbLight._m0[_2280].x * _2286) * _2324) + (((cbLight._m0[_2290].x * _2252) * _2299) * _2322);
    float _2332 = ((_2286 * cbLight._m0[_2280].y) * _2324) + (((cbLight._m0[_2290].y * _2254) * _2299) * _2322);
    float _2333 = ((_2286 * cbLight._m0[_2280].z) * _2324) + (((cbLight._m0[_2290].z * _2256) * _2299) * _2322);
    uvec4 _2337 = floatBitsToUint(cbLight._m0[_2263 + 12u]);
    bool _2339 = _2337.x == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2339)
    {
        _2441 = _2331;
        _2443 = _2332;
        _2445 = _2333;
    }
    else
    {
        uint _2449 = _2263 + 6u;
        float _2465 = (dot(vec3(cbLight._m0[_2263 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4618 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2468 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2441 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2331;
        _2443 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2332;
        _2445 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2333;
    }
    bool _2448 = _2337.y == 0u;
    float _2503;
    float _2505;
    float _2507;
    if (_2448)
    {
        _2503 = _2441;
        _2505 = _2443;
        _2507 = _2445;
    }
    else
    {
        uint _2665 = _2263 + 7u;
        float _2681 = (dot(vec3(cbLight._m0[_2263 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2682 = _2681 * _2681;
        float _4634 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2683 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2684 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2503 = (((cbLight._m0[_2665].x * 0.3183098733425140380859375) * _2683) * _2684) + _2441;
        _2505 = (((cbLight._m0[_2665].y * 0.3183098733425140380859375) * _2683) * _2684) + _2443;
        _2507 = (((cbLight._m0[_2665].z * 0.3183098733425140380859375) * _2683) * _2684) + _2445;
    }
    uint _2510 = _2263 + 8u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _777) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2263].x + _852;
    float _2526 = cbLight._m0[_2263].y + _853;
    float _2527 = cbLight._m0[_2263].z + _854;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2263].xyz));
    float _4650 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _4661 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2539 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2540 = dot(vec3(_774, _775, _776), vec3(_2532, _2533, _2534));
    float _4672 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2532, _2533, _2534));
    float _4683 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2524 * _2524;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2564 = 1.0 - _2524;
    float _2575 = (0.5 / (((_2539 * ((_2538 * _2564) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2564) + _2524) * _2538))) * _2538;
    float _4694 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2577 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    uint _2591 = _2263 + 9u;
    float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _777) * 0.949999988079071044921875);
    float _2603 = _2602 * _2602;
    float _2604 = cbLight._m0[_2303].x + _852;
    float _2605 = cbLight._m0[_2303].y + _853;
    float _2606 = cbLight._m0[_2303].z + _854;
    float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
    float _2611 = _2610 * _2604;
    float _2612 = _2610 * _2605;
    float _2613 = _2610 * _2606;
    float _2614 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2303].xyz));
    float _4705 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2618 = dot(vec3(_774, _775, _776), vec3(_2611, _2612, _2613));
    float _4716 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2611, _2612, _2613));
    float _4727 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2603 * _2603;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2639 = (exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2640 = 1.0 - _2603;
    float _2650 = (0.5 / (((_2539 * ((_2617 * _2640) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2640) + _2603) * _2617))) * _2617;
    float _4738 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2652 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    float _2662 = (((_2639 * cbLight._m0[_2591].x) * _2652) * _2286) + ((((cbLight._m0[_2510].x * _2252) * _2563) * _2577) * _2299);
    float _2663 = (((_2639 * cbLight._m0[_2591].y) * _2652) * _2286) + ((((cbLight._m0[_2510].y * _2254) * _2563) * _2577) * _2299);
    float _2664 = (((_2639 * cbLight._m0[_2591].z) * _2652) * _2286) + ((((cbLight._m0[_2510].z * _2256) * _2563) * _2577) * _2299);
    float _2720;
    float _2722;
    float _2724;
    if (_2339)
    {
        _2720 = _2662;
        _2722 = _2663;
        _2724 = _2664;
    }
    else
    {
        uint _2726 = _2263 + 2u;
        uint _2730 = _2263 + 10u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _777) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _852;
        float _2747 = cbLight._m0[_2726].y + _853;
        float _2748 = cbLight._m0[_2726].z + _854;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2726].xyz));
        float _4749 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2760 = dot(vec3(_774, _775, _776), vec3(_2753, _2754, _2755));
        float _4760 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4771 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2781 = (exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2782 = 1.0 - _2745;
        float _2792 = (0.5 / (((_2539 * ((_2759 * _2782) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2782) + _2745) * _2759))) * _2759;
        float _4782 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2720 = (((_2781 * cbLight._m0[_2730].x) * _2794) * _2795) + _2662;
        _2722 = (((_2781 * cbLight._m0[_2730].y) * _2794) * _2795) + _2663;
        _2724 = (((_2781 * cbLight._m0[_2730].z) * _2794) * _2795) + _2664;
    }
    float _2826;
    float _2828;
    float _2830;
    if (_2448)
    {
        _2826 = _2720;
        _2828 = _2722;
        _2830 = _2724;
    }
    else
    {
        uint _2837 = _2263 + 3u;
        uint _2841 = _2263 + 11u;
        float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2837].w)) * _777) * 0.949999988079071044921875);
        float _2856 = _2855 * _2855;
        float _2857 = cbLight._m0[_2837].x + _852;
        float _2858 = cbLight._m0[_2837].y + _853;
        float _2859 = cbLight._m0[_2837].z + _854;
        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
        float _2864 = _2863 * _2857;
        float _2865 = _2863 * _2858;
        float _2866 = _2863 * _2859;
        float _2867 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2837].xyz));
        float _4798 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2871 = dot(vec3(_774, _775, _776), vec3(_2864, _2865, _2866));
        float _4809 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2875 = dot(vec3(cbLight._m0[_2837].xyz), vec3(_2864, _2865, _2866));
        float _4820 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2879 = _2856 * _2856;
        float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
        float _2892 = (exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2893 = 1.0 - _2856;
        float _2903 = (0.5 / (((_2539 * ((_2870 * _2893) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2893) + _2856) * _2870))) * _2870;
        float _4831 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2826 = (((_2892 * cbLight._m0[_2841].x) * _2905) * _2906) + _2720;
        _2828 = (((_2892 * cbLight._m0[_2841].y) * _2905) * _2906) + _2722;
        _2830 = (((_2892 * cbLight._m0[_2841].z) * _2905) * _2906) + _2724;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2261.y == 0u)
    {
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.x;
        uint _2939 = uint((float(_2927.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2928))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2928)));
        float _2949 = (log2(_2039 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2950 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        uint _2953 = uint(isnan(14.0) ? _2950 : (isnan(_2950) ? 14.0 : min(_2950, 14.0)));
        uvec4 _2958 = texelFetch(g_lightClusterGridBuffer, int(((_2953 << 2u) + (_2939 << 6u)) >> 2u));
        uint _2959 = _2958.x;
        uint _2960 = _2927.z;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((((1u << ((_2960 >> 4u) & 15u)) + 4294967295u) & _2959) == 0u) || ((_2960 & 240u) == 0u))
        {
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
        }
        else
        {
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3207)
                {
                    frontier_phi_71_pred = _3196;
                    frontier_phi_71_pred_1 = _3195;
                    frontier_phi_71_pred_2 = _3194;
                    frontier_phi_71_pred_3 = _3193;
                    frontier_phi_71_pred_4 = _3192;
                    frontier_phi_71_pred_5 = _3191;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3206;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3197 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _2037;
                        float _3403 = _3362.y - _2038;
                        float _3404 = _3362.z - _2039;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_891, _894, _897), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4857 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3433 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _2037;
                        float _3438 = (-0.0) - _2038;
                        float _3439 = (-0.0) - _2039;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3453 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3454 = 1.0 - _951;
                        float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                        float _3462 = _3461 * _3461;
                        float _3463 = _3462 * _3462;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3466 = _3446 + _3411;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3474 = dot(vec3(_891, _894, _897), vec3(_3444, _3445, _3446));
                        float _4873 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3477 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3478 = dot(vec3(_891, _894, _897), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                        float _4884 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                        float _3486 = _3422 * _3462;
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3412) + _3487;
                        float _4895 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3492 = 1.0 - _3462;
                        float _3502 = (0.5 / (((_3491 * ((_3477 * _3492) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3462) * _3477))) * _3491;
                        float _4906 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3513 = (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3485 * _3485) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3266 = (_3433 * _3381.x) + _3339;
                        _3267 = (_3433 * _3381.y) + _3340;
                        _3268 = (_3433 * _3381.z) + _3341;
                        _3263 = (_3513 * _3398.x) + _3336;
                        _3264 = (_3513 * _3398.y) + _3337;
                        _3265 = (_3513 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_71_pred = _3268;
                    frontier_phi_71_pred_1 = _3267;
                    frontier_phi_71_pred_2 = _3266;
                    frontier_phi_71_pred_3 = _3265;
                    frontier_phi_71_pred_4 = _3264;
                    frontier_phi_71_pred_5 = _3263;
                }
                _3050 = frontier_phi_71_pred;
                _3048 = frontier_phi_71_pred_1;
                _3046 = frontier_phi_71_pred_2;
                _3044 = frontier_phi_71_pred_3;
                _3042 = frontier_phi_71_pred_4;
                _3040 = frontier_phi_71_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3040;
                    _3192 = _3042;
                    _3193 = _3044;
                    _3194 = _3046;
                    _3195 = _3048;
                    _3196 = _3050;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
        }
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.z;
        uint _3056 = (_3054 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3056) & _2959) == 0u)
        {
            _3159 = _3039;
            _3161 = _3041;
            _3163 = _3043;
            _3165 = _3045;
            _3167 = _3047;
            _3169 = _3049;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
            float _3185 = _3184 * _2037;
            float _3186 = _3184 * _2038;
            float _3187 = _3184 * _2039;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3056 < ((_3054 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3319 = _3039;
                float _3320 = _3041;
                float _3321 = _3043;
                float _3322 = _3045;
                float _3323 = _3047;
                float _3324 = _3049;
                uint _3325 = _3056;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3335)
                    {
                        frontier_phi_82_pred = _3324;
                        frontier_phi_82_pred_1 = _3323;
                        frontier_phi_82_pred_2 = _3322;
                        frontier_phi_82_pred_3 = _3321;
                        frontier_phi_82_pred_4 = _3320;
                        frontier_phi_82_pred_5 = _3319;
                    }
                    else
                    {
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3540 = _3319;
                        float _3541 = _3320;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        uint _3546 = _3334;
                        uint _3547;
                        vec4 _3572;
                        float _3573;
                        vec4 _3588;
                        vec3 _3600;
                        vec4 _3615;
                        vec4 _3631;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3557 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3546));
                            _3547 = (_3546 + 4294967295u) & _3546;
                            uint _3559 = _3557 * 40u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3573 = _3572.w;
                            uint _3575 = (_3557 * 40u) + 4u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3557 * 40u) + 8u;
                            _3600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x));
                            uint _3602 = (_3557 * 40u) + 16u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3618 = (_3557 * 40u) + 20u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3557 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3557 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_2039, _3665.z, fma(_2038, _3665.y, _3665.x * _2037)) + _3665.w;
                            _3678 = !((fma(_2039, _3646.z, fma(_2038, _3646.y, _3646.x * _2037)) + _3646.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3572.x - _2037;
                                float _3706 = _3572.y - _2038;
                                float _3707 = _3572.z - _2039;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3573 * _3573));
                                float _4917 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3723 = sqrt(_3708) * _3588.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_891, _894, _897))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_2039, _3615.z, fma(_2038, _3615.y, _3615.x * _2037)) + _3615.w) / _3677;
                                float _3737 = (fma(_2039, _3631.z, fma(_2038, _3631.y, _3631.x * _2037)) + _3631.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4933 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _951;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3185;
                                float _3767 = _3713 - _3186;
                                float _3768 = _3714 - _3187;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_891, _894, _897), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4944 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3780 = dot(vec3(_891, _894, _897), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4955 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_891, _894, _897), vec3(_3712, _3713, _3714))) + _3789;
                                float _4966 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4977 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3743 * _3588.z;
                                frontier_phi_88_pred_1 = _3743 * _3588.y;
                                frontier_phi_88_pred_2 = _3743 * _3588.x;
                                frontier_phi_88_pred_3 = _3817 * _3600.z;
                                frontier_phi_88_pred_4 = _3817 * _3600.y;
                                frontier_phi_88_pred_5 = _3817 * _3600.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3826 = frontier_phi_88_pred;
                            _3825 = frontier_phi_88_pred_1;
                            _3824 = frontier_phi_88_pred_2;
                            _3823 = frontier_phi_88_pred_3;
                            _3822 = frontier_phi_88_pred_4;
                            _3821 = frontier_phi_88_pred_5;
                            _3530 = _3824 + _3543;
                            _3531 = _3825 + _3544;
                            _3532 = _3826 + _3545;
                            _3527 = _3821 + _3540;
                            _3528 = _3822 + _3541;
                            _3529 = _3823 + _3542;
                            if (_3547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3547;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3532;
                        frontier_phi_82_pred_1 = _3531;
                        frontier_phi_82_pred_2 = _3530;
                        frontier_phi_82_pred_3 = _3529;
                        frontier_phi_82_pred_4 = _3528;
                        frontier_phi_82_pred_5 = _3527;
                    }
                    _3170 = frontier_phi_82_pred;
                    _3168 = frontier_phi_82_pred_1;
                    _3166 = frontier_phi_82_pred_2;
                    _3164 = frontier_phi_82_pred_3;
                    _3162 = frontier_phi_82_pred_4;
                    _3160 = frontier_phi_82_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3160;
                        _3320 = _3162;
                        _3321 = _3164;
                        _3322 = _3166;
                        _3323 = _3168;
                        _3324 = _3170;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3166;
                frontier_phi_63_64_ladder_1 = _3170;
                frontier_phi_63_64_ladder_2 = _3168;
                frontier_phi_63_64_ladder_3 = _3164;
                frontier_phi_63_64_ladder_4 = _3162;
                frontier_phi_63_64_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_63_64_ladder = _3045;
                frontier_phi_63_64_ladder_1 = _3049;
                frontier_phi_63_64_ladder_2 = _3047;
                frontier_phi_63_64_ladder_3 = _3043;
                frontier_phi_63_64_ladder_4 = _3041;
                frontier_phi_63_64_ladder_5 = _3039;
            }
            _3159 = frontier_phi_63_64_ladder_5;
            _3161 = frontier_phi_63_64_ladder_4;
            _3163 = frontier_phi_63_64_ladder_3;
            _3165 = frontier_phi_63_64_ladder;
            _3167 = frontier_phi_63_64_ladder_2;
            _3169 = frontier_phi_63_64_ladder_1;
        }
        float _3174 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2972 = (_3174 * _3165) + _2503;
        _2974 = (_3174 * _3167) + _2505;
        _2976 = (_3174 * _3169) + _2507;
        _2978 = ((_3159 * 0.039999999105930328369140625) * _3174) + _2826;
        _2980 = ((_3161 * 0.039999999105930328369140625) * _3174) + _2828;
        _2982 = ((_3163 * 0.039999999105930328369140625) * _3174) + _2830;
    }
    else
    {
        _2972 = _2503;
        _2974 = _2505;
        _2976 = _2507;
        _2978 = _2826;
        _2980 = _2828;
        _2982 = _2830;
    }
    float _4993 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _5004 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _5015 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2999 = ((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2972 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _935))) + ((_2978 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _3000 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2974 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _935))) + ((_2980 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _3001 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2976 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _935))) + ((_2982 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    uint _3002 = _253 + 6u;
    float _3010 = _872 / cbSceneParam._m0[86u].x;
    float _3011 = _873 / cbSceneParam._m0[86u].y;
    vec4 _3025 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3027 = _3025.x;
    float _3028 = _3025.y;
    float _3029 = _3025.z;
    float _3030 = _3025.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _3064 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _3065 = _3064 / _795;
        float _3076 = _3065 * _845;
        float _3077 = _846 * _3065;
        float _3078 = (-0.0) - _3077;
        float _3079 = _3065 * _847;
        float _3081 = (cbSceneParam._m0[77u].w * _3078) / _3064;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3077;
        float _3089 = sqrt(((_3076 * _3076) + (_3077 * _3077)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3064)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3078 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3222 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3276 = ((abs(_3089 / _3078) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3099 * _3231) - exp2(_3099 * _3232)) * _3220))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3030);
        _3101 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3027;
        _3103 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3028;
        _3105 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3029;
        _3107 = _3287 * _3030;
    }
    else
    {
        _3101 = _3027;
        _3103 = _3028;
        _3105 = _3029;
        _3107 = _3030;
    }
    bool _3314;
    vec4 _3117;
    vec4 _3139;
    float _3141;
    float _3145;
    float _3146;
    float _3147;
    float _3148;
    bool _3158;
    for (;;)
    {
        _3117 = cbMatDynParam._m0[0u];
        float _3119 = roundEven(_3117.y);
        bool _3120 = _3119 == 3.0;
        float _3121 = log2(_3107);
        float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * _2999;
        float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * _3000;
        float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * _3001;
        float _3137 = _861 + (-0.5);
        _3139 = cbMtdParam._m0[1u];
        _3141 = _3139.y * _3137;
        float _3144 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3145 = _3144 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
        _3146 = _3144 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
        _3147 = _3144 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
        _3148 = _3137 * 0.999000012874603271484375;
        _3158 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3158)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3148) < 0.5)
            {
                _3314 = true;
                break;
            }
        }
        uint _3255 = _910 + uint(_3117.w);
        if ((cbInstanceData._m0[_3255].w < 1.0) && ((cbInstanceData._m0[_3255].w + _3148) < 0.5))
        {
            _3314 = true;
            break;
        }
        if ((_3141 + 1.0) < _3139.x)
        {
            _3314 = true;
            break;
        }
        _3314 = false;
        break;
    }
    float _3518;
    if (_3314)
    {
        discard_state = true;
        _3518 = 0.0;
    }
    else
    {
        _3518 = cbInstanceData._m0[_3002].w;
    }
    SV_Target.x = _3145;
    SV_Target.y = _3146;
    SV_Target.z = _3147;
    SV_Target.w = _3518;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3002].w;
    discard_exit();
}


