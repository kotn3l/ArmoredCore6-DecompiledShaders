#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1537;
float _3917;
float _3918;
float _3919;
float _3920;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3929 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _454 = (_447 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _455 = (_447 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _456 = (_447 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _473 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].z) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3940 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[24u].z) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3951 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _527)) + _527);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _528)) + _528);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _529)) + _529);
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _667 = _663.z;
    float _674 = ((_646.x - _665) * _447) + _665;
    float _675 = ((_646.y - _666) * _447) + _666;
    float _676 = ((_646.z - _667) * _447) + _667;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _699 = ((_688.x - _674) * _520) + _674;
    float _700 = ((_688.y - _675) * _520) + _675;
    float _701 = ((_688.z - _676) * _520) + _676;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _726 = ((_713.z - _701) * _589) + _701;
    float _729 = ((((_713.x - _699) * _589) + _699) * 2.0) + (-1.0);
    float _731 = ((((_713.y - _700) * _589) + _700) * 2.0) + (-1.0);
    float _732 = dot(vec2(_729, _731), vec2(_729, _731));
    float _3962 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _737 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _778 = _776.x;
    float _779 = 1.0 - _778;
    float _785 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _788 = ((isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : min(_785, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _797 = (_788 - ((((((_778 - _779) * cbMtdParam._m0[24u].w) + _779) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _788))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3983 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _805 = (_798 * ((_626.x * cbMtdParam._m0[18u].x) - _602)) + _602;
    float _806 = (_798 * ((_626.y * cbMtdParam._m0[18u].y) - _605)) + _605;
    float _807 = (_798 * ((_626.z * cbMtdParam._m0[18u].z) - _608)) + _608;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _849 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_821 - _822) * cbMtdParam._m0[24u].y) + _822) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3994 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _850 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _858 = ((((cbMtdParam._m0[10u].x - _805) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _850) + _805;
    float _859 = ((((cbMtdParam._m0[10u].y - _806) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _850) + _806;
    float _860 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _807)) * _850) + _807;
    float _864 = (cbMtdParam._m0[19u].w * (_751.z - _726)) + _726;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _885 = (_878.x * 2.0) + (-1.0);
    float _886 = (_878.y * 2.0) + (-1.0);
    float _887 = dot(vec2(_885, _886), vec2(_885, _886));
    float _4005 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _895 = (_798 * (_878.z - _864)) + _864;
    float _898 = ((cbMtdParam._m0[23u].y - _895) * _850) + _895;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _923 = (_917.x * 2.0) + (-1.0);
    float _924 = (_917.y * 2.0) + (-1.0);
    float _925 = dot(vec2(_923, _924), vec2(_923, _924));
    float _4016 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _933 = (((_751.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _729;
    float _934 = (((_751.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _731;
    float _946 = (((_885 - _933) + (cbMtdParam._m0[21u].x * _933)) * _798) + _933;
    float _947 = (((_886 - _934) + (cbMtdParam._m0[21u].x * _934)) * _798) + _934;
    float _948 = (_798 * (sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _737)) + _737;
    float _959 = (((_923 - _946) + (_946 * cbMtdParam._m0[22u].z)) * _850) + _946;
    float _960 = (((_924 - _947) + (_947 * cbMtdParam._m0[22u].z)) * _850) + _947;
    float _961 = ((sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _948) * _850) + _948;
    float _963 = cbMtdParam._m0[22u].x + _751.w;
    float _966 = fma(_961, _254 * NORMAL.x, fma(_960, _261 * TANGENT.x, (_247 * _239) * _959));
    float _969 = fma(_961, _254 * NORMAL.y, fma(_960, _261 * TANGENT.y, (_247 * _240) * _959));
    float _972 = fma(_961, _254 * NORMAL.z, fma(_960, _261 * TANGENT.z, (_247 * _241) * _959));
    float _976 = inversesqrt(dot(vec3(_966, _969, _972), vec3(_966, _969, _972)));
    float _977 = _976 * _966;
    float _978 = _976 * _969;
    float _979 = _976 * _972;
    float _4027 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _980 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4049 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4060 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4071 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _998 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1048 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1038);
    float _1049 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1038);
    float _1050 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1038);
    float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
    float _1055 = _1048 * _1054;
    float _1056 = _1049 * _1054;
    float _1057 = _1050 * _1054;
    vec4 _1062 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1064 = _1062.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1218 = sqrt(((_1048 * _1048) + (_1049 * _1049)) + (_1050 * _1050));
        float _1224 = (cbMatDynParam._m0[5u].x * _1218) + cbMatDynParam._m0[5u].y;
        float _4082 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1229 = (cbMatDynParam._m0[5u].z * _1218) + cbMatDynParam._m0[5u].w;
        float _4093 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) - _1225)) + _1225) < ((_1064 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1075 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1076 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1094 = fma(_979, cbSceneParam._m0[5u].z, fma(_978, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _977));
    float _1097 = fma(_979, cbSceneParam._m0[6u].z, fma(_978, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _977));
    float _1100 = fma(_979, cbSceneParam._m0[7u].z, fma(_978, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _977));
    uint _1113 = _267 + 9u;
    uint _1114 = _1113 + uint(cbMatDynParam._m0[0u].w);
    float _1120 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1114].x;
    float _1121 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1114].y;
    float _1122 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1114].z;
    float _4104 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    vec4 _1134 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1075, cbSceneParam._m0[86u].y * _1076));
    float _1138 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _1134.x;
    float _1139 = dot(vec3(_977, _978, _979), vec3(_1055, _1056, _1057));
    float _1142 = _1139 * 2.0;
    float _1146 = (_1142 * _977) - _1055;
    float _1147 = (_1142 * _978) - _1056;
    float _1148 = (_1142 * _979) - _1057;
    float _1152 = abs(dot(vec3(_1055, _1056, _1057), vec3(_977, _978, _979)));
    float _4137 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1154 = sqrt(_980);
    float _1167 = exp2((_1154 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1154 * 3.0));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1536;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1261 = fma(_1207, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199));
        float _1265 = fma(_1207, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199));
        float _1269 = fma(_1207, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199));
        float _1294 = _1199 + _977;
        float _1295 = _1203 + _978;
        float _1296 = _1207 + _979;
        float _1306 = fma(_1296, cbModelParam._m0[26u].z, fma(_1295, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1294)) - _1261;
        float _1307 = fma(_1296, cbModelParam._m0[27u].z, fma(_1295, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1294)) - _1265;
        float _1308 = fma(_1296, cbModelParam._m0[28u].z, fma(_1295, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1294)) - _1269;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1261 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1265 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[34u].z) + ((((((_1269 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1364 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1330.x + (-0.5));
        float _1366 = _1364 * (_1330.y + (-0.5));
        float _1367 = _1364 * (_1330.z + (-0.5));
        float _1374 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1337.x + (-0.5));
        float _1376 = _1374 * (_1337.y + (-0.5));
        float _1377 = _1374 * (_1337.z + (-0.5));
        float _1384 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1344.x + (-0.5));
        float _1386 = _1384 * (_1344.y + (-0.5));
        float _1387 = _1384 * (_1344.z + (-0.5));
        float _1394 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1351.x + (-0.5));
        float _1396 = _1394 * (_1351.y + (-0.5));
        float _1397 = _1394 * (_1351.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1418 = (dot(vec3(_977, _978, _979), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1428 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4185 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1430 + 1.0))) + _1435) * _1398;
        float _1445 = _1366 * 0.5;
        float _1446 = _1376 * 0.5;
        float _1447 = _1386 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_977, _978, _979), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4218 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1472 + 1.0))) + _1477) * _1399;
        float _1487 = _1367 * 0.5;
        float _1488 = _1377 * 0.5;
        float _1489 = _1387 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_977, _978, _979), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4251 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1514 + 1.0))) + _1519) * _1400;
        _1536 = _1367;
        _1538 = _1366;
        _1539 = _1365;
        _1540 = _1377;
        _1541 = _1376;
        _1542 = _1375;
        _1543 = _1387;
        _1544 = _1386;
        _1545 = _1385;
        _1546 = _1400;
        _1547 = _1399;
        _1548 = _1398;
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1551 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1537;
        _1538 = _1537;
        _1539 = _1537;
        _1540 = _1537;
        _1541 = _1537;
        _1542 = _1537;
        _1543 = _1537;
        _1544 = _1537;
        _1545 = _1537;
        _1546 = _1537;
        _1547 = _1537;
        _1548 = _1537;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1577 = fma(_1207, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199));
        float _1581 = fma(_1207, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199));
        float _1585 = fma(_1207, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199));
        float _1608 = _1199 + _977;
        float _1609 = _1203 + _978;
        float _1610 = _1207 + _979;
        float _1620 = fma(_1610, cbModelParam._m0[30u].z, fma(_1609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1608)) - _1577;
        float _1621 = fma(_1610, cbModelParam._m0[31u].z, fma(_1609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1608)) - _1581;
        float _1622 = fma(_1610, cbModelParam._m0[32u].z, fma(_1609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1608)) - _1585;
        float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
        float _1639 = ((_1626 * _1620) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1577 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1626 * _1621) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1581 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1626 * _1622) / cbModelParam._m0[35u].z) + ((((((_1585 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        float _1676 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1643.x + (-0.5));
        float _1678 = _1676 * (_1643.y + (-0.5));
        float _1679 = _1676 * (_1643.z + (-0.5));
        float _1686 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1650.x + (-0.5));
        float _1688 = _1686 * (_1650.y + (-0.5));
        float _1689 = _1686 * (_1650.z + (-0.5));
        float _1696 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1657.x + (-0.5));
        float _1698 = _1696 * (_1657.y + (-0.5));
        float _1699 = _1696 * (_1657.z + (-0.5));
        float _1706 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1664.x + (-0.5));
        float _1708 = _1706 * (_1664.y + (-0.5));
        float _1709 = _1706 * (_1664.z + (-0.5));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1677 * 0.5;
        float _1714 = _1687 * 0.5;
        float _1715 = _1697 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_977, _978, _979), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4314 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1740 + 1.0))) + _1745) * _1710;
        float _1755 = _1678 * 0.5;
        float _1756 = _1688 * 0.5;
        float _1757 = _1698 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_977, _978, _979), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4347 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1782 + 1.0))) + _1787) * _1711;
        float _1797 = _1679 * 0.5;
        float _1798 = _1689 * 0.5;
        float _1799 = _1699 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_977, _978, _979), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4380 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1824 + 1.0))) + _1829) * _1712;
        _1846 = _1679;
        _1847 = _1678;
        _1848 = _1677;
        _1849 = _1689;
        _1850 = _1688;
        _1851 = _1687;
        _1852 = _1699;
        _1853 = _1698;
        _1854 = _1697;
        _1855 = _1712;
        _1856 = _1711;
        _1857 = _1710;
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
    }
    else
    {
        _1846 = _1537;
        _1847 = _1537;
        _1848 = _1537;
        _1849 = _1537;
        _1850 = _1537;
        _1851 = _1537;
        _1852 = _1537;
        _1853 = _1537;
        _1854 = _1537;
        _1855 = _1537;
        _1856 = _1537;
        _1857 = _1537;
        _1858 = 0.0;
        _1859 = 0.0;
        _1860 = 0.0;
    }
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1549)) + _1549;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1550)) + _1550;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1551)) + _1551;
    float _1893 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1870));
    float _1914 = _1146 * 0.5;
    float _1915 = _1147 * 0.5;
    float _1916 = _1148 * 0.5;
    float _1917 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1920 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1923 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1957;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1930 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1536, _1540, _1543, _1546));
        float _1934 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1538, _1541, _1544, _1547));
        float _1938 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1539, _1542, _1545, _1548));
        float _1945 = dot(vec4(cbModelParam._m0[39u]), vec4(_1914, _1915, _1916, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1968;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1959 = dot(vec4(cbModelParam._m0[40u]), vec4(_1914, _1915, _1916, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1972 = (_1968 * cbModelParam._m0[1u].x) + (_1957 * (1.0 - cbModelParam._m0[1u].x));
    float _1982 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _980);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1982 : min(cbModelParam._m0[25u].z, _1982));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2030 = fma(_1207, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199)) + cbModelParam._m0[13u].w;
        float _2034 = fma(_1207, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199)) + cbModelParam._m0[14u].w;
        float _2038 = fma(_1207, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199)) + cbModelParam._m0[15u].w;
        float _2041 = fma(_1148, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146));
        float _2044 = fma(_1148, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146));
        float _2047 = fma(_1148, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146));
        float _2075;
        if (_2041 > 0.0)
        {
            _2075 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2075 = frontier_phi_17_15_ladder;
        }
        float _2296;
        if (_2044 > 0.0)
        {
            _2296 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2296 = frontier_phi_26_22_ladder;
        }
        float _2542;
        if (_2047 > 0.0)
        {
            _2542 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2542 = frontier_phi_38_33_ladder;
        }
        float _2544 = isnan(_2296) ? _2075 : (isnan(_2075) ? _2296 : min(_2075, _2296));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _2041) + _2030;
        float _2550 = (_2545 * _2044) + _2034;
        float _2551 = (_2545 * _2047) + _2038;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2552;
        float _2556 = _2552 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 > _2556) || ((_2550 < _2554) || ((_2549 < _2554) || (_2549 > _2556))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2551, cbModelParam._m0[9u].z, fma(_2550, cbModelParam._m0[9u].y, _2549 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2551, cbModelParam._m0[10u].z, fma(_2550, cbModelParam._m0[10u].y, _2549 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2551, cbModelParam._m0[11u].z, fma(_2550, cbModelParam._m0[11u].y, _2549 * cbModelParam._m0[11u].x))), _1983);
            frontier_phi_16_38_ladder = _2675.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2675.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2675.x * cbModelParam._m0[1u].y;
        }
        _2063 = frontier_phi_16_38_ladder_2;
        _2065 = frontier_phi_16_38_ladder_1;
        _2067 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1146, _1147, _1148), _1983);
        _2063 = _2051.x * cbModelParam._m0[1u].y;
        _2065 = _2051.y * cbModelParam._m0[1u].y;
        _2067 = _2051.z * cbModelParam._m0[1u].y;
    }
    float _2071 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _980);
    float _2072 = isnan(_2071) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2071 : min(cbModelParam._m0[25u].w, _2071));
    float _2161;
    float _2163;
    float _2165;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2125 = fma(_1207, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199)) + cbModelParam._m0[21u].w;
        float _2129 = fma(_1207, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199)) + cbModelParam._m0[22u].w;
        float _2133 = fma(_1207, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199)) + cbModelParam._m0[23u].w;
        float _2136 = fma(_1148, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146));
        float _2139 = fma(_1148, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146));
        float _2142 = fma(_1148, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146));
        float _2301;
        if (_2136 > 0.0)
        {
            _2301 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2301 = frontier_phi_28_24_ladder;
        }
        float _2569;
        if (_2139 > 0.0)
        {
            _2569 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2569 = frontier_phi_40_35_ladder;
        }
        float _2774;
        if (_2142 > 0.0)
        {
            _2774 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2774 = frontier_phi_49_46_ladder;
        }
        float _2776 = isnan(_2569) ? _2301 : (isnan(_2301) ? _2569 : min(_2301, _2569));
        float _2777 = isnan(_2774) ? _2776 : (isnan(_2776) ? _2774 : min(_2776, _2774));
        float _2781 = (_2777 * _2136) + _2125;
        float _2782 = (_2777 * _2139) + _2129;
        float _2783 = (_2777 * _2142) + _2133;
        float _2784 = _2777 * 9.9999997473787516355514526367188e-05;
        float _2785 = (-1.0) - _2784;
        float _2787 = _2784 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2783 > _2787) || ((_2783 < _2785) || ((_2782 > _2787) || ((_2782 < _2785) || ((_2781 < _2785) || (_2781 > _2787))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2783, cbModelParam._m0[17u].z, fma(_2782, cbModelParam._m0[17u].y, _2781 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2783, cbModelParam._m0[18u].z, fma(_2782, cbModelParam._m0[18u].y, _2781 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2783, cbModelParam._m0[19u].z, fma(_2782, cbModelParam._m0[19u].y, _2781 * cbModelParam._m0[19u].x))), _2072);
            frontier_phi_25_49_ladder = _2982.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2982.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2982.x * cbModelParam._m0[1u].z;
        }
        _2161 = frontier_phi_25_49_ladder_2;
        _2163 = frontier_phi_25_49_ladder_1;
        _2165 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1146, _1147, _1148), _2072);
        _2161 = _2145.x * cbModelParam._m0[1u].z;
        _2163 = _2145.y * cbModelParam._m0[1u].z;
        _2165 = _2145.z * cbModelParam._m0[1u].z;
    }
    float _2177 = ((((1.0 - _1167) * ((_1154 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1167 * _1154)) * _1138;
    float _2178 = _2177 * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2179 = _2177 * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2180 = _2177 * ((cbModelParam._m0[1u].w * (_2165 - _2067)) + _2067);
    float _2183 = fma(_2180, cbSceneParam._m0[89u].z, fma(_2179, cbSceneParam._m0[89u].y, _2178 * cbSceneParam._m0[89u].x));
    float _2186 = fma(_2180, cbSceneParam._m0[90u].z, fma(_2179, cbSceneParam._m0[90u].y, _2178 * cbSceneParam._m0[90u].x));
    float _2189 = fma(_2180, cbSceneParam._m0[91u].z, fma(_2179, cbSceneParam._m0[91u].y, _2178 * cbSceneParam._m0[91u].x));
    vec4 _2197 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1075, _1076));
    float _2199 = _2197.w;
    float _2211 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2199);
    float _2212 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2199);
    float _2213 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2199);
    uvec4 _2217 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2219 = _2217.x * 14u;
    uint _2220 = _2219 + 13u;
    float _2227 = _1138 + (-1.0);
    float _2232 = (cbLight._m0[_2220].x * _2227) + 1.0;
    float _2233 = (cbLight._m0[_2220].y * _2227) + 1.0;
    float _2234 = (cbLight._m0[_2220].z * _2227) + 1.0;
    float _2235 = (cbLight._m0[_2220].w * _2227) + 1.0;
    uint _2236 = _2219 + 5u;
    float _2242 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2246 = _2219 + 4u;
    float _2255 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2259 = _2219 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_977, _978, _979));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_977, _978, _979));
    float _4516 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4527 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2236].x * _2242) * _2280) + (((cbLight._m0[_2246].x * _2211) * _2255) * _2278);
    float _2288 = ((_2242 * cbLight._m0[_2236].y) * _2280) + (((cbLight._m0[_2246].y * _2212) * _2255) * _2278);
    float _2289 = ((_2242 * cbLight._m0[_2236].z) * _2280) + (((cbLight._m0[_2246].z * _2213) * _2255) * _2278);
    uvec4 _2293 = floatBitsToUint(cbLight._m0[_2219 + 12u]);
    bool _2295 = _2293.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2295)
    {
        _2306 = _2287;
        _2308 = _2288;
        _2310 = _2289;
    }
    else
    {
        uint _2314 = _2219 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2219 + 2u].xyz), vec3(_977, _978, _979)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4538 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2333 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2287;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2288;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2289;
    }
    bool _2313 = _2293.y == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2313)
    {
        _2351 = _2306;
        _2353 = _2308;
        _2355 = _2310;
    }
    else
    {
        uint _2513 = _2219 + 7u;
        float _2529 = (dot(vec3(cbLight._m0[_2219 + 3u].xyz), vec3(_977, _978, _979)) * 0.5) + 0.5;
        float _2530 = _2529 * _2529;
        float _4554 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2531 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2532 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2351 = (((cbLight._m0[_2513].x * 0.3183098733425140380859375) * _2531) * _2532) + _2306;
        _2353 = (((cbLight._m0[_2513].y * 0.3183098733425140380859375) * _2531) * _2532) + _2308;
        _2355 = (((cbLight._m0[_2513].z * 0.3183098733425140380859375) * _2531) * _2532) + _2310;
    }
    uint _2358 = _2219 + 8u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _980) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2219].x + _1055;
    float _2374 = cbLight._m0[_2219].y + _1056;
    float _2375 = cbLight._m0[_2219].z + _1057;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_977, _978, _979), vec3(cbLight._m0[_2219].xyz));
    float _4570 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _4581 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _2387 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2388 = dot(vec3(_977, _978, _979), vec3(_2380, _2381, _2382));
    float _4592 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2380, _2381, _2382));
    float _4603 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2372 * _2372;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2372;
    float _2423 = (0.5 / (((_2387 * ((_2386 * _2412) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2412) + _2372) * _2386))) * _2386;
    float _4614 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    uint _2439 = _2219 + 9u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _980) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2259].x + _1055;
    float _2453 = cbLight._m0[_2259].y + _1056;
    float _2454 = cbLight._m0[_2259].z + _1057;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_977, _978, _979), vec3(cbLight._m0[_2259].xyz));
    float _4625 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2466 = dot(vec3(_977, _978, _979), vec3(_2459, _2460, _2461));
    float _4636 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2459, _2460, _2461));
    float _4647 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2451 * _2451;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2488 = 1.0 - _2451;
    float _2498 = (0.5 / (((_2387 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2488) + _2451) * _2465))) * _2465;
    float _4658 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    float _2510 = (((_2487 * cbLight._m0[_2439].x) * _2500) * _2242) + ((((cbLight._m0[_2358].x * _2211) * _2411) * _2425) * _2255);
    float _2511 = (((_2487 * cbLight._m0[_2439].y) * _2500) * _2242) + ((((cbLight._m0[_2358].y * _2212) * _2411) * _2425) * _2255);
    float _2512 = (((_2487 * cbLight._m0[_2439].z) * _2500) * _2242) + ((((cbLight._m0[_2358].z * _2213) * _2411) * _2425) * _2255);
    float _2574;
    float _2576;
    float _2578;
    if (_2295)
    {
        _2574 = _2510;
        _2576 = _2511;
        _2578 = _2512;
    }
    else
    {
        uint _2580 = _2219 + 2u;
        uint _2584 = _2219 + 10u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _980) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _1055;
        float _2601 = cbLight._m0[_2580].y + _1056;
        float _2602 = cbLight._m0[_2580].z + _1057;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_977, _978, _979), vec3(cbLight._m0[_2580].xyz));
        float _4669 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2614 = dot(vec3(_977, _978, _979), vec3(_2607, _2608, _2609));
        float _4680 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4691 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2636 = 1.0 - _2599;
        float _2646 = (0.5 / (((_2387 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2636) + _2599) * _2613))) * _2613;
        float _4702 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2574 = (((_2635 * cbLight._m0[_2584].x) * _2648) * _2649) + _2510;
        _2576 = (((_2635 * cbLight._m0[_2584].y) * _2648) * _2649) + _2511;
        _2578 = (((_2635 * cbLight._m0[_2584].z) * _2648) * _2649) + _2512;
    }
    float _2684;
    float _2686;
    float _2688;
    if (_2313)
    {
        _2684 = _2574;
        _2686 = _2576;
        _2688 = _2578;
    }
    else
    {
        uint _2695 = _2219 + 3u;
        uint _2699 = _2219 + 11u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _980) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _1055;
        float _2716 = cbLight._m0[_2695].y + _1056;
        float _2717 = cbLight._m0[_2695].z + _1057;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_977, _978, _979), vec3(cbLight._m0[_2695].xyz));
        float _4718 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2729 = dot(vec3(_977, _978, _979), vec3(_2722, _2723, _2724));
        float _4729 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4740 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2751 = 1.0 - _2714;
        float _2761 = (0.5 / (((_2387 * ((_2728 * _2751) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2751) + _2714) * _2728))) * _2728;
        float _4751 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2684 = (((_2750 * cbLight._m0[_2699].x) * _2763) * _2764) + _2574;
        _2686 = (((_2750 * cbLight._m0[_2699].y) * _2763) * _2764) + _2576;
        _2688 = (((_2750 * cbLight._m0[_2699].z) * _2763) * _2764) + _2578;
    }
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_2217.y == 0u)
    {
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2840 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2839;
        float _2841 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2839;
        float _2842 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2839;
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.x;
        uint _2866 = uint((float(_2854.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1076) / _2855))) + floor(float(uint(cbSceneParam._m0[85u].x * _1075) / _2855)));
        float _2876 = (log2(_2842 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2877 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        uint _2880 = uint(isnan(14.0) ? _2877 : (isnan(_2877) ? 14.0 : min(_2877, 14.0)));
        uvec4 _2885 = texelFetch(g_lightClusterGridBuffer, int(((_2880 << 2u) + (_2866 << 6u)) >> 2u));
        uint _2886 = _2885.x;
        uint _2887 = _2854.z;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((((1u << ((_2887 >> 4u) & 15u)) + 4294967295u) & _2886) == 0u) || ((_2887 & 240u) == 0u))
        {
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
        }
        else
        {
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            uint _3146 = 0u;
            uint _3155;
            bool _3156;
            for (;;)
            {
                _3155 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                _3156 = _3155 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3156)
                {
                    frontier_phi_66_pred = _3140;
                    frontier_phi_66_pred_1 = _3145;
                    frontier_phi_66_pred_2 = _3144;
                    frontier_phi_66_pred_3 = _3143;
                    frontier_phi_66_pred_4 = _3142;
                    frontier_phi_66_pred_5 = _3141;
                }
                else
                {
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    uint _3291;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3155;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3295 = uint(findLSB(_3291)) + (_3146 << 5u);
                        uint _3292 = (_3291 + 4294967295u) & _3291;
                        uint _3297 = _3295 * 48u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3317 = (_3295 * 48u) + 4u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3336 = (_3295 * 48u) + 8u;
                        vec3 _3347 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x));
                        float _3351 = _3311.x - _2840;
                        float _3352 = _3311.y - _2841;
                        float _3353 = _3311.z - _2842;
                        float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                        float _3357 = inversesqrt(_3354);
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3361 = dot(vec3(_1094, _1097, _1100), vec3(_3358, _3359, _3360));
                        float _3366 = 1.0 - (_3354 * _3311.w);
                        float _4777 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3368 = sqrt(_3354) * _3330.w;
                        float _3371 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3361) + _3372;
                        float _3378 = _3368 * _3368;
                        float _3382 = ((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3367) / ((_3378 * 0.699999988079071044921875) + 1.0);
                        float _3386 = (-0.0) - _2840;
                        float _3387 = (-0.0) - _2841;
                        float _3388 = (-0.0) - _2842;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3403 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _1154;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3393 + _3358;
                        float _3415 = _3394 + _3359;
                        float _3416 = _3395 + _3360;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_1094, _1097, _1100), vec3(_3393, _3394, _3395));
                        float _4793 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3428 = dot(vec3(_1094, _1097, _1100), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4804 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3371 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3361) + _3437;
                        float _4815 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4826 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) / ((_3435 * _3435) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125))) * _3367;
                        _3215 = (_3382 * _3330.x) + _3288;
                        _3216 = (_3382 * _3330.y) + _3289;
                        _3217 = (_3382 * _3330.z) + _3290;
                        _3212 = (_3463 * _3347.x) + _3285;
                        _3213 = (_3463 * _3347.y) + _3286;
                        _3214 = (_3463 * _3347.z) + _3287;
                        if (_3292 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3292;
                        }
                    }
                    frontier_phi_66_pred = _3212;
                    frontier_phi_66_pred_1 = _3217;
                    frontier_phi_66_pred_2 = _3216;
                    frontier_phi_66_pred_3 = _3215;
                    frontier_phi_66_pred_4 = _3214;
                    frontier_phi_66_pred_5 = _3213;
                }
                _2988 = frontier_phi_66_pred;
                _2998 = frontier_phi_66_pred_1;
                _2996 = frontier_phi_66_pred_2;
                _2994 = frontier_phi_66_pred_3;
                _2992 = frontier_phi_66_pred_4;
                _2990 = frontier_phi_66_pred_5;
                uint _3147 = _3146 + 1u;
                if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3140 = _2988;
                    _3141 = _2990;
                    _3142 = _2992;
                    _3143 = _2994;
                    _3144 = _2996;
                    _3145 = _2998;
                    _3146 = _3147;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
        }
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.z;
        uint _3004 = (_3002 >> 8u) & 15u;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((4294967295u << _3004) & _2886) == 0u)
        {
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
            _3118 = _2997;
        }
        else
        {
            float _3133 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
            float _3134 = _3133 * _2840;
            float _3135 = _3133 * _2841;
            float _3136 = _3133 * _2842;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3004 < ((_3002 >> 12u) & 15u))
            {
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3268 = _2987;
                float _3269 = _2989;
                float _3270 = _2991;
                float _3271 = _2993;
                float _3272 = _2995;
                float _3273 = _2997;
                uint _3274 = _3004;
                uint _3283;
                bool _3284;
                for (;;)
                {
                    _3283 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                    _3284 = _3283 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3284)
                    {
                        frontier_phi_77_pred = _3273;
                        frontier_phi_77_pred_1 = _3272;
                        frontier_phi_77_pred_2 = _3271;
                        frontier_phi_77_pred_3 = _3270;
                        frontier_phi_77_pred_4 = _3269;
                        frontier_phi_77_pred_5 = _3268;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        float _3493 = _3271;
                        float _3494 = _3272;
                        float _3495 = _3273;
                        uint _3496 = _3283;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3565;
                        vec4 _3580;
                        float _3626;
                        bool _3627;
                        for (;;)
                        {
                            uint _3507 = ((_3274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3552 = (_3507 * 40u) + 16u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3507 * 40u) + 20u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3507 * 40u) + 24u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3601 = (_3507 * 40u) + 28u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3626 = fma(_2842, _3614.z, fma(_2841, _3614.y, _3614.x * _2840)) + _3614.w;
                            _3627 = !((fma(_2842, _3595.z, fma(_2841, _3595.y, _3595.x * _2840)) + _3595.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3627)
                            {
                                float _3654 = _3522.x - _2840;
                                float _3655 = _3522.y - _2841;
                                float _3656 = _3522.z - _2842;
                                float _3657 = dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656));
                                float _3660 = inversesqrt(_3657);
                                float _3661 = _3660 * _3654;
                                float _3662 = _3660 * _3655;
                                float _3663 = _3660 * _3656;
                                float _3667 = 1.0 - (_3657 / (_3523 * _3523));
                                float _4837 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3672 = sqrt(_3657) * _3538.w;
                                float _3674 = 1.39999997615814208984375 / (_3672 + 1.39999997615814208984375);
                                float _3675 = _3674 * _3674;
                                float _3678 = ((1.0 - _3675) * dot(vec3(_3661, _3662, _3663), vec3(_1094, _1097, _1100))) + _3675;
                                float _3681 = _3672 * _3672;
                                float _3685 = (fma(_2842, _3565.z, fma(_2841, _3565.y, _3565.x * _2840)) + _3565.w) / _3626;
                                float _3686 = (fma(_2842, _3580.z, fma(_2841, _3580.y, _3580.x * _2840)) + _3580.w) / _3626;
                                float _3690 = 1.0 - dot(vec2(_3685, _3686), vec2(_3685, _3686));
                                float _4853 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3692 = _3691 * (((isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0))) * _3668) / ((_3681 * 0.699999988079071044921875) + 1.0));
                                float _3704 = exp2(log2(1.0 / ((_3681 * 3.5) + 5.0)) * 0.25);
                                float _3705 = 1.0 - _1154;
                                float _3712 = sqrt(1.0 - ((1.0 - (_3705 * _3705)) * (1.0 - (_3704 * _3704))));
                                float _3713 = _3712 * _3712;
                                float _3714 = _3713 * _3713;
                                float _3715 = _3661 - _3134;
                                float _3716 = _3662 - _3135;
                                float _3717 = _3663 - _3136;
                                float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                                float _3725 = dot(vec3(_1094, _1097, _1100), vec3((-0.0) - _3134, (-0.0) - _3135, (-0.0) - _3136));
                                float _4864 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3729 = dot(vec3(_1094, _1097, _1100), vec3(_3721 * _3715, _3721 * _3716, _3721 * _3717));
                                float _4875 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3736 = ((_3732 * _3732) * (_3714 + (-1.0))) + 1.0;
                                float _3737 = _3674 * _3713;
                                float _3738 = _3737 * _3737;
                                float _3744 = ((1.0 - _3738) * dot(vec3(_1094, _1097, _1100), vec3(_3661, _3662, _3663))) + _3738;
                                float _4886 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3746 = 1.0 - _3713;
                                float _3756 = (0.5 / (((_3745 * ((_3728 * _3746) + _3713)) + 9.9999999392252902907785028219223e-09) + (((_3745 * _3746) + _3713) * _3728))) * _3745;
                                float _4897 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3766 = (_3691 * _3668) * (((_3714 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3736 * _3736) * ((_3681 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3692 * _3538.y;
                                frontier_phi_83_pred_1 = _3692 * _3538.x;
                                frontier_phi_83_pred_2 = _3766 * _3550.z;
                                frontier_phi_83_pred_3 = _3766 * _3550.y;
                                frontier_phi_83_pred_4 = _3766 * _3550.x;
                                frontier_phi_83_pred_5 = _3692 * _3538.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3774 = frontier_phi_83_pred;
                            _3773 = frontier_phi_83_pred_1;
                            _3772 = frontier_phi_83_pred_2;
                            _3771 = frontier_phi_83_pred_3;
                            _3770 = frontier_phi_83_pred_4;
                            _3775 = frontier_phi_83_pred_5;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3482;
                        frontier_phi_77_pred_1 = _3481;
                        frontier_phi_77_pred_2 = _3480;
                        frontier_phi_77_pred_3 = _3479;
                        frontier_phi_77_pred_4 = _3478;
                        frontier_phi_77_pred_5 = _3477;
                    }
                    _3119 = frontier_phi_77_pred;
                    _3117 = frontier_phi_77_pred_1;
                    _3115 = frontier_phi_77_pred_2;
                    _3113 = frontier_phi_77_pred_3;
                    _3111 = frontier_phi_77_pred_4;
                    _3109 = frontier_phi_77_pred_5;
                    uint _3275 = _3274 + 1u;
                    if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3268 = _3109;
                        _3269 = _3111;
                        _3270 = _3113;
                        _3271 = _3115;
                        _3272 = _3117;
                        _3273 = _3119;
                        _3274 = _3275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3113;
                frontier_phi_58_59_ladder_1 = _3119;
                frontier_phi_58_59_ladder_2 = _3117;
                frontier_phi_58_59_ladder_3 = _3115;
                frontier_phi_58_59_ladder_4 = _3111;
                frontier_phi_58_59_ladder_5 = _3109;
            }
            else
            {
                frontier_phi_58_59_ladder = _2991;
                frontier_phi_58_59_ladder_1 = _2997;
                frontier_phi_58_59_ladder_2 = _2995;
                frontier_phi_58_59_ladder_3 = _2993;
                frontier_phi_58_59_ladder_4 = _2989;
                frontier_phi_58_59_ladder_5 = _2987;
            }
            _3108 = frontier_phi_58_59_ladder_5;
            _3110 = frontier_phi_58_59_ladder_4;
            _3112 = frontier_phi_58_59_ladder;
            _3114 = frontier_phi_58_59_ladder_3;
            _3116 = frontier_phi_58_59_ladder_2;
            _3118 = frontier_phi_58_59_ladder_1;
        }
        float _3123 = isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0));
        _2899 = (_3123 * _3114) + _2351;
        _2901 = (_3123 * _3116) + _2353;
        _2903 = (_3123 * _3118) + _2355;
        _2905 = ((_3108 * 0.039999999105930328369140625) * _3123) + _2684;
        _2907 = ((_3110 * 0.039999999105930328369140625) * _3123) + _2686;
        _2909 = ((_3112 * 0.039999999105930328369140625) * _3123) + _2688;
    }
    else
    {
        _2899 = _2351;
        _2901 = _2353;
        _2903 = _2355;
        _2905 = _2684;
        _2907 = _2686;
        _2909 = _2688;
    }
    float _4913 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _4924 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4935 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _2926 = ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2899 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1138))) + ((_2905 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2927 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2901 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1138))) + ((_2907 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2928 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2903 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1138))) + ((_2909 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    uint _2929 = _267 + 6u;
    float _2937 = _1075 / cbSceneParam._m0[86u].x;
    float _2938 = _1076 / cbSceneParam._m0[86u].y;
    vec4 _2952 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, (log2((isnan(cbSceneParam._m0[77u].w) ? _998 : (isnan(_998) ? cbSceneParam._m0[77u].w : min(_998, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2954 = _2952.x;
    float _2955 = _2952.y;
    float _2956 = _2952.z;
    float _2957 = _2952.w;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_998 > cbSceneParam._m0[78u].w)
    {
        float _3012 = isnan(_998) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _998 : min(cbSceneParam._m0[80u].w, _998));
        float _3013 = _3012 / _998;
        float _3024 = _3013 * _1048;
        float _3025 = _1049 * _3013;
        float _3026 = (-0.0) - _3025;
        float _3028 = _3013 * _1050;
        float _3030 = (cbSceneParam._m0[77u].w * _3026) / _3012;
        float _3031 = _3030 + cbSceneParam._m0[79u].w;
        float _3032 = cbSceneParam._m0[79u].w - _3025;
        float _3038 = sqrt(((_3024 * _3024) + (_3025 * _3025)) + (_3028 * _3028));
        float _3041 = (1.0 - (cbSceneParam._m0[77u].w / _3012)) * _3038;
        float _3046 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3048 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3026 - _3030) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3031 > 0.0) ? exp2(_3046 * _3031) : (2.0 - exp2(_3048 * _3031))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3041;
        }
        else
        {
            float _3169 = 1.0 / cbSceneParam._m0[80u].x;
            float _3170 = isnan(_3032) ? _3031 : (isnan(_3031) ? _3032 : max(_3031, _3032));
            float _3171 = isnan(_3032) ? _3031 : (isnan(_3031) ? _3032 : min(_3031, _3032));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            _3225 = ((abs(_3038 / _3026) * cbSceneParam._m0[80u].y) * ((((_3180 - _3181) * 2.0) - ((exp2(_3046 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)))) - exp2(_3046 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))))) * _3169)) - ((exp2(_3048 * _3180) - exp2(_3048 * _3181)) * _3169))) + (_3041 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_2957);
        _3050 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2954;
        _3052 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _2955;
        _3054 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _2956;
        _3056 = _3236 * _2957;
    }
    else
    {
        _3050 = _2954;
        _3052 = _2955;
        _3054 = _2956;
        _3056 = _2957;
    }
    bool _3263;
    vec4 _3066;
    vec4 _3088;
    float _3090;
    float _3094;
    float _3095;
    float _3096;
    float _3097;
    bool _3107;
    for (;;)
    {
        _3066 = cbMatDynParam._m0[0u];
        float _3068 = roundEven(_3066.y);
        bool _3069 = _3068 == 3.0;
        float _3070 = log2(_3056);
        float _3077 = exp2(_3070 * cbSceneParam._m0[78u].x) * _2926;
        float _3078 = exp2(_3070 * cbSceneParam._m0[78u].y) * _2927;
        float _3079 = exp2(_3070 * cbSceneParam._m0[78u].z) * _2928;
        float _3086 = _1064 + (-0.5);
        _3088 = cbMtdParam._m0[1u];
        _3090 = _3088.y * _3086;
        float _3093 = (_3068 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3094 = _3093 * (_3069 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3050)));
        _3095 = _3093 * (_3069 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3052)));
        _3096 = _3093 * (_3069 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3054)));
        _3097 = _3086 * 0.999000012874603271484375;
        _3107 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3107)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3097) < 0.5)
            {
                _3263 = true;
                break;
            }
        }
        uint _3204 = _1113 + uint(_3066.w);
        if ((cbInstanceData._m0[_3204].w < 1.0) && ((cbInstanceData._m0[_3204].w + _3097) < 0.5))
        {
            _3263 = true;
            break;
        }
        if ((_3090 + 1.0) < _3088.x)
        {
            _3263 = true;
            break;
        }
        _3263 = false;
        break;
    }
    float _3468;
    if (_3263)
    {
        discard_state = true;
        _3468 = 0.0;
    }
    else
    {
        _3468 = cbInstanceData._m0[_2929].w;
    }
    SV_Target.x = _3094;
    SV_Target.y = _3095;
    SV_Target.z = _3096;
    SV_Target.w = _3468;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2929].w;
    discard_exit();
}


