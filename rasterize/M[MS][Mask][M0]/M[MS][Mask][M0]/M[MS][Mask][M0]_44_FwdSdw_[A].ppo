#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1326;
float _3967;
float _3968;
float _3969;
float _3970;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3979 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3990 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4001 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4012 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _473 = (_328.x * cbMtdParam._m0[9u].x) * ((_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359);
    float _474 = (_328.y * cbMtdParam._m0[9u].y) * ((_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360);
    float _475 = (_328.z * cbMtdParam._m0[9u].z) * ((_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361);
    float _479 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _473;
    float _482 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _474;
    float _485 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _475;
    float _493 = (((_473 - _479) * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) + _479) * 4.55000019073486328125;
    float _495 = (((_474 - _482) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) + _482) * 4.55000019073486328125;
    float _497 = (((_475 - _485) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _485) * 4.55000019073486328125;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _593 = ((_563.z - _584) * _463) + _584;
    float _596 = ((((_563.x - _582) * _463) + _582) * 2.0) + (-1.0);
    float _597 = ((((_563.y - _583) * _463) + _583) * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _4023 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _635 = (_596 + ((((_536.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_623.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _636 = (_597 + ((((_536.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_623.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _639 = fma(_603, _239, fma(_636, _246, _635 * _232));
    float _642 = fma(_603, _240, fma(_636, _247, _635 * _233));
    float _645 = fma(_603, _241, fma(_636, _248, _635 * _234));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _685 = (cbMtdParam._m0[19u].x + dot(vec4(_649 * _639, _649 * _642, _649 * _645, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) * cbMtdParam._m0[21u].z);
    float _4034 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _693 = (_686 * ((_516.x * cbMtdParam._m0[18u].x) - _493)) + _493;
    float _694 = (_686 * ((_516.y * cbMtdParam._m0[18u].y) - _495)) + _495;
    float _695 = (_686 * ((_516.z * cbMtdParam._m0[18u].z) - _497)) + _497;
    float _700 = (((_536.z - _593) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _593;
    float _704 = ((_623.z - _700) * cbMtdParam._m0[19u].w) + _700;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _4045 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = ((_717.z - _704) * _686) + _704;
    float _744 = ((sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) - _603) * _686) + _603;
    float _747 = (((_724 - _635) * _686) + _635) + (cbMtdParam._m0[21u].x * _635);
    float _748 = (((_725 - _636) * _686) + _636) + (cbMtdParam._m0[21u].x * _636);
    float _750 = cbMtdParam._m0[22u].x + _623.w;
    float _753 = fma(_744, _239, fma(_748, _246, _747 * _232));
    float _756 = fma(_744, _240, fma(_748, _247, _747 * _233));
    float _759 = fma(_744, _241, fma(_748, _248, _747 * _234));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _4056 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _767 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4078 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4089 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4100 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _4111 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _4122 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) - _1013)) + _1013) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _885 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _888 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _901 = _272 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_902].z;
    float _4133 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _926 = ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * TEXCOORD_5.w) * _922.x;
    float _927 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _764) - _843;
    float _935 = (_930 * _765) - _844;
    float _936 = (_930 * _766) - _845;
    float _940 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _4166 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_767);
    float _955 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1054 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1058 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1083 = _987 + _764;
        float _1084 = _991 + _765;
        float _1085 = _995 + _766;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_764, _765, _766), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4214 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_764, _765, _766), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4247 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_764, _765, _766), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4280 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1372 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1376 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1399 = _987 + _764;
        float _1400 = _991 + _765;
        float _1401 = _995 + _766;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_764, _765, _766), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4343 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_764, _765, _766), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4376 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_764, _765, _766), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4409 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = _1326;
        _1648 = _1326;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1340)) + _1340;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _934 * 0.5;
    float _1706 = _935 * 0.5;
    float _1707 = _936 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1835 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1838 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1866 = frontier_phi_17_15_ladder;
        }
        float _2035;
        if (_1835 > 0.0)
        {
            _2035 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2035 = frontier_phi_26_22_ladder;
        }
        float _2330;
        if (_1838 > 0.0)
        {
            _2330 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2330 = frontier_phi_38_33_ladder;
        }
        float _2332 = isnan(_2035) ? _1866 : (isnan(_1866) ? _2035 : min(_1866, _2035));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1832) + _1821;
        float _2338 = (_2333 * _1835) + _1825;
        float _2339 = (_2333 * _1838) + _1829;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_16_38_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_16_38_ladder_2;
        _1856 = frontier_phi_16_38_ladder_1;
        _1858 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1774);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1916 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1920 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1924 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1927 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1930 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1933 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2040;
        if (_1927 > 0.0)
        {
            _2040 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2357;
        if (_1930 > 0.0)
        {
            _2357 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2357 = frontier_phi_40_35_ladder;
        }
        float _2684;
        if (_1933 > 0.0)
        {
            _2684 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2684 = frontier_phi_50_47_ladder;
        }
        float _2686 = isnan(_2357) ? _2040 : (isnan(_2040) ? _2357 : min(_2040, _2357));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _1927) + _1916;
        float _2692 = (_2687 * _1930) + _1920;
        float _2693 = (_2687 * _1933) + _1924;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_25_50_ladder = _2811.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2811.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2811.x * cbModelParam._m0[1u].z;
        }
        _1952 = frontier_phi_25_50_ladder_2;
        _1954 = frontier_phi_25_50_ladder_1;
        _1956 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1863);
        _1952 = _1936.x * cbModelParam._m0[1u].z;
        _1954 = _1936.y * cbModelParam._m0[1u].z;
        _1956 = _1936.z * cbModelParam._m0[1u].z;
    }
    float _1968 = ((((1.0 - _955) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_955 * _942)) * _926;
    float _1969 = _1968 * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1970 = _1968 * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1971 = _1968 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1969 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1969 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1969 * cbSceneParam._m0[91u].x));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2027 = _2014 / _2026;
    float _2028 = _2018 / _2026;
    float _2029 = _2022 / _2026;
    float _2176;
    float _2177;
    float _2178;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2056 = ((uint(_2029 > cbSceneParam._m0[59u].y) + uint(_2029 > cbSceneParam._m0[59u].x)) + uint(_2029 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2057 = _2056 + 43u;
        uint _2065 = _2056 + 44u;
        uint _2073 = _2056 + 45u;
        uint _2081 = _2056 + 46u;
        float _2092 = fma(_2026, cbSceneParam._m0[_2057].w, fma(_2022, cbSceneParam._m0[_2057].z, fma(_2018, cbSceneParam._m0[_2057].y, _2014 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2026, cbSceneParam._m0[_2065].w, fma(_2022, cbSceneParam._m0[_2065].z, fma(_2018, cbSceneParam._m0[_2065].y, _2014 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2026, cbSceneParam._m0[_2081].w, fma(_2022, cbSceneParam._m0[_2081].z, fma(_2018, cbSceneParam._m0[_2081].y, _2014 * cbSceneParam._m0[_2081].x)));
        float _2109 = cbSceneParam._m0[33u].z * _2104;
        float _2111 = cbSceneParam._m0[33u].w * _2104;
        float _2114 = fma(_2026, cbSceneParam._m0[_2073].w, fma(_2022, cbSceneParam._m0[_2073].z, fma(_2018, cbSceneParam._m0[_2073].y, _2014 * cbSceneParam._m0[_2073].x))) / _2104;
        float _2162 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
        float _4535 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2169 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2092) / _2104, (_2111 + _2096) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 + _2092) / _2104, (_2096 - _2109) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2109) / _2104, (_2096 - _2111) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2111) / _2104, (_2109 + _2096) / _2104), _2114), 0.0)).x), vec4(0.25)));
        _2176 = 1.0 - (_2169 * cbSceneParam._m0[34u].x);
        _2177 = 1.0 - (_2169 * cbSceneParam._m0[34u].y);
        _2178 = 1.0 - (_2169 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2176 = 1.0;
        _2177 = 1.0;
        _2178 = 1.0;
    }
    float _2242;
    float _2244;
    float _2246;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2230 = fma(_2026, cbSceneParam._m0[63u].w, fma(_2022, cbSceneParam._m0[63u].z, fma(_2018, cbSceneParam._m0[63u].y, _2014 * cbSceneParam._m0[63u].x)));
        float _2231 = fma(_2026, cbSceneParam._m0[60u].w, fma(_2022, cbSceneParam._m0[60u].z, fma(_2018, cbSceneParam._m0[60u].y, _2014 * cbSceneParam._m0[60u].x))) / _2230;
        float _2232 = fma(_2026, cbSceneParam._m0[61u].w, fma(_2022, cbSceneParam._m0[61u].z, fma(_2018, cbSceneParam._m0[61u].y, _2014 * cbSceneParam._m0[61u].x))) / _2230;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2231 >= cbSceneParam._m0[64u].x) && (_2232 >= cbSceneParam._m0[64u].y)) && (_2231 <= cbSceneParam._m0[64u].z)) && (_2232 <= cbSceneParam._m0[64u].w))
        {
            float _2370 = fma(_2026, cbSceneParam._m0[62u].w, fma(_2022, cbSceneParam._m0[62u].z, fma(_2018, cbSceneParam._m0[62u].y, _2014 * cbSceneParam._m0[62u].x))) / _2230;
            float _2374 = isnan(cbSceneParam._m0[41u].w) ? _2370 : (isnan(_2370) ? cbSceneParam._m0[41u].w : max(_2370, cbSceneParam._m0[41u].w));
            float _2417 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
            float _4551 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
            float _2424 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2231, cbSceneParam._m0[33u].w + _2232), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2231, _2232 - cbSceneParam._m0[33u].z), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].z, _2232 - cbSceneParam._m0[33u].w), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2232), _2374), 0.0)).x), vec4(0.25)));
            float _2428 = 1.0 - (_2424 * cbSceneParam._m0[34u].x);
            float _2429 = 1.0 - (_2424 * cbSceneParam._m0[34u].y);
            float _2430 = 1.0 - (_2424 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_37_36_ladder_1 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
            frontier_phi_37_36_ladder_2 = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
        }
        else
        {
            frontier_phi_37_36_ladder = _2178;
            frontier_phi_37_36_ladder_1 = _2177;
            frontier_phi_37_36_ladder_2 = _2176;
        }
        _2242 = frontier_phi_37_36_ladder_2;
        _2244 = frontier_phi_37_36_ladder_1;
        _2246 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2242 = _2176;
        _2244 = _2177;
        _2246 = _2178;
    }
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _926 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2289 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2293 = _2253 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_764, _765, _766));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_764, _765, _766));
    float _4587 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4598 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2242) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2244) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2246) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2329)
    {
        _2431 = _2321;
        _2433 = _2322;
        _2435 = _2323;
    }
    else
    {
        uint _2439 = _2253 + 6u;
        float _2455 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4609 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2458 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2431 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2321;
        _2433 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2322;
        _2435 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2323;
    }
    bool _2438 = _2327.y == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2438)
    {
        _2493 = _2431;
        _2495 = _2433;
        _2497 = _2435;
    }
    else
    {
        uint _2655 = _2253 + 7u;
        float _2671 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2672 = _2671 * _2671;
        float _4625 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2673 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2674 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2493 = (((cbLight._m0[_2655].x * 0.3183098733425140380859375) * _2673) * _2674) + _2431;
        _2495 = (((cbLight._m0[_2655].y * 0.3183098733425140380859375) * _2673) * _2674) + _2433;
        _2497 = (((cbLight._m0[_2655].z * 0.3183098733425140380859375) * _2673) * _2674) + _2435;
    }
    uint _2500 = _2253 + 8u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _767) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2253].x + _843;
    float _2516 = cbLight._m0[_2253].y + _844;
    float _2517 = cbLight._m0[_2253].z + _845;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2253].xyz));
    float _4641 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _4652 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2529 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2530 = dot(vec3(_764, _765, _766), vec3(_2522, _2523, _2524));
    float _4663 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2522, _2523, _2524));
    float _4674 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2514 * _2514;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2554 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2529 * ((_2528 * _2554) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2554) + _2514) * _2528))) * _2528;
    float _4685 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    uint _2581 = _2253 + 9u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _767) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2293].x + _843;
    float _2595 = cbLight._m0[_2293].y + _844;
    float _2596 = cbLight._m0[_2293].z + _845;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2293].xyz));
    float _4696 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2608 = dot(vec3(_764, _765, _766), vec3(_2601, _2602, _2603));
    float _4707 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2601, _2602, _2603));
    float _4718 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2593 * _2593;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2630 = 1.0 - _2593;
    float _2640 = (0.5 / (((_2529 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2630) + _2593) * _2607))) * _2607;
    float _4729 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2642 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    float _2652 = (((_2629 * cbLight._m0[_2581].x) * _2642) * _2276) + ((((cbLight._m0[_2500].x * _2242) * _2553) * _2567) * _2289);
    float _2653 = (((_2629 * cbLight._m0[_2581].y) * _2642) * _2276) + ((((cbLight._m0[_2500].y * _2244) * _2553) * _2567) * _2289);
    float _2654 = (((_2629 * cbLight._m0[_2581].z) * _2642) * _2276) + ((((cbLight._m0[_2500].z * _2246) * _2553) * _2567) * _2289);
    float _2710;
    float _2712;
    float _2714;
    if (_2329)
    {
        _2710 = _2652;
        _2712 = _2653;
        _2714 = _2654;
    }
    else
    {
        uint _2716 = _2253 + 2u;
        uint _2720 = _2253 + 10u;
        float _2734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2716].w)) * _767) * 0.949999988079071044921875);
        float _2735 = _2734 * _2734;
        float _2736 = cbLight._m0[_2716].x + _843;
        float _2737 = cbLight._m0[_2716].y + _844;
        float _2738 = cbLight._m0[_2716].z + _845;
        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
        float _2743 = _2742 * _2736;
        float _2744 = _2742 * _2737;
        float _2745 = _2742 * _2738;
        float _2746 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2716].xyz));
        float _4740 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2750 = dot(vec3(_764, _765, _766), vec3(_2743, _2744, _2745));
        float _4751 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2754 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_2743, _2744, _2745));
        float _4762 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2758 = _2735 * _2735;
        float _2762 = ((_2753 * _2753) * (_2758 + (-1.0))) + 1.0;
        float _2771 = (exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2772 = 1.0 - _2735;
        float _2782 = (0.5 / (((_2529 * ((_2749 * _2772) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2772) + _2735) * _2749))) * _2749;
        float _4773 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2758 / ((_2762 * _2762) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2710 = (((_2771 * cbLight._m0[_2720].x) * _2784) * _2785) + _2652;
        _2712 = (((_2771 * cbLight._m0[_2720].y) * _2784) * _2785) + _2653;
        _2714 = (((_2771 * cbLight._m0[_2720].z) * _2784) * _2785) + _2654;
    }
    float _2816;
    float _2818;
    float _2820;
    if (_2438)
    {
        _2816 = _2710;
        _2818 = _2712;
        _2820 = _2714;
    }
    else
    {
        uint _2827 = _2253 + 3u;
        uint _2831 = _2253 + 11u;
        float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2827].w)) * _767) * 0.949999988079071044921875);
        float _2846 = _2845 * _2845;
        float _2847 = cbLight._m0[_2827].x + _843;
        float _2848 = cbLight._m0[_2827].y + _844;
        float _2849 = cbLight._m0[_2827].z + _845;
        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
        float _2854 = _2853 * _2847;
        float _2855 = _2853 * _2848;
        float _2856 = _2853 * _2849;
        float _2857 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2827].xyz));
        float _4789 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2861 = dot(vec3(_764, _765, _766), vec3(_2854, _2855, _2856));
        float _4800 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2865 = dot(vec3(cbLight._m0[_2827].xyz), vec3(_2854, _2855, _2856));
        float _4811 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2869 = _2846 * _2846;
        float _2873 = ((_2864 * _2864) * (_2869 + (-1.0))) + 1.0;
        float _2882 = (exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2883 = 1.0 - _2846;
        float _2893 = (0.5 / (((_2529 * ((_2860 * _2883) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2883) + _2846) * _2860))) * _2860;
        float _4822 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2895 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2869 / ((_2873 * _2873) * 3.141590118408203125));
        float _2896 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2816 = (((_2882 * cbLight._m0[_2831].x) * _2895) * _2896) + _2710;
        _2818 = (((_2882 * cbLight._m0[_2831].y) * _2895) * _2896) + _2712;
        _2820 = (((_2882 * cbLight._m0[_2831].z) * _2895) * _2896) + _2714;
    }
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_2251.y == 0u)
    {
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.x;
        uint _2929 = uint((float(_2917.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2918))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2918)));
        float _2939 = (log2(_2029 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2940 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        uint _2943 = uint(isnan(14.0) ? _2940 : (isnan(_2940) ? 14.0 : min(_2940, 14.0)));
        uvec4 _2948 = texelFetch(g_lightClusterGridBuffer, int(((_2943 << 2u) + (_2929 << 6u)) >> 2u));
        uint _2949 = _2948.x;
        uint _2950 = _2917.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2950 >> 4u) & 15u)) + 4294967295u) & _2949) == 0u) || ((_2950 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            uint _3188 = 0u;
            uint _3197;
            bool _3198;
            for (;;)
            {
                _3197 = texelFetch(g_lightClassification, int((((_2943 << 5u) + (_2929 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                _3198 = _3197 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3198)
                {
                    frontier_phi_71_pred = _3187;
                    frontier_phi_71_pred_1 = _3186;
                    frontier_phi_71_pred_2 = _3185;
                    frontier_phi_71_pred_3 = _3184;
                    frontier_phi_71_pred_4 = _3183;
                    frontier_phi_71_pred_5 = _3182;
                }
                else
                {
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    uint _3333;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3197;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    for (;;)
                    {
                        uint _3337 = uint(findLSB(_3333)) + (_3188 << 5u);
                        uint _3334 = (_3333 + 4294967295u) & _3333;
                        uint _3339 = _3337 * 48u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3359 = (_3337 * 48u) + 4u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3378 = (_3337 * 48u) + 8u;
                        vec3 _3389 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x));
                        float _3393 = _3353.x - _2027;
                        float _3394 = _3353.y - _2028;
                        float _3395 = _3353.z - _2029;
                        float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                        float _3399 = inversesqrt(_3396);
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3403 = dot(vec3(_882, _885, _888), vec3(_3400, _3401, _3402));
                        float _3408 = 1.0 - (_3396 * _3353.w);
                        float _4848 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3410 = sqrt(_3396) * _3372.w;
                        float _3413 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3403) + _3414;
                        float _3420 = _3410 * _3410;
                        float _3424 = ((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3409) / ((_3420 * 0.699999988079071044921875) + 1.0);
                        float _3428 = (-0.0) - _2027;
                        float _3429 = (-0.0) - _2028;
                        float _3430 = (-0.0) - _2029;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3444 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _942;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_882, _885, _888), vec3(_3435, _3436, _3437));
                        float _4864 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3469 = dot(vec3(_882, _885, _888), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4875 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3413 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3403) + _3478;
                        float _4886 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4897 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3476 * _3476) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125))) * _3409;
                        _3257 = (_3424 * _3372.x) + _3330;
                        _3258 = (_3424 * _3372.y) + _3331;
                        _3259 = (_3424 * _3372.z) + _3332;
                        _3254 = (_3504 * _3389.x) + _3327;
                        _3255 = (_3504 * _3389.y) + _3328;
                        _3256 = (_3504 * _3389.z) + _3329;
                        if (_3334 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3334;
                        }
                    }
                    frontier_phi_71_pred = _3259;
                    frontier_phi_71_pred_1 = _3258;
                    frontier_phi_71_pred_2 = _3257;
                    frontier_phi_71_pred_3 = _3256;
                    frontier_phi_71_pred_4 = _3255;
                    frontier_phi_71_pred_5 = _3254;
                }
                _3040 = frontier_phi_71_pred;
                _3038 = frontier_phi_71_pred_1;
                _3036 = frontier_phi_71_pred_2;
                _3034 = frontier_phi_71_pred_3;
                _3032 = frontier_phi_71_pred_4;
                _3030 = frontier_phi_71_pred_5;
                uint _3189 = _3188 + 1u;
                if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3182 = _3030;
                    _3183 = _3032;
                    _3184 = _3034;
                    _3185 = _3036;
                    _3186 = _3038;
                    _3187 = _3040;
                    _3188 = _3189;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((4294967295u << _3046) & _2949) == 0u)
        {
            _3150 = _3029;
            _3152 = _3031;
            _3154 = _3033;
            _3156 = _3035;
            _3158 = _3037;
            _3160 = _3039;
        }
        else
        {
            float _3175 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
            float _3176 = _3175 * _2027;
            float _3177 = _3175 * _2028;
            float _3178 = _3175 * _2029;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3310 = _3029;
                float _3311 = _3031;
                float _3312 = _3033;
                float _3313 = _3035;
                float _3314 = _3037;
                float _3315 = _3039;
                uint _3316 = _3046;
                uint _3325;
                bool _3326;
                for (;;)
                {
                    _3325 = texelFetch(g_lightClassification, int((((_2943 << 5u) + (_2929 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                    _3326 = _3325 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3326)
                    {
                        frontier_phi_82_pred = _3315;
                        frontier_phi_82_pred_1 = _3314;
                        frontier_phi_82_pred_2 = _3313;
                        frontier_phi_82_pred_3 = _3312;
                        frontier_phi_82_pred_4 = _3311;
                        frontier_phi_82_pred_5 = _3310;
                    }
                    else
                    {
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        uint _3537 = _3325;
                        uint _3538;
                        vec4 _3563;
                        float _3564;
                        vec4 _3579;
                        vec3 _3591;
                        vec4 _3606;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3548 = ((_3316 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3537));
                            _3538 = (_3537 + 4294967295u) & _3537;
                            uint _3550 = _3548 * 40u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3564 = _3563.w;
                            uint _3566 = (_3548 * 40u) + 4u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3548 * 40u) + 8u;
                            _3591 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x));
                            uint _3593 = (_3548 * 40u) + 16u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3548 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3548 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3548 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2029, _3655.z, fma(_2028, _3655.y, _3655.x * _2027)) + _3655.w;
                            _3668 = !((fma(_2029, _3636.z, fma(_2028, _3636.y, _3636.x * _2027)) + _3636.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3563.x - _2027;
                                float _3696 = _3563.y - _2028;
                                float _3697 = _3563.z - _2029;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3564 * _3564));
                                float _4908 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3713 = sqrt(_3698) * _3579.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_882, _885, _888))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2029, _3606.z, fma(_2028, _3606.y, _3606.x * _2027)) + _3606.w) / _3667;
                                float _3727 = (fma(_2029, _3621.z, fma(_2028, _3621.y, _3621.x * _2027)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4924 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _942;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3176;
                                float _3757 = _3703 - _3177;
                                float _3758 = _3704 - _3178;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_882, _885, _888), vec3((-0.0) - _3176, (-0.0) - _3177, (-0.0) - _3178));
                                float _4935 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3770 = dot(vec3(_882, _885, _888), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4946 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_882, _885, _888), vec3(_3702, _3703, _3704))) + _3779;
                                float _4957 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4968 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3733 * _3579.z;
                                frontier_phi_88_pred_1 = _3733 * _3579.y;
                                frontier_phi_88_pred_2 = _3733 * _3579.x;
                                frontier_phi_88_pred_3 = _3807 * _3591.z;
                                frontier_phi_88_pred_4 = _3807 * _3591.y;
                                frontier_phi_88_pred_5 = _3807 * _3591.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3816 = frontier_phi_88_pred;
                            _3815 = frontier_phi_88_pred_1;
                            _3814 = frontier_phi_88_pred_2;
                            _3813 = frontier_phi_88_pred_3;
                            _3812 = frontier_phi_88_pred_4;
                            _3811 = frontier_phi_88_pred_5;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            if (_3538 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3538;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3523;
                        frontier_phi_82_pred_1 = _3522;
                        frontier_phi_82_pred_2 = _3521;
                        frontier_phi_82_pred_3 = _3520;
                        frontier_phi_82_pred_4 = _3519;
                        frontier_phi_82_pred_5 = _3518;
                    }
                    _3161 = frontier_phi_82_pred;
                    _3159 = frontier_phi_82_pred_1;
                    _3157 = frontier_phi_82_pred_2;
                    _3155 = frontier_phi_82_pred_3;
                    _3153 = frontier_phi_82_pred_4;
                    _3151 = frontier_phi_82_pred_5;
                    uint _3317 = _3316 + 1u;
                    if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3310 = _3151;
                        _3311 = _3153;
                        _3312 = _3155;
                        _3313 = _3157;
                        _3314 = _3159;
                        _3315 = _3161;
                        _3316 = _3317;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3157;
                frontier_phi_63_64_ladder_1 = _3161;
                frontier_phi_63_64_ladder_2 = _3159;
                frontier_phi_63_64_ladder_3 = _3155;
                frontier_phi_63_64_ladder_4 = _3153;
                frontier_phi_63_64_ladder_5 = _3151;
            }
            else
            {
                frontier_phi_63_64_ladder = _3035;
                frontier_phi_63_64_ladder_1 = _3039;
                frontier_phi_63_64_ladder_2 = _3037;
                frontier_phi_63_64_ladder_3 = _3033;
                frontier_phi_63_64_ladder_4 = _3031;
                frontier_phi_63_64_ladder_5 = _3029;
            }
            _3150 = frontier_phi_63_64_ladder_5;
            _3152 = frontier_phi_63_64_ladder_4;
            _3154 = frontier_phi_63_64_ladder_3;
            _3156 = frontier_phi_63_64_ladder;
            _3158 = frontier_phi_63_64_ladder_2;
            _3160 = frontier_phi_63_64_ladder_1;
        }
        float _3165 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2962 = (_3165 * _3156) + _2493;
        _2964 = (_3165 * _3158) + _2495;
        _2966 = (_3165 * _3160) + _2497;
        _2968 = ((_3150 * 0.039999999105930328369140625) * _3165) + _2816;
        _2970 = ((_3152 * 0.039999999105930328369140625) * _3165) + _2818;
        _2972 = ((_3154 * 0.039999999105930328369140625) * _3165) + _2820;
    }
    else
    {
        _2962 = _2493;
        _2964 = _2495;
        _2966 = _2497;
        _2968 = _2816;
        _2970 = _2818;
        _2972 = _2820;
    }
    float _4984 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4995 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _5006 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2989 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2962 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _926))) + ((_2968 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2990 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2964 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _926))) + ((_2970 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2991 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2966 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _926))) + ((_2972 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    uint _2992 = _272 + 6u;
    float _3000 = _863 / cbSceneParam._m0[86u].x;
    float _3001 = _864 / cbSceneParam._m0[86u].y;
    vec4 _3015 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3017 = _3015.x;
    float _3018 = _3015.y;
    float _3019 = _3015.z;
    float _3020 = _3015.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3055 = _3054 / _785;
        float _3066 = _3055 * _836;
        float _3067 = _837 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3070 = _3055 * _838;
        float _3072 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3067;
        float _3080 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3267;
        if (abs((_3068 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3267 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3211 = 1.0 / cbSceneParam._m0[80u].x;
            float _3212 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3213 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            _3267 = ((abs(_3080 / _3068) * cbSceneParam._m0[80u].y) * ((((_3222 - _3223) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))))) * _3211)) - ((exp2(_3090 * _3222) - exp2(_3090 * _3223)) * _3211))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, 1.0), 0.0);
        float _3278 = exp2((_3267 * (-1.44269502162933349609375)) * (1.0 - _3269.w));
        float _3279 = log2(_3278);
        float _3295 = log2(_3020);
        _3092 = (exp2(_3295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].x)) * _3269.x) / cbSceneParam._m0[78u].x)) + _3017;
        _3094 = (exp2(_3295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].y)) * _3269.y) / cbSceneParam._m0[78u].y)) + _3018;
        _3096 = (exp2(_3295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].z)) * _3269.z) / cbSceneParam._m0[78u].z)) + _3019;
        _3098 = _3278 * _3020;
    }
    else
    {
        _3092 = _3017;
        _3094 = _3018;
        _3096 = _3019;
        _3098 = _3020;
    }
    bool _3305;
    vec4 _3108;
    vec4 _3130;
    float _3132;
    float _3136;
    float _3137;
    float _3138;
    float _3139;
    bool _3149;
    for (;;)
    {
        _3108 = cbMatDynParam._m0[0u];
        float _3110 = roundEven(_3108.y);
        bool _3111 = _3110 == 3.0;
        float _3112 = log2(_3098);
        float _3119 = exp2(_3112 * cbSceneParam._m0[78u].x) * _2989;
        float _3120 = exp2(_3112 * cbSceneParam._m0[78u].y) * _2990;
        float _3121 = exp2(_3112 * cbSceneParam._m0[78u].z) * _2991;
        float _3128 = _852 + (-0.5);
        _3130 = cbMtdParam._m0[1u];
        _3132 = _3130.y * _3128;
        float _3135 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3136 = _3135 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
        _3137 = _3135 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
        _3138 = _3135 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
        _3139 = _3128 * 0.999000012874603271484375;
        _3149 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3149)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3139) < 0.5)
            {
                _3305 = true;
                break;
            }
        }
        uint _3246 = _901 + uint(_3108.w);
        if ((cbInstanceData._m0[_3246].w < 1.0) && ((cbInstanceData._m0[_3246].w + _3139) < 0.5))
        {
            _3305 = true;
            break;
        }
        if ((_3132 + 1.0) < _3130.x)
        {
            _3305 = true;
            break;
        }
        _3305 = false;
        break;
    }
    float _3509;
    if (_3305)
    {
        discard_state = true;
        _3509 = 0.0;
    }
    else
    {
        _3509 = cbInstanceData._m0[_2992].w;
    }
    SV_Target.x = _3136;
    SV_Target.y = _3137;
    SV_Target.z = _3138;
    SV_Target.w = _3509;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2992].w;
    discard_exit();
}


