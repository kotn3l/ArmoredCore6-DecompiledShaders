#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[24u].z) + _395) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3485 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _420 = (_413 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _421 = (_413 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _422 = (_413 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[24u].z) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3496 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _499 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420);
    float _502 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421);
    float _505 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422);
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _546 = ((_518.x - _537) * _413) + _537;
    float _547 = ((_518.y - _538) * _413) + _538;
    float _548 = ((_518.z - _539) * _413) + _539;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _573 = ((_560.z - _548) * _486) + _548;
    float _576 = ((((_560.x - _546) * _486) + _546) * 2.0) + (-1.0);
    float _578 = ((((_560.y - _547) * _486) + _547) * 2.0) + (-1.0);
    float _579 = dot(vec2(_576, _578), vec2(_576, _578));
    float _3507 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _584 = sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _610 = (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _576;
    float _611 = (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _578;
    float _615 = (cbMtdParam._m0[19u].w * (_598.z - _573)) + _573;
    float _619 = cbMtdParam._m0[22u].x + _598.w;
    float _622 = fma(_584, _221 * NORMAL.x, fma(_611, _228 * TANGENT.x, (_214 * _206) * _610));
    float _625 = fma(_584, _221 * NORMAL.y, fma(_611, _228 * TANGENT.y, (_214 * _207) * _610));
    float _628 = fma(_584, _221 * NORMAL.z, fma(_611, _228 * TANGENT.z, (_214 * _208) * _610));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3518 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _636 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3540 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3551 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3562 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _742 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _745 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _759 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3573 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _783 = ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * TEXCOORD_5.w) * _779.x;
    float _784 = dot(vec3(_633, _634, _635), vec3(_712, _713, _714));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _633) - _712;
    float _792 = (_787 * _634) - _713;
    float _793 = (_787 * _635) - _714;
    float _797 = abs(dot(vec3(_712, _713, _714), vec3(_633, _634, _635)));
    float _3606 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_636);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _882 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _886 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _911 = _844 + _633;
        float _912 = _848 + _634;
        float _913 = _852 + _635;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_633, _634, _635), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3654 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_633, _634, _635), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3687 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_633, _634, _635), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3720 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1192 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1196 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1200 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1223 = _844 + _633;
        float _1224 = _848 + _634;
        float _1225 = _852 + _635;
        float _1235 = fma(_1225, cbModelParam._m0[30u].z, fma(_1224, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223)) - _1192;
        float _1236 = fma(_1225, cbModelParam._m0[31u].z, fma(_1224, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223)) - _1196;
        float _1237 = fma(_1225, cbModelParam._m0[32u].z, fma(_1224, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223)) - _1200;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1192 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1196 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[35u].z) + ((((((_1200 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1291 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1258.x + (-0.5));
        float _1293 = _1291 * (_1258.y + (-0.5));
        float _1294 = _1291 * (_1258.z + (-0.5));
        float _1301 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1265.x + (-0.5));
        float _1303 = _1301 * (_1265.y + (-0.5));
        float _1304 = _1301 * (_1265.z + (-0.5));
        float _1311 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1272.x + (-0.5));
        float _1313 = _1311 * (_1272.y + (-0.5));
        float _1314 = _1311 * (_1272.z + (-0.5));
        float _1321 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1279.x + (-0.5));
        float _1323 = _1321 * (_1279.y + (-0.5));
        float _1324 = _1321 * (_1279.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_633, _634, _635), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3783 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1355 + 1.0))) + _1360) * _1325;
        float _1370 = _1293 * 0.5;
        float _1371 = _1303 * 0.5;
        float _1372 = _1313 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_633, _634, _635), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3816 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1397 + 1.0))) + _1402) * _1326;
        float _1412 = _1294 * 0.5;
        float _1413 = _1304 * 0.5;
        float _1414 = _1314 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_633, _634, _635), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3849 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1439 + 1.0))) + _1444) * _1327;
        _1461 = _1294;
        _1462 = _1293;
        _1463 = _1292;
        _1464 = _1304;
        _1465 = _1303;
        _1466 = _1302;
        _1467 = _1314;
        _1468 = _1313;
        _1469 = _1312;
        _1470 = _1327;
        _1471 = _1326;
        _1472 = _1325;
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1154;
        _1462 = _1154;
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1166)) + _1166;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1167)) + _1167;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1168)) + _1168;
    float _1508 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1486, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1486, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1486, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1485));
    float _1529 = _791 * 0.5;
    float _1530 = _792 * 0.5;
    float _1531 = _793 * 0.5;
    float _1532 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1535 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1538 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1572;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1545 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1549 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1553 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1560 = dot(vec4(cbModelParam._m0[39u]), vec4(_1529, _1530, _1531, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1583;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1574 = dot(vec4(cbModelParam._m0[40u]), vec4(_1529, _1530, _1531, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1587 = (_1583 * cbModelParam._m0[1u].x) + (_1572 * (1.0 - cbModelParam._m0[1u].x));
    float _1597 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1597 : min(cbModelParam._m0[25u].z, _1597));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1661 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1664 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1915;
        if (_1661 > 0.0)
        {
            _1915 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1915 = frontier_phi_23_19_ladder;
        }
        float _2161;
        if (_1664 > 0.0)
        {
            _2161 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2161 = frontier_phi_35_30_ladder;
        }
        float _2163 = isnan(_1915) ? _1692 : (isnan(_1692) ? _1915 : min(_1692, _1915));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1658) + _1647;
        float _2169 = (_2164 * _1661) + _1651;
        float _2170 = (_2164 * _1664) + _1655;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1598);
            frontier_phi_13_35_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1598);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1744 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1748 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1752 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1755 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1758 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1761 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1920;
        if (_1755 > 0.0)
        {
            _1920 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1920 = frontier_phi_25_21_ladder;
        }
        float _2188;
        if (_1758 > 0.0)
        {
            _2188 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2188 = frontier_phi_37_32_ladder;
        }
        float _2393;
        if (_1761 > 0.0)
        {
            _2393 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2393 = frontier_phi_46_43_ladder;
        }
        float _2395 = isnan(_2188) ? _1920 : (isnan(_1920) ? _2188 : min(_1920, _2188));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1755) + _1744;
        float _2401 = (_2396 * _1758) + _1748;
        float _2402 = (_2396 * _1761) + _1752;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2403;
        float _2406 = _2403 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2402 > _2406) || ((_2402 < _2404) || ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 < _2404) || (_2400 > _2406))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2402, cbModelParam._m0[17u].z, fma(_2401, cbModelParam._m0[17u].y, _2400 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2402, cbModelParam._m0[18u].z, fma(_2401, cbModelParam._m0[18u].y, _2400 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2402, cbModelParam._m0[19u].z, fma(_2401, cbModelParam._m0[19u].y, _2400 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_46_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1780 = frontier_phi_22_46_ladder_2;
        _1782 = frontier_phi_22_46_ladder_1;
        _1784 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1689);
        _1780 = _1764.x * cbModelParam._m0[1u].z;
        _1782 = _1764.y * cbModelParam._m0[1u].z;
        _1784 = _1764.z * cbModelParam._m0[1u].z;
    }
    float _1796 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1797 = _1796 * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1798 = _1796 * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1799 = _1796 * ((cbModelParam._m0[1u].w * (_1784 - _1684)) + _1684);
    float _1802 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1797 * cbSceneParam._m0[91u].x));
    vec4 _1816 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1818 = _1816.w;
    float _1830 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1818);
    float _1831 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1818);
    float _1832 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1818);
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _783 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1874 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1878 = _1838 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_633, _634, _635));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_633, _634, _635));
    float _3985 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _3996 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1855].x * _1861) * _1899) + (((cbLight._m0[_1865].x * _1830) * _1874) * _1897);
    float _1907 = ((_1861 * cbLight._m0[_1855].y) * _1899) + (((cbLight._m0[_1865].y * _1831) * _1874) * _1897);
    float _1908 = ((_1861 * cbLight._m0[_1855].z) * _1899) + (((cbLight._m0[_1865].z * _1832) * _1874) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1914)
    {
        _1925 = _1906;
        _1927 = _1907;
        _1929 = _1908;
    }
    else
    {
        uint _1933 = _1838 + 6u;
        float _1949 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _4007 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1952 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1925 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1906;
        _1927 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1907;
        _1929 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1908;
    }
    bool _1932 = _1912.y == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1932)
    {
        _1970 = _1925;
        _1972 = _1927;
        _1974 = _1929;
    }
    else
    {
        uint _2132 = _1838 + 7u;
        float _2148 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4023 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2151 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1970 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _1925;
        _1972 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _1927;
        _1974 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _1929;
    }
    uint _1977 = _1838 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _636) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1838].x + _712;
    float _1993 = cbLight._m0[_1838].y + _713;
    float _1994 = cbLight._m0[_1838].z + _714;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1838].xyz));
    float _4039 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2006 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _2007 = dot(vec3(_633, _634, _635), vec3(_1999, _2000, _2001));
    float _4061 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_1999, _2000, _2001));
    float _4072 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2030 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2031 = 1.0 - _1991;
    float _2042 = (0.5 / (((_2006 * ((_2005 * _2031) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2031) + _1991) * _2005))) * _2005;
    float _4083 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2058 = _1838 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _636) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1878].x + _712;
    float _2072 = cbLight._m0[_1878].y + _713;
    float _2073 = cbLight._m0[_1878].z + _714;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1878].xyz));
    float _4094 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2085 = dot(vec3(_633, _634, _635), vec3(_2078, _2079, _2080));
    float _4105 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2078, _2079, _2080));
    float _4116 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2070;
    float _2117 = (0.5 / (((_2006 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2107) + _2070) * _2084))) * _2084;
    float _4127 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2129 = (((_2106 * cbLight._m0[_2058].x) * _2119) * _1861) + ((((cbLight._m0[_1977].x * _1830) * _2030) * _2044) * _1874);
    float _2130 = (((_2106 * cbLight._m0[_2058].y) * _2119) * _1861) + ((((cbLight._m0[_1977].y * _1831) * _2030) * _2044) * _1874);
    float _2131 = (((_2106 * cbLight._m0[_2058].z) * _2119) * _1861) + ((((cbLight._m0[_1977].z * _1832) * _2030) * _2044) * _1874);
    float _2193;
    float _2195;
    float _2197;
    if (_1914)
    {
        _2193 = _2129;
        _2195 = _2130;
        _2197 = _2131;
    }
    else
    {
        uint _2199 = _1838 + 2u;
        uint _2203 = _1838 + 10u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _636) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _712;
        float _2220 = cbLight._m0[_2199].y + _713;
        float _2221 = cbLight._m0[_2199].z + _714;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2199].xyz));
        float _4138 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2233 = dot(vec3(_633, _634, _635), vec3(_2226, _2227, _2228));
        float _4149 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4160 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = 1.0 - _2218;
        float _2265 = (0.5 / (((_2006 * ((_2232 * _2255) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2255) + _2218) * _2232))) * _2232;
        float _4171 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2193 = (((_2254 * cbLight._m0[_2203].x) * _2267) * _2268) + _2129;
        _2195 = (((_2254 * cbLight._m0[_2203].y) * _2267) * _2268) + _2130;
        _2197 = (((_2254 * cbLight._m0[_2203].z) * _2267) * _2268) + _2131;
    }
    float _2303;
    float _2305;
    float _2307;
    if (_1932)
    {
        _2303 = _2193;
        _2305 = _2195;
        _2307 = _2197;
    }
    else
    {
        uint _2314 = _1838 + 3u;
        uint _2318 = _1838 + 11u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _636) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _712;
        float _2335 = cbLight._m0[_2314].y + _713;
        float _2336 = cbLight._m0[_2314].z + _714;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2314].xyz));
        float _4187 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2348 = dot(vec3(_633, _634, _635), vec3(_2341, _2342, _2343));
        float _4198 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4209 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2370 = 1.0 - _2333;
        float _2380 = (0.5 / (((_2006 * ((_2347 * _2370) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2370) + _2333) * _2347))) * _2347;
        float _4220 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2303 = (((_2369 * cbLight._m0[_2318].x) * _2382) * _2383) + _2193;
        _2305 = (((_2369 * cbLight._m0[_2318].y) * _2382) * _2383) + _2195;
        _2307 = (((_2369 * cbLight._m0[_2318].z) * _2382) * _2383) + _2197;
    }
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_1836.y == 0u)
    {
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2458;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2458;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2458;
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.x;
        uint _2485 = uint((float(_2473.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2474))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2474)));
        float _2495 = (log2(_2461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2496 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        uint _2499 = uint(isnan(14.0) ? _2496 : (isnan(_2496) ? 14.0 : min(_2496, 14.0)));
        uvec4 _2504 = texelFetch(g_lightClusterGridBuffer, int(((_2499 << 2u) + (_2485 << 6u)) >> 2u));
        uint _2505 = _2504.x;
        uint _2506 = _2473.z;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((((1u << ((_2506 >> 4u) & 15u)) + 4294967295u) & _2505) == 0u) || ((_2506 & 240u) == 0u))
        {
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
        }
        else
        {
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2767)
                {
                    frontier_phi_61_pred = _2751;
                    frontier_phi_61_pred_1 = _2756;
                    frontier_phi_61_pred_2 = _2755;
                    frontier_phi_61_pred_3 = _2754;
                    frontier_phi_61_pred_4 = _2753;
                    frontier_phi_61_pred_5 = _2752;
                }
                else
                {
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    uint _2881;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2766;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    for (;;)
                    {
                        uint _2885 = uint(findLSB(_2881)) + (_2757 << 5u);
                        uint _2882 = (_2881 + 4294967295u) & _2881;
                        uint _2887 = _2885 * 48u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2907 = (_2885 * 48u) + 4u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2926 = (_2885 * 48u) + 8u;
                        vec3 _2937 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x));
                        float _2941 = _2901.x - _2459;
                        float _2942 = _2901.y - _2460;
                        float _2943 = _2901.z - _2461;
                        float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                        float _2947 = inversesqrt(_2944);
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2951 = dot(vec3(_739, _742, _745), vec3(_2948, _2949, _2950));
                        float _2956 = 1.0 - (_2944 * _2901.w);
                        float _4246 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2958 = sqrt(_2944) * _2920.w;
                        float _2961 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2951) + _2962;
                        float _2968 = _2958 * _2958;
                        float _2972 = ((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2957) / ((_2968 * 0.699999988079071044921875) + 1.0);
                        float _2976 = (-0.0) - _2459;
                        float _2977 = (-0.0) - _2460;
                        float _2978 = (-0.0) - _2461;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2993 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                        float _2994 = 1.0 - _799;
                        float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                        float _3002 = _3001 * _3001;
                        float _3003 = _3002 * _3002;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3014 = dot(vec3(_739, _742, _745), vec3(_2983, _2984, _2985));
                        float _4262 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _3018 = dot(vec3(_739, _742, _745), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                        float _4273 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                        float _3026 = _2961 * _3002;
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _2951) + _3027;
                        float _4284 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _3032 = 1.0 - _3002;
                        float _3042 = (0.5 / (((_3031 * ((_3017 * _3032) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _3002) * _3017))) * _3031;
                        float _4295 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3053 = (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) / ((_3025 * _3025) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125))) * _2957;
                        _2810 = (_2972 * _2920.x) + _2878;
                        _2811 = (_2972 * _2920.y) + _2879;
                        _2812 = (_2972 * _2920.z) + _2880;
                        _2807 = (_3053 * _2937.x) + _2875;
                        _2808 = (_3053 * _2937.y) + _2876;
                        _2809 = (_3053 * _2937.z) + _2877;
                        if (_2882 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2882;
                        }
                    }
                    frontier_phi_61_pred = _2807;
                    frontier_phi_61_pred_1 = _2812;
                    frontier_phi_61_pred_2 = _2811;
                    frontier_phi_61_pred_3 = _2810;
                    frontier_phi_61_pred_4 = _2809;
                    frontier_phi_61_pred_5 = _2808;
                }
                _2607 = frontier_phi_61_pred;
                _2617 = frontier_phi_61_pred_1;
                _2615 = frontier_phi_61_pred_2;
                _2613 = frontier_phi_61_pred_3;
                _2611 = frontier_phi_61_pred_4;
                _2609 = frontier_phi_61_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2607;
                    _2752 = _2609;
                    _2753 = _2611;
                    _2754 = _2613;
                    _2755 = _2615;
                    _2756 = _2617;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
        }
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.z;
        uint _2623 = (_2621 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2623) & _2505) == 0u)
        {
            _2719 = _2606;
            _2721 = _2608;
            _2723 = _2610;
            _2725 = _2612;
            _2727 = _2614;
            _2729 = _2616;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
            float _2745 = _2744 * _2459;
            float _2746 = _2744 * _2460;
            float _2747 = _2744 * _2461;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2623 < ((_2621 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2858 = _2606;
                float _2859 = _2608;
                float _2860 = _2610;
                float _2861 = _2612;
                float _2862 = _2614;
                float _2863 = _2616;
                uint _2864 = _2623;
                uint _2873;
                bool _2874;
                for (;;)
                {
                    _2873 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                    _2874 = _2873 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2874)
                    {
                        frontier_phi_67_pred = _2861;
                        frontier_phi_67_pred_1 = _2862;
                        frontier_phi_67_pred_2 = _2863;
                        frontier_phi_67_pred_3 = _2860;
                        frontier_phi_67_pred_4 = _2859;
                        frontier_phi_67_pred_5 = _2858;
                    }
                    else
                    {
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        uint _3077 = _2873;
                        uint _3078;
                        vec4 _3103;
                        float _3104;
                        vec4 _3119;
                        vec3 _3131;
                        vec4 _3146;
                        vec4 _3161;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3088 = ((_2864 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3077));
                            _3078 = (_3077 + 4294967295u) & _3077;
                            uint _3090 = _3088 * 40u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3104 = _3103.w;
                            uint _3106 = (_3088 * 40u) + 4u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3088 * 40u) + 8u;
                            _3131 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x));
                            uint _3133 = (_3088 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3088 * 40u) + 20u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3088 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3088 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2461, _3195.z, fma(_2460, _3195.y, _3195.x * _2459)) + _3195.w;
                            _3208 = !((fma(_2461, _3176.z, fma(_2460, _3176.y, _3176.x * _2459)) + _3176.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3103.x - _2459;
                                float _3236 = _3103.y - _2460;
                                float _3237 = _3103.z - _2461;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3104 * _3104));
                                float _4306 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3253 = sqrt(_3238) * _3119.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_739, _742, _745))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2461, _3146.z, fma(_2460, _3146.y, _3146.x * _2459)) + _3146.w) / _3207;
                                float _3267 = (fma(_2461, _3161.z, fma(_2460, _3161.y, _3161.x * _2459)) + _3161.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4322 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _799;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2745;
                                float _3297 = _3243 - _2746;
                                float _3298 = _3244 - _2747;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4333 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3310 = dot(vec3(_739, _742, _745), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4344 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_739, _742, _745), vec3(_3242, _3243, _3244))) + _3319;
                                float _4355 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4366 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3347 * _3131.x;
                                frontier_phi_73_pred_1 = _3347 * _3131.y;
                                frontier_phi_73_pred_2 = _3273 * _3119.z;
                                frontier_phi_73_pred_3 = _3273 * _3119.y;
                                frontier_phi_73_pred_4 = _3273 * _3119.x;
                                frontier_phi_73_pred_5 = _3347 * _3131.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_73_pred;
                            _3352 = frontier_phi_73_pred_1;
                            _3356 = frontier_phi_73_pred_2;
                            _3355 = frontier_phi_73_pred_3;
                            _3354 = frontier_phi_73_pred_4;
                            _3353 = frontier_phi_73_pred_5;
                            _3061 = _3354 + _3074;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            _3058 = _3351 + _3071;
                            _3059 = _3352 + _3072;
                            _3060 = _3353 + _3073;
                            if (_3078 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3078;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3061;
                        frontier_phi_67_pred_1 = _3062;
                        frontier_phi_67_pred_2 = _3063;
                        frontier_phi_67_pred_3 = _3060;
                        frontier_phi_67_pred_4 = _3059;
                        frontier_phi_67_pred_5 = _3058;
                    }
                    _2726 = frontier_phi_67_pred;
                    _2728 = frontier_phi_67_pred_1;
                    _2730 = frontier_phi_67_pred_2;
                    _2724 = frontier_phi_67_pred_3;
                    _2722 = frontier_phi_67_pred_4;
                    _2720 = frontier_phi_67_pred_5;
                    uint _2865 = _2864 + 1u;
                    if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2858 = _2720;
                        _2859 = _2722;
                        _2860 = _2724;
                        _2861 = _2726;
                        _2862 = _2728;
                        _2863 = _2730;
                        _2864 = _2865;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2728;
                frontier_phi_55_56_ladder_1 = _2730;
                frontier_phi_55_56_ladder_2 = _2726;
                frontier_phi_55_56_ladder_3 = _2724;
                frontier_phi_55_56_ladder_4 = _2722;
                frontier_phi_55_56_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_55_56_ladder = _2614;
                frontier_phi_55_56_ladder_1 = _2616;
                frontier_phi_55_56_ladder_2 = _2612;
                frontier_phi_55_56_ladder_3 = _2610;
                frontier_phi_55_56_ladder_4 = _2608;
                frontier_phi_55_56_ladder_5 = _2606;
            }
            _2719 = frontier_phi_55_56_ladder_5;
            _2721 = frontier_phi_55_56_ladder_4;
            _2723 = frontier_phi_55_56_ladder_3;
            _2725 = frontier_phi_55_56_ladder_2;
            _2727 = frontier_phi_55_56_ladder;
            _2729 = frontier_phi_55_56_ladder_1;
        }
        float _2734 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2518 = (_2734 * _2725) + _1970;
        _2520 = (_2734 * _2727) + _1972;
        _2522 = (_2734 * _2729) + _1974;
        _2524 = ((_2719 * 0.039999999105930328369140625) * _2734) + _2303;
        _2526 = ((_2721 * 0.039999999105930328369140625) * _2734) + _2305;
        _2528 = ((_2723 * 0.039999999105930328369140625) * _2734) + _2307;
    }
    else
    {
        _2518 = _1970;
        _2520 = _1972;
        _2522 = _1974;
        _2524 = _2303;
        _2526 = _2305;
        _2528 = _2307;
    }
    float _4382 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4393 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4404 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2548 = _234 + 6u;
    float _2556 = _720 / cbSceneParam._m0[86u].x;
    float _2557 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2571 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2573 = _2571.x;
    float _2574 = _2571.y;
    float _2575 = _2571.z;
    float _2576 = _2571.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2631 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2632 = _2631 / _654;
        float _2643 = _2632 * _705;
        float _2644 = _706 * _2632;
        float _2645 = (-0.0) - _2644;
        float _2647 = _2632 * _707;
        float _2649 = (cbSceneParam._m0[77u].w * _2645) / _2631;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2644;
        float _2657 = sqrt(((_2643 * _2643) + (_2644 * _2644)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2631)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2820;
        if (abs((_2645 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2820 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2782 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2820 = ((abs(_2657 / _2645) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2667 * _2791) - exp2(_2667 * _2792)) * _2780))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2822 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, 1.0), 0.0);
        float _2831 = exp2((_2820 * (-1.44269502162933349609375)) * (1.0 - _2822.w));
        float _2832 = log2(_2831);
        float _2848 = log2(_2576);
        _2669 = (exp2(_2848 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].x)) * _2822.x) / cbSceneParam._m0[78u].x)) + _2573;
        _2671 = (exp2(_2848 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].y)) * _2822.y) / cbSceneParam._m0[78u].y)) + _2574;
        _2673 = (exp2(_2848 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].z)) * _2822.z) / cbSceneParam._m0[78u].z)) + _2575;
        _2675 = _2831 * _2576;
    }
    else
    {
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
        _2675 = _2576;
    }
    float _2687 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2688 = _2687 == 3.0;
    float _2689 = log2(_2675);
    float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2518 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _783))) + ((_2524 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2520 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _783))) + ((_2526 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2522 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _783))) + ((_2528 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2707 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2707 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.y = _2707 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.z = _2707 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.w = cbInstanceData._m0[_2548].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2548].w;
}


