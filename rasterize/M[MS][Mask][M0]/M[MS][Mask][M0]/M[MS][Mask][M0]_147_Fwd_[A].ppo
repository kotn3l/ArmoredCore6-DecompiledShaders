#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1560;
float _3915;
float _3916;
float _3917;
float _3918;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3927 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _562 = _560.x;
    float _572 = dot(vec4(_562, _560.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _584 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _371.z) * 2.0) - ((((_562 - _572) * cbMtdParam._m0[24u].z) + _572) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3949 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _598 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_585 * ((_543.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _601 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_585 * ((_543.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _604 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_585 * ((_543.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _663 = _659.z;
    float _670 = ((_642.x - _661) * _443) + _661;
    float _671 = ((_642.y - _662) * _443) + _662;
    float _672 = ((_642.z - _663) * _443) + _663;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_684.x - _670) * _516) + _670;
    float _696 = ((_684.y - _671) * _516) + _671;
    float _697 = ((_684.z - _672) * _516) + _672;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _722 = ((_709.z - _697) * _585) + _697;
    float _725 = ((((_709.x - _695) * _585) + _695) * 2.0) + (-1.0);
    float _727 = ((((_709.y - _696) * _585) + _696) * 2.0) + (-1.0);
    float _728 = dot(vec2(_725, _727), vec2(_725, _727));
    float _3960 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _733 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _759 = (((_747.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _725;
    float _760 = (((_747.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _727;
    float _763 = fma(_733, _251, fma(_760, _258, _759 * _244));
    float _766 = fma(_733, _252, fma(_760, _259, _759 * _245));
    float _769 = fma(_733, _253, fma(_760, _260, _759 * _246));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _802 = _800.x;
    float _803 = 1.0 - _802;
    float _809 = (cbMtdParam._m0[19u].x + dot(vec4(_773 * _763, _773 * _766, _773 * _769, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_802 - _803) * cbMtdParam._m0[24u].w) + _803) * cbMtdParam._m0[21u].z);
    float _3971 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _812 = (-0.0) - cbMtdParam._m0[24u].x;
    float _814 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
    float _822 = _810 - ((_810 * TEXCOORD_8.x) * _815);
    float _823 = _810 - ((_810 * TEXCOORD_8.y) * _815);
    float _824 = _810 - ((_810 * TEXCOORD_8.z) * _815);
    float _831 = (_822 * ((_622.x * cbMtdParam._m0[18u].x) - _598)) + _598;
    float _832 = (_823 * ((_622.y * cbMtdParam._m0[18u].y) - _601)) + _601;
    float _833 = (_824 * ((_622.z * cbMtdParam._m0[18u].z) - _604)) + _604;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _876 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_847 - _848) * cbMtdParam._m0[24u].y) + _848) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3992 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _885 = ((((cbMtdParam._m0[10u].x - _831) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _877) + _831;
    float _886 = ((((cbMtdParam._m0[10u].y - _832) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _877) + _832;
    float _887 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _833)) * _877) + _833;
    float _891 = (cbMtdParam._m0[19u].w * (_747.z - _722)) + _722;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _912 = (_905.x * 2.0) + (-1.0);
    float _913 = (_905.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _4003 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _922 = ((_905.z - _891) * _822) + _891;
    float _925 = ((cbMtdParam._m0[23u].y - _922) * _877) + _922;
    vec4 _944 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _950 = (_944.x * 2.0) + (-1.0);
    float _951 = (_944.y * 2.0) + (-1.0);
    float _952 = dot(vec2(_950, _951), vec2(_950, _951));
    float _4014 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _967 = ((sqrt(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) - _733) * _824) + _733;
    float _970 = (((_912 - _759) * _822) + _759) + (cbMtdParam._m0[21u].x * _759);
    float _971 = (((_913 - _760) * _823) + _760) + (cbMtdParam._m0[21u].x * _760);
    float _982 = (((_950 - _970) + (_970 * cbMtdParam._m0[22u].z)) * _877) + _970;
    float _983 = (((_951 - _971) + (_971 * cbMtdParam._m0[22u].z)) * _877) + _971;
    float _984 = (_877 * (sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _967)) + _967;
    float _986 = cbMtdParam._m0[22u].x + _747.w;
    float _989 = fma(_984, _251, fma(_983, _258, _982 * _244));
    float _992 = fma(_984, _252, fma(_983, _259, _982 * _245));
    float _995 = fma(_984, _253, fma(_983, _260, _982 * _246));
    float _999 = inversesqrt(dot(vec3(_989, _992, _995), vec3(_989, _992, _995)));
    float _1000 = _999 * _989;
    float _1001 = _999 * _992;
    float _1002 = _999 * _995;
    float _4025 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _1003 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4047 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4058 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4069 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _1021 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1071 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1061);
    float _1072 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1061);
    float _1073 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1061);
    float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
    float _1078 = _1071 * _1077;
    float _1079 = _1072 * _1077;
    float _1080 = _1073 * _1077;
    vec4 _1085 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1087 = _1085.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1241 = sqrt(((_1071 * _1071) + (_1072 * _1072)) + (_1073 * _1073));
        float _1247 = (cbMatDynParam._m0[5u].x * _1241) + cbMatDynParam._m0[5u].y;
        float _4080 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1252 = (cbMatDynParam._m0[5u].z * _1241) + cbMatDynParam._m0[5u].w;
        float _4091 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) - _1248)) + _1248) < ((_1087 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1098 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1099 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1117 = fma(_1002, cbSceneParam._m0[5u].z, fma(_1001, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1000));
    float _1120 = fma(_1002, cbSceneParam._m0[6u].z, fma(_1001, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1000));
    float _1123 = fma(_1002, cbSceneParam._m0[7u].z, fma(_1001, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1000));
    uint _1136 = _263 + 9u;
    uint _1137 = _1136 + uint(cbMatDynParam._m0[0u].w);
    float _1143 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1137].x;
    float _1144 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1137].y;
    float _1145 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1137].z;
    float _4102 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    vec4 _1157 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1098, cbSceneParam._m0[86u].y * _1099));
    float _1161 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * TEXCOORD_5.w) * _1157.x;
    float _1162 = dot(vec3(_1000, _1001, _1002), vec3(_1078, _1079, _1080));
    float _1165 = _1162 * 2.0;
    float _1169 = (_1165 * _1000) - _1078;
    float _1170 = (_1165 * _1001) - _1079;
    float _1171 = (_1165 * _1002) - _1080;
    float _1175 = abs(dot(vec3(_1078, _1079, _1080), vec3(_1000, _1001, _1002)));
    float _4135 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1177 = sqrt(_1003);
    float _1190 = exp2((_1177 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1177 * 3.0));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1230 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1559;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1284 = fma(_1230, cbModelParam._m0[26u].z, fma(_1226, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222));
        float _1288 = fma(_1230, cbModelParam._m0[27u].z, fma(_1226, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222));
        float _1292 = fma(_1230, cbModelParam._m0[28u].z, fma(_1226, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222));
        float _1317 = _1222 + _1000;
        float _1318 = _1226 + _1001;
        float _1319 = _1230 + _1002;
        float _1329 = fma(_1319, cbModelParam._m0[26u].z, fma(_1318, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1317)) - _1284;
        float _1330 = fma(_1319, cbModelParam._m0[27u].z, fma(_1318, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1317)) - _1288;
        float _1331 = fma(_1319, cbModelParam._m0[28u].z, fma(_1318, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1317)) - _1292;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1284 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1288 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[34u].z) + ((((((_1292 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1387 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1353.x + (-0.5));
        float _1389 = _1387 * (_1353.y + (-0.5));
        float _1390 = _1387 * (_1353.z + (-0.5));
        float _1397 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1360.x + (-0.5));
        float _1399 = _1397 * (_1360.y + (-0.5));
        float _1400 = _1397 * (_1360.z + (-0.5));
        float _1407 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1367.x + (-0.5));
        float _1409 = _1407 * (_1367.y + (-0.5));
        float _1410 = _1407 * (_1367.z + (-0.5));
        float _1417 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1374.x + (-0.5));
        float _1419 = _1417 * (_1374.y + (-0.5));
        float _1420 = _1417 * (_1374.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1441 = (dot(vec3(_1000, _1001, _1002), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1451 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4183 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1453 + 1.0))) + _1458) * _1421;
        float _1468 = _1389 * 0.5;
        float _1469 = _1399 * 0.5;
        float _1470 = _1409 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_1000, _1001, _1002), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4216 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1495 + 1.0))) + _1500) * _1422;
        float _1510 = _1390 * 0.5;
        float _1511 = _1400 * 0.5;
        float _1512 = _1410 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_1000, _1001, _1002), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4249 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1537 + 1.0))) + _1542) * _1423;
        _1559 = _1390;
        _1561 = _1389;
        _1562 = _1388;
        _1563 = _1400;
        _1564 = _1399;
        _1565 = _1398;
        _1566 = _1410;
        _1567 = _1409;
        _1568 = _1408;
        _1569 = _1423;
        _1570 = _1422;
        _1571 = _1421;
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1560;
        _1561 = _1560;
        _1562 = _1560;
        _1563 = _1560;
        _1564 = _1560;
        _1565 = _1560;
        _1566 = _1560;
        _1567 = _1560;
        _1568 = _1560;
        _1569 = _1560;
        _1570 = _1560;
        _1571 = _1560;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1600 = fma(_1230, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222));
        float _1604 = fma(_1230, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222));
        float _1608 = fma(_1230, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222));
        float _1631 = _1222 + _1000;
        float _1632 = _1226 + _1001;
        float _1633 = _1230 + _1002;
        float _1643 = fma(_1633, cbModelParam._m0[30u].z, fma(_1632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1631)) - _1600;
        float _1644 = fma(_1633, cbModelParam._m0[31u].z, fma(_1632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1631)) - _1604;
        float _1645 = fma(_1633, cbModelParam._m0[32u].z, fma(_1632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1631)) - _1608;
        float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
        float _1662 = ((_1649 * _1643) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1600 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1649 * _1644) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1604 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1649 * _1645) / cbModelParam._m0[35u].z) + ((((((_1608 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        float _1699 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1666.x + (-0.5));
        float _1701 = _1699 * (_1666.y + (-0.5));
        float _1702 = _1699 * (_1666.z + (-0.5));
        float _1709 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1673.x + (-0.5));
        float _1711 = _1709 * (_1673.y + (-0.5));
        float _1712 = _1709 * (_1673.z + (-0.5));
        float _1719 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1680.x + (-0.5));
        float _1721 = _1719 * (_1680.y + (-0.5));
        float _1722 = _1719 * (_1680.z + (-0.5));
        float _1729 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1687.x + (-0.5));
        float _1731 = _1729 * (_1687.y + (-0.5));
        float _1732 = _1729 * (_1687.z + (-0.5));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1700 * 0.5;
        float _1737 = _1710 * 0.5;
        float _1738 = _1720 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_1000, _1001, _1002), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4312 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1763 + 1.0))) + _1768) * _1733;
        float _1778 = _1701 * 0.5;
        float _1779 = _1711 * 0.5;
        float _1780 = _1721 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_1000, _1001, _1002), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4345 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1805 + 1.0))) + _1810) * _1734;
        float _1820 = _1702 * 0.5;
        float _1821 = _1712 * 0.5;
        float _1822 = _1722 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1000, _1001, _1002), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4378 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1847 + 1.0))) + _1852) * _1735;
        _1869 = _1702;
        _1870 = _1701;
        _1871 = _1700;
        _1872 = _1712;
        _1873 = _1711;
        _1874 = _1710;
        _1875 = _1722;
        _1876 = _1721;
        _1877 = _1720;
        _1878 = _1735;
        _1879 = _1734;
        _1880 = _1733;
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
    }
    else
    {
        _1869 = _1560;
        _1870 = _1560;
        _1871 = _1560;
        _1872 = _1560;
        _1873 = _1560;
        _1874 = _1560;
        _1875 = _1560;
        _1876 = _1560;
        _1877 = _1560;
        _1878 = _1560;
        _1879 = _1560;
        _1880 = _1560;
        _1881 = 0.0;
        _1882 = 0.0;
        _1883 = 0.0;
    }
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1572)) + _1572;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1573)) + _1573;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1574)) + _1574;
    float _1916 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1893));
    float _1937 = _1169 * 0.5;
    float _1938 = _1170 * 0.5;
    float _1939 = _1171 * 0.5;
    float _1940 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1943 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1946 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1980;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1953 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1559, _1563, _1566, _1569));
        float _1957 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1561, _1564, _1567, _1570));
        float _1961 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1968 = dot(vec4(cbModelParam._m0[39u]), vec4(_1937, _1938, _1939, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1991;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1982 = dot(vec4(cbModelParam._m0[40u]), vec4(_1937, _1938, _1939, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _1995 = (_1991 * cbModelParam._m0[1u].x) + (_1980 * (1.0 - cbModelParam._m0[1u].x));
    float _2005 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1003);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2005 : min(cbModelParam._m0[25u].z, _2005));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1230, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1222)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1230, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1222)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1230, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1222)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1171, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169));
        float _2067 = fma(_1171, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169));
        float _2070 = fma(_1171, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2098 = frontier_phi_17_15_ladder;
        }
        float _2298;
        if (_2067 > 0.0)
        {
            _2298 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2298 = frontier_phi_26_22_ladder;
        }
        float _2541;
        if (_2070 > 0.0)
        {
            _2541 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2541 = frontier_phi_38_33_ladder;
        }
        float _2543 = isnan(_2298) ? _2098 : (isnan(_2098) ? _2298 : min(_2098, _2298));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _2064) + _2053;
        float _2549 = (_2544 * _2067) + _2057;
        float _2550 = (_2544 * _2070) + _2061;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2551;
        float _2555 = _2551 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 > _2555) || ((_2549 < _2553) || ((_2548 < _2553) || (_2548 > _2555))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2550, cbModelParam._m0[9u].z, fma(_2549, cbModelParam._m0[9u].y, _2548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2550, cbModelParam._m0[10u].z, fma(_2549, cbModelParam._m0[10u].y, _2548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2550, cbModelParam._m0[11u].z, fma(_2549, cbModelParam._m0[11u].y, _2548 * cbModelParam._m0[11u].x))), _2006);
            frontier_phi_16_38_ladder = _2674.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2674.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2674.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_16_38_ladder_2;
        _2088 = frontier_phi_16_38_ladder_1;
        _2090 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1169, _1170, _1171), _2006);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1003);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2184;
    float _2186;
    float _2188;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2148 = fma(_1230, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1222)) + cbModelParam._m0[21u].w;
        float _2152 = fma(_1230, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1222)) + cbModelParam._m0[22u].w;
        float _2156 = fma(_1230, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1222)) + cbModelParam._m0[23u].w;
        float _2159 = fma(_1171, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169));
        float _2162 = fma(_1171, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169));
        float _2165 = fma(_1171, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169));
        float _2303;
        if (_2159 > 0.0)
        {
            _2303 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2303 = frontier_phi_28_24_ladder;
        }
        float _2568;
        if (_2162 > 0.0)
        {
            _2568 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2568 = frontier_phi_40_35_ladder;
        }
        float _2773;
        if (_2165 > 0.0)
        {
            _2773 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2773 = frontier_phi_49_46_ladder;
        }
        float _2775 = isnan(_2568) ? _2303 : (isnan(_2303) ? _2568 : min(_2303, _2568));
        float _2776 = isnan(_2773) ? _2775 : (isnan(_2775) ? _2773 : min(_2775, _2773));
        float _2780 = (_2776 * _2159) + _2148;
        float _2781 = (_2776 * _2162) + _2152;
        float _2782 = (_2776 * _2165) + _2156;
        float _2783 = _2776 * 9.9999997473787516355514526367188e-05;
        float _2784 = (-1.0) - _2783;
        float _2786 = _2783 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2782 > _2786) || ((_2782 < _2784) || ((_2781 > _2786) || ((_2781 < _2784) || ((_2780 < _2784) || (_2780 > _2786))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2782, cbModelParam._m0[17u].z, fma(_2781, cbModelParam._m0[17u].y, _2780 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2782, cbModelParam._m0[18u].z, fma(_2781, cbModelParam._m0[18u].y, _2780 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2782, cbModelParam._m0[19u].z, fma(_2781, cbModelParam._m0[19u].y, _2780 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_25_49_ladder = _2981.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2981.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2981.x * cbModelParam._m0[1u].z;
        }
        _2184 = frontier_phi_25_49_ladder_2;
        _2186 = frontier_phi_25_49_ladder_1;
        _2188 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1169, _1170, _1171), _2095);
        _2184 = _2168.x * cbModelParam._m0[1u].z;
        _2186 = _2168.y * cbModelParam._m0[1u].z;
        _2188 = _2168.z * cbModelParam._m0[1u].z;
    }
    float _2200 = ((((1.0 - _1190) * ((_1177 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1190 * _1177)) * _1161;
    float _2201 = _2200 * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2202 = _2200 * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2203 = _2200 * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2202, cbSceneParam._m0[89u].y, _2201 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2202, cbSceneParam._m0[90u].y, _2201 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2202, cbSceneParam._m0[91u].y, _2201 * cbSceneParam._m0[91u].x));
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _1161 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2257 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2261 = _2224 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_1000, _1001, _1002));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_1000, _1001, _1002));
    float _4514 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4525 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2241].x * _2247) * _2282) + ((cbLight._m0[_2251].x * _2257) * _2280);
    float _2290 = ((_2247 * cbLight._m0[_2241].y) * _2282) + ((_2257 * cbLight._m0[_2251].y) * _2280);
    float _2291 = ((_2247 * cbLight._m0[_2241].z) * _2282) + ((_2257 * cbLight._m0[_2251].z) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2297)
    {
        _2308 = _2289;
        _2310 = _2290;
        _2312 = _2291;
    }
    else
    {
        uint _2316 = _2224 + 6u;
        float _2332 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_1000, _1001, _1002)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4536 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2335 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2308 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2289;
        _2310 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2290;
        _2312 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2291;
    }
    bool _2315 = _2295.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2315)
    {
        _2353 = _2308;
        _2355 = _2310;
        _2357 = _2312;
    }
    else
    {
        uint _2512 = _2224 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_1000, _1001, _1002)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4552 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2531 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2353 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2308;
        _2355 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2310;
        _2357 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2312;
    }
    uint _2360 = _2224 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _1003) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2224].x + _1078;
    float _2376 = cbLight._m0[_2224].y + _1079;
    float _2377 = cbLight._m0[_2224].z + _1080;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2224].xyz));
    float _4568 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _4579 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _2389 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2390 = dot(vec3(_1000, _1001, _1002), vec3(_2382, _2383, _2384));
    float _4590 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2382, _2383, _2384));
    float _4601 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2413 = (exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2414 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2389 * ((_2388 * _2414) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2414) + _2374) * _2388))) * _2388;
    float _4612 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2438 = _2224 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _1003) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2261].x + _1078;
    float _2452 = cbLight._m0[_2261].y + _1079;
    float _2453 = cbLight._m0[_2261].z + _1080;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2261].xyz));
    float _4623 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2465 = dot(vec3(_1000, _1001, _1002), vec3(_2458, _2459, _2460));
    float _4634 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2458, _2459, _2460));
    float _4645 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2486 = (exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2487 = 1.0 - _2450;
    float _2497 = (0.5 / (((_2389 * ((_2464 * _2487) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2487) + _2450) * _2464))) * _2464;
    float _4656 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2509 = (((_2486 * cbLight._m0[_2438].x) * _2499) * _2247) + (((_2413 * cbLight._m0[_2360].x) * _2427) * _2257);
    float _2510 = (((_2486 * cbLight._m0[_2438].y) * _2499) * _2247) + (((_2413 * cbLight._m0[_2360].y) * _2427) * _2257);
    float _2511 = (((_2486 * cbLight._m0[_2438].z) * _2499) * _2247) + (((_2413 * cbLight._m0[_2360].z) * _2427) * _2257);
    float _2573;
    float _2575;
    float _2577;
    if (_2297)
    {
        _2573 = _2509;
        _2575 = _2510;
        _2577 = _2511;
    }
    else
    {
        uint _2579 = _2224 + 2u;
        uint _2583 = _2224 + 10u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _1003) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _1078;
        float _2600 = cbLight._m0[_2579].y + _1079;
        float _2601 = cbLight._m0[_2579].z + _1080;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2579].xyz));
        float _4667 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2613 = dot(vec3(_1000, _1001, _1002), vec3(_2606, _2607, _2608));
        float _4678 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4689 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2389 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2635) + _2598) * _2612))) * _2612;
        float _4700 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2573 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2509;
        _2575 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2510;
        _2577 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2511;
    }
    float _2683;
    float _2685;
    float _2687;
    if (_2315)
    {
        _2683 = _2573;
        _2685 = _2575;
        _2687 = _2577;
    }
    else
    {
        uint _2694 = _2224 + 3u;
        uint _2698 = _2224 + 11u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _1003) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _1078;
        float _2715 = cbLight._m0[_2694].y + _1079;
        float _2716 = cbLight._m0[_2694].z + _1080;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_1000, _1001, _1002), vec3(cbLight._m0[_2694].xyz));
        float _4716 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2728 = dot(vec3(_1000, _1001, _1002), vec3(_2721, _2722, _2723));
        float _4727 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4738 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2749 = (exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2750 = 1.0 - _2713;
        float _2760 = (0.5 / (((_2389 * ((_2727 * _2750) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2750) + _2713) * _2727))) * _2727;
        float _4749 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2683 = (((_2749 * cbLight._m0[_2698].x) * _2762) * _2763) + _2573;
        _2685 = (((_2749 * cbLight._m0[_2698].y) * _2762) * _2763) + _2575;
        _2687 = (((_2749 * cbLight._m0[_2698].z) * _2762) * _2763) + _2577;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2222.y == 0u)
    {
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2838;
        float _2840 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2838;
        float _2841 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2838;
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1099) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _1098) / _2854)));
        float _2875 = (log2(_2841 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
        }
        else
        {
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3154)
                {
                    frontier_phi_66_pred = _3138;
                    frontier_phi_66_pred_1 = _3143;
                    frontier_phi_66_pred_2 = _3142;
                    frontier_phi_66_pred_3 = _3141;
                    frontier_phi_66_pred_4 = _3140;
                    frontier_phi_66_pred_5 = _3139;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3153;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3144 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _2839;
                        float _3350 = _3309.y - _2840;
                        float _3351 = _3309.z - _2841;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_1117, _1120, _1123), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4775 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _2839;
                        float _3385 = (-0.0) - _2840;
                        float _3386 = (-0.0) - _2841;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3401 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _1177;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3414 = _3393 + _3358;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_1117, _1120, _1123), vec3(_3391, _3392, _3393));
                        float _4791 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3426 = dot(vec3(_1117, _1120, _1123), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4802 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3369 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3359) + _3435;
                        float _4813 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4824 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3433 * _3433) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3213 = (_3380 * _3328.x) + _3286;
                        _3214 = (_3380 * _3328.y) + _3287;
                        _3215 = (_3380 * _3328.z) + _3288;
                        _3210 = (_3461 * _3345.x) + _3283;
                        _3211 = (_3461 * _3345.y) + _3284;
                        _3212 = (_3461 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_66_pred = _3210;
                    frontier_phi_66_pred_1 = _3215;
                    frontier_phi_66_pred_2 = _3214;
                    frontier_phi_66_pred_3 = _3213;
                    frontier_phi_66_pred_4 = _3212;
                    frontier_phi_66_pred_5 = _3211;
                }
                _2987 = frontier_phi_66_pred;
                _2997 = frontier_phi_66_pred_1;
                _2995 = frontier_phi_66_pred_2;
                _2993 = frontier_phi_66_pred_3;
                _2991 = frontier_phi_66_pred_4;
                _2989 = frontier_phi_66_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2987;
                    _3139 = _2989;
                    _3140 = _2991;
                    _3141 = _2993;
                    _3142 = _2995;
                    _3143 = _2997;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
        }
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.z;
        uint _3003 = (_3001 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3003) & _2885) == 0u)
        {
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
            _3114 = _2994;
            _3116 = _2996;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
            float _3132 = _3131 * _2839;
            float _3133 = _3131 * _2840;
            float _3134 = _3131 * _2841;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3003 < ((_3001 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3266 = _2986;
                float _3267 = _2988;
                float _3268 = _2990;
                float _3269 = _2992;
                float _3270 = _2994;
                float _3271 = _2996;
                uint _3272 = _3003;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3282)
                    {
                        frontier_phi_77_pred = _3271;
                        frontier_phi_77_pred_1 = _3270;
                        frontier_phi_77_pred_2 = _3269;
                        frontier_phi_77_pred_3 = _3268;
                        frontier_phi_77_pred_4 = _3267;
                        frontier_phi_77_pred_5 = _3266;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        float _3493 = _3271;
                        uint _3494 = _3281;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3563;
                        vec4 _3578;
                        float _3624;
                        bool _3625;
                        for (;;)
                        {
                            uint _3505 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3550 = (_3505 * 40u) + 16u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3505 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3505 * 40u) + 24u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3599 = (_3505 * 40u) + 28u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3624 = fma(_2841, _3612.z, fma(_2840, _3612.y, _3612.x * _2839)) + _3612.w;
                            _3625 = !((fma(_2841, _3593.z, fma(_2840, _3593.y, _3593.x * _2839)) + _3593.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3625)
                            {
                                float _3652 = _3520.x - _2839;
                                float _3653 = _3520.y - _2840;
                                float _3654 = _3520.z - _2841;
                                float _3655 = dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654));
                                float _3658 = inversesqrt(_3655);
                                float _3659 = _3658 * _3652;
                                float _3660 = _3658 * _3653;
                                float _3661 = _3658 * _3654;
                                float _3665 = 1.0 - (_3655 / (_3521 * _3521));
                                float _4835 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3670 = sqrt(_3655) * _3536.w;
                                float _3672 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                                float _3673 = _3672 * _3672;
                                float _3676 = ((1.0 - _3673) * dot(vec3(_3659, _3660, _3661), vec3(_1117, _1120, _1123))) + _3673;
                                float _3679 = _3670 * _3670;
                                float _3683 = (fma(_2841, _3563.z, fma(_2840, _3563.y, _3563.x * _2839)) + _3563.w) / _3624;
                                float _3684 = (fma(_2841, _3578.z, fma(_2840, _3578.y, _3578.x * _2839)) + _3578.w) / _3624;
                                float _3688 = 1.0 - dot(vec2(_3683, _3684), vec2(_3683, _3684));
                                float _4851 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3690 = _3689 * (((isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0))) * _3666) / ((_3679 * 0.699999988079071044921875) + 1.0));
                                float _3702 = exp2(log2(1.0 / ((_3679 * 3.5) + 5.0)) * 0.25);
                                float _3703 = 1.0 - _1177;
                                float _3710 = sqrt(1.0 - ((1.0 - (_3703 * _3703)) * (1.0 - (_3702 * _3702))));
                                float _3711 = _3710 * _3710;
                                float _3712 = _3711 * _3711;
                                float _3713 = _3659 - _3132;
                                float _3714 = _3660 - _3133;
                                float _3715 = _3661 - _3134;
                                float _3719 = inversesqrt(dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715)));
                                float _3723 = dot(vec3(_1117, _1120, _1123), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4862 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3727 = dot(vec3(_1117, _1120, _1123), vec3(_3719 * _3713, _3719 * _3714, _3719 * _3715));
                                float _4873 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3734 = ((_3730 * _3730) * (_3712 + (-1.0))) + 1.0;
                                float _3735 = _3672 * _3711;
                                float _3736 = _3735 * _3735;
                                float _3742 = ((1.0 - _3736) * dot(vec3(_1117, _1120, _1123), vec3(_3659, _3660, _3661))) + _3736;
                                float _4884 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3744 = 1.0 - _3711;
                                float _3754 = (0.5 / (((_3743 * ((_3726 * _3744) + _3711)) + 9.9999999392252902907785028219223e-09) + (((_3743 * _3744) + _3711) * _3726))) * _3743;
                                float _4895 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3764 = (_3689 * _3666) * (((_3712 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3734 * _3734) * ((_3679 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3690 * _3536.y;
                                frontier_phi_83_pred_1 = _3690 * _3536.x;
                                frontier_phi_83_pred_2 = _3764 * _3548.z;
                                frontier_phi_83_pred_3 = _3764 * _3548.y;
                                frontier_phi_83_pred_4 = _3764 * _3548.x;
                                frontier_phi_83_pred_5 = _3690 * _3536.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_83_pred;
                            _3771 = frontier_phi_83_pred_1;
                            _3770 = frontier_phi_83_pred_2;
                            _3769 = frontier_phi_83_pred_3;
                            _3768 = frontier_phi_83_pred_4;
                            _3773 = frontier_phi_83_pred_5;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3480;
                        frontier_phi_77_pred_1 = _3479;
                        frontier_phi_77_pred_2 = _3478;
                        frontier_phi_77_pred_3 = _3477;
                        frontier_phi_77_pred_4 = _3476;
                        frontier_phi_77_pred_5 = _3475;
                    }
                    _3117 = frontier_phi_77_pred;
                    _3115 = frontier_phi_77_pred_1;
                    _3113 = frontier_phi_77_pred_2;
                    _3111 = frontier_phi_77_pred_3;
                    _3109 = frontier_phi_77_pred_4;
                    _3107 = frontier_phi_77_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3107;
                        _3267 = _3109;
                        _3268 = _3111;
                        _3269 = _3113;
                        _3270 = _3115;
                        _3271 = _3117;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3111;
                frontier_phi_58_59_ladder_1 = _3117;
                frontier_phi_58_59_ladder_2 = _3115;
                frontier_phi_58_59_ladder_3 = _3113;
                frontier_phi_58_59_ladder_4 = _3109;
                frontier_phi_58_59_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_58_59_ladder = _2990;
                frontier_phi_58_59_ladder_1 = _2996;
                frontier_phi_58_59_ladder_2 = _2994;
                frontier_phi_58_59_ladder_3 = _2992;
                frontier_phi_58_59_ladder_4 = _2988;
                frontier_phi_58_59_ladder_5 = _2986;
            }
            _3106 = frontier_phi_58_59_ladder_5;
            _3108 = frontier_phi_58_59_ladder_4;
            _3110 = frontier_phi_58_59_ladder;
            _3112 = frontier_phi_58_59_ladder_3;
            _3114 = frontier_phi_58_59_ladder_2;
            _3116 = frontier_phi_58_59_ladder_1;
        }
        float _3121 = isnan(1.0) ? _1161 : (isnan(_1161) ? 1.0 : min(_1161, 1.0));
        _2898 = (_3121 * _3112) + _2353;
        _2900 = (_3121 * _3114) + _2355;
        _2902 = (_3121 * _3116) + _2357;
        _2904 = ((_3106 * 0.039999999105930328369140625) * _3121) + _2683;
        _2906 = ((_3108 * 0.039999999105930328369140625) * _3121) + _2685;
        _2908 = ((_3110 * 0.039999999105930328369140625) * _3121) + _2687;
    }
    else
    {
        _2898 = _2353;
        _2900 = _2355;
        _2902 = _2357;
        _2904 = _2683;
        _2906 = _2685;
        _2908 = _2687;
    }
    float _4911 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4922 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _4933 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2925 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2898 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1161))) + ((_2904 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    float _2926 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2900 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1161))) + ((_2906 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    float _2927 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2902 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1161))) + ((_2908 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    uint _2928 = _263 + 6u;
    float _2936 = _1098 / cbSceneParam._m0[86u].x;
    float _2937 = _1099 / cbSceneParam._m0[86u].y;
    vec4 _2951 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, (log2((isnan(cbSceneParam._m0[77u].w) ? _1021 : (isnan(_1021) ? cbSceneParam._m0[77u].w : min(_1021, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2953 = _2951.x;
    float _2954 = _2951.y;
    float _2955 = _2951.z;
    float _2956 = _2951.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_1021 > cbSceneParam._m0[78u].w)
    {
        float _3011 = isnan(_1021) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1021 : min(cbSceneParam._m0[80u].w, _1021));
        float _3012 = _3011 / _1021;
        float _3023 = _3012 * _1071;
        float _3024 = _1072 * _3012;
        float _3025 = (-0.0) - _3024;
        float _3026 = _3012 * _1073;
        float _3028 = (cbSceneParam._m0[77u].w * _3025) / _3011;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3024;
        float _3036 = sqrt(((_3023 * _3023) + (_3024 * _3024)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3011)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3025 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3223 = ((abs(_3036 / _3025) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3046 * _3178) - exp2(_3046 * _3179)) * _3167))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2956);
        _3048 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2953;
        _3050 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2954;
        _3052 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2955;
        _3054 = _3234 * _2956;
    }
    else
    {
        _3048 = _2953;
        _3050 = _2954;
        _3052 = _2955;
        _3054 = _2956;
    }
    bool _3261;
    vec4 _3064;
    vec4 _3086;
    float _3088;
    float _3092;
    float _3093;
    float _3094;
    float _3095;
    bool _3105;
    for (;;)
    {
        _3064 = cbMatDynParam._m0[0u];
        float _3066 = roundEven(_3064.y);
        bool _3067 = _3066 == 3.0;
        float _3068 = log2(_3054);
        float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * _2925;
        float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * _2926;
        float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * _2927;
        float _3084 = _1087 + (-0.5);
        _3086 = cbMtdParam._m0[1u];
        _3088 = _3086.y * _3084;
        float _3091 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3092 = _3091 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
        _3093 = _3091 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
        _3094 = _3091 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
        _3095 = _3084 * 0.999000012874603271484375;
        _3105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3105)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3095) < 0.5)
            {
                _3261 = true;
                break;
            }
        }
        uint _3202 = _1136 + uint(_3064.w);
        if ((cbInstanceData._m0[_3202].w < 1.0) && ((cbInstanceData._m0[_3202].w + _3095) < 0.5))
        {
            _3261 = true;
            break;
        }
        if ((_3088 + 1.0) < _3086.x)
        {
            _3261 = true;
            break;
        }
        _3261 = false;
        break;
    }
    float _3466;
    if (_3261)
    {
        discard_state = true;
        _3466 = 0.0;
    }
    else
    {
        _3466 = cbInstanceData._m0[_2928].w;
    }
    SV_Target.x = _3092;
    SV_Target.y = _3093;
    SV_Target.z = _3094;
    SV_Target.w = _3466;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2928].w;
    discard_exit();
}


