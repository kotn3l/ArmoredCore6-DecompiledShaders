#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1234;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3821 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3832 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3843 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3854 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _441 = (_434 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _442 = (_434 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _443 = (_434 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _434) + _547;
    float _559 = ((((_526.x - _545) * _434) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _434) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3865 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _623 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_609 - _610) * cbMtdParam._m0[24u].w) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3876 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _631 = (_624 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _632 = (_624 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _633 = (_624 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    float _638 = (((_501.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    float _642 = ((_582.z - _638) * cbMtdParam._m0[19u].w) + _638;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _662 = (_655.x * 2.0) + (-1.0);
    float _663 = (_655.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3887 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _672 = (_624 * (_655.z - _642)) + _642;
    float _681 = (_559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_501.x * 2.0) + (-1.0)))) + (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _682 = (_560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_501.y * 2.0) + (-1.0)))) + (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _694 = (((_662 - _681) + (cbMtdParam._m0[21u].x * _681)) * _624) + _681;
    float _695 = (((_663 - _682) + (cbMtdParam._m0[21u].x * _682)) * _624) + _682;
    float _696 = (_624 * (sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _566)) + _566;
    float _698 = cbMtdParam._m0[22u].x + _582.w;
    float _701 = fma(_696, _234 * NORMAL.x, fma(_695, _241 * TANGENT.x, (_227 * _219) * _694));
    float _704 = fma(_696, _234 * NORMAL.y, fma(_695, _241 * TANGENT.y, (_227 * _220) * _694));
    float _707 = fma(_696, _234 * NORMAL.z, fma(_695, _241 * TANGENT.z, (_227 * _221) * _694));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _3898 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _715 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3920 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3931 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3942 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _822 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _825 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _839 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_839].z;
    float _3953 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _863 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _859.x;
    float _864 = dot(vec3(_712, _713, _714), vec3(_792, _793, _794));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _712) - _792;
    float _872 = (_867 * _713) - _793;
    float _873 = (_867 * _714) - _794;
    float _877 = abs(dot(vec3(_792, _793, _794), vec3(_712, _713, _714)));
    float _3986 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_715);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _962 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _966 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _991 = _924 + _712;
        float _992 = _928 + _713;
        float _993 = _932 + _714;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_712, _713, _714), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4034 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_712, _713, _714), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4067 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_712, _713, _714), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4100 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1277 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1281 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1304 = _924 + _712;
        float _1305 = _928 + _713;
        float _1306 = _932 + _714;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_712, _713, _714), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4163 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_712, _713, _714), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4196 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_712, _713, _714), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4229 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1234;
        _1543 = _1234;
        _1544 = _1234;
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _871 * 0.5;
    float _1611 = _872 * 0.5;
    float _1612 = _873 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1740 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1743 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1771 = frontier_phi_14_12_ladder;
        }
        float _1940;
        if (_1740 > 0.0)
        {
            _1940 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1940 = frontier_phi_23_19_ladder;
        }
        float _2235;
        if (_1743 > 0.0)
        {
            _2235 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2235 = frontier_phi_35_30_ladder;
        }
        float _2237 = isnan(_1940) ? _1771 : (isnan(_1771) ? _1940 : min(_1771, _1940));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1737) + _1726;
        float _2243 = (_2238 * _1740) + _1730;
        float _2244 = (_2238 * _1743) + _1734;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_13_35_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_13_35_ladder_2;
        _1761 = frontier_phi_13_35_ladder_1;
        _1763 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1821 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1825 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1829 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1832 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1835 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1838 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _1945;
        if (_1832 > 0.0)
        {
            _1945 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1945 = frontier_phi_25_21_ladder;
        }
        float _2262;
        if (_1835 > 0.0)
        {
            _2262 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2262 = frontier_phi_37_32_ladder;
        }
        float _2589;
        if (_1838 > 0.0)
        {
            _2589 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2589 = frontier_phi_47_44_ladder;
        }
        float _2591 = isnan(_2262) ? _1945 : (isnan(_1945) ? _2262 : min(_1945, _2262));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1832) + _1821;
        float _2597 = (_2592 * _1835) + _1825;
        float _2598 = (_2592 * _1838) + _1829;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_22_47_ladder = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1857 = frontier_phi_22_47_ladder_2;
        _1859 = frontier_phi_22_47_ladder_1;
        _1861 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1768);
        _1857 = _1841.x * cbModelParam._m0[1u].z;
        _1859 = _1841.y * cbModelParam._m0[1u].z;
        _1861 = _1841.z * cbModelParam._m0[1u].z;
    }
    float _1873 = ((((1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_892 * _879)) * _863;
    float _1874 = _1873 * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1875 = _1873 * ((cbModelParam._m0[1u].w * (_1859 - _1761)) + _1761);
    float _1876 = _1873 * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1875, cbSceneParam._m0[89u].y, _1874 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1875, cbSceneParam._m0[90u].y, _1874 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1875, cbSceneParam._m0[91u].y, _1874 * cbSceneParam._m0[91u].x));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1932 = _1919 / _1931;
    float _1933 = _1923 / _1931;
    float _1934 = _1927 / _1931;
    float _2081;
    float _2082;
    float _2083;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1961 = ((uint(_1934 > cbSceneParam._m0[59u].y) + uint(_1934 > cbSceneParam._m0[59u].x)) + uint(_1934 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1962 = _1961 + 43u;
        uint _1970 = _1961 + 44u;
        uint _1978 = _1961 + 45u;
        uint _1986 = _1961 + 46u;
        float _1997 = fma(_1931, cbSceneParam._m0[_1962].w, fma(_1927, cbSceneParam._m0[_1962].z, fma(_1923, cbSceneParam._m0[_1962].y, _1919 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1931, cbSceneParam._m0[_1970].w, fma(_1927, cbSceneParam._m0[_1970].z, fma(_1923, cbSceneParam._m0[_1970].y, _1919 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1931, cbSceneParam._m0[_1986].w, fma(_1927, cbSceneParam._m0[_1986].z, fma(_1923, cbSceneParam._m0[_1986].y, _1919 * cbSceneParam._m0[_1986].x)));
        float _2014 = cbSceneParam._m0[33u].z * _2009;
        float _2016 = cbSceneParam._m0[33u].w * _2009;
        float _2019 = fma(_1931, cbSceneParam._m0[_1978].w, fma(_1927, cbSceneParam._m0[_1978].z, fma(_1923, cbSceneParam._m0[_1978].y, _1919 * cbSceneParam._m0[_1978].x))) / _2009;
        float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
        float _4355 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1997) / _2009, (_2016 + _2001) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1997) / _2009, (_2001 - _2014) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2014) / _2009, (_2001 - _2016) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2016) / _2009, (_2014 + _2001) / _2009), _2019), 0.0)).x), vec4(0.25)));
        _2081 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
        _2082 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
        _2083 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2081 = 1.0;
        _2082 = 1.0;
        _2083 = 1.0;
    }
    float _2147;
    float _2149;
    float _2151;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2135 = fma(_1931, cbSceneParam._m0[63u].w, fma(_1927, cbSceneParam._m0[63u].z, fma(_1923, cbSceneParam._m0[63u].y, _1919 * cbSceneParam._m0[63u].x)));
        float _2136 = fma(_1931, cbSceneParam._m0[60u].w, fma(_1927, cbSceneParam._m0[60u].z, fma(_1923, cbSceneParam._m0[60u].y, _1919 * cbSceneParam._m0[60u].x))) / _2135;
        float _2137 = fma(_1931, cbSceneParam._m0[61u].w, fma(_1927, cbSceneParam._m0[61u].z, fma(_1923, cbSceneParam._m0[61u].y, _1919 * cbSceneParam._m0[61u].x))) / _2135;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2136 >= cbSceneParam._m0[64u].x) && (_2137 >= cbSceneParam._m0[64u].y)) && (_2136 <= cbSceneParam._m0[64u].z)) && (_2137 <= cbSceneParam._m0[64u].w))
        {
            float _2275 = fma(_1931, cbSceneParam._m0[62u].w, fma(_1927, cbSceneParam._m0[62u].z, fma(_1923, cbSceneParam._m0[62u].y, _1919 * cbSceneParam._m0[62u].x))) / _2135;
            float _2279 = isnan(cbSceneParam._m0[41u].w) ? _2275 : (isnan(_2275) ? cbSceneParam._m0[41u].w : max(_2275, cbSceneParam._m0[41u].w));
            float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
            float _4371 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
            float _2329 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2136, cbSceneParam._m0[33u].w + _2137), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2136, _2137 - cbSceneParam._m0[33u].z), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].z, _2137 - cbSceneParam._m0[33u].w), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2137), _2279), 0.0)).x), vec4(0.25)));
            float _2333 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
            float _2334 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
            float _2335 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_34_33_ladder_1 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
            frontier_phi_34_33_ladder_2 = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
        }
        else
        {
            frontier_phi_34_33_ladder = _2083;
            frontier_phi_34_33_ladder_1 = _2082;
            frontier_phi_34_33_ladder_2 = _2081;
        }
        _2147 = frontier_phi_34_33_ladder_2;
        _2149 = frontier_phi_34_33_ladder_1;
        _2151 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2147 = _2081;
        _2149 = _2082;
        _2151 = _2083;
    }
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _863 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_712, _713, _714));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_712, _713, _714));
    float _4407 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4418 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2147) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2149) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2151) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2234)
    {
        _2336 = _2226;
        _2338 = _2227;
        _2340 = _2228;
    }
    else
    {
        uint _2344 = _2158 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4429 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2363 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2226;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2227;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2228;
    }
    bool _2343 = _2232.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2343)
    {
        _2398 = _2336;
        _2400 = _2338;
        _2402 = _2340;
    }
    else
    {
        uint _2560 = _2158 + 7u;
        float _2576 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2577 = _2576 * _2576;
        float _4445 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2578 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2579 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2398 = (((cbLight._m0[_2560].x * 0.3183098733425140380859375) * _2578) * _2579) + _2336;
        _2400 = (((cbLight._m0[_2560].y * 0.3183098733425140380859375) * _2578) * _2579) + _2338;
        _2402 = (((cbLight._m0[_2560].z * 0.3183098733425140380859375) * _2578) * _2579) + _2340;
    }
    uint _2405 = _2158 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _715) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2158].x + _792;
    float _2421 = cbLight._m0[_2158].y + _793;
    float _2422 = cbLight._m0[_2158].z + _794;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2158].xyz));
    float _4461 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _4472 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2434 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2435 = dot(vec3(_712, _713, _714), vec3(_2427, _2428, _2429));
    float _4483 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2427, _2428, _2429));
    float _4494 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2434 * ((_2433 * _2459) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2459) + _2419) * _2433))) * _2433;
    float _4505 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2486 = _2158 + 9u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _715) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2198].x + _792;
    float _2500 = cbLight._m0[_2198].y + _793;
    float _2501 = cbLight._m0[_2198].z + _794;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2198].xyz));
    float _4516 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2513 = dot(vec3(_712, _713, _714), vec3(_2506, _2507, _2508));
    float _4527 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2506, _2507, _2508));
    float _4538 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2498 * _2498;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2535 = 1.0 - _2498;
    float _2545 = (0.5 / (((_2434 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2535) + _2498) * _2512))) * _2512;
    float _4549 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2547 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    float _2557 = (((_2534 * cbLight._m0[_2486].x) * _2547) * _2181) + ((((cbLight._m0[_2405].x * _2147) * _2458) * _2472) * _2194);
    float _2558 = (((_2534 * cbLight._m0[_2486].y) * _2547) * _2181) + ((((cbLight._m0[_2405].y * _2149) * _2458) * _2472) * _2194);
    float _2559 = (((_2534 * cbLight._m0[_2486].z) * _2547) * _2181) + ((((cbLight._m0[_2405].z * _2151) * _2458) * _2472) * _2194);
    float _2615;
    float _2617;
    float _2619;
    if (_2234)
    {
        _2615 = _2557;
        _2617 = _2558;
        _2619 = _2559;
    }
    else
    {
        uint _2621 = _2158 + 2u;
        uint _2625 = _2158 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _715) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _792;
        float _2642 = cbLight._m0[_2621].y + _793;
        float _2643 = cbLight._m0[_2621].z + _794;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2621].xyz));
        float _4560 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2655 = dot(vec3(_712, _713, _714), vec3(_2648, _2649, _2650));
        float _4571 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4582 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2676 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2677 = 1.0 - _2640;
        float _2687 = (0.5 / (((_2434 * ((_2654 * _2677) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2677) + _2640) * _2654))) * _2654;
        float _4593 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2615 = (((_2676 * cbLight._m0[_2625].x) * _2689) * _2690) + _2557;
        _2617 = (((_2676 * cbLight._m0[_2625].y) * _2689) * _2690) + _2558;
        _2619 = (((_2676 * cbLight._m0[_2625].z) * _2689) * _2690) + _2559;
    }
    float _2721;
    float _2723;
    float _2725;
    if (_2343)
    {
        _2721 = _2615;
        _2723 = _2617;
        _2725 = _2619;
    }
    else
    {
        uint _2732 = _2158 + 3u;
        uint _2736 = _2158 + 11u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _715) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _792;
        float _2753 = cbLight._m0[_2732].y + _793;
        float _2754 = cbLight._m0[_2732].z + _794;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2732].xyz));
        float _4609 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2766 = dot(vec3(_712, _713, _714), vec3(_2759, _2760, _2761));
        float _4620 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4631 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2787 = (exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2788 = 1.0 - _2751;
        float _2798 = (0.5 / (((_2434 * ((_2765 * _2788) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2788) + _2751) * _2765))) * _2765;
        float _4642 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2721 = (((_2787 * cbLight._m0[_2736].x) * _2800) * _2801) + _2615;
        _2723 = (((_2787 * cbLight._m0[_2736].y) * _2800) * _2801) + _2617;
        _2725 = (((_2787 * cbLight._m0[_2736].z) * _2800) * _2801) + _2619;
    }
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_2156.y == 0u)
    {
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.x;
        uint _2834 = uint((float(_2822.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2823))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2823)));
        float _2844 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2845 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        uint _2848 = uint(isnan(14.0) ? _2845 : (isnan(_2845) ? 14.0 : min(_2845, 14.0)));
        uvec4 _2853 = texelFetch(g_lightClusterGridBuffer, int(((_2848 << 2u) + (_2834 << 6u)) >> 2u));
        uint _2854 = _2853.x;
        uint _2855 = _2822.z;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((((1u << ((_2855 >> 4u) & 15u)) + 4294967295u) & _2854) == 0u) || ((_2855 & 240u) == 0u))
        {
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
        }
        else
        {
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3095)
                {
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3094;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3085 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _1932;
                        float _3270 = _3229.y - _1933;
                        float _3271 = _3229.z - _1934;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_819, _822, _825), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4668 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _1932;
                        float _3305 = (-0.0) - _1933;
                        float _3306 = (-0.0) - _1934;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3320 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3321 = 1.0 - _879;
                        float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                        float _3329 = _3328 * _3328;
                        float _3330 = _3329 * _3329;
                        float _3331 = _3311 + _3276;
                        float _3332 = _3312 + _3277;
                        float _3333 = _3313 + _3278;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3341 = dot(vec3(_819, _822, _825), vec3(_3311, _3312, _3313));
                        float _4684 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3345 = dot(vec3(_819, _822, _825), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                        float _4695 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                        float _3353 = _3289 * _3329;
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3279) + _3354;
                        float _4706 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3359 = 1.0 - _3329;
                        float _3369 = (0.5 / (((_3358 * ((_3344 * _3359) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3329) * _3344))) * _3358;
                        float _4717 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3380 = (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) / ((_3352 * _3352) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3138 = (_3300 * _3248.x) + _3206;
                        _3139 = (_3300 * _3248.y) + _3207;
                        _3140 = (_3300 * _3248.z) + _3208;
                        _3135 = (_3380 * _3265.x) + _3203;
                        _3136 = (_3380 * _3265.y) + _3204;
                        _3137 = (_3380 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_66_pred = _3140;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                _2945 = frontier_phi_66_pred;
                _2943 = frontier_phi_66_pred_1;
                _2941 = frontier_phi_66_pred_2;
                _2939 = frontier_phi_66_pred_3;
                _2937 = frontier_phi_66_pred_4;
                _2935 = frontier_phi_66_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2935;
                    _3080 = _2937;
                    _3081 = _2939;
                    _3082 = _2941;
                    _3083 = _2943;
                    _3084 = _2945;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
        }
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.z;
        uint _2951 = (_2949 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2951) & _2854) == 0u)
        {
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _3073 = _3072 * _1932;
            float _3074 = _3072 * _1933;
            float _3075 = _3072 * _1934;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2951 < ((_2949 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3186 = _2934;
                float _3187 = _2936;
                float _3188 = _2938;
                float _3189 = _2940;
                float _3190 = _2942;
                float _3191 = _2944;
                uint _3192 = _2951;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3202)
                    {
                        frontier_phi_72_pred = _3191;
                        frontier_phi_72_pred_1 = _3190;
                        frontier_phi_72_pred_2 = _3189;
                        frontier_phi_72_pred_3 = _3188;
                        frontier_phi_72_pred_4 = _3187;
                        frontier_phi_72_pred_5 = _3186;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3398 = _3186;
                        float _3399 = _3187;
                        float _3400 = _3188;
                        float _3401 = _3189;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        uint _3404 = _3201;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3415 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3415 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3415 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_1934, _3522.z, fma(_1933, _3522.y, _3522.x * _1932)) + _3522.w;
                            _3535 = !((fma(_1934, _3503.z, fma(_1933, _3503.y, _3503.x * _1932)) + _3503.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3430.x - _1932;
                                float _3563 = _3430.y - _1933;
                                float _3564 = _3430.z - _1934;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3431 * _3431));
                                float _4728 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3580 = sqrt(_3565) * _3446.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_819, _822, _825))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_1934, _3473.z, fma(_1933, _3473.y, _3473.x * _1932)) + _3473.w) / _3534;
                                float _3594 = (fma(_1934, _3488.z, fma(_1933, _3488.y, _3488.x * _1932)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4744 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _879;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3073;
                                float _3624 = _3570 - _3074;
                                float _3625 = _3571 - _3075;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_819, _822, _825), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4755 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3637 = dot(vec3(_819, _822, _825), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4766 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_819, _822, _825), vec3(_3569, _3570, _3571))) + _3646;
                                float _4777 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4788 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3600 * _3446.y;
                                frontier_phi_78_pred_1 = _3600 * _3446.x;
                                frontier_phi_78_pred_2 = _3674 * _3458.z;
                                frontier_phi_78_pred_3 = _3674 * _3458.y;
                                frontier_phi_78_pred_4 = _3674 * _3458.x;
                                frontier_phi_78_pred_5 = _3600 * _3446.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3682 = frontier_phi_78_pred;
                            _3681 = frontier_phi_78_pred_1;
                            _3680 = frontier_phi_78_pred_2;
                            _3679 = frontier_phi_78_pred_3;
                            _3678 = frontier_phi_78_pred_4;
                            _3683 = frontier_phi_78_pred_5;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3390;
                        frontier_phi_72_pred_1 = _3389;
                        frontier_phi_72_pred_2 = _3388;
                        frontier_phi_72_pred_3 = _3387;
                        frontier_phi_72_pred_4 = _3386;
                        frontier_phi_72_pred_5 = _3385;
                    }
                    _3058 = frontier_phi_72_pred;
                    _3056 = frontier_phi_72_pred_1;
                    _3054 = frontier_phi_72_pred_2;
                    _3052 = frontier_phi_72_pred_3;
                    _3050 = frontier_phi_72_pred_4;
                    _3048 = frontier_phi_72_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3048;
                        _3187 = _3050;
                        _3188 = _3052;
                        _3189 = _3054;
                        _3190 = _3056;
                        _3191 = _3058;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3058;
                frontier_phi_60_61_ladder_1 = _3056;
                frontier_phi_60_61_ladder_2 = _3052;
                frontier_phi_60_61_ladder_3 = _3050;
                frontier_phi_60_61_ladder_4 = _3048;
                frontier_phi_60_61_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_60_61_ladder = _2944;
                frontier_phi_60_61_ladder_1 = _2942;
                frontier_phi_60_61_ladder_2 = _2938;
                frontier_phi_60_61_ladder_3 = _2936;
                frontier_phi_60_61_ladder_4 = _2934;
                frontier_phi_60_61_ladder_5 = _2940;
            }
            _3047 = frontier_phi_60_61_ladder_4;
            _3049 = frontier_phi_60_61_ladder_3;
            _3051 = frontier_phi_60_61_ladder_2;
            _3053 = frontier_phi_60_61_ladder_5;
            _3055 = frontier_phi_60_61_ladder_1;
            _3057 = frontier_phi_60_61_ladder;
        }
        float _3062 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2867 = (_3062 * _3053) + _2398;
        _2869 = (_3062 * _3055) + _2400;
        _2871 = (_3062 * _3057) + _2402;
        _2873 = ((_3047 * 0.039999999105930328369140625) * _3062) + _2721;
        _2875 = ((_3049 * 0.039999999105930328369140625) * _3062) + _2723;
        _2877 = ((_3051 * 0.039999999105930328369140625) * _3062) + _2725;
    }
    else
    {
        _2867 = _2398;
        _2869 = _2400;
        _2871 = _2402;
        _2873 = _2721;
        _2875 = _2723;
        _2877 = _2725;
    }
    float _4804 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4815 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4826 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    uint _2897 = _268 + 6u;
    float _2905 = _800 / cbSceneParam._m0[86u].x;
    float _2906 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2959 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2960 = _2959 / _733;
        float _2971 = _2960 * _785;
        float _2972 = _786 * _2960;
        float _2973 = (-0.0) - _2972;
        float _2975 = _2960 * _787;
        float _2977 = (cbSceneParam._m0[77u].w * _2973) / _2959;
        float _2978 = _2977 + cbSceneParam._m0[79u].w;
        float _2979 = cbSceneParam._m0[79u].w - _2972;
        float _2985 = sqrt(((_2971 * _2971) + (_2972 * _2972)) + (_2975 * _2975));
        float _2988 = (1.0 - (cbSceneParam._m0[77u].w / _2959)) * _2985;
        float _2993 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2995 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2973 - _2977) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2978 > 0.0) ? exp2(_2993 * _2978) : (2.0 - exp2(_2995 * _2978))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2988;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : max(_2978, _2979));
            float _3110 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : min(_2978, _2979));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3148 = ((abs(_2985 / _2973) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2993 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2993 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2995 * _3119) - exp2(_2995 * _3120)) * _3108))) + (_2988 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2925);
        _2997 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2922;
        _2999 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3001 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3003 = _3159 * _2925;
    }
    else
    {
        _2997 = _2922;
        _2999 = _2923;
        _3001 = _2924;
        _3003 = _2925;
    }
    float _3015 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3016 = _3015 == 3.0;
    float _3017 = log2(_3003);
    float _3024 = exp2(_3017 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2867 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _863))) + ((_2873 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3025 = exp2(_3017 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2869 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _863))) + ((_2875 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3026 = exp2(_3017 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2871 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _863))) + ((_2877 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3035 = (_3015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3035 * (_3016 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.y = _3035 * (_3016 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.z = _3035 * (_3016 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.w = cbInstanceData._m0[_2897].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2897].w;
}


