#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1241;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3571 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3582 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3593 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3604 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _467 = (_322.x * cbMtdParam._m0[9u].x) * ((_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _468 = (_322.y * cbMtdParam._m0[9u].y) * ((_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _469 = (_322.z * cbMtdParam._m0[9u].z) * ((_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _473 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _467;
    float _476 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _468;
    float _479 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _469;
    float _487 = (((_467 - _473) * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) + _473) * 4.55000019073486328125;
    float _489 = (((_468 - _476) * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) + _476) * 4.55000019073486328125;
    float _491 = (((_469 - _479) * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) + _479) * 4.55000019073486328125;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _564 = ((_534.z - _555) * _457) + _555;
    float _567 = ((((_534.x - _553) * _457) + _553) * 2.0) + (-1.0);
    float _568 = ((((_534.y - _554) * _457) + _554) * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3615 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _631 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_617 - _618) * cbMtdParam._m0[24u].w) + _618) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3626 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _639 = (_632 * (cbMtdParam._m0[17u].x - _487)) + _487;
    float _640 = (_632 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _641 = (_632 * (cbMtdParam._m0[17u].z - _491)) + _491;
    float _646 = (((_509.z - _564) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _564;
    float _650 = ((_590.z - _646) * cbMtdParam._m0[19u].w) + _646;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _670 = (_663.x * 2.0) + (-1.0);
    float _671 = (_663.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3637 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _680 = (_632 * (_663.z - _650)) + _650;
    float _689 = (_567 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_509.x * 2.0) + (-1.0)))) + (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _690 = (_568 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_509.y * 2.0) + (-1.0)))) + (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _702 = (((_670 - _689) + (cbMtdParam._m0[21u].x * _689)) * _632) + _689;
    float _703 = (((_671 - _690) + (cbMtdParam._m0[21u].x * _690)) * _632) + _690;
    float _704 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) - _574)) + _574;
    float _706 = cbMtdParam._m0[22u].x + _590.w;
    float _709 = fma(_704, _232 * NORMAL.x, fma(_703, _239 * TANGENT.x, (_225 * _217) * _702));
    float _712 = fma(_704, _232 * NORMAL.y, fma(_703, _239 * TANGENT.y, (_225 * _218) * _702));
    float _715 = fma(_704, _232 * NORMAL.z, fma(_703, _239 * TANGENT.z, (_225 * _219) * _702));
    float _719 = inversesqrt(dot(vec3(_709, _712, _715), vec3(_709, _712, _715)));
    float _720 = _719 * _709;
    float _721 = _719 * _712;
    float _722 = _719 * _715;
    float _3648 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _723 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3670 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3681 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3692 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _741 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _792 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _782);
    float _793 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _782);
    float _794 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _782);
    float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
    float _799 = _792 * _798;
    float _800 = _793 * _798;
    float _801 = _794 * _798;
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_722, cbSceneParam._m0[5u].z, fma(_721, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _720));
    float _829 = fma(_722, cbSceneParam._m0[6u].z, fma(_721, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _720));
    float _832 = fma(_722, cbSceneParam._m0[7u].z, fma(_721, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _720));
    uint _846 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _852 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_846].x;
    float _853 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_846].y;
    float _854 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_846].z;
    float _3703 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _870 = ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_720, _721, _722), vec3(_799, _800, _801));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _720) - _799;
    float _879 = (_874 * _721) - _800;
    float _880 = (_874 * _722) - _801;
    float _884 = abs(dot(vec3(_799, _800, _801), vec3(_720, _721, _722)));
    float _3736 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_723);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _969 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _973 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _998 = _931 + _720;
        float _999 = _935 + _721;
        float _1000 = _939 + _722;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_720, _721, _722), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3784 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_720, _721, _722), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3817 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_720, _721, _722), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3850 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1284 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1288 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1311 = _931 + _720;
        float _1312 = _935 + _721;
        float _1313 = _939 + _722;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_720, _721, _722), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3913 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_720, _721, _722), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3946 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_720, _721, _722), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _3979 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1241;
        _1550 = _1241;
        _1551 = _1241;
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1254)) + _1254;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1255)) + _1255;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _878 * 0.5;
    float _1618 = _879 * 0.5;
    float _1619 = _880 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _723);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1748 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1751 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1779 = frontier_phi_14_12_ladder;
        }
        float _2001;
        if (_1748 > 0.0)
        {
            _2001 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2001 = frontier_phi_23_19_ladder;
        }
        float _2247;
        if (_1751 > 0.0)
        {
            _2247 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2247 = frontier_phi_35_30_ladder;
        }
        float _2249 = isnan(_2001) ? _1779 : (isnan(_1779) ? _2001 : min(_1779, _2001));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1745) + _1734;
        float _2255 = (_2250 * _1748) + _1738;
        float _2256 = (_2250 * _1751) + _1742;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_13_35_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_13_35_ladder_2;
        _1769 = frontier_phi_13_35_ladder_1;
        _1771 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1686);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _723);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1844 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1847 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2006;
        if (_1841 > 0.0)
        {
            _2006 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2006 = frontier_phi_25_21_ladder;
        }
        float _2274;
        if (_1844 > 0.0)
        {
            _2274 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2274 = frontier_phi_37_32_ladder;
        }
        float _2479;
        if (_1847 > 0.0)
        {
            _2479 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2479 = frontier_phi_46_43_ladder;
        }
        float _2481 = isnan(_2274) ? _2006 : (isnan(_2006) ? _2274 : min(_2006, _2274));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1841) + _1830;
        float _2487 = (_2482 * _1844) + _1834;
        float _2488 = (_2482 * _1847) + _1838;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2489;
        float _2492 = _2489 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2488 > _2492) || ((_2488 < _2490) || ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 < _2490) || (_2486 > _2492))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2488, cbModelParam._m0[17u].z, fma(_2487, cbModelParam._m0[17u].y, _2486 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2488, cbModelParam._m0[18u].z, fma(_2487, cbModelParam._m0[18u].y, _2486 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2488, cbModelParam._m0[19u].z, fma(_2487, cbModelParam._m0[19u].y, _2486 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_22_46_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_22_46_ladder_2;
        _1868 = frontier_phi_22_46_ladder_1;
        _1870 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1776);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1882 = ((((1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_899 * _886)) * _870;
    float _1883 = _1882 * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1884 = _1882 * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1885 = _1882 * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    vec4 _1902 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_807, _808));
    float _1904 = _1902.w;
    float _1916 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1904);
    float _1917 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1904);
    float _1918 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1904);
    uvec4 _1922 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1924 = _1922.x * 14u;
    uint _1925 = _1924 + 13u;
    float _1932 = _870 + (-1.0);
    float _1937 = (cbLight._m0[_1925].x * _1932) + 1.0;
    float _1938 = (cbLight._m0[_1925].y * _1932) + 1.0;
    float _1939 = (cbLight._m0[_1925].z * _1932) + 1.0;
    float _1940 = (cbLight._m0[_1925].w * _1932) + 1.0;
    uint _1941 = _1924 + 5u;
    float _1947 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1951 = _1924 + 4u;
    float _1960 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1964 = _1924 | 1u;
    float _1975 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_720, _721, _722));
    float _1978 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_720, _721, _722));
    float _4115 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _4126 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1983 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1985 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.3183098733425140380859375;
    float _1992 = ((cbLight._m0[_1941].x * _1947) * _1985) + (((cbLight._m0[_1951].x * _1916) * _1960) * _1983);
    float _1993 = ((_1947 * cbLight._m0[_1941].y) * _1985) + (((cbLight._m0[_1951].y * _1917) * _1960) * _1983);
    float _1994 = ((_1947 * cbLight._m0[_1941].z) * _1985) + (((cbLight._m0[_1951].z * _1918) * _1960) * _1983);
    uvec4 _1998 = floatBitsToUint(cbLight._m0[_1924 + 12u]);
    bool _2000 = _1998.x == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_2000)
    {
        _2011 = _1992;
        _2013 = _1993;
        _2015 = _1994;
    }
    else
    {
        uint _2019 = _1924 + 6u;
        float _2035 = (dot(vec3(cbLight._m0[_1924 + 2u].xyz), vec3(_720, _721, _722)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _4137 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2038 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2011 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1992;
        _2013 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1993;
        _2015 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1994;
    }
    bool _2018 = _1998.y == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2018)
    {
        _2056 = _2011;
        _2058 = _2013;
        _2060 = _2015;
    }
    else
    {
        uint _2218 = _1924 + 7u;
        float _2234 = (dot(vec3(cbLight._m0[_1924 + 3u].xyz), vec3(_720, _721, _722)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4153 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2237 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2056 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2011;
        _2058 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2013;
        _2060 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2015;
    }
    uint _2063 = _1924 + 8u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _723) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1924].x + _799;
    float _2079 = cbLight._m0[_1924].y + _800;
    float _2080 = cbLight._m0[_1924].z + _801;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_1924].xyz));
    float _4169 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2092 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2093 = dot(vec3(_720, _721, _722), vec3(_2085, _2086, _2087));
    float _4191 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2085, _2086, _2087));
    float _4202 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2077 * _2077;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2117 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2092 * ((_2091 * _2117) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2117) + _2077) * _2091))) * _2091;
    float _4213 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    uint _2144 = _1924 + 9u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _723) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_1964].x + _799;
    float _2158 = cbLight._m0[_1964].y + _800;
    float _2159 = cbLight._m0[_1964].z + _801;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_1964].xyz));
    float _4224 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2171 = dot(vec3(_720, _721, _722), vec3(_2164, _2165, _2166));
    float _4235 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2164, _2165, _2166));
    float _4246 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2156 * _2156;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2193 = 1.0 - _2156;
    float _2203 = (0.5 / (((_2092 * ((_2170 * _2193) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2193) + _2156) * _2170))) * _2170;
    float _4257 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    float _2215 = (((_2192 * cbLight._m0[_2144].x) * _2205) * _1947) + ((((cbLight._m0[_2063].x * _1916) * _2116) * _2130) * _1960);
    float _2216 = (((_2192 * cbLight._m0[_2144].y) * _2205) * _1947) + ((((cbLight._m0[_2063].y * _1917) * _2116) * _2130) * _1960);
    float _2217 = (((_2192 * cbLight._m0[_2144].z) * _2205) * _1947) + ((((cbLight._m0[_2063].z * _1918) * _2116) * _2130) * _1960);
    float _2279;
    float _2281;
    float _2283;
    if (_2000)
    {
        _2279 = _2215;
        _2281 = _2216;
        _2283 = _2217;
    }
    else
    {
        uint _2285 = _1924 + 2u;
        uint _2289 = _1924 + 10u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _723) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _799;
        float _2306 = cbLight._m0[_2285].y + _800;
        float _2307 = cbLight._m0[_2285].z + _801;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2285].xyz));
        float _4268 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2319 = dot(vec3(_720, _721, _722), vec3(_2312, _2313, _2314));
        float _4279 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4290 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2340 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2341 = 1.0 - _2304;
        float _2351 = (0.5 / (((_2092 * ((_2318 * _2341) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2341) + _2304) * _2318))) * _2318;
        float _4301 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2279 = (((_2340 * cbLight._m0[_2289].x) * _2353) * _2354) + _2215;
        _2281 = (((_2340 * cbLight._m0[_2289].y) * _2353) * _2354) + _2216;
        _2283 = (((_2340 * cbLight._m0[_2289].z) * _2353) * _2354) + _2217;
    }
    float _2389;
    float _2391;
    float _2393;
    if (_2018)
    {
        _2389 = _2279;
        _2391 = _2281;
        _2393 = _2283;
    }
    else
    {
        uint _2400 = _1924 + 3u;
        uint _2404 = _1924 + 11u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _723) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _799;
        float _2421 = cbLight._m0[_2400].y + _800;
        float _2422 = cbLight._m0[_2400].z + _801;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2400].xyz));
        float _4317 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2434 = dot(vec3(_720, _721, _722), vec3(_2427, _2428, _2429));
        float _4328 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4339 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2456 = 1.0 - _2419;
        float _2466 = (0.5 / (((_2092 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2456) + _2419) * _2433))) * _2433;
        float _4350 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2389 = (((_2455 * cbLight._m0[_2404].x) * _2468) * _2469) + _2279;
        _2391 = (((_2455 * cbLight._m0[_2404].y) * _2468) * _2469) + _2281;
        _2393 = (((_2455 * cbLight._m0[_2404].z) * _2468) * _2469) + _2283;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1922.y == 0u)
    {
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2544;
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2544;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2544;
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.x;
        uint _2571 = uint((float(_2559.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2560))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2560)));
        float _2581 = (log2(_2547 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2582 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        uint _2585 = uint(isnan(14.0) ? _2582 : (isnan(_2582) ? 14.0 : min(_2582, 14.0)));
        uvec4 _2590 = texelFetch(g_lightClusterGridBuffer, int(((_2585 << 2u) + (_2571 << 6u)) >> 2u));
        uint _2591 = _2590.x;
        uint _2592 = _2559.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2592 >> 4u) & 15u)) + 4294967295u) & _2591) == 0u) || ((_2592 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            uint _2843 = 0u;
            uint _2852;
            bool _2853;
            for (;;)
            {
                _2852 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                _2853 = _2852 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2853)
                {
                    frontier_phi_61_pred = _2837;
                    frontier_phi_61_pred_1 = _2842;
                    frontier_phi_61_pred_2 = _2841;
                    frontier_phi_61_pred_3 = _2840;
                    frontier_phi_61_pred_4 = _2839;
                    frontier_phi_61_pred_5 = _2838;
                }
                else
                {
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    uint _2967;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2852;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    for (;;)
                    {
                        uint _2971 = uint(findLSB(_2967)) + (_2843 << 5u);
                        uint _2968 = (_2967 + 4294967295u) & _2967;
                        uint _2973 = _2971 * 48u;
                        vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2993 = (_2971 * 48u) + 4u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3012 = (_2971 * 48u) + 8u;
                        vec3 _3023 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x));
                        float _3027 = _2987.x - _2545;
                        float _3028 = _2987.y - _2546;
                        float _3029 = _2987.z - _2547;
                        float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                        float _3033 = inversesqrt(_3030);
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3037 = dot(vec3(_826, _829, _832), vec3(_3034, _3035, _3036));
                        float _3042 = 1.0 - (_3030 * _2987.w);
                        float _4376 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3044 = sqrt(_3030) * _3006.w;
                        float _3047 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _3037) + _3048;
                        float _3054 = _3044 * _3044;
                        float _3058 = ((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3043) / ((_3054 * 0.699999988079071044921875) + 1.0);
                        float _3062 = (-0.0) - _2545;
                        float _3063 = (-0.0) - _2546;
                        float _3064 = (-0.0) - _2547;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3079 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _886;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3069 + _3034;
                        float _3091 = _3070 + _3035;
                        float _3092 = _3071 + _3036;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_826, _829, _832), vec3(_3069, _3070, _3071));
                        float _4392 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3104 = dot(vec3(_826, _829, _832), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4403 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3047 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3037) + _3113;
                        float _4414 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4425 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3111 * _3111) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125))) * _3043;
                        _2896 = (_3058 * _3006.x) + _2964;
                        _2897 = (_3058 * _3006.y) + _2965;
                        _2898 = (_3058 * _3006.z) + _2966;
                        _2893 = (_3139 * _3023.x) + _2961;
                        _2894 = (_3139 * _3023.y) + _2962;
                        _2895 = (_3139 * _3023.z) + _2963;
                        if (_2968 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2968;
                        }
                    }
                    frontier_phi_61_pred = _2893;
                    frontier_phi_61_pred_1 = _2898;
                    frontier_phi_61_pred_2 = _2897;
                    frontier_phi_61_pred_3 = _2896;
                    frontier_phi_61_pred_4 = _2895;
                    frontier_phi_61_pred_5 = _2894;
                }
                _2693 = frontier_phi_61_pred;
                _2703 = frontier_phi_61_pred_1;
                _2701 = frontier_phi_61_pred_2;
                _2699 = frontier_phi_61_pred_3;
                _2697 = frontier_phi_61_pred_4;
                _2695 = frontier_phi_61_pred_5;
                uint _2844 = _2843 + 1u;
                if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2837 = _2693;
                    _2838 = _2695;
                    _2839 = _2697;
                    _2840 = _2699;
                    _2841 = _2701;
                    _2842 = _2703;
                    _2843 = _2844;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((4294967295u << _2709) & _2591) == 0u)
        {
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
            _2811 = _2698;
            _2813 = _2700;
            _2815 = _2702;
        }
        else
        {
            float _2830 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
            float _2831 = _2830 * _2545;
            float _2832 = _2830 * _2546;
            float _2833 = _2830 * _2547;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2944 = _2692;
                float _2945 = _2694;
                float _2946 = _2696;
                float _2947 = _2698;
                float _2948 = _2700;
                float _2949 = _2702;
                uint _2950 = _2709;
                uint _2959;
                bool _2960;
                for (;;)
                {
                    _2959 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                    _2960 = _2959 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2960)
                    {
                        frontier_phi_67_pred = _2947;
                        frontier_phi_67_pred_1 = _2948;
                        frontier_phi_67_pred_2 = _2949;
                        frontier_phi_67_pred_3 = _2946;
                        frontier_phi_67_pred_4 = _2945;
                        frontier_phi_67_pred_5 = _2944;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        uint _3163 = _2959;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3232;
                        vec4 _3247;
                        float _3293;
                        bool _3294;
                        for (;;)
                        {
                            uint _3174 = ((_2950 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3219 = (_3174 * 40u) + 16u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3174 * 40u) + 20u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3174 * 40u) + 24u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3268 = (_3174 * 40u) + 28u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3293 = fma(_2547, _3281.z, fma(_2546, _3281.y, _3281.x * _2545)) + _3281.w;
                            _3294 = !((fma(_2547, _3262.z, fma(_2546, _3262.y, _3262.x * _2545)) + _3262.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3294)
                            {
                                float _3321 = _3189.x - _2545;
                                float _3322 = _3189.y - _2546;
                                float _3323 = _3189.z - _2547;
                                float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                                float _3327 = inversesqrt(_3324);
                                float _3328 = _3327 * _3321;
                                float _3329 = _3327 * _3322;
                                float _3330 = _3327 * _3323;
                                float _3334 = 1.0 - (_3324 / (_3190 * _3190));
                                float _4436 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3339 = sqrt(_3324) * _3205.w;
                                float _3341 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                                float _3342 = _3341 * _3341;
                                float _3345 = ((1.0 - _3342) * dot(vec3(_3328, _3329, _3330), vec3(_826, _829, _832))) + _3342;
                                float _3348 = _3339 * _3339;
                                float _3352 = (fma(_2547, _3232.z, fma(_2546, _3232.y, _3232.x * _2545)) + _3232.w) / _3293;
                                float _3353 = (fma(_2547, _3247.z, fma(_2546, _3247.y, _3247.x * _2545)) + _3247.w) / _3293;
                                float _3357 = 1.0 - dot(vec2(_3352, _3353), vec2(_3352, _3353));
                                float _4452 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3359 = _3358 * (((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3335) / ((_3348 * 0.699999988079071044921875) + 1.0));
                                float _3371 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                                float _3372 = 1.0 - _886;
                                float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                                float _3380 = _3379 * _3379;
                                float _3381 = _3380 * _3380;
                                float _3382 = _3328 - _2831;
                                float _3383 = _3329 - _2832;
                                float _3384 = _3330 - _2833;
                                float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                                float _3392 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833));
                                float _4463 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3396 = dot(vec3(_826, _829, _832), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                                float _4474 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                                float _3404 = _3341 * _3380;
                                float _3405 = _3404 * _3404;
                                float _3411 = ((1.0 - _3405) * dot(vec3(_826, _829, _832), vec3(_3328, _3329, _3330))) + _3405;
                                float _4485 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3413 = 1.0 - _3380;
                                float _3423 = (0.5 / (((_3412 * ((_3395 * _3413) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3380) * _3395))) * _3412;
                                float _4496 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3433 = (_3358 * _3335) * (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3403 * _3403) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3433 * _3217.x;
                                frontier_phi_73_pred_1 = _3433 * _3217.y;
                                frontier_phi_73_pred_2 = _3359 * _3205.z;
                                frontier_phi_73_pred_3 = _3359 * _3205.y;
                                frontier_phi_73_pred_4 = _3359 * _3205.x;
                                frontier_phi_73_pred_5 = _3433 * _3217.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3437 = frontier_phi_73_pred;
                            _3438 = frontier_phi_73_pred_1;
                            _3442 = frontier_phi_73_pred_2;
                            _3441 = frontier_phi_73_pred_3;
                            _3440 = frontier_phi_73_pred_4;
                            _3439 = frontier_phi_73_pred_5;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3144 = _3437 + _3157;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3147;
                        frontier_phi_67_pred_1 = _3148;
                        frontier_phi_67_pred_2 = _3149;
                        frontier_phi_67_pred_3 = _3146;
                        frontier_phi_67_pred_4 = _3145;
                        frontier_phi_67_pred_5 = _3144;
                    }
                    _2812 = frontier_phi_67_pred;
                    _2814 = frontier_phi_67_pred_1;
                    _2816 = frontier_phi_67_pred_2;
                    _2810 = frontier_phi_67_pred_3;
                    _2808 = frontier_phi_67_pred_4;
                    _2806 = frontier_phi_67_pred_5;
                    uint _2951 = _2950 + 1u;
                    if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2944 = _2806;
                        _2945 = _2808;
                        _2946 = _2810;
                        _2947 = _2812;
                        _2948 = _2814;
                        _2949 = _2816;
                        _2950 = _2951;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2814;
                frontier_phi_55_56_ladder_1 = _2816;
                frontier_phi_55_56_ladder_2 = _2812;
                frontier_phi_55_56_ladder_3 = _2810;
                frontier_phi_55_56_ladder_4 = _2808;
                frontier_phi_55_56_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_55_56_ladder = _2700;
                frontier_phi_55_56_ladder_1 = _2702;
                frontier_phi_55_56_ladder_2 = _2698;
                frontier_phi_55_56_ladder_3 = _2696;
                frontier_phi_55_56_ladder_4 = _2694;
                frontier_phi_55_56_ladder_5 = _2692;
            }
            _2805 = frontier_phi_55_56_ladder_5;
            _2807 = frontier_phi_55_56_ladder_4;
            _2809 = frontier_phi_55_56_ladder_3;
            _2811 = frontier_phi_55_56_ladder_2;
            _2813 = frontier_phi_55_56_ladder;
            _2815 = frontier_phi_55_56_ladder_1;
        }
        float _2820 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2604 = (_2820 * _2811) + _2056;
        _2606 = (_2820 * _2813) + _2058;
        _2608 = (_2820 * _2815) + _2060;
        _2610 = ((_2805 * 0.039999999105930328369140625) * _2820) + _2389;
        _2612 = ((_2807 * 0.039999999105930328369140625) * _2820) + _2391;
        _2614 = ((_2809 * 0.039999999105930328369140625) * _2820) + _2393;
    }
    else
    {
        _2604 = _2056;
        _2606 = _2058;
        _2608 = _2060;
        _2610 = _2389;
        _2612 = _2391;
        _2614 = _2393;
    }
    float _4512 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4523 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4534 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    uint _2634 = _266 + 6u;
    float _2642 = _807 / cbSceneParam._m0[86u].x;
    float _2643 = _808 / cbSceneParam._m0[86u].y;
    vec4 _2657 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, (log2((isnan(cbSceneParam._m0[77u].w) ? _741 : (isnan(_741) ? cbSceneParam._m0[77u].w : min(_741, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2659 = _2657.x;
    float _2660 = _2657.y;
    float _2661 = _2657.z;
    float _2662 = _2657.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_741 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_741) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _741 : min(cbSceneParam._m0[80u].w, _741));
        float _2718 = _2717 / _741;
        float _2729 = _2718 * _792;
        float _2730 = _793 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2733 = _2718 * _794;
        float _2735 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2730;
        float _2743 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2906;
        if (abs((_2731 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2906 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2866 = 1.0 / cbSceneParam._m0[80u].x;
            float _2867 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2868 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            _2906 = ((abs(_2743 / _2731) * cbSceneParam._m0[80u].y) * ((((_2877 - _2878) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))))) * _2866)) - ((exp2(_2753 * _2877) - exp2(_2753 * _2878)) * _2866))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2908 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, 1.0), 0.0);
        float _2917 = exp2((_2906 * (-1.44269502162933349609375)) * (1.0 - _2908.w));
        float _2918 = log2(_2917);
        float _2934 = log2(_2662);
        _2755 = (exp2(_2934 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].x)) * _2908.x) / cbSceneParam._m0[78u].x)) + _2659;
        _2757 = (exp2(_2934 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].y)) * _2908.y) / cbSceneParam._m0[78u].y)) + _2660;
        _2759 = (exp2(_2934 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].z)) * _2908.z) / cbSceneParam._m0[78u].z)) + _2661;
        _2761 = _2917 * _2662;
    }
    else
    {
        _2755 = _2659;
        _2757 = _2660;
        _2759 = _2661;
        _2761 = _2662;
    }
    float _2773 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2774 = _2773 == 3.0;
    float _2775 = log2(_2761);
    float _2782 = exp2(_2775 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2604 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _870))) + ((_2610 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _2783 = exp2(_2775 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2606 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _870))) + ((_2612 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _2784 = exp2(_2775 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2608 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _870))) + ((_2614 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _2793 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2793 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.y = _2793 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.z = _2793 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.w = cbInstanceData._m0[_2634].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2634].w;
}


