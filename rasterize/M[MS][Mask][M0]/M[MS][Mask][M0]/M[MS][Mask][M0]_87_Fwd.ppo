#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1389;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3692 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3703 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _432) + _582;
    float _592 = ((_563.y - _583) * _432) + _583;
    float _593 = ((_563.z - _584) * _432) + _584;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _505) + _593;
    float _621 = ((((_605.x - _591) * _505) + _591) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _592) * _505) + _592) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _3714 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _677 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _680 = ((isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : min(_677, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _689 = (_680 - ((((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _680))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3735 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _697 = (_690 * ((_543.x * cbMtdParam._m0[18u].x) - _518)) + _518;
    float _698 = (_690 * ((_543.y * cbMtdParam._m0[18u].y) - _521)) + _521;
    float _699 = (_690 * ((_543.z * cbMtdParam._m0[18u].z) - _524)) + _524;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _713 = _711.x;
    float _714 = 1.0 - _713;
    float _741 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_713 - _714) * cbMtdParam._m0[24u].y) + _714) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3746 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _742 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _750 = ((((cbMtdParam._m0[10u].x - _697) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _742) + _697;
    float _751 = ((((cbMtdParam._m0[10u].y - _698) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _742) + _698;
    float _752 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _699)) * _742) + _699;
    float _756 = (cbMtdParam._m0[19u].w * (_643.z - _618)) + _618;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _3757 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = (_690 * (_770.z - _756)) + _756;
    float _790 = ((cbMtdParam._m0[23u].y - _787) * _742) + _787;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3768 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _825 = (((_643.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _621;
    float _826 = (((_643.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _838 = (((_777 - _825) + (cbMtdParam._m0[21u].x * _825)) * _690) + _825;
    float _839 = (((_778 - _826) + (cbMtdParam._m0[21u].x * _826)) * _690) + _826;
    float _840 = (_690 * (sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _629)) + _629;
    float _851 = (((_815 - _838) + (_838 * cbMtdParam._m0[22u].z)) * _742) + _838;
    float _852 = (((_816 - _839) + (_839 * cbMtdParam._m0[22u].z)) * _742) + _839;
    float _853 = ((sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) - _840) * _742) + _840;
    float _855 = cbMtdParam._m0[22u].x + _643.w;
    float _858 = fma(_853, _242 * NORMAL.x, fma(_852, _249 * TANGENT.x, (_235 * _227) * _851));
    float _861 = fma(_853, _242 * NORMAL.y, fma(_852, _249 * TANGENT.y, (_235 * _228) * _851));
    float _864 = fma(_853, _242 * NORMAL.z, fma(_852, _249 * TANGENT.z, (_235 * _229) * _851));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _3779 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _872 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _3801 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3812 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _3823 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _890 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _977 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _980 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    uint _994 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1000 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_994].x;
    float _1001 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_994].y;
    float _1002 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_994].z;
    float _3834 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    vec4 _1014 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1018 = ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * TEXCOORD_5.w) * _1014.x;
    float _1019 = dot(vec3(_869, _870, _871), vec3(_947, _948, _949));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _869) - _947;
    float _1027 = (_1022 * _870) - _948;
    float _1028 = (_1022 * _871) - _949;
    float _1032 = abs(dot(vec3(_947, _948, _949), vec3(_869, _870, _871)));
    float _3867 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_872);
    float _1047 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1388;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1117 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1121 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1146 = _1079 + _869;
        float _1147 = _1083 + _870;
        float _1148 = _1087 + _871;
        float _1158 = fma(_1148, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146)) - _1113;
        float _1159 = fma(_1148, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146)) - _1117;
        float _1160 = fma(_1148, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146)) - _1121;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1216 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1182.x + (-0.5));
        float _1218 = _1216 * (_1182.y + (-0.5));
        float _1219 = _1216 * (_1182.z + (-0.5));
        float _1226 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1189.x + (-0.5));
        float _1228 = _1226 * (_1189.y + (-0.5));
        float _1229 = _1226 * (_1189.z + (-0.5));
        float _1236 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1196.x + (-0.5));
        float _1238 = _1236 * (_1196.y + (-0.5));
        float _1239 = _1236 * (_1196.z + (-0.5));
        float _1246 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1203.x + (-0.5));
        float _1248 = _1246 * (_1203.y + (-0.5));
        float _1249 = _1246 * (_1203.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1270 = (dot(vec3(_869, _870, _871), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1280 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3915 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1282 + 1.0))) + _1287) * _1250;
        float _1297 = _1218 * 0.5;
        float _1298 = _1228 * 0.5;
        float _1299 = _1238 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_869, _870, _871), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3948 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1324 + 1.0))) + _1329) * _1251;
        float _1339 = _1219 * 0.5;
        float _1340 = _1229 * 0.5;
        float _1341 = _1239 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_869, _870, _871), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3981 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1366 + 1.0))) + _1371) * _1252;
        _1388 = _1219;
        _1390 = _1218;
        _1391 = _1217;
        _1392 = _1229;
        _1393 = _1228;
        _1394 = _1227;
        _1395 = _1239;
        _1396 = _1238;
        _1397 = _1237;
        _1398 = _1252;
        _1399 = _1251;
        _1400 = _1250;
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1389;
        _1390 = _1389;
        _1391 = _1389;
        _1392 = _1389;
        _1393 = _1389;
        _1394 = _1389;
        _1395 = _1389;
        _1396 = _1389;
        _1397 = _1389;
        _1398 = _1389;
        _1399 = _1389;
        _1400 = _1389;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1427 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1431 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1435 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1458 = _1079 + _869;
        float _1459 = _1083 + _870;
        float _1460 = _1087 + _871;
        float _1470 = fma(_1460, cbModelParam._m0[30u].z, fma(_1459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1458)) - _1427;
        float _1471 = fma(_1460, cbModelParam._m0[31u].z, fma(_1459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1458)) - _1431;
        float _1472 = fma(_1460, cbModelParam._m0[32u].z, fma(_1459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1458)) - _1435;
        float _1476 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
        float _1489 = ((_1476 * _1470) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1427 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1476 * _1471) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1431 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1476 * _1472) / cbModelParam._m0[35u].z) + ((((((_1435 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        float _1526 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1493.x + (-0.5));
        float _1528 = _1526 * (_1493.y + (-0.5));
        float _1529 = _1526 * (_1493.z + (-0.5));
        float _1536 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1500.x + (-0.5));
        float _1538 = _1536 * (_1500.y + (-0.5));
        float _1539 = _1536 * (_1500.z + (-0.5));
        float _1546 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1507.x + (-0.5));
        float _1548 = _1546 * (_1507.y + (-0.5));
        float _1549 = _1546 * (_1507.z + (-0.5));
        float _1556 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1514.x + (-0.5));
        float _1558 = _1556 * (_1514.y + (-0.5));
        float _1559 = _1556 * (_1514.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_869, _870, _871), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4044 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1590 + 1.0))) + _1595) * _1560;
        float _1605 = _1528 * 0.5;
        float _1606 = _1538 * 0.5;
        float _1607 = _1548 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_869, _870, _871), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4077 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1632 + 1.0))) + _1637) * _1561;
        float _1647 = _1529 * 0.5;
        float _1648 = _1539 * 0.5;
        float _1649 = _1549 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_869, _870, _871), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4110 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1674 + 1.0))) + _1679) * _1562;
        _1696 = _1529;
        _1697 = _1528;
        _1698 = _1527;
        _1699 = _1539;
        _1700 = _1538;
        _1701 = _1537;
        _1702 = _1549;
        _1703 = _1548;
        _1704 = _1547;
        _1705 = _1562;
        _1706 = _1561;
        _1707 = _1560;
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1389;
        _1697 = _1389;
        _1698 = _1389;
        _1699 = _1389;
        _1700 = _1389;
        _1701 = _1389;
        _1702 = _1389;
        _1703 = _1389;
        _1704 = _1389;
        _1705 = _1389;
        _1706 = _1389;
        _1707 = _1389;
        _1708 = 0.0;
        _1709 = 0.0;
        _1710 = 0.0;
    }
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1401)) + _1401;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1402)) + _1402;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1403)) + _1403;
    float _1743 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1720));
    float _1764 = _1026 * 0.5;
    float _1765 = _1027 * 0.5;
    float _1766 = _1028 * 0.5;
    float _1767 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1770 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1773 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1807;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1780 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1388, _1392, _1395, _1398));
        float _1784 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1788 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1795 = dot(vec4(cbModelParam._m0[39u]), vec4(_1764, _1765, _1766, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1818;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1809 = dot(vec4(cbModelParam._m0[40u]), vec4(_1764, _1765, _1766, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1822 = (_1818 * cbModelParam._m0[1u].x) + (_1807 * (1.0 - cbModelParam._m0[1u].x));
    float _1832 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _872);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1832 : min(cbModelParam._m0[25u].z, _1832));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1894 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1897 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1925 = frontier_phi_14_12_ladder;
        }
        float _2125;
        if (_1894 > 0.0)
        {
            _2125 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2125 = frontier_phi_23_19_ladder;
        }
        float _2368;
        if (_1897 > 0.0)
        {
            _2368 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2368 = frontier_phi_35_30_ladder;
        }
        float _2370 = isnan(_2125) ? _1925 : (isnan(_1925) ? _2125 : min(_1925, _2125));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1891) + _1880;
        float _2376 = (_2371 * _1894) + _1884;
        float _2377 = (_2371 * _1897) + _1888;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2378;
        float _2382 = _2378 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 > _2382) || ((_2376 < _2380) || ((_2375 < _2380) || (_2375 > _2382))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2377, cbModelParam._m0[9u].z, fma(_2376, cbModelParam._m0[9u].y, _2375 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2377, cbModelParam._m0[10u].z, fma(_2376, cbModelParam._m0[10u].y, _2375 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2377, cbModelParam._m0[11u].z, fma(_2376, cbModelParam._m0[11u].y, _2375 * cbModelParam._m0[11u].x))), _1833);
            frontier_phi_13_35_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_13_35_ladder_2;
        _1915 = frontier_phi_13_35_ladder_1;
        _1917 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1833);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _872);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _1989 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _1992 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2130;
        if (_1986 > 0.0)
        {
            _2130 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2130 = frontier_phi_25_21_ladder;
        }
        float _2395;
        if (_1989 > 0.0)
        {
            _2395 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2395 = frontier_phi_37_32_ladder;
        }
        float _2600;
        if (_1992 > 0.0)
        {
            _2600 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2600 = frontier_phi_46_43_ladder;
        }
        float _2602 = isnan(_2395) ? _2130 : (isnan(_2130) ? _2395 : min(_2130, _2395));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1986) + _1975;
        float _2608 = (_2603 * _1989) + _1979;
        float _2609 = (_2603 * _1992) + _1983;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_22_46_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_22_46_ladder_2;
        _2013 = frontier_phi_22_46_ladder_1;
        _2015 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1922);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2027 = ((((1.0 - _1047) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1047 * _1034)) * _1018;
    float _2028 = _2027 * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2029 = _2027 * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2030 = _2027 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _1018 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2084 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2088 = _2051 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_869, _870, _871));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_869, _870, _871));
    float _4246 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4257 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2068].x * _2074) * _2109) + ((cbLight._m0[_2078].x * _2084) * _2107);
    float _2117 = ((_2074 * cbLight._m0[_2068].y) * _2109) + ((_2084 * cbLight._m0[_2078].y) * _2107);
    float _2118 = ((_2074 * cbLight._m0[_2068].z) * _2109) + ((_2084 * cbLight._m0[_2078].z) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2051 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4268 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2162 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2339 = _2051 + 7u;
        float _2355 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4284 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2358 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2180 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2135;
        _2182 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2137;
        _2184 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2139;
    }
    uint _2187 = _2051 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _872) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2051].x + _947;
    float _2203 = cbLight._m0[_2051].y + _948;
    float _2204 = cbLight._m0[_2051].z + _949;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2051].xyz));
    float _4300 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _4311 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2216 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2217 = dot(vec3(_869, _870, _871), vec3(_2209, _2210, _2211));
    float _4322 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2209, _2210, _2211));
    float _4333 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2201;
    float _2252 = (0.5 / (((_2216 * ((_2215 * _2241) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2241) + _2201) * _2215))) * _2215;
    float _4344 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2265 = _2051 + 9u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _872) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2088].x + _947;
    float _2279 = cbLight._m0[_2088].y + _948;
    float _2280 = cbLight._m0[_2088].z + _949;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2088].xyz));
    float _4355 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2292 = dot(vec3(_869, _870, _871), vec3(_2285, _2286, _2287));
    float _4366 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2285, _2286, _2287));
    float _4377 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2277 * _2277;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2277;
    float _2324 = (0.5 / (((_2216 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2314) + _2277) * _2291))) * _2291;
    float _4388 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    float _2336 = (((_2313 * cbLight._m0[_2265].x) * _2326) * _2074) + (((_2240 * cbLight._m0[_2187].x) * _2254) * _2084);
    float _2337 = (((_2313 * cbLight._m0[_2265].y) * _2326) * _2074) + (((_2240 * cbLight._m0[_2187].y) * _2254) * _2084);
    float _2338 = (((_2313 * cbLight._m0[_2265].z) * _2326) * _2074) + (((_2240 * cbLight._m0[_2187].z) * _2254) * _2084);
    float _2400;
    float _2402;
    float _2404;
    if (_2124)
    {
        _2400 = _2336;
        _2402 = _2337;
        _2404 = _2338;
    }
    else
    {
        uint _2406 = _2051 + 2u;
        uint _2410 = _2051 + 10u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _872) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _947;
        float _2427 = cbLight._m0[_2406].y + _948;
        float _2428 = cbLight._m0[_2406].z + _949;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2406].xyz));
        float _4399 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2440 = dot(vec3(_869, _870, _871), vec3(_2433, _2434, _2435));
        float _4410 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4421 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2216 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2462) + _2425) * _2439))) * _2439;
        float _4432 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2400 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2336;
        _2402 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2337;
        _2404 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2338;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2142)
    {
        _2510 = _2400;
        _2512 = _2402;
        _2514 = _2404;
    }
    else
    {
        uint _2521 = _2051 + 3u;
        uint _2525 = _2051 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _872) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _947;
        float _2542 = cbLight._m0[_2521].y + _948;
        float _2543 = cbLight._m0[_2521].z + _949;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2521].xyz));
        float _4448 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2555 = dot(vec3(_869, _870, _871), vec3(_2548, _2549, _2550));
        float _4459 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4470 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2216 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2577) + _2540) * _2554))) * _2554;
        float _4481 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2510 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2400;
        _2512 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2402;
        _2514 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2404;
    }
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_2049.y == 0u)
    {
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2665;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2665;
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2665;
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.x;
        uint _2692 = uint((float(_2680.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _2681))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _2681)));
        float _2702 = (log2(_2668 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2703 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        uint _2706 = uint(isnan(14.0) ? _2703 : (isnan(_2703) ? 14.0 : min(_2703, 14.0)));
        uvec4 _2711 = texelFetch(g_lightClusterGridBuffer, int(((_2706 << 2u) + (_2692 << 6u)) >> 2u));
        uint _2712 = _2711.x;
        uint _2713 = _2680.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2713 >> 4u) & 15u)) + 4294967295u) & _2712) == 0u) || ((_2713 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2974)
                {
                    frontier_phi_61_pred = _2958;
                    frontier_phi_61_pred_1 = _2963;
                    frontier_phi_61_pred_2 = _2962;
                    frontier_phi_61_pred_3 = _2961;
                    frontier_phi_61_pred_4 = _2960;
                    frontier_phi_61_pred_5 = _2959;
                }
                else
                {
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    uint _3088;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2973;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3092 = uint(findLSB(_3088)) + (_2964 << 5u);
                        uint _3089 = (_3088 + 4294967295u) & _3088;
                        uint _3094 = _3092 * 48u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3114 = (_3092 * 48u) + 4u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3133 = (_3092 * 48u) + 8u;
                        vec3 _3144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x));
                        float _3148 = _3108.x - _2666;
                        float _3149 = _3108.y - _2667;
                        float _3150 = _3108.z - _2668;
                        float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                        float _3154 = inversesqrt(_3151);
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3158 = dot(vec3(_974, _977, _980), vec3(_3155, _3156, _3157));
                        float _3163 = 1.0 - (_3151 * _3108.w);
                        float _4507 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3165 = sqrt(_3151) * _3127.w;
                        float _3168 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3158) + _3169;
                        float _3175 = _3165 * _3165;
                        float _3179 = ((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3164) / ((_3175 * 0.699999988079071044921875) + 1.0);
                        float _3183 = (-0.0) - _2666;
                        float _3184 = (-0.0) - _2667;
                        float _3185 = (-0.0) - _2668;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3200 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                        float _3201 = 1.0 - _1034;
                        float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                        float _3209 = _3208 * _3208;
                        float _3210 = _3209 * _3209;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3221 = dot(vec3(_974, _977, _980), vec3(_3190, _3191, _3192));
                        float _4523 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3225 = dot(vec3(_974, _977, _980), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                        float _4534 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                        float _3233 = _3168 * _3209;
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3158) + _3234;
                        float _4545 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3239 = 1.0 - _3209;
                        float _3249 = (0.5 / (((_3238 * ((_3224 * _3239) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3209) * _3224))) * _3238;
                        float _4556 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3260 = (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3232 * _3232) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125))) * _3164;
                        _3017 = (_3179 * _3127.x) + _3085;
                        _3018 = (_3179 * _3127.y) + _3086;
                        _3019 = (_3179 * _3127.z) + _3087;
                        _3014 = (_3260 * _3144.x) + _3082;
                        _3015 = (_3260 * _3144.y) + _3083;
                        _3016 = (_3260 * _3144.z) + _3084;
                        if (_3089 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3089;
                        }
                    }
                    frontier_phi_61_pred = _3014;
                    frontier_phi_61_pred_1 = _3019;
                    frontier_phi_61_pred_2 = _3018;
                    frontier_phi_61_pred_3 = _3017;
                    frontier_phi_61_pred_4 = _3016;
                    frontier_phi_61_pred_5 = _3015;
                }
                _2814 = frontier_phi_61_pred;
                _2824 = frontier_phi_61_pred_1;
                _2822 = frontier_phi_61_pred_2;
                _2820 = frontier_phi_61_pred_3;
                _2818 = frontier_phi_61_pred_4;
                _2816 = frontier_phi_61_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2814;
                    _2959 = _2816;
                    _2960 = _2818;
                    _2961 = _2820;
                    _2962 = _2822;
                    _2963 = _2824;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2830) & _2712) == 0u)
        {
            _2926 = _2813;
            _2928 = _2815;
            _2930 = _2817;
            _2932 = _2819;
            _2934 = _2821;
            _2936 = _2823;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
            float _2952 = _2951 * _2666;
            float _2953 = _2951 * _2667;
            float _2954 = _2951 * _2668;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3065 = _2813;
                float _3066 = _2815;
                float _3067 = _2817;
                float _3068 = _2819;
                float _3069 = _2821;
                float _3070 = _2823;
                uint _3071 = _2830;
                uint _3080;
                bool _3081;
                for (;;)
                {
                    _3080 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                    _3081 = _3080 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3081)
                    {
                        frontier_phi_67_pred = _3068;
                        frontier_phi_67_pred_1 = _3069;
                        frontier_phi_67_pred_2 = _3070;
                        frontier_phi_67_pred_3 = _3067;
                        frontier_phi_67_pred_4 = _3066;
                        frontier_phi_67_pred_5 = _3065;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        uint _3284 = _3080;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3368;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3295 = ((_3071 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3295 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3295 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3295 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_2668, _3402.z, fma(_2667, _3402.y, _3402.x * _2666)) + _3402.w;
                            _3415 = !((fma(_2668, _3383.z, fma(_2667, _3383.y, _3383.x * _2666)) + _3383.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3310.x - _2666;
                                float _3443 = _3310.y - _2667;
                                float _3444 = _3310.z - _2668;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3311 * _3311));
                                float _4567 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3460 = sqrt(_3445) * _3326.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_974, _977, _980))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_2668, _3353.z, fma(_2667, _3353.y, _3353.x * _2666)) + _3353.w) / _3414;
                                float _3474 = (fma(_2668, _3368.z, fma(_2667, _3368.y, _3368.x * _2666)) + _3368.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4583 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _1034;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2952;
                                float _3504 = _3450 - _2953;
                                float _3505 = _3451 - _2954;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_974, _977, _980), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4594 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3517 = dot(vec3(_974, _977, _980), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4605 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_974, _977, _980), vec3(_3449, _3450, _3451))) + _3526;
                                float _4616 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4627 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3554 * _3338.x;
                                frontier_phi_73_pred_1 = _3554 * _3338.y;
                                frontier_phi_73_pred_2 = _3480 * _3326.z;
                                frontier_phi_73_pred_3 = _3480 * _3326.y;
                                frontier_phi_73_pred_4 = _3480 * _3326.x;
                                frontier_phi_73_pred_5 = _3554 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_73_pred;
                            _3559 = frontier_phi_73_pred_1;
                            _3563 = frontier_phi_73_pred_2;
                            _3562 = frontier_phi_73_pred_3;
                            _3561 = frontier_phi_73_pred_4;
                            _3560 = frontier_phi_73_pred_5;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3268;
                        frontier_phi_67_pred_1 = _3269;
                        frontier_phi_67_pred_2 = _3270;
                        frontier_phi_67_pred_3 = _3267;
                        frontier_phi_67_pred_4 = _3266;
                        frontier_phi_67_pred_5 = _3265;
                    }
                    _2933 = frontier_phi_67_pred;
                    _2935 = frontier_phi_67_pred_1;
                    _2937 = frontier_phi_67_pred_2;
                    _2931 = frontier_phi_67_pred_3;
                    _2929 = frontier_phi_67_pred_4;
                    _2927 = frontier_phi_67_pred_5;
                    uint _3072 = _3071 + 1u;
                    if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3065 = _2927;
                        _3066 = _2929;
                        _3067 = _2931;
                        _3068 = _2933;
                        _3069 = _2935;
                        _3070 = _2937;
                        _3071 = _3072;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2935;
                frontier_phi_55_56_ladder_1 = _2937;
                frontier_phi_55_56_ladder_2 = _2933;
                frontier_phi_55_56_ladder_3 = _2931;
                frontier_phi_55_56_ladder_4 = _2929;
                frontier_phi_55_56_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_55_56_ladder = _2821;
                frontier_phi_55_56_ladder_1 = _2823;
                frontier_phi_55_56_ladder_2 = _2819;
                frontier_phi_55_56_ladder_3 = _2817;
                frontier_phi_55_56_ladder_4 = _2815;
                frontier_phi_55_56_ladder_5 = _2813;
            }
            _2926 = frontier_phi_55_56_ladder_5;
            _2928 = frontier_phi_55_56_ladder_4;
            _2930 = frontier_phi_55_56_ladder_3;
            _2932 = frontier_phi_55_56_ladder_2;
            _2934 = frontier_phi_55_56_ladder;
            _2936 = frontier_phi_55_56_ladder_1;
        }
        float _2941 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _2725 = (_2941 * _2932) + _2180;
        _2727 = (_2941 * _2934) + _2182;
        _2729 = (_2941 * _2936) + _2184;
        _2731 = ((_2926 * 0.039999999105930328369140625) * _2941) + _2510;
        _2733 = ((_2928 * 0.039999999105930328369140625) * _2941) + _2512;
        _2735 = ((_2930 * 0.039999999105930328369140625) * _2941) + _2514;
    }
    else
    {
        _2725 = _2180;
        _2727 = _2182;
        _2729 = _2184;
        _2731 = _2510;
        _2733 = _2512;
        _2735 = _2514;
    }
    float _4643 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4654 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4665 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    uint _2755 = _255 + 6u;
    float _2763 = _955 / cbSceneParam._m0[86u].x;
    float _2764 = _956 / cbSceneParam._m0[86u].y;
    vec4 _2778 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, (log2((isnan(cbSceneParam._m0[77u].w) ? _890 : (isnan(_890) ? cbSceneParam._m0[77u].w : min(_890, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2780 = _2778.x;
    float _2781 = _2778.y;
    float _2782 = _2778.z;
    float _2783 = _2778.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_890 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_890) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _890 : min(cbSceneParam._m0[80u].w, _890));
        float _2839 = _2838 / _890;
        float _2850 = _2839 * _940;
        float _2851 = _941 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _942;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2989 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3027 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2874 * _2998) - exp2(_2874 * _2999)) * _2987))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2783);
        _2876 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2780;
        _2878 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2781;
        _2880 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2782;
        _2882 = _3038 * _2783;
    }
    else
    {
        _2876 = _2780;
        _2878 = _2781;
        _2880 = _2782;
        _2882 = _2783;
    }
    float _2894 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2895 = _2894 == 3.0;
    float _2896 = log2(_2882);
    float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2725 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1018))) + ((_2731 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1822)) * cbPerFrame._m0[3u].x));
    float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2727 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1018))) + ((_2733 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1822)) * cbPerFrame._m0[3u].x));
    float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2729 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1018))) + ((_2735 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1822)) * cbPerFrame._m0[3u].x));
    float _2914 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2914 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.y = _2914 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.z = _2914 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.w = cbInstanceData._m0[_2755].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2755].w;
}


