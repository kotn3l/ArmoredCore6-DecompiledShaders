#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1427;
float _3786;
float _3787;
float _3788;
float _3789;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3798 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3809 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3820 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _366 = _361.x * cbMtdParam._m0[11u].x;
    float _367 = _361.y * cbMtdParam._m0[11u].y;
    float _368 = _361.z * cbMtdParam._m0[11u].z;
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3831 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _480 = (_335.x * cbMtdParam._m0[9u].x) * ((_470 * ((_387.x * cbMtdParam._m0[12u].x) - _366)) + _366);
    float _481 = (_335.y * cbMtdParam._m0[9u].y) * ((_470 * ((_387.y * cbMtdParam._m0[12u].y) - _367)) + _367);
    float _482 = (_335.z * cbMtdParam._m0[9u].z) * ((_470 * ((_387.z * cbMtdParam._m0[12u].z) - _368)) + _368);
    float _486 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _480;
    float _489 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _481;
    float _492 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _482;
    float _500 = (((_480 - _486) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _486) * 4.55000019073486328125;
    float _502 = (((_481 - _489) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _489) * 4.55000019073486328125;
    float _504 = (((_482 - _492) * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) + _492) * 4.55000019073486328125;
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _579 = ((_549.z - _570) * _470) + _570;
    float _582 = ((((_549.x - _568) * _470) + _568) * 2.0) + (-1.0);
    float _583 = ((((_549.y - _569) * _470) + _569) * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3842 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (_582 + ((((_522.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _622 = (_583 + ((((_522.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _625 = fma(_589, _248, fma(_622, _255, _621 * _241));
    float _628 = fma(_589, _249, fma(_622, _256, _621 * _242));
    float _631 = fma(_589, _250, fma(_622, _257, _621 * _243));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _671 = (cbMtdParam._m0[19u].x + dot(vec4(_635 * _625, _635 * _628, _635 * _631, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) * cbMtdParam._m0[21u].z);
    float _3853 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _674 = (-0.0) - cbMtdParam._m0[24u].x;
    float _676 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
    float _684 = _672 - ((_672 * TEXCOORD_8.x) * _677);
    float _685 = _672 - ((_672 * TEXCOORD_8.y) * _677);
    float _686 = _672 - ((_672 * TEXCOORD_8.z) * _677);
    float _693 = (_684 * (cbMtdParam._m0[17u].x - _500)) + _500;
    float _694 = (_685 * (cbMtdParam._m0[17u].y - _502)) + _502;
    float _695 = (_686 * (cbMtdParam._m0[17u].z - _504)) + _504;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _709 = _707.x;
    float _710 = 1.0 - _709;
    float _736 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_709 - _710) * cbMtdParam._m0[24u].y) + _710) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3874 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _745 = ((((cbMtdParam._m0[10u].x - _693) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _737) + _693;
    float _746 = ((((cbMtdParam._m0[10u].y - _694) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _737) + _694;
    float _747 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _695)) * _737) + _695;
    float _752 = (((_522.z - _579) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _579;
    float _756 = ((_609.z - _752) * cbMtdParam._m0[19u].w) + _752;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _3885 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = ((_770.z - _756) * _684) + _756;
    float _790 = ((cbMtdParam._m0[23u].y - _787) * _737) + _787;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3896 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _832 = ((sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _589) * _686) + _589;
    float _835 = (((_777 - _621) * _684) + _621) + (cbMtdParam._m0[21u].x * _621);
    float _836 = (((_778 - _622) * _685) + _622) + (cbMtdParam._m0[21u].x * _622);
    float _847 = (((_815 - _835) + (_835 * cbMtdParam._m0[22u].z)) * _737) + _835;
    float _848 = (((_816 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _737) + _836;
    float _849 = (_737 * (sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) - _832)) + _832;
    float _853 = cbMtdParam._m0[22u].x + _609.w;
    float _856 = fma(_849, _248, fma(_848, _255, _847 * _241));
    float _859 = fma(_849, _249, fma(_848, _256, _847 * _242));
    float _862 = fma(_849, _250, fma(_848, _257, _847 * _243));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _3907 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _870 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _3929 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3940 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3951 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    vec4 _952 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _954 = _952.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1108 = sqrt(((_938 * _938) + (_939 * _939)) + (_940 * _940));
        float _1114 = (cbMatDynParam._m0[5u].x * _1108) + cbMatDynParam._m0[5u].y;
        float _3962 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1119 = (cbMatDynParam._m0[5u].z * _1108) + cbMatDynParam._m0[5u].w;
        float _3973 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) - _1115)) + _1115) < ((_954 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _965 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _966 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _984 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _987 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _990 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _1003 = _279 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _3984 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    vec4 _1024 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _965, cbSceneParam._m0[86u].y * _966));
    float _1028 = ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * TEXCOORD_5.w) * _1024.x;
    float _1029 = dot(vec3(_867, _868, _869), vec3(_945, _946, _947));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _867) - _945;
    float _1037 = (_1032 * _868) - _946;
    float _1038 = (_1032 * _869) - _947;
    float _1042 = abs(dot(vec3(_945, _946, _947), vec3(_867, _868, _869)));
    float _4017 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_870);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1155 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1159 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1184 = _1089 + _867;
        float _1185 = _1093 + _868;
        float _1186 = _1097 + _869;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_867, _868, _869), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4065 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_867, _868, _869), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4098 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_867, _868, _869), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4131 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1473 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1477 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1500 = _1089 + _867;
        float _1501 = _1093 + _868;
        float _1502 = _1097 + _869;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_867, _868, _869), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4194 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_867, _868, _869), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4227 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_867, _868, _869), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4260 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1427;
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = _1427;
        _1747 = _1427;
        _1748 = _1427;
        _1749 = _1427;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1439)) + _1439;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1440)) + _1440;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1441)) + _1441;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1036 * 0.5;
    float _1807 = _1037 * 0.5;
    float _1808 = _1038 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1937 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1940 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1968 = frontier_phi_17_15_ladder;
        }
        float _2169;
        if (_1937 > 0.0)
        {
            _2169 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2169 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1940 > 0.0)
        {
            _2412 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2169) ? _1968 : (isnan(_1968) ? _2169 : min(_1968, _2169));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1934) + _1923;
        float _2420 = (_2415 * _1937) + _1927;
        float _2421 = (_2415 * _1940) + _1931;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_16_38_ladder_2;
        _1958 = frontier_phi_16_38_ladder_1;
        _1960 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1875);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2033 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2036 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2174;
        if (_2030 > 0.0)
        {
            _2174 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2174 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2033 > 0.0)
        {
            _2439 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_2036 > 0.0)
        {
            _2644 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2644 = frontier_phi_49_46_ladder;
        }
        float _2646 = isnan(_2439) ? _2174 : (isnan(_2174) ? _2439 : min(_2174, _2439));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _2030) + _2019;
        float _2652 = (_2647 * _2033) + _2023;
        float _2653 = (_2647 * _2036) + _2027;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_25_49_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_25_49_ladder_2;
        _2057 = frontier_phi_25_49_ladder_1;
        _2059 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2071 = ((((1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1057 * _1044)) * _1028;
    float _2072 = _2071 * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2073 = _2071 * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2074 = _2071 * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    uvec4 _2093 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2095 = _2093.x * 14u;
    uint _2096 = _2095 + 13u;
    float _2103 = _1028 + (-1.0);
    float _2108 = (cbLight._m0[_2096].x * _2103) + 1.0;
    float _2109 = (cbLight._m0[_2096].y * _2103) + 1.0;
    float _2110 = (cbLight._m0[_2096].z * _2103) + 1.0;
    float _2111 = (cbLight._m0[_2096].w * _2103) + 1.0;
    uint _2112 = _2095 + 5u;
    float _2118 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2122 = _2095 + 4u;
    float _2128 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2132 = _2095 | 1u;
    float _2143 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_867, _868, _869));
    float _2146 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_867, _868, _869));
    float _4396 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _4407 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2151 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2153 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2160 = ((cbLight._m0[_2112].x * _2118) * _2153) + ((cbLight._m0[_2122].x * _2128) * _2151);
    float _2161 = ((_2118 * cbLight._m0[_2112].y) * _2153) + ((_2128 * cbLight._m0[_2122].y) * _2151);
    float _2162 = ((_2118 * cbLight._m0[_2112].z) * _2153) + ((_2128 * cbLight._m0[_2122].z) * _2151);
    uvec4 _2166 = floatBitsToUint(cbLight._m0[_2095 + 12u]);
    bool _2168 = _2166.x == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2168)
    {
        _2179 = _2160;
        _2181 = _2161;
        _2183 = _2162;
    }
    else
    {
        uint _2187 = _2095 + 6u;
        float _2203 = (dot(vec3(cbLight._m0[_2095 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2204 = _2203 * _2203;
        float _4418 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2205 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2206 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2179 = (((cbLight._m0[_2187].x * 0.3183098733425140380859375) * _2205) * _2206) + _2160;
        _2181 = (((cbLight._m0[_2187].y * 0.3183098733425140380859375) * _2205) * _2206) + _2161;
        _2183 = (((cbLight._m0[_2187].z * 0.3183098733425140380859375) * _2205) * _2206) + _2162;
    }
    bool _2186 = _2166.y == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2186)
    {
        _2224 = _2179;
        _2226 = _2181;
        _2228 = _2183;
    }
    else
    {
        uint _2383 = _2095 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_2095 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4434 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2402 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2224 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2179;
        _2226 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2181;
        _2228 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2183;
    }
    uint _2231 = _2095 + 8u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _870) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2095].x + _945;
    float _2247 = cbLight._m0[_2095].y + _946;
    float _2248 = cbLight._m0[_2095].z + _947;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2095].xyz));
    float _4450 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _4461 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2260 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2261 = dot(vec3(_867, _868, _869), vec3(_2253, _2254, _2255));
    float _4472 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2253, _2254, _2255));
    float _4483 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2245 * _2245;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2284 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2285 = 1.0 - _2245;
    float _2296 = (0.5 / (((_2260 * ((_2259 * _2285) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2285) + _2245) * _2259))) * _2259;
    float _4494 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    uint _2309 = _2095 + 9u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _870) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2132].x + _945;
    float _2323 = cbLight._m0[_2132].y + _946;
    float _2324 = cbLight._m0[_2132].z + _947;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2132].xyz));
    float _4505 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2336 = dot(vec3(_867, _868, _869), vec3(_2329, _2330, _2331));
    float _4516 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2329, _2330, _2331));
    float _4527 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2321 * _2321;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2321;
    float _2368 = (0.5 / (((_2260 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2358) + _2321) * _2335))) * _2335;
    float _4538 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    float _2380 = (((_2357 * cbLight._m0[_2309].x) * _2370) * _2118) + (((_2284 * cbLight._m0[_2231].x) * _2298) * _2128);
    float _2381 = (((_2357 * cbLight._m0[_2309].y) * _2370) * _2118) + (((_2284 * cbLight._m0[_2231].y) * _2298) * _2128);
    float _2382 = (((_2357 * cbLight._m0[_2309].z) * _2370) * _2118) + (((_2284 * cbLight._m0[_2231].z) * _2298) * _2128);
    float _2444;
    float _2446;
    float _2448;
    if (_2168)
    {
        _2444 = _2380;
        _2446 = _2381;
        _2448 = _2382;
    }
    else
    {
        uint _2450 = _2095 + 2u;
        uint _2454 = _2095 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _870) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _945;
        float _2471 = cbLight._m0[_2450].y + _946;
        float _2472 = cbLight._m0[_2450].z + _947;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2450].xyz));
        float _4549 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2484 = dot(vec3(_867, _868, _869), vec3(_2477, _2478, _2479));
        float _4560 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4571 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2260 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2506) + _2469) * _2483))) * _2483;
        float _4582 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2444 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2380;
        _2446 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2381;
        _2448 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2382;
    }
    float _2554;
    float _2556;
    float _2558;
    if (_2186)
    {
        _2554 = _2444;
        _2556 = _2446;
        _2558 = _2448;
    }
    else
    {
        uint _2565 = _2095 + 3u;
        uint _2569 = _2095 + 11u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _870) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _945;
        float _2586 = cbLight._m0[_2565].y + _946;
        float _2587 = cbLight._m0[_2565].z + _947;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2565].xyz));
        float _4598 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2599 = dot(vec3(_867, _868, _869), vec3(_2592, _2593, _2594));
        float _4609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4620 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2621 = 1.0 - _2584;
        float _2631 = (0.5 / (((_2260 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2621) + _2584) * _2598))) * _2598;
        float _4631 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2554 = (((_2620 * cbLight._m0[_2569].x) * _2633) * _2634) + _2444;
        _2556 = (((_2620 * cbLight._m0[_2569].y) * _2633) * _2634) + _2446;
        _2558 = (((_2620 * cbLight._m0[_2569].z) * _2633) * _2634) + _2448;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2093.y == 0u)
    {
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2709;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2709;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2709;
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _966) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _965) / _2725)));
        float _2746 = (log2(_2712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            uint _3015 = 0u;
            uint _3024;
            bool _3025;
            for (;;)
            {
                _3024 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                _3025 = _3024 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3025)
                {
                    frontier_phi_66_pred = _3009;
                    frontier_phi_66_pred_1 = _3014;
                    frontier_phi_66_pred_2 = _3013;
                    frontier_phi_66_pred_3 = _3012;
                    frontier_phi_66_pred_4 = _3011;
                    frontier_phi_66_pred_5 = _3010;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3024;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3015 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _2710;
                        float _3221 = _3180.y - _2711;
                        float _3222 = _3180.z - _2712;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_984, _987, _990), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4657 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _2710;
                        float _3256 = (-0.0) - _2711;
                        float _3257 = (-0.0) - _2712;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3272 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _1044;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_984, _987, _990), vec3(_3262, _3263, _3264));
                        float _4673 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3297 = dot(vec3(_984, _987, _990), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4684 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3240 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3230) + _3306;
                        float _4695 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4706 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3304 * _3304) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3084 = (_3251 * _3199.x) + _3157;
                        _3085 = (_3251 * _3199.y) + _3158;
                        _3086 = (_3251 * _3199.z) + _3159;
                        _3081 = (_3332 * _3216.x) + _3154;
                        _3082 = (_3332 * _3216.y) + _3155;
                        _3083 = (_3332 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3086;
                    frontier_phi_66_pred_2 = _3085;
                    frontier_phi_66_pred_3 = _3084;
                    frontier_phi_66_pred_4 = _3083;
                    frontier_phi_66_pred_5 = _3082;
                }
                _2858 = frontier_phi_66_pred;
                _2868 = frontier_phi_66_pred_1;
                _2866 = frontier_phi_66_pred_2;
                _2864 = frontier_phi_66_pred_3;
                _2862 = frontier_phi_66_pred_4;
                _2860 = frontier_phi_66_pred_5;
                uint _3016 = _3015 + 1u;
                if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3009 = _2858;
                    _3010 = _2860;
                    _3011 = _2862;
                    _3012 = _2864;
                    _3013 = _2866;
                    _3014 = _2868;
                    _3015 = _3016;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((4294967295u << _2874) & _2756) == 0u)
        {
            _2977 = _2857;
            _2979 = _2859;
            _2981 = _2861;
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
        }
        else
        {
            float _3002 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
            float _3003 = _3002 * _2710;
            float _3004 = _3002 * _2711;
            float _3005 = _3002 * _2712;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _3137 = _2857;
                float _3138 = _2859;
                float _3139 = _2861;
                float _3140 = _2863;
                float _3141 = _2865;
                float _3142 = _2867;
                uint _3143 = _2874;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3153)
                    {
                        frontier_phi_77_pred = _3142;
                        frontier_phi_77_pred_1 = _3141;
                        frontier_phi_77_pred_2 = _3140;
                        frontier_phi_77_pred_3 = _3139;
                        frontier_phi_77_pred_4 = _3138;
                        frontier_phi_77_pred_5 = _3137;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        uint _3365 = _3152;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3434;
                        vec4 _3449;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3376 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3421 = (_3376 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3376 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3376 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3376 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_2712, _3483.z, fma(_2711, _3483.y, _3483.x * _2710)) + _3483.w;
                            _3496 = !((fma(_2712, _3464.z, fma(_2711, _3464.y, _3464.x * _2710)) + _3464.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3391.x - _2710;
                                float _3524 = _3391.y - _2711;
                                float _3525 = _3391.z - _2712;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3392 * _3392));
                                float _4717 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3541 = sqrt(_3526) * _3407.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_984, _987, _990))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_2712, _3434.z, fma(_2711, _3434.y, _3434.x * _2710)) + _3434.w) / _3495;
                                float _3555 = (fma(_2712, _3449.z, fma(_2711, _3449.y, _3449.x * _2710)) + _3449.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4733 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _1044;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3003;
                                float _3585 = _3531 - _3004;
                                float _3586 = _3532 - _3005;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_984, _987, _990), vec3((-0.0) - _3003, (-0.0) - _3004, (-0.0) - _3005));
                                float _4744 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3598 = dot(vec3(_984, _987, _990), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4755 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_984, _987, _990), vec3(_3530, _3531, _3532))) + _3607;
                                float _4766 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4777 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3561 * _3407.y;
                                frontier_phi_83_pred_1 = _3561 * _3407.x;
                                frontier_phi_83_pred_2 = _3635 * _3419.z;
                                frontier_phi_83_pred_3 = _3635 * _3419.y;
                                frontier_phi_83_pred_4 = _3635 * _3419.x;
                                frontier_phi_83_pred_5 = _3561 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_83_pred;
                            _3642 = frontier_phi_83_pred_1;
                            _3641 = frontier_phi_83_pred_2;
                            _3640 = frontier_phi_83_pred_3;
                            _3639 = frontier_phi_83_pred_4;
                            _3644 = frontier_phi_83_pred_5;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3351;
                        frontier_phi_77_pred_1 = _3350;
                        frontier_phi_77_pred_2 = _3349;
                        frontier_phi_77_pred_3 = _3348;
                        frontier_phi_77_pred_4 = _3347;
                        frontier_phi_77_pred_5 = _3346;
                    }
                    _2988 = frontier_phi_77_pred;
                    _2986 = frontier_phi_77_pred_1;
                    _2984 = frontier_phi_77_pred_2;
                    _2982 = frontier_phi_77_pred_3;
                    _2980 = frontier_phi_77_pred_4;
                    _2978 = frontier_phi_77_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2978;
                        _3138 = _2980;
                        _3139 = _2982;
                        _3140 = _2984;
                        _3141 = _2986;
                        _3142 = _2988;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2982;
                frontier_phi_58_59_ladder_1 = _2988;
                frontier_phi_58_59_ladder_2 = _2986;
                frontier_phi_58_59_ladder_3 = _2984;
                frontier_phi_58_59_ladder_4 = _2980;
                frontier_phi_58_59_ladder_5 = _2978;
            }
            else
            {
                frontier_phi_58_59_ladder = _2861;
                frontier_phi_58_59_ladder_1 = _2867;
                frontier_phi_58_59_ladder_2 = _2865;
                frontier_phi_58_59_ladder_3 = _2863;
                frontier_phi_58_59_ladder_4 = _2859;
                frontier_phi_58_59_ladder_5 = _2857;
            }
            _2977 = frontier_phi_58_59_ladder_5;
            _2979 = frontier_phi_58_59_ladder_4;
            _2981 = frontier_phi_58_59_ladder;
            _2983 = frontier_phi_58_59_ladder_3;
            _2985 = frontier_phi_58_59_ladder_2;
            _2987 = frontier_phi_58_59_ladder_1;
        }
        float _2992 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _2769 = (_2992 * _2983) + _2224;
        _2771 = (_2992 * _2985) + _2226;
        _2773 = (_2992 * _2987) + _2228;
        _2775 = ((_2977 * 0.039999999105930328369140625) * _2992) + _2554;
        _2777 = ((_2979 * 0.039999999105930328369140625) * _2992) + _2556;
        _2779 = ((_2981 * 0.039999999105930328369140625) * _2992) + _2558;
    }
    else
    {
        _2769 = _2224;
        _2771 = _2226;
        _2773 = _2228;
        _2775 = _2554;
        _2777 = _2556;
        _2779 = _2558;
    }
    float _4793 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4804 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4815 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2796 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2769 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1028))) + ((_2775 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2797 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2771 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1028))) + ((_2777 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2773 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1028))) + ((_2779 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    uint _2799 = _279 + 6u;
    float _2807 = _965 / cbSceneParam._m0[86u].x;
    float _2808 = _966 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2883 = _2882 / _888;
        float _2894 = _2883 * _938;
        float _2895 = _939 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2897 = _2883 * _940;
        float _2899 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2895;
        float _2907 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3094;
        if (abs((_2896 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3094 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3038 = 1.0 / cbSceneParam._m0[80u].x;
            float _3039 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3040 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            _3094 = ((abs(_2907 / _2896) * cbSceneParam._m0[80u].y) * ((((_3049 - _3050) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))))) * _3038)) - ((exp2(_2917 * _3049) - exp2(_2917 * _3050)) * _3038))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3105 = exp2((_3094 * (-1.44269502162933349609375)) * (1.0 - _3096.w));
        float _3106 = log2(_3105);
        float _3122 = log2(_2827);
        _2919 = (exp2(_3122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].x)) * _3096.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2921 = (exp2(_3122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].y)) * _3096.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2923 = (exp2(_3122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].z)) * _3096.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2925 = _3105 * _2827;
    }
    else
    {
        _2919 = _2824;
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
    }
    bool _3132;
    vec4 _2935;
    vec4 _2957;
    float _2959;
    float _2963;
    float _2964;
    float _2965;
    float _2966;
    bool _2976;
    for (;;)
    {
        _2935 = cbMatDynParam._m0[0u];
        float _2937 = roundEven(_2935.y);
        bool _2938 = _2937 == 3.0;
        float _2939 = log2(_2925);
        float _2946 = exp2(_2939 * cbSceneParam._m0[78u].x) * _2796;
        float _2947 = exp2(_2939 * cbSceneParam._m0[78u].y) * _2797;
        float _2948 = exp2(_2939 * cbSceneParam._m0[78u].z) * _2798;
        float _2955 = _954 + (-0.5);
        _2957 = cbMtdParam._m0[1u];
        _2959 = _2957.y * _2955;
        float _2962 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2963 = _2962 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
        _2964 = _2962 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
        _2965 = _2962 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
        _2966 = _2955 * 0.999000012874603271484375;
        _2976 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2976)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2966) < 0.5)
            {
                _3132 = true;
                break;
            }
        }
        uint _3073 = _1003 + uint(_2935.w);
        if ((cbInstanceData._m0[_3073].w < 1.0) && ((cbInstanceData._m0[_3073].w + _2966) < 0.5))
        {
            _3132 = true;
            break;
        }
        if ((_2959 + 1.0) < _2957.x)
        {
            _3132 = true;
            break;
        }
        _3132 = false;
        break;
    }
    float _3337;
    if (_3132)
    {
        discard_state = true;
        _3337 = 0.0;
    }
    else
    {
        _3337 = cbInstanceData._m0[_2799].w;
    }
    SV_Target.x = _2963;
    SV_Target.y = _2964;
    SV_Target.z = _2965;
    SV_Target.w = _3337;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
    discard_exit();
}


