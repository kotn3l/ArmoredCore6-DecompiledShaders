#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1310;
float _3951;
float _3952;
float _3953;
float _3954;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3963 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3974 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3985 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3996 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _475 = (_330.x * cbMtdParam._m0[9u].x) * ((_465 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361);
    float _476 = (_330.y * cbMtdParam._m0[9u].y) * ((_465 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362);
    float _477 = (_330.z * cbMtdParam._m0[9u].z) * ((_465 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363);
    float _481 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _475;
    float _484 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _476;
    float _487 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _477;
    float _495 = (((_475 - _481) * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) + _481) * 4.55000019073486328125;
    float _497 = (((_476 - _484) * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) + _484) * 4.55000019073486328125;
    float _499 = (((_477 - _487) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) + _487) * 4.55000019073486328125;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _593 = ((_563.z - _584) * _465) + _584;
    float _596 = ((((_563.x - _582) * _465) + _582) * 2.0) + (-1.0);
    float _597 = ((((_563.y - _583) * _465) + _583) * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _4007 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _660 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4018 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _668 = (_661 * ((_518.x * cbMtdParam._m0[18u].x) - _495)) + _495;
    float _669 = (_661 * ((_518.y * cbMtdParam._m0[18u].y) - _497)) + _497;
    float _670 = (_661 * ((_518.z * cbMtdParam._m0[18u].z) - _499)) + _499;
    float _675 = (((_538.z - _593) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _593;
    float _679 = ((_619.z - _675) * cbMtdParam._m0[19u].w) + _675;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _699 = (_692.x * 2.0) + (-1.0);
    float _700 = (_692.y * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _4029 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _709 = (_661 * (_692.z - _679)) + _679;
    float _718 = (_596 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_538.x * 2.0) + (-1.0)))) + (((_619.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = (_597 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_538.y * 2.0) + (-1.0)))) + (((_619.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _731 = (((_699 - _718) + (cbMtdParam._m0[21u].x * _718)) * _661) + _718;
    float _732 = (((_700 - _719) + (cbMtdParam._m0[21u].x * _719)) * _661) + _719;
    float _733 = (_661 * (sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _603)) + _603;
    float _735 = cbMtdParam._m0[22u].x + _619.w;
    float _738 = fma(_733, _240 * NORMAL.x, fma(_732, _247 * TANGENT.x, (_233 * _225) * _731));
    float _741 = fma(_733, _240 * NORMAL.y, fma(_732, _247 * TANGENT.y, (_233 * _226) * _731));
    float _744 = fma(_733, _240 * NORMAL.z, fma(_732, _247 * TANGENT.z, (_233 * _227) * _731));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    float _749 = _748 * _738;
    float _750 = _748 * _741;
    float _751 = _748 * _744;
    float _4040 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _752 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4062 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4073 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4084 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _770 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _821 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _811);
    float _822 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _811);
    float _823 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _811);
    float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
    float _828 = _821 * _827;
    float _829 = _822 * _827;
    float _830 = _823 * _827;
    vec4 _835 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _837 = _835.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _991 = sqrt(((_821 * _821) + (_822 * _822)) + (_823 * _823));
        float _997 = (cbMatDynParam._m0[5u].x * _991) + cbMatDynParam._m0[5u].y;
        float _4095 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1002 = (cbMatDynParam._m0[5u].z * _991) + cbMatDynParam._m0[5u].w;
        float _4106 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) - _998)) + _998) < ((_837 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_751, cbSceneParam._m0[5u].z, fma(_750, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _749));
    float _870 = fma(_751, cbSceneParam._m0[6u].z, fma(_750, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _749));
    float _873 = fma(_751, cbSceneParam._m0[7u].z, fma(_750, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _749));
    uint _886 = _274 + 9u;
    uint _887 = _886 + uint(cbMatDynParam._m0[0u].w);
    float _893 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_887].x;
    float _894 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_887].y;
    float _895 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_887].z;
    float _4117 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _911 = ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * TEXCOORD_5.w) * _907.x;
    float _912 = dot(vec3(_749, _750, _751), vec3(_828, _829, _830));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _749) - _828;
    float _920 = (_915 * _750) - _829;
    float _921 = (_915 * _751) - _830;
    float _925 = abs(dot(vec3(_828, _829, _830), vec3(_749, _750, _751)));
    float _4150 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_752);
    float _940 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1309;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1034 = fma(_980, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972));
        float _1038 = fma(_980, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972));
        float _1042 = fma(_980, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972));
        float _1067 = _972 + _749;
        float _1068 = _976 + _750;
        float _1069 = _980 + _751;
        float _1079 = fma(_1069, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067)) - _1034;
        float _1080 = fma(_1069, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067)) - _1038;
        float _1081 = fma(_1069, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067)) - _1042;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1034 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1038 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[34u].z) + ((((((_1042 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1137 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1103.x + (-0.5));
        float _1139 = _1137 * (_1103.y + (-0.5));
        float _1140 = _1137 * (_1103.z + (-0.5));
        float _1147 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1110.x + (-0.5));
        float _1149 = _1147 * (_1110.y + (-0.5));
        float _1150 = _1147 * (_1110.z + (-0.5));
        float _1157 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1117.x + (-0.5));
        float _1159 = _1157 * (_1117.y + (-0.5));
        float _1160 = _1157 * (_1117.z + (-0.5));
        float _1167 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1124.x + (-0.5));
        float _1169 = _1167 * (_1124.y + (-0.5));
        float _1170 = _1167 * (_1124.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1191 = (dot(vec3(_749, _750, _751), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1201 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4198 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1203 + 1.0))) + _1208) * _1171;
        float _1218 = _1139 * 0.5;
        float _1219 = _1149 * 0.5;
        float _1220 = _1159 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_749, _750, _751), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4231 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1245 + 1.0))) + _1250) * _1172;
        float _1260 = _1140 * 0.5;
        float _1261 = _1150 * 0.5;
        float _1262 = _1160 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_749, _750, _751), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4264 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1287 + 1.0))) + _1292) * _1173;
        _1309 = _1140;
        _1311 = _1139;
        _1312 = _1138;
        _1313 = _1150;
        _1314 = _1149;
        _1315 = _1148;
        _1316 = _1160;
        _1317 = _1159;
        _1318 = _1158;
        _1319 = _1173;
        _1320 = _1172;
        _1321 = _1171;
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1310;
        _1311 = _1310;
        _1312 = _1310;
        _1313 = _1310;
        _1314 = _1310;
        _1315 = _1310;
        _1316 = _1310;
        _1317 = _1310;
        _1318 = _1310;
        _1319 = _1310;
        _1320 = _1310;
        _1321 = _1310;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_980, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972));
        float _1356 = fma(_980, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972));
        float _1360 = fma(_980, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972));
        float _1383 = _972 + _749;
        float _1384 = _976 + _750;
        float _1385 = _980 + _751;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_749, _750, _751), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4327 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_749, _750, _751), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4360 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_749, _750, _751), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4393 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1310;
        _1622 = _1310;
        _1623 = _1310;
        _1624 = _1310;
        _1625 = _1310;
        _1626 = _1310;
        _1627 = _1310;
        _1628 = _1310;
        _1629 = _1310;
        _1630 = _1310;
        _1631 = _1310;
        _1632 = _1310;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1322)) + _1322;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1323)) + _1323;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1324)) + _1324;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _919 * 0.5;
    float _1690 = _920 * 0.5;
    float _1691 = _921 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1309, _1313, _1316, _1319));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_980, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_980, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_980, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1819 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1822 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1850 = frontier_phi_17_15_ladder;
        }
        float _2019;
        if (_1819 > 0.0)
        {
            _2019 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2019 = frontier_phi_26_22_ladder;
        }
        float _2314;
        if (_1822 > 0.0)
        {
            _2314 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2314 = frontier_phi_38_33_ladder;
        }
        float _2316 = isnan(_2019) ? _1850 : (isnan(_1850) ? _2019 : min(_1850, _2019));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1816) + _1805;
        float _2322 = (_2317 * _1819) + _1809;
        float _2323 = (_2317 * _1822) + _1813;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_16_38_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_16_38_ladder_2;
        _1840 = frontier_phi_16_38_ladder_1;
        _1842 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1758);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_980, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_980, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_980, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1914 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1917 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _2024;
        if (_1911 > 0.0)
        {
            _2024 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2024 = frontier_phi_28_24_ladder;
        }
        float _2341;
        if (_1914 > 0.0)
        {
            _2341 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2341 = frontier_phi_40_35_ladder;
        }
        float _2668;
        if (_1917 > 0.0)
        {
            _2668 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2668 = frontier_phi_50_47_ladder;
        }
        float _2670 = isnan(_2341) ? _2024 : (isnan(_2024) ? _2341 : min(_2024, _2341));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1911) + _1900;
        float _2676 = (_2671 * _1914) + _1904;
        float _2677 = (_2671 * _1917) + _1908;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_25_50_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_25_50_ladder_2;
        _1938 = frontier_phi_25_50_ladder_1;
        _1940 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1847);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1952 = ((((1.0 - _940) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_940 * _927)) * _911;
    float _1953 = _1952 * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1954 = _1952 * ((cbModelParam._m0[1u].w * (_1938 - _1840)) + _1840);
    float _1955 = _1952 * ((cbModelParam._m0[1u].w * (_1940 - _1842)) + _1842);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2011 = _1998 / _2010;
    float _2012 = _2002 / _2010;
    float _2013 = _2006 / _2010;
    float _2160;
    float _2161;
    float _2162;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2040 = ((uint(_2013 > cbSceneParam._m0[59u].y) + uint(_2013 > cbSceneParam._m0[59u].x)) + uint(_2013 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2041 = _2040 + 43u;
        uint _2049 = _2040 + 44u;
        uint _2057 = _2040 + 45u;
        uint _2065 = _2040 + 46u;
        float _2076 = fma(_2010, cbSceneParam._m0[_2041].w, fma(_2006, cbSceneParam._m0[_2041].z, fma(_2002, cbSceneParam._m0[_2041].y, _1998 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2010, cbSceneParam._m0[_2049].w, fma(_2006, cbSceneParam._m0[_2049].z, fma(_2002, cbSceneParam._m0[_2049].y, _1998 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2010, cbSceneParam._m0[_2065].w, fma(_2006, cbSceneParam._m0[_2065].z, fma(_2002, cbSceneParam._m0[_2065].y, _1998 * cbSceneParam._m0[_2065].x)));
        float _2093 = cbSceneParam._m0[33u].z * _2088;
        float _2095 = cbSceneParam._m0[33u].w * _2088;
        float _2098 = fma(_2010, cbSceneParam._m0[_2057].w, fma(_2006, cbSceneParam._m0[_2057].z, fma(_2002, cbSceneParam._m0[_2057].y, _1998 * cbSceneParam._m0[_2057].x))) / _2088;
        float _2146 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
        float _4519 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2153 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2076) / _2088, (_2095 + _2080) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 + _2076) / _2088, (_2080 - _2093) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2093) / _2088, (_2080 - _2095) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2095) / _2088, (_2093 + _2080) / _2088), _2098), 0.0)).x), vec4(0.25)));
        _2160 = 1.0 - (_2153 * cbSceneParam._m0[34u].x);
        _2161 = 1.0 - (_2153 * cbSceneParam._m0[34u].y);
        _2162 = 1.0 - (_2153 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2160 = 1.0;
        _2161 = 1.0;
        _2162 = 1.0;
    }
    float _2226;
    float _2228;
    float _2230;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2214 = fma(_2010, cbSceneParam._m0[63u].w, fma(_2006, cbSceneParam._m0[63u].z, fma(_2002, cbSceneParam._m0[63u].y, _1998 * cbSceneParam._m0[63u].x)));
        float _2215 = fma(_2010, cbSceneParam._m0[60u].w, fma(_2006, cbSceneParam._m0[60u].z, fma(_2002, cbSceneParam._m0[60u].y, _1998 * cbSceneParam._m0[60u].x))) / _2214;
        float _2216 = fma(_2010, cbSceneParam._m0[61u].w, fma(_2006, cbSceneParam._m0[61u].z, fma(_2002, cbSceneParam._m0[61u].y, _1998 * cbSceneParam._m0[61u].x))) / _2214;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2215 >= cbSceneParam._m0[64u].x) && (_2216 >= cbSceneParam._m0[64u].y)) && (_2215 <= cbSceneParam._m0[64u].z)) && (_2216 <= cbSceneParam._m0[64u].w))
        {
            float _2354 = fma(_2010, cbSceneParam._m0[62u].w, fma(_2006, cbSceneParam._m0[62u].z, fma(_2002, cbSceneParam._m0[62u].y, _1998 * cbSceneParam._m0[62u].x))) / _2214;
            float _2358 = isnan(cbSceneParam._m0[41u].w) ? _2354 : (isnan(_2354) ? cbSceneParam._m0[41u].w : max(_2354, cbSceneParam._m0[41u].w));
            float _2401 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
            float _4535 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
            float _2408 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2215, cbSceneParam._m0[33u].w + _2216), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2215, _2216 - cbSceneParam._m0[33u].z), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].z, _2216 - cbSceneParam._m0[33u].w), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2216), _2358), 0.0)).x), vec4(0.25)));
            float _2412 = 1.0 - (_2408 * cbSceneParam._m0[34u].x);
            float _2413 = 1.0 - (_2408 * cbSceneParam._m0[34u].y);
            float _2414 = 1.0 - (_2408 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2414) ? _2162 : (isnan(_2162) ? _2414 : min(_2162, _2414));
            frontier_phi_37_36_ladder_1 = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
            frontier_phi_37_36_ladder_2 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
        }
        else
        {
            frontier_phi_37_36_ladder = _2162;
            frontier_phi_37_36_ladder_1 = _2161;
            frontier_phi_37_36_ladder_2 = _2160;
        }
        _2226 = frontier_phi_37_36_ladder_2;
        _2228 = frontier_phi_37_36_ladder_1;
        _2230 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2226 = _2160;
        _2228 = _2161;
        _2230 = _2162;
    }
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _911 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2273 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2277 = _2237 | 1u;
    float _2288 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_749, _750, _751));
    float _2291 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_749, _750, _751));
    float _4571 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _4582 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2296 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2298 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2305 = ((cbLight._m0[_2254].x * _2260) * _2298) + (((cbLight._m0[_2264].x * _2226) * _2273) * _2296);
    float _2306 = ((_2260 * cbLight._m0[_2254].y) * _2298) + (((cbLight._m0[_2264].y * _2228) * _2273) * _2296);
    float _2307 = ((_2260 * cbLight._m0[_2254].z) * _2298) + (((cbLight._m0[_2264].z * _2230) * _2273) * _2296);
    uvec4 _2311 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2313 = _2311.x == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2313)
    {
        _2415 = _2305;
        _2417 = _2306;
        _2419 = _2307;
    }
    else
    {
        uint _2423 = _2237 + 6u;
        float _2439 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4593 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2442 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2415 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2305;
        _2417 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2306;
        _2419 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2307;
    }
    bool _2422 = _2311.y == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2422)
    {
        _2477 = _2415;
        _2479 = _2417;
        _2481 = _2419;
    }
    else
    {
        uint _2639 = _2237 + 7u;
        float _2655 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4609 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2658 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2477 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2415;
        _2479 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2417;
        _2481 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2419;
    }
    uint _2484 = _2237 + 8u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _752) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2237].x + _828;
    float _2500 = cbLight._m0[_2237].y + _829;
    float _2501 = cbLight._m0[_2237].z + _830;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2237].xyz));
    float _4625 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _4636 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2513 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2514 = dot(vec3(_749, _750, _751), vec3(_2506, _2507, _2508));
    float _4647 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2506, _2507, _2508));
    float _4658 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2498 * _2498;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2538 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2513 * ((_2512 * _2538) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2538) + _2498) * _2512))) * _2512;
    float _4669 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    uint _2565 = _2237 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _752) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2277].x + _828;
    float _2579 = cbLight._m0[_2277].y + _829;
    float _2580 = cbLight._m0[_2277].z + _830;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2277].xyz));
    float _4680 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2592 = dot(vec3(_749, _750, _751), vec3(_2585, _2586, _2587));
    float _4691 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2585, _2586, _2587));
    float _4702 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2614 = 1.0 - _2577;
    float _2624 = (0.5 / (((_2513 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2614) + _2577) * _2591))) * _2591;
    float _4713 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2636 = (((_2613 * cbLight._m0[_2565].x) * _2626) * _2260) + ((((cbLight._m0[_2484].x * _2226) * _2537) * _2551) * _2273);
    float _2637 = (((_2613 * cbLight._m0[_2565].y) * _2626) * _2260) + ((((cbLight._m0[_2484].y * _2228) * _2537) * _2551) * _2273);
    float _2638 = (((_2613 * cbLight._m0[_2565].z) * _2626) * _2260) + ((((cbLight._m0[_2484].z * _2230) * _2537) * _2551) * _2273);
    float _2694;
    float _2696;
    float _2698;
    if (_2313)
    {
        _2694 = _2636;
        _2696 = _2637;
        _2698 = _2638;
    }
    else
    {
        uint _2700 = _2237 + 2u;
        uint _2704 = _2237 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _752) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _828;
        float _2721 = cbLight._m0[_2700].y + _829;
        float _2722 = cbLight._m0[_2700].z + _830;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2700].xyz));
        float _4724 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2734 = dot(vec3(_749, _750, _751), vec3(_2727, _2728, _2729));
        float _4735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4746 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2513 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2756) + _2719) * _2733))) * _2733;
        float _4757 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2694 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2636;
        _2696 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2637;
        _2698 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2638;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2422)
    {
        _2800 = _2694;
        _2802 = _2696;
        _2804 = _2698;
    }
    else
    {
        uint _2811 = _2237 + 3u;
        uint _2815 = _2237 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _752) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _828;
        float _2832 = cbLight._m0[_2811].y + _829;
        float _2833 = cbLight._m0[_2811].z + _830;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2811].xyz));
        float _4773 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2845 = dot(vec3(_749, _750, _751), vec3(_2838, _2839, _2840));
        float _4784 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4795 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2866 = (exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2867 = 1.0 - _2830;
        float _2877 = (0.5 / (((_2513 * ((_2844 * _2867) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2867) + _2830) * _2844))) * _2844;
        float _4806 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2800 = (((_2866 * cbLight._m0[_2815].x) * _2879) * _2880) + _2694;
        _2802 = (((_2866 * cbLight._m0[_2815].y) * _2879) * _2880) + _2696;
        _2804 = (((_2866 * cbLight._m0[_2815].z) * _2879) * _2880) + _2698;
    }
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_2235.y == 0u)
    {
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.x;
        uint _2913 = uint((float(_2901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2902))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2902)));
        float _2923 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2924 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        uint _2927 = uint(isnan(14.0) ? _2924 : (isnan(_2924) ? 14.0 : min(_2924, 14.0)));
        uvec4 _2932 = texelFetch(g_lightClusterGridBuffer, int(((_2927 << 2u) + (_2913 << 6u)) >> 2u));
        uint _2933 = _2932.x;
        uint _2934 = _2901.z;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((((1u << ((_2934 >> 4u) & 15u)) + 4294967295u) & _2933) == 0u) || ((_2934 & 240u) == 0u))
        {
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
        }
        else
        {
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            uint _3172 = 0u;
            uint _3181;
            bool _3182;
            for (;;)
            {
                _3181 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                _3182 = _3181 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3182)
                {
                    frontier_phi_71_pred = _3171;
                    frontier_phi_71_pred_1 = _3170;
                    frontier_phi_71_pred_2 = _3169;
                    frontier_phi_71_pred_3 = _3168;
                    frontier_phi_71_pred_4 = _3167;
                    frontier_phi_71_pred_5 = _3166;
                }
                else
                {
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    uint _3317;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3181;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3321 = uint(findLSB(_3317)) + (_3172 << 5u);
                        uint _3318 = (_3317 + 4294967295u) & _3317;
                        uint _3323 = _3321 * 48u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3343 = (_3321 * 48u) + 4u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3362 = (_3321 * 48u) + 8u;
                        vec3 _3373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x));
                        float _3377 = _3337.x - _2011;
                        float _3378 = _3337.y - _2012;
                        float _3379 = _3337.z - _2013;
                        float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                        float _3383 = inversesqrt(_3380);
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3387 = dot(vec3(_867, _870, _873), vec3(_3384, _3385, _3386));
                        float _3392 = 1.0 - (_3380 * _3337.w);
                        float _4832 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3394 = sqrt(_3380) * _3356.w;
                        float _3397 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3387) + _3398;
                        float _3404 = _3394 * _3394;
                        float _3408 = ((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3393) / ((_3404 * 0.699999988079071044921875) + 1.0);
                        float _3412 = (-0.0) - _2011;
                        float _3413 = (-0.0) - _2012;
                        float _3414 = (-0.0) - _2013;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3428 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _927;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_867, _870, _873), vec3(_3419, _3420, _3421));
                        float _4848 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3453 = dot(vec3(_867, _870, _873), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4859 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3397 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3387) + _3462;
                        float _4870 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4881 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3460 * _3460) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125))) * _3393;
                        _3241 = (_3408 * _3356.x) + _3314;
                        _3242 = (_3408 * _3356.y) + _3315;
                        _3243 = (_3408 * _3356.z) + _3316;
                        _3238 = (_3488 * _3373.x) + _3311;
                        _3239 = (_3488 * _3373.y) + _3312;
                        _3240 = (_3488 * _3373.z) + _3313;
                        if (_3318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3318;
                        }
                    }
                    frontier_phi_71_pred = _3243;
                    frontier_phi_71_pred_1 = _3242;
                    frontier_phi_71_pred_2 = _3241;
                    frontier_phi_71_pred_3 = _3240;
                    frontier_phi_71_pred_4 = _3239;
                    frontier_phi_71_pred_5 = _3238;
                }
                _3024 = frontier_phi_71_pred;
                _3022 = frontier_phi_71_pred_1;
                _3020 = frontier_phi_71_pred_2;
                _3018 = frontier_phi_71_pred_3;
                _3016 = frontier_phi_71_pred_4;
                _3014 = frontier_phi_71_pred_5;
                uint _3173 = _3172 + 1u;
                if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3166 = _3014;
                    _3167 = _3016;
                    _3168 = _3018;
                    _3169 = _3020;
                    _3170 = _3022;
                    _3171 = _3024;
                    _3172 = _3173;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
        }
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.z;
        uint _3030 = (_3028 >> 8u) & 15u;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((4294967295u << _3030) & _2933) == 0u)
        {
            _3134 = _3013;
            _3136 = _3015;
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
        }
        else
        {
            float _3159 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _3160 = _3159 * _2011;
            float _3161 = _3159 * _2012;
            float _3162 = _3159 * _2013;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3030 < ((_3028 >> 12u) & 15u))
            {
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3294 = _3013;
                float _3295 = _3015;
                float _3296 = _3017;
                float _3297 = _3019;
                float _3298 = _3021;
                float _3299 = _3023;
                uint _3300 = _3030;
                uint _3309;
                bool _3310;
                for (;;)
                {
                    _3309 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                    _3310 = _3309 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3310)
                    {
                        frontier_phi_82_pred = _3299;
                        frontier_phi_82_pred_1 = _3298;
                        frontier_phi_82_pred_2 = _3297;
                        frontier_phi_82_pred_3 = _3296;
                        frontier_phi_82_pred_4 = _3295;
                        frontier_phi_82_pred_5 = _3294;
                    }
                    else
                    {
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        float _3518 = _3297;
                        float _3519 = _3298;
                        float _3520 = _3299;
                        uint _3521 = _3309;
                        uint _3522;
                        vec4 _3547;
                        float _3548;
                        vec4 _3563;
                        vec3 _3575;
                        vec4 _3590;
                        vec4 _3605;
                        float _3651;
                        bool _3652;
                        for (;;)
                        {
                            uint _3532 = ((_3300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3521));
                            _3522 = (_3521 + 4294967295u) & _3521;
                            uint _3534 = _3532 * 40u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3548 = _3547.w;
                            uint _3550 = (_3532 * 40u) + 4u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3532 * 40u) + 8u;
                            _3575 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x));
                            uint _3577 = (_3532 * 40u) + 16u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3532 * 40u) + 20u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3532 * 40u) + 24u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3626 = (_3532 * 40u) + 28u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3651 = fma(_2013, _3639.z, fma(_2012, _3639.y, _3639.x * _2011)) + _3639.w;
                            _3652 = !((fma(_2013, _3620.z, fma(_2012, _3620.y, _3620.x * _2011)) + _3620.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3652)
                            {
                                float _3679 = _3547.x - _2011;
                                float _3680 = _3547.y - _2012;
                                float _3681 = _3547.z - _2013;
                                float _3682 = dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681));
                                float _3685 = inversesqrt(_3682);
                                float _3686 = _3685 * _3679;
                                float _3687 = _3685 * _3680;
                                float _3688 = _3685 * _3681;
                                float _3692 = 1.0 - (_3682 / (_3548 * _3548));
                                float _4892 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3697 = sqrt(_3682) * _3563.w;
                                float _3699 = 1.39999997615814208984375 / (_3697 + 1.39999997615814208984375);
                                float _3700 = _3699 * _3699;
                                float _3703 = ((1.0 - _3700) * dot(vec3(_3686, _3687, _3688), vec3(_867, _870, _873))) + _3700;
                                float _3706 = _3697 * _3697;
                                float _3710 = (fma(_2013, _3590.z, fma(_2012, _3590.y, _3590.x * _2011)) + _3590.w) / _3651;
                                float _3711 = (fma(_2013, _3605.z, fma(_2012, _3605.y, _3605.x * _2011)) + _3605.w) / _3651;
                                float _3715 = 1.0 - dot(vec2(_3710, _3711), vec2(_3710, _3711));
                                float _4908 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3717 = _3716 * (((isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))) * _3693) / ((_3706 * 0.699999988079071044921875) + 1.0));
                                float _3729 = exp2(log2(1.0 / ((_3706 * 3.5) + 5.0)) * 0.25);
                                float _3730 = 1.0 - _927;
                                float _3737 = sqrt(1.0 - ((1.0 - (_3730 * _3730)) * (1.0 - (_3729 * _3729))));
                                float _3738 = _3737 * _3737;
                                float _3739 = _3738 * _3738;
                                float _3740 = _3686 - _3160;
                                float _3741 = _3687 - _3161;
                                float _3742 = _3688 - _3162;
                                float _3746 = inversesqrt(dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742)));
                                float _3750 = dot(vec3(_867, _870, _873), vec3((-0.0) - _3160, (-0.0) - _3161, (-0.0) - _3162));
                                float _4919 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3754 = dot(vec3(_867, _870, _873), vec3(_3746 * _3740, _3746 * _3741, _3746 * _3742));
                                float _4930 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3761 = ((_3757 * _3757) * (_3739 + (-1.0))) + 1.0;
                                float _3762 = _3699 * _3738;
                                float _3763 = _3762 * _3762;
                                float _3769 = ((1.0 - _3763) * dot(vec3(_867, _870, _873), vec3(_3686, _3687, _3688))) + _3763;
                                float _4941 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3771 = 1.0 - _3738;
                                float _3781 = (0.5 / (((_3770 * ((_3753 * _3771) + _3738)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3738) * _3753))) * _3770;
                                float _4952 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3791 = (_3716 * _3693) * (((_3739 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3761 * _3761) * ((_3706 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3717 * _3563.z;
                                frontier_phi_88_pred_1 = _3717 * _3563.y;
                                frontier_phi_88_pred_2 = _3717 * _3563.x;
                                frontier_phi_88_pred_3 = _3791 * _3575.z;
                                frontier_phi_88_pred_4 = _3791 * _3575.y;
                                frontier_phi_88_pred_5 = _3791 * _3575.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3800 = frontier_phi_88_pred;
                            _3799 = frontier_phi_88_pred_1;
                            _3798 = frontier_phi_88_pred_2;
                            _3797 = frontier_phi_88_pred_3;
                            _3796 = frontier_phi_88_pred_4;
                            _3795 = frontier_phi_88_pred_5;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            if (_3522 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3522;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3507;
                        frontier_phi_82_pred_1 = _3506;
                        frontier_phi_82_pred_2 = _3505;
                        frontier_phi_82_pred_3 = _3504;
                        frontier_phi_82_pred_4 = _3503;
                        frontier_phi_82_pred_5 = _3502;
                    }
                    _3145 = frontier_phi_82_pred;
                    _3143 = frontier_phi_82_pred_1;
                    _3141 = frontier_phi_82_pred_2;
                    _3139 = frontier_phi_82_pred_3;
                    _3137 = frontier_phi_82_pred_4;
                    _3135 = frontier_phi_82_pred_5;
                    uint _3301 = _3300 + 1u;
                    if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3294 = _3135;
                        _3295 = _3137;
                        _3296 = _3139;
                        _3297 = _3141;
                        _3298 = _3143;
                        _3299 = _3145;
                        _3300 = _3301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3141;
                frontier_phi_63_64_ladder_1 = _3145;
                frontier_phi_63_64_ladder_2 = _3143;
                frontier_phi_63_64_ladder_3 = _3139;
                frontier_phi_63_64_ladder_4 = _3137;
                frontier_phi_63_64_ladder_5 = _3135;
            }
            else
            {
                frontier_phi_63_64_ladder = _3019;
                frontier_phi_63_64_ladder_1 = _3023;
                frontier_phi_63_64_ladder_2 = _3021;
                frontier_phi_63_64_ladder_3 = _3017;
                frontier_phi_63_64_ladder_4 = _3015;
                frontier_phi_63_64_ladder_5 = _3013;
            }
            _3134 = frontier_phi_63_64_ladder_5;
            _3136 = frontier_phi_63_64_ladder_4;
            _3138 = frontier_phi_63_64_ladder_3;
            _3140 = frontier_phi_63_64_ladder;
            _3142 = frontier_phi_63_64_ladder_2;
            _3144 = frontier_phi_63_64_ladder_1;
        }
        float _3149 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2946 = (_3149 * _3140) + _2477;
        _2948 = (_3149 * _3142) + _2479;
        _2950 = (_3149 * _3144) + _2481;
        _2952 = ((_3134 * 0.039999999105930328369140625) * _3149) + _2800;
        _2954 = ((_3136 * 0.039999999105930328369140625) * _3149) + _2802;
        _2956 = ((_3138 * 0.039999999105930328369140625) * _3149) + _2804;
    }
    else
    {
        _2946 = _2477;
        _2948 = _2479;
        _2950 = _2481;
        _2952 = _2800;
        _2954 = _2802;
        _2956 = _2804;
    }
    float _4968 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4979 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4990 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2973 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2946 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _911))) + ((_2952 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2974 = ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2948 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _911))) + ((_2954 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2975 = ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2950 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _911))) + ((_2956 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    uint _2976 = _274 + 6u;
    float _2984 = _848 / cbSceneParam._m0[86u].x;
    float _2985 = _849 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _770 : (isnan(_770) ? cbSceneParam._m0[77u].w : min(_770, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_770 > cbSceneParam._m0[78u].w)
    {
        float _3038 = isnan(_770) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _770 : min(cbSceneParam._m0[80u].w, _770));
        float _3039 = _3038 / _770;
        float _3050 = _3039 * _821;
        float _3051 = _822 * _3039;
        float _3052 = (-0.0) - _3051;
        float _3054 = _3039 * _823;
        float _3056 = (cbSceneParam._m0[77u].w * _3052) / _3038;
        float _3057 = _3056 + cbSceneParam._m0[79u].w;
        float _3058 = cbSceneParam._m0[79u].w - _3051;
        float _3064 = sqrt(((_3050 * _3050) + (_3051 * _3051)) + (_3054 * _3054));
        float _3067 = (1.0 - (cbSceneParam._m0[77u].w / _3038)) * _3064;
        float _3072 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3074 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3052 - _3056) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3057 > 0.0) ? exp2(_3072 * _3057) : (2.0 - exp2(_3074 * _3057))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3067;
        }
        else
        {
            float _3195 = 1.0 / cbSceneParam._m0[80u].x;
            float _3196 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : max(_3057, _3058));
            float _3197 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : min(_3057, _3058));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            _3251 = ((abs(_3064 / _3052) * cbSceneParam._m0[80u].y) * ((((_3206 - _3207) * 2.0) - ((exp2(_3072 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0)))) - exp2(_3072 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))))) * _3195)) - ((exp2(_3074 * _3206) - exp2(_3074 * _3207)) * _3195))) + (_3067 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3004);
        _3076 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3078 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3080 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3082 = _3262 * _3004;
    }
    else
    {
        _3076 = _3001;
        _3078 = _3002;
        _3080 = _3003;
        _3082 = _3004;
    }
    bool _3289;
    vec4 _3092;
    vec4 _3114;
    float _3116;
    float _3120;
    float _3121;
    float _3122;
    float _3123;
    bool _3133;
    for (;;)
    {
        _3092 = cbMatDynParam._m0[0u];
        float _3094 = roundEven(_3092.y);
        bool _3095 = _3094 == 3.0;
        float _3096 = log2(_3082);
        float _3103 = exp2(_3096 * cbSceneParam._m0[78u].x) * _2973;
        float _3104 = exp2(_3096 * cbSceneParam._m0[78u].y) * _2974;
        float _3105 = exp2(_3096 * cbSceneParam._m0[78u].z) * _2975;
        float _3112 = _837 + (-0.5);
        _3114 = cbMtdParam._m0[1u];
        _3116 = _3114.y * _3112;
        float _3119 = (_3094 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3120 = _3119 * (_3095 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3076)));
        _3121 = _3119 * (_3095 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3078)));
        _3122 = _3119 * (_3095 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3080)));
        _3123 = _3112 * 0.999000012874603271484375;
        _3133 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3133)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3123) < 0.5)
            {
                _3289 = true;
                break;
            }
        }
        uint _3230 = _886 + uint(_3092.w);
        if ((cbInstanceData._m0[_3230].w < 1.0) && ((cbInstanceData._m0[_3230].w + _3123) < 0.5))
        {
            _3289 = true;
            break;
        }
        if ((_3116 + 1.0) < _3114.x)
        {
            _3289 = true;
            break;
        }
        _3289 = false;
        break;
    }
    float _3493;
    if (_3289)
    {
        discard_state = true;
        _3493 = 0.0;
    }
    else
    {
        _3493 = cbInstanceData._m0[_2976].w;
    }
    SV_Target.x = _3120;
    SV_Target.y = _3121;
    SV_Target.z = _3122;
    SV_Target.w = _3493;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
    discard_exit();
}


