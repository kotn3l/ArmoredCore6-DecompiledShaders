#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1380;
float _4020;
float _4021;
float _4022;
float _4023;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4032 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4043 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4054 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4065 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _454 = (_447 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _455 = (_447 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _456 = (_447 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _473 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].z) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4076 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    float _533 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _527;
    float _536 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _528;
    float _539 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _529;
    float _546 = ((_527 - _533) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) + _533;
    float _547 = ((_528 - _536) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) + _536;
    float _548 = ((_529 - _539) * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) + _539;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _447) + _628;
    float _638 = ((_609.y - _629) * _447) + _629;
    float _639 = ((_609.z - _630) * _447) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_651.z - _639) * _520) + _639;
    float _667 = ((((_651.x - _637) * _520) + _637) * 2.0) + (-1.0);
    float _668 = ((((_651.y - _638) * _520) + _638) * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _4087 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _729 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_715 - _716) * cbMtdParam._m0[24u].w) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4098 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _737 = (_730 * ((_567.x * cbMtdParam._m0[18u].x) - _546)) + _546;
    float _738 = (_730 * ((_567.y * cbMtdParam._m0[18u].y) - _547)) + _547;
    float _739 = (_730 * ((_567.z * cbMtdParam._m0[18u].z) - _548)) + _548;
    float _744 = (((_586.z - _664) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _664;
    float _748 = ((_688.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4109 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = (_730 * (_761.z - _748)) + _748;
    float _787 = (_667 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_586.x * 2.0) + (-1.0)))) + (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = (_668 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_586.y * 2.0) + (-1.0)))) + (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _800 = (((_768 - _787) + (cbMtdParam._m0[21u].x * _787)) * _730) + _787;
    float _801 = (((_769 - _788) + (cbMtdParam._m0[21u].x * _788)) * _730) + _788;
    float _802 = (_730 * (sqrt(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) - _674)) + _674;
    float _804 = cbMtdParam._m0[22u].x + _688.w;
    float _807 = fma(_802, _244 * NORMAL.x, fma(_801, _251 * TANGENT.x, (_237 * _229) * _800));
    float _810 = fma(_802, _244 * NORMAL.y, fma(_801, _251 * TANGENT.y, (_237 * _230) * _800));
    float _813 = fma(_802, _244 * NORMAL.z, fma(_801, _251 * TANGENT.z, (_237 * _231) * _800));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _817 * _807;
    float _819 = _817 * _810;
    float _820 = _817 * _813;
    float _4120 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _821 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4142 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4153 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4164 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1061 = sqrt(((_891 * _891) + (_892 * _892)) + (_893 * _893));
        float _1067 = (cbMatDynParam._m0[5u].x * _1061) + cbMatDynParam._m0[5u].y;
        float _4175 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1072 = (cbMatDynParam._m0[5u].z * _1061) + cbMatDynParam._m0[5u].w;
        float _4186 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) - _1068)) + _1068) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_820, cbSceneParam._m0[5u].z, fma(_819, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _818));
    float _940 = fma(_820, cbSceneParam._m0[6u].z, fma(_819, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _818));
    float _943 = fma(_820, cbSceneParam._m0[7u].z, fma(_819, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _818));
    uint _956 = _278 + 9u;
    uint _957 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * cbInstanceData._m0[_957].z;
    float _4197 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _981 = ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_818, _819, _820), vec3(_898, _899, _900));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _818) - _898;
    float _990 = (_985 * _819) - _899;
    float _991 = (_985 * _820) - _900;
    float _995 = abs(dot(vec3(_898, _899, _900), vec3(_818, _819, _820)));
    float _4230 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_821);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1108 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1112 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1137 = _1042 + _818;
        float _1138 = _1046 + _819;
        float _1139 = _1050 + _820;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_818, _819, _820), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4278 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_818, _819, _820), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4311 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_818, _819, _820), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4344 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1425 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1429 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1452 = _1042 + _818;
        float _1453 = _1046 + _819;
        float _1454 = _1050 + _820;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_818, _819, _820), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4407 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_818, _819, _820), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4440 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_818, _819, _820), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4473 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = _1380;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1392)) + _1392;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1393)) + _1393;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1394)) + _1394;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _989 * 0.5;
    float _1759 = _990 * 0.5;
    float _1760 = _991 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1888 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1891 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1919 = frontier_phi_17_15_ladder;
        }
        float _2088;
        if (_1888 > 0.0)
        {
            _2088 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2088 = frontier_phi_26_22_ladder;
        }
        float _2383;
        if (_1891 > 0.0)
        {
            _2383 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2383 = frontier_phi_38_33_ladder;
        }
        float _2385 = isnan(_2088) ? _1919 : (isnan(_1919) ? _2088 : min(_1919, _2088));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1885) + _1874;
        float _2391 = (_2386 * _1888) + _1878;
        float _2392 = (_2386 * _1891) + _1882;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_16_38_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_16_38_ladder_2;
        _1909 = frontier_phi_16_38_ladder_1;
        _1911 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1827);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1983 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1986 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2093;
        if (_1980 > 0.0)
        {
            _2093 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2093 = frontier_phi_28_24_ladder;
        }
        float _2410;
        if (_1983 > 0.0)
        {
            _2410 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2410 = frontier_phi_40_35_ladder;
        }
        float _2737;
        if (_1986 > 0.0)
        {
            _2737 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2737 = frontier_phi_50_47_ladder;
        }
        float _2739 = isnan(_2410) ? _2093 : (isnan(_2093) ? _2410 : min(_2093, _2410));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _1980) + _1969;
        float _2745 = (_2740 * _1983) + _1973;
        float _2746 = (_2740 * _1986) + _1977;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_25_50_ladder = _2864.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2864.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2864.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_25_50_ladder_2;
        _2007 = frontier_phi_25_50_ladder_1;
        _2009 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1916);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2021 = ((((1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1010 * _997)) * _981;
    float _2022 = _2021 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2023 = _2021 * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2024 = _2021 * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2080 = _2067 / _2079;
    float _2081 = _2071 / _2079;
    float _2082 = _2075 / _2079;
    float _2229;
    float _2230;
    float _2231;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2109 = ((uint(_2082 > cbSceneParam._m0[59u].y) + uint(_2082 > cbSceneParam._m0[59u].x)) + uint(_2082 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2110 = _2109 + 43u;
        uint _2118 = _2109 + 44u;
        uint _2126 = _2109 + 45u;
        uint _2134 = _2109 + 46u;
        float _2145 = fma(_2079, cbSceneParam._m0[_2110].w, fma(_2075, cbSceneParam._m0[_2110].z, fma(_2071, cbSceneParam._m0[_2110].y, _2067 * cbSceneParam._m0[_2110].x)));
        float _2149 = fma(_2079, cbSceneParam._m0[_2118].w, fma(_2075, cbSceneParam._m0[_2118].z, fma(_2071, cbSceneParam._m0[_2118].y, _2067 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2079, cbSceneParam._m0[_2134].w, fma(_2075, cbSceneParam._m0[_2134].z, fma(_2071, cbSceneParam._m0[_2134].y, _2067 * cbSceneParam._m0[_2134].x)));
        float _2162 = cbSceneParam._m0[33u].z * _2157;
        float _2164 = cbSceneParam._m0[33u].w * _2157;
        float _2167 = fma(_2079, cbSceneParam._m0[_2126].w, fma(_2075, cbSceneParam._m0[_2126].z, fma(_2071, cbSceneParam._m0[_2126].y, _2067 * cbSceneParam._m0[_2126].x))) / _2157;
        float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
        float _4599 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2222 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2145) / _2157, (_2164 + _2149) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 + _2145) / _2157, (_2149 - _2162) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2162) / _2157, (_2149 - _2164) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2164) / _2157, (_2162 + _2149) / _2157), _2167), 0.0)).x), vec4(0.25)));
        _2229 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
        _2230 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
        _2231 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2229 = 1.0;
        _2230 = 1.0;
        _2231 = 1.0;
    }
    float _2295;
    float _2297;
    float _2299;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2283 = fma(_2079, cbSceneParam._m0[63u].w, fma(_2075, cbSceneParam._m0[63u].z, fma(_2071, cbSceneParam._m0[63u].y, _2067 * cbSceneParam._m0[63u].x)));
        float _2284 = fma(_2079, cbSceneParam._m0[60u].w, fma(_2075, cbSceneParam._m0[60u].z, fma(_2071, cbSceneParam._m0[60u].y, _2067 * cbSceneParam._m0[60u].x))) / _2283;
        float _2285 = fma(_2079, cbSceneParam._m0[61u].w, fma(_2075, cbSceneParam._m0[61u].z, fma(_2071, cbSceneParam._m0[61u].y, _2067 * cbSceneParam._m0[61u].x))) / _2283;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2284 >= cbSceneParam._m0[64u].x) && (_2285 >= cbSceneParam._m0[64u].y)) && (_2284 <= cbSceneParam._m0[64u].z)) && (_2285 <= cbSceneParam._m0[64u].w))
        {
            float _2423 = fma(_2079, cbSceneParam._m0[62u].w, fma(_2075, cbSceneParam._m0[62u].z, fma(_2071, cbSceneParam._m0[62u].y, _2067 * cbSceneParam._m0[62u].x))) / _2283;
            float _2427 = isnan(cbSceneParam._m0[41u].w) ? _2423 : (isnan(_2423) ? cbSceneParam._m0[41u].w : max(_2423, cbSceneParam._m0[41u].w));
            float _2470 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
            float _4615 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
            float _2477 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2284, cbSceneParam._m0[33u].w + _2285), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2284, _2285 - cbSceneParam._m0[33u].z), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].z, _2285 - cbSceneParam._m0[33u].w), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2285), _2427), 0.0)).x), vec4(0.25)));
            float _2481 = 1.0 - (_2477 * cbSceneParam._m0[34u].x);
            float _2482 = 1.0 - (_2477 * cbSceneParam._m0[34u].y);
            float _2483 = 1.0 - (_2477 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_37_36_ladder_1 = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_37_36_ladder_2 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
        }
        else
        {
            frontier_phi_37_36_ladder = _2231;
            frontier_phi_37_36_ladder_1 = _2230;
            frontier_phi_37_36_ladder_2 = _2229;
        }
        _2295 = frontier_phi_37_36_ladder_2;
        _2297 = frontier_phi_37_36_ladder_1;
        _2299 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2295 = _2229;
        _2297 = _2230;
        _2299 = _2231;
    }
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _981 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2342 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2346 = _2306 | 1u;
    float _2357 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_818, _819, _820));
    float _2360 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_818, _819, _820));
    float _4651 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _4662 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * 0.3183098733425140380859375;
    float _2367 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * 0.3183098733425140380859375;
    float _2374 = ((cbLight._m0[_2323].x * _2329) * _2367) + (((cbLight._m0[_2333].x * _2295) * _2342) * _2365);
    float _2375 = ((_2329 * cbLight._m0[_2323].y) * _2367) + (((cbLight._m0[_2333].y * _2297) * _2342) * _2365);
    float _2376 = ((_2329 * cbLight._m0[_2323].z) * _2367) + (((cbLight._m0[_2333].z * _2299) * _2342) * _2365);
    uvec4 _2380 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2382 = _2380.x == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2382)
    {
        _2484 = _2374;
        _2486 = _2375;
        _2488 = _2376;
    }
    else
    {
        uint _2492 = _2306 + 6u;
        float _2508 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4673 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2511 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2484 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2374;
        _2486 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2375;
        _2488 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2376;
    }
    bool _2491 = _2380.y == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2491)
    {
        _2546 = _2484;
        _2548 = _2486;
        _2550 = _2488;
    }
    else
    {
        uint _2708 = _2306 + 7u;
        float _2724 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2725 = _2724 * _2724;
        float _4689 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2726 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2727 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2546 = (((cbLight._m0[_2708].x * 0.3183098733425140380859375) * _2726) * _2727) + _2484;
        _2548 = (((cbLight._m0[_2708].y * 0.3183098733425140380859375) * _2726) * _2727) + _2486;
        _2550 = (((cbLight._m0[_2708].z * 0.3183098733425140380859375) * _2726) * _2727) + _2488;
    }
    uint _2553 = _2306 + 8u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _821) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2306].x + _898;
    float _2569 = cbLight._m0[_2306].y + _899;
    float _2570 = cbLight._m0[_2306].z + _900;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2306].xyz));
    float _4705 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _4716 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2582 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2583 = dot(vec3(_818, _819, _820), vec3(_2575, _2576, _2577));
    float _4727 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2575, _2576, _2577));
    float _4738 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2567 * _2567;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2607 = 1.0 - _2567;
    float _2618 = (0.5 / (((_2582 * ((_2581 * _2607) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2607) + _2567) * _2581))) * _2581;
    float _4749 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2634 = _2306 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _821) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2346].x + _898;
    float _2648 = cbLight._m0[_2346].y + _899;
    float _2649 = cbLight._m0[_2346].z + _900;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2346].xyz));
    float _4760 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2661 = dot(vec3(_818, _819, _820), vec3(_2654, _2655, _2656));
    float _4771 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2654, _2655, _2656));
    float _4782 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2682 = (exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2683 = 1.0 - _2646;
    float _2693 = (0.5 / (((_2582 * ((_2660 * _2683) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2683) + _2646) * _2660))) * _2660;
    float _4793 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2705 = (((_2682 * cbLight._m0[_2634].x) * _2695) * _2329) + ((((cbLight._m0[_2553].x * _2295) * _2606) * _2620) * _2342);
    float _2706 = (((_2682 * cbLight._m0[_2634].y) * _2695) * _2329) + ((((cbLight._m0[_2553].y * _2297) * _2606) * _2620) * _2342);
    float _2707 = (((_2682 * cbLight._m0[_2634].z) * _2695) * _2329) + ((((cbLight._m0[_2553].z * _2299) * _2606) * _2620) * _2342);
    float _2763;
    float _2765;
    float _2767;
    if (_2382)
    {
        _2763 = _2705;
        _2765 = _2706;
        _2767 = _2707;
    }
    else
    {
        uint _2769 = _2306 + 2u;
        uint _2773 = _2306 + 10u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _821) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _898;
        float _2790 = cbLight._m0[_2769].y + _899;
        float _2791 = cbLight._m0[_2769].z + _900;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2769].xyz));
        float _4804 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2803 = dot(vec3(_818, _819, _820), vec3(_2796, _2797, _2798));
        float _4815 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4826 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2824 = (exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2825 = 1.0 - _2788;
        float _2835 = (0.5 / (((_2582 * ((_2802 * _2825) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2825) + _2788) * _2802))) * _2802;
        float _4837 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2837 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2838 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2763 = (((_2824 * cbLight._m0[_2773].x) * _2837) * _2838) + _2705;
        _2765 = (((_2824 * cbLight._m0[_2773].y) * _2837) * _2838) + _2706;
        _2767 = (((_2824 * cbLight._m0[_2773].z) * _2837) * _2838) + _2707;
    }
    float _2869;
    float _2871;
    float _2873;
    if (_2491)
    {
        _2869 = _2763;
        _2871 = _2765;
        _2873 = _2767;
    }
    else
    {
        uint _2880 = _2306 + 3u;
        uint _2884 = _2306 + 11u;
        float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2880].w)) * _821) * 0.949999988079071044921875);
        float _2899 = _2898 * _2898;
        float _2900 = cbLight._m0[_2880].x + _898;
        float _2901 = cbLight._m0[_2880].y + _899;
        float _2902 = cbLight._m0[_2880].z + _900;
        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
        float _2907 = _2906 * _2900;
        float _2908 = _2906 * _2901;
        float _2909 = _2906 * _2902;
        float _2910 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2880].xyz));
        float _4853 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2914 = dot(vec3(_818, _819, _820), vec3(_2907, _2908, _2909));
        float _4864 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2918 = dot(vec3(cbLight._m0[_2880].xyz), vec3(_2907, _2908, _2909));
        float _4875 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2922 = _2899 * _2899;
        float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
        float _2935 = (exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2936 = 1.0 - _2899;
        float _2946 = (0.5 / (((_2582 * ((_2913 * _2936) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2936) + _2899) * _2913))) * _2913;
        float _4886 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2869 = (((_2935 * cbLight._m0[_2884].x) * _2948) * _2949) + _2763;
        _2871 = (((_2935 * cbLight._m0[_2884].y) * _2948) * _2949) + _2765;
        _2873 = (((_2935 * cbLight._m0[_2884].z) * _2948) * _2949) + _2767;
    }
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    if (_2304.y == 0u)
    {
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.x;
        uint _2982 = uint((float(_2970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2971))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2971)));
        float _2992 = (log2(_2082 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2993 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        uint _2996 = uint(isnan(14.0) ? _2993 : (isnan(_2993) ? 14.0 : min(_2993, 14.0)));
        uvec4 _3001 = texelFetch(g_lightClusterGridBuffer, int(((_2996 << 2u) + (_2982 << 6u)) >> 2u));
        uint _3002 = _3001.x;
        uint _3003 = _2970.z;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((((1u << ((_3003 >> 4u) & 15u)) + 4294967295u) & _3002) == 0u) || ((_3003 & 240u) == 0u))
        {
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
        }
        else
        {
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            uint _3241 = 0u;
            uint _3250;
            bool _3251;
            for (;;)
            {
                _3250 = texelFetch(g_lightClassification, int((((_2996 << 5u) + (_2982 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                _3251 = _3250 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3251)
                {
                    frontier_phi_71_pred = _3240;
                    frontier_phi_71_pred_1 = _3239;
                    frontier_phi_71_pred_2 = _3238;
                    frontier_phi_71_pred_3 = _3237;
                    frontier_phi_71_pred_4 = _3236;
                    frontier_phi_71_pred_5 = _3235;
                }
                else
                {
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    uint _3386;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3250;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    for (;;)
                    {
                        uint _3390 = uint(findLSB(_3386)) + (_3241 << 5u);
                        uint _3387 = (_3386 + 4294967295u) & _3386;
                        uint _3392 = _3390 * 48u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3412 = (_3390 * 48u) + 4u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3431 = (_3390 * 48u) + 8u;
                        vec3 _3442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x));
                        float _3446 = _3406.x - _2080;
                        float _3447 = _3406.y - _2081;
                        float _3448 = _3406.z - _2082;
                        float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                        float _3452 = inversesqrt(_3449);
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3456 = dot(vec3(_937, _940, _943), vec3(_3453, _3454, _3455));
                        float _3461 = 1.0 - (_3449 * _3406.w);
                        float _4912 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3463 = sqrt(_3449) * _3425.w;
                        float _3466 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3456) + _3467;
                        float _3473 = _3463 * _3463;
                        float _3477 = ((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3462) / ((_3473 * 0.699999988079071044921875) + 1.0);
                        float _3481 = (-0.0) - _2080;
                        float _3482 = (-0.0) - _2081;
                        float _3483 = (-0.0) - _2082;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3497 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _997;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3488 + _3453;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_937, _940, _943), vec3(_3488, _3489, _3490));
                        float _4928 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3522 = dot(vec3(_937, _940, _943), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4939 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3466 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3456) + _3531;
                        float _4950 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4961 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) / ((_3529 * _3529) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125))) * _3462;
                        _3310 = (_3477 * _3425.x) + _3383;
                        _3311 = (_3477 * _3425.y) + _3384;
                        _3312 = (_3477 * _3425.z) + _3385;
                        _3307 = (_3557 * _3442.x) + _3380;
                        _3308 = (_3557 * _3442.y) + _3381;
                        _3309 = (_3557 * _3442.z) + _3382;
                        if (_3387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3387;
                        }
                    }
                    frontier_phi_71_pred = _3312;
                    frontier_phi_71_pred_1 = _3311;
                    frontier_phi_71_pred_2 = _3310;
                    frontier_phi_71_pred_3 = _3309;
                    frontier_phi_71_pred_4 = _3308;
                    frontier_phi_71_pred_5 = _3307;
                }
                _3093 = frontier_phi_71_pred;
                _3091 = frontier_phi_71_pred_1;
                _3089 = frontier_phi_71_pred_2;
                _3087 = frontier_phi_71_pred_3;
                _3085 = frontier_phi_71_pred_4;
                _3083 = frontier_phi_71_pred_5;
                uint _3242 = _3241 + 1u;
                if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3235 = _3083;
                    _3236 = _3085;
                    _3237 = _3087;
                    _3238 = _3089;
                    _3239 = _3091;
                    _3240 = _3093;
                    _3241 = _3242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
        }
        uvec4 _3096 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3097 = _3096.z;
        uint _3099 = (_3097 >> 8u) & 15u;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((4294967295u << _3099) & _3002) == 0u)
        {
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
        }
        else
        {
            float _3228 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
            float _3229 = _3228 * _2080;
            float _3230 = _3228 * _2081;
            float _3231 = _3228 * _2082;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3099 < ((_3097 >> 12u) & 15u))
            {
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3363 = _3082;
                float _3364 = _3084;
                float _3365 = _3086;
                float _3366 = _3088;
                float _3367 = _3090;
                float _3368 = _3092;
                uint _3369 = _3099;
                uint _3378;
                bool _3379;
                for (;;)
                {
                    _3378 = texelFetch(g_lightClassification, int((((_2996 << 5u) + (_2982 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                    _3379 = _3378 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3379)
                    {
                        frontier_phi_82_pred = _3368;
                        frontier_phi_82_pred_1 = _3367;
                        frontier_phi_82_pred_2 = _3366;
                        frontier_phi_82_pred_3 = _3365;
                        frontier_phi_82_pred_4 = _3364;
                        frontier_phi_82_pred_5 = _3363;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        uint _3590 = _3378;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2082, _3708.z, fma(_2081, _3708.y, _3708.x * _2080)) + _3708.w;
                            _3721 = !((fma(_2082, _3689.z, fma(_2081, _3689.y, _3689.x * _2080)) + _3689.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2080;
                                float _3749 = _3616.y - _2081;
                                float _3750 = _3616.z - _2082;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _4972 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_937, _940, _943))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2082, _3659.z, fma(_2081, _3659.y, _3659.x * _2080)) + _3659.w) / _3720;
                                float _3780 = (fma(_2082, _3674.z, fma(_2081, _3674.y, _3674.x * _2080)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _4988 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3799 = 1.0 - _997;
                                float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                                float _3807 = _3806 * _3806;
                                float _3808 = _3807 * _3807;
                                float _3809 = _3755 - _3229;
                                float _3810 = _3756 - _3230;
                                float _3811 = _3757 - _3231;
                                float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                                float _3819 = dot(vec3(_937, _940, _943), vec3((-0.0) - _3229, (-0.0) - _3230, (-0.0) - _3231));
                                float _4999 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3823 = dot(vec3(_937, _940, _943), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                                float _5010 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                                float _3831 = _3768 * _3807;
                                float _3832 = _3831 * _3831;
                                float _3838 = ((1.0 - _3832) * dot(vec3(_937, _940, _943), vec3(_3755, _3756, _3757))) + _3832;
                                float _5021 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3840 = 1.0 - _3807;
                                float _3850 = (0.5 / (((_3839 * ((_3822 * _3840) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3807) * _3822))) * _3839;
                                float _5032 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3860 = (_3785 * _3762) * (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3830 * _3830) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3786 * _3632.z;
                                frontier_phi_88_pred_1 = _3786 * _3632.y;
                                frontier_phi_88_pred_2 = _3786 * _3632.x;
                                frontier_phi_88_pred_3 = _3860 * _3644.z;
                                frontier_phi_88_pred_4 = _3860 * _3644.y;
                                frontier_phi_88_pred_5 = _3860 * _3644.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3869 = frontier_phi_88_pred;
                            _3868 = frontier_phi_88_pred_1;
                            _3867 = frontier_phi_88_pred_2;
                            _3866 = frontier_phi_88_pred_3;
                            _3865 = frontier_phi_88_pred_4;
                            _3864 = frontier_phi_88_pred_5;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3576;
                        frontier_phi_82_pred_1 = _3575;
                        frontier_phi_82_pred_2 = _3574;
                        frontier_phi_82_pred_3 = _3573;
                        frontier_phi_82_pred_4 = _3572;
                        frontier_phi_82_pred_5 = _3571;
                    }
                    _3214 = frontier_phi_82_pred;
                    _3212 = frontier_phi_82_pred_1;
                    _3210 = frontier_phi_82_pred_2;
                    _3208 = frontier_phi_82_pred_3;
                    _3206 = frontier_phi_82_pred_4;
                    _3204 = frontier_phi_82_pred_5;
                    uint _3370 = _3369 + 1u;
                    if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3363 = _3204;
                        _3364 = _3206;
                        _3365 = _3208;
                        _3366 = _3210;
                        _3367 = _3212;
                        _3368 = _3214;
                        _3369 = _3370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3210;
                frontier_phi_63_64_ladder_1 = _3214;
                frontier_phi_63_64_ladder_2 = _3212;
                frontier_phi_63_64_ladder_3 = _3208;
                frontier_phi_63_64_ladder_4 = _3206;
                frontier_phi_63_64_ladder_5 = _3204;
            }
            else
            {
                frontier_phi_63_64_ladder = _3088;
                frontier_phi_63_64_ladder_1 = _3092;
                frontier_phi_63_64_ladder_2 = _3090;
                frontier_phi_63_64_ladder_3 = _3086;
                frontier_phi_63_64_ladder_4 = _3084;
                frontier_phi_63_64_ladder_5 = _3082;
            }
            _3203 = frontier_phi_63_64_ladder_5;
            _3205 = frontier_phi_63_64_ladder_4;
            _3207 = frontier_phi_63_64_ladder_3;
            _3209 = frontier_phi_63_64_ladder;
            _3211 = frontier_phi_63_64_ladder_2;
            _3213 = frontier_phi_63_64_ladder_1;
        }
        float _3218 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _3015 = (_3218 * _3209) + _2546;
        _3017 = (_3218 * _3211) + _2548;
        _3019 = (_3218 * _3213) + _2550;
        _3021 = ((_3203 * 0.039999999105930328369140625) * _3218) + _2869;
        _3023 = ((_3205 * 0.039999999105930328369140625) * _3218) + _2871;
        _3025 = ((_3207 * 0.039999999105930328369140625) * _3218) + _2873;
    }
    else
    {
        _3015 = _2546;
        _3017 = _2548;
        _3019 = _2550;
        _3021 = _2869;
        _3023 = _2871;
        _3025 = _2873;
    }
    float _5048 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _5059 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5070 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _3042 = ((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3015 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _981))) + ((_3021 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3043 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3017 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _981))) + ((_3023 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3044 = ((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3019 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _981))) + ((_3025 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    uint _3045 = _278 + 6u;
    float _3053 = _918 / cbSceneParam._m0[86u].x;
    float _3054 = _919 / cbSceneParam._m0[86u].y;
    vec4 _3068 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3053, _3054, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3070 = _3068.x;
    float _3071 = _3068.y;
    float _3072 = _3068.z;
    float _3073 = _3068.w;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _3107 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _3108 = _3107 / _839;
        float _3119 = _3108 * _891;
        float _3120 = _892 * _3108;
        float _3121 = (-0.0) - _3120;
        float _3123 = _3108 * _893;
        float _3125 = (cbSceneParam._m0[77u].w * _3121) / _3107;
        float _3126 = _3125 + cbSceneParam._m0[79u].w;
        float _3127 = cbSceneParam._m0[79u].w - _3120;
        float _3133 = sqrt(((_3119 * _3119) + (_3120 * _3120)) + (_3123 * _3123));
        float _3136 = (1.0 - (cbSceneParam._m0[77u].w / _3107)) * _3133;
        float _3141 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3143 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3320;
        if (abs((_3121 - _3125) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3320 = ((((_3126 > 0.0) ? exp2(_3141 * _3126) : (2.0 - exp2(_3143 * _3126))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3136;
        }
        else
        {
            float _3264 = 1.0 / cbSceneParam._m0[80u].x;
            float _3265 = isnan(_3127) ? _3126 : (isnan(_3126) ? _3127 : max(_3126, _3127));
            float _3266 = isnan(_3127) ? _3126 : (isnan(_3126) ? _3127 : min(_3126, _3127));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            _3320 = ((abs(_3133 / _3121) * cbSceneParam._m0[80u].y) * ((((_3275 - _3276) * 2.0) - ((exp2(_3141 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0)))) - exp2(_3141 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))))) * _3264)) - ((exp2(_3143 * _3275) - exp2(_3143 * _3276)) * _3264))) + (_3136 * cbSceneParam._m0[80u].z);
        }
        vec4 _3322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3053, _3054, 1.0), 0.0);
        float _3331 = exp2((_3320 * (-1.44269502162933349609375)) * (1.0 - _3322.w));
        float _3332 = log2(_3331);
        float _3348 = log2(_3073);
        _3145 = (exp2(_3348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].x)) * _3322.x) / cbSceneParam._m0[78u].x)) + _3070;
        _3147 = (exp2(_3348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].y)) * _3322.y) / cbSceneParam._m0[78u].y)) + _3071;
        _3149 = (exp2(_3348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].z)) * _3322.z) / cbSceneParam._m0[78u].z)) + _3072;
        _3151 = _3331 * _3073;
    }
    else
    {
        _3145 = _3070;
        _3147 = _3071;
        _3149 = _3072;
        _3151 = _3073;
    }
    bool _3358;
    vec4 _3161;
    vec4 _3183;
    float _3185;
    float _3189;
    float _3190;
    float _3191;
    float _3192;
    bool _3202;
    for (;;)
    {
        _3161 = cbMatDynParam._m0[0u];
        float _3163 = roundEven(_3161.y);
        bool _3164 = _3163 == 3.0;
        float _3165 = log2(_3151);
        float _3172 = exp2(_3165 * cbSceneParam._m0[78u].x) * _3042;
        float _3173 = exp2(_3165 * cbSceneParam._m0[78u].y) * _3043;
        float _3174 = exp2(_3165 * cbSceneParam._m0[78u].z) * _3044;
        float _3181 = _907 + (-0.5);
        _3183 = cbMtdParam._m0[1u];
        _3185 = _3183.y * _3181;
        float _3188 = (_3163 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3189 = _3188 * (_3164 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3145)));
        _3190 = _3188 * (_3164 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3147)));
        _3191 = _3188 * (_3164 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3149)));
        _3192 = _3181 * 0.999000012874603271484375;
        _3202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3202)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3192) < 0.5)
            {
                _3358 = true;
                break;
            }
        }
        uint _3299 = _956 + uint(_3161.w);
        if ((cbInstanceData._m0[_3299].w < 1.0) && ((cbInstanceData._m0[_3299].w + _3192) < 0.5))
        {
            _3358 = true;
            break;
        }
        if ((_3185 + 1.0) < _3183.x)
        {
            _3358 = true;
            break;
        }
        _3358 = false;
        break;
    }
    float _3562;
    if (_3358)
    {
        discard_state = true;
        _3562 = 0.0;
    }
    else
    {
        _3562 = cbInstanceData._m0[_3045].w;
    }
    SV_Target.x = _3189;
    SV_Target.y = _3190;
    SV_Target.z = _3191;
    SV_Target.w = _3562;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3045].w;
    discard_exit();
}


