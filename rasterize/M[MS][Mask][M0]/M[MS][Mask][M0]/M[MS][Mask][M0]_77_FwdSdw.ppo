#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3982 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3993 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _432) + _561;
    float _571 = ((_542.y - _562) * _432) + _562;
    float _572 = ((_542.z - _563) * _432) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _505) + _572;
    float _600 = ((((_584.x - _570) * _505) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _505) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _4004 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _634 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _635 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _638 = fma(_608, _243, fma(_635, _250, _634 * _236));
    float _641 = fma(_608, _244, fma(_635, _251, _634 * _237));
    float _644 = fma(_608, _245, fma(_635, _252, _634 * _238));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _684 = (cbMtdParam._m0[19u].x + dot(vec4(_648 * _638, _648 * _641, _648 * _644, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_677 - _678) * cbMtdParam._m0[24u].w) + _678) * cbMtdParam._m0[21u].z);
    float _4015 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _687 = (-0.0) - cbMtdParam._m0[24u].x;
    float _689 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
    float _697 = _685 - ((_685 * TEXCOORD_8.x) * _690);
    float _698 = _685 - ((_685 * TEXCOORD_8.y) * _690);
    float _699 = _685 - ((_685 * TEXCOORD_8.z) * _690);
    float _706 = (_697 * (cbMtdParam._m0[17u].x - _518)) + _518;
    float _707 = (_698 * (cbMtdParam._m0[17u].y - _521)) + _521;
    float _708 = (_699 * (cbMtdParam._m0[17u].z - _524)) + _524;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _722 = _720.x;
    float _723 = 1.0 - _722;
    float _751 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_722 - _723) * cbMtdParam._m0[24u].y) + _723) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4036 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _760 = ((((cbMtdParam._m0[10u].x - _706) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _752) + _706;
    float _761 = ((((cbMtdParam._m0[10u].y - _707) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _752) + _707;
    float _762 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _708)) * _752) + _708;
    float _766 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _787 = (_780.x * 2.0) + (-1.0);
    float _788 = (_780.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _4047 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = ((_780.z - _766) * _697) + _766;
    float _800 = ((cbMtdParam._m0[23u].y - _797) * _752) + _797;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _825 = (_819.x * 2.0) + (-1.0);
    float _826 = (_819.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _4058 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _842 = ((sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) - _608) * _699) + _608;
    float _845 = (((_787 - _634) * _697) + _634) + (cbMtdParam._m0[21u].x * _634);
    float _846 = (((_788 - _635) * _698) + _635) + (cbMtdParam._m0[21u].x * _635);
    float _857 = (((_825 - _845) + (_845 * cbMtdParam._m0[22u].z)) * _752) + _845;
    float _858 = (((_826 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _752) + _846;
    float _859 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) - _842)) + _842;
    float _861 = cbMtdParam._m0[22u].x + _622.w;
    float _864 = fma(_859, _243, fma(_858, _250, _857 * _236));
    float _867 = fma(_859, _244, fma(_858, _251, _857 * _237));
    float _870 = fma(_859, _245, fma(_858, _252, _857 * _238));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    float _875 = _874 * _864;
    float _876 = _874 * _867;
    float _877 = _874 * _870;
    float _4069 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _878 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4091 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4102 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4113 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _946 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _936);
    float _947 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _936);
    float _948 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _936);
    float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
    float _953 = _946 * _952;
    float _954 = _947 * _952;
    float _955 = _948 * _952;
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_877, cbSceneParam._m0[5u].z, fma(_876, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _875));
    float _983 = fma(_877, cbSceneParam._m0[6u].z, fma(_876, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _875));
    float _986 = fma(_877, cbSceneParam._m0[7u].z, fma(_876, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _875));
    uint _1000 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1006 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_1000].x;
    float _1007 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_1000].y;
    float _1008 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_1000].z;
    float _4124 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1024 = ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_875, _876, _877), vec3(_953, _954, _955));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _875) - _953;
    float _1033 = (_1028 * _876) - _954;
    float _1034 = (_1028 * _877) - _955;
    float _1038 = abs(dot(vec3(_953, _954, _955), vec3(_875, _876, _877)));
    float _4157 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_878);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1394;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1119 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1123 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1127 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1152 = _1085 + _875;
        float _1153 = _1089 + _876;
        float _1154 = _1093 + _877;
        float _1164 = fma(_1154, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152)) - _1119;
        float _1165 = fma(_1154, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152)) - _1123;
        float _1166 = fma(_1154, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152)) - _1127;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1119 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1123 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[34u].z) + ((((((_1127 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1222 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1188.x + (-0.5));
        float _1224 = _1222 * (_1188.y + (-0.5));
        float _1225 = _1222 * (_1188.z + (-0.5));
        float _1232 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1195.x + (-0.5));
        float _1234 = _1232 * (_1195.y + (-0.5));
        float _1235 = _1232 * (_1195.z + (-0.5));
        float _1242 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1202.x + (-0.5));
        float _1244 = _1242 * (_1202.y + (-0.5));
        float _1245 = _1242 * (_1202.z + (-0.5));
        float _1252 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1209.x + (-0.5));
        float _1254 = _1252 * (_1209.y + (-0.5));
        float _1255 = _1252 * (_1209.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1276 = (dot(vec3(_875, _876, _877), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1286 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4205 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1288 + 1.0))) + _1293) * _1256;
        float _1303 = _1224 * 0.5;
        float _1304 = _1234 * 0.5;
        float _1305 = _1244 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_875, _876, _877), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4238 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1330 + 1.0))) + _1335) * _1257;
        float _1345 = _1225 * 0.5;
        float _1346 = _1235 * 0.5;
        float _1347 = _1245 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_875, _876, _877), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4271 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1372 + 1.0))) + _1377) * _1258;
        _1394 = _1225;
        _1396 = _1224;
        _1397 = _1223;
        _1398 = _1235;
        _1399 = _1234;
        _1400 = _1233;
        _1401 = _1245;
        _1402 = _1244;
        _1403 = _1243;
        _1404 = _1258;
        _1405 = _1257;
        _1406 = _1256;
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1395;
        _1396 = _1395;
        _1397 = _1395;
        _1398 = _1395;
        _1399 = _1395;
        _1400 = _1395;
        _1401 = _1395;
        _1402 = _1395;
        _1403 = _1395;
        _1404 = _1395;
        _1405 = _1395;
        _1406 = _1395;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1437 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1441 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1464 = _1085 + _875;
        float _1465 = _1089 + _876;
        float _1466 = _1093 + _877;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_875, _876, _877), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4334 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_875, _876, _877), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4367 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_875, _876, _877), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4400 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1395;
        _1703 = _1395;
        _1704 = _1395;
        _1705 = _1395;
        _1706 = _1395;
        _1707 = _1395;
        _1708 = _1395;
        _1709 = _1395;
        _1710 = _1395;
        _1711 = _1395;
        _1712 = _1395;
        _1713 = _1395;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1407)) + _1407;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1408)) + _1408;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1409)) + _1409;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _1032 * 0.5;
    float _1771 = _1033 * 0.5;
    float _1772 = _1034 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1394, _1398, _1401, _1404));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1901 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1904 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1932 = frontier_phi_14_12_ladder;
        }
        float _2102;
        if (_1901 > 0.0)
        {
            _2102 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2102 = frontier_phi_23_19_ladder;
        }
        float _2397;
        if (_1904 > 0.0)
        {
            _2397 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2397 = frontier_phi_35_30_ladder;
        }
        float _2399 = isnan(_2102) ? _1932 : (isnan(_1932) ? _2102 : min(_1932, _2102));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1898) + _1887;
        float _2405 = (_2400 * _1901) + _1891;
        float _2406 = (_2400 * _1904) + _1895;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2407;
        float _2411 = _2407 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 > _2411) || ((_2405 < _2409) || ((_2404 < _2409) || (_2404 > _2411))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2406, cbModelParam._m0[9u].z, fma(_2405, cbModelParam._m0[9u].y, _2404 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2406, cbModelParam._m0[10u].z, fma(_2405, cbModelParam._m0[10u].y, _2404 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2406, cbModelParam._m0[11u].z, fma(_2405, cbModelParam._m0[11u].y, _2404 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_13_35_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_13_35_ladder_2;
        _1922 = frontier_phi_13_35_ladder_1;
        _1924 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1839);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1983 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _1987 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _1991 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _1994 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _1997 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2000 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2107;
        if (_1994 > 0.0)
        {
            _2107 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2107 = frontier_phi_25_21_ladder;
        }
        float _2424;
        if (_1997 > 0.0)
        {
            _2424 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2424 = frontier_phi_37_32_ladder;
        }
        float _2751;
        if (_2000 > 0.0)
        {
            _2751 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2751 = frontier_phi_47_44_ladder;
        }
        float _2753 = isnan(_2424) ? _2107 : (isnan(_2107) ? _2424 : min(_2107, _2424));
        float _2754 = isnan(_2751) ? _2753 : (isnan(_2753) ? _2751 : min(_2753, _2751));
        float _2758 = (_2754 * _1994) + _1983;
        float _2759 = (_2754 * _1997) + _1987;
        float _2760 = (_2754 * _2000) + _1991;
        float _2761 = _2754 * 9.9999997473787516355514526367188e-05;
        float _2762 = (-1.0) - _2761;
        float _2764 = _2761 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2760 > _2764) || ((_2760 < _2762) || ((_2759 > _2764) || ((_2759 < _2762) || ((_2758 < _2762) || (_2758 > _2764))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2760, cbModelParam._m0[17u].z, fma(_2759, cbModelParam._m0[17u].y, _2758 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2760, cbModelParam._m0[18u].z, fma(_2759, cbModelParam._m0[18u].y, _2758 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2760, cbModelParam._m0[19u].z, fma(_2759, cbModelParam._m0[19u].y, _2758 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_22_47_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2019 = frontier_phi_22_47_ladder_2;
        _2021 = frontier_phi_22_47_ladder_1;
        _2023 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1929);
        _2019 = _2003.x * cbModelParam._m0[1u].z;
        _2021 = _2003.y * cbModelParam._m0[1u].z;
        _2023 = _2003.z * cbModelParam._m0[1u].z;
    }
    float _2035 = ((((1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1053 * _1040)) * _1024;
    float _2036 = _2035 * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2037 = _2035 * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2038 = _2035 * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2036 * cbSceneParam._m0[91u].x));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2094 = _2081 / _2093;
    float _2095 = _2085 / _2093;
    float _2096 = _2089 / _2093;
    float _2243;
    float _2244;
    float _2245;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2123 = ((uint(_2096 > cbSceneParam._m0[59u].y) + uint(_2096 > cbSceneParam._m0[59u].x)) + uint(_2096 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2124 = _2123 + 43u;
        uint _2132 = _2123 + 44u;
        uint _2140 = _2123 + 45u;
        uint _2148 = _2123 + 46u;
        float _2159 = fma(_2093, cbSceneParam._m0[_2124].w, fma(_2089, cbSceneParam._m0[_2124].z, fma(_2085, cbSceneParam._m0[_2124].y, _2081 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2093, cbSceneParam._m0[_2132].w, fma(_2089, cbSceneParam._m0[_2132].z, fma(_2085, cbSceneParam._m0[_2132].y, _2081 * cbSceneParam._m0[_2132].x)));
        float _2171 = fma(_2093, cbSceneParam._m0[_2148].w, fma(_2089, cbSceneParam._m0[_2148].z, fma(_2085, cbSceneParam._m0[_2148].y, _2081 * cbSceneParam._m0[_2148].x)));
        float _2176 = cbSceneParam._m0[33u].z * _2171;
        float _2178 = cbSceneParam._m0[33u].w * _2171;
        float _2181 = fma(_2093, cbSceneParam._m0[_2140].w, fma(_2089, cbSceneParam._m0[_2140].z, fma(_2085, cbSceneParam._m0[_2140].y, _2081 * cbSceneParam._m0[_2140].x))) / _2171;
        float _2229 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
        float _4526 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2236 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2159) / _2171, (_2178 + _2163) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2159) / _2171, (_2163 - _2176) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2176) / _2171, (_2163 - _2178) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2178) / _2171, (_2176 + _2163) / _2171), _2181), 0.0)).x), vec4(0.25)));
        _2243 = 1.0 - (_2236 * cbSceneParam._m0[34u].x);
        _2244 = 1.0 - (_2236 * cbSceneParam._m0[34u].y);
        _2245 = 1.0 - (_2236 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2243 = 1.0;
        _2244 = 1.0;
        _2245 = 1.0;
    }
    float _2309;
    float _2311;
    float _2313;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2297 = fma(_2093, cbSceneParam._m0[63u].w, fma(_2089, cbSceneParam._m0[63u].z, fma(_2085, cbSceneParam._m0[63u].y, _2081 * cbSceneParam._m0[63u].x)));
        float _2298 = fma(_2093, cbSceneParam._m0[60u].w, fma(_2089, cbSceneParam._m0[60u].z, fma(_2085, cbSceneParam._m0[60u].y, _2081 * cbSceneParam._m0[60u].x))) / _2297;
        float _2299 = fma(_2093, cbSceneParam._m0[61u].w, fma(_2089, cbSceneParam._m0[61u].z, fma(_2085, cbSceneParam._m0[61u].y, _2081 * cbSceneParam._m0[61u].x))) / _2297;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2298 >= cbSceneParam._m0[64u].x) && (_2299 >= cbSceneParam._m0[64u].y)) && (_2298 <= cbSceneParam._m0[64u].z)) && (_2299 <= cbSceneParam._m0[64u].w))
        {
            float _2437 = fma(_2093, cbSceneParam._m0[62u].w, fma(_2089, cbSceneParam._m0[62u].z, fma(_2085, cbSceneParam._m0[62u].y, _2081 * cbSceneParam._m0[62u].x))) / _2297;
            float _2441 = isnan(cbSceneParam._m0[41u].w) ? _2437 : (isnan(_2437) ? cbSceneParam._m0[41u].w : max(_2437, cbSceneParam._m0[41u].w));
            float _2484 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
            float _4542 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
            float _2491 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2298, cbSceneParam._m0[33u].w + _2299), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2298, _2299 - cbSceneParam._m0[33u].z), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].z, _2299 - cbSceneParam._m0[33u].w), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2299), _2441), 0.0)).x), vec4(0.25)));
            float _2495 = 1.0 - (_2491 * cbSceneParam._m0[34u].x);
            float _2496 = 1.0 - (_2491 * cbSceneParam._m0[34u].y);
            float _2497 = 1.0 - (_2491 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
            frontier_phi_34_33_ladder_1 = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
            frontier_phi_34_33_ladder_2 = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
        }
        else
        {
            frontier_phi_34_33_ladder = _2245;
            frontier_phi_34_33_ladder_1 = _2244;
            frontier_phi_34_33_ladder_2 = _2243;
        }
        _2309 = frontier_phi_34_33_ladder_2;
        _2311 = frontier_phi_34_33_ladder_1;
        _2313 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2309 = _2243;
        _2311 = _2244;
        _2313 = _2245;
    }
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2328 = _1024 + (-1.0);
    float _2333 = (cbLight._m0[_2321].x * _2328) + 1.0;
    float _2334 = (cbLight._m0[_2321].y * _2328) + 1.0;
    float _2335 = (cbLight._m0[_2321].z * _2328) + 1.0;
    float _2336 = (cbLight._m0[_2321].w * _2328) + 1.0;
    uint _2337 = _2320 + 5u;
    float _2343 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2347 = _2320 + 4u;
    float _2356 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2360 = _2320 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_875, _876, _877));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_875, _876, _877));
    float _4578 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4589 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2337].x * _2343) * _2381) + (((cbLight._m0[_2347].x * _2309) * _2356) * _2379);
    float _2389 = ((_2343 * cbLight._m0[_2337].y) * _2381) + (((cbLight._m0[_2347].y * _2311) * _2356) * _2379);
    float _2390 = ((_2343 * cbLight._m0[_2337].z) * _2381) + (((cbLight._m0[_2347].z * _2313) * _2356) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2320 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2396)
    {
        _2498 = _2388;
        _2500 = _2389;
        _2502 = _2390;
    }
    else
    {
        uint _2506 = _2320 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2320 + 2u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4600 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2525 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2388;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2389;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2390;
    }
    bool _2505 = _2394.y == 0u;
    float _2560;
    float _2562;
    float _2564;
    if (_2505)
    {
        _2560 = _2498;
        _2562 = _2500;
        _2564 = _2502;
    }
    else
    {
        uint _2722 = _2320 + 7u;
        float _2738 = (dot(vec3(cbLight._m0[_2320 + 3u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4616 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2741 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2560 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2498;
        _2562 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2500;
        _2564 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2502;
    }
    uint _2567 = _2320 + 8u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _878) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2320].x + _953;
    float _2583 = cbLight._m0[_2320].y + _954;
    float _2584 = cbLight._m0[_2320].z + _955;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2320].xyz));
    float _4632 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _4643 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2596 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2597 = dot(vec3(_875, _876, _877), vec3(_2589, _2590, _2591));
    float _4654 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2589, _2590, _2591));
    float _4665 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2581 * _2581;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2621 = 1.0 - _2581;
    float _2632 = (0.5 / (((_2596 * ((_2595 * _2621) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2621) + _2581) * _2595))) * _2595;
    float _4676 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2634 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    uint _2648 = _2320 + 9u;
    float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _878) * 0.949999988079071044921875);
    float _2660 = _2659 * _2659;
    float _2661 = cbLight._m0[_2360].x + _953;
    float _2662 = cbLight._m0[_2360].y + _954;
    float _2663 = cbLight._m0[_2360].z + _955;
    float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
    float _2668 = _2667 * _2661;
    float _2669 = _2667 * _2662;
    float _2670 = _2667 * _2663;
    float _2671 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2360].xyz));
    float _4687 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2675 = dot(vec3(_875, _876, _877), vec3(_2668, _2669, _2670));
    float _4698 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2679 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2668, _2669, _2670));
    float _4709 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2683 = _2660 * _2660;
    float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
    float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2697 = 1.0 - _2660;
    float _2707 = (0.5 / (((_2596 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2697) + _2660) * _2674))) * _2674;
    float _4720 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2709 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
    float _2719 = (((_2696 * cbLight._m0[_2648].x) * _2709) * _2343) + ((((cbLight._m0[_2567].x * _2309) * _2620) * _2634) * _2356);
    float _2720 = (((_2696 * cbLight._m0[_2648].y) * _2709) * _2343) + ((((cbLight._m0[_2567].y * _2311) * _2620) * _2634) * _2356);
    float _2721 = (((_2696 * cbLight._m0[_2648].z) * _2709) * _2343) + ((((cbLight._m0[_2567].z * _2313) * _2620) * _2634) * _2356);
    float _2777;
    float _2779;
    float _2781;
    if (_2396)
    {
        _2777 = _2719;
        _2779 = _2720;
        _2781 = _2721;
    }
    else
    {
        uint _2783 = _2320 + 2u;
        uint _2787 = _2320 + 10u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _878) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _953;
        float _2804 = cbLight._m0[_2783].y + _954;
        float _2805 = cbLight._m0[_2783].z + _955;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2783].xyz));
        float _4731 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2817 = dot(vec3(_875, _876, _877), vec3(_2810, _2811, _2812));
        float _4742 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4753 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2838 = (exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2839 = 1.0 - _2802;
        float _2849 = (0.5 / (((_2596 * ((_2816 * _2839) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2839) + _2802) * _2816))) * _2816;
        float _4764 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2777 = (((_2838 * cbLight._m0[_2787].x) * _2851) * _2852) + _2719;
        _2779 = (((_2838 * cbLight._m0[_2787].y) * _2851) * _2852) + _2720;
        _2781 = (((_2838 * cbLight._m0[_2787].z) * _2851) * _2852) + _2721;
    }
    float _2883;
    float _2885;
    float _2887;
    if (_2505)
    {
        _2883 = _2777;
        _2885 = _2779;
        _2887 = _2781;
    }
    else
    {
        uint _2894 = _2320 + 3u;
        uint _2898 = _2320 + 11u;
        float _2912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2894].w)) * _878) * 0.949999988079071044921875);
        float _2913 = _2912 * _2912;
        float _2914 = cbLight._m0[_2894].x + _953;
        float _2915 = cbLight._m0[_2894].y + _954;
        float _2916 = cbLight._m0[_2894].z + _955;
        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
        float _2921 = _2920 * _2914;
        float _2922 = _2920 * _2915;
        float _2923 = _2920 * _2916;
        float _2924 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2894].xyz));
        float _4780 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2928 = dot(vec3(_875, _876, _877), vec3(_2921, _2922, _2923));
        float _4791 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2932 = dot(vec3(cbLight._m0[_2894].xyz), vec3(_2921, _2922, _2923));
        float _4802 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2936 = _2913 * _2913;
        float _2940 = ((_2931 * _2931) * (_2936 + (-1.0))) + 1.0;
        float _2949 = (exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2950 = 1.0 - _2913;
        float _2960 = (0.5 / (((_2596 * ((_2927 * _2950) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2950) + _2913) * _2927))) * _2927;
        float _4813 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2936 / ((_2940 * _2940) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2883 = (((_2949 * cbLight._m0[_2898].x) * _2962) * _2963) + _2777;
        _2885 = (((_2949 * cbLight._m0[_2898].y) * _2962) * _2963) + _2779;
        _2887 = (((_2949 * cbLight._m0[_2898].z) * _2962) * _2963) + _2781;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2318.y == 0u)
    {
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.x;
        uint _2996 = uint((float(_2984.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _2985))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _2985)));
        float _3006 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3007 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        uint _3010 = uint(isnan(14.0) ? _3007 : (isnan(_3007) ? 14.0 : min(_3007, 14.0)));
        uvec4 _3015 = texelFetch(g_lightClusterGridBuffer, int(((_3010 << 2u) + (_2996 << 6u)) >> 2u));
        uint _3016 = _3015.x;
        uint _3017 = _2984.z;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((((1u << ((_3017 >> 4u) & 15u)) + 4294967295u) & _3016) == 0u) || ((_3017 & 240u) == 0u))
        {
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
        }
        else
        {
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            uint _3246 = 0u;
            uint _3255;
            bool _3256;
            for (;;)
            {
                _3255 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                _3256 = _3255 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3256)
                {
                    frontier_phi_66_pred = _3245;
                    frontier_phi_66_pred_1 = _3244;
                    frontier_phi_66_pred_2 = _3243;
                    frontier_phi_66_pred_3 = _3242;
                    frontier_phi_66_pred_4 = _3241;
                    frontier_phi_66_pred_5 = _3240;
                }
                else
                {
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    uint _3370;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3255;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    for (;;)
                    {
                        uint _3374 = uint(findLSB(_3370)) + (_3246 << 5u);
                        uint _3371 = (_3370 + 4294967295u) & _3370;
                        uint _3376 = _3374 * 48u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3396 = (_3374 * 48u) + 4u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3415 = (_3374 * 48u) + 8u;
                        vec3 _3426 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x));
                        float _3430 = _3390.x - _2094;
                        float _3431 = _3390.y - _2095;
                        float _3432 = _3390.z - _2096;
                        float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                        float _3436 = inversesqrt(_3433);
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3440 = dot(vec3(_980, _983, _986), vec3(_3437, _3438, _3439));
                        float _3445 = 1.0 - (_3433 * _3390.w);
                        float _4839 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3447 = sqrt(_3433) * _3409.w;
                        float _3450 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3440) + _3451;
                        float _3457 = _3447 * _3447;
                        float _3461 = ((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3446) / ((_3457 * 0.699999988079071044921875) + 1.0);
                        float _3465 = (-0.0) - _2094;
                        float _3466 = (-0.0) - _2095;
                        float _3467 = (-0.0) - _2096;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3481 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                        float _3482 = 1.0 - _1040;
                        float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                        float _3490 = _3489 * _3489;
                        float _3491 = _3490 * _3490;
                        float _3492 = _3472 + _3437;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                        float _3502 = dot(vec3(_980, _983, _986), vec3(_3472, _3473, _3474));
                        float _4855 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3506 = dot(vec3(_980, _983, _986), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                        float _4866 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                        float _3514 = _3450 * _3490;
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3440) + _3515;
                        float _4877 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3520 = 1.0 - _3490;
                        float _3530 = (0.5 / (((_3519 * ((_3505 * _3520) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3490) * _3505))) * _3519;
                        float _4888 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3541 = (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) / ((_3513 * _3513) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125))) * _3446;
                        _3299 = (_3461 * _3409.x) + _3367;
                        _3300 = (_3461 * _3409.y) + _3368;
                        _3301 = (_3461 * _3409.z) + _3369;
                        _3296 = (_3541 * _3426.x) + _3364;
                        _3297 = (_3541 * _3426.y) + _3365;
                        _3298 = (_3541 * _3426.z) + _3366;
                        if (_3371 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3371;
                        }
                    }
                    frontier_phi_66_pred = _3301;
                    frontier_phi_66_pred_1 = _3300;
                    frontier_phi_66_pred_2 = _3299;
                    frontier_phi_66_pred_3 = _3298;
                    frontier_phi_66_pred_4 = _3297;
                    frontier_phi_66_pred_5 = _3296;
                }
                _3107 = frontier_phi_66_pred;
                _3105 = frontier_phi_66_pred_1;
                _3103 = frontier_phi_66_pred_2;
                _3101 = frontier_phi_66_pred_3;
                _3099 = frontier_phi_66_pred_4;
                _3097 = frontier_phi_66_pred_5;
                uint _3247 = _3246 + 1u;
                if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3240 = _3097;
                    _3241 = _3099;
                    _3242 = _3101;
                    _3243 = _3103;
                    _3244 = _3105;
                    _3245 = _3107;
                    _3246 = _3247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
        }
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.z;
        uint _3113 = (_3111 >> 8u) & 15u;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((4294967295u << _3113) & _3016) == 0u)
        {
            _3208 = _3096;
            _3210 = _3098;
            _3212 = _3100;
            _3214 = _3102;
            _3216 = _3104;
            _3218 = _3106;
        }
        else
        {
            float _3233 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _3234 = _3233 * _2094;
            float _3235 = _3233 * _2095;
            float _3236 = _3233 * _2096;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3113 < ((_3111 >> 12u) & 15u))
            {
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3347 = _3096;
                float _3348 = _3098;
                float _3349 = _3100;
                float _3350 = _3102;
                float _3351 = _3104;
                float _3352 = _3106;
                uint _3353 = _3113;
                uint _3362;
                bool _3363;
                for (;;)
                {
                    _3362 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                    _3363 = _3362 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3363)
                    {
                        frontier_phi_72_pred = _3352;
                        frontier_phi_72_pred_1 = _3351;
                        frontier_phi_72_pred_2 = _3350;
                        frontier_phi_72_pred_3 = _3349;
                        frontier_phi_72_pred_4 = _3348;
                        frontier_phi_72_pred_5 = _3347;
                    }
                    else
                    {
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3559 = _3347;
                        float _3560 = _3348;
                        float _3561 = _3349;
                        float _3562 = _3350;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        uint _3565 = _3362;
                        uint _3566;
                        vec4 _3591;
                        float _3592;
                        vec4 _3607;
                        vec3 _3619;
                        vec4 _3634;
                        vec4 _3649;
                        float _3695;
                        bool _3696;
                        for (;;)
                        {
                            uint _3576 = ((_3353 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3565));
                            _3566 = (_3565 + 4294967295u) & _3565;
                            uint _3578 = _3576 * 40u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3592 = _3591.w;
                            uint _3594 = (_3576 * 40u) + 4u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3609 = (_3576 * 40u) + 8u;
                            _3619 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x));
                            uint _3621 = (_3576 * 40u) + 16u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3576 * 40u) + 20u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3576 * 40u) + 24u;
                            vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3670 = (_3576 * 40u) + 28u;
                            vec4 _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            _3695 = fma(_2096, _3683.z, fma(_2095, _3683.y, _3683.x * _2094)) + _3683.w;
                            _3696 = !((fma(_2096, _3664.z, fma(_2095, _3664.y, _3664.x * _2094)) + _3664.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3696)
                            {
                                float _3723 = _3591.x - _2094;
                                float _3724 = _3591.y - _2095;
                                float _3725 = _3591.z - _2096;
                                float _3726 = dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725));
                                float _3729 = inversesqrt(_3726);
                                float _3730 = _3729 * _3723;
                                float _3731 = _3729 * _3724;
                                float _3732 = _3729 * _3725;
                                float _3736 = 1.0 - (_3726 / (_3592 * _3592));
                                float _4899 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3741 = sqrt(_3726) * _3607.w;
                                float _3743 = 1.39999997615814208984375 / (_3741 + 1.39999997615814208984375);
                                float _3744 = _3743 * _3743;
                                float _3747 = ((1.0 - _3744) * dot(vec3(_3730, _3731, _3732), vec3(_980, _983, _986))) + _3744;
                                float _3750 = _3741 * _3741;
                                float _3754 = (fma(_2096, _3634.z, fma(_2095, _3634.y, _3634.x * _2094)) + _3634.w) / _3695;
                                float _3755 = (fma(_2096, _3649.z, fma(_2095, _3649.y, _3649.x * _2094)) + _3649.w) / _3695;
                                float _3759 = 1.0 - dot(vec2(_3754, _3755), vec2(_3754, _3755));
                                float _4915 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3761 = _3760 * (((isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0))) * _3737) / ((_3750 * 0.699999988079071044921875) + 1.0));
                                float _3773 = exp2(log2(1.0 / ((_3750 * 3.5) + 5.0)) * 0.25);
                                float _3774 = 1.0 - _1040;
                                float _3781 = sqrt(1.0 - ((1.0 - (_3774 * _3774)) * (1.0 - (_3773 * _3773))));
                                float _3782 = _3781 * _3781;
                                float _3783 = _3782 * _3782;
                                float _3784 = _3730 - _3234;
                                float _3785 = _3731 - _3235;
                                float _3786 = _3732 - _3236;
                                float _3790 = inversesqrt(dot(vec3(_3784, _3785, _3786), vec3(_3784, _3785, _3786)));
                                float _3794 = dot(vec3(_980, _983, _986), vec3((-0.0) - _3234, (-0.0) - _3235, (-0.0) - _3236));
                                float _4926 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3798 = dot(vec3(_980, _983, _986), vec3(_3790 * _3784, _3790 * _3785, _3790 * _3786));
                                float _4937 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3805 = ((_3801 * _3801) * (_3783 + (-1.0))) + 1.0;
                                float _3806 = _3743 * _3782;
                                float _3807 = _3806 * _3806;
                                float _3813 = ((1.0 - _3807) * dot(vec3(_980, _983, _986), vec3(_3730, _3731, _3732))) + _3807;
                                float _4948 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3815 = 1.0 - _3782;
                                float _3825 = (0.5 / (((_3814 * ((_3797 * _3815) + _3782)) + 9.9999999392252902907785028219223e-09) + (((_3814 * _3815) + _3782) * _3797))) * _3814;
                                float _4959 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3835 = (_3760 * _3737) * (((_3783 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3805 * _3805) * ((_3750 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3761 * _3607.y;
                                frontier_phi_78_pred_1 = _3761 * _3607.x;
                                frontier_phi_78_pred_2 = _3835 * _3619.z;
                                frontier_phi_78_pred_3 = _3835 * _3619.y;
                                frontier_phi_78_pred_4 = _3835 * _3619.x;
                                frontier_phi_78_pred_5 = _3761 * _3607.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3843 = frontier_phi_78_pred;
                            _3842 = frontier_phi_78_pred_1;
                            _3841 = frontier_phi_78_pred_2;
                            _3840 = frontier_phi_78_pred_3;
                            _3839 = frontier_phi_78_pred_4;
                            _3844 = frontier_phi_78_pred_5;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            if (_3566 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3566;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3551;
                        frontier_phi_72_pred_1 = _3550;
                        frontier_phi_72_pred_2 = _3549;
                        frontier_phi_72_pred_3 = _3548;
                        frontier_phi_72_pred_4 = _3547;
                        frontier_phi_72_pred_5 = _3546;
                    }
                    _3219 = frontier_phi_72_pred;
                    _3217 = frontier_phi_72_pred_1;
                    _3215 = frontier_phi_72_pred_2;
                    _3213 = frontier_phi_72_pred_3;
                    _3211 = frontier_phi_72_pred_4;
                    _3209 = frontier_phi_72_pred_5;
                    uint _3354 = _3353 + 1u;
                    if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3347 = _3209;
                        _3348 = _3211;
                        _3349 = _3213;
                        _3350 = _3215;
                        _3351 = _3217;
                        _3352 = _3219;
                        _3353 = _3354;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3219;
                frontier_phi_60_61_ladder_1 = _3217;
                frontier_phi_60_61_ladder_2 = _3213;
                frontier_phi_60_61_ladder_3 = _3211;
                frontier_phi_60_61_ladder_4 = _3209;
                frontier_phi_60_61_ladder_5 = _3215;
            }
            else
            {
                frontier_phi_60_61_ladder = _3106;
                frontier_phi_60_61_ladder_1 = _3104;
                frontier_phi_60_61_ladder_2 = _3100;
                frontier_phi_60_61_ladder_3 = _3098;
                frontier_phi_60_61_ladder_4 = _3096;
                frontier_phi_60_61_ladder_5 = _3102;
            }
            _3208 = frontier_phi_60_61_ladder_4;
            _3210 = frontier_phi_60_61_ladder_3;
            _3212 = frontier_phi_60_61_ladder_2;
            _3214 = frontier_phi_60_61_ladder_5;
            _3216 = frontier_phi_60_61_ladder_1;
            _3218 = frontier_phi_60_61_ladder;
        }
        float _3223 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3029 = (_3223 * _3214) + _2560;
        _3031 = (_3223 * _3216) + _2562;
        _3033 = (_3223 * _3218) + _2564;
        _3035 = ((_3208 * 0.039999999105930328369140625) * _3223) + _2883;
        _3037 = ((_3210 * 0.039999999105930328369140625) * _3223) + _2885;
        _3039 = ((_3212 * 0.039999999105930328369140625) * _3223) + _2887;
    }
    else
    {
        _3029 = _2560;
        _3031 = _2562;
        _3033 = _2564;
        _3035 = _2883;
        _3037 = _2885;
        _3039 = _2887;
    }
    float _4975 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4986 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4997 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    uint _3059 = _255 + 6u;
    float _3067 = _961 / cbSceneParam._m0[86u].x;
    float _3068 = _962 / cbSceneParam._m0[86u].y;
    vec4 _3082 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3084 = _3082.x;
    float _3085 = _3082.y;
    float _3086 = _3082.z;
    float _3087 = _3082.w;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _3121 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _3122 = _3121 / _896;
        float _3133 = _3122 * _946;
        float _3134 = _947 * _3122;
        float _3135 = (-0.0) - _3134;
        float _3136 = _3122 * _948;
        float _3138 = (cbSceneParam._m0[77u].w * _3135) / _3121;
        float _3139 = _3138 + cbSceneParam._m0[79u].w;
        float _3140 = cbSceneParam._m0[79u].w - _3134;
        float _3146 = sqrt(((_3133 * _3133) + (_3134 * _3134)) + (_3136 * _3136));
        float _3149 = (1.0 - (cbSceneParam._m0[77u].w / _3121)) * _3146;
        float _3154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3309;
        if (abs((_3135 - _3138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3309 = ((((_3139 > 0.0) ? exp2(_3154 * _3139) : (2.0 - exp2(_3156 * _3139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3149;
        }
        else
        {
            float _3269 = 1.0 / cbSceneParam._m0[80u].x;
            float _3270 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : max(_3139, _3140));
            float _3271 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : min(_3139, _3140));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            _3309 = ((abs(_3146 / _3135) * cbSceneParam._m0[80u].y) * ((((_3280 - _3281) * 2.0) - ((exp2(_3154 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0)))) - exp2(_3154 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))))) * _3269)) - ((exp2(_3156 * _3280) - exp2(_3156 * _3281)) * _3269))) + (_3149 * cbSceneParam._m0[80u].z);
        }
        vec4 _3311 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, 1.0), 0.0);
        float _3320 = exp2((_3309 * (-1.44269502162933349609375)) * (1.0 - _3311.w));
        float _3321 = log2(_3320);
        float _3337 = log2(_3087);
        _3158 = (exp2(_3337 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].x)) * _3311.x) / cbSceneParam._m0[78u].x)) + _3084;
        _3160 = (exp2(_3337 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].y)) * _3311.y) / cbSceneParam._m0[78u].y)) + _3085;
        _3162 = (exp2(_3337 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].z)) * _3311.z) / cbSceneParam._m0[78u].z)) + _3086;
        _3164 = _3320 * _3087;
    }
    else
    {
        _3158 = _3084;
        _3160 = _3085;
        _3162 = _3086;
        _3164 = _3087;
    }
    float _3176 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3177 = _3176 == 3.0;
    float _3178 = log2(_3164);
    float _3185 = exp2(_3178 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_3029 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1024))) + ((_3035 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _3186 = exp2(_3178 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_3031 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1024))) + ((_3037 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _3187 = exp2(_3178 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_3033 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1024))) + ((_3039 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _3196 = (_3176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3196 * (_3177 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3158)));
    SV_Target.y = _3196 * (_3177 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3160)));
    SV_Target.z = _3196 * (_3177 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3162)));
    SV_Target.w = cbInstanceData._m0[_3059].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3059].w;
}


