#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1226;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3815 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3826 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3837 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3848 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _437 = (_430 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _438 = (_430 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _439 = (_430 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3859 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _579 = fma(_543, _231, fma(_576, _238, _575 * _224));
    float _582 = fma(_543, _232, fma(_576, _239, _575 * _225));
    float _585 = fma(_543, _233, fma(_576, _240, _575 * _226));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _625 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_618 - _619) * cbMtdParam._m0[24u].w) + _619) * cbMtdParam._m0[21u].z);
    float _3870 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _456)) + _456;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _457)) + _457;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _458)) + _458;
    float _640 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _644 = ((_563.z - _640) * cbMtdParam._m0[19u].w) + _640;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _664 = (_657.x * 2.0) + (-1.0);
    float _665 = (_657.y * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3881 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _674 = ((_657.z - _644) * _626) + _644;
    float _684 = ((sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _543) * _626) + _543;
    float _687 = (((_664 - _575) * _626) + _575) + (cbMtdParam._m0[21u].x * _575);
    float _688 = (((_665 - _576) * _626) + _576) + (cbMtdParam._m0[21u].x * _576);
    float _690 = cbMtdParam._m0[22u].x + _563.w;
    float _693 = fma(_684, _231, fma(_688, _238, _687 * _224));
    float _696 = fma(_684, _232, fma(_688, _239, _687 * _225));
    float _699 = fma(_684, _233, fma(_688, _240, _687 * _226));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3892 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _707 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3914 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3925 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3936 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _814 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _817 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _831 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3947 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _855 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _851.x;
    float _856 = dot(vec3(_704, _705, _706), vec3(_784, _785, _786));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _704) - _784;
    float _864 = (_859 * _705) - _785;
    float _865 = (_859 * _706) - _786;
    float _869 = abs(dot(vec3(_784, _785, _786), vec3(_704, _705, _706)));
    float _3980 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_707);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _954 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _958 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _983 = _916 + _704;
        float _984 = _920 + _705;
        float _985 = _924 + _706;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_704, _705, _706), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4028 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_704, _705, _706), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4061 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_704, _705, _706), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4094 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1269 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1273 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1296 = _916 + _704;
        float _1297 = _920 + _705;
        float _1298 = _924 + _706;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_704, _705, _706), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4157 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_704, _705, _706), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4190 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_704, _705, _706), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4223 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1226;
        _1535 = _1226;
        _1536 = _1226;
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _863 * 0.5;
    float _1603 = _864 * 0.5;
    float _1604 = _865 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1645;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1656;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1647 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1660 = (_1656 * cbModelParam._m0[1u].x) + (_1645 * (1.0 - cbModelParam._m0[1u].x));
    float _1670 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1670 : min(cbModelParam._m0[25u].z, _1670));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1719 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1723 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1727 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1730 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1733 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1736 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1764;
        if (_1730 > 0.0)
        {
            _1764 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1764 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1733 > 0.0)
        {
            _1934 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2229;
        if (_1736 > 0.0)
        {
            _2229 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2229 = frontier_phi_35_30_ladder;
        }
        float _2231 = isnan(_1934) ? _1764 : (isnan(_1764) ? _1934 : min(_1764, _1934));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1730) + _1719;
        float _2237 = (_2232 * _1733) + _1723;
        float _2238 = (_2232 * _1736) + _1727;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1671);
            frontier_phi_13_35_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1752 = frontier_phi_13_35_ladder_2;
        _1754 = frontier_phi_13_35_ladder_1;
        _1756 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1671);
        _1752 = _1740.x * cbModelParam._m0[1u].y;
        _1754 = _1740.y * cbModelParam._m0[1u].y;
        _1756 = _1740.z * cbModelParam._m0[1u].y;
    }
    float _1760 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1760 : min(cbModelParam._m0[25u].w, _1760));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1829 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1832 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1939;
        if (_1826 > 0.0)
        {
            _1939 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2256;
        if (_1829 > 0.0)
        {
            _2256 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2256 = frontier_phi_37_32_ladder;
        }
        float _2583;
        if (_1832 > 0.0)
        {
            _2583 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2583 = frontier_phi_47_44_ladder;
        }
        float _2585 = isnan(_2256) ? _1939 : (isnan(_1939) ? _2256 : min(_1939, _2256));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1826) + _1815;
        float _2591 = (_2586 * _1829) + _1819;
        float _2592 = (_2586 * _1832) + _1823;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1761);
            frontier_phi_22_47_ladder = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_22_47_ladder_2;
        _1853 = frontier_phi_22_47_ladder_1;
        _1855 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1761);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1867 = ((((1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_884 * _871)) * _855;
    float _1868 = _1867 * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1869 = _1867 * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1870 = _1867 * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1926 = _1913 / _1925;
    float _1927 = _1917 / _1925;
    float _1928 = _1921 / _1925;
    float _2075;
    float _2076;
    float _2077;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1955 = ((uint(_1928 > cbSceneParam._m0[59u].y) + uint(_1928 > cbSceneParam._m0[59u].x)) + uint(_1928 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1956 = _1955 + 43u;
        uint _1964 = _1955 + 44u;
        uint _1972 = _1955 + 45u;
        uint _1980 = _1955 + 46u;
        float _1991 = fma(_1925, cbSceneParam._m0[_1956].w, fma(_1921, cbSceneParam._m0[_1956].z, fma(_1917, cbSceneParam._m0[_1956].y, _1913 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1925, cbSceneParam._m0[_1964].w, fma(_1921, cbSceneParam._m0[_1964].z, fma(_1917, cbSceneParam._m0[_1964].y, _1913 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1925, cbSceneParam._m0[_1980].w, fma(_1921, cbSceneParam._m0[_1980].z, fma(_1917, cbSceneParam._m0[_1980].y, _1913 * cbSceneParam._m0[_1980].x)));
        float _2008 = cbSceneParam._m0[33u].z * _2003;
        float _2010 = cbSceneParam._m0[33u].w * _2003;
        float _2013 = fma(_1925, cbSceneParam._m0[_1972].w, fma(_1921, cbSceneParam._m0[_1972].z, fma(_1917, cbSceneParam._m0[_1972].y, _1913 * cbSceneParam._m0[_1972].x))) / _2003;
        float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
        float _4349 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2068 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1991) / _2003, (_2010 + _1995) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1991) / _2003, (_1995 - _2008) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2008) / _2003, (_1995 - _2010) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2010) / _2003, (_2008 + _1995) / _2003), _2013), 0.0)).x), vec4(0.25)));
        _2075 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
        _2076 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
        _2077 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2075 = 1.0;
        _2076 = 1.0;
        _2077 = 1.0;
    }
    float _2141;
    float _2143;
    float _2145;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2129 = fma(_1925, cbSceneParam._m0[63u].w, fma(_1921, cbSceneParam._m0[63u].z, fma(_1917, cbSceneParam._m0[63u].y, _1913 * cbSceneParam._m0[63u].x)));
        float _2130 = fma(_1925, cbSceneParam._m0[60u].w, fma(_1921, cbSceneParam._m0[60u].z, fma(_1917, cbSceneParam._m0[60u].y, _1913 * cbSceneParam._m0[60u].x))) / _2129;
        float _2131 = fma(_1925, cbSceneParam._m0[61u].w, fma(_1921, cbSceneParam._m0[61u].z, fma(_1917, cbSceneParam._m0[61u].y, _1913 * cbSceneParam._m0[61u].x))) / _2129;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2130 >= cbSceneParam._m0[64u].x) && (_2131 >= cbSceneParam._m0[64u].y)) && (_2130 <= cbSceneParam._m0[64u].z)) && (_2131 <= cbSceneParam._m0[64u].w))
        {
            float _2269 = fma(_1925, cbSceneParam._m0[62u].w, fma(_1921, cbSceneParam._m0[62u].z, fma(_1917, cbSceneParam._m0[62u].y, _1913 * cbSceneParam._m0[62u].x))) / _2129;
            float _2273 = isnan(cbSceneParam._m0[41u].w) ? _2269 : (isnan(_2269) ? cbSceneParam._m0[41u].w : max(_2269, cbSceneParam._m0[41u].w));
            float _2316 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
            float _4365 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
            float _2323 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2130, cbSceneParam._m0[33u].w + _2131), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2130, _2131 - cbSceneParam._m0[33u].z), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].z, _2131 - cbSceneParam._m0[33u].w), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2131), _2273), 0.0)).x), vec4(0.25)));
            float _2327 = 1.0 - (_2323 * cbSceneParam._m0[34u].x);
            float _2328 = 1.0 - (_2323 * cbSceneParam._m0[34u].y);
            float _2329 = 1.0 - (_2323 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_34_33_ladder_1 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_34_33_ladder_2 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
        }
        else
        {
            frontier_phi_34_33_ladder = _2077;
            frontier_phi_34_33_ladder_1 = _2076;
            frontier_phi_34_33_ladder_2 = _2075;
        }
        _2141 = frontier_phi_34_33_ladder_2;
        _2143 = frontier_phi_34_33_ladder_1;
        _2145 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2141 = _2075;
        _2143 = _2076;
        _2145 = _2077;
    }
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _855 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2188 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2192 = _2152 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_704, _705, _706));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_704, _705, _706));
    float _4401 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4412 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2169].x * _2175) * _2213) + (((cbLight._m0[_2179].x * _2141) * _2188) * _2211);
    float _2221 = ((_2175 * cbLight._m0[_2169].y) * _2213) + (((cbLight._m0[_2179].y * _2143) * _2188) * _2211);
    float _2222 = ((_2175 * cbLight._m0[_2169].z) * _2213) + (((cbLight._m0[_2179].z * _2145) * _2188) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2228)
    {
        _2330 = _2220;
        _2332 = _2221;
        _2334 = _2222;
    }
    else
    {
        uint _2338 = _2152 + 6u;
        float _2354 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4423 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2357 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2330 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2220;
        _2332 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2221;
        _2334 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2222;
    }
    bool _2337 = _2226.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2337)
    {
        _2392 = _2330;
        _2394 = _2332;
        _2396 = _2334;
    }
    else
    {
        uint _2554 = _2152 + 7u;
        float _2570 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4439 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2573 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2392 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2330;
        _2394 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2332;
        _2396 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2334;
    }
    uint _2399 = _2152 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _707) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2152].x + _784;
    float _2415 = cbLight._m0[_2152].y + _785;
    float _2416 = cbLight._m0[_2152].z + _786;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2152].xyz));
    float _4455 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2428 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2429 = dot(vec3(_704, _705, _706), vec3(_2421, _2422, _2423));
    float _4477 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2421, _2422, _2423));
    float _4488 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2452 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2453 = 1.0 - _2413;
    float _2464 = (0.5 / (((_2428 * ((_2427 * _2453) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2453) + _2413) * _2427))) * _2427;
    float _4499 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2480 = _2152 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _707) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2192].x + _784;
    float _2494 = cbLight._m0[_2192].y + _785;
    float _2495 = cbLight._m0[_2192].z + _786;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2192].xyz));
    float _4510 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2507 = dot(vec3(_704, _705, _706), vec3(_2500, _2501, _2502));
    float _4521 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2500, _2501, _2502));
    float _4532 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2529 = 1.0 - _2492;
    float _2539 = (0.5 / (((_2428 * ((_2506 * _2529) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2529) + _2492) * _2506))) * _2506;
    float _4543 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2551 = (((_2528 * cbLight._m0[_2480].x) * _2541) * _2175) + ((((cbLight._m0[_2399].x * _2141) * _2452) * _2466) * _2188);
    float _2552 = (((_2528 * cbLight._m0[_2480].y) * _2541) * _2175) + ((((cbLight._m0[_2399].y * _2143) * _2452) * _2466) * _2188);
    float _2553 = (((_2528 * cbLight._m0[_2480].z) * _2541) * _2175) + ((((cbLight._m0[_2399].z * _2145) * _2452) * _2466) * _2188);
    float _2609;
    float _2611;
    float _2613;
    if (_2228)
    {
        _2609 = _2551;
        _2611 = _2552;
        _2613 = _2553;
    }
    else
    {
        uint _2615 = _2152 + 2u;
        uint _2619 = _2152 + 10u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _707) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _784;
        float _2636 = cbLight._m0[_2615].y + _785;
        float _2637 = cbLight._m0[_2615].z + _786;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2615].xyz));
        float _4554 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2649 = dot(vec3(_704, _705, _706), vec3(_2642, _2643, _2644));
        float _4565 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4576 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2428 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2671) + _2634) * _2648))) * _2648;
        float _4587 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2609 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2551;
        _2611 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2552;
        _2613 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2553;
    }
    float _2715;
    float _2717;
    float _2719;
    if (_2337)
    {
        _2715 = _2609;
        _2717 = _2611;
        _2719 = _2613;
    }
    else
    {
        uint _2726 = _2152 + 3u;
        uint _2730 = _2152 + 11u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _707) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _784;
        float _2747 = cbLight._m0[_2726].y + _785;
        float _2748 = cbLight._m0[_2726].z + _786;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2726].xyz));
        float _4603 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2760 = dot(vec3(_704, _705, _706), vec3(_2753, _2754, _2755));
        float _4614 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4625 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2781 = (exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2782 = 1.0 - _2745;
        float _2792 = (0.5 / (((_2428 * ((_2759 * _2782) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2782) + _2745) * _2759))) * _2759;
        float _4636 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2715 = (((_2781 * cbLight._m0[_2730].x) * _2794) * _2795) + _2609;
        _2717 = (((_2781 * cbLight._m0[_2730].y) * _2794) * _2795) + _2611;
        _2719 = (((_2781 * cbLight._m0[_2730].z) * _2794) * _2795) + _2613;
    }
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_2150.y == 0u)
    {
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.x;
        uint _2828 = uint((float(_2816.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2817))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2817)));
        float _2838 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2839 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        uint _2842 = uint(isnan(14.0) ? _2839 : (isnan(_2839) ? 14.0 : min(_2839, 14.0)));
        uvec4 _2847 = texelFetch(g_lightClusterGridBuffer, int(((_2842 << 2u) + (_2828 << 6u)) >> 2u));
        uint _2848 = _2847.x;
        uint _2849 = _2816.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2849 >> 4u) & 15u)) + 4294967295u) & _2848) == 0u) || ((_2849 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            uint _3079 = 0u;
            uint _3088;
            bool _3089;
            for (;;)
            {
                _3088 = texelFetch(g_lightClassification, int((((_2842 << 5u) + (_2828 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                _3089 = _3088 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3089)
                {
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3077;
                    frontier_phi_66_pred_2 = _3076;
                    frontier_phi_66_pred_3 = _3075;
                    frontier_phi_66_pred_4 = _3074;
                    frontier_phi_66_pred_5 = _3073;
                }
                else
                {
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    uint _3203;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3088;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    for (;;)
                    {
                        uint _3207 = uint(findLSB(_3203)) + (_3079 << 5u);
                        uint _3204 = (_3203 + 4294967295u) & _3203;
                        uint _3209 = _3207 * 48u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3229 = (_3207 * 48u) + 4u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 3u)).x));
                        uint _3248 = (_3207 * 48u) + 8u;
                        vec3 _3259 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x));
                        float _3263 = _3223.x - _1926;
                        float _3264 = _3223.y - _1927;
                        float _3265 = _3223.z - _1928;
                        float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                        float _3269 = inversesqrt(_3266);
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3273 = dot(vec3(_811, _814, _817), vec3(_3270, _3271, _3272));
                        float _3278 = 1.0 - (_3266 * _3223.w);
                        float _4662 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3280 = sqrt(_3266) * _3242.w;
                        float _3283 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3273) + _3284;
                        float _3290 = _3280 * _3280;
                        float _3294 = ((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3279) / ((_3290 * 0.699999988079071044921875) + 1.0);
                        float _3298 = (-0.0) - _1926;
                        float _3299 = (-0.0) - _1927;
                        float _3300 = (-0.0) - _1928;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3305 = _3304 * _3298;
                        float _3306 = _3304 * _3299;
                        float _3307 = _3304 * _3300;
                        float _3314 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _871;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3305 + _3270;
                        float _3326 = _3306 + _3271;
                        float _3327 = _3307 + _3272;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_811, _814, _817), vec3(_3305, _3306, _3307));
                        float _4678 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3339 = dot(vec3(_811, _814, _817), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4689 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3283 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3273) + _3348;
                        float _4700 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4711 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3346 * _3346) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125))) * _3279;
                        _3132 = (_3294 * _3242.x) + _3200;
                        _3133 = (_3294 * _3242.y) + _3201;
                        _3134 = (_3294 * _3242.z) + _3202;
                        _3129 = (_3374 * _3259.x) + _3197;
                        _3130 = (_3374 * _3259.y) + _3198;
                        _3131 = (_3374 * _3259.z) + _3199;
                        if (_3204 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3204;
                        }
                    }
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                _2939 = frontier_phi_66_pred;
                _2937 = frontier_phi_66_pred_1;
                _2935 = frontier_phi_66_pred_2;
                _2933 = frontier_phi_66_pred_3;
                _2931 = frontier_phi_66_pred_4;
                _2929 = frontier_phi_66_pred_5;
                uint _3080 = _3079 + 1u;
                if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3073 = _2929;
                    _3074 = _2931;
                    _3075 = _2933;
                    _3076 = _2935;
                    _3077 = _2937;
                    _3078 = _2939;
                    _3079 = _3080;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((4294967295u << _2945) & _2848) == 0u)
        {
            _3041 = _2928;
            _3043 = _2930;
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
        }
        else
        {
            float _3066 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _3067 = _3066 * _1926;
            float _3068 = _3066 * _1927;
            float _3069 = _3066 * _1928;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3180 = _2928;
                float _3181 = _2930;
                float _3182 = _2932;
                float _3183 = _2934;
                float _3184 = _2936;
                float _3185 = _2938;
                uint _3186 = _2945;
                uint _3195;
                bool _3196;
                for (;;)
                {
                    _3195 = texelFetch(g_lightClassification, int((((_2842 << 5u) + (_2828 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                    _3196 = _3195 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3196)
                    {
                        frontier_phi_72_pred = _3185;
                        frontier_phi_72_pred_1 = _3184;
                        frontier_phi_72_pred_2 = _3183;
                        frontier_phi_72_pred_3 = _3182;
                        frontier_phi_72_pred_4 = _3181;
                        frontier_phi_72_pred_5 = _3180;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3392 = _3180;
                        float _3393 = _3181;
                        float _3394 = _3182;
                        float _3395 = _3183;
                        float _3396 = _3184;
                        float _3397 = _3185;
                        uint _3398 = _3195;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3409 = ((_3186 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3409 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3409 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_1928, _3516.z, fma(_1927, _3516.y, _3516.x * _1926)) + _3516.w;
                            _3529 = !((fma(_1928, _3497.z, fma(_1927, _3497.y, _3497.x * _1926)) + _3497.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3424.x - _1926;
                                float _3557 = _3424.y - _1927;
                                float _3558 = _3424.z - _1928;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3425 * _3425));
                                float _4722 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3574 = sqrt(_3559) * _3440.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_811, _814, _817))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_1928, _3467.z, fma(_1927, _3467.y, _3467.x * _1926)) + _3467.w) / _3528;
                                float _3588 = (fma(_1928, _3482.z, fma(_1927, _3482.y, _3482.x * _1926)) + _3482.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4738 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _871;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3067;
                                float _3618 = _3564 - _3068;
                                float _3619 = _3565 - _3069;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_811, _814, _817), vec3((-0.0) - _3067, (-0.0) - _3068, (-0.0) - _3069));
                                float _4749 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3631 = dot(vec3(_811, _814, _817), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4760 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_811, _814, _817), vec3(_3563, _3564, _3565))) + _3640;
                                float _4771 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4782 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3594 * _3440.y;
                                frontier_phi_78_pred_1 = _3594 * _3440.x;
                                frontier_phi_78_pred_2 = _3668 * _3452.z;
                                frontier_phi_78_pred_3 = _3668 * _3452.y;
                                frontier_phi_78_pred_4 = _3668 * _3452.x;
                                frontier_phi_78_pred_5 = _3594 * _3440.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_78_pred;
                            _3675 = frontier_phi_78_pred_1;
                            _3674 = frontier_phi_78_pred_2;
                            _3673 = frontier_phi_78_pred_3;
                            _3672 = frontier_phi_78_pred_4;
                            _3677 = frontier_phi_78_pred_5;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3384;
                        frontier_phi_72_pred_1 = _3383;
                        frontier_phi_72_pred_2 = _3382;
                        frontier_phi_72_pred_3 = _3381;
                        frontier_phi_72_pred_4 = _3380;
                        frontier_phi_72_pred_5 = _3379;
                    }
                    _3052 = frontier_phi_72_pred;
                    _3050 = frontier_phi_72_pred_1;
                    _3048 = frontier_phi_72_pred_2;
                    _3046 = frontier_phi_72_pred_3;
                    _3044 = frontier_phi_72_pred_4;
                    _3042 = frontier_phi_72_pred_5;
                    uint _3187 = _3186 + 1u;
                    if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3180 = _3042;
                        _3181 = _3044;
                        _3182 = _3046;
                        _3183 = _3048;
                        _3184 = _3050;
                        _3185 = _3052;
                        _3186 = _3187;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3052;
                frontier_phi_60_61_ladder_1 = _3050;
                frontier_phi_60_61_ladder_2 = _3046;
                frontier_phi_60_61_ladder_3 = _3044;
                frontier_phi_60_61_ladder_4 = _3042;
                frontier_phi_60_61_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_60_61_ladder = _2938;
                frontier_phi_60_61_ladder_1 = _2936;
                frontier_phi_60_61_ladder_2 = _2932;
                frontier_phi_60_61_ladder_3 = _2930;
                frontier_phi_60_61_ladder_4 = _2928;
                frontier_phi_60_61_ladder_5 = _2934;
            }
            _3041 = frontier_phi_60_61_ladder_4;
            _3043 = frontier_phi_60_61_ladder_3;
            _3045 = frontier_phi_60_61_ladder_2;
            _3047 = frontier_phi_60_61_ladder_5;
            _3049 = frontier_phi_60_61_ladder_1;
            _3051 = frontier_phi_60_61_ladder;
        }
        float _3056 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2861 = (_3056 * _3047) + _2392;
        _2863 = (_3056 * _3049) + _2394;
        _2865 = (_3056 * _3051) + _2396;
        _2867 = ((_3041 * 0.039999999105930328369140625) * _3056) + _2715;
        _2869 = ((_3043 * 0.039999999105930328369140625) * _3056) + _2717;
        _2871 = ((_3045 * 0.039999999105930328369140625) * _3056) + _2719;
    }
    else
    {
        _2861 = _2392;
        _2863 = _2394;
        _2865 = _2396;
        _2867 = _2715;
        _2869 = _2717;
        _2871 = _2719;
    }
    float _4798 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4809 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4820 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    uint _2891 = _264 + 6u;
    float _2899 = _792 / cbSceneParam._m0[86u].x;
    float _2900 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2914 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2916 = _2914.x;
    float _2917 = _2914.y;
    float _2918 = _2914.z;
    float _2919 = _2914.w;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2954 = _2953 / _725;
        float _2965 = _2954 * _777;
        float _2966 = _778 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2969 = _2954 * _779;
        float _2971 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2972 = _2971 + cbSceneParam._m0[79u].w;
        float _2973 = cbSceneParam._m0[79u].w - _2966;
        float _2979 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2969 * _2969));
        float _2982 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2979;
        float _2987 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2989 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3142;
        if (abs((_2967 - _2971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3142 = ((((_2972 > 0.0) ? exp2(_2987 * _2972) : (2.0 - exp2(_2989 * _2972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2982;
        }
        else
        {
            float _3102 = 1.0 / cbSceneParam._m0[80u].x;
            float _3103 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : max(_2972, _2973));
            float _3104 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : min(_2972, _2973));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            _3142 = ((abs(_2979 / _2967) * cbSceneParam._m0[80u].y) * ((((_3113 - _3114) * 2.0) - ((exp2(_2987 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0)))) - exp2(_2987 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))))) * _3102)) - ((exp2(_2989 * _3113) - exp2(_2989 * _3114)) * _3102))) + (_2982 * cbSceneParam._m0[80u].z);
        }
        vec4 _3144 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, 1.0), 0.0);
        float _3153 = exp2((_3142 * (-1.44269502162933349609375)) * (1.0 - _3144.w));
        float _3154 = log2(_3153);
        float _3170 = log2(_2919);
        _2991 = (exp2(_3170 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].x)) * _3144.x) / cbSceneParam._m0[78u].x)) + _2916;
        _2993 = (exp2(_3170 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].y)) * _3144.y) / cbSceneParam._m0[78u].y)) + _2917;
        _2995 = (exp2(_3170 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].z)) * _3144.z) / cbSceneParam._m0[78u].z)) + _2918;
        _2997 = _3153 * _2919;
    }
    else
    {
        _2991 = _2916;
        _2993 = _2917;
        _2995 = _2918;
        _2997 = _2919;
    }
    float _3009 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3010 = _3009 == 3.0;
    float _3011 = log2(_2997);
    float _3018 = exp2(_3011 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2861 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _855))) + ((_2867 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _3019 = exp2(_3011 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2863 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _855))) + ((_2869 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _3020 = exp2(_3011 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2865 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _855))) + ((_2871 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _3029 = (_3009 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3029 * (_3010 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2991)));
    SV_Target.y = _3029 * (_3010 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2993)));
    SV_Target.z = _3029 * (_3010 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2995)));
    SV_Target.w = cbInstanceData._m0[_2891].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2891].w;
}


