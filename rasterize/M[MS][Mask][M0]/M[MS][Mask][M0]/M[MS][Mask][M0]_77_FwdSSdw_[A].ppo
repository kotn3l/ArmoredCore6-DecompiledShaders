#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1437;
float _3819;
float _3820;
float _3821;
float _3822;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3831 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _441 = (_434 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _442 = (_434 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _443 = (_434 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3842 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _520 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441);
    float _523 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442);
    float _526 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443);
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _565 = _561.z;
    float _572 = ((_544.x - _563) * _434) + _563;
    float _573 = ((_544.y - _564) * _434) + _564;
    float _574 = ((_544.z - _565) * _434) + _565;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _599 = ((_586.z - _574) * _507) + _574;
    float _602 = ((((_586.x - _572) * _507) + _572) * 2.0) + (-1.0);
    float _604 = ((((_586.y - _573) * _507) + _573) * 2.0) + (-1.0);
    float _605 = dot(vec2(_602, _604), vec2(_602, _604));
    float _3853 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _610 = sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _636 = (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _637 = (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _604;
    float _640 = fma(_610, _245, fma(_637, _252, _636 * _238));
    float _643 = fma(_610, _246, fma(_637, _253, _636 * _239));
    float _646 = fma(_610, _247, fma(_637, _254, _636 * _240));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _686 = (cbMtdParam._m0[19u].x + dot(vec4(_650 * _640, _650 * _643, _650 * _646, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_679 - _680) * cbMtdParam._m0[24u].w) + _680) * cbMtdParam._m0[21u].z);
    float _3864 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _689 = (-0.0) - cbMtdParam._m0[24u].x;
    float _691 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
    float _699 = _687 - ((_687 * TEXCOORD_8.x) * _692);
    float _700 = _687 - ((_687 * TEXCOORD_8.y) * _692);
    float _701 = _687 - ((_687 * TEXCOORD_8.z) * _692);
    float _708 = (_699 * (cbMtdParam._m0[17u].x - _520)) + _520;
    float _709 = (_700 * (cbMtdParam._m0[17u].y - _523)) + _523;
    float _710 = (_701 * (cbMtdParam._m0[17u].z - _526)) + _526;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _724 = _722.x;
    float _725 = 1.0 - _724;
    float _753 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_724 - _725) * cbMtdParam._m0[24u].y) + _725) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3885 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _762 = ((((cbMtdParam._m0[10u].x - _708) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _754) + _708;
    float _763 = ((((cbMtdParam._m0[10u].y - _709) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _754) + _709;
    float _764 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _710)) * _754) + _710;
    float _768 = (cbMtdParam._m0[19u].w * (_624.z - _599)) + _599;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _789 = (_782.x * 2.0) + (-1.0);
    float _790 = (_782.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3896 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _799 = ((_782.z - _768) * _699) + _768;
    float _802 = ((cbMtdParam._m0[23u].y - _799) * _754) + _799;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _827 = (_821.x * 2.0) + (-1.0);
    float _828 = (_821.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3907 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _844 = ((sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) - _610) * _701) + _610;
    float _847 = (((_789 - _636) * _699) + _636) + (cbMtdParam._m0[21u].x * _636);
    float _848 = (((_790 - _637) * _700) + _637) + (cbMtdParam._m0[21u].x * _637);
    float _859 = (((_827 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _754) + _847;
    float _860 = (((_828 - _848) + (_848 * cbMtdParam._m0[22u].z)) * _754) + _848;
    float _861 = (_754 * (sqrt(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) - _844)) + _844;
    float _863 = cbMtdParam._m0[22u].x + _624.w;
    float _866 = fma(_861, _245, fma(_860, _252, _859 * _238));
    float _869 = fma(_861, _246, fma(_860, _253, _859 * _239));
    float _872 = fma(_861, _247, fma(_860, _254, _859 * _240));
    float _876 = inversesqrt(dot(vec3(_866, _869, _872), vec3(_866, _869, _872)));
    float _877 = _876 * _866;
    float _878 = _876 * _869;
    float _879 = _876 * _872;
    float _3918 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _880 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _3940 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3951 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3962 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _948 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _938);
    float _949 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _938);
    float _950 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _938);
    float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
    float _955 = _948 * _954;
    float _956 = _949 * _954;
    float _957 = _950 * _954;
    vec4 _962 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _964 = _962.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1118 = sqrt(((_948 * _948) + (_949 * _949)) + (_950 * _950));
        float _1124 = (cbMatDynParam._m0[5u].x * _1118) + cbMatDynParam._m0[5u].y;
        float _3973 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1129 = (cbMatDynParam._m0[5u].z * _1118) + cbMatDynParam._m0[5u].w;
        float _3984 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) - _1125)) + _1125) < ((_964 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_879, cbSceneParam._m0[5u].z, fma(_878, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _877));
    float _997 = fma(_879, cbSceneParam._m0[6u].z, fma(_878, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _877));
    float _1000 = fma(_879, cbSceneParam._m0[7u].z, fma(_878, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _877));
    uint _1013 = _257 + 9u;
    uint _1014 = _1013 + uint(cbMatDynParam._m0[0u].w);
    float _1020 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_1014].x;
    float _1021 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * cbInstanceData._m0[_1014].y;
    float _1022 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_1014].z;
    float _3995 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1038 = ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_877, _878, _879), vec3(_955, _956, _957));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _877) - _955;
    float _1047 = (_1042 * _878) - _956;
    float _1048 = (_1042 * _879) - _957;
    float _1052 = abs(dot(vec3(_955, _956, _957), vec3(_877, _878, _879)));
    float _4028 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_880);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1165 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1169 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1194 = _1099 + _877;
        float _1195 = _1103 + _878;
        float _1196 = _1107 + _879;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_877, _878, _879), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4076 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_877, _878, _879), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4109 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_877, _878, _879), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4142 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1478 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1482 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1486 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1509 = _1099 + _877;
        float _1510 = _1103 + _878;
        float _1511 = _1107 + _879;
        float _1521 = fma(_1511, cbModelParam._m0[30u].z, fma(_1510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1509)) - _1478;
        float _1522 = fma(_1511, cbModelParam._m0[31u].z, fma(_1510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1509)) - _1482;
        float _1523 = fma(_1511, cbModelParam._m0[32u].z, fma(_1510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1509)) - _1486;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1540 = ((_1527 * _1521) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1478 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1527 * _1522) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1482 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1527 * _1523) / cbModelParam._m0[35u].z) + ((((((_1486 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1577 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1544.x + (-0.5));
        float _1579 = _1577 * (_1544.y + (-0.5));
        float _1580 = _1577 * (_1544.z + (-0.5));
        float _1587 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1551.x + (-0.5));
        float _1589 = _1587 * (_1551.y + (-0.5));
        float _1590 = _1587 * (_1551.z + (-0.5));
        float _1597 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1558.x + (-0.5));
        float _1599 = _1597 * (_1558.y + (-0.5));
        float _1600 = _1597 * (_1558.z + (-0.5));
        float _1607 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1565.x + (-0.5));
        float _1609 = _1607 * (_1565.y + (-0.5));
        float _1610 = _1607 * (_1565.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_877, _878, _879), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4205 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1641 + 1.0))) + _1646) * _1611;
        float _1656 = _1579 * 0.5;
        float _1657 = _1589 * 0.5;
        float _1658 = _1599 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_877, _878, _879), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4238 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1683 + 1.0))) + _1688) * _1612;
        float _1698 = _1580 * 0.5;
        float _1699 = _1590 * 0.5;
        float _1700 = _1600 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_877, _878, _879), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4271 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1725 + 1.0))) + _1730) * _1613;
        _1747 = _1580;
        _1748 = _1579;
        _1749 = _1578;
        _1750 = _1590;
        _1751 = _1589;
        _1752 = _1588;
        _1753 = _1600;
        _1754 = _1599;
        _1755 = _1598;
        _1756 = _1613;
        _1757 = _1612;
        _1758 = _1611;
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = _1437;
        _1756 = _1437;
        _1757 = _1437;
        _1758 = _1437;
        _1759 = 0.0;
        _1760 = 0.0;
        _1761 = 0.0;
    }
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1449)) + _1449;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1450)) + _1450;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1451)) + _1451;
    float _1794 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1771));
    float _1815 = _1046 * 0.5;
    float _1816 = _1047 * 0.5;
    float _1817 = _1048 * 0.5;
    float _1818 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1821 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1824 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1858;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1831 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1835 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1839 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1846 = dot(vec4(cbModelParam._m0[39u]), vec4(_1815, _1816, _1817, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1869;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1860 = dot(vec4(cbModelParam._m0[40u]), vec4(_1815, _1816, _1817, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1873 = (_1869 * cbModelParam._m0[1u].x) + (_1858 * (1.0 - cbModelParam._m0[1u].x));
    float _1883 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _880);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1883 : min(cbModelParam._m0[25u].z, _1883));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1946 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1949 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1977 = frontier_phi_17_15_ladder;
        }
        float _2199;
        if (_1946 > 0.0)
        {
            _2199 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2199 = frontier_phi_26_22_ladder;
        }
        float _2445;
        if (_1949 > 0.0)
        {
            _2445 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2445 = frontier_phi_38_33_ladder;
        }
        float _2447 = isnan(_2199) ? _1977 : (isnan(_1977) ? _2199 : min(_1977, _2199));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1943) + _1932;
        float _2453 = (_2448 * _1946) + _1936;
        float _2454 = (_2448 * _1949) + _1940;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2455;
        float _2459 = _2455 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 > _2459) || ((_2453 < _2457) || ((_2452 < _2457) || (_2452 > _2459))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2454, cbModelParam._m0[9u].z, fma(_2453, cbModelParam._m0[9u].y, _2452 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2454, cbModelParam._m0[10u].z, fma(_2453, cbModelParam._m0[10u].y, _2452 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2454, cbModelParam._m0[11u].z, fma(_2453, cbModelParam._m0[11u].y, _2452 * cbModelParam._m0[11u].x))), _1884);
            frontier_phi_16_38_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_16_38_ladder_2;
        _1967 = frontier_phi_16_38_ladder_1;
        _1969 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1884);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _880);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2028 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2032 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2036 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2039 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2042 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2045 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2204;
        if (_2039 > 0.0)
        {
            _2204 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2204 = frontier_phi_28_24_ladder;
        }
        float _2472;
        if (_2042 > 0.0)
        {
            _2472 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2472 = frontier_phi_40_35_ladder;
        }
        float _2677;
        if (_2045 > 0.0)
        {
            _2677 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2677 = frontier_phi_49_46_ladder;
        }
        float _2679 = isnan(_2472) ? _2204 : (isnan(_2204) ? _2472 : min(_2204, _2472));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _2039) + _2028;
        float _2685 = (_2680 * _2042) + _2032;
        float _2686 = (_2680 * _2045) + _2036;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_25_49_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _2064 = frontier_phi_25_49_ladder_2;
        _2066 = frontier_phi_25_49_ladder_1;
        _2068 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1974);
        _2064 = _2048.x * cbModelParam._m0[1u].z;
        _2066 = _2048.y * cbModelParam._m0[1u].z;
        _2068 = _2048.z * cbModelParam._m0[1u].z;
    }
    float _2080 = ((((1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1067 * _1054)) * _1038;
    float _2081 = _2080 * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2082 = _2080 * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2083 = _2080 * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2086 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2089 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2092 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, _2081 * cbSceneParam._m0[91u].x));
    vec4 _2100 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_975, _976));
    float _2102 = _2100.w;
    float _2114 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2102);
    float _2115 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2102);
    float _2116 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2102);
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _1038 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2158 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2162 = _2122 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_877, _878, _879));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_877, _878, _879));
    float _4407 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4418 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2139].x * _2145) * _2183) + (((cbLight._m0[_2149].x * _2114) * _2158) * _2181);
    float _2191 = ((_2145 * cbLight._m0[_2139].y) * _2183) + (((cbLight._m0[_2149].y * _2115) * _2158) * _2181);
    float _2192 = ((_2145 * cbLight._m0[_2139].z) * _2183) + (((cbLight._m0[_2149].z * _2116) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2198)
    {
        _2209 = _2190;
        _2211 = _2191;
        _2213 = _2192;
    }
    else
    {
        uint _2217 = _2122 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4429 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2236 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2190;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2191;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2192;
    }
    bool _2216 = _2196.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2216)
    {
        _2254 = _2209;
        _2256 = _2211;
        _2258 = _2213;
    }
    else
    {
        uint _2416 = _2122 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4445 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2435 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2254 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2209;
        _2256 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2211;
        _2258 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2213;
    }
    uint _2261 = _2122 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _880) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2122].x + _955;
    float _2277 = cbLight._m0[_2122].y + _956;
    float _2278 = cbLight._m0[_2122].z + _957;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2122].xyz));
    float _4461 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _4472 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2290 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2291 = dot(vec3(_877, _878, _879), vec3(_2283, _2284, _2285));
    float _4483 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2283, _2284, _2285));
    float _4494 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2314 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2315 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2290 * ((_2289 * _2315) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2315) + _2275) * _2289))) * _2289;
    float _4505 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2342 = _2122 + 9u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _880) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2162].x + _955;
    float _2356 = cbLight._m0[_2162].y + _956;
    float _2357 = cbLight._m0[_2162].z + _957;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2162].xyz));
    float _4516 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2369 = dot(vec3(_877, _878, _879), vec3(_2362, _2363, _2364));
    float _4527 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2362, _2363, _2364));
    float _4538 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2354 * _2354;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2390 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2391 = 1.0 - _2354;
    float _2401 = (0.5 / (((_2290 * ((_2368 * _2391) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2391) + _2354) * _2368))) * _2368;
    float _4549 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    float _2413 = (((_2390 * cbLight._m0[_2342].x) * _2403) * _2145) + ((((cbLight._m0[_2261].x * _2114) * _2314) * _2328) * _2158);
    float _2414 = (((_2390 * cbLight._m0[_2342].y) * _2403) * _2145) + ((((cbLight._m0[_2261].y * _2115) * _2314) * _2328) * _2158);
    float _2415 = (((_2390 * cbLight._m0[_2342].z) * _2403) * _2145) + ((((cbLight._m0[_2261].z * _2116) * _2314) * _2328) * _2158);
    float _2477;
    float _2479;
    float _2481;
    if (_2198)
    {
        _2477 = _2413;
        _2479 = _2414;
        _2481 = _2415;
    }
    else
    {
        uint _2483 = _2122 + 2u;
        uint _2487 = _2122 + 10u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _880) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _955;
        float _2504 = cbLight._m0[_2483].y + _956;
        float _2505 = cbLight._m0[_2483].z + _957;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2483].xyz));
        float _4560 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2517 = dot(vec3(_877, _878, _879), vec3(_2510, _2511, _2512));
        float _4571 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4582 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2539 = 1.0 - _2502;
        float _2549 = (0.5 / (((_2290 * ((_2516 * _2539) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2539) + _2502) * _2516))) * _2516;
        float _4593 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2477 = (((_2538 * cbLight._m0[_2487].x) * _2551) * _2552) + _2413;
        _2479 = (((_2538 * cbLight._m0[_2487].y) * _2551) * _2552) + _2414;
        _2481 = (((_2538 * cbLight._m0[_2487].z) * _2551) * _2552) + _2415;
    }
    float _2587;
    float _2589;
    float _2591;
    if (_2216)
    {
        _2587 = _2477;
        _2589 = _2479;
        _2591 = _2481;
    }
    else
    {
        uint _2598 = _2122 + 3u;
        uint _2602 = _2122 + 11u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _880) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _955;
        float _2619 = cbLight._m0[_2598].y + _956;
        float _2620 = cbLight._m0[_2598].z + _957;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2598].xyz));
        float _4609 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2632 = dot(vec3(_877, _878, _879), vec3(_2625, _2626, _2627));
        float _4620 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4631 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2653 = (exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2654 = 1.0 - _2617;
        float _2664 = (0.5 / (((_2290 * ((_2631 * _2654) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2654) + _2617) * _2631))) * _2631;
        float _4642 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2587 = (((_2653 * cbLight._m0[_2602].x) * _2666) * _2667) + _2477;
        _2589 = (((_2653 * cbLight._m0[_2602].y) * _2666) * _2667) + _2479;
        _2591 = (((_2653 * cbLight._m0[_2602].z) * _2666) * _2667) + _2481;
    }
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_2120.y == 0u)
    {
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2742;
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2742;
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2742;
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.x;
        uint _2769 = uint((float(_2757.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _2758))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _2758)));
        float _2779 = (log2(_2745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2780 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        uint _2783 = uint(isnan(14.0) ? _2780 : (isnan(_2780) ? 14.0 : min(_2780, 14.0)));
        uvec4 _2788 = texelFetch(g_lightClusterGridBuffer, int(((_2783 << 2u) + (_2769 << 6u)) >> 2u));
        uint _2789 = _2788.x;
        uint _2790 = _2757.z;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((((1u << ((_2790 >> 4u) & 15u)) + 4294967295u) & _2789) == 0u) || ((_2790 & 240u) == 0u))
        {
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
        }
        else
        {
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3058)
                {
                    frontier_phi_66_pred = _3042;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3057;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3048 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _2743;
                        float _3254 = _3213.y - _2744;
                        float _3255 = _3213.z - _2745;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_994, _997, _1000), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4668 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _2743;
                        float _3289 = (-0.0) - _2744;
                        float _3290 = (-0.0) - _2745;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3305 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3306 = 1.0 - _1054;
                        float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                        float _3314 = _3313 * _3313;
                        float _3315 = _3314 * _3314;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3326 = dot(vec3(_994, _997, _1000), vec3(_3295, _3296, _3297));
                        float _4684 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3330 = dot(vec3(_994, _997, _1000), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                        float _4695 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                        float _3338 = _3273 * _3314;
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3263) + _3339;
                        float _4706 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3344 = 1.0 - _3314;
                        float _3354 = (0.5 / (((_3343 * ((_3329 * _3344) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3314) * _3329))) * _3343;
                        float _4717 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3365 = (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) / ((_3337 * _3337) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3117 = (_3284 * _3232.x) + _3190;
                        _3118 = (_3284 * _3232.y) + _3191;
                        _3119 = (_3284 * _3232.z) + _3192;
                        _3114 = (_3365 * _3249.x) + _3187;
                        _3115 = (_3365 * _3249.y) + _3188;
                        _3116 = (_3365 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_66_pred = _3114;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                _2891 = frontier_phi_66_pred;
                _2901 = frontier_phi_66_pred_1;
                _2899 = frontier_phi_66_pred_2;
                _2897 = frontier_phi_66_pred_3;
                _2895 = frontier_phi_66_pred_4;
                _2893 = frontier_phi_66_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2891;
                    _3043 = _2893;
                    _3044 = _2895;
                    _3045 = _2897;
                    _3046 = _2899;
                    _3047 = _2901;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
        }
        uvec4 _2904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2905 = _2904.z;
        uint _2907 = (_2905 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2907) & _2789) == 0u)
        {
            _3010 = _2890;
            _3012 = _2892;
            _3014 = _2894;
            _3016 = _2896;
            _3018 = _2898;
            _3020 = _2900;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
            float _3036 = _3035 * _2743;
            float _3037 = _3035 * _2744;
            float _3038 = _3035 * _2745;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2907 < ((_2905 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3170 = _2890;
                float _3171 = _2892;
                float _3172 = _2894;
                float _3173 = _2896;
                float _3174 = _2898;
                float _3175 = _2900;
                uint _3176 = _2907;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3186)
                    {
                        frontier_phi_77_pred = _3175;
                        frontier_phi_77_pred_1 = _3174;
                        frontier_phi_77_pred_2 = _3173;
                        frontier_phi_77_pred_3 = _3172;
                        frontier_phi_77_pred_4 = _3171;
                        frontier_phi_77_pred_5 = _3170;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        uint _3398 = _3185;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3409 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3409 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3409 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_2745, _3516.z, fma(_2744, _3516.y, _3516.x * _2743)) + _3516.w;
                            _3529 = !((fma(_2745, _3497.z, fma(_2744, _3497.y, _3497.x * _2743)) + _3497.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3424.x - _2743;
                                float _3557 = _3424.y - _2744;
                                float _3558 = _3424.z - _2745;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3425 * _3425));
                                float _4728 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3574 = sqrt(_3559) * _3440.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_994, _997, _1000))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_2745, _3467.z, fma(_2744, _3467.y, _3467.x * _2743)) + _3467.w) / _3528;
                                float _3588 = (fma(_2745, _3482.z, fma(_2744, _3482.y, _3482.x * _2743)) + _3482.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4744 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _1054;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3036;
                                float _3618 = _3564 - _3037;
                                float _3619 = _3565 - _3038;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4755 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3631 = dot(vec3(_994, _997, _1000), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4766 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_994, _997, _1000), vec3(_3563, _3564, _3565))) + _3640;
                                float _4777 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4788 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3594 * _3440.y;
                                frontier_phi_83_pred_1 = _3594 * _3440.x;
                                frontier_phi_83_pred_2 = _3668 * _3452.z;
                                frontier_phi_83_pred_3 = _3668 * _3452.y;
                                frontier_phi_83_pred_4 = _3668 * _3452.x;
                                frontier_phi_83_pred_5 = _3594 * _3440.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_83_pred;
                            _3675 = frontier_phi_83_pred_1;
                            _3674 = frontier_phi_83_pred_2;
                            _3673 = frontier_phi_83_pred_3;
                            _3672 = frontier_phi_83_pred_4;
                            _3677 = frontier_phi_83_pred_5;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3384;
                        frontier_phi_77_pred_1 = _3383;
                        frontier_phi_77_pred_2 = _3382;
                        frontier_phi_77_pred_3 = _3381;
                        frontier_phi_77_pred_4 = _3380;
                        frontier_phi_77_pred_5 = _3379;
                    }
                    _3021 = frontier_phi_77_pred;
                    _3019 = frontier_phi_77_pred_1;
                    _3017 = frontier_phi_77_pred_2;
                    _3015 = frontier_phi_77_pred_3;
                    _3013 = frontier_phi_77_pred_4;
                    _3011 = frontier_phi_77_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3011;
                        _3171 = _3013;
                        _3172 = _3015;
                        _3173 = _3017;
                        _3174 = _3019;
                        _3175 = _3021;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3015;
                frontier_phi_58_59_ladder_1 = _3021;
                frontier_phi_58_59_ladder_2 = _3019;
                frontier_phi_58_59_ladder_3 = _3017;
                frontier_phi_58_59_ladder_4 = _3013;
                frontier_phi_58_59_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_58_59_ladder = _2894;
                frontier_phi_58_59_ladder_1 = _2900;
                frontier_phi_58_59_ladder_2 = _2898;
                frontier_phi_58_59_ladder_3 = _2896;
                frontier_phi_58_59_ladder_4 = _2892;
                frontier_phi_58_59_ladder_5 = _2890;
            }
            _3010 = frontier_phi_58_59_ladder_5;
            _3012 = frontier_phi_58_59_ladder_4;
            _3014 = frontier_phi_58_59_ladder;
            _3016 = frontier_phi_58_59_ladder_3;
            _3018 = frontier_phi_58_59_ladder_2;
            _3020 = frontier_phi_58_59_ladder_1;
        }
        float _3025 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2802 = (_3025 * _3016) + _2254;
        _2804 = (_3025 * _3018) + _2256;
        _2806 = (_3025 * _3020) + _2258;
        _2808 = ((_3010 * 0.039999999105930328369140625) * _3025) + _2587;
        _2810 = ((_3012 * 0.039999999105930328369140625) * _3025) + _2589;
        _2812 = ((_3014 * 0.039999999105930328369140625) * _3025) + _2591;
    }
    else
    {
        _2802 = _2254;
        _2804 = _2256;
        _2806 = _2258;
        _2808 = _2587;
        _2810 = _2589;
        _2812 = _2591;
    }
    float _4804 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4815 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4826 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2829 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2802 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1038))) + ((_2808 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    float _2830 = ((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2804 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1038))) + ((_2810 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    float _2831 = ((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2806 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1038))) + ((_2812 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    uint _2832 = _257 + 6u;
    float _2840 = _975 / cbSceneParam._m0[86u].x;
    float _2841 = _976 / cbSceneParam._m0[86u].y;
    vec4 _2855 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2857 = _2855.x;
    float _2858 = _2855.y;
    float _2859 = _2855.z;
    float _2860 = _2855.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _2915 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _2916 = _2915 / _898;
        float _2927 = _2916 * _948;
        float _2928 = _949 * _2916;
        float _2929 = (-0.0) - _2928;
        float _2930 = _2916 * _950;
        float _2932 = (cbSceneParam._m0[77u].w * _2929) / _2915;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2928;
        float _2940 = sqrt(((_2927 * _2927) + (_2928 * _2928)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2915)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3127;
        if (abs((_2929 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3127 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3073 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3127 = ((abs(_2940 / _2929) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2950 * _3082) - exp2(_2950 * _3083)) * _3071))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3129 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, 1.0), 0.0);
        float _3138 = exp2((_3127 * (-1.44269502162933349609375)) * (1.0 - _3129.w));
        float _3139 = log2(_3138);
        float _3155 = log2(_2860);
        _2952 = (exp2(_3155 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].x)) * _3129.x) / cbSceneParam._m0[78u].x)) + _2857;
        _2954 = (exp2(_3155 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].y)) * _3129.y) / cbSceneParam._m0[78u].y)) + _2858;
        _2956 = (exp2(_3155 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].z)) * _3129.z) / cbSceneParam._m0[78u].z)) + _2859;
        _2958 = _3138 * _2860;
    }
    else
    {
        _2952 = _2857;
        _2954 = _2858;
        _2956 = _2859;
        _2958 = _2860;
    }
    bool _3165;
    vec4 _2968;
    vec4 _2990;
    float _2992;
    float _2996;
    float _2997;
    float _2998;
    float _2999;
    bool _3009;
    for (;;)
    {
        _2968 = cbMatDynParam._m0[0u];
        float _2970 = roundEven(_2968.y);
        bool _2971 = _2970 == 3.0;
        float _2972 = log2(_2958);
        float _2979 = exp2(_2972 * cbSceneParam._m0[78u].x) * _2829;
        float _2980 = exp2(_2972 * cbSceneParam._m0[78u].y) * _2830;
        float _2981 = exp2(_2972 * cbSceneParam._m0[78u].z) * _2831;
        float _2988 = _964 + (-0.5);
        _2990 = cbMtdParam._m0[1u];
        _2992 = _2990.y * _2988;
        float _2995 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2996 = _2995 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
        _2997 = _2995 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
        _2998 = _2995 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
        _2999 = _2988 * 0.999000012874603271484375;
        _3009 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3009)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2999) < 0.5)
            {
                _3165 = true;
                break;
            }
        }
        uint _3106 = _1013 + uint(_2968.w);
        if ((cbInstanceData._m0[_3106].w < 1.0) && ((cbInstanceData._m0[_3106].w + _2999) < 0.5))
        {
            _3165 = true;
            break;
        }
        if ((_2992 + 1.0) < _2990.x)
        {
            _3165 = true;
            break;
        }
        _3165 = false;
        break;
    }
    float _3370;
    if (_3165)
    {
        discard_state = true;
        _3370 = 0.0;
    }
    else
    {
        _3370 = cbInstanceData._m0[_2832].w;
    }
    SV_Target.x = _2996;
    SV_Target.y = _2997;
    SV_Target.z = _2998;
    SV_Target.w = _3370;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2832].w;
    discard_exit();
}


