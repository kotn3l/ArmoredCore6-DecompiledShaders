#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1347;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3650 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3661 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3672 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3683 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _444 = (_437 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _445 = (_437 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _446 = (_437 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3694 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) + _529;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _620 = _618.x;
    float _621 = _618.y;
    float _622 = _618.z;
    float _629 = ((_601.x - _620) * _437) + _620;
    float _630 = ((_601.y - _621) * _437) + _621;
    float _631 = ((_601.z - _622) * _437) + _622;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _656 = ((_643.z - _631) * _510) + _631;
    float _659 = ((((_643.x - _629) * _510) + _629) * 2.0) + (-1.0);
    float _660 = ((((_643.y - _630) * _510) + _630) * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3705 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _666 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _696 = (_659 + ((((_576.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _697 = (_660 + ((((_576.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = fma(_666, _235, fma(_697, _242, _696 * _228));
    float _703 = fma(_666, _236, fma(_697, _243, _696 * _229));
    float _706 = fma(_666, _237, fma(_697, _244, _696 * _230));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _746 = (cbMtdParam._m0[19u].x + dot(vec4(_710 * _700, _710 * _703, _710 * _706, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_739 - _740) * cbMtdParam._m0[24u].w) + _740) * cbMtdParam._m0[21u].z);
    float _3716 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _747 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _754 = (_747 * ((_557.x * cbMtdParam._m0[18u].x) - _536)) + _536;
    float _755 = (_747 * ((_557.y * cbMtdParam._m0[18u].y) - _537)) + _537;
    float _756 = (_747 * ((_557.z * cbMtdParam._m0[18u].z) - _538)) + _538;
    float _761 = (((_576.z - _656) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _656;
    float _765 = ((_684.z - _761) * cbMtdParam._m0[19u].w) + _761;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3727 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = ((_778.z - _765) * _747) + _765;
    float _805 = ((sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) - _666) * _747) + _666;
    float _808 = (((_785 - _696) * _747) + _696) + (cbMtdParam._m0[21u].x * _696);
    float _809 = (((_786 - _697) * _747) + _697) + (cbMtdParam._m0[21u].x * _697);
    float _811 = cbMtdParam._m0[22u].x + _684.w;
    float _814 = fma(_805, _235, fma(_809, _242, _808 * _228));
    float _817 = fma(_805, _236, fma(_809, _243, _808 * _229));
    float _820 = fma(_805, _237, fma(_809, _244, _808 * _230));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    float _825 = _824 * _814;
    float _826 = _824 * _817;
    float _827 = _824 * _820;
    float _3738 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _828 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _3760 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3771 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3782 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _846 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _898 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _888);
    float _899 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _888);
    float _900 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _888);
    float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
    float _905 = _898 * _904;
    float _906 = _899 * _904;
    float _907 = _900 * _904;
    float _913 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _914 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _932 = fma(_827, cbSceneParam._m0[5u].z, fma(_826, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _825));
    float _935 = fma(_827, cbSceneParam._m0[6u].z, fma(_826, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _825));
    float _938 = fma(_827, cbSceneParam._m0[7u].z, fma(_826, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _825));
    uint _952 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_952].z;
    float _3793 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _913, cbSceneParam._m0[86u].y * _914));
    float _976 = ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_825, _826, _827), vec3(_905, _906, _907));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _825) - _905;
    float _985 = (_980 * _826) - _906;
    float _986 = (_980 * _827) - _907;
    float _990 = abs(dot(vec3(_905, _906, _907), vec3(_825, _826, _827)));
    float _3826 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_828);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1075 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1079 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1104 = _1037 + _825;
        float _1105 = _1041 + _826;
        float _1106 = _1045 + _827;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_825, _826, _827), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3874 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_825, _826, _827), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3907 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_825, _826, _827), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3940 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1389 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1393 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1416 = _1037 + _825;
        float _1417 = _1041 + _826;
        float _1418 = _1045 + _827;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_825, _826, _827), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4003 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_825, _826, _827), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4036 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_825, _826, _827), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4069 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1347;
        _1655 = _1347;
        _1656 = _1347;
        _1657 = _1347;
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1359)) + _1359;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1360)) + _1360;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1361)) + _1361;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _984 * 0.5;
    float _1723 = _985 * 0.5;
    float _1724 = _986 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1852 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1855 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1883 = frontier_phi_14_12_ladder;
        }
        float _2083;
        if (_1852 > 0.0)
        {
            _2083 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2083 = frontier_phi_23_19_ladder;
        }
        float _2326;
        if (_1855 > 0.0)
        {
            _2326 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2326 = frontier_phi_35_30_ladder;
        }
        float _2328 = isnan(_2083) ? _1883 : (isnan(_1883) ? _2083 : min(_1883, _2083));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1849) + _1838;
        float _2334 = (_2329 * _1852) + _1842;
        float _2335 = (_2329 * _1855) + _1846;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_13_35_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_13_35_ladder_2;
        _1873 = frontier_phi_13_35_ladder_1;
        _1875 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1791);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1947 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1950 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2088;
        if (_1944 > 0.0)
        {
            _2088 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2088 = frontier_phi_25_21_ladder;
        }
        float _2353;
        if (_1947 > 0.0)
        {
            _2353 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2353 = frontier_phi_37_32_ladder;
        }
        float _2558;
        if (_1950 > 0.0)
        {
            _2558 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2558 = frontier_phi_46_43_ladder;
        }
        float _2560 = isnan(_2353) ? _2088 : (isnan(_2088) ? _2353 : min(_2088, _2353));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1944) + _1933;
        float _2566 = (_2561 * _1947) + _1937;
        float _2567 = (_2561 * _1950) + _1941;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_22_46_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_22_46_ladder_2;
        _1971 = frontier_phi_22_46_ladder_1;
        _1973 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1880);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1985 = ((((1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1005 * _992)) * _976;
    float _1986 = _1985 * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1987 = _1985 * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1988 = _1985 * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _976 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2042 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2046 = _2009 | 1u;
    float _2057 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_825, _826, _827));
    float _2060 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_825, _826, _827));
    float _4205 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _4216 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _2067 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2074 = ((cbLight._m0[_2026].x * _2032) * _2067) + ((cbLight._m0[_2036].x * _2042) * _2065);
    float _2075 = ((_2032 * cbLight._m0[_2026].y) * _2067) + ((_2042 * cbLight._m0[_2036].y) * _2065);
    float _2076 = ((_2032 * cbLight._m0[_2026].z) * _2067) + ((_2042 * cbLight._m0[_2036].z) * _2065);
    uvec4 _2080 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2082 = _2080.x == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2082)
    {
        _2093 = _2074;
        _2095 = _2075;
        _2097 = _2076;
    }
    else
    {
        uint _2101 = _2009 + 6u;
        float _2117 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4227 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2120 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2093 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _2074;
        _2095 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _2075;
        _2097 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _2076;
    }
    bool _2100 = _2080.y == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2100)
    {
        _2138 = _2093;
        _2140 = _2095;
        _2142 = _2097;
    }
    else
    {
        uint _2297 = _2009 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4243 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2316 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2138 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2093;
        _2140 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2095;
        _2142 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2097;
    }
    uint _2145 = _2009 + 8u;
    float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _828) * 0.949999988079071044921875);
    float _2159 = _2158 * _2158;
    float _2160 = cbLight._m0[_2009].x + _905;
    float _2161 = cbLight._m0[_2009].y + _906;
    float _2162 = cbLight._m0[_2009].z + _907;
    float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
    float _2167 = _2166 * _2160;
    float _2168 = _2166 * _2161;
    float _2169 = _2166 * _2162;
    float _2170 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2009].xyz));
    float _4259 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2174 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2175 = dot(vec3(_825, _826, _827), vec3(_2167, _2168, _2169));
    float _4281 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2167, _2168, _2169));
    float _4292 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2159 * _2159;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2159;
    float _2210 = (0.5 / (((_2174 * ((_2173 * _2199) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2199) + _2159) * _2173))) * _2173;
    float _4303 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    uint _2223 = _2009 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _828) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2046].x + _905;
    float _2237 = cbLight._m0[_2046].y + _906;
    float _2238 = cbLight._m0[_2046].z + _907;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2046].xyz));
    float _4314 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2250 = dot(vec3(_825, _826, _827), vec3(_2243, _2244, _2245));
    float _4325 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2243, _2244, _2245));
    float _4336 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2235;
    float _2282 = (0.5 / (((_2174 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2272) + _2235) * _2249))) * _2249;
    float _4347 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2294 = (((_2271 * cbLight._m0[_2223].x) * _2284) * _2032) + (((_2198 * cbLight._m0[_2145].x) * _2212) * _2042);
    float _2295 = (((_2271 * cbLight._m0[_2223].y) * _2284) * _2032) + (((_2198 * cbLight._m0[_2145].y) * _2212) * _2042);
    float _2296 = (((_2271 * cbLight._m0[_2223].z) * _2284) * _2032) + (((_2198 * cbLight._m0[_2145].z) * _2212) * _2042);
    float _2358;
    float _2360;
    float _2362;
    if (_2082)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _2009 + 2u;
        uint _2368 = _2009 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _828) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _905;
        float _2385 = cbLight._m0[_2364].y + _906;
        float _2386 = cbLight._m0[_2364].z + _907;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2364].xyz));
        float _4358 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2398 = dot(vec3(_825, _826, _827), vec3(_2391, _2392, _2393));
        float _4369 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4380 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2420 = 1.0 - _2383;
        float _2430 = (0.5 / (((_2174 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2420) + _2383) * _2397))) * _2397;
        float _4391 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2358 = (((_2419 * cbLight._m0[_2368].x) * _2432) * _2433) + _2294;
        _2360 = (((_2419 * cbLight._m0[_2368].y) * _2432) * _2433) + _2295;
        _2362 = (((_2419 * cbLight._m0[_2368].z) * _2432) * _2433) + _2296;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2100)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _2009 + 3u;
        uint _2483 = _2009 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _828) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _905;
        float _2500 = cbLight._m0[_2479].y + _906;
        float _2501 = cbLight._m0[_2479].z + _907;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2479].xyz));
        float _4407 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2513 = dot(vec3(_825, _826, _827), vec3(_2506, _2507, _2508));
        float _4418 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4429 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2174 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2535) + _2498) * _2512))) * _2512;
        float _4440 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2468 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2358;
        _2470 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2360;
        _2472 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2362;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_2007.y == 0u)
    {
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2623;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2623;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2623;
        uvec4 _2638 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2639 = _2638.x;
        uint _2650 = uint((float(_2638.y) * floor(float(uint(cbSceneParam._m0[85u].y * _914) / _2639))) + floor(float(uint(cbSceneParam._m0[85u].x * _913) / _2639)));
        float _2660 = (log2(_2626 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        uint _2664 = uint(isnan(14.0) ? _2661 : (isnan(_2661) ? 14.0 : min(_2661, 14.0)));
        uvec4 _2669 = texelFetch(g_lightClusterGridBuffer, int(((_2664 << 2u) + (_2650 << 6u)) >> 2u));
        uint _2670 = _2669.x;
        uint _2671 = _2638.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2671 >> 4u) & 15u)) + 4294967295u) & _2670) == 0u) || ((_2671 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            uint _2922 = 0u;
            uint _2931;
            bool _2932;
            for (;;)
            {
                _2931 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                _2932 = _2931 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2932)
                {
                    frontier_phi_61_pred = _2916;
                    frontier_phi_61_pred_1 = _2921;
                    frontier_phi_61_pred_2 = _2920;
                    frontier_phi_61_pred_3 = _2919;
                    frontier_phi_61_pred_4 = _2918;
                    frontier_phi_61_pred_5 = _2917;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2931;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2922 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _2624;
                        float _3107 = _3066.y - _2625;
                        float _3108 = _3066.z - _2626;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_932, _935, _938), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4466 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _2624;
                        float _3142 = (-0.0) - _2625;
                        float _3143 = (-0.0) - _2626;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3158 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _992;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_932, _935, _938), vec3(_3148, _3149, _3150));
                        float _4482 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3183 = dot(vec3(_932, _935, _938), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4493 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3126 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3116) + _3192;
                        float _4504 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4515 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3190 * _3190) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2975 = (_3137 * _3085.x) + _3043;
                        _2976 = (_3137 * _3085.y) + _3044;
                        _2977 = (_3137 * _3085.z) + _3045;
                        _2972 = (_3218 * _3102.x) + _3040;
                        _2973 = (_3218 * _3102.y) + _3041;
                        _2974 = (_3218 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_61_pred = _2972;
                    frontier_phi_61_pred_1 = _2977;
                    frontier_phi_61_pred_2 = _2976;
                    frontier_phi_61_pred_3 = _2975;
                    frontier_phi_61_pred_4 = _2974;
                    frontier_phi_61_pred_5 = _2973;
                }
                _2772 = frontier_phi_61_pred;
                _2782 = frontier_phi_61_pred_1;
                _2780 = frontier_phi_61_pred_2;
                _2778 = frontier_phi_61_pred_3;
                _2776 = frontier_phi_61_pred_4;
                _2774 = frontier_phi_61_pred_5;
                uint _2923 = _2922 + 1u;
                if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2916 = _2772;
                    _2917 = _2774;
                    _2918 = _2776;
                    _2919 = _2778;
                    _2920 = _2780;
                    _2921 = _2782;
                    _2922 = _2923;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((4294967295u << _2788) & _2670) == 0u)
        {
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
            _2892 = _2779;
            _2894 = _2781;
        }
        else
        {
            float _2909 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
            float _2910 = _2909 * _2624;
            float _2911 = _2909 * _2625;
            float _2912 = _2909 * _2626;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _3023 = _2771;
                float _3024 = _2773;
                float _3025 = _2775;
                float _3026 = _2777;
                float _3027 = _2779;
                float _3028 = _2781;
                uint _3029 = _2788;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3039)
                    {
                        frontier_phi_67_pred = _3026;
                        frontier_phi_67_pred_1 = _3027;
                        frontier_phi_67_pred_2 = _3028;
                        frontier_phi_67_pred_3 = _3025;
                        frontier_phi_67_pred_4 = _3024;
                        frontier_phi_67_pred_5 = _3023;
                    }
                    else
                    {
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        uint _3242 = _3038;
                        uint _3243;
                        vec4 _3268;
                        float _3269;
                        vec4 _3284;
                        vec3 _3296;
                        vec4 _3311;
                        vec4 _3326;
                        float _3372;
                        bool _3373;
                        for (;;)
                        {
                            uint _3253 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3242));
                            _3243 = (_3242 + 4294967295u) & _3242;
                            uint _3255 = _3253 * 40u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3269 = _3268.w;
                            uint _3271 = (_3253 * 40u) + 4u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3253 * 40u) + 8u;
                            _3296 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x));
                            uint _3298 = (_3253 * 40u) + 16u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3253 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3253 * 40u) + 24u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3347 = (_3253 * 40u) + 28u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3372 = fma(_2626, _3360.z, fma(_2625, _3360.y, _3360.x * _2624)) + _3360.w;
                            _3373 = !((fma(_2626, _3341.z, fma(_2625, _3341.y, _3341.x * _2624)) + _3341.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3373)
                            {
                                float _3400 = _3268.x - _2624;
                                float _3401 = _3268.y - _2625;
                                float _3402 = _3268.z - _2626;
                                float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                                float _3406 = inversesqrt(_3403);
                                float _3407 = _3406 * _3400;
                                float _3408 = _3406 * _3401;
                                float _3409 = _3406 * _3402;
                                float _3413 = 1.0 - (_3403 / (_3269 * _3269));
                                float _4526 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3418 = sqrt(_3403) * _3284.w;
                                float _3420 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                                float _3421 = _3420 * _3420;
                                float _3424 = ((1.0 - _3421) * dot(vec3(_3407, _3408, _3409), vec3(_932, _935, _938))) + _3421;
                                float _3427 = _3418 * _3418;
                                float _3431 = (fma(_2626, _3311.z, fma(_2625, _3311.y, _3311.x * _2624)) + _3311.w) / _3372;
                                float _3432 = (fma(_2626, _3326.z, fma(_2625, _3326.y, _3326.x * _2624)) + _3326.w) / _3372;
                                float _3436 = 1.0 - dot(vec2(_3431, _3432), vec2(_3431, _3432));
                                float _4542 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3438 = _3437 * (((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3414) / ((_3427 * 0.699999988079071044921875) + 1.0));
                                float _3450 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                                float _3451 = 1.0 - _992;
                                float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                                float _3459 = _3458 * _3458;
                                float _3460 = _3459 * _3459;
                                float _3461 = _3407 - _2910;
                                float _3462 = _3408 - _2911;
                                float _3463 = _3409 - _2912;
                                float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                                float _3471 = dot(vec3(_932, _935, _938), vec3((-0.0) - _2910, (-0.0) - _2911, (-0.0) - _2912));
                                float _4553 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3475 = dot(vec3(_932, _935, _938), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                                float _4564 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                                float _3483 = _3420 * _3459;
                                float _3484 = _3483 * _3483;
                                float _3490 = ((1.0 - _3484) * dot(vec3(_932, _935, _938), vec3(_3407, _3408, _3409))) + _3484;
                                float _4575 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3492 = 1.0 - _3459;
                                float _3502 = (0.5 / (((_3491 * ((_3474 * _3492) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3459) * _3474))) * _3491;
                                float _4586 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3512 = (_3437 * _3414) * (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) / ((_3482 * _3482) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3512 * _3296.x;
                                frontier_phi_73_pred_1 = _3512 * _3296.y;
                                frontier_phi_73_pred_2 = _3438 * _3284.z;
                                frontier_phi_73_pred_3 = _3438 * _3284.y;
                                frontier_phi_73_pred_4 = _3438 * _3284.x;
                                frontier_phi_73_pred_5 = _3512 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_73_pred;
                            _3517 = frontier_phi_73_pred_1;
                            _3521 = frontier_phi_73_pred_2;
                            _3520 = frontier_phi_73_pred_3;
                            _3519 = frontier_phi_73_pred_4;
                            _3518 = frontier_phi_73_pred_5;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            _3228 = _3521 + _3241;
                            _3223 = _3516 + _3236;
                            _3224 = _3517 + _3237;
                            _3225 = _3518 + _3238;
                            if (_3243 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3243;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3226;
                        frontier_phi_67_pred_1 = _3227;
                        frontier_phi_67_pred_2 = _3228;
                        frontier_phi_67_pred_3 = _3225;
                        frontier_phi_67_pred_4 = _3224;
                        frontier_phi_67_pred_5 = _3223;
                    }
                    _2891 = frontier_phi_67_pred;
                    _2893 = frontier_phi_67_pred_1;
                    _2895 = frontier_phi_67_pred_2;
                    _2889 = frontier_phi_67_pred_3;
                    _2887 = frontier_phi_67_pred_4;
                    _2885 = frontier_phi_67_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2885;
                        _3024 = _2887;
                        _3025 = _2889;
                        _3026 = _2891;
                        _3027 = _2893;
                        _3028 = _2895;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2893;
                frontier_phi_55_56_ladder_1 = _2895;
                frontier_phi_55_56_ladder_2 = _2891;
                frontier_phi_55_56_ladder_3 = _2889;
                frontier_phi_55_56_ladder_4 = _2887;
                frontier_phi_55_56_ladder_5 = _2885;
            }
            else
            {
                frontier_phi_55_56_ladder = _2779;
                frontier_phi_55_56_ladder_1 = _2781;
                frontier_phi_55_56_ladder_2 = _2777;
                frontier_phi_55_56_ladder_3 = _2775;
                frontier_phi_55_56_ladder_4 = _2773;
                frontier_phi_55_56_ladder_5 = _2771;
            }
            _2884 = frontier_phi_55_56_ladder_5;
            _2886 = frontier_phi_55_56_ladder_4;
            _2888 = frontier_phi_55_56_ladder_3;
            _2890 = frontier_phi_55_56_ladder_2;
            _2892 = frontier_phi_55_56_ladder;
            _2894 = frontier_phi_55_56_ladder_1;
        }
        float _2899 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _2683 = (_2899 * _2890) + _2138;
        _2685 = (_2899 * _2892) + _2140;
        _2687 = (_2899 * _2894) + _2142;
        _2689 = ((_2884 * 0.039999999105930328369140625) * _2899) + _2468;
        _2691 = ((_2886 * 0.039999999105930328369140625) * _2899) + _2470;
        _2693 = ((_2888 * 0.039999999105930328369140625) * _2899) + _2472;
    }
    else
    {
        _2683 = _2138;
        _2685 = _2140;
        _2687 = _2142;
        _2689 = _2468;
        _2691 = _2470;
        _2693 = _2472;
    }
    float _4602 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4613 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4624 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    uint _2713 = _268 + 6u;
    float _2721 = _913 / cbSceneParam._m0[86u].x;
    float _2722 = _914 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _846 : (isnan(_846) ? cbSceneParam._m0[77u].w : min(_846, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_846 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_846) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _846 : min(cbSceneParam._m0[80u].w, _846));
        float _2797 = _2796 / _846;
        float _2808 = _2797 * _898;
        float _2809 = _899 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2812 = _2797 * _900;
        float _2814 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2809;
        float _2822 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2985;
        if (abs((_2810 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2985 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2945 = 1.0 / cbSceneParam._m0[80u].x;
            float _2946 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2947 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2956 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : min(_2946, 0.0));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            _2985 = ((abs(_2822 / _2810) * cbSceneParam._m0[80u].y) * ((((_2956 - _2957) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))))) * _2945)) - ((exp2(_2832 * _2956) - exp2(_2832 * _2957)) * _2945))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _2987 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _2996 = exp2((_2985 * (-1.44269502162933349609375)) * (1.0 - _2987.w));
        float _2997 = log2(_2996);
        float _3013 = log2(_2741);
        _2834 = (exp2(_3013 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].x)) * _2987.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2836 = (exp2(_3013 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].y)) * _2987.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2838 = (exp2(_3013 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].z)) * _2987.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2840 = _2996 * _2741;
    }
    else
    {
        _2834 = _2738;
        _2836 = _2739;
        _2838 = _2740;
        _2840 = _2741;
    }
    float _2852 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2853 = _2852 == 3.0;
    float _2854 = log2(_2840);
    float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2683 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _976))) + ((_2689 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2685 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _976))) + ((_2691 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2687 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _976))) + ((_2693 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2872 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2872 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.y = _2872 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.z = _2872 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.w = cbInstanceData._m0[_2713].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
}


