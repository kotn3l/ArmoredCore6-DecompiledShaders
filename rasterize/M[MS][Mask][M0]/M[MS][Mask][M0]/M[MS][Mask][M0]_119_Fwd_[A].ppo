#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1624;
float _3981;
float _3982;
float _3983;
float _3984;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3993 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4004 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4015 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4026 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _497 = (_490 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _498 = (_490 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _499 = (_490 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4037 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4048 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _642 = (_349.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _643 = (_349.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _644 = (_349.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _727 = _723.z;
    float _734 = ((_706.x - _725) * _490) + _725;
    float _735 = ((_706.y - _726) * _490) + _726;
    float _736 = ((_706.z - _727) * _490) + _727;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _759 = ((_748.x - _734) * _563) + _734;
    float _760 = ((_748.y - _735) * _563) + _735;
    float _761 = ((_748.z - _736) * _563) + _736;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _786 = ((_773.z - _761) * _632) + _761;
    float _789 = ((((_773.x - _759) * _632) + _759) * 2.0) + (-1.0);
    float _790 = ((((_773.y - _760) * _632) + _760) * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _4059 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _796 = sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))));
    vec4 _810 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _835 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _837 = _835.x;
    float _838 = 1.0 - _837;
    float _844 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _847 = ((isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : min(_844, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _856 = (_847 - ((((((_837 - _838) * cbMtdParam._m0[24u].w) + _838) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _847))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4080 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _857 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _864 = (_857 * (cbMtdParam._m0[17u].x - _662)) + _662;
    float _865 = (_857 * (cbMtdParam._m0[17u].y - _664)) + _664;
    float _866 = (_857 * (cbMtdParam._m0[17u].z - _666)) + _666;
    float _881 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _882 = _881 * TEXCOORD.z;
    float _883 = _881 * TEXCOORD.w;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _882) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _883) + cbTextureTilingScale._m0[19u].w));
    float _897 = _895.x;
    float _898 = 1.0 - _897;
    float _925 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_897 - _898) * cbMtdParam._m0[24u].y) + _898) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4091 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _926 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _934 = ((((cbMtdParam._m0[10u].x - _864) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _926) + _864;
    float _935 = ((((cbMtdParam._m0[10u].y - _865) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _926) + _865;
    float _936 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _866)) * _926) + _866;
    float _941 = (((_683.z - _786) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _786;
    float _945 = ((_810.z - _941) * cbMtdParam._m0[19u].w) + _941;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _966 = (_959.x * 2.0) + (-1.0);
    float _967 = (_959.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _4102 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _976 = (_857 * (_959.z - _945)) + _945;
    float _979 = ((cbMtdParam._m0[23u].y - _976) * _926) + _976;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _882) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _883) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1004 = (_998.x * 2.0) + (-1.0);
    float _1005 = (_998.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _4113 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1020 = (_789 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_683.x * 2.0) + (-1.0)))) + (((_810.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1021 = (_790 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_683.y * 2.0) + (-1.0)))) + (((_810.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1033 = (((_966 - _1020) + (cbMtdParam._m0[21u].x * _1020)) * _857) + _1020;
    float _1034 = (((_967 - _1021) + (cbMtdParam._m0[21u].x * _1021)) * _857) + _1021;
    float _1035 = (_857 * (sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) - _796)) + _796;
    float _1046 = (((_1004 - _1033) + (_1033 * cbMtdParam._m0[22u].z)) * _926) + _1033;
    float _1047 = (((_1005 - _1034) + (_1034 * cbMtdParam._m0[22u].z)) * _926) + _1034;
    float _1048 = ((sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _1035) * _926) + _1035;
    float _1050 = cbMtdParam._m0[22u].x + _810.w;
    float _1053 = fma(_1048, _261 * NORMAL.x, fma(_1047, _268 * TANGENT.x, (_254 * _246) * _1046));
    float _1056 = fma(_1048, _261 * NORMAL.y, fma(_1047, _268 * TANGENT.y, (_254 * _247) * _1046));
    float _1059 = fma(_1048, _261 * NORMAL.z, fma(_1047, _268 * TANGENT.z, (_254 * _248) * _1046));
    float _1063 = inversesqrt(dot(vec3(_1053, _1056, _1059), vec3(_1053, _1056, _1059)));
    float _1064 = _1063 * _1053;
    float _1065 = _1063 * _1056;
    float _1066 = _1063 * _1059;
    float _4124 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1067 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4146 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4157 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4168 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1085 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1135 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1125);
    float _1136 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1125);
    float _1137 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1125);
    float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
    float _1142 = _1135 * _1141;
    float _1143 = _1136 * _1141;
    float _1144 = _1137 * _1141;
    vec4 _1149 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1151 = _1149.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1305 = sqrt(((_1135 * _1135) + (_1136 * _1136)) + (_1137 * _1137));
        float _1311 = (cbMatDynParam._m0[5u].x * _1305) + cbMatDynParam._m0[5u].y;
        float _4179 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1316 = (cbMatDynParam._m0[5u].z * _1305) + cbMatDynParam._m0[5u].w;
        float _4190 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) - _1312)) + _1312) < ((_1151 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1162 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1163 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1181 = fma(_1066, cbSceneParam._m0[5u].z, fma(_1065, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1064));
    float _1184 = fma(_1066, cbSceneParam._m0[6u].z, fma(_1065, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1064));
    float _1187 = fma(_1066, cbSceneParam._m0[7u].z, fma(_1065, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1064));
    uint _1200 = _293 + 9u;
    uint _1201 = _1200 + uint(cbMatDynParam._m0[0u].w);
    float _1207 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1201].x;
    float _1208 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1201].y;
    float _1209 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1201].z;
    float _4201 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    vec4 _1221 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1162, cbSceneParam._m0[86u].y * _1163));
    float _1225 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * TEXCOORD_5.w) * _1221.x;
    float _1226 = dot(vec3(_1064, _1065, _1066), vec3(_1142, _1143, _1144));
    float _1229 = _1226 * 2.0;
    float _1233 = (_1229 * _1064) - _1142;
    float _1234 = (_1229 * _1065) - _1143;
    float _1235 = (_1229 * _1066) - _1144;
    float _1239 = abs(dot(vec3(_1142, _1143, _1144), vec3(_1064, _1065, _1066)));
    float _4234 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1241 = sqrt(_1067);
    float _1254 = exp2((_1241 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1241 * 3.0));
    float _1286 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1623;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1348 = fma(_1294, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286));
        float _1352 = fma(_1294, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286));
        float _1356 = fma(_1294, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286));
        float _1381 = _1286 + _1064;
        float _1382 = _1290 + _1065;
        float _1383 = _1294 + _1066;
        float _1393 = fma(_1383, cbModelParam._m0[26u].z, fma(_1382, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381)) - _1348;
        float _1394 = fma(_1383, cbModelParam._m0[27u].z, fma(_1382, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381)) - _1352;
        float _1395 = fma(_1383, cbModelParam._m0[28u].z, fma(_1382, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381)) - _1356;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1348 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1352 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[34u].z) + ((((((_1356 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1451 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1417.x + (-0.5));
        float _1453 = _1451 * (_1417.y + (-0.5));
        float _1454 = _1451 * (_1417.z + (-0.5));
        float _1461 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1424.x + (-0.5));
        float _1463 = _1461 * (_1424.y + (-0.5));
        float _1464 = _1461 * (_1424.z + (-0.5));
        float _1471 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1431.x + (-0.5));
        float _1473 = _1471 * (_1431.y + (-0.5));
        float _1474 = _1471 * (_1431.z + (-0.5));
        float _1481 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1438.x + (-0.5));
        float _1483 = _1481 * (_1438.y + (-0.5));
        float _1484 = _1481 * (_1438.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1505 = (dot(vec3(_1064, _1065, _1066), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1515 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4282 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1517 + 1.0))) + _1522) * _1485;
        float _1532 = _1453 * 0.5;
        float _1533 = _1463 * 0.5;
        float _1534 = _1473 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1064, _1065, _1066), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4315 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1559 + 1.0))) + _1564) * _1486;
        float _1574 = _1454 * 0.5;
        float _1575 = _1464 * 0.5;
        float _1576 = _1474 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_1064, _1065, _1066), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4348 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1601 + 1.0))) + _1606) * _1487;
        _1623 = _1454;
        _1625 = _1453;
        _1626 = _1452;
        _1627 = _1464;
        _1628 = _1463;
        _1629 = _1462;
        _1630 = _1474;
        _1631 = _1473;
        _1632 = _1472;
        _1633 = _1487;
        _1634 = _1486;
        _1635 = _1485;
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1624;
        _1625 = _1624;
        _1626 = _1624;
        _1627 = _1624;
        _1628 = _1624;
        _1629 = _1624;
        _1630 = _1624;
        _1631 = _1624;
        _1632 = _1624;
        _1633 = _1624;
        _1634 = _1624;
        _1635 = _1624;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1664 = fma(_1294, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286));
        float _1668 = fma(_1294, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286));
        float _1672 = fma(_1294, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286));
        float _1695 = _1286 + _1064;
        float _1696 = _1290 + _1065;
        float _1697 = _1294 + _1066;
        float _1707 = fma(_1697, cbModelParam._m0[30u].z, fma(_1696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1695)) - _1664;
        float _1708 = fma(_1697, cbModelParam._m0[31u].z, fma(_1696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1695)) - _1668;
        float _1709 = fma(_1697, cbModelParam._m0[32u].z, fma(_1696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1695)) - _1672;
        float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
        float _1726 = ((_1713 * _1707) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1664 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1727 = ((_1713 * _1708) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1668 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1728 = ((_1713 * _1709) / cbModelParam._m0[35u].z) + ((((((_1672 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        float _1763 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1730.x + (-0.5));
        float _1765 = _1763 * (_1730.y + (-0.5));
        float _1766 = _1763 * (_1730.z + (-0.5));
        float _1773 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1737.x + (-0.5));
        float _1775 = _1773 * (_1737.y + (-0.5));
        float _1776 = _1773 * (_1737.z + (-0.5));
        float _1783 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1744.x + (-0.5));
        float _1785 = _1783 * (_1744.y + (-0.5));
        float _1786 = _1783 * (_1744.z + (-0.5));
        float _1793 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1751.x + (-0.5));
        float _1795 = _1793 * (_1751.y + (-0.5));
        float _1796 = _1793 * (_1751.z + (-0.5));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = _1764 * 0.5;
        float _1801 = _1774 * 0.5;
        float _1802 = _1784 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1064, _1065, _1066), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4411 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1827 + 1.0))) + _1832) * _1797;
        float _1842 = _1765 * 0.5;
        float _1843 = _1775 * 0.5;
        float _1844 = _1785 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1064, _1065, _1066), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4444 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1869 + 1.0))) + _1874) * _1798;
        float _1884 = _1766 * 0.5;
        float _1885 = _1776 * 0.5;
        float _1886 = _1786 * 0.5;
        float _1887 = dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886));
        float _1892 = (_1887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1887);
        float _1900 = (dot(vec3(_1064, _1065, _1066), vec3(_1892 * _1884, _1892 * _1885, _1892 * _1886)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1909 = sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1911 = _1910 * 2.0;
        float _1915 = (1.0 - _1910) / (_1910 + 1.0);
        float _4477 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1925 = ((((1.0 - _1916) * (_1911 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1911 + 1.0))) + _1916) * _1799;
        _1933 = _1766;
        _1934 = _1765;
        _1935 = _1764;
        _1936 = _1776;
        _1937 = _1775;
        _1938 = _1774;
        _1939 = _1786;
        _1940 = _1785;
        _1941 = _1784;
        _1942 = _1799;
        _1943 = _1798;
        _1944 = _1797;
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)));
    }
    else
    {
        _1933 = _1624;
        _1934 = _1624;
        _1935 = _1624;
        _1936 = _1624;
        _1937 = _1624;
        _1938 = _1624;
        _1939 = _1624;
        _1940 = _1624;
        _1941 = _1624;
        _1942 = _1624;
        _1943 = _1624;
        _1944 = _1624;
        _1945 = 0.0;
        _1946 = 0.0;
        _1947 = 0.0;
    }
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1637)) + _1637;
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1638)) + _1638;
    float _1980 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1957));
    float _2001 = _1233 * 0.5;
    float _2002 = _1234 * 0.5;
    float _2003 = _1235 * 0.5;
    float _2004 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2007 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2010 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2044;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2017 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1623, _1627, _1630, _1633));
        float _2021 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2025 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1626, _1629, _1632, _1635));
        float _2032 = dot(vec4(cbModelParam._m0[39u]), vec4(_2001, _2002, _2003, 1.0));
        _2044 = dot(vec3(isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2032) ? 0.0 : (isnan(0.0) ? _2032 : max(0.0, _2032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2044 = 1.0;
    }
    float _2055;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2046 = dot(vec4(cbModelParam._m0[40u]), vec4(_2001, _2002, _2003, 1.0));
        _2055 = dot(vec3(isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2046) ? 0.0 : (isnan(0.0) ? _2046 : max(0.0, _2046))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2055 = 1.0;
    }
    float _2059 = (_2055 * cbModelParam._m0[1u].x) + (_2044 * (1.0 - cbModelParam._m0[1u].x));
    float _2069 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1067);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2069 : min(cbModelParam._m0[25u].z, _2069));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2117 = fma(_1294, cbModelParam._m0[13u].z, fma(_1290, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1286)) + cbModelParam._m0[13u].w;
        float _2121 = fma(_1294, cbModelParam._m0[14u].z, fma(_1290, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1286)) + cbModelParam._m0[14u].w;
        float _2125 = fma(_1294, cbModelParam._m0[15u].z, fma(_1290, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1286)) + cbModelParam._m0[15u].w;
        float _2128 = fma(_1235, cbModelParam._m0[13u].z, fma(_1234, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233));
        float _2131 = fma(_1235, cbModelParam._m0[14u].z, fma(_1234, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233));
        float _2134 = fma(_1235, cbModelParam._m0[15u].z, fma(_1234, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233));
        float _2162;
        if (_2128 > 0.0)
        {
            _2162 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2162 = frontier_phi_17_15_ladder;
        }
        float _2363;
        if (_2131 > 0.0)
        {
            _2363 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2363 = frontier_phi_26_22_ladder;
        }
        float _2606;
        if (_2134 > 0.0)
        {
            _2606 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2606 = frontier_phi_38_33_ladder;
        }
        float _2608 = isnan(_2363) ? _2162 : (isnan(_2162) ? _2363 : min(_2162, _2363));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _2128) + _2117;
        float _2614 = (_2609 * _2131) + _2121;
        float _2615 = (_2609 * _2134) + _2125;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2616;
        float _2620 = _2616 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 > _2620) || ((_2614 < _2618) || ((_2613 < _2618) || (_2613 > _2620))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2615, cbModelParam._m0[9u].z, fma(_2614, cbModelParam._m0[9u].y, _2613 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2615, cbModelParam._m0[10u].z, fma(_2614, cbModelParam._m0[10u].y, _2613 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2615, cbModelParam._m0[11u].z, fma(_2614, cbModelParam._m0[11u].y, _2613 * cbModelParam._m0[11u].x))), _2070);
            frontier_phi_16_38_ladder = _2739.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2739.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2739.x * cbModelParam._m0[1u].y;
        }
        _2150 = frontier_phi_16_38_ladder_2;
        _2152 = frontier_phi_16_38_ladder_1;
        _2154 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1233, _1234, _1235), _2070);
        _2150 = _2138.x * cbModelParam._m0[1u].y;
        _2152 = _2138.y * cbModelParam._m0[1u].y;
        _2154 = _2138.z * cbModelParam._m0[1u].y;
    }
    float _2158 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1067);
    float _2159 = isnan(_2158) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2158 : min(cbModelParam._m0[25u].w, _2158));
    float _2249;
    float _2251;
    float _2253;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2213 = fma(_1294, cbModelParam._m0[21u].z, fma(_1290, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1286)) + cbModelParam._m0[21u].w;
        float _2217 = fma(_1294, cbModelParam._m0[22u].z, fma(_1290, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1286)) + cbModelParam._m0[22u].w;
        float _2221 = fma(_1294, cbModelParam._m0[23u].z, fma(_1290, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1286)) + cbModelParam._m0[23u].w;
        float _2224 = fma(_1235, cbModelParam._m0[21u].z, fma(_1234, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233));
        float _2227 = fma(_1235, cbModelParam._m0[22u].z, fma(_1234, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233));
        float _2230 = fma(_1235, cbModelParam._m0[23u].z, fma(_1234, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233));
        float _2368;
        if (_2224 > 0.0)
        {
            _2368 = abs((1.0 - _2213) / _2224);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2213 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2368 = frontier_phi_28_24_ladder;
        }
        float _2633;
        if (_2227 > 0.0)
        {
            _2633 = abs((1.0 - _2217) / _2227);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2217 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2633 = frontier_phi_40_35_ladder;
        }
        float _2838;
        if (_2230 > 0.0)
        {
            _2838 = abs((1.0 - _2221) / _2230);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2221 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2838 = frontier_phi_49_46_ladder;
        }
        float _2840 = isnan(_2633) ? _2368 : (isnan(_2368) ? _2633 : min(_2368, _2633));
        float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
        float _2845 = (_2841 * _2224) + _2213;
        float _2846 = (_2841 * _2227) + _2217;
        float _2847 = (_2841 * _2230) + _2221;
        float _2848 = _2841 * 9.9999997473787516355514526367188e-05;
        float _2849 = (-1.0) - _2848;
        float _2851 = _2848 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2847 > _2851) || ((_2847 < _2849) || ((_2846 > _2851) || ((_2846 < _2849) || ((_2845 < _2849) || (_2845 > _2851))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2847, cbModelParam._m0[17u].z, fma(_2846, cbModelParam._m0[17u].y, _2845 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2847, cbModelParam._m0[18u].z, fma(_2846, cbModelParam._m0[18u].y, _2845 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2847, cbModelParam._m0[19u].z, fma(_2846, cbModelParam._m0[19u].y, _2845 * cbModelParam._m0[19u].x))), _2159);
            frontier_phi_25_49_ladder = _3046.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3046.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3046.x * cbModelParam._m0[1u].z;
        }
        _2249 = frontier_phi_25_49_ladder_2;
        _2251 = frontier_phi_25_49_ladder_1;
        _2253 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2233 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1233, _1234, _1235), _2159);
        _2249 = _2233.x * cbModelParam._m0[1u].z;
        _2251 = _2233.y * cbModelParam._m0[1u].z;
        _2253 = _2233.z * cbModelParam._m0[1u].z;
    }
    float _2265 = ((((1.0 - _1254) * ((_1241 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1254 * _1241)) * _1225;
    float _2266 = _2265 * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2267 = _2265 * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2268 = _2265 * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2271 = fma(_2268, cbSceneParam._m0[89u].z, fma(_2267, cbSceneParam._m0[89u].y, _2266 * cbSceneParam._m0[89u].x));
    float _2274 = fma(_2268, cbSceneParam._m0[90u].z, fma(_2267, cbSceneParam._m0[90u].y, _2266 * cbSceneParam._m0[90u].x));
    float _2277 = fma(_2268, cbSceneParam._m0[91u].z, fma(_2267, cbSceneParam._m0[91u].y, _2266 * cbSceneParam._m0[91u].x));
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _1225 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2322 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2326 = _2289 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_1064, _1065, _1066));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_1064, _1065, _1066));
    float _4613 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4624 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2306].x * _2312) * _2347) + ((cbLight._m0[_2316].x * _2322) * _2345);
    float _2355 = ((_2312 * cbLight._m0[_2306].y) * _2347) + ((_2322 * cbLight._m0[_2316].y) * _2345);
    float _2356 = ((_2312 * cbLight._m0[_2306].z) * _2347) + ((_2322 * cbLight._m0[_2316].z) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2373;
    float _2375;
    float _2377;
    if (_2362)
    {
        _2373 = _2354;
        _2375 = _2355;
        _2377 = _2356;
    }
    else
    {
        uint _2381 = _2289 + 6u;
        float _2397 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_1064, _1065, _1066)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4635 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2400 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2373 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2354;
        _2375 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2355;
        _2377 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2356;
    }
    bool _2380 = _2360.y == 0u;
    float _2418;
    float _2420;
    float _2422;
    if (_2380)
    {
        _2418 = _2373;
        _2420 = _2375;
        _2422 = _2377;
    }
    else
    {
        uint _2577 = _2289 + 7u;
        float _2593 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_1064, _1065, _1066)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4651 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2596 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2418 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2373;
        _2420 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2375;
        _2422 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2377;
    }
    uint _2425 = _2289 + 8u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _1067) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2289].x + _1142;
    float _2441 = cbLight._m0[_2289].y + _1143;
    float _2442 = cbLight._m0[_2289].z + _1144;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2289].xyz));
    float _4667 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _4678 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _2454 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2455 = dot(vec3(_1064, _1065, _1066), vec3(_2447, _2448, _2449));
    float _4689 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2447, _2448, _2449));
    float _4700 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2439 * _2439;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2478 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2479 = 1.0 - _2439;
    float _2490 = (0.5 / (((_2454 * ((_2453 * _2479) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2479) + _2439) * _2453))) * _2453;
    float _4711 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    uint _2503 = _2289 + 9u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _1067) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2326].x + _1142;
    float _2517 = cbLight._m0[_2326].y + _1143;
    float _2518 = cbLight._m0[_2326].z + _1144;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2326].xyz));
    float _4722 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2530 = dot(vec3(_1064, _1065, _1066), vec3(_2523, _2524, _2525));
    float _4733 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2523, _2524, _2525));
    float _4744 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2515 * _2515;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2551 = (exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2552 = 1.0 - _2515;
    float _2562 = (0.5 / (((_2454 * ((_2529 * _2552) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2552) + _2515) * _2529))) * _2529;
    float _4755 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    float _2574 = (((_2551 * cbLight._m0[_2503].x) * _2564) * _2312) + (((_2478 * cbLight._m0[_2425].x) * _2492) * _2322);
    float _2575 = (((_2551 * cbLight._m0[_2503].y) * _2564) * _2312) + (((_2478 * cbLight._m0[_2425].y) * _2492) * _2322);
    float _2576 = (((_2551 * cbLight._m0[_2503].z) * _2564) * _2312) + (((_2478 * cbLight._m0[_2425].z) * _2492) * _2322);
    float _2638;
    float _2640;
    float _2642;
    if (_2362)
    {
        _2638 = _2574;
        _2640 = _2575;
        _2642 = _2576;
    }
    else
    {
        uint _2644 = _2289 + 2u;
        uint _2648 = _2289 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _1067) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _1142;
        float _2665 = cbLight._m0[_2644].y + _1143;
        float _2666 = cbLight._m0[_2644].z + _1144;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2644].xyz));
        float _4766 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2678 = dot(vec3(_1064, _1065, _1066), vec3(_2671, _2672, _2673));
        float _4777 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4788 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2699 = (exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2700 = 1.0 - _2663;
        float _2710 = (0.5 / (((_2454 * ((_2677 * _2700) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2700) + _2663) * _2677))) * _2677;
        float _4799 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2638 = (((_2699 * cbLight._m0[_2648].x) * _2712) * _2713) + _2574;
        _2640 = (((_2699 * cbLight._m0[_2648].y) * _2712) * _2713) + _2575;
        _2642 = (((_2699 * cbLight._m0[_2648].z) * _2712) * _2713) + _2576;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2380)
    {
        _2748 = _2638;
        _2750 = _2640;
        _2752 = _2642;
    }
    else
    {
        uint _2759 = _2289 + 3u;
        uint _2763 = _2289 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _1067) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _1142;
        float _2780 = cbLight._m0[_2759].y + _1143;
        float _2781 = cbLight._m0[_2759].z + _1144;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2759].xyz));
        float _4815 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2793 = dot(vec3(_1064, _1065, _1066), vec3(_2786, _2787, _2788));
        float _4826 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4837 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2814 = (exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2815 = 1.0 - _2778;
        float _2825 = (0.5 / (((_2454 * ((_2792 * _2815) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2815) + _2778) * _2792))) * _2792;
        float _4848 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2748 = (((_2814 * cbLight._m0[_2763].x) * _2827) * _2828) + _2638;
        _2750 = (((_2814 * cbLight._m0[_2763].y) * _2827) * _2828) + _2640;
        _2752 = (((_2814 * cbLight._m0[_2763].z) * _2827) * _2828) + _2642;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2287.y == 0u)
    {
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2903;
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2903;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2903;
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1163) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _1162) / _2919)));
        float _2940 = (log2(_2906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            uint _3210 = 0u;
            uint _3219;
            bool _3220;
            for (;;)
            {
                _3219 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                _3220 = _3219 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3220)
                {
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                else
                {
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    uint _3355;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3219;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    for (;;)
                    {
                        uint _3359 = uint(findLSB(_3355)) + (_3210 << 5u);
                        uint _3356 = (_3355 + 4294967295u) & _3355;
                        uint _3361 = _3359 * 48u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3381 = (_3359 * 48u) + 4u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3400 = (_3359 * 48u) + 8u;
                        vec3 _3411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x));
                        float _3415 = _3375.x - _2904;
                        float _3416 = _3375.y - _2905;
                        float _3417 = _3375.z - _2906;
                        float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                        float _3421 = inversesqrt(_3418);
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3425 = dot(vec3(_1181, _1184, _1187), vec3(_3422, _3423, _3424));
                        float _3430 = 1.0 - (_3418 * _3375.w);
                        float _4874 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3432 = sqrt(_3418) * _3394.w;
                        float _3435 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3425) + _3436;
                        float _3442 = _3432 * _3432;
                        float _3446 = ((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3431) / ((_3442 * 0.699999988079071044921875) + 1.0);
                        float _3450 = (-0.0) - _2904;
                        float _3451 = (-0.0) - _2905;
                        float _3452 = (-0.0) - _2906;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3467 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                        float _3468 = 1.0 - _1241;
                        float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                        float _3476 = _3475 * _3475;
                        float _3477 = _3476 * _3476;
                        float _3478 = _3457 + _3422;
                        float _3479 = _3458 + _3423;
                        float _3480 = _3459 + _3424;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3488 = dot(vec3(_1181, _1184, _1187), vec3(_3457, _3458, _3459));
                        float _4890 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3492 = dot(vec3(_1181, _1184, _1187), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                        float _4901 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                        float _3500 = _3435 * _3476;
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3425) + _3501;
                        float _4912 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3506 = 1.0 - _3476;
                        float _3516 = (0.5 / (((_3505 * ((_3491 * _3506) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3476) * _3491))) * _3505;
                        float _4923 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3527 = (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3499 * _3499) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125))) * _3431;
                        _3279 = (_3446 * _3394.x) + _3352;
                        _3280 = (_3446 * _3394.y) + _3353;
                        _3281 = (_3446 * _3394.z) + _3354;
                        _3276 = (_3527 * _3411.x) + _3349;
                        _3277 = (_3527 * _3411.y) + _3350;
                        _3278 = (_3527 * _3411.z) + _3351;
                        if (_3356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3356;
                        }
                    }
                    frontier_phi_66_pred = _3276;
                    frontier_phi_66_pred_1 = _3281;
                    frontier_phi_66_pred_2 = _3280;
                    frontier_phi_66_pred_3 = _3279;
                    frontier_phi_66_pred_4 = _3278;
                    frontier_phi_66_pred_5 = _3277;
                }
                _3052 = frontier_phi_66_pred;
                _3062 = frontier_phi_66_pred_1;
                _3060 = frontier_phi_66_pred_2;
                _3058 = frontier_phi_66_pred_3;
                _3056 = frontier_phi_66_pred_4;
                _3054 = frontier_phi_66_pred_5;
                uint _3211 = _3210 + 1u;
                if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3204 = _3052;
                    _3205 = _3054;
                    _3206 = _3056;
                    _3207 = _3058;
                    _3208 = _3060;
                    _3209 = _3062;
                    _3210 = _3211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((4294967295u << _3068) & _2950) == 0u)
        {
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
        }
        else
        {
            float _3197 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
            float _3198 = _3197 * _2904;
            float _3199 = _3197 * _2905;
            float _3200 = _3197 * _2906;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3332 = _3051;
                float _3333 = _3053;
                float _3334 = _3055;
                float _3335 = _3057;
                float _3336 = _3059;
                float _3337 = _3061;
                uint _3338 = _3068;
                uint _3347;
                bool _3348;
                for (;;)
                {
                    _3347 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                    _3348 = _3347 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3348)
                    {
                        frontier_phi_77_pred = _3337;
                        frontier_phi_77_pred_1 = _3336;
                        frontier_phi_77_pred_2 = _3335;
                        frontier_phi_77_pred_3 = _3334;
                        frontier_phi_77_pred_4 = _3333;
                        frontier_phi_77_pred_5 = _3332;
                    }
                    else
                    {
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3554 = _3332;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        float _3558 = _3336;
                        float _3559 = _3337;
                        uint _3560 = _3347;
                        uint _3561;
                        vec4 _3586;
                        float _3587;
                        vec4 _3602;
                        vec3 _3614;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3571 = ((_3338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3560));
                            _3561 = (_3560 + 4294967295u) & _3560;
                            uint _3573 = _3571 * 40u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3587 = _3586.w;
                            uint _3589 = (_3571 * 40u) + 4u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3571 * 40u) + 8u;
                            _3614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x));
                            uint _3616 = (_3571 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3571 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3571 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3571 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_2906, _3678.z, fma(_2905, _3678.y, _3678.x * _2904)) + _3678.w;
                            _3691 = !((fma(_2906, _3659.z, fma(_2905, _3659.y, _3659.x * _2904)) + _3659.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3586.x - _2904;
                                float _3719 = _3586.y - _2905;
                                float _3720 = _3586.z - _2906;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3587 * _3587));
                                float _4934 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3736 = sqrt(_3721) * _3602.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_1181, _1184, _1187))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_2906, _3629.z, fma(_2905, _3629.y, _3629.x * _2904)) + _3629.w) / _3690;
                                float _3750 = (fma(_2906, _3644.z, fma(_2905, _3644.y, _3644.x * _2904)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4950 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _1241;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3198;
                                float _3780 = _3726 - _3199;
                                float _3781 = _3727 - _3200;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_1181, _1184, _1187), vec3((-0.0) - _3198, (-0.0) - _3199, (-0.0) - _3200));
                                float _4961 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3793 = dot(vec3(_1181, _1184, _1187), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4972 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_1181, _1184, _1187), vec3(_3725, _3726, _3727))) + _3802;
                                float _4983 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4994 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3756 * _3602.y;
                                frontier_phi_83_pred_1 = _3756 * _3602.x;
                                frontier_phi_83_pred_2 = _3830 * _3614.z;
                                frontier_phi_83_pred_3 = _3830 * _3614.y;
                                frontier_phi_83_pred_4 = _3830 * _3614.x;
                                frontier_phi_83_pred_5 = _3756 * _3602.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_83_pred;
                            _3837 = frontier_phi_83_pred_1;
                            _3836 = frontier_phi_83_pred_2;
                            _3835 = frontier_phi_83_pred_3;
                            _3834 = frontier_phi_83_pred_4;
                            _3839 = frontier_phi_83_pred_5;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            if (_3561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3561;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3546;
                        frontier_phi_77_pred_1 = _3545;
                        frontier_phi_77_pred_2 = _3544;
                        frontier_phi_77_pred_3 = _3543;
                        frontier_phi_77_pred_4 = _3542;
                        frontier_phi_77_pred_5 = _3541;
                    }
                    _3183 = frontier_phi_77_pred;
                    _3181 = frontier_phi_77_pred_1;
                    _3179 = frontier_phi_77_pred_2;
                    _3177 = frontier_phi_77_pred_3;
                    _3175 = frontier_phi_77_pred_4;
                    _3173 = frontier_phi_77_pred_5;
                    uint _3339 = _3338 + 1u;
                    if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3332 = _3173;
                        _3333 = _3175;
                        _3334 = _3177;
                        _3335 = _3179;
                        _3336 = _3181;
                        _3337 = _3183;
                        _3338 = _3339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3177;
                frontier_phi_58_59_ladder_1 = _3183;
                frontier_phi_58_59_ladder_2 = _3181;
                frontier_phi_58_59_ladder_3 = _3179;
                frontier_phi_58_59_ladder_4 = _3175;
                frontier_phi_58_59_ladder_5 = _3173;
            }
            else
            {
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            _3172 = frontier_phi_58_59_ladder_5;
            _3174 = frontier_phi_58_59_ladder_4;
            _3176 = frontier_phi_58_59_ladder;
            _3178 = frontier_phi_58_59_ladder_3;
            _3180 = frontier_phi_58_59_ladder_2;
            _3182 = frontier_phi_58_59_ladder_1;
        }
        float _3187 = isnan(1.0) ? _1225 : (isnan(_1225) ? 1.0 : min(_1225, 1.0));
        _2963 = (_3187 * _3178) + _2418;
        _2965 = (_3187 * _3180) + _2420;
        _2967 = (_3187 * _3182) + _2422;
        _2969 = ((_3172 * 0.039999999105930328369140625) * _3187) + _2748;
        _2971 = ((_3174 * 0.039999999105930328369140625) * _3187) + _2750;
        _2973 = ((_3176 * 0.039999999105930328369140625) * _3187) + _2752;
    }
    else
    {
        _2963 = _2418;
        _2965 = _2420;
        _2967 = _2422;
        _2969 = _2748;
        _2971 = _2750;
        _2973 = _2752;
    }
    float _5010 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _5021 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _5032 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _2990 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2963 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1225))) + ((_2969 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _2991 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2965 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1225))) + ((_2971 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2967 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1225))) + ((_2973 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    uint _2993 = _293 + 6u;
    float _3001 = _1162 / cbSceneParam._m0[86u].x;
    float _3002 = _1163 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _1085 : (isnan(_1085) ? cbSceneParam._m0[77u].w : min(_1085, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_1085 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_1085) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1085 : min(cbSceneParam._m0[80u].w, _1085));
        float _3077 = _3076 / _1085;
        float _3088 = _3077 * _1135;
        float _3089 = _1136 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3092 = _3077 * _1137;
        float _3094 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3089;
        float _3102 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3289;
        if (abs((_3090 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3289 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3233 = 1.0 / cbSceneParam._m0[80u].x;
            float _3234 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3235 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            _3289 = ((abs(_3102 / _3090) * cbSceneParam._m0[80u].y) * ((((_3244 - _3245) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))))) * _3233)) - ((exp2(_3112 * _3244) - exp2(_3112 * _3245)) * _3233))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3291 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3300 = exp2((_3289 * (-1.44269502162933349609375)) * (1.0 - _3291.w));
        float _3301 = log2(_3300);
        float _3317 = log2(_3021);
        _3114 = (exp2(_3317 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].x)) * _3291.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3116 = (exp2(_3317 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].y)) * _3291.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3118 = (exp2(_3317 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].z)) * _3291.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3120 = _3300 * _3021;
    }
    else
    {
        _3114 = _3018;
        _3116 = _3019;
        _3118 = _3020;
        _3120 = _3021;
    }
    bool _3327;
    vec4 _3130;
    vec4 _3152;
    float _3154;
    float _3158;
    float _3159;
    float _3160;
    float _3161;
    bool _3171;
    for (;;)
    {
        _3130 = cbMatDynParam._m0[0u];
        float _3132 = roundEven(_3130.y);
        bool _3133 = _3132 == 3.0;
        float _3134 = log2(_3120);
        float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * _2990;
        float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * _2991;
        float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * _2992;
        float _3150 = _1151 + (-0.5);
        _3152 = cbMtdParam._m0[1u];
        _3154 = _3152.y * _3150;
        float _3157 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3158 = _3157 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
        _3159 = _3157 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
        _3160 = _3157 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
        _3161 = _3150 * 0.999000012874603271484375;
        _3171 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3171)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3161) < 0.5)
            {
                _3327 = true;
                break;
            }
        }
        uint _3268 = _1200 + uint(_3130.w);
        if ((cbInstanceData._m0[_3268].w < 1.0) && ((cbInstanceData._m0[_3268].w + _3161) < 0.5))
        {
            _3327 = true;
            break;
        }
        if ((_3154 + 1.0) < _3152.x)
        {
            _3327 = true;
            break;
        }
        _3327 = false;
        break;
    }
    float _3532;
    if (_3327)
    {
        discard_state = true;
        _3532 = 0.0;
    }
    else
    {
        _3532 = cbInstanceData._m0[_2993].w;
    }
    SV_Target.x = _3158;
    SV_Target.y = _3159;
    SV_Target.z = _3160;
    SV_Target.w = _3532;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
    discard_exit();
}


