#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1453;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3779 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3790 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3801 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3812 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _455 = (_448 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _456 = (_448 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _457 = (_448 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3823 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _567 = _565.x;
    float _577 = dot(vec4(_567, _565.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _589 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _378.z) * 2.0) - ((((_567 - _577) * cbMtdParam._m0[24u].z) + _577) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3834 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _597 = (_590 * ((_548.x * cbMtdParam._m0[14u].x) - _528)) + _528;
    float _598 = (_590 * ((_548.y * cbMtdParam._m0[14u].y) - _529)) + _529;
    float _599 = (_590 * ((_548.z * cbMtdParam._m0[14u].z) - _530)) + _530;
    float _603 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _597;
    float _606 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _598;
    float _609 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _599;
    float _616 = ((_597 - _603) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _603;
    float _617 = ((_598 - _606) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _606;
    float _618 = ((_599 - _609) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _609;
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _701 = _697.z;
    float _708 = ((_680.x - _699) * _448) + _699;
    float _709 = ((_680.y - _700) * _448) + _700;
    float _710 = ((_680.z - _701) * _448) + _701;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _733 = ((_722.x - _708) * _521) + _708;
    float _734 = ((_722.y - _709) * _521) + _709;
    float _735 = ((_722.z - _710) * _521) + _710;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _760 = ((_747.z - _735) * _590) + _735;
    float _763 = ((((_747.x - _733) * _590) + _733) * 2.0) + (-1.0);
    float _764 = ((((_747.y - _734) * _590) + _734) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3845 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _800 = (_763 + ((((_655.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_788.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _801 = (_764 + ((((_655.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_788.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _804 = fma(_770, _243, fma(_801, _250, _800 * _236));
    float _807 = fma(_770, _244, fma(_801, _251, _800 * _237));
    float _810 = fma(_770, _245, fma(_801, _252, _800 * _238));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    vec4 _841 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _843 = _841.x;
    float _844 = 1.0 - _843;
    float _850 = (cbMtdParam._m0[19u].x + dot(vec4(_814 * _804, _814 * _807, _814 * _810, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_843 - _844) * cbMtdParam._m0[24u].w) + _844) * cbMtdParam._m0[21u].z);
    float _3856 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _851 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _858 = (_851 * ((_636.x * cbMtdParam._m0[18u].x) - _616)) + _616;
    float _859 = (_851 * ((_636.y * cbMtdParam._m0[18u].y) - _617)) + _617;
    float _860 = (_851 * ((_636.z * cbMtdParam._m0[18u].z) - _618)) + _618;
    float _865 = (((_655.z - _760) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _760;
    float _869 = ((_788.z - _865) * cbMtdParam._m0[19u].w) + _865;
    vec4 _882 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _889 = (_882.x * 2.0) + (-1.0);
    float _890 = (_882.y * 2.0) + (-1.0);
    float _891 = dot(vec2(_889, _890), vec2(_889, _890));
    float _3867 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _899 = ((_882.z - _869) * _851) + _869;
    float _909 = ((sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _770) * _851) + _770;
    float _912 = (((_889 - _800) * _851) + _800) + (cbMtdParam._m0[21u].x * _800);
    float _913 = (((_890 - _801) * _851) + _801) + (cbMtdParam._m0[21u].x * _801);
    float _917 = cbMtdParam._m0[22u].x + _788.w;
    float _920 = fma(_909, _243, fma(_913, _250, _912 * _236));
    float _923 = fma(_909, _244, fma(_913, _251, _912 * _237));
    float _926 = fma(_909, _245, fma(_913, _252, _912 * _238));
    float _930 = inversesqrt(dot(vec3(_920, _923, _926), vec3(_920, _923, _926)));
    float _931 = _930 * _920;
    float _932 = _930 * _923;
    float _933 = _930 * _926;
    float _3878 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _934 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _3900 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _3911 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _3922 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _952 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1004 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _994);
    float _1005 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _994);
    float _1006 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _994);
    float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
    float _1011 = _1004 * _1010;
    float _1012 = _1005 * _1010;
    float _1013 = _1006 * _1010;
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_933, cbSceneParam._m0[5u].z, fma(_932, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _931));
    float _1041 = fma(_933, cbSceneParam._m0[6u].z, fma(_932, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _931));
    float _1044 = fma(_933, cbSceneParam._m0[7u].z, fma(_932, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _931));
    uint _1058 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1064 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1058].x;
    float _1065 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1058].y;
    float _1066 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1058].z;
    float _3933 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1082 = ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * TEXCOORD_5.w) * _1078.x;
    float _1083 = dot(vec3(_931, _932, _933), vec3(_1011, _1012, _1013));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _931) - _1011;
    float _1091 = (_1086 * _932) - _1012;
    float _1092 = (_1086 * _933) - _1013;
    float _1096 = abs(dot(vec3(_1011, _1012, _1013), vec3(_931, _932, _933)));
    float _3966 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_934);
    float _1111 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1452;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1177 = fma(_1151, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143));
        float _1181 = fma(_1151, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143));
        float _1185 = fma(_1151, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143));
        float _1210 = _1143 + _931;
        float _1211 = _1147 + _932;
        float _1212 = _1151 + _933;
        float _1222 = fma(_1212, cbModelParam._m0[26u].z, fma(_1211, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1210)) - _1177;
        float _1223 = fma(_1212, cbModelParam._m0[27u].z, fma(_1211, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1210)) - _1181;
        float _1224 = fma(_1212, cbModelParam._m0[28u].z, fma(_1211, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1210)) - _1185;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1177 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1181 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[34u].z) + ((((((_1185 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1280 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1246.x + (-0.5));
        float _1282 = _1280 * (_1246.y + (-0.5));
        float _1283 = _1280 * (_1246.z + (-0.5));
        float _1290 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1253.x + (-0.5));
        float _1292 = _1290 * (_1253.y + (-0.5));
        float _1293 = _1290 * (_1253.z + (-0.5));
        float _1300 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1260.x + (-0.5));
        float _1302 = _1300 * (_1260.y + (-0.5));
        float _1303 = _1300 * (_1260.z + (-0.5));
        float _1310 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1267.x + (-0.5));
        float _1312 = _1310 * (_1267.y + (-0.5));
        float _1313 = _1310 * (_1267.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1334 = (dot(vec3(_931, _932, _933), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1344 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4014 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1346 + 1.0))) + _1351) * _1314;
        float _1361 = _1282 * 0.5;
        float _1362 = _1292 * 0.5;
        float _1363 = _1302 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_931, _932, _933), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4047 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1388 + 1.0))) + _1393) * _1315;
        float _1403 = _1283 * 0.5;
        float _1404 = _1293 * 0.5;
        float _1405 = _1303 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_931, _932, _933), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4080 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1430 + 1.0))) + _1435) * _1316;
        _1452 = _1283;
        _1454 = _1282;
        _1455 = _1281;
        _1456 = _1293;
        _1457 = _1292;
        _1458 = _1291;
        _1459 = _1303;
        _1460 = _1302;
        _1461 = _1301;
        _1462 = _1316;
        _1463 = _1315;
        _1464 = _1314;
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1453;
        _1454 = _1453;
        _1455 = _1453;
        _1456 = _1453;
        _1457 = _1453;
        _1458 = _1453;
        _1459 = _1453;
        _1460 = _1453;
        _1461 = _1453;
        _1462 = _1453;
        _1463 = _1453;
        _1464 = _1453;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1151, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143));
        float _1494 = fma(_1151, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143));
        float _1498 = fma(_1151, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143));
        float _1521 = _1143 + _931;
        float _1522 = _1147 + _932;
        float _1523 = _1151 + _933;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_931, _932, _933), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4143 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_931, _932, _933), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4176 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_931, _932, _933), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4209 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1453;
        _1760 = _1453;
        _1761 = _1453;
        _1762 = _1453;
        _1763 = _1453;
        _1764 = _1453;
        _1765 = _1453;
        _1766 = _1453;
        _1767 = _1453;
        _1768 = _1453;
        _1769 = _1453;
        _1770 = _1453;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1090 * 0.5;
    float _1828 = _1091 * 0.5;
    float _1829 = _1092 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1452, _1456, _1459, _1462));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1151, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1151, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1151, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1957 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1960 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1988 = frontier_phi_14_12_ladder;
        }
        float _2209;
        if (_1957 > 0.0)
        {
            _2209 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2209 = frontier_phi_23_19_ladder;
        }
        float _2455;
        if (_1960 > 0.0)
        {
            _2455 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2455 = frontier_phi_35_30_ladder;
        }
        float _2457 = isnan(_2209) ? _1988 : (isnan(_1988) ? _2209 : min(_1988, _2209));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1954) + _1943;
        float _2463 = (_2458 * _1957) + _1947;
        float _2464 = (_2458 * _1960) + _1951;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2465;
        float _2469 = _2465 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 > _2469) || ((_2463 < _2467) || ((_2462 < _2467) || (_2462 > _2469))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_13_35_ladder_2;
        _1978 = frontier_phi_13_35_ladder_1;
        _1980 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1896);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1151, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1151, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1151, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2052 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2055 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2214;
        if (_2049 > 0.0)
        {
            _2214 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2214 = frontier_phi_25_21_ladder;
        }
        float _2482;
        if (_2052 > 0.0)
        {
            _2482 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2482 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_2055 > 0.0)
        {
            _2687 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2687 = frontier_phi_46_43_ladder;
        }
        float _2689 = isnan(_2482) ? _2214 : (isnan(_2214) ? _2482 : min(_2214, _2482));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _2049) + _2038;
        float _2695 = (_2690 * _2052) + _2042;
        float _2696 = (_2690 * _2055) + _2046;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_22_46_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_22_46_ladder_2;
        _2076 = frontier_phi_22_46_ladder_1;
        _2078 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _1985);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2090 = ((((1.0 - _1111) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1111 * _1098)) * _1082;
    float _2091 = _2090 * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2092 = _2090 * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2093 = _2090 * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2096 = fma(_2093, cbSceneParam._m0[89u].z, fma(_2092, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2099 = fma(_2093, cbSceneParam._m0[90u].z, fma(_2092, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2102 = fma(_2093, cbSceneParam._m0[91u].z, fma(_2092, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    vec4 _2110 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1019, _1020));
    float _2112 = _2110.w;
    float _2124 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2112);
    float _2125 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2112);
    float _2126 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2112);
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _1082 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2168 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2172 = _2132 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_931, _932, _933));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_931, _932, _933));
    float _4345 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4356 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2149].x * _2155) * _2193) + (((cbLight._m0[_2159].x * _2124) * _2168) * _2191);
    float _2201 = ((_2155 * cbLight._m0[_2149].y) * _2193) + (((cbLight._m0[_2159].y * _2125) * _2168) * _2191);
    float _2202 = ((_2155 * cbLight._m0[_2149].z) * _2193) + (((cbLight._m0[_2159].z * _2126) * _2168) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2208)
    {
        _2219 = _2200;
        _2221 = _2201;
        _2223 = _2202;
    }
    else
    {
        uint _2227 = _2132 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4367 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2246 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2200;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2201;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2202;
    }
    bool _2226 = _2206.y == 0u;
    float _2264;
    float _2266;
    float _2268;
    if (_2226)
    {
        _2264 = _2219;
        _2266 = _2221;
        _2268 = _2223;
    }
    else
    {
        uint _2426 = _2132 + 7u;
        float _2442 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2443 = _2442 * _2442;
        float _4383 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2444 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2445 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2264 = (((cbLight._m0[_2426].x * 0.3183098733425140380859375) * _2444) * _2445) + _2219;
        _2266 = (((cbLight._m0[_2426].y * 0.3183098733425140380859375) * _2444) * _2445) + _2221;
        _2268 = (((cbLight._m0[_2426].z * 0.3183098733425140380859375) * _2444) * _2445) + _2223;
    }
    uint _2271 = _2132 + 8u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _934) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2132].x + _1011;
    float _2287 = cbLight._m0[_2132].y + _1012;
    float _2288 = cbLight._m0[_2132].z + _1013;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2132].xyz));
    float _4399 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2300 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2301 = dot(vec3(_931, _932, _933), vec3(_2293, _2294, _2295));
    float _4421 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2293, _2294, _2295));
    float _4432 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2285 * _2285;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2324 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2325 = 1.0 - _2285;
    float _2336 = (0.5 / (((_2300 * ((_2299 * _2325) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2325) + _2285) * _2299))) * _2299;
    float _4443 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    uint _2352 = _2132 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _934) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2172].x + _1011;
    float _2366 = cbLight._m0[_2172].y + _1012;
    float _2367 = cbLight._m0[_2172].z + _1013;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2172].xyz));
    float _4454 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2379 = dot(vec3(_931, _932, _933), vec3(_2372, _2373, _2374));
    float _4465 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2372, _2373, _2374));
    float _4476 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2401 = 1.0 - _2364;
    float _2411 = (0.5 / (((_2300 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2401) + _2364) * _2378))) * _2378;
    float _4487 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2423 = (((_2400 * cbLight._m0[_2352].x) * _2413) * _2155) + ((((cbLight._m0[_2271].x * _2124) * _2324) * _2338) * _2168);
    float _2424 = (((_2400 * cbLight._m0[_2352].y) * _2413) * _2155) + ((((cbLight._m0[_2271].y * _2125) * _2324) * _2338) * _2168);
    float _2425 = (((_2400 * cbLight._m0[_2352].z) * _2413) * _2155) + ((((cbLight._m0[_2271].z * _2126) * _2324) * _2338) * _2168);
    float _2487;
    float _2489;
    float _2491;
    if (_2208)
    {
        _2487 = _2423;
        _2489 = _2424;
        _2491 = _2425;
    }
    else
    {
        uint _2493 = _2132 + 2u;
        uint _2497 = _2132 + 10u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _934) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _1011;
        float _2514 = cbLight._m0[_2493].y + _1012;
        float _2515 = cbLight._m0[_2493].z + _1013;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2493].xyz));
        float _4498 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2527 = dot(vec3(_931, _932, _933), vec3(_2520, _2521, _2522));
        float _4509 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4520 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2549 = 1.0 - _2512;
        float _2559 = (0.5 / (((_2300 * ((_2526 * _2549) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2549) + _2512) * _2526))) * _2526;
        float _4531 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2487 = (((_2548 * cbLight._m0[_2497].x) * _2561) * _2562) + _2423;
        _2489 = (((_2548 * cbLight._m0[_2497].y) * _2561) * _2562) + _2424;
        _2491 = (((_2548 * cbLight._m0[_2497].z) * _2561) * _2562) + _2425;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2226)
    {
        _2597 = _2487;
        _2599 = _2489;
        _2601 = _2491;
    }
    else
    {
        uint _2608 = _2132 + 3u;
        uint _2612 = _2132 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _934) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _1011;
        float _2629 = cbLight._m0[_2608].y + _1012;
        float _2630 = cbLight._m0[_2608].z + _1013;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2608].xyz));
        float _4547 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2642 = dot(vec3(_931, _932, _933), vec3(_2635, _2636, _2637));
        float _4558 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4569 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2664 = 1.0 - _2627;
        float _2674 = (0.5 / (((_2300 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2664) + _2627) * _2641))) * _2641;
        float _4580 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2597 = (((_2663 * cbLight._m0[_2612].x) * _2676) * _2677) + _2487;
        _2599 = (((_2663 * cbLight._m0[_2612].y) * _2676) * _2677) + _2489;
        _2601 = (((_2663 * cbLight._m0[_2612].z) * _2676) * _2677) + _2491;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2130.y == 0u)
    {
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2752;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2752;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2752;
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2768)));
        float _2789 = (log2(_2755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3061)
                {
                    frontier_phi_61_pred = _3045;
                    frontier_phi_61_pred_1 = _3050;
                    frontier_phi_61_pred_2 = _3049;
                    frontier_phi_61_pred_3 = _3048;
                    frontier_phi_61_pred_4 = _3047;
                    frontier_phi_61_pred_5 = _3046;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3060;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3051 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _2753;
                        float _3236 = _3195.y - _2754;
                        float _3237 = _3195.z - _2755;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_1038, _1041, _1044), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4606 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _2753;
                        float _3271 = (-0.0) - _2754;
                        float _3272 = (-0.0) - _2755;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3287 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3288 = 1.0 - _1098;
                        float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                        float _3296 = _3295 * _3295;
                        float _3297 = _3296 * _3296;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3308 = dot(vec3(_1038, _1041, _1044), vec3(_3277, _3278, _3279));
                        float _4622 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3312 = dot(vec3(_1038, _1041, _1044), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                        float _4633 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                        float _3320 = _3255 * _3296;
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3245) + _3321;
                        float _4644 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3326 = 1.0 - _3296;
                        float _3336 = (0.5 / (((_3325 * ((_3311 * _3326) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3296) * _3311))) * _3325;
                        float _4655 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3347 = (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3319 * _3319) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3104 = (_3266 * _3214.x) + _3172;
                        _3105 = (_3266 * _3214.y) + _3173;
                        _3106 = (_3266 * _3214.z) + _3174;
                        _3101 = (_3347 * _3231.x) + _3169;
                        _3102 = (_3347 * _3231.y) + _3170;
                        _3103 = (_3347 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_61_pred = _3101;
                    frontier_phi_61_pred_1 = _3106;
                    frontier_phi_61_pred_2 = _3105;
                    frontier_phi_61_pred_3 = _3104;
                    frontier_phi_61_pred_4 = _3103;
                    frontier_phi_61_pred_5 = _3102;
                }
                _2901 = frontier_phi_61_pred;
                _2911 = frontier_phi_61_pred_1;
                _2909 = frontier_phi_61_pred_2;
                _2907 = frontier_phi_61_pred_3;
                _2905 = frontier_phi_61_pred_4;
                _2903 = frontier_phi_61_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2901;
                    _3046 = _2903;
                    _3047 = _2905;
                    _3048 = _2907;
                    _3049 = _2909;
                    _3050 = _2911;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2917) & _2799) == 0u)
        {
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
            float _3039 = _3038 * _2753;
            float _3040 = _3038 * _2754;
            float _3041 = _3038 * _2755;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3152 = _2900;
                float _3153 = _2902;
                float _3154 = _2904;
                float _3155 = _2906;
                float _3156 = _2908;
                float _3157 = _2910;
                uint _3158 = _2917;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3168)
                    {
                        frontier_phi_67_pred = _3155;
                        frontier_phi_67_pred_1 = _3156;
                        frontier_phi_67_pred_2 = _3157;
                        frontier_phi_67_pred_3 = _3154;
                        frontier_phi_67_pred_4 = _3153;
                        frontier_phi_67_pred_5 = _3152;
                    }
                    else
                    {
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        uint _3371 = _3167;
                        uint _3372;
                        vec4 _3397;
                        float _3398;
                        vec4 _3413;
                        vec3 _3425;
                        vec4 _3440;
                        vec4 _3455;
                        float _3501;
                        bool _3502;
                        for (;;)
                        {
                            uint _3382 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3371));
                            _3372 = (_3371 + 4294967295u) & _3371;
                            uint _3384 = _3382 * 40u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3398 = _3397.w;
                            uint _3400 = (_3382 * 40u) + 4u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3382 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3427 = (_3382 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3382 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3382 * 40u) + 24u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3476 = (_3382 * 40u) + 28u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3501 = fma(_2755, _3489.z, fma(_2754, _3489.y, _3489.x * _2753)) + _3489.w;
                            _3502 = !((fma(_2755, _3470.z, fma(_2754, _3470.y, _3470.x * _2753)) + _3470.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3502)
                            {
                                float _3529 = _3397.x - _2753;
                                float _3530 = _3397.y - _2754;
                                float _3531 = _3397.z - _2755;
                                float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                                float _3535 = inversesqrt(_3532);
                                float _3536 = _3535 * _3529;
                                float _3537 = _3535 * _3530;
                                float _3538 = _3535 * _3531;
                                float _3542 = 1.0 - (_3532 / (_3398 * _3398));
                                float _4666 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3547 = sqrt(_3532) * _3413.w;
                                float _3549 = 1.39999997615814208984375 / (_3547 + 1.39999997615814208984375);
                                float _3550 = _3549 * _3549;
                                float _3553 = ((1.0 - _3550) * dot(vec3(_3536, _3537, _3538), vec3(_1038, _1041, _1044))) + _3550;
                                float _3556 = _3547 * _3547;
                                float _3560 = (fma(_2755, _3440.z, fma(_2754, _3440.y, _3440.x * _2753)) + _3440.w) / _3501;
                                float _3561 = (fma(_2755, _3455.z, fma(_2754, _3455.y, _3455.x * _2753)) + _3455.w) / _3501;
                                float _3565 = 1.0 - dot(vec2(_3560, _3561), vec2(_3560, _3561));
                                float _4682 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3567 = _3566 * (((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3543) / ((_3556 * 0.699999988079071044921875) + 1.0));
                                float _3579 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                                float _3580 = 1.0 - _1098;
                                float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                                float _3588 = _3587 * _3587;
                                float _3589 = _3588 * _3588;
                                float _3590 = _3536 - _3039;
                                float _3591 = _3537 - _3040;
                                float _3592 = _3538 - _3041;
                                float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                                float _3600 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4693 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3604 = dot(vec3(_1038, _1041, _1044), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                                float _4704 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                                float _3612 = _3549 * _3588;
                                float _3613 = _3612 * _3612;
                                float _3619 = ((1.0 - _3613) * dot(vec3(_1038, _1041, _1044), vec3(_3536, _3537, _3538))) + _3613;
                                float _4715 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3621 = 1.0 - _3588;
                                float _3631 = (0.5 / (((_3620 * ((_3603 * _3621) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3588) * _3603))) * _3620;
                                float _4726 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3641 = (_3566 * _3543) * (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3611 * _3611) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3641 * _3425.x;
                                frontier_phi_73_pred_1 = _3641 * _3425.y;
                                frontier_phi_73_pred_2 = _3567 * _3413.z;
                                frontier_phi_73_pred_3 = _3567 * _3413.y;
                                frontier_phi_73_pred_4 = _3567 * _3413.x;
                                frontier_phi_73_pred_5 = _3641 * _3425.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_73_pred;
                            _3646 = frontier_phi_73_pred_1;
                            _3650 = frontier_phi_73_pred_2;
                            _3649 = frontier_phi_73_pred_3;
                            _3648 = frontier_phi_73_pred_4;
                            _3647 = frontier_phi_73_pred_5;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            if (_3372 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3372;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3355;
                        frontier_phi_67_pred_1 = _3356;
                        frontier_phi_67_pred_2 = _3357;
                        frontier_phi_67_pred_3 = _3354;
                        frontier_phi_67_pred_4 = _3353;
                        frontier_phi_67_pred_5 = _3352;
                    }
                    _3020 = frontier_phi_67_pred;
                    _3022 = frontier_phi_67_pred_1;
                    _3024 = frontier_phi_67_pred_2;
                    _3018 = frontier_phi_67_pred_3;
                    _3016 = frontier_phi_67_pred_4;
                    _3014 = frontier_phi_67_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _3014;
                        _3153 = _3016;
                        _3154 = _3018;
                        _3155 = _3020;
                        _3156 = _3022;
                        _3157 = _3024;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3022;
                frontier_phi_55_56_ladder_1 = _3024;
                frontier_phi_55_56_ladder_2 = _3020;
                frontier_phi_55_56_ladder_3 = _3018;
                frontier_phi_55_56_ladder_4 = _3016;
                frontier_phi_55_56_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            _3013 = frontier_phi_55_56_ladder_5;
            _3015 = frontier_phi_55_56_ladder_4;
            _3017 = frontier_phi_55_56_ladder_3;
            _3019 = frontier_phi_55_56_ladder_2;
            _3021 = frontier_phi_55_56_ladder;
            _3023 = frontier_phi_55_56_ladder_1;
        }
        float _3028 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _2812 = (_3028 * _3019) + _2264;
        _2814 = (_3028 * _3021) + _2266;
        _2816 = (_3028 * _3023) + _2268;
        _2818 = ((_3013 * 0.039999999105930328369140625) * _3028) + _2597;
        _2820 = ((_3015 * 0.039999999105930328369140625) * _3028) + _2599;
        _2822 = ((_3017 * 0.039999999105930328369140625) * _3028) + _2601;
    }
    else
    {
        _2812 = _2264;
        _2814 = _2266;
        _2816 = _2268;
        _2818 = _2597;
        _2820 = _2599;
        _2822 = _2601;
    }
    float _4742 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4753 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4764 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    uint _2842 = _276 + 6u;
    float _2850 = _1019 / cbSceneParam._m0[86u].x;
    float _2851 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _952 : (isnan(_952) ? cbSceneParam._m0[77u].w : min(_952, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_952 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_952) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _952 : min(cbSceneParam._m0[80u].w, _952));
        float _2926 = _2925 / _952;
        float _2937 = _2926 * _1004;
        float _2938 = _1005 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2941 = _2926 * _1006;
        float _2943 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2938;
        float _2951 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2939 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3076 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3114 = ((abs(_2951 / _2939) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2961 * _3085) - exp2(_2961 * _3086)) * _3074))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2870);
        _2963 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2965 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2967 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2969 = _3125 * _2870;
    }
    else
    {
        _2963 = _2867;
        _2965 = _2868;
        _2967 = _2869;
        _2969 = _2870;
    }
    float _2981 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2982 = _2981 == 3.0;
    float _2983 = log2(_2969);
    float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2812 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1082))) + ((_2818 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2814 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1082))) + ((_2820 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2816 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1082))) + ((_2822 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1885)) * cbPerFrame._m0[3u].x));
    float _3001 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3001 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.y = _3001 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.z = _3001 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


