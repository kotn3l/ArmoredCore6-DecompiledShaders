#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1396;
float _4036;
float _4037;
float _4038;
float _4039;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4048 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4059 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4070 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4081 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _452 = (_445 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _453 = (_445 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _454 = (_445 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4092 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    float _531 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _525;
    float _534 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _526;
    float _537 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _527;
    float _544 = ((_525 - _531) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) + _531;
    float _545 = ((_526 - _534) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) + _534;
    float _546 = ((_527 - _537) * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) + _537;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _445) + _628;
    float _638 = ((_609.y - _629) * _445) + _629;
    float _639 = ((_609.z - _630) * _445) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_651.z - _639) * _518) + _639;
    float _667 = ((((_651.x - _637) * _518) + _637) * 2.0) + (-1.0);
    float _668 = ((((_651.y - _638) * _518) + _638) * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _4103 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _704 = (_667 + ((((_584.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_692.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _705 = (_668 + ((((_584.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_692.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _708 = fma(_674, _243, fma(_705, _250, _704 * _236));
    float _711 = fma(_674, _244, fma(_705, _251, _704 * _237));
    float _714 = fma(_674, _245, fma(_705, _252, _704 * _238));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _747 = _745.x;
    float _748 = 1.0 - _747;
    float _754 = (cbMtdParam._m0[19u].x + dot(vec4(_718 * _708, _718 * _711, _718 * _714, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_747 - _748) * cbMtdParam._m0[24u].w) + _748) * cbMtdParam._m0[21u].z);
    float _4114 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _762 = (_755 * ((_565.x * cbMtdParam._m0[18u].x) - _544)) + _544;
    float _763 = (_755 * ((_565.y * cbMtdParam._m0[18u].y) - _545)) + _545;
    float _764 = (_755 * ((_565.z * cbMtdParam._m0[18u].z) - _546)) + _546;
    float _769 = (((_584.z - _664) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _664;
    float _773 = ((_692.z - _769) * cbMtdParam._m0[19u].w) + _769;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _793 = (_786.x * 2.0) + (-1.0);
    float _794 = (_786.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4125 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _803 = ((_786.z - _773) * _755) + _773;
    float _813 = ((sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _674) * _755) + _674;
    float _816 = (((_793 - _704) * _755) + _704) + (cbMtdParam._m0[21u].x * _704);
    float _817 = (((_794 - _705) * _755) + _705) + (cbMtdParam._m0[21u].x * _705);
    float _819 = cbMtdParam._m0[22u].x + _692.w;
    float _822 = fma(_813, _243, fma(_817, _250, _816 * _236));
    float _825 = fma(_813, _244, fma(_817, _251, _816 * _237));
    float _828 = fma(_813, _245, fma(_817, _252, _816 * _238));
    float _832 = inversesqrt(dot(vec3(_822, _825, _828), vec3(_822, _825, _828)));
    float _833 = _832 * _822;
    float _834 = _832 * _825;
    float _835 = _832 * _828;
    float _4136 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _836 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4158 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4169 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4180 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _854 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    vec4 _920 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _922 = _920.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1076 = sqrt(((_906 * _906) + (_907 * _907)) + (_908 * _908));
        float _1082 = (cbMatDynParam._m0[5u].x * _1076) + cbMatDynParam._m0[5u].y;
        float _4191 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1087 = (cbMatDynParam._m0[5u].z * _1076) + cbMatDynParam._m0[5u].w;
        float _4202 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) - _1083)) + _1083) < ((_922 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_835, cbSceneParam._m0[5u].z, fma(_834, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _833));
    float _955 = fma(_835, cbSceneParam._m0[6u].z, fma(_834, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _833));
    float _958 = fma(_835, cbSceneParam._m0[7u].z, fma(_834, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _833));
    uint _971 = _276 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_972].z;
    float _4213 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _996 = ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_833, _834, _835), vec3(_913, _914, _915));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _833) - _913;
    float _1005 = (_1000 * _834) - _914;
    float _1006 = (_1000 * _835) - _915;
    float _1010 = abs(dot(vec3(_913, _914, _915), vec3(_833, _834, _835)));
    float _4246 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_836);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1124 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1128 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1153 = _1057 + _833;
        float _1154 = _1061 + _834;
        float _1155 = _1065 + _835;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1120;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1124;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1128;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_833, _834, _835), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4294 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_833, _834, _835), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4327 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_833, _834, _835), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4360 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1441 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1445 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1468 = _1057 + _833;
        float _1469 = _1061 + _834;
        float _1470 = _1065 + _835;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_833, _834, _835), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4423 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_833, _834, _835), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4456 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_833, _834, _835), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4489 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1396;
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = _1396;
        _1717 = _1396;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1408)) + _1408;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1409)) + _1409;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1410)) + _1410;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1004 * 0.5;
    float _1775 = _1005 * 0.5;
    float _1776 = _1006 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1890 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1894 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1898 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1901 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1904 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1907 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1935;
        if (_1901 > 0.0)
        {
            _1935 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1935 = frontier_phi_17_15_ladder;
        }
        float _2104;
        if (_1904 > 0.0)
        {
            _2104 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2104 = frontier_phi_26_22_ladder;
        }
        float _2399;
        if (_1907 > 0.0)
        {
            _2399 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2399 = frontier_phi_38_33_ladder;
        }
        float _2401 = isnan(_2104) ? _1935 : (isnan(_1935) ? _2104 : min(_1935, _2104));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1901) + _1890;
        float _2407 = (_2402 * _1904) + _1894;
        float _2408 = (_2402 * _1907) + _1898;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_16_38_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1923 = frontier_phi_16_38_ladder_2;
        _1925 = frontier_phi_16_38_ladder_1;
        _1927 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1843);
        _1923 = _1911.x * cbModelParam._m0[1u].y;
        _1925 = _1911.y * cbModelParam._m0[1u].y;
        _1927 = _1911.z * cbModelParam._m0[1u].y;
    }
    float _1931 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1931 : min(cbModelParam._m0[25u].w, _1931));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _1999 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _2002 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2109;
        if (_1996 > 0.0)
        {
            _2109 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2109 = frontier_phi_28_24_ladder;
        }
        float _2426;
        if (_1999 > 0.0)
        {
            _2426 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2426 = frontier_phi_40_35_ladder;
        }
        float _2753;
        if (_2002 > 0.0)
        {
            _2753 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2753 = frontier_phi_50_47_ladder;
        }
        float _2755 = isnan(_2426) ? _2109 : (isnan(_2109) ? _2426 : min(_2109, _2426));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _1996) + _1985;
        float _2761 = (_2756 * _1999) + _1989;
        float _2762 = (_2756 * _2002) + _1993;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _1932);
            frontier_phi_25_50_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_25_50_ladder_2;
        _2023 = frontier_phi_25_50_ladder_1;
        _2025 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1932);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2037 = ((((1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1025 * _1012)) * _996;
    float _2038 = _2037 * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2039 = _2037 * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2040 = _2037 * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2043 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2096 = _2083 / _2095;
    float _2097 = _2087 / _2095;
    float _2098 = _2091 / _2095;
    float _2245;
    float _2246;
    float _2247;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2125 = ((uint(_2098 > cbSceneParam._m0[59u].y) + uint(_2098 > cbSceneParam._m0[59u].x)) + uint(_2098 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2126 = _2125 + 43u;
        uint _2134 = _2125 + 44u;
        uint _2142 = _2125 + 45u;
        uint _2150 = _2125 + 46u;
        float _2161 = fma(_2095, cbSceneParam._m0[_2126].w, fma(_2091, cbSceneParam._m0[_2126].z, fma(_2087, cbSceneParam._m0[_2126].y, _2083 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2095, cbSceneParam._m0[_2134].w, fma(_2091, cbSceneParam._m0[_2134].z, fma(_2087, cbSceneParam._m0[_2134].y, _2083 * cbSceneParam._m0[_2134].x)));
        float _2173 = fma(_2095, cbSceneParam._m0[_2150].w, fma(_2091, cbSceneParam._m0[_2150].z, fma(_2087, cbSceneParam._m0[_2150].y, _2083 * cbSceneParam._m0[_2150].x)));
        float _2178 = cbSceneParam._m0[33u].z * _2173;
        float _2180 = cbSceneParam._m0[33u].w * _2173;
        float _2183 = fma(_2095, cbSceneParam._m0[_2142].w, fma(_2091, cbSceneParam._m0[_2142].z, fma(_2087, cbSceneParam._m0[_2142].y, _2083 * cbSceneParam._m0[_2142].x))) / _2173;
        float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_2097 * _2097) + (_2096 * _2096)) + (_2098 * _2098))) * cbSceneParam._m0[33u].y;
        float _4615 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2238 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2161) / _2173, (_2180 + _2165) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 + _2161) / _2173, (_2165 - _2178) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 - _2178) / _2173, (_2165 - _2180) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 - _2180) / _2173, (_2178 + _2165) / _2173), _2183), 0.0)).x), vec4(0.25)));
        _2245 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
        _2246 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
        _2247 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2245 = 1.0;
        _2246 = 1.0;
        _2247 = 1.0;
    }
    float _2311;
    float _2313;
    float _2315;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2299 = fma(_2095, cbSceneParam._m0[63u].w, fma(_2091, cbSceneParam._m0[63u].z, fma(_2087, cbSceneParam._m0[63u].y, _2083 * cbSceneParam._m0[63u].x)));
        float _2300 = fma(_2095, cbSceneParam._m0[60u].w, fma(_2091, cbSceneParam._m0[60u].z, fma(_2087, cbSceneParam._m0[60u].y, _2083 * cbSceneParam._m0[60u].x))) / _2299;
        float _2301 = fma(_2095, cbSceneParam._m0[61u].w, fma(_2091, cbSceneParam._m0[61u].z, fma(_2087, cbSceneParam._m0[61u].y, _2083 * cbSceneParam._m0[61u].x))) / _2299;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2300 >= cbSceneParam._m0[64u].x) && (_2301 >= cbSceneParam._m0[64u].y)) && (_2300 <= cbSceneParam._m0[64u].z)) && (_2301 <= cbSceneParam._m0[64u].w))
        {
            float _2439 = fma(_2095, cbSceneParam._m0[62u].w, fma(_2091, cbSceneParam._m0[62u].z, fma(_2087, cbSceneParam._m0[62u].y, _2083 * cbSceneParam._m0[62u].x))) / _2299;
            float _2443 = isnan(cbSceneParam._m0[41u].w) ? _2439 : (isnan(_2439) ? cbSceneParam._m0[41u].w : max(_2439, cbSceneParam._m0[41u].w));
            float _2486 = (cbSceneParam._m0[33u].x - sqrt(((_2097 * _2097) + (_2096 * _2096)) + (_2098 * _2098))) * cbSceneParam._m0[33u].y;
            float _4631 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
            float _2493 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2300, cbSceneParam._m0[33u].w + _2301), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2300, _2301 - cbSceneParam._m0[33u].z), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].z, _2301 - cbSceneParam._m0[33u].w), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2301), _2443), 0.0)).x), vec4(0.25)));
            float _2497 = 1.0 - (_2493 * cbSceneParam._m0[34u].x);
            float _2498 = 1.0 - (_2493 * cbSceneParam._m0[34u].y);
            float _2499 = 1.0 - (_2493 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_37_36_ladder_1 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
            frontier_phi_37_36_ladder_2 = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
        }
        else
        {
            frontier_phi_37_36_ladder = _2247;
            frontier_phi_37_36_ladder_1 = _2246;
            frontier_phi_37_36_ladder_2 = _2245;
        }
        _2311 = frontier_phi_37_36_ladder_2;
        _2313 = frontier_phi_37_36_ladder_1;
        _2315 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2311 = _2245;
        _2313 = _2246;
        _2315 = _2247;
    }
    uvec4 _2320 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2322 = _2320.x * 14u;
    uint _2323 = _2322 + 13u;
    float _2330 = _996 + (-1.0);
    float _2335 = (cbLight._m0[_2323].x * _2330) + 1.0;
    float _2336 = (cbLight._m0[_2323].y * _2330) + 1.0;
    float _2337 = (cbLight._m0[_2323].z * _2330) + 1.0;
    float _2338 = (cbLight._m0[_2323].w * _2330) + 1.0;
    uint _2339 = _2322 + 5u;
    float _2345 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2349 = _2322 + 4u;
    float _2358 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    uint _2362 = _2322 | 1u;
    float _2373 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_833, _834, _835));
    float _2376 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_833, _834, _835));
    float _4667 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _4678 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2381 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2383 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2390 = ((cbLight._m0[_2339].x * _2345) * _2383) + (((cbLight._m0[_2349].x * _2311) * _2358) * _2381);
    float _2391 = ((_2345 * cbLight._m0[_2339].y) * _2383) + (((cbLight._m0[_2349].y * _2313) * _2358) * _2381);
    float _2392 = ((_2345 * cbLight._m0[_2339].z) * _2383) + (((cbLight._m0[_2349].z * _2315) * _2358) * _2381);
    uvec4 _2396 = floatBitsToUint(cbLight._m0[_2322 + 12u]);
    bool _2398 = _2396.x == 0u;
    float _2500;
    float _2502;
    float _2504;
    if (_2398)
    {
        _2500 = _2390;
        _2502 = _2391;
        _2504 = _2392;
    }
    else
    {
        uint _2508 = _2322 + 6u;
        float _2524 = (dot(vec3(cbLight._m0[_2322 + 2u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4689 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2527 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2500 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2390;
        _2502 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2391;
        _2504 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2392;
    }
    bool _2507 = _2396.y == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2507)
    {
        _2562 = _2500;
        _2564 = _2502;
        _2566 = _2504;
    }
    else
    {
        uint _2724 = _2322 + 7u;
        float _2740 = (dot(vec3(cbLight._m0[_2322 + 3u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2741 = _2740 * _2740;
        float _4705 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2742 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2743 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2562 = (((cbLight._m0[_2724].x * 0.3183098733425140380859375) * _2742) * _2743) + _2500;
        _2564 = (((cbLight._m0[_2724].y * 0.3183098733425140380859375) * _2742) * _2743) + _2502;
        _2566 = (((cbLight._m0[_2724].z * 0.3183098733425140380859375) * _2742) * _2743) + _2504;
    }
    uint _2569 = _2322 + 8u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _836) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2322].x + _913;
    float _2585 = cbLight._m0[_2322].y + _914;
    float _2586 = cbLight._m0[_2322].z + _915;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2322].xyz));
    float _4721 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2598 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2599 = dot(vec3(_833, _834, _835), vec3(_2591, _2592, _2593));
    float _4743 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2591, _2592, _2593));
    float _4754 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2583 * _2583;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2623 = 1.0 - _2583;
    float _2634 = (0.5 / (((_2598 * ((_2597 * _2623) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2623) + _2583) * _2597))) * _2597;
    float _4765 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2636 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    uint _2650 = _2322 + 9u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _836) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2362].x + _913;
    float _2664 = cbLight._m0[_2362].y + _914;
    float _2665 = cbLight._m0[_2362].z + _915;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2362].xyz));
    float _4776 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2677 = dot(vec3(_833, _834, _835), vec3(_2670, _2671, _2672));
    float _4787 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2670, _2671, _2672));
    float _4798 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2662 * _2662;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2698 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2699 = 1.0 - _2662;
    float _2709 = (0.5 / (((_2598 * ((_2676 * _2699) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2699) + _2662) * _2676))) * _2676;
    float _4809 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2711 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    float _2721 = (((_2698 * cbLight._m0[_2650].x) * _2711) * _2345) + ((((cbLight._m0[_2569].x * _2311) * _2622) * _2636) * _2358);
    float _2722 = (((_2698 * cbLight._m0[_2650].y) * _2711) * _2345) + ((((cbLight._m0[_2569].y * _2313) * _2622) * _2636) * _2358);
    float _2723 = (((_2698 * cbLight._m0[_2650].z) * _2711) * _2345) + ((((cbLight._m0[_2569].z * _2315) * _2622) * _2636) * _2358);
    float _2779;
    float _2781;
    float _2783;
    if (_2398)
    {
        _2779 = _2721;
        _2781 = _2722;
        _2783 = _2723;
    }
    else
    {
        uint _2785 = _2322 + 2u;
        uint _2789 = _2322 + 10u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _836) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _913;
        float _2806 = cbLight._m0[_2785].y + _914;
        float _2807 = cbLight._m0[_2785].z + _915;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2785].xyz));
        float _4820 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2819 = dot(vec3(_833, _834, _835), vec3(_2812, _2813, _2814));
        float _4831 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4842 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2840 = (exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2841 = 1.0 - _2804;
        float _2851 = (0.5 / (((_2598 * ((_2818 * _2841) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2841) + _2804) * _2818))) * _2818;
        float _4853 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2779 = (((_2840 * cbLight._m0[_2789].x) * _2853) * _2854) + _2721;
        _2781 = (((_2840 * cbLight._m0[_2789].y) * _2853) * _2854) + _2722;
        _2783 = (((_2840 * cbLight._m0[_2789].z) * _2853) * _2854) + _2723;
    }
    float _2885;
    float _2887;
    float _2889;
    if (_2507)
    {
        _2885 = _2779;
        _2887 = _2781;
        _2889 = _2783;
    }
    else
    {
        uint _2896 = _2322 + 3u;
        uint _2900 = _2322 + 11u;
        float _2914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2896].w)) * _836) * 0.949999988079071044921875);
        float _2915 = _2914 * _2914;
        float _2916 = cbLight._m0[_2896].x + _913;
        float _2917 = cbLight._m0[_2896].y + _914;
        float _2918 = cbLight._m0[_2896].z + _915;
        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
        float _2923 = _2922 * _2916;
        float _2924 = _2922 * _2917;
        float _2925 = _2922 * _2918;
        float _2926 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2896].xyz));
        float _4869 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2930 = dot(vec3(_833, _834, _835), vec3(_2923, _2924, _2925));
        float _4880 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2934 = dot(vec3(cbLight._m0[_2896].xyz), vec3(_2923, _2924, _2925));
        float _4891 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2938 = _2915 * _2915;
        float _2942 = ((_2933 * _2933) * (_2938 + (-1.0))) + 1.0;
        float _2951 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2952 = 1.0 - _2915;
        float _2962 = (0.5 / (((_2598 * ((_2929 * _2952) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2952) + _2915) * _2929))) * _2929;
        float _4902 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2964 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2938 / ((_2942 * _2942) * 3.141590118408203125));
        float _2965 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2885 = (((_2951 * cbLight._m0[_2900].x) * _2964) * _2965) + _2779;
        _2887 = (((_2951 * cbLight._m0[_2900].y) * _2964) * _2965) + _2781;
        _2889 = (((_2951 * cbLight._m0[_2900].z) * _2964) * _2965) + _2783;
    }
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_2320.y == 0u)
    {
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.x;
        uint _2998 = uint((float(_2986.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2987))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2987)));
        float _3008 = (log2(_2098 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3009 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        uint _3012 = uint(isnan(14.0) ? _3009 : (isnan(_3009) ? 14.0 : min(_3009, 14.0)));
        uvec4 _3017 = texelFetch(g_lightClusterGridBuffer, int(((_3012 << 2u) + (_2998 << 6u)) >> 2u));
        uint _3018 = _3017.x;
        uint _3019 = _2986.z;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((((1u << ((_3019 >> 4u) & 15u)) + 4294967295u) & _3018) == 0u) || ((_3019 & 240u) == 0u))
        {
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
        }
        else
        {
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            uint _3257 = 0u;
            uint _3266;
            bool _3267;
            for (;;)
            {
                _3266 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                _3267 = _3266 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3267)
                {
                    frontier_phi_71_pred = _3256;
                    frontier_phi_71_pred_1 = _3255;
                    frontier_phi_71_pred_2 = _3254;
                    frontier_phi_71_pred_3 = _3253;
                    frontier_phi_71_pred_4 = _3252;
                    frontier_phi_71_pred_5 = _3251;
                }
                else
                {
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    uint _3402;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3266;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    for (;;)
                    {
                        uint _3406 = uint(findLSB(_3402)) + (_3257 << 5u);
                        uint _3403 = (_3402 + 4294967295u) & _3402;
                        uint _3408 = _3406 * 48u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3428 = (_3406 * 48u) + 4u;
                        vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3447 = (_3406 * 48u) + 8u;
                        vec3 _3458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x));
                        float _3462 = _3422.x - _2096;
                        float _3463 = _3422.y - _2097;
                        float _3464 = _3422.z - _2098;
                        float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                        float _3468 = inversesqrt(_3465);
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3472 = dot(vec3(_952, _955, _958), vec3(_3469, _3470, _3471));
                        float _3477 = 1.0 - (_3465 * _3422.w);
                        float _4928 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3479 = sqrt(_3465) * _3441.w;
                        float _3482 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                        float _3483 = _3482 * _3482;
                        float _3486 = ((1.0 - _3483) * _3472) + _3483;
                        float _3489 = _3479 * _3479;
                        float _3493 = ((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3478) / ((_3489 * 0.699999988079071044921875) + 1.0);
                        float _3497 = (-0.0) - _2096;
                        float _3498 = (-0.0) - _2097;
                        float _3499 = (-0.0) - _2098;
                        float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3513 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                        float _3514 = 1.0 - _1012;
                        float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                        float _3522 = _3521 * _3521;
                        float _3523 = _3522 * _3522;
                        float _3524 = _3504 + _3469;
                        float _3525 = _3505 + _3470;
                        float _3526 = _3506 + _3471;
                        float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                        float _3534 = dot(vec3(_952, _955, _958), vec3(_3504, _3505, _3506));
                        float _4944 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3537 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3538 = dot(vec3(_952, _955, _958), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                        float _4955 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                        float _3546 = _3482 * _3522;
                        float _3547 = _3546 * _3546;
                        float _3550 = ((1.0 - _3547) * _3472) + _3547;
                        float _4966 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3551 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3552 = 1.0 - _3522;
                        float _3562 = (0.5 / (((_3551 * ((_3537 * _3552) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3551 * _3552) + _3522) * _3537))) * _3551;
                        float _4977 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3573 = (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3545 * _3545) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125))) * _3478;
                        _3326 = (_3493 * _3441.x) + _3399;
                        _3327 = (_3493 * _3441.y) + _3400;
                        _3328 = (_3493 * _3441.z) + _3401;
                        _3323 = (_3573 * _3458.x) + _3396;
                        _3324 = (_3573 * _3458.y) + _3397;
                        _3325 = (_3573 * _3458.z) + _3398;
                        if (_3403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3403;
                        }
                    }
                    frontier_phi_71_pred = _3328;
                    frontier_phi_71_pred_1 = _3327;
                    frontier_phi_71_pred_2 = _3326;
                    frontier_phi_71_pred_3 = _3325;
                    frontier_phi_71_pred_4 = _3324;
                    frontier_phi_71_pred_5 = _3323;
                }
                _3109 = frontier_phi_71_pred;
                _3107 = frontier_phi_71_pred_1;
                _3105 = frontier_phi_71_pred_2;
                _3103 = frontier_phi_71_pred_3;
                _3101 = frontier_phi_71_pred_4;
                _3099 = frontier_phi_71_pred_5;
                uint _3258 = _3257 + 1u;
                if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3251 = _3099;
                    _3252 = _3101;
                    _3253 = _3103;
                    _3254 = _3105;
                    _3255 = _3107;
                    _3256 = _3109;
                    _3257 = _3258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
        }
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.z;
        uint _3115 = (_3113 >> 8u) & 15u;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((4294967295u << _3115) & _3018) == 0u)
        {
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
        }
        else
        {
            float _3244 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
            float _3245 = _3244 * _2096;
            float _3246 = _3244 * _2097;
            float _3247 = _3244 * _2098;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3115 < ((_3113 >> 12u) & 15u))
            {
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3379 = _3098;
                float _3380 = _3100;
                float _3381 = _3102;
                float _3382 = _3104;
                float _3383 = _3106;
                float _3384 = _3108;
                uint _3385 = _3115;
                uint _3394;
                bool _3395;
                for (;;)
                {
                    _3394 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3385 << 2u)) >> 2u)).x;
                    _3395 = _3394 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3395)
                    {
                        frontier_phi_82_pred = _3384;
                        frontier_phi_82_pred_1 = _3383;
                        frontier_phi_82_pred_2 = _3382;
                        frontier_phi_82_pred_3 = _3381;
                        frontier_phi_82_pred_4 = _3380;
                        frontier_phi_82_pred_5 = _3379;
                    }
                    else
                    {
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3600 = _3379;
                        float _3601 = _3380;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        uint _3606 = _3394;
                        uint _3607;
                        vec4 _3632;
                        float _3633;
                        vec4 _3648;
                        vec3 _3660;
                        vec4 _3675;
                        vec4 _3690;
                        float _3736;
                        bool _3737;
                        for (;;)
                        {
                            uint _3617 = ((_3385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3606));
                            _3607 = (_3606 + 4294967295u) & _3606;
                            uint _3619 = _3617 * 40u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3633 = _3632.w;
                            uint _3635 = (_3617 * 40u) + 4u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3617 * 40u) + 8u;
                            _3660 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x));
                            uint _3662 = (_3617 * 40u) + 16u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3617 * 40u) + 20u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3692 = (_3617 * 40u) + 24u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3711 = (_3617 * 40u) + 28u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            _3736 = fma(_2098, _3724.z, fma(_2097, _3724.y, _3724.x * _2096)) + _3724.w;
                            _3737 = !((fma(_2098, _3705.z, fma(_2097, _3705.y, _3705.x * _2096)) + _3705.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3737)
                            {
                                float _3764 = _3632.x - _2096;
                                float _3765 = _3632.y - _2097;
                                float _3766 = _3632.z - _2098;
                                float _3767 = dot(vec3(_3764, _3765, _3766), vec3(_3764, _3765, _3766));
                                float _3770 = inversesqrt(_3767);
                                float _3771 = _3770 * _3764;
                                float _3772 = _3770 * _3765;
                                float _3773 = _3770 * _3766;
                                float _3777 = 1.0 - (_3767 / (_3633 * _3633));
                                float _4988 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3782 = sqrt(_3767) * _3648.w;
                                float _3784 = 1.39999997615814208984375 / (_3782 + 1.39999997615814208984375);
                                float _3785 = _3784 * _3784;
                                float _3788 = ((1.0 - _3785) * dot(vec3(_3771, _3772, _3773), vec3(_952, _955, _958))) + _3785;
                                float _3791 = _3782 * _3782;
                                float _3795 = (fma(_2098, _3675.z, fma(_2097, _3675.y, _3675.x * _2096)) + _3675.w) / _3736;
                                float _3796 = (fma(_2098, _3690.z, fma(_2097, _3690.y, _3690.x * _2096)) + _3690.w) / _3736;
                                float _3800 = 1.0 - dot(vec2(_3795, _3796), vec2(_3795, _3796));
                                float _5004 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3802 = _3801 * (((isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0))) * _3778) / ((_3791 * 0.699999988079071044921875) + 1.0));
                                float _3814 = exp2(log2(1.0 / ((_3791 * 3.5) + 5.0)) * 0.25);
                                float _3815 = 1.0 - _1012;
                                float _3822 = sqrt(1.0 - ((1.0 - (_3815 * _3815)) * (1.0 - (_3814 * _3814))));
                                float _3823 = _3822 * _3822;
                                float _3824 = _3823 * _3823;
                                float _3825 = _3771 - _3245;
                                float _3826 = _3772 - _3246;
                                float _3827 = _3773 - _3247;
                                float _3831 = inversesqrt(dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827)));
                                float _3835 = dot(vec3(_952, _955, _958), vec3((-0.0) - _3245, (-0.0) - _3246, (-0.0) - _3247));
                                float _5015 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3838 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3839 = dot(vec3(_952, _955, _958), vec3(_3831 * _3825, _3831 * _3826, _3831 * _3827));
                                float _5026 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3846 = ((_3842 * _3842) * (_3824 + (-1.0))) + 1.0;
                                float _3847 = _3784 * _3823;
                                float _3848 = _3847 * _3847;
                                float _3854 = ((1.0 - _3848) * dot(vec3(_952, _955, _958), vec3(_3771, _3772, _3773))) + _3848;
                                float _5037 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3855 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3856 = 1.0 - _3823;
                                float _3866 = (0.5 / (((_3855 * ((_3838 * _3856) + _3823)) + 9.9999999392252902907785028219223e-09) + (((_3855 * _3856) + _3823) * _3838))) * _3855;
                                float _5048 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3876 = (_3801 * _3778) * (((_3824 * 3.1415927410125732421875) * (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) / ((_3846 * _3846) * ((_3791 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3802 * _3648.z;
                                frontier_phi_88_pred_1 = _3802 * _3648.y;
                                frontier_phi_88_pred_2 = _3802 * _3648.x;
                                frontier_phi_88_pred_3 = _3876 * _3660.z;
                                frontier_phi_88_pred_4 = _3876 * _3660.y;
                                frontier_phi_88_pred_5 = _3876 * _3660.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3885 = frontier_phi_88_pred;
                            _3884 = frontier_phi_88_pred_1;
                            _3883 = frontier_phi_88_pred_2;
                            _3882 = frontier_phi_88_pred_3;
                            _3881 = frontier_phi_88_pred_4;
                            _3880 = frontier_phi_88_pred_5;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            if (_3607 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3607;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3592;
                        frontier_phi_82_pred_1 = _3591;
                        frontier_phi_82_pred_2 = _3590;
                        frontier_phi_82_pred_3 = _3589;
                        frontier_phi_82_pred_4 = _3588;
                        frontier_phi_82_pred_5 = _3587;
                    }
                    _3230 = frontier_phi_82_pred;
                    _3228 = frontier_phi_82_pred_1;
                    _3226 = frontier_phi_82_pred_2;
                    _3224 = frontier_phi_82_pred_3;
                    _3222 = frontier_phi_82_pred_4;
                    _3220 = frontier_phi_82_pred_5;
                    uint _3386 = _3385 + 1u;
                    if (_3386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3379 = _3220;
                        _3380 = _3222;
                        _3381 = _3224;
                        _3382 = _3226;
                        _3383 = _3228;
                        _3384 = _3230;
                        _3385 = _3386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3226;
                frontier_phi_63_64_ladder_1 = _3230;
                frontier_phi_63_64_ladder_2 = _3228;
                frontier_phi_63_64_ladder_3 = _3224;
                frontier_phi_63_64_ladder_4 = _3222;
                frontier_phi_63_64_ladder_5 = _3220;
            }
            else
            {
                frontier_phi_63_64_ladder = _3104;
                frontier_phi_63_64_ladder_1 = _3108;
                frontier_phi_63_64_ladder_2 = _3106;
                frontier_phi_63_64_ladder_3 = _3102;
                frontier_phi_63_64_ladder_4 = _3100;
                frontier_phi_63_64_ladder_5 = _3098;
            }
            _3219 = frontier_phi_63_64_ladder_5;
            _3221 = frontier_phi_63_64_ladder_4;
            _3223 = frontier_phi_63_64_ladder_3;
            _3225 = frontier_phi_63_64_ladder;
            _3227 = frontier_phi_63_64_ladder_2;
            _3229 = frontier_phi_63_64_ladder_1;
        }
        float _3234 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _3031 = (_3234 * _3225) + _2562;
        _3033 = (_3234 * _3227) + _2564;
        _3035 = (_3234 * _3229) + _2566;
        _3037 = ((_3219 * 0.039999999105930328369140625) * _3234) + _2885;
        _3039 = ((_3221 * 0.039999999105930328369140625) * _3234) + _2887;
        _3041 = ((_3223 * 0.039999999105930328369140625) * _3234) + _2889;
    }
    else
    {
        _3031 = _2562;
        _3033 = _2564;
        _3035 = _2566;
        _3037 = _2885;
        _3039 = _2887;
        _3041 = _2889;
    }
    float _5064 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _5075 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _5086 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _3058 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3031 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _996))) + ((_3037 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _3059 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3033 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _996))) + ((_3039 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _3060 = ((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3035 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _996))) + ((_3041 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    uint _3061 = _276 + 6u;
    float _3069 = _933 / cbSceneParam._m0[86u].x;
    float _3070 = _934 / cbSceneParam._m0[86u].y;
    vec4 _3084 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3069, _3070, (log2((isnan(cbSceneParam._m0[77u].w) ? _854 : (isnan(_854) ? cbSceneParam._m0[77u].w : min(_854, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3086 = _3084.x;
    float _3087 = _3084.y;
    float _3088 = _3084.z;
    float _3089 = _3084.w;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_854 > cbSceneParam._m0[78u].w)
    {
        float _3123 = isnan(_854) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _854 : min(cbSceneParam._m0[80u].w, _854));
        float _3124 = _3123 / _854;
        float _3135 = _3124 * _906;
        float _3136 = _907 * _3124;
        float _3137 = (-0.0) - _3136;
        float _3139 = _3124 * _908;
        float _3141 = (cbSceneParam._m0[77u].w * _3137) / _3123;
        float _3142 = _3141 + cbSceneParam._m0[79u].w;
        float _3143 = cbSceneParam._m0[79u].w - _3136;
        float _3149 = sqrt(((_3135 * _3135) + (_3136 * _3136)) + (_3139 * _3139));
        float _3152 = (1.0 - (cbSceneParam._m0[77u].w / _3123)) * _3149;
        float _3157 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3159 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3336;
        if (abs((_3137 - _3141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3336 = ((((_3142 > 0.0) ? exp2(_3157 * _3142) : (2.0 - exp2(_3159 * _3142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3152;
        }
        else
        {
            float _3280 = 1.0 / cbSceneParam._m0[80u].x;
            float _3281 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : max(_3142, _3143));
            float _3282 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : min(_3142, _3143));
            float _3291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : min(_3281, 0.0));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            _3336 = ((abs(_3149 / _3137) * cbSceneParam._m0[80u].y) * ((((_3291 - _3292) * 2.0) - ((exp2(_3157 * (isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0)))) - exp2(_3157 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))))) * _3280)) - ((exp2(_3159 * _3291) - exp2(_3159 * _3292)) * _3280))) + (_3152 * cbSceneParam._m0[80u].z);
        }
        vec4 _3338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3069, _3070, 1.0), 0.0);
        float _3347 = exp2((_3336 * (-1.44269502162933349609375)) * (1.0 - _3338.w));
        float _3348 = log2(_3347);
        float _3364 = log2(_3089);
        _3161 = (exp2(_3364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].x)) * _3338.x) / cbSceneParam._m0[78u].x)) + _3086;
        _3163 = (exp2(_3364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].y)) * _3338.y) / cbSceneParam._m0[78u].y)) + _3087;
        _3165 = (exp2(_3364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].z)) * _3338.z) / cbSceneParam._m0[78u].z)) + _3088;
        _3167 = _3347 * _3089;
    }
    else
    {
        _3161 = _3086;
        _3163 = _3087;
        _3165 = _3088;
        _3167 = _3089;
    }
    bool _3374;
    vec4 _3177;
    vec4 _3199;
    float _3201;
    float _3205;
    float _3206;
    float _3207;
    float _3208;
    bool _3218;
    for (;;)
    {
        _3177 = cbMatDynParam._m0[0u];
        float _3179 = roundEven(_3177.y);
        bool _3180 = _3179 == 3.0;
        float _3181 = log2(_3167);
        float _3188 = exp2(_3181 * cbSceneParam._m0[78u].x) * _3058;
        float _3189 = exp2(_3181 * cbSceneParam._m0[78u].y) * _3059;
        float _3190 = exp2(_3181 * cbSceneParam._m0[78u].z) * _3060;
        float _3197 = _922 + (-0.5);
        _3199 = cbMtdParam._m0[1u];
        _3201 = _3199.y * _3197;
        float _3204 = (_3179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3205 = _3204 * (_3180 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3161)));
        _3206 = _3204 * (_3180 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3163)));
        _3207 = _3204 * (_3180 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3165)));
        _3208 = _3197 * 0.999000012874603271484375;
        _3218 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3218)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3208) < 0.5)
            {
                _3374 = true;
                break;
            }
        }
        uint _3315 = _971 + uint(_3177.w);
        if ((cbInstanceData._m0[_3315].w < 1.0) && ((cbInstanceData._m0[_3315].w + _3208) < 0.5))
        {
            _3374 = true;
            break;
        }
        if ((_3201 + 1.0) < _3199.x)
        {
            _3374 = true;
            break;
        }
        _3374 = false;
        break;
    }
    float _3578;
    if (_3374)
    {
        discard_state = true;
        _3578 = 0.0;
    }
    else
    {
        _3578 = cbInstanceData._m0[_3061].w;
    }
    SV_Target.x = _3205;
    SV_Target.y = _3206;
    SV_Target.z = _3207;
    SV_Target.w = _3578;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3061].w;
    discard_exit();
}


