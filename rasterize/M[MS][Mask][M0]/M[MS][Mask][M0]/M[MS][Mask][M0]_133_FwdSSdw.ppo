#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1438;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3764 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3775 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3786 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3797 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _457 = (_450 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _458 = (_450 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _459 = (_450 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3808 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _380.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[24u].z) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3819 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _530)) + _530;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _531)) + _531;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _532)) + _532;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _611;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _701 = _697.z;
    float _708 = ((_680.x - _699) * _450) + _699;
    float _709 = ((_680.y - _700) * _450) + _700;
    float _710 = ((_680.z - _701) * _450) + _701;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _733 = ((_722.x - _708) * _523) + _708;
    float _734 = ((_722.y - _709) * _523) + _709;
    float _735 = ((_722.z - _710) * _523) + _710;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _760 = ((_747.z - _735) * _592) + _735;
    float _763 = ((((_747.x - _733) * _592) + _733) * 2.0) + (-1.0);
    float _764 = ((((_747.y - _734) * _592) + _734) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3830 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))));
    vec4 _784 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _811 = _809.x;
    float _812 = 1.0 - _811;
    float _825 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_811 - _812) * cbMtdParam._m0[24u].w) + _812) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3841 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _833 = (_826 * ((_638.x * cbMtdParam._m0[18u].x) - _618)) + _618;
    float _834 = (_826 * ((_638.y * cbMtdParam._m0[18u].y) - _619)) + _619;
    float _835 = (_826 * ((_638.z * cbMtdParam._m0[18u].z) - _620)) + _620;
    float _840 = (((_657.z - _760) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _760;
    float _844 = ((_784.z - _840) * cbMtdParam._m0[19u].w) + _840;
    vec4 _857 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _864 = (_857.x * 2.0) + (-1.0);
    float _865 = (_857.y * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3852 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _874 = (_826 * (_857.z - _844)) + _844;
    float _883 = (_763 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_657.x * 2.0) + (-1.0)))) + (((_784.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _884 = (_764 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_657.y * 2.0) + (-1.0)))) + (((_784.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _896 = (((_864 - _883) + (cbMtdParam._m0[21u].x * _883)) * _826) + _883;
    float _897 = (((_865 - _884) + (cbMtdParam._m0[21u].x * _884)) * _826) + _884;
    float _898 = (_826 * (sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _770)) + _770;
    float _902 = cbMtdParam._m0[22u].x + _784.w;
    float _905 = fma(_898, _244 * NORMAL.x, fma(_897, _251 * TANGENT.x, (_237 * _229) * _896));
    float _908 = fma(_898, _244 * NORMAL.y, fma(_897, _251 * TANGENT.y, (_237 * _230) * _896));
    float _911 = fma(_898, _244 * NORMAL.z, fma(_897, _251 * TANGENT.z, (_237 * _231) * _896));
    float _915 = inversesqrt(dot(vec3(_905, _908, _911), vec3(_905, _908, _911)));
    float _916 = _915 * _905;
    float _917 = _915 * _908;
    float _918 = _915 * _911;
    float _3863 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _919 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _3885 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3896 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3907 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _937 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_918, cbSceneParam._m0[5u].z, fma(_917, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _916));
    float _1026 = fma(_918, cbSceneParam._m0[6u].z, fma(_917, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _916));
    float _1029 = fma(_918, cbSceneParam._m0[7u].z, fma(_917, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _916));
    uint _1043 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _3918 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    vec4 _1063 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1067 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * TEXCOORD_5.w) * _1063.x;
    float _1068 = dot(vec3(_916, _917, _918), vec3(_996, _997, _998));
    float _1071 = _1068 * 2.0;
    float _1075 = (_1071 * _916) - _996;
    float _1076 = (_1071 * _917) - _997;
    float _1077 = (_1071 * _918) - _998;
    float _1081 = abs(dot(vec3(_996, _997, _998), vec3(_916, _917, _918)));
    float _3951 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1083 = sqrt(_919);
    float _1096 = exp2((_1083 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1083 * 3.0));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1136, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128));
        float _1166 = fma(_1136, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128));
        float _1170 = fma(_1136, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128));
        float _1195 = _1128 + _916;
        float _1196 = _1132 + _917;
        float _1197 = _1136 + _918;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_916, _917, _918), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3999 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_916, _917, _918), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4032 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_916, _917, _918), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4065 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1136, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128));
        float _1479 = fma(_1136, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128));
        float _1483 = fma(_1136, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128));
        float _1506 = _1128 + _916;
        float _1507 = _1132 + _917;
        float _1508 = _1136 + _918;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_916, _917, _918), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4128 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_916, _917, _918), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4161 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_916, _917, _918), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4194 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1438;
        _1745 = _1438;
        _1746 = _1438;
        _1747 = _1438;
        _1748 = _1438;
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1450)) + _1450;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1451)) + _1451;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1452)) + _1452;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1075 * 0.5;
    float _1813 = _1076 * 0.5;
    float _1814 = _1077 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _919);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1928 = fma(_1136, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128)) + cbModelParam._m0[13u].w;
        float _1932 = fma(_1136, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128)) + cbModelParam._m0[14u].w;
        float _1936 = fma(_1136, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128)) + cbModelParam._m0[15u].w;
        float _1939 = fma(_1077, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075));
        float _1942 = fma(_1077, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075));
        float _1945 = fma(_1077, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075));
        float _1973;
        if (_1939 > 0.0)
        {
            _1973 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1973 = frontier_phi_14_12_ladder;
        }
        float _2194;
        if (_1942 > 0.0)
        {
            _2194 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2194 = frontier_phi_23_19_ladder;
        }
        float _2440;
        if (_1945 > 0.0)
        {
            _2440 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2440 = frontier_phi_35_30_ladder;
        }
        float _2442 = isnan(_2194) ? _1973 : (isnan(_1973) ? _2194 : min(_1973, _2194));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1939) + _1928;
        float _2448 = (_2443 * _1942) + _1932;
        float _2449 = (_2443 * _1945) + _1936;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_13_35_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1961 = frontier_phi_13_35_ladder_2;
        _1963 = frontier_phi_13_35_ladder_1;
        _1965 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1075, _1076, _1077), _1881);
        _1961 = _1949.x * cbModelParam._m0[1u].y;
        _1963 = _1949.y * cbModelParam._m0[1u].y;
        _1965 = _1949.z * cbModelParam._m0[1u].y;
    }
    float _1969 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _919);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1969 : min(cbModelParam._m0[25u].w, _1969));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1136, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1136, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1136, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1077, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075));
        float _2037 = fma(_1077, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075));
        float _2040 = fma(_1077, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075));
        float _2199;
        if (_2034 > 0.0)
        {
            _2199 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2199 = frontier_phi_25_21_ladder;
        }
        float _2467;
        if (_2037 > 0.0)
        {
            _2467 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2467 = frontier_phi_37_32_ladder;
        }
        float _2672;
        if (_2040 > 0.0)
        {
            _2672 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2672 = frontier_phi_46_43_ladder;
        }
        float _2674 = isnan(_2467) ? _2199 : (isnan(_2199) ? _2467 : min(_2199, _2467));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2034) + _2023;
        float _2680 = (_2675 * _2037) + _2027;
        float _2681 = (_2675 * _2040) + _2031;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1970);
            frontier_phi_22_46_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_22_46_ladder_2;
        _2061 = frontier_phi_22_46_ladder_1;
        _2063 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1075, _1076, _1077), _1970);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2075 = ((((1.0 - _1096) * ((_1083 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1096 * _1083)) * _1067;
    float _2076 = _2075 * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2077 = _2075 * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2078 = _2075 * ((cbModelParam._m0[1u].w * (_2063 - _1965)) + _1965);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2077, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2077, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2077, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    vec4 _2095 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1004, _1005));
    float _2097 = _2095.w;
    float _2109 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2097);
    float _2110 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2097);
    float _2111 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2097);
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _1067 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2153 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2157 = _2117 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_916, _917, _918));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_916, _917, _918));
    float _4330 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4341 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2134].x * _2140) * _2178) + (((cbLight._m0[_2144].x * _2109) * _2153) * _2176);
    float _2186 = ((_2140 * cbLight._m0[_2134].y) * _2178) + (((cbLight._m0[_2144].y * _2110) * _2153) * _2176);
    float _2187 = ((_2140 * cbLight._m0[_2134].z) * _2178) + (((cbLight._m0[_2144].z * _2111) * _2153) * _2176);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2193)
    {
        _2204 = _2185;
        _2206 = _2186;
        _2208 = _2187;
    }
    else
    {
        uint _2212 = _2117 + 6u;
        float _2228 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4352 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2231 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2204 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2185;
        _2206 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2186;
        _2208 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2187;
    }
    bool _2211 = _2191.y == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2211)
    {
        _2249 = _2204;
        _2251 = _2206;
        _2253 = _2208;
    }
    else
    {
        uint _2411 = _2117 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4368 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2430 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2249 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2204;
        _2251 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2206;
        _2253 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2208;
    }
    uint _2256 = _2117 + 8u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _919) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2117].x + _996;
    float _2272 = cbLight._m0[_2117].y + _997;
    float _2273 = cbLight._m0[_2117].z + _998;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2117].xyz));
    float _4384 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2285 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2286 = dot(vec3(_916, _917, _918), vec3(_2278, _2279, _2280));
    float _4406 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2278, _2279, _2280));
    float _4417 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2270 * _2270;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2310 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2285 * ((_2284 * _2310) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2310) + _2270) * _2284))) * _2284;
    float _4428 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    uint _2337 = _2117 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _919) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2157].x + _996;
    float _2351 = cbLight._m0[_2157].y + _997;
    float _2352 = cbLight._m0[_2157].z + _998;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2157].xyz));
    float _4439 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2364 = dot(vec3(_916, _917, _918), vec3(_2357, _2358, _2359));
    float _4450 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2357, _2358, _2359));
    float _4461 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2386 = 1.0 - _2349;
    float _2396 = (0.5 / (((_2285 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2386) + _2349) * _2363))) * _2363;
    float _4472 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2408 = (((_2385 * cbLight._m0[_2337].x) * _2398) * _2140) + ((((cbLight._m0[_2256].x * _2109) * _2309) * _2323) * _2153);
    float _2409 = (((_2385 * cbLight._m0[_2337].y) * _2398) * _2140) + ((((cbLight._m0[_2256].y * _2110) * _2309) * _2323) * _2153);
    float _2410 = (((_2385 * cbLight._m0[_2337].z) * _2398) * _2140) + ((((cbLight._m0[_2256].z * _2111) * _2309) * _2323) * _2153);
    float _2472;
    float _2474;
    float _2476;
    if (_2193)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2117 + 2u;
        uint _2482 = _2117 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _919) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _996;
        float _2499 = cbLight._m0[_2478].y + _997;
        float _2500 = cbLight._m0[_2478].z + _998;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2478].xyz));
        float _4483 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2512 = dot(vec3(_916, _917, _918), vec3(_2505, _2506, _2507));
        float _4494 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4505 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2533 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2534 = 1.0 - _2497;
        float _2544 = (0.5 / (((_2285 * ((_2511 * _2534) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2534) + _2497) * _2511))) * _2511;
        float _4516 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2472 = (((_2533 * cbLight._m0[_2482].x) * _2546) * _2547) + _2408;
        _2474 = (((_2533 * cbLight._m0[_2482].y) * _2546) * _2547) + _2409;
        _2476 = (((_2533 * cbLight._m0[_2482].z) * _2546) * _2547) + _2410;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2211)
    {
        _2582 = _2472;
        _2584 = _2474;
        _2586 = _2476;
    }
    else
    {
        uint _2593 = _2117 + 3u;
        uint _2597 = _2117 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _919) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _996;
        float _2614 = cbLight._m0[_2593].y + _997;
        float _2615 = cbLight._m0[_2593].z + _998;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2593].xyz));
        float _4532 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2627 = dot(vec3(_916, _917, _918), vec3(_2620, _2621, _2622));
        float _4543 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4554 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2648 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2649 = 1.0 - _2612;
        float _2659 = (0.5 / (((_2285 * ((_2626 * _2649) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2649) + _2612) * _2626))) * _2626;
        float _4565 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2582 = (((_2648 * cbLight._m0[_2597].x) * _2661) * _2662) + _2472;
        _2584 = (((_2648 * cbLight._m0[_2597].y) * _2661) * _2662) + _2474;
        _2586 = (((_2648 * cbLight._m0[_2597].z) * _2661) * _2662) + _2476;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2115.y == 0u)
    {
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2737;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2737;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2737;
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _2753)));
        float _2774 = (log2(_2740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3046)
                {
                    frontier_phi_61_pred = _3030;
                    frontier_phi_61_pred_1 = _3035;
                    frontier_phi_61_pred_2 = _3034;
                    frontier_phi_61_pred_3 = _3033;
                    frontier_phi_61_pred_4 = _3032;
                    frontier_phi_61_pred_5 = _3031;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3045;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3036 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _2738;
                        float _3221 = _3180.y - _2739;
                        float _3222 = _3180.z - _2740;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_1023, _1026, _1029), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4591 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _2738;
                        float _3256 = (-0.0) - _2739;
                        float _3257 = (-0.0) - _2740;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3272 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _1083;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_1023, _1026, _1029), vec3(_3262, _3263, _3264));
                        float _4607 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3297 = dot(vec3(_1023, _1026, _1029), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4618 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3240 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3230) + _3306;
                        float _4629 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4640 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3304 * _3304) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3089 = (_3251 * _3199.x) + _3157;
                        _3090 = (_3251 * _3199.y) + _3158;
                        _3091 = (_3251 * _3199.z) + _3159;
                        _3086 = (_3332 * _3216.x) + _3154;
                        _3087 = (_3332 * _3216.y) + _3155;
                        _3088 = (_3332 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_61_pred = _3086;
                    frontier_phi_61_pred_1 = _3091;
                    frontier_phi_61_pred_2 = _3090;
                    frontier_phi_61_pred_3 = _3089;
                    frontier_phi_61_pred_4 = _3088;
                    frontier_phi_61_pred_5 = _3087;
                }
                _2886 = frontier_phi_61_pred;
                _2896 = frontier_phi_61_pred_1;
                _2894 = frontier_phi_61_pred_2;
                _2892 = frontier_phi_61_pred_3;
                _2890 = frontier_phi_61_pred_4;
                _2888 = frontier_phi_61_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2886;
                    _3031 = _2888;
                    _3032 = _2890;
                    _3033 = _2892;
                    _3034 = _2894;
                    _3035 = _2896;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2902) & _2784) == 0u)
        {
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
            _3004 = _2891;
            _3006 = _2893;
            _3008 = _2895;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
            float _3024 = _3023 * _2738;
            float _3025 = _3023 * _2739;
            float _3026 = _3023 * _2740;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3137 = _2885;
                float _3138 = _2887;
                float _3139 = _2889;
                float _3140 = _2891;
                float _3141 = _2893;
                float _3142 = _2895;
                uint _3143 = _2902;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3153)
                    {
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        uint _3356 = _3152;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2740, _3474.z, fma(_2739, _3474.y, _3474.x * _2738)) + _3474.w;
                            _3487 = !((fma(_2740, _3455.z, fma(_2739, _3455.y, _3455.x * _2738)) + _3455.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2738;
                                float _3515 = _3382.y - _2739;
                                float _3516 = _3382.z - _2740;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4651 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_1023, _1026, _1029))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2740, _3425.z, fma(_2739, _3425.y, _3425.x * _2738)) + _3425.w) / _3486;
                                float _3546 = (fma(_2740, _3440.z, fma(_2739, _3440.y, _3440.x * _2738)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4667 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _1083;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _3024;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4678 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3589 = dot(vec3(_1023, _1026, _1029), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4689 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_1023, _1026, _1029), vec3(_3521, _3522, _3523))) + _3598;
                                float _4700 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4711 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3626 * _3410.x;
                                frontier_phi_73_pred_1 = _3626 * _3410.y;
                                frontier_phi_73_pred_2 = _3552 * _3398.z;
                                frontier_phi_73_pred_3 = _3552 * _3398.y;
                                frontier_phi_73_pred_4 = _3552 * _3398.x;
                                frontier_phi_73_pred_5 = _3626 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_73_pred;
                            _3631 = frontier_phi_73_pred_1;
                            _3635 = frontier_phi_73_pred_2;
                            _3634 = frontier_phi_73_pred_3;
                            _3633 = frontier_phi_73_pred_4;
                            _3632 = frontier_phi_73_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3340;
                        frontier_phi_67_pred_1 = _3341;
                        frontier_phi_67_pred_2 = _3342;
                        frontier_phi_67_pred_3 = _3339;
                        frontier_phi_67_pred_4 = _3338;
                        frontier_phi_67_pred_5 = _3337;
                    }
                    _3005 = frontier_phi_67_pred;
                    _3007 = frontier_phi_67_pred_1;
                    _3009 = frontier_phi_67_pred_2;
                    _3003 = frontier_phi_67_pred_3;
                    _3001 = frontier_phi_67_pred_4;
                    _2999 = frontier_phi_67_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2999;
                        _3138 = _3001;
                        _3139 = _3003;
                        _3140 = _3005;
                        _3141 = _3007;
                        _3142 = _3009;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3007;
                frontier_phi_55_56_ladder_1 = _3009;
                frontier_phi_55_56_ladder_2 = _3005;
                frontier_phi_55_56_ladder_3 = _3003;
                frontier_phi_55_56_ladder_4 = _3001;
                frontier_phi_55_56_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_55_56_ladder = _2893;
                frontier_phi_55_56_ladder_1 = _2895;
                frontier_phi_55_56_ladder_2 = _2891;
                frontier_phi_55_56_ladder_3 = _2889;
                frontier_phi_55_56_ladder_4 = _2887;
                frontier_phi_55_56_ladder_5 = _2885;
            }
            _2998 = frontier_phi_55_56_ladder_5;
            _3000 = frontier_phi_55_56_ladder_4;
            _3002 = frontier_phi_55_56_ladder_3;
            _3004 = frontier_phi_55_56_ladder_2;
            _3006 = frontier_phi_55_56_ladder;
            _3008 = frontier_phi_55_56_ladder_1;
        }
        float _3013 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
        _2797 = (_3013 * _3004) + _2249;
        _2799 = (_3013 * _3006) + _2251;
        _2801 = (_3013 * _3008) + _2253;
        _2803 = ((_2998 * 0.039999999105930328369140625) * _3013) + _2582;
        _2805 = ((_3000 * 0.039999999105930328369140625) * _3013) + _2584;
        _2807 = ((_3002 * 0.039999999105930328369140625) * _3013) + _2586;
    }
    else
    {
        _2797 = _2249;
        _2799 = _2251;
        _2801 = _2253;
        _2803 = _2582;
        _2805 = _2584;
        _2807 = _2586;
    }
    float _4727 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4738 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4749 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    uint _2827 = _278 + 6u;
    float _2835 = _1004 / cbSceneParam._m0[86u].x;
    float _2836 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _937 : (isnan(_937) ? cbSceneParam._m0[77u].w : min(_937, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_937 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_937) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _937 : min(cbSceneParam._m0[80u].w, _937));
        float _2911 = _2910 / _937;
        float _2922 = _2911 * _989;
        float _2923 = _990 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2926 = _2911 * _991;
        float _2928 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2923;
        float _2936 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3099;
        if (abs((_2924 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3099 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3061 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3099 = ((abs(_2936 / _2924) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2946 * _3070) - exp2(_2946 * _3071)) * _3059))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3101 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3110 = exp2((_3099 * (-1.44269502162933349609375)) * (1.0 - _3101.w));
        float _3111 = log2(_3110);
        float _3127 = log2(_2855);
        _2948 = (exp2(_3127 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].x)) * _3101.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2950 = (exp2(_3127 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].y)) * _3101.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2952 = (exp2(_3127 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].z)) * _3101.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2954 = _3110 * _2855;
    }
    else
    {
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
        _2954 = _2855;
    }
    float _2966 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2967 = _2966 == 3.0;
    float _2968 = log2(_2954);
    float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2797 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1067))) + ((_2803 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2799 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1067))) + ((_2805 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2801 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1067))) + ((_2807 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2986 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2986 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.y = _2986 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.z = _2986 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.w = cbInstanceData._m0[_2827].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
}


