#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3655 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3666 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3677 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3688 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _444 = (_437 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _445 = (_437 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _446 = (_437 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3699 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) + _529;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _437) + _599;
    float _609 = ((_580.y - _600) * _437) + _600;
    float _610 = ((_580.z - _601) * _437) + _601;
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _510) + _610;
    float _638 = ((((_622.x - _608) * _510) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _510) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3710 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _675 = (_638 + ((((_555.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_663.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _676 = (_639 + ((((_555.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_663.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _679 = fma(_645, _235, fma(_676, _242, _675 * _228));
    float _682 = fma(_645, _236, fma(_676, _243, _675 * _229));
    float _685 = fma(_645, _237, fma(_676, _244, _675 * _230));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _718 = _716.x;
    float _719 = 1.0 - _718;
    float _725 = (cbMtdParam._m0[19u].x + dot(vec4(_689 * _679, _689 * _682, _689 * _685, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_718 - _719) * cbMtdParam._m0[24u].w) + _719) * cbMtdParam._m0[21u].z);
    float _3721 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _733 = (_726 * (cbMtdParam._m0[17u].x - _536)) + _536;
    float _734 = (_726 * (cbMtdParam._m0[17u].y - _537)) + _537;
    float _735 = (_726 * (cbMtdParam._m0[17u].z - _538)) + _538;
    float _740 = (((_555.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    float _744 = ((_663.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3732 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = ((_757.z - _744) * _726) + _744;
    float _784 = ((sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) - _645) * _726) + _645;
    float _787 = (((_764 - _675) * _726) + _675) + (cbMtdParam._m0[21u].x * _675);
    float _788 = (((_765 - _676) * _726) + _676) + (cbMtdParam._m0[21u].x * _676);
    float _790 = cbMtdParam._m0[22u].x + _663.w;
    float _793 = fma(_784, _235, fma(_788, _242, _787 * _228));
    float _796 = fma(_784, _236, fma(_788, _243, _787 * _229));
    float _799 = fma(_784, _237, fma(_788, _244, _787 * _230));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    float _3743 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _807 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3765 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3776 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3787 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _804));
    float _914 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _804));
    float _917 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _804));
    uint _931 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3798 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _955 = ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * TEXCOORD_5.w) * _951.x;
    float _956 = dot(vec3(_804, _805, _806), vec3(_884, _885, _886));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _804) - _884;
    float _964 = (_959 * _805) - _885;
    float _965 = (_959 * _806) - _886;
    float _969 = abs(dot(vec3(_884, _885, _886), vec3(_804, _805, _806)));
    float _3831 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_807);
    float _984 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1054 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1058 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _804;
        float _1084 = _1020 + _805;
        float _1085 = _1024 + _806;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_804, _805, _806), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3879 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_804, _805, _806), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3912 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_804, _805, _806), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3945 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1368 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1372 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1395 = _1016 + _804;
        float _1396 = _1020 + _805;
        float _1397 = _1024 + _806;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_804, _805, _806), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4008 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_804, _805, _806), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4041 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_804, _805, _806), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4074 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1326;
        _1634 = _1326;
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1338)) + _1338;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1339)) + _1339;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1340)) + _1340;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _963 * 0.5;
    float _1702 = _964 * 0.5;
    float _1703 = _965 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1832 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1835 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1863 = frontier_phi_14_12_ladder;
        }
        float _2085;
        if (_1832 > 0.0)
        {
            _2085 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2085 = frontier_phi_23_19_ladder;
        }
        float _2331;
        if (_1835 > 0.0)
        {
            _2331 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2331 = frontier_phi_35_30_ladder;
        }
        float _2333 = isnan(_2085) ? _1863 : (isnan(_1863) ? _2085 : min(_1863, _2085));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1829) + _1818;
        float _2339 = (_2334 * _1832) + _1822;
        float _2340 = (_2334 * _1835) + _1826;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_13_35_ladder = _2464.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2464.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2464.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_13_35_ladder_2;
        _1853 = frontier_phi_13_35_ladder_1;
        _1855 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1770);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1914 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1918 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1922 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1925 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1928 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1931 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2090;
        if (_1925 > 0.0)
        {
            _2090 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2090 = frontier_phi_25_21_ladder;
        }
        float _2358;
        if (_1928 > 0.0)
        {
            _2358 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2358 = frontier_phi_37_32_ladder;
        }
        float _2563;
        if (_1931 > 0.0)
        {
            _2563 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2563 = frontier_phi_46_43_ladder;
        }
        float _2565 = isnan(_2358) ? _2090 : (isnan(_2090) ? _2358 : min(_2090, _2358));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1925) + _1914;
        float _2571 = (_2566 * _1928) + _1918;
        float _2572 = (_2566 * _1931) + _1922;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_22_46_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1950 = frontier_phi_22_46_ladder_2;
        _1952 = frontier_phi_22_46_ladder_1;
        _1954 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1860);
        _1950 = _1934.x * cbModelParam._m0[1u].z;
        _1952 = _1934.y * cbModelParam._m0[1u].z;
        _1954 = _1934.z * cbModelParam._m0[1u].z;
    }
    float _1966 = ((((1.0 - _984) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_984 * _971)) * _955;
    float _1967 = _1966 * ((cbModelParam._m0[1u].w * (_1950 - _1851)) + _1851);
    float _1968 = _1966 * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1969 = _1966 * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1967 * cbSceneParam._m0[91u].x));
    vec4 _1986 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_892, _893));
    float _1988 = _1986.w;
    float _2000 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1988);
    float _2001 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1988);
    float _2002 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1988);
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2016 = _955 + (-1.0);
    float _2021 = (cbLight._m0[_2009].x * _2016) + 1.0;
    float _2022 = (cbLight._m0[_2009].y * _2016) + 1.0;
    float _2023 = (cbLight._m0[_2009].z * _2016) + 1.0;
    float _2024 = (cbLight._m0[_2009].w * _2016) + 1.0;
    uint _2025 = _2008 + 5u;
    float _2031 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2035 = _2008 + 4u;
    float _2044 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2048 = _2008 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_804, _805, _806));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_804, _805, _806));
    float _4210 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4221 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2025].x * _2031) * _2069) + (((cbLight._m0[_2035].x * _2000) * _2044) * _2067);
    float _2077 = ((_2031 * cbLight._m0[_2025].y) * _2069) + (((cbLight._m0[_2035].y * _2001) * _2044) * _2067);
    float _2078 = ((_2031 * cbLight._m0[_2025].z) * _2069) + (((cbLight._m0[_2035].z * _2002) * _2044) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2008 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2084)
    {
        _2095 = _2076;
        _2097 = _2077;
        _2099 = _2078;
    }
    else
    {
        uint _2103 = _2008 + 6u;
        float _2119 = (dot(vec3(cbLight._m0[_2008 + 2u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4232 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2122 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2095 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _2076;
        _2097 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _2077;
        _2099 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _2078;
    }
    bool _2102 = _2082.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2102)
    {
        _2140 = _2095;
        _2142 = _2097;
        _2144 = _2099;
    }
    else
    {
        uint _2302 = _2008 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_2008 + 3u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4248 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2321 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2140 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2095;
        _2142 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2097;
        _2144 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2099;
    }
    uint _2147 = _2008 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _807) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2008].x + _884;
    float _2163 = cbLight._m0[_2008].y + _885;
    float _2164 = cbLight._m0[_2008].z + _886;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2008].xyz));
    float _4264 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2176 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2177 = dot(vec3(_804, _805, _806), vec3(_2169, _2170, _2171));
    float _4286 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2169, _2170, _2171));
    float _4297 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2201 = 1.0 - _2161;
    float _2212 = (0.5 / (((_2176 * ((_2175 * _2201) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2201) + _2161) * _2175))) * _2175;
    float _4308 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2228 = _2008 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _807) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2048].x + _884;
    float _2242 = cbLight._m0[_2048].y + _885;
    float _2243 = cbLight._m0[_2048].z + _886;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2048].xyz));
    float _4319 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2255 = dot(vec3(_804, _805, _806), vec3(_2248, _2249, _2250));
    float _4330 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2248, _2249, _2250));
    float _4341 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2277 = 1.0 - _2240;
    float _2287 = (0.5 / (((_2176 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2277) + _2240) * _2254))) * _2254;
    float _4352 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2299 = (((_2276 * cbLight._m0[_2228].x) * _2289) * _2031) + ((((cbLight._m0[_2147].x * _2000) * _2200) * _2214) * _2044);
    float _2300 = (((_2276 * cbLight._m0[_2228].y) * _2289) * _2031) + ((((cbLight._m0[_2147].y * _2001) * _2200) * _2214) * _2044);
    float _2301 = (((_2276 * cbLight._m0[_2228].z) * _2289) * _2031) + ((((cbLight._m0[_2147].z * _2002) * _2200) * _2214) * _2044);
    float _2363;
    float _2365;
    float _2367;
    if (_2084)
    {
        _2363 = _2299;
        _2365 = _2300;
        _2367 = _2301;
    }
    else
    {
        uint _2369 = _2008 + 2u;
        uint _2373 = _2008 + 10u;
        float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _807) * 0.949999988079071044921875);
        float _2388 = _2387 * _2387;
        float _2389 = cbLight._m0[_2369].x + _884;
        float _2390 = cbLight._m0[_2369].y + _885;
        float _2391 = cbLight._m0[_2369].z + _886;
        float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
        float _2396 = _2395 * _2389;
        float _2397 = _2395 * _2390;
        float _2398 = _2395 * _2391;
        float _2399 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2369].xyz));
        float _4363 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2403 = dot(vec3(_804, _805, _806), vec3(_2396, _2397, _2398));
        float _4374 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2407 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2396, _2397, _2398));
        float _4385 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _2388 * _2388;
        float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
        float _2424 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2425 = 1.0 - _2388;
        float _2435 = (0.5 / (((_2176 * ((_2402 * _2425) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2425) + _2388) * _2402))) * _2402;
        float _4396 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2363 = (((_2424 * cbLight._m0[_2373].x) * _2437) * _2438) + _2299;
        _2365 = (((_2424 * cbLight._m0[_2373].y) * _2437) * _2438) + _2300;
        _2367 = (((_2424 * cbLight._m0[_2373].z) * _2437) * _2438) + _2301;
    }
    float _2473;
    float _2475;
    float _2477;
    if (_2102)
    {
        _2473 = _2363;
        _2475 = _2365;
        _2477 = _2367;
    }
    else
    {
        uint _2484 = _2008 + 3u;
        uint _2488 = _2008 + 11u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _807) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _884;
        float _2505 = cbLight._m0[_2484].y + _885;
        float _2506 = cbLight._m0[_2484].z + _886;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2484].xyz));
        float _4412 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2518 = dot(vec3(_804, _805, _806), vec3(_2511, _2512, _2513));
        float _4423 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4434 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2540 = 1.0 - _2503;
        float _2550 = (0.5 / (((_2176 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2540) + _2503) * _2517))) * _2517;
        float _4445 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2473 = (((_2539 * cbLight._m0[_2488].x) * _2552) * _2553) + _2363;
        _2475 = (((_2539 * cbLight._m0[_2488].y) * _2552) * _2553) + _2365;
        _2477 = (((_2539 * cbLight._m0[_2488].z) * _2552) * _2553) + _2367;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_2006.y == 0u)
    {
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2628;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2628;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2628;
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2644)));
        float _2665 = (log2(_2631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2937)
                {
                    frontier_phi_61_pred = _2921;
                    frontier_phi_61_pred_1 = _2926;
                    frontier_phi_61_pred_2 = _2925;
                    frontier_phi_61_pred_3 = _2924;
                    frontier_phi_61_pred_4 = _2923;
                    frontier_phi_61_pred_5 = _2922;
                }
                else
                {
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    uint _3051;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2936;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3055 = uint(findLSB(_3051)) + (_2927 << 5u);
                        uint _3052 = (_3051 + 4294967295u) & _3051;
                        uint _3057 = _3055 * 48u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3077 = (_3055 * 48u) + 4u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3096 = (_3055 * 48u) + 8u;
                        vec3 _3107 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x));
                        float _3111 = _3071.x - _2629;
                        float _3112 = _3071.y - _2630;
                        float _3113 = _3071.z - _2631;
                        float _3114 = dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113));
                        float _3117 = inversesqrt(_3114);
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3121 = dot(vec3(_911, _914, _917), vec3(_3118, _3119, _3120));
                        float _3126 = 1.0 - (_3114 * _3071.w);
                        float _4471 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3128 = sqrt(_3114) * _3090.w;
                        float _3131 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3121) + _3132;
                        float _3138 = _3128 * _3128;
                        float _3142 = ((isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))) * _3127) / ((_3138 * 0.699999988079071044921875) + 1.0);
                        float _3146 = (-0.0) - _2629;
                        float _3147 = (-0.0) - _2630;
                        float _3148 = (-0.0) - _2631;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3163 = exp2(log2(1.0 / ((_3138 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _971;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_911, _914, _917), vec3(_3153, _3154, _3155));
                        float _4487 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3188 = dot(vec3(_911, _914, _917), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4498 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3131 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3121) + _3197;
                        float _4509 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4520 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3195 * _3195) * ((_3138 * 2.1991131305694580078125) + 3.141590118408203125))) * _3127;
                        _2980 = (_3142 * _3090.x) + _3048;
                        _2981 = (_3142 * _3090.y) + _3049;
                        _2982 = (_3142 * _3090.z) + _3050;
                        _2977 = (_3223 * _3107.x) + _3045;
                        _2978 = (_3223 * _3107.y) + _3046;
                        _2979 = (_3223 * _3107.z) + _3047;
                        if (_3052 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _3052;
                        }
                    }
                    frontier_phi_61_pred = _2977;
                    frontier_phi_61_pred_1 = _2982;
                    frontier_phi_61_pred_2 = _2981;
                    frontier_phi_61_pred_3 = _2980;
                    frontier_phi_61_pred_4 = _2979;
                    frontier_phi_61_pred_5 = _2978;
                }
                _2777 = frontier_phi_61_pred;
                _2787 = frontier_phi_61_pred_1;
                _2785 = frontier_phi_61_pred_2;
                _2783 = frontier_phi_61_pred_3;
                _2781 = frontier_phi_61_pred_4;
                _2779 = frontier_phi_61_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2777;
                    _2922 = _2779;
                    _2923 = _2781;
                    _2924 = _2783;
                    _2925 = _2785;
                    _2926 = _2787;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2793) & _2675) == 0u)
        {
            _2889 = _2776;
            _2891 = _2778;
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
            float _2915 = _2914 * _2629;
            float _2916 = _2914 * _2630;
            float _2917 = _2914 * _2631;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3028 = _2776;
                float _3029 = _2778;
                float _3030 = _2780;
                float _3031 = _2782;
                float _3032 = _2784;
                float _3033 = _2786;
                uint _3034 = _2793;
                uint _3043;
                bool _3044;
                for (;;)
                {
                    _3043 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                    _3044 = _3043 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3044)
                    {
                        frontier_phi_67_pred = _3031;
                        frontier_phi_67_pred_1 = _3032;
                        frontier_phi_67_pred_2 = _3033;
                        frontier_phi_67_pred_3 = _3030;
                        frontier_phi_67_pred_4 = _3029;
                        frontier_phi_67_pred_5 = _3028;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        uint _3247 = _3043;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3331;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3258 = ((_3034 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3258 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3258 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3258 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2631, _3365.z, fma(_2630, _3365.y, _3365.x * _2629)) + _3365.w;
                            _3378 = !((fma(_2631, _3346.z, fma(_2630, _3346.y, _3346.x * _2629)) + _3346.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3273.x - _2629;
                                float _3406 = _3273.y - _2630;
                                float _3407 = _3273.z - _2631;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3274 * _3274));
                                float _4531 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3423 = sqrt(_3408) * _3289.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_911, _914, _917))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2631, _3316.z, fma(_2630, _3316.y, _3316.x * _2629)) + _3316.w) / _3377;
                                float _3437 = (fma(_2631, _3331.z, fma(_2630, _3331.y, _3331.x * _2629)) + _3331.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4547 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _971;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2915;
                                float _3467 = _3413 - _2916;
                                float _3468 = _3414 - _2917;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4558 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3480 = dot(vec3(_911, _914, _917), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4569 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_911, _914, _917), vec3(_3412, _3413, _3414))) + _3489;
                                float _4580 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4591 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3517 * _3301.x;
                                frontier_phi_73_pred_1 = _3517 * _3301.y;
                                frontier_phi_73_pred_2 = _3443 * _3289.z;
                                frontier_phi_73_pred_3 = _3443 * _3289.y;
                                frontier_phi_73_pred_4 = _3443 * _3289.x;
                                frontier_phi_73_pred_5 = _3517 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_73_pred;
                            _3522 = frontier_phi_73_pred_1;
                            _3526 = frontier_phi_73_pred_2;
                            _3525 = frontier_phi_73_pred_3;
                            _3524 = frontier_phi_73_pred_4;
                            _3523 = frontier_phi_73_pred_5;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3231;
                        frontier_phi_67_pred_1 = _3232;
                        frontier_phi_67_pred_2 = _3233;
                        frontier_phi_67_pred_3 = _3230;
                        frontier_phi_67_pred_4 = _3229;
                        frontier_phi_67_pred_5 = _3228;
                    }
                    _2896 = frontier_phi_67_pred;
                    _2898 = frontier_phi_67_pred_1;
                    _2900 = frontier_phi_67_pred_2;
                    _2894 = frontier_phi_67_pred_3;
                    _2892 = frontier_phi_67_pred_4;
                    _2890 = frontier_phi_67_pred_5;
                    uint _3035 = _3034 + 1u;
                    if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3028 = _2890;
                        _3029 = _2892;
                        _3030 = _2894;
                        _3031 = _2896;
                        _3032 = _2898;
                        _3033 = _2900;
                        _3034 = _3035;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2898;
                frontier_phi_55_56_ladder_1 = _2900;
                frontier_phi_55_56_ladder_2 = _2896;
                frontier_phi_55_56_ladder_3 = _2894;
                frontier_phi_55_56_ladder_4 = _2892;
                frontier_phi_55_56_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_55_56_ladder = _2784;
                frontier_phi_55_56_ladder_1 = _2786;
                frontier_phi_55_56_ladder_2 = _2782;
                frontier_phi_55_56_ladder_3 = _2780;
                frontier_phi_55_56_ladder_4 = _2778;
                frontier_phi_55_56_ladder_5 = _2776;
            }
            _2889 = frontier_phi_55_56_ladder_5;
            _2891 = frontier_phi_55_56_ladder_4;
            _2893 = frontier_phi_55_56_ladder_3;
            _2895 = frontier_phi_55_56_ladder_2;
            _2897 = frontier_phi_55_56_ladder;
            _2899 = frontier_phi_55_56_ladder_1;
        }
        float _2904 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _2688 = (_2904 * _2895) + _2140;
        _2690 = (_2904 * _2897) + _2142;
        _2692 = (_2904 * _2899) + _2144;
        _2694 = ((_2889 * 0.039999999105930328369140625) * _2904) + _2473;
        _2696 = ((_2891 * 0.039999999105930328369140625) * _2904) + _2475;
        _2698 = ((_2893 * 0.039999999105930328369140625) * _2904) + _2477;
    }
    else
    {
        _2688 = _2140;
        _2690 = _2142;
        _2692 = _2144;
        _2694 = _2473;
        _2696 = _2475;
        _2698 = _2477;
    }
    float _4607 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4618 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4629 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    uint _2718 = _268 + 6u;
    float _2726 = _892 / cbSceneParam._m0[86u].x;
    float _2727 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _2802 = _2801 / _825;
        float _2813 = _2802 * _877;
        float _2814 = _878 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2817 = _2802 * _879;
        float _2819 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2820 = _2819 + cbSceneParam._m0[79u].w;
        float _2821 = cbSceneParam._m0[79u].w - _2814;
        float _2827 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2817 * _2817));
        float _2830 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2827;
        float _2835 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2837 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2815 - _2819) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2820 > 0.0) ? exp2(_2835 * _2820) : (2.0 - exp2(_2837 * _2820))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2830;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : max(_2820, _2821));
            float _2952 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : min(_2820, _2821));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _2990 = ((abs(_2827 / _2815) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2835 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2835 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2837 * _2961) - exp2(_2837 * _2962)) * _2950))) + (_2830 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2746);
        _2839 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2841 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2843 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2845 = _3001 * _2746;
    }
    else
    {
        _2839 = _2743;
        _2841 = _2744;
        _2843 = _2745;
        _2845 = _2746;
    }
    float _2857 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2858 = _2857 == 3.0;
    float _2859 = log2(_2845);
    float _2866 = exp2(_2859 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2688 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _955))) + ((_2694 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2867 = exp2(_2859 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2690 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _955))) + ((_2696 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2868 = exp2(_2859 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2692 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _955))) + ((_2698 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2877 = (_2857 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2877 * (_2858 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.y = _2877 * (_2858 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.z = _2877 * (_2858 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.w = cbInstanceData._m0[_2718].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
}


