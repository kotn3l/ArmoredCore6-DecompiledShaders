#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1557;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4142 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4153 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4164 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4175 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _472 = (_465 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _473 = (_465 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _474 = (_465 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _513 = _511.x;
    float _523 = dot(vec4(_513, _511.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _537 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_513 - _523) * cbMtdParam._m0[24u].z) + _523) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4186 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _545 = (_538 * ((_491.x * cbMtdParam._m0[13u].x) - _472)) + _472;
    float _546 = (_538 * ((_491.y * cbMtdParam._m0[13u].y) - _473)) + _473;
    float _547 = (_538 * ((_491.z * cbMtdParam._m0[13u].z) - _474)) + _474;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _584 = _582.x;
    float _594 = dot(vec4(_584, _582.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _606 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _395.z) * 2.0) - ((((_584 - _594) * cbMtdParam._m0[24u].z) + _594) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4197 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _614 = (_607 * ((_565.x * cbMtdParam._m0[14u].x) - _545)) + _545;
    float _615 = (_607 * ((_565.y * cbMtdParam._m0[14u].y) - _546)) + _546;
    float _616 = (_607 * ((_565.z * cbMtdParam._m0[14u].z) - _547)) + _547;
    float _620 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _614;
    float _623 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _615;
    float _626 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _616;
    float _633 = ((_614 - _620) * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) + _620;
    float _634 = ((_615 - _623) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) + _623;
    float _635 = ((_616 - _626) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) + _626;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = _712.x;
    float _715 = _712.y;
    float _716 = _712.z;
    float _723 = ((_695.x - _714) * _465) + _714;
    float _724 = ((_695.y - _715) * _465) + _715;
    float _725 = ((_695.z - _716) * _465) + _716;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _748 = ((_737.x - _723) * _538) + _723;
    float _749 = ((_737.y - _724) * _538) + _724;
    float _750 = ((_737.z - _725) * _538) + _725;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _775 = ((_762.z - _750) * _607) + _750;
    float _778 = ((((_762.x - _748) * _607) + _748) * 2.0) + (-1.0);
    float _779 = ((((_762.y - _749) * _607) + _749) * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _4208 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _824 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _826 = _824.x;
    float _827 = 1.0 - _826;
    float _833 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _836 = ((isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : min(_833, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _845 = (_836 - ((((((_826 - _827) * cbMtdParam._m0[24u].w) + _827) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _836))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4229 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _846 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _853 = (_846 * ((_653.x * cbMtdParam._m0[18u].x) - _633)) + _633;
    float _854 = (_846 * ((_653.y * cbMtdParam._m0[18u].y) - _634)) + _634;
    float _855 = (_846 * ((_653.z * cbMtdParam._m0[18u].z) - _635)) + _635;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _869 = _867.x;
    float _870 = 1.0 - _869;
    float _897 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_869 - _870) * cbMtdParam._m0[24u].y) + _870) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4240 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _898 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _906 = ((((cbMtdParam._m0[10u].x - _853) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _898) + _853;
    float _907 = ((((cbMtdParam._m0[10u].y - _854) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _898) + _854;
    float _908 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _855)) * _898) + _855;
    float _913 = (((_672.z - _775) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _775;
    float _917 = ((_799.z - _913) * cbMtdParam._m0[19u].w) + _913;
    vec4 _931 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _938 = (_931.x * 2.0) + (-1.0);
    float _939 = (_931.y * 2.0) + (-1.0);
    float _940 = dot(vec2(_938, _939), vec2(_938, _939));
    float _4251 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _948 = (_846 * (_931.z - _917)) + _917;
    float _951 = ((cbMtdParam._m0[23u].y - _948) * _898) + _948;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _976 = (_970.x * 2.0) + (-1.0);
    float _977 = (_970.y * 2.0) + (-1.0);
    float _978 = dot(vec2(_976, _977), vec2(_976, _977));
    float _4262 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _992 = (_778 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_672.x * 2.0) + (-1.0)))) + (((_799.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _993 = (_779 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_672.y * 2.0) + (-1.0)))) + (((_799.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1005 = (((_938 - _992) + (cbMtdParam._m0[21u].x * _992)) * _846) + _992;
    float _1006 = (((_939 - _993) + (cbMtdParam._m0[21u].x * _993)) * _846) + _993;
    float _1007 = (_846 * (sqrt(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) - _785)) + _785;
    float _1018 = (((_976 - _1005) + (_1005 * cbMtdParam._m0[22u].z)) * _898) + _1005;
    float _1019 = (((_977 - _1006) + (_1006 * cbMtdParam._m0[22u].z)) * _898) + _1006;
    float _1020 = ((sqrt(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) - _1007) * _898) + _1007;
    float _1022 = cbMtdParam._m0[22u].x + _799.w;
    float _1025 = fma(_1020, _261 * NORMAL.x, fma(_1019, _268 * TANGENT.x, (_254 * _246) * _1018));
    float _1028 = fma(_1020, _261 * NORMAL.y, fma(_1019, _268 * TANGENT.y, (_254 * _247) * _1018));
    float _1031 = fma(_1020, _261 * NORMAL.z, fma(_1019, _268 * TANGENT.z, (_254 * _248) * _1018));
    float _1035 = inversesqrt(dot(vec3(_1025, _1028, _1031), vec3(_1025, _1028, _1031)));
    float _1036 = _1035 * _1025;
    float _1037 = _1035 * _1028;
    float _1038 = _1035 * _1031;
    float _4273 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _1039 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4295 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4306 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4317 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _1057 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1108 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1098);
    float _1109 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1098);
    float _1110 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1098);
    float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
    float _1115 = _1108 * _1114;
    float _1116 = _1109 * _1114;
    float _1117 = _1110 * _1114;
    float _1123 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1124 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1142 = fma(_1038, cbSceneParam._m0[5u].z, fma(_1037, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1036));
    float _1145 = fma(_1038, cbSceneParam._m0[6u].z, fma(_1037, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1036));
    float _1148 = fma(_1038, cbSceneParam._m0[7u].z, fma(_1037, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1036));
    uint _1162 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1168 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * cbInstanceData._m0[_1162].x;
    float _1169 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * cbInstanceData._m0[_1162].y;
    float _1170 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbInstanceData._m0[_1162].z;
    float _4328 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    vec4 _1182 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1123, cbSceneParam._m0[86u].y * _1124));
    float _1186 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * TEXCOORD_5.w) * _1182.x;
    float _1187 = dot(vec3(_1036, _1037, _1038), vec3(_1115, _1116, _1117));
    float _1190 = _1187 * 2.0;
    float _1194 = (_1190 * _1036) - _1115;
    float _1195 = (_1190 * _1037) - _1116;
    float _1196 = (_1190 * _1038) - _1117;
    float _1200 = abs(dot(vec3(_1115, _1116, _1117), vec3(_1036, _1037, _1038)));
    float _4361 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1202 = sqrt(_1039);
    float _1215 = exp2((_1202 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1202 * 3.0));
    float _1247 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1556;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1281 = fma(_1255, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247));
        float _1285 = fma(_1255, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247));
        float _1289 = fma(_1255, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247));
        float _1314 = _1247 + _1036;
        float _1315 = _1251 + _1037;
        float _1316 = _1255 + _1038;
        float _1326 = fma(_1316, cbModelParam._m0[26u].z, fma(_1315, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1314)) - _1281;
        float _1327 = fma(_1316, cbModelParam._m0[27u].z, fma(_1315, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1314)) - _1285;
        float _1328 = fma(_1316, cbModelParam._m0[28u].z, fma(_1315, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1314)) - _1289;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1281 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1285 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[34u].z) + ((((((_1289 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1384 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1350.x + (-0.5));
        float _1386 = _1384 * (_1350.y + (-0.5));
        float _1387 = _1384 * (_1350.z + (-0.5));
        float _1394 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1357.x + (-0.5));
        float _1396 = _1394 * (_1357.y + (-0.5));
        float _1397 = _1394 * (_1357.z + (-0.5));
        float _1404 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1364.x + (-0.5));
        float _1406 = _1404 * (_1364.y + (-0.5));
        float _1407 = _1404 * (_1364.z + (-0.5));
        float _1414 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1371.x + (-0.5));
        float _1416 = _1414 * (_1371.y + (-0.5));
        float _1417 = _1414 * (_1371.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1438 = (dot(vec3(_1036, _1037, _1038), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1448 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4409 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1450 + 1.0))) + _1455) * _1418;
        float _1465 = _1386 * 0.5;
        float _1466 = _1396 * 0.5;
        float _1467 = _1406 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_1036, _1037, _1038), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4442 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1492 + 1.0))) + _1497) * _1419;
        float _1507 = _1387 * 0.5;
        float _1508 = _1397 * 0.5;
        float _1509 = _1407 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_1036, _1037, _1038), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4475 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1534 + 1.0))) + _1539) * _1420;
        _1556 = _1387;
        _1558 = _1386;
        _1559 = _1385;
        _1560 = _1397;
        _1561 = _1396;
        _1562 = _1395;
        _1563 = _1407;
        _1564 = _1406;
        _1565 = _1405;
        _1566 = _1420;
        _1567 = _1419;
        _1568 = _1418;
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1557;
        _1558 = _1557;
        _1559 = _1557;
        _1560 = _1557;
        _1561 = _1557;
        _1562 = _1557;
        _1563 = _1557;
        _1564 = _1557;
        _1565 = _1557;
        _1566 = _1557;
        _1567 = _1557;
        _1568 = _1557;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1594 = fma(_1255, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247));
        float _1598 = fma(_1255, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247));
        float _1602 = fma(_1255, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247));
        float _1625 = _1247 + _1036;
        float _1626 = _1251 + _1037;
        float _1627 = _1255 + _1038;
        float _1637 = fma(_1627, cbModelParam._m0[30u].z, fma(_1626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1625)) - _1594;
        float _1638 = fma(_1627, cbModelParam._m0[31u].z, fma(_1626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1625)) - _1598;
        float _1639 = fma(_1627, cbModelParam._m0[32u].z, fma(_1626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1625)) - _1602;
        float _1643 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
        float _1656 = ((_1643 * _1637) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1594 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1657 = ((_1643 * _1638) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1598 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1643 * _1639) / cbModelParam._m0[35u].z) + ((((((_1602 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        float _1693 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1660.x + (-0.5));
        float _1695 = _1693 * (_1660.y + (-0.5));
        float _1696 = _1693 * (_1660.z + (-0.5));
        float _1703 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1667.x + (-0.5));
        float _1705 = _1703 * (_1667.y + (-0.5));
        float _1706 = _1703 * (_1667.z + (-0.5));
        float _1713 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1674.x + (-0.5));
        float _1715 = _1713 * (_1674.y + (-0.5));
        float _1716 = _1713 * (_1674.z + (-0.5));
        float _1723 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1681.x + (-0.5));
        float _1725 = _1723 * (_1681.y + (-0.5));
        float _1726 = _1723 * (_1681.z + (-0.5));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = _1694 * 0.5;
        float _1731 = _1704 * 0.5;
        float _1732 = _1714 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_1036, _1037, _1038), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4538 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1757 + 1.0))) + _1762) * _1727;
        float _1772 = _1695 * 0.5;
        float _1773 = _1705 * 0.5;
        float _1774 = _1715 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1036, _1037, _1038), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4571 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1799 + 1.0))) + _1804) * _1728;
        float _1814 = _1696 * 0.5;
        float _1815 = _1706 * 0.5;
        float _1816 = _1716 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_1036, _1037, _1038), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4604 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1841 + 1.0))) + _1846) * _1729;
        _1863 = _1696;
        _1864 = _1695;
        _1865 = _1694;
        _1866 = _1706;
        _1867 = _1705;
        _1868 = _1704;
        _1869 = _1716;
        _1870 = _1715;
        _1871 = _1714;
        _1872 = _1729;
        _1873 = _1728;
        _1874 = _1727;
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
    }
    else
    {
        _1863 = _1557;
        _1864 = _1557;
        _1865 = _1557;
        _1866 = _1557;
        _1867 = _1557;
        _1868 = _1557;
        _1869 = _1557;
        _1870 = _1557;
        _1871 = _1557;
        _1872 = _1557;
        _1873 = _1557;
        _1874 = _1557;
        _1875 = 0.0;
        _1876 = 0.0;
        _1877 = 0.0;
    }
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1569)) + _1569;
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1570)) + _1570;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1571)) + _1571;
    float _1910 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1887));
    float _1931 = _1194 * 0.5;
    float _1932 = _1195 * 0.5;
    float _1933 = _1196 * 0.5;
    float _1934 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1937 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1940 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1974;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1947 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1556, _1560, _1563, _1566));
        float _1951 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1955 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1559, _1562, _1565, _1568));
        float _1962 = dot(vec4(cbModelParam._m0[39u]), vec4(_1931, _1932, _1933, 1.0));
        _1974 = dot(vec3(isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1962) ? 0.0 : (isnan(0.0) ? _1962 : max(0.0, _1962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1974 = 1.0;
    }
    float _1985;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1976 = dot(vec4(cbModelParam._m0[40u]), vec4(_1931, _1932, _1933, 1.0));
        _1985 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1976) ? 0.0 : (isnan(0.0) ? _1976 : max(0.0, _1976))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1985 = 1.0;
    }
    float _1989 = (_1985 * cbModelParam._m0[1u].x) + (_1974 * (1.0 - cbModelParam._m0[1u].x));
    float _1999 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1039);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1999 : min(cbModelParam._m0[25u].z, _1999));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2047 = fma(_1255, cbModelParam._m0[13u].z, fma(_1251, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1247)) + cbModelParam._m0[13u].w;
        float _2051 = fma(_1255, cbModelParam._m0[14u].z, fma(_1251, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1247)) + cbModelParam._m0[14u].w;
        float _2055 = fma(_1255, cbModelParam._m0[15u].z, fma(_1251, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1247)) + cbModelParam._m0[15u].w;
        float _2058 = fma(_1196, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194));
        float _2061 = fma(_1196, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194));
        float _2064 = fma(_1196, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194));
        float _2092;
        if (_2058 > 0.0)
        {
            _2092 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2092 = frontier_phi_14_12_ladder;
        }
        float _2261;
        if (_2061 > 0.0)
        {
            _2261 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2261 = frontier_phi_23_19_ladder;
        }
        float _2556;
        if (_2064 > 0.0)
        {
            _2556 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2556 = frontier_phi_35_30_ladder;
        }
        float _2558 = isnan(_2261) ? _2092 : (isnan(_2092) ? _2261 : min(_2092, _2261));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _2058) + _2047;
        float _2564 = (_2559 * _2061) + _2051;
        float _2565 = (_2559 * _2064) + _2055;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2566;
        float _2570 = _2566 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 > _2570) || ((_2564 < _2568) || ((_2563 < _2568) || (_2563 > _2570))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2565, cbModelParam._m0[9u].z, fma(_2564, cbModelParam._m0[9u].y, _2563 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2565, cbModelParam._m0[10u].z, fma(_2564, cbModelParam._m0[10u].y, _2563 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2565, cbModelParam._m0[11u].z, fma(_2564, cbModelParam._m0[11u].y, _2563 * cbModelParam._m0[11u].x))), _2000);
            frontier_phi_13_35_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2080 = frontier_phi_13_35_ladder_2;
        _2082 = frontier_phi_13_35_ladder_1;
        _2084 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1194, _1195, _1196), _2000);
        _2080 = _2068.x * cbModelParam._m0[1u].y;
        _2082 = _2068.y * cbModelParam._m0[1u].y;
        _2084 = _2068.z * cbModelParam._m0[1u].y;
    }
    float _2088 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1039);
    float _2089 = isnan(_2088) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2088 : min(cbModelParam._m0[25u].w, _2088));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2142 = fma(_1255, cbModelParam._m0[21u].z, fma(_1251, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1247)) + cbModelParam._m0[21u].w;
        float _2146 = fma(_1255, cbModelParam._m0[22u].z, fma(_1251, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1247)) + cbModelParam._m0[22u].w;
        float _2150 = fma(_1255, cbModelParam._m0[23u].z, fma(_1251, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1247)) + cbModelParam._m0[23u].w;
        float _2153 = fma(_1196, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194));
        float _2156 = fma(_1196, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194));
        float _2159 = fma(_1196, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194));
        float _2266;
        if (_2153 > 0.0)
        {
            _2266 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2266 = frontier_phi_25_21_ladder;
        }
        float _2583;
        if (_2156 > 0.0)
        {
            _2583 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2583 = frontier_phi_37_32_ladder;
        }
        float _2910;
        if (_2159 > 0.0)
        {
            _2910 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2910 = frontier_phi_47_44_ladder;
        }
        float _2912 = isnan(_2583) ? _2266 : (isnan(_2266) ? _2583 : min(_2266, _2583));
        float _2913 = isnan(_2910) ? _2912 : (isnan(_2912) ? _2910 : min(_2912, _2910));
        float _2917 = (_2913 * _2153) + _2142;
        float _2918 = (_2913 * _2156) + _2146;
        float _2919 = (_2913 * _2159) + _2150;
        float _2920 = _2913 * 9.9999997473787516355514526367188e-05;
        float _2921 = (-1.0) - _2920;
        float _2923 = _2920 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2919 > _2923) || ((_2919 < _2921) || ((_2918 > _2923) || ((_2918 < _2921) || ((_2917 < _2921) || (_2917 > _2923))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2919, cbModelParam._m0[17u].z, fma(_2918, cbModelParam._m0[17u].y, _2917 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2919, cbModelParam._m0[18u].z, fma(_2918, cbModelParam._m0[18u].y, _2917 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2919, cbModelParam._m0[19u].z, fma(_2918, cbModelParam._m0[19u].y, _2917 * cbModelParam._m0[19u].x))), _2089);
            frontier_phi_22_47_ladder = _3037.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3037.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3037.x * cbModelParam._m0[1u].z;
        }
        _2178 = frontier_phi_22_47_ladder_2;
        _2180 = frontier_phi_22_47_ladder_1;
        _2182 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1194, _1195, _1196), _2089);
        _2178 = _2162.x * cbModelParam._m0[1u].z;
        _2180 = _2162.y * cbModelParam._m0[1u].z;
        _2182 = _2162.z * cbModelParam._m0[1u].z;
    }
    float _2194 = ((((1.0 - _1215) * ((_1202 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1215 * _1202)) * _1186;
    float _2195 = _2194 * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2196 = _2194 * ((cbModelParam._m0[1u].w * (_2180 - _2082)) + _2082);
    float _2197 = _2194 * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2200 = fma(_2197, cbSceneParam._m0[89u].z, fma(_2196, cbSceneParam._m0[89u].y, _2195 * cbSceneParam._m0[89u].x));
    float _2203 = fma(_2197, cbSceneParam._m0[90u].z, fma(_2196, cbSceneParam._m0[90u].y, _2195 * cbSceneParam._m0[90u].x));
    float _2206 = fma(_2197, cbSceneParam._m0[91u].z, fma(_2196, cbSceneParam._m0[91u].y, _2195 * cbSceneParam._m0[91u].x));
    float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2248 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2253 = _2240 / _2252;
    float _2254 = _2244 / _2252;
    float _2255 = _2248 / _2252;
    float _2402;
    float _2403;
    float _2404;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2282 = ((uint(_2255 > cbSceneParam._m0[59u].y) + uint(_2255 > cbSceneParam._m0[59u].x)) + uint(_2255 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2283 = _2282 + 43u;
        uint _2291 = _2282 + 44u;
        uint _2299 = _2282 + 45u;
        uint _2307 = _2282 + 46u;
        float _2318 = fma(_2252, cbSceneParam._m0[_2283].w, fma(_2248, cbSceneParam._m0[_2283].z, fma(_2244, cbSceneParam._m0[_2283].y, _2240 * cbSceneParam._m0[_2283].x)));
        float _2322 = fma(_2252, cbSceneParam._m0[_2291].w, fma(_2248, cbSceneParam._m0[_2291].z, fma(_2244, cbSceneParam._m0[_2291].y, _2240 * cbSceneParam._m0[_2291].x)));
        float _2330 = fma(_2252, cbSceneParam._m0[_2307].w, fma(_2248, cbSceneParam._m0[_2307].z, fma(_2244, cbSceneParam._m0[_2307].y, _2240 * cbSceneParam._m0[_2307].x)));
        float _2335 = cbSceneParam._m0[33u].z * _2330;
        float _2337 = cbSceneParam._m0[33u].w * _2330;
        float _2340 = fma(_2252, cbSceneParam._m0[_2299].w, fma(_2248, cbSceneParam._m0[_2299].z, fma(_2244, cbSceneParam._m0[_2299].y, _2240 * cbSceneParam._m0[_2299].x))) / _2330;
        float _2388 = (cbSceneParam._m0[33u].x - sqrt(((_2254 * _2254) + (_2253 * _2253)) + (_2255 * _2255))) * cbSceneParam._m0[33u].y;
        float _4730 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2395 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2335 + _2318) / _2330, (_2337 + _2322) / _2330), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2337 + _2318) / _2330, (_2322 - _2335) / _2330), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2318 - _2335) / _2330, (_2322 - _2337) / _2330), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2318 - _2337) / _2330, (_2335 + _2322) / _2330), _2340), 0.0)).x), vec4(0.25)));
        _2402 = 1.0 - (_2395 * cbSceneParam._m0[34u].x);
        _2403 = 1.0 - (_2395 * cbSceneParam._m0[34u].y);
        _2404 = 1.0 - (_2395 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2402 = 1.0;
        _2403 = 1.0;
        _2404 = 1.0;
    }
    float _2468;
    float _2470;
    float _2472;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2456 = fma(_2252, cbSceneParam._m0[63u].w, fma(_2248, cbSceneParam._m0[63u].z, fma(_2244, cbSceneParam._m0[63u].y, _2240 * cbSceneParam._m0[63u].x)));
        float _2457 = fma(_2252, cbSceneParam._m0[60u].w, fma(_2248, cbSceneParam._m0[60u].z, fma(_2244, cbSceneParam._m0[60u].y, _2240 * cbSceneParam._m0[60u].x))) / _2456;
        float _2458 = fma(_2252, cbSceneParam._m0[61u].w, fma(_2248, cbSceneParam._m0[61u].z, fma(_2244, cbSceneParam._m0[61u].y, _2240 * cbSceneParam._m0[61u].x))) / _2456;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2457 >= cbSceneParam._m0[64u].x) && (_2458 >= cbSceneParam._m0[64u].y)) && (_2457 <= cbSceneParam._m0[64u].z)) && (_2458 <= cbSceneParam._m0[64u].w))
        {
            float _2596 = fma(_2252, cbSceneParam._m0[62u].w, fma(_2248, cbSceneParam._m0[62u].z, fma(_2244, cbSceneParam._m0[62u].y, _2240 * cbSceneParam._m0[62u].x))) / _2456;
            float _2600 = isnan(cbSceneParam._m0[41u].w) ? _2596 : (isnan(_2596) ? cbSceneParam._m0[41u].w : max(_2596, cbSceneParam._m0[41u].w));
            float _2643 = (cbSceneParam._m0[33u].x - sqrt(((_2254 * _2254) + (_2253 * _2253)) + (_2255 * _2255))) * cbSceneParam._m0[33u].y;
            float _4746 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
            float _2650 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2457, cbSceneParam._m0[33u].w + _2458), _2600), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2457, _2458 - cbSceneParam._m0[33u].z), _2600), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2457 - cbSceneParam._m0[33u].z, _2458 - cbSceneParam._m0[33u].w), _2600), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2457 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2458), _2600), 0.0)).x), vec4(0.25)));
            float _2654 = 1.0 - (_2650 * cbSceneParam._m0[34u].x);
            float _2655 = 1.0 - (_2650 * cbSceneParam._m0[34u].y);
            float _2656 = 1.0 - (_2650 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2656) ? _2404 : (isnan(_2404) ? _2656 : min(_2404, _2656));
            frontier_phi_34_33_ladder_1 = isnan(_2655) ? _2403 : (isnan(_2403) ? _2655 : min(_2403, _2655));
            frontier_phi_34_33_ladder_2 = isnan(_2654) ? _2402 : (isnan(_2402) ? _2654 : min(_2402, _2654));
        }
        else
        {
            frontier_phi_34_33_ladder = _2404;
            frontier_phi_34_33_ladder_1 = _2403;
            frontier_phi_34_33_ladder_2 = _2402;
        }
        _2468 = frontier_phi_34_33_ladder_2;
        _2470 = frontier_phi_34_33_ladder_1;
        _2472 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2468 = _2402;
        _2470 = _2403;
        _2472 = _2404;
    }
    uvec4 _2477 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2479 = _2477.x * 14u;
    uint _2480 = _2479 + 13u;
    float _2487 = _1186 + (-1.0);
    float _2492 = (cbLight._m0[_2480].x * _2487) + 1.0;
    float _2493 = (cbLight._m0[_2480].y * _2487) + 1.0;
    float _2494 = (cbLight._m0[_2480].z * _2487) + 1.0;
    float _2495 = (cbLight._m0[_2480].w * _2487) + 1.0;
    uint _2496 = _2479 + 5u;
    float _2502 = isnan(1.0) ? _2493 : (isnan(_2493) ? 1.0 : min(_2493, 1.0));
    uint _2506 = _2479 + 4u;
    float _2515 = isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0));
    uint _2519 = _2479 | 1u;
    float _2530 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_1036, _1037, _1038));
    float _2533 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_1036, _1037, _1038));
    float _4782 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _4793 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2538 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * 0.3183098733425140380859375;
    float _2540 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2547 = ((cbLight._m0[_2496].x * _2502) * _2540) + (((cbLight._m0[_2506].x * _2468) * _2515) * _2538);
    float _2548 = ((_2502 * cbLight._m0[_2496].y) * _2540) + (((cbLight._m0[_2506].y * _2470) * _2515) * _2538);
    float _2549 = ((_2502 * cbLight._m0[_2496].z) * _2540) + (((cbLight._m0[_2506].z * _2472) * _2515) * _2538);
    uvec4 _2553 = floatBitsToUint(cbLight._m0[_2479 + 12u]);
    bool _2555 = _2553.x == 0u;
    float _2657;
    float _2659;
    float _2661;
    if (_2555)
    {
        _2657 = _2547;
        _2659 = _2548;
        _2661 = _2549;
    }
    else
    {
        uint _2665 = _2479 + 6u;
        float _2681 = (dot(vec3(cbLight._m0[_2479 + 2u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2682 = _2681 * _2681;
        float _4804 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2683 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2684 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
        _2657 = (((cbLight._m0[_2665].x * 0.3183098733425140380859375) * _2683) * _2684) + _2547;
        _2659 = (((cbLight._m0[_2665].y * 0.3183098733425140380859375) * _2683) * _2684) + _2548;
        _2661 = (((cbLight._m0[_2665].z * 0.3183098733425140380859375) * _2683) * _2684) + _2549;
    }
    bool _2664 = _2553.y == 0u;
    float _2719;
    float _2721;
    float _2723;
    if (_2664)
    {
        _2719 = _2657;
        _2721 = _2659;
        _2723 = _2661;
    }
    else
    {
        uint _2881 = _2479 + 7u;
        float _2897 = (dot(vec3(cbLight._m0[_2479 + 3u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2898 = _2897 * _2897;
        float _4820 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2899 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2900 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
        _2719 = (((cbLight._m0[_2881].x * 0.3183098733425140380859375) * _2899) * _2900) + _2657;
        _2721 = (((cbLight._m0[_2881].y * 0.3183098733425140380859375) * _2899) * _2900) + _2659;
        _2723 = (((cbLight._m0[_2881].z * 0.3183098733425140380859375) * _2899) * _2900) + _2661;
    }
    uint _2726 = _2479 + 8u;
    float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _1039) * 0.949999988079071044921875);
    float _2740 = _2739 * _2739;
    float _2741 = cbLight._m0[_2479].x + _1115;
    float _2742 = cbLight._m0[_2479].y + _1116;
    float _2743 = cbLight._m0[_2479].z + _1117;
    float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
    float _2748 = _2747 * _2741;
    float _2749 = _2747 * _2742;
    float _2750 = _2747 * _2743;
    float _2751 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2479].xyz));
    float _4836 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _4847 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _2755 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2756 = dot(vec3(_1036, _1037, _1038), vec3(_2748, _2749, _2750));
    float _4858 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2760 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2748, _2749, _2750));
    float _4869 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2764 = _2740 * _2740;
    float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
    float _2779 = (exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2780 = 1.0 - _2740;
    float _2791 = (0.5 / (((_2755 * ((_2754 * _2780) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2780) + _2740) * _2754))) * _2754;
    float _4880 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2793 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
    uint _2807 = _2479 + 9u;
    float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _1039) * 0.949999988079071044921875);
    float _2819 = _2818 * _2818;
    float _2820 = cbLight._m0[_2519].x + _1115;
    float _2821 = cbLight._m0[_2519].y + _1116;
    float _2822 = cbLight._m0[_2519].z + _1117;
    float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
    float _2827 = _2826 * _2820;
    float _2828 = _2826 * _2821;
    float _2829 = _2826 * _2822;
    float _2830 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2519].xyz));
    float _4891 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2833 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2834 = dot(vec3(_1036, _1037, _1038), vec3(_2827, _2828, _2829));
    float _4902 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2837 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2838 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2827, _2828, _2829));
    float _4913 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2842 = _2819 * _2819;
    float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
    float _2855 = (exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2856 = 1.0 - _2819;
    float _2866 = (0.5 / (((_2755 * ((_2833 * _2856) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2856) + _2819) * _2833))) * _2833;
    float _4924 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2868 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
    float _2878 = (((_2855 * cbLight._m0[_2807].x) * _2868) * _2502) + ((((cbLight._m0[_2726].x * _2468) * _2779) * _2793) * _2515);
    float _2879 = (((_2855 * cbLight._m0[_2807].y) * _2868) * _2502) + ((((cbLight._m0[_2726].y * _2470) * _2779) * _2793) * _2515);
    float _2880 = (((_2855 * cbLight._m0[_2807].z) * _2868) * _2502) + ((((cbLight._m0[_2726].z * _2472) * _2779) * _2793) * _2515);
    float _2936;
    float _2938;
    float _2940;
    if (_2555)
    {
        _2936 = _2878;
        _2938 = _2879;
        _2940 = _2880;
    }
    else
    {
        uint _2942 = _2479 + 2u;
        uint _2946 = _2479 + 10u;
        float _2960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2942].w)) * _1039) * 0.949999988079071044921875);
        float _2961 = _2960 * _2960;
        float _2962 = cbLight._m0[_2942].x + _1115;
        float _2963 = cbLight._m0[_2942].y + _1116;
        float _2964 = cbLight._m0[_2942].z + _1117;
        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
        float _2969 = _2968 * _2962;
        float _2970 = _2968 * _2963;
        float _2971 = _2968 * _2964;
        float _2972 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2942].xyz));
        float _4935 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2976 = dot(vec3(_1036, _1037, _1038), vec3(_2969, _2970, _2971));
        float _4946 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2980 = dot(vec3(cbLight._m0[_2942].xyz), vec3(_2969, _2970, _2971));
        float _4957 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2984 = _2961 * _2961;
        float _2988 = ((_2979 * _2979) * (_2984 + (-1.0))) + 1.0;
        float _2997 = (exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2998 = 1.0 - _2961;
        float _3008 = (0.5 / (((_2755 * ((_2975 * _2998) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2998) + _2961) * _2975))) * _2975;
        float _4968 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3010 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2984 / ((_2988 * _2988) * 3.141590118408203125));
        float _3011 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
        _2936 = (((_2997 * cbLight._m0[_2946].x) * _3010) * _3011) + _2878;
        _2938 = (((_2997 * cbLight._m0[_2946].y) * _3010) * _3011) + _2879;
        _2940 = (((_2997 * cbLight._m0[_2946].z) * _3010) * _3011) + _2880;
    }
    float _3042;
    float _3044;
    float _3046;
    if (_2664)
    {
        _3042 = _2936;
        _3044 = _2938;
        _3046 = _2940;
    }
    else
    {
        uint _3053 = _2479 + 3u;
        uint _3057 = _2479 + 11u;
        float _3071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3053].w)) * _1039) * 0.949999988079071044921875);
        float _3072 = _3071 * _3071;
        float _3073 = cbLight._m0[_3053].x + _1115;
        float _3074 = cbLight._m0[_3053].y + _1116;
        float _3075 = cbLight._m0[_3053].z + _1117;
        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
        float _3080 = _3079 * _3073;
        float _3081 = _3079 * _3074;
        float _3082 = _3079 * _3075;
        float _3083 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_3053].xyz));
        float _4984 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3086 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _3087 = dot(vec3(_1036, _1037, _1038), vec3(_3080, _3081, _3082));
        float _4995 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3090 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _3091 = dot(vec3(cbLight._m0[_3053].xyz), vec3(_3080, _3081, _3082));
        float _5006 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3095 = _3072 * _3072;
        float _3099 = ((_3090 * _3090) * (_3095 + (-1.0))) + 1.0;
        float _3108 = (exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3109 = 1.0 - _3072;
        float _3119 = (0.5 / (((_2755 * ((_3086 * _3109) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _3109) + _3072) * _3086))) * _3086;
        float _5017 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        float _3121 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3095 / ((_3099 * _3099) * 3.141590118408203125));
        float _3122 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
        _3042 = (((_3108 * cbLight._m0[_3057].x) * _3121) * _3122) + _2936;
        _3044 = (((_3108 * cbLight._m0[_3057].y) * _3121) * _3122) + _2938;
        _3046 = (((_3108 * cbLight._m0[_3057].z) * _3121) * _3122) + _2940;
    }
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    if (_2477.y == 0u)
    {
        uvec4 _3143 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3144 = _3143.x;
        uint _3155 = uint((float(_3143.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1124) / _3144))) + floor(float(uint(cbSceneParam._m0[85u].x * _1123) / _3144)));
        float _3165 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3166 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
        uint _3169 = uint(isnan(14.0) ? _3166 : (isnan(_3166) ? 14.0 : min(_3166, 14.0)));
        uvec4 _3174 = texelFetch(g_lightClusterGridBuffer, int(((_3169 << 2u) + (_3155 << 6u)) >> 2u));
        uint _3175 = _3174.x;
        uint _3176 = _3143.z;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        if (((((1u << ((_3176 >> 4u) & 15u)) + 4294967295u) & _3175) == 0u) || ((_3176 & 240u) == 0u))
        {
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
            _3263 = 0.0;
            _3265 = 0.0;
        }
        else
        {
            float _3256;
            float _3258;
            float _3260;
            float _3262;
            float _3264;
            float _3266;
            float _3400 = 0.0;
            float _3401 = 0.0;
            float _3402 = 0.0;
            float _3403 = 0.0;
            float _3404 = 0.0;
            float _3405 = 0.0;
            uint _3406 = 0u;
            uint _3415;
            bool _3416;
            for (;;)
            {
                _3415 = texelFetch(g_lightClassification, int((((_3169 << 5u) + (_3155 << 9u)) + (_3406 << 2u)) >> 2u)).x;
                _3416 = _3415 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3416)
                {
                    frontier_phi_66_pred = _3405;
                    frontier_phi_66_pred_1 = _3404;
                    frontier_phi_66_pred_2 = _3403;
                    frontier_phi_66_pred_3 = _3402;
                    frontier_phi_66_pred_4 = _3401;
                    frontier_phi_66_pred_5 = _3400;
                }
                else
                {
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    uint _3530;
                    _3524 = _3400;
                    _3525 = _3401;
                    _3526 = _3402;
                    _3527 = _3403;
                    _3528 = _3404;
                    _3529 = _3405;
                    _3530 = _3415;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    for (;;)
                    {
                        uint _3534 = uint(findLSB(_3530)) + (_3406 << 5u);
                        uint _3531 = (_3530 + 4294967295u) & _3530;
                        uint _3536 = _3534 * 48u;
                        vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 3u)).x));
                        uint _3556 = (_3534 * 48u) + 4u;
                        vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3556)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 3u)).x));
                        uint _3575 = (_3534 * 48u) + 8u;
                        vec3 _3586 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3575)).x, texelFetch(g_PointLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3575 + 2u)).x));
                        float _3590 = _3550.x - _2253;
                        float _3591 = _3550.y - _2254;
                        float _3592 = _3550.z - _2255;
                        float _3593 = dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592));
                        float _3596 = inversesqrt(_3593);
                        float _3597 = _3596 * _3590;
                        float _3598 = _3596 * _3591;
                        float _3599 = _3596 * _3592;
                        float _3600 = dot(vec3(_1142, _1145, _1148), vec3(_3597, _3598, _3599));
                        float _3605 = 1.0 - (_3593 * _3550.w);
                        float _5043 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3606 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3607 = sqrt(_3593) * _3569.w;
                        float _3610 = 1.39999997615814208984375 / (_3607 + 1.39999997615814208984375);
                        float _3611 = _3610 * _3610;
                        float _3614 = ((1.0 - _3611) * _3600) + _3611;
                        float _3617 = _3607 * _3607;
                        float _3621 = ((isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0))) * _3606) / ((_3617 * 0.699999988079071044921875) + 1.0);
                        float _3625 = (-0.0) - _2253;
                        float _3626 = (-0.0) - _2254;
                        float _3627 = (-0.0) - _2255;
                        float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                        float _3632 = _3631 * _3625;
                        float _3633 = _3631 * _3626;
                        float _3634 = _3631 * _3627;
                        float _3641 = exp2(log2(1.0 / ((_3617 * 3.5) + 5.0)) * 0.25);
                        float _3642 = 1.0 - _1202;
                        float _3649 = sqrt(1.0 - ((1.0 - (_3642 * _3642)) * (1.0 - (_3641 * _3641))));
                        float _3650 = _3649 * _3649;
                        float _3651 = _3650 * _3650;
                        float _3652 = _3632 + _3597;
                        float _3653 = _3633 + _3598;
                        float _3654 = _3634 + _3599;
                        float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                        float _3662 = dot(vec3(_1142, _1145, _1148), vec3(_3632, _3633, _3634));
                        float _5059 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3665 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3666 = dot(vec3(_1142, _1145, _1148), vec3(_3658 * _3652, _3658 * _3653, _3658 * _3654));
                        float _5070 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                        float _3669 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3673 = ((_3669 * _3669) * (_3651 + (-1.0))) + 1.0;
                        float _3674 = _3610 * _3650;
                        float _3675 = _3674 * _3674;
                        float _3678 = ((1.0 - _3675) * _3600) + _3675;
                        float _5081 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3679 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3680 = 1.0 - _3650;
                        float _3690 = (0.5 / (((_3679 * ((_3665 * _3680) + _3650)) + 9.9999999392252902907785028219223e-09) + (((_3679 * _3680) + _3650) * _3665))) * _3679;
                        float _5092 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3701 = (((_3651 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3673 * _3673) * ((_3617 * 2.1991131305694580078125) + 3.141590118408203125))) * _3606;
                        _3459 = (_3621 * _3569.x) + _3527;
                        _3460 = (_3621 * _3569.y) + _3528;
                        _3461 = (_3621 * _3569.z) + _3529;
                        _3456 = (_3701 * _3586.x) + _3524;
                        _3457 = (_3701 * _3586.y) + _3525;
                        _3458 = (_3701 * _3586.z) + _3526;
                        if (_3531 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3524 = _3456;
                            _3525 = _3457;
                            _3526 = _3458;
                            _3527 = _3459;
                            _3528 = _3460;
                            _3529 = _3461;
                            _3530 = _3531;
                        }
                    }
                    frontier_phi_66_pred = _3461;
                    frontier_phi_66_pred_1 = _3460;
                    frontier_phi_66_pred_2 = _3459;
                    frontier_phi_66_pred_3 = _3458;
                    frontier_phi_66_pred_4 = _3457;
                    frontier_phi_66_pred_5 = _3456;
                }
                _3266 = frontier_phi_66_pred;
                _3264 = frontier_phi_66_pred_1;
                _3262 = frontier_phi_66_pred_2;
                _3260 = frontier_phi_66_pred_3;
                _3258 = frontier_phi_66_pred_4;
                _3256 = frontier_phi_66_pred_5;
                uint _3407 = _3406 + 1u;
                if (_3407 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3400 = _3256;
                    _3401 = _3258;
                    _3402 = _3260;
                    _3403 = _3262;
                    _3404 = _3264;
                    _3405 = _3266;
                    _3406 = _3407;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
            _3263 = _3264;
            _3265 = _3266;
        }
        uvec4 _3269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3270 = _3269.z;
        uint _3272 = (_3270 >> 8u) & 15u;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        float _3376;
        float _3378;
        if (((4294967295u << _3272) & _3175) == 0u)
        {
            _3368 = _3255;
            _3370 = _3257;
            _3372 = _3259;
            _3374 = _3261;
            _3376 = _3263;
            _3378 = _3265;
        }
        else
        {
            float _3393 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _3394 = _3393 * _2253;
            float _3395 = _3393 * _2254;
            float _3396 = _3393 * _2255;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3272 < ((_3270 >> 12u) & 15u))
            {
                float _3369;
                float _3371;
                float _3373;
                float _3375;
                float _3377;
                float _3379;
                float _3507 = _3255;
                float _3508 = _3257;
                float _3509 = _3259;
                float _3510 = _3261;
                float _3511 = _3263;
                float _3512 = _3265;
                uint _3513 = _3272;
                uint _3522;
                bool _3523;
                for (;;)
                {
                    _3522 = texelFetch(g_lightClassification, int((((_3169 << 5u) + (_3155 << 9u)) + (_3513 << 2u)) >> 2u)).x;
                    _3523 = _3522 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3523)
                    {
                        frontier_phi_72_pred = _3512;
                        frontier_phi_72_pred_1 = _3511;
                        frontier_phi_72_pred_2 = _3510;
                        frontier_phi_72_pred_3 = _3509;
                        frontier_phi_72_pred_4 = _3508;
                        frontier_phi_72_pred_5 = _3507;
                    }
                    else
                    {
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _3719 = _3507;
                        float _3720 = _3508;
                        float _3721 = _3509;
                        float _3722 = _3510;
                        float _3723 = _3511;
                        float _3724 = _3512;
                        uint _3725 = _3522;
                        uint _3726;
                        vec4 _3751;
                        float _3752;
                        vec4 _3767;
                        vec3 _3779;
                        vec4 _3794;
                        vec4 _3809;
                        float _3855;
                        bool _3856;
                        for (;;)
                        {
                            uint _3736 = ((_3513 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3725));
                            _3726 = (_3725 + 4294967295u) & _3725;
                            uint _3738 = _3736 * 40u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3752 = _3751.w;
                            uint _3754 = (_3736 * 40u) + 4u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3736 * 40u) + 8u;
                            _3779 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x));
                            uint _3781 = (_3736 * 40u) + 16u;
                            _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3796 = (_3736 * 40u) + 20u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3811 = (_3736 * 40u) + 24u;
                            vec4 _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            uint _3830 = (_3736 * 40u) + 28u;
                            vec4 _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            _3855 = fma(_2255, _3843.z, fma(_2254, _3843.y, _3843.x * _2253)) + _3843.w;
                            _3856 = !((fma(_2255, _3824.z, fma(_2254, _3824.y, _3824.x * _2253)) + _3824.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3856)
                            {
                                float _3883 = _3751.x - _2253;
                                float _3884 = _3751.y - _2254;
                                float _3885 = _3751.z - _2255;
                                float _3886 = dot(vec3(_3883, _3884, _3885), vec3(_3883, _3884, _3885));
                                float _3889 = inversesqrt(_3886);
                                float _3890 = _3889 * _3883;
                                float _3891 = _3889 * _3884;
                                float _3892 = _3889 * _3885;
                                float _3896 = 1.0 - (_3886 / (_3752 * _3752));
                                float _5103 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3897 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3901 = sqrt(_3886) * _3767.w;
                                float _3903 = 1.39999997615814208984375 / (_3901 + 1.39999997615814208984375);
                                float _3904 = _3903 * _3903;
                                float _3907 = ((1.0 - _3904) * dot(vec3(_3890, _3891, _3892), vec3(_1142, _1145, _1148))) + _3904;
                                float _3910 = _3901 * _3901;
                                float _3914 = (fma(_2255, _3794.z, fma(_2254, _3794.y, _3794.x * _2253)) + _3794.w) / _3855;
                                float _3915 = (fma(_2255, _3809.z, fma(_2254, _3809.y, _3809.x * _2253)) + _3809.w) / _3855;
                                float _3919 = 1.0 - dot(vec2(_3914, _3915), vec2(_3914, _3915));
                                float _5119 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3920 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3921 = _3920 * (((isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0))) * _3897) / ((_3910 * 0.699999988079071044921875) + 1.0));
                                float _3933 = exp2(log2(1.0 / ((_3910 * 3.5) + 5.0)) * 0.25);
                                float _3934 = 1.0 - _1202;
                                float _3941 = sqrt(1.0 - ((1.0 - (_3934 * _3934)) * (1.0 - (_3933 * _3933))));
                                float _3942 = _3941 * _3941;
                                float _3943 = _3942 * _3942;
                                float _3944 = _3890 - _3394;
                                float _3945 = _3891 - _3395;
                                float _3946 = _3892 - _3396;
                                float _3950 = inversesqrt(dot(vec3(_3944, _3945, _3946), vec3(_3944, _3945, _3946)));
                                float _3954 = dot(vec3(_1142, _1145, _1148), vec3((-0.0) - _3394, (-0.0) - _3395, (-0.0) - _3396));
                                float _5130 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3957 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3958 = dot(vec3(_1142, _1145, _1148), vec3(_3950 * _3944, _3950 * _3945, _3950 * _3946));
                                float _5141 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3961 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3965 = ((_3961 * _3961) * (_3943 + (-1.0))) + 1.0;
                                float _3966 = _3903 * _3942;
                                float _3967 = _3966 * _3966;
                                float _3973 = ((1.0 - _3967) * dot(vec3(_1142, _1145, _1148), vec3(_3890, _3891, _3892))) + _3967;
                                float _5152 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3974 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3975 = 1.0 - _3942;
                                float _3985 = (0.5 / (((_3974 * ((_3957 * _3975) + _3942)) + 9.9999999392252902907785028219223e-09) + (((_3974 * _3975) + _3942) * _3957))) * _3974;
                                float _5163 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3995 = (_3920 * _3897) * (((_3943 * 3.1415927410125732421875) * (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) / ((_3965 * _3965) * ((_3910 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3921 * _3767.y;
                                frontier_phi_78_pred_1 = _3921 * _3767.x;
                                frontier_phi_78_pred_2 = _3995 * _3779.z;
                                frontier_phi_78_pred_3 = _3995 * _3779.y;
                                frontier_phi_78_pred_4 = _3995 * _3779.x;
                                frontier_phi_78_pred_5 = _3921 * _3767.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4003 = frontier_phi_78_pred;
                            _4002 = frontier_phi_78_pred_1;
                            _4001 = frontier_phi_78_pred_2;
                            _4000 = frontier_phi_78_pred_3;
                            _3999 = frontier_phi_78_pred_4;
                            _4004 = frontier_phi_78_pred_5;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3711 = _4004 + _3724;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3708 = _4001 + _3721;
                            if (_3726 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3726;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3711;
                        frontier_phi_72_pred_1 = _3710;
                        frontier_phi_72_pred_2 = _3709;
                        frontier_phi_72_pred_3 = _3708;
                        frontier_phi_72_pred_4 = _3707;
                        frontier_phi_72_pred_5 = _3706;
                    }
                    _3379 = frontier_phi_72_pred;
                    _3377 = frontier_phi_72_pred_1;
                    _3375 = frontier_phi_72_pred_2;
                    _3373 = frontier_phi_72_pred_3;
                    _3371 = frontier_phi_72_pred_4;
                    _3369 = frontier_phi_72_pred_5;
                    uint _3514 = _3513 + 1u;
                    if (_3514 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3507 = _3369;
                        _3508 = _3371;
                        _3509 = _3373;
                        _3510 = _3375;
                        _3511 = _3377;
                        _3512 = _3379;
                        _3513 = _3514;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3379;
                frontier_phi_60_61_ladder_1 = _3377;
                frontier_phi_60_61_ladder_2 = _3373;
                frontier_phi_60_61_ladder_3 = _3371;
                frontier_phi_60_61_ladder_4 = _3369;
                frontier_phi_60_61_ladder_5 = _3375;
            }
            else
            {
                frontier_phi_60_61_ladder = _3265;
                frontier_phi_60_61_ladder_1 = _3263;
                frontier_phi_60_61_ladder_2 = _3259;
                frontier_phi_60_61_ladder_3 = _3257;
                frontier_phi_60_61_ladder_4 = _3255;
                frontier_phi_60_61_ladder_5 = _3261;
            }
            _3368 = frontier_phi_60_61_ladder_4;
            _3370 = frontier_phi_60_61_ladder_3;
            _3372 = frontier_phi_60_61_ladder_2;
            _3374 = frontier_phi_60_61_ladder_5;
            _3376 = frontier_phi_60_61_ladder_1;
            _3378 = frontier_phi_60_61_ladder;
        }
        float _3383 = isnan(1.0) ? _1186 : (isnan(_1186) ? 1.0 : min(_1186, 1.0));
        _3188 = (_3383 * _3374) + _2719;
        _3190 = (_3383 * _3376) + _2721;
        _3192 = (_3383 * _3378) + _2723;
        _3194 = ((_3368 * 0.039999999105930328369140625) * _3383) + _3042;
        _3196 = ((_3370 * 0.039999999105930328369140625) * _3383) + _3044;
        _3198 = ((_3372 * 0.039999999105930328369140625) * _3383) + _3046;
    }
    else
    {
        _3188 = _2719;
        _3190 = _2721;
        _3192 = _2723;
        _3194 = _3042;
        _3196 = _3044;
        _3198 = _3046;
    }
    float _5179 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _5190 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _5201 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    uint _3218 = _293 + 6u;
    float _3226 = _1123 / cbSceneParam._m0[86u].x;
    float _3227 = _1124 / cbSceneParam._m0[86u].y;
    vec4 _3241 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, (log2((isnan(cbSceneParam._m0[77u].w) ? _1057 : (isnan(_1057) ? cbSceneParam._m0[77u].w : min(_1057, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3243 = _3241.x;
    float _3244 = _3241.y;
    float _3245 = _3241.z;
    float _3246 = _3241.w;
    float _3318;
    float _3320;
    float _3322;
    float _3324;
    if (_1057 > cbSceneParam._m0[78u].w)
    {
        float _3280 = isnan(_1057) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1057 : min(cbSceneParam._m0[80u].w, _1057));
        float _3281 = _3280 / _1057;
        float _3292 = _3281 * _1108;
        float _3293 = _1109 * _3281;
        float _3294 = (-0.0) - _3293;
        float _3296 = _3281 * _1110;
        float _3298 = (cbSceneParam._m0[77u].w * _3294) / _3280;
        float _3299 = _3298 + cbSceneParam._m0[79u].w;
        float _3300 = cbSceneParam._m0[79u].w - _3293;
        float _3306 = sqrt(((_3292 * _3292) + (_3293 * _3293)) + (_3296 * _3296));
        float _3309 = (1.0 - (cbSceneParam._m0[77u].w / _3280)) * _3306;
        float _3314 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3316 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3469;
        if (abs((_3294 - _3298) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3469 = ((((_3299 > 0.0) ? exp2(_3314 * _3299) : (2.0 - exp2(_3316 * _3299))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3309;
        }
        else
        {
            float _3429 = 1.0 / cbSceneParam._m0[80u].x;
            float _3430 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : max(_3299, _3300));
            float _3431 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : min(_3299, _3300));
            float _3440 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : min(_3430, 0.0));
            float _3441 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : min(_3431, 0.0));
            _3469 = ((abs(_3306 / _3294) * cbSceneParam._m0[80u].y) * ((((_3440 - _3441) * 2.0) - ((exp2(_3314 * (isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0)))) - exp2(_3314 * (isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))))) * _3429)) - ((exp2(_3316 * _3440) - exp2(_3316 * _3441)) * _3429))) + (_3309 * cbSceneParam._m0[80u].z);
        }
        vec4 _3471 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, 1.0), 0.0);
        float _3480 = exp2((_3469 * (-1.44269502162933349609375)) * (1.0 - _3471.w));
        float _3481 = log2(_3480);
        float _3497 = log2(_3246);
        _3318 = (exp2(_3497 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].x)) * _3471.x) / cbSceneParam._m0[78u].x)) + _3243;
        _3320 = (exp2(_3497 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].y)) * _3471.y) / cbSceneParam._m0[78u].y)) + _3244;
        _3322 = (exp2(_3497 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].z)) * _3471.z) / cbSceneParam._m0[78u].z)) + _3245;
        _3324 = _3480 * _3246;
    }
    else
    {
        _3318 = _3243;
        _3320 = _3244;
        _3322 = _3245;
        _3324 = _3246;
    }
    float _3336 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3337 = _3336 == 3.0;
    float _3338 = log2(_3324);
    float _3345 = exp2(_3338 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3188 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1186))) + ((_3194 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1989)) * cbPerFrame._m0[3u].x));
    float _3346 = exp2(_3338 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3190 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1186))) + ((_3196 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1989)) * cbPerFrame._m0[3u].x));
    float _3347 = exp2(_3338 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3192 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1186))) + ((_3198 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1989)) * cbPerFrame._m0[3u].x));
    float _3356 = (_3336 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3356 * (_3337 ? _3345 : (_3345 + (cbSceneParam._m0[72u].w * _3318)));
    SV_Target.y = _3356 * (_3337 ? _3346 : (_3346 + (cbSceneParam._m0[72u].w * _3320)));
    SV_Target.z = _3356 * (_3337 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3322)));
    SV_Target.w = cbInstanceData._m0[_3218].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3218].w;
}


