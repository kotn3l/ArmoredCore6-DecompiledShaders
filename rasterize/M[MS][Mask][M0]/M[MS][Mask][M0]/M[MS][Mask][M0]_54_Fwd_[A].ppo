#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1289;
float _3650;
float _3651;
float _3652;
float _3653;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3662 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3673 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3684 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _432 = _430.x;
    float _444 = dot(vec4(_432, _430.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _461 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_432 - _444) * cbMtdParam._m0[24u].z) + _444) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3695 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _469 = (_462 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _470 = (_462 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _471 = (_462 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _488 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _510 = _508.x;
    float _520 = dot(vec4(_510, _508.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _534 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_510 - _520) * cbMtdParam._m0[24u].z) + _520) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3706 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _545 = (_324.x * cbMtdParam._m0[9u].x) * ((_535 * ((_488.x * cbMtdParam._m0[13u].x) - _469)) + _469);
    float _546 = (_324.y * cbMtdParam._m0[9u].y) * ((_535 * ((_488.y * cbMtdParam._m0[13u].y) - _470)) + _470);
    float _547 = (_324.z * cbMtdParam._m0[9u].z) * ((_535 * ((_488.z * cbMtdParam._m0[13u].z) - _471)) + _471);
    float _551 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _545;
    float _554 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _546;
    float _557 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _547;
    float _565 = (((_545 - _551) * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) + _551) * 4.55000019073486328125;
    float _567 = (((_546 - _554) * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) + _554) * 4.55000019073486328125;
    float _569 = (((_547 - _557) * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) + _557) * 4.55000019073486328125;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _625 = _621.z;
    float _632 = ((_604.x - _623) * _462) + _623;
    float _633 = ((_604.y - _624) * _462) + _624;
    float _634 = ((_604.z - _625) * _462) + _625;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _659 = ((_646.z - _634) * _535) + _634;
    float _662 = ((((_646.x - _632) * _535) + _632) * 2.0) + (-1.0);
    float _663 = ((((_646.y - _633) * _535) + _633) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3717 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _701 = (_662 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_581.x * 2.0) + (-1.0)))) + (((_689.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _702 = (_663 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_581.y * 2.0) + (-1.0)))) + (((_689.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _707 = (((_581.z - _659) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _659;
    float _711 = ((_689.z - _707) * cbMtdParam._m0[19u].w) + _707;
    float _713 = cbMtdParam._m0[22u].x + _689.w;
    float _716 = fma(_669, _234 * NORMAL.x, fma(_702, _241 * TANGENT.x, (_227 * _219) * _701));
    float _719 = fma(_669, _234 * NORMAL.y, fma(_702, _241 * TANGENT.y, (_227 * _220) * _701));
    float _722 = fma(_669, _234 * NORMAL.z, fma(_702, _241 * TANGENT.z, (_227 * _221) * _701));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _3728 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _730 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3750 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3761 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3772 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    vec4 _813 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _815 = _813.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_799 * _799) + (_800 * _800)) + (_801 * _801));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3783 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3794 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) - _976)) + _976) < ((_815 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _845 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _848 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _851 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _864 = _268 + 9u;
    uint _865 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_865].z;
    float _3805 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _889 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * TEXCOORD_5.w) * _885.x;
    float _890 = dot(vec3(_727, _728, _729), vec3(_806, _807, _808));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _727) - _806;
    float _898 = (_893 * _728) - _807;
    float _899 = (_893 * _729) - _808;
    float _903 = abs(dot(vec3(_806, _807, _808), vec3(_727, _728, _729)));
    float _3838 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_730);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1288;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1013 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1017 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1021 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1046 = _950 + _727;
        float _1047 = _954 + _728;
        float _1048 = _958 + _729;
        float _1058 = fma(_1048, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046)) - _1013;
        float _1059 = fma(_1048, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046)) - _1017;
        float _1060 = fma(_1048, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046)) - _1021;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1013 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1017 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[34u].z) + ((((((_1021 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1116 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1082.x + (-0.5));
        float _1118 = _1116 * (_1082.y + (-0.5));
        float _1119 = _1116 * (_1082.z + (-0.5));
        float _1126 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1089.x + (-0.5));
        float _1128 = _1126 * (_1089.y + (-0.5));
        float _1129 = _1126 * (_1089.z + (-0.5));
        float _1136 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1096.x + (-0.5));
        float _1138 = _1136 * (_1096.y + (-0.5));
        float _1139 = _1136 * (_1096.z + (-0.5));
        float _1146 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1103.x + (-0.5));
        float _1148 = _1146 * (_1103.y + (-0.5));
        float _1149 = _1146 * (_1103.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1170 = (dot(vec3(_727, _728, _729), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1180 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3886 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1182 + 1.0))) + _1187) * _1150;
        float _1197 = _1118 * 0.5;
        float _1198 = _1128 * 0.5;
        float _1199 = _1138 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_727, _728, _729), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3919 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1224 + 1.0))) + _1229) * _1151;
        float _1239 = _1119 * 0.5;
        float _1240 = _1129 * 0.5;
        float _1241 = _1139 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_727, _728, _729), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3952 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1266 + 1.0))) + _1271) * _1152;
        _1288 = _1119;
        _1290 = _1118;
        _1291 = _1117;
        _1292 = _1129;
        _1293 = _1128;
        _1294 = _1127;
        _1295 = _1139;
        _1296 = _1138;
        _1297 = _1137;
        _1298 = _1152;
        _1299 = _1151;
        _1300 = _1150;
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _1289;
        _1290 = _1289;
        _1291 = _1289;
        _1292 = _1289;
        _1293 = _1289;
        _1294 = _1289;
        _1295 = _1289;
        _1296 = _1289;
        _1297 = _1289;
        _1298 = _1289;
        _1299 = _1289;
        _1300 = _1289;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1330 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1334 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1338 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1361 = _950 + _727;
        float _1362 = _954 + _728;
        float _1363 = _958 + _729;
        float _1373 = fma(_1363, cbModelParam._m0[30u].z, fma(_1362, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361)) - _1330;
        float _1374 = fma(_1363, cbModelParam._m0[31u].z, fma(_1362, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361)) - _1334;
        float _1375 = fma(_1363, cbModelParam._m0[32u].z, fma(_1362, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361)) - _1338;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1330 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1334 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[35u].z) + ((((((_1338 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1429 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1396.x + (-0.5));
        float _1431 = _1429 * (_1396.y + (-0.5));
        float _1432 = _1429 * (_1396.z + (-0.5));
        float _1439 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1403.x + (-0.5));
        float _1441 = _1439 * (_1403.y + (-0.5));
        float _1442 = _1439 * (_1403.z + (-0.5));
        float _1449 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1410.x + (-0.5));
        float _1451 = _1449 * (_1410.y + (-0.5));
        float _1452 = _1449 * (_1410.z + (-0.5));
        float _1459 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1417.x + (-0.5));
        float _1461 = _1459 * (_1417.y + (-0.5));
        float _1462 = _1459 * (_1417.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_727, _728, _729), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4015 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1493 + 1.0))) + _1498) * _1463;
        float _1508 = _1431 * 0.5;
        float _1509 = _1441 * 0.5;
        float _1510 = _1451 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_727, _728, _729), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4048 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1535 + 1.0))) + _1540) * _1464;
        float _1550 = _1432 * 0.5;
        float _1551 = _1442 * 0.5;
        float _1552 = _1452 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_727, _728, _729), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4081 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1577 + 1.0))) + _1582) * _1465;
        _1599 = _1432;
        _1600 = _1431;
        _1601 = _1430;
        _1602 = _1442;
        _1603 = _1441;
        _1604 = _1440;
        _1605 = _1452;
        _1606 = _1451;
        _1607 = _1450;
        _1608 = _1465;
        _1609 = _1464;
        _1610 = _1463;
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1289;
        _1600 = _1289;
        _1601 = _1289;
        _1602 = _1289;
        _1603 = _1289;
        _1604 = _1289;
        _1605 = _1289;
        _1606 = _1289;
        _1607 = _1289;
        _1608 = _1289;
        _1609 = _1289;
        _1610 = _1289;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1301)) + _1301;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1302)) + _1302;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1303)) + _1303;
    float _1646 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1623));
    float _1667 = _897 * 0.5;
    float _1668 = _898 * 0.5;
    float _1669 = _899 * 0.5;
    float _1670 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1673 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1676 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1683 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1288, _1292, _1295, _1298));
        float _1687 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1691 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1698 = dot(vec4(cbModelParam._m0[39u]), vec4(_1667, _1668, _1669, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1667, _1668, _1669, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1799 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1802 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1830 = frontier_phi_17_15_ladder;
        }
        float _2032;
        if (_1799 > 0.0)
        {
            _2032 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2032 = frontier_phi_26_22_ladder;
        }
        float _2275;
        if (_1802 > 0.0)
        {
            _2275 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2275 = frontier_phi_38_33_ladder;
        }
        float _2277 = isnan(_2032) ? _1830 : (isnan(_1830) ? _2032 : min(_1830, _2032));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1796) + _1785;
        float _2283 = (_2278 * _1799) + _1789;
        float _2284 = (_2278 * _1802) + _1793;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2285;
        float _2289 = _2285 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 > _2289) || ((_2283 < _2287) || ((_2282 < _2287) || (_2282 > _2289))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_16_38_ladder = _2408.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2408.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2408.x * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_16_38_ladder_2;
        _1820 = frontier_phi_16_38_ladder_1;
        _1822 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1736);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1896 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1899 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2037;
        if (_1893 > 0.0)
        {
            _2037 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2037 = frontier_phi_28_24_ladder;
        }
        float _2302;
        if (_1896 > 0.0)
        {
            _2302 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2302 = frontier_phi_40_35_ladder;
        }
        float _2507;
        if (_1899 > 0.0)
        {
            _2507 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2507 = frontier_phi_49_46_ladder;
        }
        float _2509 = isnan(_2302) ? _2037 : (isnan(_2037) ? _2302 : min(_2037, _2302));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1893) + _1882;
        float _2515 = (_2510 * _1896) + _1886;
        float _2516 = (_2510 * _1899) + _1890;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_25_49_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_25_49_ladder_2;
        _1920 = frontier_phi_25_49_ladder_1;
        _1922 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1827);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1934 = ((((1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_918 * _905)) * _889;
    float _1935 = _1934 * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1936 = _1934 * ((cbModelParam._m0[1u].w * (_1920 - _1820)) + _1820);
    float _1937 = _1934 * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1966 = _889 + (-1.0);
    float _1971 = (cbLight._m0[_1959].x * _1966) + 1.0;
    float _1972 = (cbLight._m0[_1959].y * _1966) + 1.0;
    float _1973 = (cbLight._m0[_1959].z * _1966) + 1.0;
    float _1974 = (cbLight._m0[_1959].w * _1966) + 1.0;
    uint _1975 = _1958 + 5u;
    float _1981 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1985 = _1958 + 4u;
    float _1991 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1995 = _1958 | 1u;
    float _2006 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_727, _728, _729));
    float _2009 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_727, _728, _729));
    float _4217 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _4228 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2014 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2016 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2023 = ((cbLight._m0[_1975].x * _1981) * _2016) + ((cbLight._m0[_1985].x * _1991) * _2014);
    float _2024 = ((_1981 * cbLight._m0[_1975].y) * _2016) + ((_1991 * cbLight._m0[_1985].y) * _2014);
    float _2025 = ((_1981 * cbLight._m0[_1975].z) * _2016) + ((_1991 * cbLight._m0[_1985].z) * _2014);
    uvec4 _2029 = floatBitsToUint(cbLight._m0[_1958 + 12u]);
    bool _2031 = _2029.x == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2031)
    {
        _2042 = _2023;
        _2044 = _2024;
        _2046 = _2025;
    }
    else
    {
        uint _2050 = _1958 + 6u;
        float _2066 = (dot(vec3(cbLight._m0[_1958 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4239 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2069 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2042 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _2023;
        _2044 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _2024;
        _2046 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _2025;
    }
    bool _2049 = _2029.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2049)
    {
        _2087 = _2042;
        _2089 = _2044;
        _2091 = _2046;
    }
    else
    {
        uint _2246 = _1958 + 7u;
        float _2262 = (dot(vec3(cbLight._m0[_1958 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4255 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2265 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2087 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2042;
        _2089 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2044;
        _2091 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2046;
    }
    uint _2094 = _1958 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _730) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1958].x + _806;
    float _2110 = cbLight._m0[_1958].y + _807;
    float _2111 = cbLight._m0[_1958].z + _808;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1958].xyz));
    float _4271 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2123 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2124 = dot(vec3(_727, _728, _729), vec3(_2116, _2117, _2118));
    float _4293 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2116, _2117, _2118));
    float _4304 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2147 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2148 = 1.0 - _2108;
    float _2159 = (0.5 / (((_2123 * ((_2122 * _2148) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2148) + _2108) * _2122))) * _2122;
    float _4315 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2172 = _1958 + 9u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _730) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1995].x + _806;
    float _2186 = cbLight._m0[_1995].y + _807;
    float _2187 = cbLight._m0[_1995].z + _808;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1995].xyz));
    float _4326 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2199 = dot(vec3(_727, _728, _729), vec3(_2192, _2193, _2194));
    float _4337 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2192, _2193, _2194));
    float _4348 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2184 * _2184;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2220 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2221 = 1.0 - _2184;
    float _2231 = (0.5 / (((_2123 * ((_2198 * _2221) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2221) + _2184) * _2198))) * _2198;
    float _4359 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    float _2243 = (((_2220 * cbLight._m0[_2172].x) * _2233) * _1981) + (((_2147 * cbLight._m0[_2094].x) * _2161) * _1991);
    float _2244 = (((_2220 * cbLight._m0[_2172].y) * _2233) * _1981) + (((_2147 * cbLight._m0[_2094].y) * _2161) * _1991);
    float _2245 = (((_2220 * cbLight._m0[_2172].z) * _2233) * _1981) + (((_2147 * cbLight._m0[_2094].z) * _2161) * _1991);
    float _2307;
    float _2309;
    float _2311;
    if (_2031)
    {
        _2307 = _2243;
        _2309 = _2244;
        _2311 = _2245;
    }
    else
    {
        uint _2313 = _1958 + 2u;
        uint _2317 = _1958 + 10u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _730) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _806;
        float _2334 = cbLight._m0[_2313].y + _807;
        float _2335 = cbLight._m0[_2313].z + _808;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2313].xyz));
        float _4370 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2347 = dot(vec3(_727, _728, _729), vec3(_2340, _2341, _2342));
        float _4381 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4392 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2368 = (exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2369 = 1.0 - _2332;
        float _2379 = (0.5 / (((_2123 * ((_2346 * _2369) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2369) + _2332) * _2346))) * _2346;
        float _4403 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2307 = (((_2368 * cbLight._m0[_2317].x) * _2381) * _2382) + _2243;
        _2309 = (((_2368 * cbLight._m0[_2317].y) * _2381) * _2382) + _2244;
        _2311 = (((_2368 * cbLight._m0[_2317].z) * _2381) * _2382) + _2245;
    }
    float _2417;
    float _2419;
    float _2421;
    if (_2049)
    {
        _2417 = _2307;
        _2419 = _2309;
        _2421 = _2311;
    }
    else
    {
        uint _2428 = _1958 + 3u;
        uint _2432 = _1958 + 11u;
        float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _730) * 0.949999988079071044921875);
        float _2447 = _2446 * _2446;
        float _2448 = cbLight._m0[_2428].x + _806;
        float _2449 = cbLight._m0[_2428].y + _807;
        float _2450 = cbLight._m0[_2428].z + _808;
        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
        float _2455 = _2454 * _2448;
        float _2456 = _2454 * _2449;
        float _2457 = _2454 * _2450;
        float _2458 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2428].xyz));
        float _4419 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2462 = dot(vec3(_727, _728, _729), vec3(_2455, _2456, _2457));
        float _4430 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2466 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2455, _2456, _2457));
        float _4441 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2470 = _2447 * _2447;
        float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
        float _2483 = (exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2484 = 1.0 - _2447;
        float _2494 = (0.5 / (((_2123 * ((_2461 * _2484) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2484) + _2447) * _2461))) * _2461;
        float _4452 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2417 = (((_2483 * cbLight._m0[_2432].x) * _2496) * _2497) + _2307;
        _2419 = (((_2483 * cbLight._m0[_2432].y) * _2496) * _2497) + _2309;
        _2421 = (((_2483 * cbLight._m0[_2432].z) * _2496) * _2497) + _2311;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1956.y == 0u)
    {
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2572;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2572;
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2572;
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.x;
        uint _2599 = uint((float(_2587.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _2588))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _2588)));
        float _2609 = (log2(_2575 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2610 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        uint _2613 = uint(isnan(14.0) ? _2610 : (isnan(_2610) ? 14.0 : min(_2610, 14.0)));
        uvec4 _2618 = texelFetch(g_lightClusterGridBuffer, int(((_2613 << 2u) + (_2599 << 6u)) >> 2u));
        uint _2619 = _2618.x;
        uint _2620 = _2587.z;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((((1u << ((_2620 >> 4u) & 15u)) + 4294967295u) & _2619) == 0u) || ((_2620 & 240u) == 0u))
        {
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
        }
        else
        {
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            uint _2879 = 0u;
            uint _2888;
            bool _2889;
            for (;;)
            {
                _2888 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                _2889 = _2888 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2889)
                {
                    frontier_phi_66_pred = _2873;
                    frontier_phi_66_pred_1 = _2878;
                    frontier_phi_66_pred_2 = _2877;
                    frontier_phi_66_pred_3 = _2876;
                    frontier_phi_66_pred_4 = _2875;
                    frontier_phi_66_pred_5 = _2874;
                }
                else
                {
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    uint _3024;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2888;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    for (;;)
                    {
                        uint _3028 = uint(findLSB(_3024)) + (_2879 << 5u);
                        uint _3025 = (_3024 + 4294967295u) & _3024;
                        uint _3030 = _3028 * 48u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3050 = (_3028 * 48u) + 4u;
                        vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3069 = (_3028 * 48u) + 8u;
                        vec3 _3080 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x));
                        float _3084 = _3044.x - _2573;
                        float _3085 = _3044.y - _2574;
                        float _3086 = _3044.z - _2575;
                        float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                        float _3090 = inversesqrt(_3087);
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3094 = dot(vec3(_845, _848, _851), vec3(_3091, _3092, _3093));
                        float _3099 = 1.0 - (_3087 * _3044.w);
                        float _4478 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3101 = sqrt(_3087) * _3063.w;
                        float _3104 = 1.39999997615814208984375 / (_3101 + 1.39999997615814208984375);
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3094) + _3105;
                        float _3111 = _3101 * _3101;
                        float _3115 = ((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3100) / ((_3111 * 0.699999988079071044921875) + 1.0);
                        float _3119 = (-0.0) - _2573;
                        float _3120 = (-0.0) - _2574;
                        float _3121 = (-0.0) - _2575;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3136 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                        float _3137 = 1.0 - _905;
                        float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                        float _3145 = _3144 * _3144;
                        float _3146 = _3145 * _3145;
                        float _3147 = _3126 + _3091;
                        float _3148 = _3127 + _3092;
                        float _3149 = _3128 + _3093;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3157 = dot(vec3(_845, _848, _851), vec3(_3126, _3127, _3128));
                        float _4494 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3161 = dot(vec3(_845, _848, _851), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                        float _4505 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                        float _3169 = _3104 * _3145;
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3094) + _3170;
                        float _4516 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3175 = 1.0 - _3145;
                        float _3185 = (0.5 / (((_3174 * ((_3160 * _3175) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3174 * _3175) + _3145) * _3160))) * _3174;
                        float _4527 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3196 = (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3168 * _3168) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125))) * _3100;
                        _2948 = (_3115 * _3063.x) + _3021;
                        _2949 = (_3115 * _3063.y) + _3022;
                        _2950 = (_3115 * _3063.z) + _3023;
                        _2945 = (_3196 * _3080.x) + _3018;
                        _2946 = (_3196 * _3080.y) + _3019;
                        _2947 = (_3196 * _3080.z) + _3020;
                        if (_3025 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _3025;
                        }
                    }
                    frontier_phi_66_pred = _2945;
                    frontier_phi_66_pred_1 = _2950;
                    frontier_phi_66_pred_2 = _2949;
                    frontier_phi_66_pred_3 = _2948;
                    frontier_phi_66_pred_4 = _2947;
                    frontier_phi_66_pred_5 = _2946;
                }
                _2721 = frontier_phi_66_pred;
                _2731 = frontier_phi_66_pred_1;
                _2729 = frontier_phi_66_pred_2;
                _2727 = frontier_phi_66_pred_3;
                _2725 = frontier_phi_66_pred_4;
                _2723 = frontier_phi_66_pred_5;
                uint _2880 = _2879 + 1u;
                if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2873 = _2721;
                    _2874 = _2723;
                    _2875 = _2725;
                    _2876 = _2727;
                    _2877 = _2729;
                    _2878 = _2731;
                    _2879 = _2880;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
        }
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.z;
        uint _2737 = (_2735 >> 8u) & 15u;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((4294967295u << _2737) & _2619) == 0u)
        {
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
        }
        else
        {
            float _2866 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
            float _2867 = _2866 * _2573;
            float _2868 = _2866 * _2574;
            float _2869 = _2866 * _2575;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2737 < ((_2735 >> 12u) & 15u))
            {
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _3001 = _2720;
                float _3002 = _2722;
                float _3003 = _2724;
                float _3004 = _2726;
                float _3005 = _2728;
                float _3006 = _2730;
                uint _3007 = _2737;
                uint _3016;
                bool _3017;
                for (;;)
                {
                    _3016 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                    _3017 = _3016 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3017)
                    {
                        frontier_phi_77_pred = _3006;
                        frontier_phi_77_pred_1 = _3005;
                        frontier_phi_77_pred_2 = _3004;
                        frontier_phi_77_pred_3 = _3003;
                        frontier_phi_77_pred_4 = _3002;
                        frontier_phi_77_pred_5 = _3001;
                    }
                    else
                    {
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        uint _3229 = _3016;
                        uint _3230;
                        vec4 _3255;
                        float _3256;
                        vec4 _3271;
                        vec3 _3283;
                        vec4 _3298;
                        vec4 _3313;
                        float _3359;
                        bool _3360;
                        for (;;)
                        {
                            uint _3240 = ((_3007 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3229));
                            _3230 = (_3229 + 4294967295u) & _3229;
                            uint _3242 = _3240 * 40u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3256 = _3255.w;
                            uint _3258 = (_3240 * 40u) + 4u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3240 * 40u) + 8u;
                            _3283 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x));
                            uint _3285 = (_3240 * 40u) + 16u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3240 * 40u) + 20u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3240 * 40u) + 24u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3334 = (_3240 * 40u) + 28u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3359 = fma(_2575, _3347.z, fma(_2574, _3347.y, _3347.x * _2573)) + _3347.w;
                            _3360 = !((fma(_2575, _3328.z, fma(_2574, _3328.y, _3328.x * _2573)) + _3328.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3360)
                            {
                                float _3387 = _3255.x - _2573;
                                float _3388 = _3255.y - _2574;
                                float _3389 = _3255.z - _2575;
                                float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                                float _3393 = inversesqrt(_3390);
                                float _3394 = _3393 * _3387;
                                float _3395 = _3393 * _3388;
                                float _3396 = _3393 * _3389;
                                float _3400 = 1.0 - (_3390 / (_3256 * _3256));
                                float _4538 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3405 = sqrt(_3390) * _3271.w;
                                float _3407 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                                float _3408 = _3407 * _3407;
                                float _3411 = ((1.0 - _3408) * dot(vec3(_3394, _3395, _3396), vec3(_845, _848, _851))) + _3408;
                                float _3414 = _3405 * _3405;
                                float _3418 = (fma(_2575, _3298.z, fma(_2574, _3298.y, _3298.x * _2573)) + _3298.w) / _3359;
                                float _3419 = (fma(_2575, _3313.z, fma(_2574, _3313.y, _3313.x * _2573)) + _3313.w) / _3359;
                                float _3423 = 1.0 - dot(vec2(_3418, _3419), vec2(_3418, _3419));
                                float _4554 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3425 = _3424 * (((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3401) / ((_3414 * 0.699999988079071044921875) + 1.0));
                                float _3437 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                                float _3438 = 1.0 - _905;
                                float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                                float _3446 = _3445 * _3445;
                                float _3447 = _3446 * _3446;
                                float _3448 = _3394 - _2867;
                                float _3449 = _3395 - _2868;
                                float _3450 = _3396 - _2869;
                                float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                                float _3458 = dot(vec3(_845, _848, _851), vec3((-0.0) - _2867, (-0.0) - _2868, (-0.0) - _2869));
                                float _4565 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3462 = dot(vec3(_845, _848, _851), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                                float _4576 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                                float _3470 = _3407 * _3446;
                                float _3471 = _3470 * _3470;
                                float _3477 = ((1.0 - _3471) * dot(vec3(_845, _848, _851), vec3(_3394, _3395, _3396))) + _3471;
                                float _4587 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3479 = 1.0 - _3446;
                                float _3489 = (0.5 / (((_3478 * ((_3461 * _3479) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3446) * _3461))) * _3478;
                                float _4598 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3499 = (_3424 * _3401) * (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3469 * _3469) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3425 * _3271.y;
                                frontier_phi_83_pred_1 = _3425 * _3271.x;
                                frontier_phi_83_pred_2 = _3499 * _3283.z;
                                frontier_phi_83_pred_3 = _3499 * _3283.y;
                                frontier_phi_83_pred_4 = _3499 * _3283.x;
                                frontier_phi_83_pred_5 = _3425 * _3271.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3507 = frontier_phi_83_pred;
                            _3506 = frontier_phi_83_pred_1;
                            _3505 = frontier_phi_83_pred_2;
                            _3504 = frontier_phi_83_pred_3;
                            _3503 = frontier_phi_83_pred_4;
                            _3508 = frontier_phi_83_pred_5;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            if (_3230 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3230;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3215;
                        frontier_phi_77_pred_1 = _3214;
                        frontier_phi_77_pred_2 = _3213;
                        frontier_phi_77_pred_3 = _3212;
                        frontier_phi_77_pred_4 = _3211;
                        frontier_phi_77_pred_5 = _3210;
                    }
                    _2852 = frontier_phi_77_pred;
                    _2850 = frontier_phi_77_pred_1;
                    _2848 = frontier_phi_77_pred_2;
                    _2846 = frontier_phi_77_pred_3;
                    _2844 = frontier_phi_77_pred_4;
                    _2842 = frontier_phi_77_pred_5;
                    uint _3008 = _3007 + 1u;
                    if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3001 = _2842;
                        _3002 = _2844;
                        _3003 = _2846;
                        _3004 = _2848;
                        _3005 = _2850;
                        _3006 = _2852;
                        _3007 = _3008;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2846;
                frontier_phi_58_59_ladder_1 = _2852;
                frontier_phi_58_59_ladder_2 = _2850;
                frontier_phi_58_59_ladder_3 = _2848;
                frontier_phi_58_59_ladder_4 = _2844;
                frontier_phi_58_59_ladder_5 = _2842;
            }
            else
            {
                frontier_phi_58_59_ladder = _2724;
                frontier_phi_58_59_ladder_1 = _2730;
                frontier_phi_58_59_ladder_2 = _2728;
                frontier_phi_58_59_ladder_3 = _2726;
                frontier_phi_58_59_ladder_4 = _2722;
                frontier_phi_58_59_ladder_5 = _2720;
            }
            _2841 = frontier_phi_58_59_ladder_5;
            _2843 = frontier_phi_58_59_ladder_4;
            _2845 = frontier_phi_58_59_ladder;
            _2847 = frontier_phi_58_59_ladder_3;
            _2849 = frontier_phi_58_59_ladder_2;
            _2851 = frontier_phi_58_59_ladder_1;
        }
        float _2856 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2632 = (_2856 * _2847) + _2087;
        _2634 = (_2856 * _2849) + _2089;
        _2636 = (_2856 * _2851) + _2091;
        _2638 = ((_2841 * 0.039999999105930328369140625) * _2856) + _2417;
        _2640 = ((_2843 * 0.039999999105930328369140625) * _2856) + _2419;
        _2642 = ((_2845 * 0.039999999105930328369140625) * _2856) + _2421;
    }
    else
    {
        _2632 = _2087;
        _2634 = _2089;
        _2636 = _2091;
        _2638 = _2417;
        _2640 = _2419;
        _2642 = _2421;
    }
    float _4614 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4625 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4636 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2659 = ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2632 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _889))) + ((_2638 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    float _2660 = ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2634 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _889))) + ((_2640 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    float _2661 = ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2636 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _889))) + ((_2642 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    uint _2662 = _268 + 6u;
    float _2670 = _826 / cbSceneParam._m0[86u].x;
    float _2671 = _827 / cbSceneParam._m0[86u].y;
    vec4 _2685 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2687 = _2685.x;
    float _2688 = _2685.y;
    float _2689 = _2685.z;
    float _2690 = _2685.w;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _2745 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _2746 = _2745 / _748;
        float _2757 = _2746 * _799;
        float _2758 = _800 * _2746;
        float _2759 = (-0.0) - _2758;
        float _2761 = _2746 * _801;
        float _2763 = (cbSceneParam._m0[77u].w * _2759) / _2745;
        float _2764 = _2763 + cbSceneParam._m0[79u].w;
        float _2765 = cbSceneParam._m0[79u].w - _2758;
        float _2771 = sqrt(((_2757 * _2757) + (_2758 * _2758)) + (_2761 * _2761));
        float _2774 = (1.0 - (cbSceneParam._m0[77u].w / _2745)) * _2771;
        float _2779 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2781 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2958;
        if (abs((_2759 - _2763) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2958 = ((((_2764 > 0.0) ? exp2(_2779 * _2764) : (2.0 - exp2(_2781 * _2764))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2774;
        }
        else
        {
            float _2902 = 1.0 / cbSceneParam._m0[80u].x;
            float _2903 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : max(_2764, _2765));
            float _2904 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : min(_2764, _2765));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            _2958 = ((abs(_2771 / _2759) * cbSceneParam._m0[80u].y) * ((((_2913 - _2914) * 2.0) - ((exp2(_2779 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0)))) - exp2(_2779 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))))) * _2902)) - ((exp2(_2781 * _2913) - exp2(_2781 * _2914)) * _2902))) + (_2774 * cbSceneParam._m0[80u].z);
        }
        vec4 _2960 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, 1.0), 0.0);
        float _2969 = exp2((_2958 * (-1.44269502162933349609375)) * (1.0 - _2960.w));
        float _2970 = log2(_2969);
        float _2986 = log2(_2690);
        _2783 = (exp2(_2986 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].x)) * _2960.x) / cbSceneParam._m0[78u].x)) + _2687;
        _2785 = (exp2(_2986 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].y)) * _2960.y) / cbSceneParam._m0[78u].y)) + _2688;
        _2787 = (exp2(_2986 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].z)) * _2960.z) / cbSceneParam._m0[78u].z)) + _2689;
        _2789 = _2969 * _2690;
    }
    else
    {
        _2783 = _2687;
        _2785 = _2688;
        _2787 = _2689;
        _2789 = _2690;
    }
    bool _2996;
    vec4 _2799;
    vec4 _2821;
    float _2823;
    float _2827;
    float _2828;
    float _2829;
    float _2830;
    bool _2840;
    for (;;)
    {
        _2799 = cbMatDynParam._m0[0u];
        float _2801 = roundEven(_2799.y);
        bool _2802 = _2801 == 3.0;
        float _2803 = log2(_2789);
        float _2810 = exp2(_2803 * cbSceneParam._m0[78u].x) * _2659;
        float _2811 = exp2(_2803 * cbSceneParam._m0[78u].y) * _2660;
        float _2812 = exp2(_2803 * cbSceneParam._m0[78u].z) * _2661;
        float _2819 = _815 + (-0.5);
        _2821 = cbMtdParam._m0[1u];
        _2823 = _2821.y * _2819;
        float _2826 = (_2801 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2827 = _2826 * (_2802 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2783)));
        _2828 = _2826 * (_2802 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2785)));
        _2829 = _2826 * (_2802 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2787)));
        _2830 = _2819 * 0.999000012874603271484375;
        _2840 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2840)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2830) < 0.5)
            {
                _2996 = true;
                break;
            }
        }
        uint _2937 = _864 + uint(_2799.w);
        if ((cbInstanceData._m0[_2937].w < 1.0) && ((cbInstanceData._m0[_2937].w + _2830) < 0.5))
        {
            _2996 = true;
            break;
        }
        if ((_2823 + 1.0) < _2821.x)
        {
            _2996 = true;
            break;
        }
        _2996 = false;
        break;
    }
    float _3201;
    if (_2996)
    {
        discard_state = true;
        _3201 = 0.0;
    }
    else
    {
        _3201 = cbInstanceData._m0[_2662].w;
    }
    SV_Target.x = _2827;
    SV_Target.y = _2828;
    SV_Target.z = _2829;
    SV_Target.w = _3201;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2662].w;
    discard_exit();
}


