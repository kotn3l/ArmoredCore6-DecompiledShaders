#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1404;
float _3786;
float _3787;
float _3788;
float _3789;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _341.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3798 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _417 = (_410 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _418 = (_410 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _419 = (_410 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _341.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = ((_510.x - _529) * _410) + _529;
    float _539 = ((_510.y - _530) * _410) + _530;
    float _540 = ((_510.z - _531) * _410) + _531;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _565 = ((_552.z - _540) * _483) + _540;
    float _568 = ((((_552.x - _538) * _483) + _538) * 2.0) + (-1.0);
    float _570 = ((((_552.y - _539) * _483) + _539) * 2.0) + (-1.0);
    float _571 = dot(vec2(_568, _570), vec2(_568, _570));
    float _3820 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _603 = (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _570;
    float _606 = fma(_576, _243, fma(_603, _250, _602 * _236));
    float _609 = fma(_576, _244, fma(_603, _251, _602 * _237));
    float _612 = fma(_576, _245, fma(_603, _252, _602 * _238));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _652 = (cbMtdParam._m0[19u].x + dot(vec4(_616 * _606, _616 * _609, _616 * _612, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) * cbMtdParam._m0[21u].z);
    float _3831 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _655 = (-0.0) - cbMtdParam._m0[24u].x;
    float _657 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
    float _665 = _653 - ((_653 * TEXCOORD_8.x) * _658);
    float _666 = _653 - ((_653 * TEXCOORD_8.y) * _658);
    float _667 = _653 - ((_653 * TEXCOORD_8.z) * _658);
    float _674 = (_665 * (cbMtdParam._m0[17u].x - _490)) + _490;
    float _675 = (_666 * (cbMtdParam._m0[17u].y - _491)) + _491;
    float _676 = (_667 * (cbMtdParam._m0[17u].z - _492)) + _492;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_690 - _691) * cbMtdParam._m0[24u].y) + _691) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3852 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _674) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _720) + _674;
    float _729 = ((((cbMtdParam._m0[10u].y - _675) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _720) + _675;
    float _730 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _676)) * _720) + _676;
    float _734 = (cbMtdParam._m0[19u].w * (_590.z - _565)) + _565;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _3863 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _765 = ((_748.z - _734) * _665) + _734;
    float _768 = ((cbMtdParam._m0[23u].y - _765) * _720) + _765;
    vec4 _787 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _3874 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _810 = ((sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _576) * _667) + _576;
    float _813 = (((_755 - _602) * _665) + _602) + (cbMtdParam._m0[21u].x * _602);
    float _814 = (((_756 - _603) * _666) + _603) + (cbMtdParam._m0[21u].x * _603);
    float _825 = (((_793 - _813) + (_813 * cbMtdParam._m0[22u].z)) * _720) + _813;
    float _826 = (((_794 - _814) + (_814 * cbMtdParam._m0[22u].z)) * _720) + _814;
    float _827 = (_720 * (sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _810)) + _810;
    float _829 = cbMtdParam._m0[22u].x + _590.w;
    float _832 = fma(_827, _243, fma(_826, _250, _825 * _236));
    float _835 = fma(_827, _244, fma(_826, _251, _825 * _237));
    float _838 = fma(_827, _245, fma(_826, _252, _825 * _238));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _3885 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _846 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _3907 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3918 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3929 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _864 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    vec4 _929 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _931 = _929.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1085 = sqrt(((_915 * _915) + (_916 * _916)) + (_917 * _917));
        float _1091 = (cbMatDynParam._m0[5u].x * _1085) + cbMatDynParam._m0[5u].y;
        float _3940 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1096 = (cbMatDynParam._m0[5u].z * _1085) + cbMatDynParam._m0[5u].w;
        float _3951 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) - _1092)) + _1092) < ((_931 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _964 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _967 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _980 = _255 + 9u;
    uint _981 = _980 + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3962 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1005 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _1001.x;
    float _1006 = dot(vec3(_843, _844, _845), vec3(_922, _923, _924));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _843) - _922;
    float _1014 = (_1009 * _844) - _923;
    float _1015 = (_1009 * _845) - _924;
    float _1019 = abs(dot(vec3(_922, _923, _924), vec3(_843, _844, _845)));
    float _3995 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_846);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1403;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1128 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1132 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1136 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1161 = _1066 + _843;
        float _1162 = _1070 + _844;
        float _1163 = _1074 + _845;
        float _1173 = fma(_1163, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161)) - _1128;
        float _1174 = fma(_1163, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161)) - _1132;
        float _1175 = fma(_1163, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161)) - _1136;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1128 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1132 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[34u].z) + ((((((_1136 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1231 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1197.x + (-0.5));
        float _1233 = _1231 * (_1197.y + (-0.5));
        float _1234 = _1231 * (_1197.z + (-0.5));
        float _1241 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1204.x + (-0.5));
        float _1243 = _1241 * (_1204.y + (-0.5));
        float _1244 = _1241 * (_1204.z + (-0.5));
        float _1251 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1211.x + (-0.5));
        float _1253 = _1251 * (_1211.y + (-0.5));
        float _1254 = _1251 * (_1211.z + (-0.5));
        float _1261 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1218.x + (-0.5));
        float _1263 = _1261 * (_1218.y + (-0.5));
        float _1264 = _1261 * (_1218.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1285 = (dot(vec3(_843, _844, _845), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1295 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4043 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1297 + 1.0))) + _1302) * _1265;
        float _1312 = _1233 * 0.5;
        float _1313 = _1243 * 0.5;
        float _1314 = _1253 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_843, _844, _845), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4076 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1339 + 1.0))) + _1344) * _1266;
        float _1354 = _1234 * 0.5;
        float _1355 = _1244 * 0.5;
        float _1356 = _1254 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_843, _844, _845), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4109 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1381 + 1.0))) + _1386) * _1267;
        _1403 = _1234;
        _1405 = _1233;
        _1406 = _1232;
        _1407 = _1244;
        _1408 = _1243;
        _1409 = _1242;
        _1410 = _1254;
        _1411 = _1253;
        _1412 = _1252;
        _1413 = _1267;
        _1414 = _1266;
        _1415 = _1265;
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1404;
        _1405 = _1404;
        _1406 = _1404;
        _1407 = _1404;
        _1408 = _1404;
        _1409 = _1404;
        _1410 = _1404;
        _1411 = _1404;
        _1412 = _1404;
        _1413 = _1404;
        _1414 = _1404;
        _1415 = _1404;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1449 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1453 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1476 = _1066 + _843;
        float _1477 = _1070 + _844;
        float _1478 = _1074 + _845;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_843, _844, _845), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4172 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_843, _844, _845), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4205 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_843, _844, _845), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4238 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1404;
        _1715 = _1404;
        _1716 = _1404;
        _1717 = _1404;
        _1718 = _1404;
        _1719 = _1404;
        _1720 = _1404;
        _1721 = _1404;
        _1722 = _1404;
        _1723 = _1404;
        _1724 = _1404;
        _1725 = _1404;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1416)) + _1416;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1417)) + _1417;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1418)) + _1418;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1013 * 0.5;
    float _1783 = _1014 * 0.5;
    float _1784 = _1015 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1403, _1407, _1410, _1413));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1913 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1916 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1944 = frontier_phi_17_15_ladder;
        }
        float _2166;
        if (_1913 > 0.0)
        {
            _2166 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2166 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1916 > 0.0)
        {
            _2412 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2166) ? _1944 : (isnan(_1944) ? _2166 : min(_1944, _2166));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1910) + _1899;
        float _2420 = (_2415 * _1913) + _1903;
        float _2421 = (_2415 * _1916) + _1907;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_16_38_ladder_2;
        _1934 = frontier_phi_16_38_ladder_1;
        _1936 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1851);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _2009 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _2012 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2171;
        if (_2006 > 0.0)
        {
            _2171 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2171 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2009 > 0.0)
        {
            _2439 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_2012 > 0.0)
        {
            _2644 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2644 = frontier_phi_49_46_ladder;
        }
        float _2646 = isnan(_2439) ? _2171 : (isnan(_2171) ? _2439 : min(_2171, _2439));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _2006) + _1995;
        float _2652 = (_2647 * _2009) + _1999;
        float _2653 = (_2647 * _2012) + _2003;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_25_49_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_25_49_ladder_2;
        _2033 = frontier_phi_25_49_ladder_1;
        _2035 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1941);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2047 = ((((1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1034 * _1021)) * _1005;
    float _2048 = _2047 * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2049 = _2047 * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2050 = _2047 * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2049, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2049, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2049, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    vec4 _2067 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_942, _943));
    float _2069 = _2067.w;
    float _2081 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2069);
    float _2082 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2069);
    float _2083 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2069);
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _1005 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2125 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2129 = _2089 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_843, _844, _845));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_843, _844, _845));
    float _4374 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4385 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2106].x * _2112) * _2150) + (((cbLight._m0[_2116].x * _2081) * _2125) * _2148);
    float _2158 = ((_2112 * cbLight._m0[_2106].y) * _2150) + (((cbLight._m0[_2116].y * _2082) * _2125) * _2148);
    float _2159 = ((_2112 * cbLight._m0[_2106].z) * _2150) + (((cbLight._m0[_2116].z * _2083) * _2125) * _2148);
    uvec4 _2163 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2165 = _2163.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2165)
    {
        _2176 = _2157;
        _2178 = _2158;
        _2180 = _2159;
    }
    else
    {
        uint _2184 = _2089 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4396 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2203 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2157;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2158;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2159;
    }
    bool _2183 = _2163.y == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2183)
    {
        _2221 = _2176;
        _2223 = _2178;
        _2225 = _2180;
    }
    else
    {
        uint _2383 = _2089 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4412 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2402 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2221 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2176;
        _2223 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2178;
        _2225 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2180;
    }
    uint _2228 = _2089 + 8u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _846) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2089].x + _922;
    float _2244 = cbLight._m0[_2089].y + _923;
    float _2245 = cbLight._m0[_2089].z + _924;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2089].xyz));
    float _4428 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2257 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2258 = dot(vec3(_843, _844, _845), vec3(_2250, _2251, _2252));
    float _4450 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2250, _2251, _2252));
    float _4461 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2242 * _2242;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2282 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2257 * ((_2256 * _2282) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2282) + _2242) * _2256))) * _2256;
    float _4472 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    uint _2309 = _2089 + 9u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _846) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2129].x + _922;
    float _2323 = cbLight._m0[_2129].y + _923;
    float _2324 = cbLight._m0[_2129].z + _924;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2129].xyz));
    float _4483 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2336 = dot(vec3(_843, _844, _845), vec3(_2329, _2330, _2331));
    float _4494 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2329, _2330, _2331));
    float _4505 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2321 * _2321;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2321;
    float _2368 = (0.5 / (((_2257 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2358) + _2321) * _2335))) * _2335;
    float _4516 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    float _2380 = (((_2357 * cbLight._m0[_2309].x) * _2370) * _2112) + ((((cbLight._m0[_2228].x * _2081) * _2281) * _2295) * _2125);
    float _2381 = (((_2357 * cbLight._m0[_2309].y) * _2370) * _2112) + ((((cbLight._m0[_2228].y * _2082) * _2281) * _2295) * _2125);
    float _2382 = (((_2357 * cbLight._m0[_2309].z) * _2370) * _2112) + ((((cbLight._m0[_2228].z * _2083) * _2281) * _2295) * _2125);
    float _2444;
    float _2446;
    float _2448;
    if (_2165)
    {
        _2444 = _2380;
        _2446 = _2381;
        _2448 = _2382;
    }
    else
    {
        uint _2450 = _2089 + 2u;
        uint _2454 = _2089 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _846) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _922;
        float _2471 = cbLight._m0[_2450].y + _923;
        float _2472 = cbLight._m0[_2450].z + _924;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2450].xyz));
        float _4527 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2484 = dot(vec3(_843, _844, _845), vec3(_2477, _2478, _2479));
        float _4538 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4549 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2257 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2506) + _2469) * _2483))) * _2483;
        float _4560 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2444 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2380;
        _2446 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2381;
        _2448 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2382;
    }
    float _2554;
    float _2556;
    float _2558;
    if (_2183)
    {
        _2554 = _2444;
        _2556 = _2446;
        _2558 = _2448;
    }
    else
    {
        uint _2565 = _2089 + 3u;
        uint _2569 = _2089 + 11u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _846) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _922;
        float _2586 = cbLight._m0[_2565].y + _923;
        float _2587 = cbLight._m0[_2565].z + _924;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2565].xyz));
        float _4576 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2599 = dot(vec3(_843, _844, _845), vec3(_2592, _2593, _2594));
        float _4587 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4598 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2621 = 1.0 - _2584;
        float _2631 = (0.5 / (((_2257 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2621) + _2584) * _2598))) * _2598;
        float _4609 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2554 = (((_2620 * cbLight._m0[_2569].x) * _2633) * _2634) + _2444;
        _2556 = (((_2620 * cbLight._m0[_2569].y) * _2633) * _2634) + _2446;
        _2558 = (((_2620 * cbLight._m0[_2569].z) * _2633) * _2634) + _2448;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2087.y == 0u)
    {
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2709;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2709;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2709;
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2725)));
        float _2746 = (log2(_2712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            uint _3015 = 0u;
            uint _3024;
            bool _3025;
            for (;;)
            {
                _3024 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                _3025 = _3024 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3025)
                {
                    frontier_phi_66_pred = _3009;
                    frontier_phi_66_pred_1 = _3014;
                    frontier_phi_66_pred_2 = _3013;
                    frontier_phi_66_pred_3 = _3012;
                    frontier_phi_66_pred_4 = _3011;
                    frontier_phi_66_pred_5 = _3010;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3024;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3015 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _2710;
                        float _3221 = _3180.y - _2711;
                        float _3222 = _3180.z - _2712;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_961, _964, _967), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4635 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _2710;
                        float _3256 = (-0.0) - _2711;
                        float _3257 = (-0.0) - _2712;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3272 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _1021;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_961, _964, _967), vec3(_3262, _3263, _3264));
                        float _4651 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3297 = dot(vec3(_961, _964, _967), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4662 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3240 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3230) + _3306;
                        float _4673 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4684 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3304 * _3304) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3084 = (_3251 * _3199.x) + _3157;
                        _3085 = (_3251 * _3199.y) + _3158;
                        _3086 = (_3251 * _3199.z) + _3159;
                        _3081 = (_3332 * _3216.x) + _3154;
                        _3082 = (_3332 * _3216.y) + _3155;
                        _3083 = (_3332 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3086;
                    frontier_phi_66_pred_2 = _3085;
                    frontier_phi_66_pred_3 = _3084;
                    frontier_phi_66_pred_4 = _3083;
                    frontier_phi_66_pred_5 = _3082;
                }
                _2858 = frontier_phi_66_pred;
                _2868 = frontier_phi_66_pred_1;
                _2866 = frontier_phi_66_pred_2;
                _2864 = frontier_phi_66_pred_3;
                _2862 = frontier_phi_66_pred_4;
                _2860 = frontier_phi_66_pred_5;
                uint _3016 = _3015 + 1u;
                if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3009 = _2858;
                    _3010 = _2860;
                    _3011 = _2862;
                    _3012 = _2864;
                    _3013 = _2866;
                    _3014 = _2868;
                    _3015 = _3016;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((4294967295u << _2874) & _2756) == 0u)
        {
            _2977 = _2857;
            _2979 = _2859;
            _2981 = _2861;
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
        }
        else
        {
            float _3002 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
            float _3003 = _3002 * _2710;
            float _3004 = _3002 * _2711;
            float _3005 = _3002 * _2712;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _3137 = _2857;
                float _3138 = _2859;
                float _3139 = _2861;
                float _3140 = _2863;
                float _3141 = _2865;
                float _3142 = _2867;
                uint _3143 = _2874;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3153)
                    {
                        frontier_phi_77_pred = _3142;
                        frontier_phi_77_pred_1 = _3141;
                        frontier_phi_77_pred_2 = _3140;
                        frontier_phi_77_pred_3 = _3139;
                        frontier_phi_77_pred_4 = _3138;
                        frontier_phi_77_pred_5 = _3137;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        uint _3365 = _3152;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3434;
                        vec4 _3449;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3376 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3421 = (_3376 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3376 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3376 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3376 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_2712, _3483.z, fma(_2711, _3483.y, _3483.x * _2710)) + _3483.w;
                            _3496 = !((fma(_2712, _3464.z, fma(_2711, _3464.y, _3464.x * _2710)) + _3464.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3391.x - _2710;
                                float _3524 = _3391.y - _2711;
                                float _3525 = _3391.z - _2712;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3392 * _3392));
                                float _4695 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3541 = sqrt(_3526) * _3407.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_961, _964, _967))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_2712, _3434.z, fma(_2711, _3434.y, _3434.x * _2710)) + _3434.w) / _3495;
                                float _3555 = (fma(_2712, _3449.z, fma(_2711, _3449.y, _3449.x * _2710)) + _3449.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4711 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _1021;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3003;
                                float _3585 = _3531 - _3004;
                                float _3586 = _3532 - _3005;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_961, _964, _967), vec3((-0.0) - _3003, (-0.0) - _3004, (-0.0) - _3005));
                                float _4722 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3598 = dot(vec3(_961, _964, _967), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4733 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_961, _964, _967), vec3(_3530, _3531, _3532))) + _3607;
                                float _4744 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4755 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3561 * _3407.y;
                                frontier_phi_83_pred_1 = _3561 * _3407.x;
                                frontier_phi_83_pred_2 = _3635 * _3419.z;
                                frontier_phi_83_pred_3 = _3635 * _3419.y;
                                frontier_phi_83_pred_4 = _3635 * _3419.x;
                                frontier_phi_83_pred_5 = _3561 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_83_pred;
                            _3642 = frontier_phi_83_pred_1;
                            _3641 = frontier_phi_83_pred_2;
                            _3640 = frontier_phi_83_pred_3;
                            _3639 = frontier_phi_83_pred_4;
                            _3644 = frontier_phi_83_pred_5;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3351;
                        frontier_phi_77_pred_1 = _3350;
                        frontier_phi_77_pred_2 = _3349;
                        frontier_phi_77_pred_3 = _3348;
                        frontier_phi_77_pred_4 = _3347;
                        frontier_phi_77_pred_5 = _3346;
                    }
                    _2988 = frontier_phi_77_pred;
                    _2986 = frontier_phi_77_pred_1;
                    _2984 = frontier_phi_77_pred_2;
                    _2982 = frontier_phi_77_pred_3;
                    _2980 = frontier_phi_77_pred_4;
                    _2978 = frontier_phi_77_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2978;
                        _3138 = _2980;
                        _3139 = _2982;
                        _3140 = _2984;
                        _3141 = _2986;
                        _3142 = _2988;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2982;
                frontier_phi_58_59_ladder_1 = _2988;
                frontier_phi_58_59_ladder_2 = _2986;
                frontier_phi_58_59_ladder_3 = _2984;
                frontier_phi_58_59_ladder_4 = _2980;
                frontier_phi_58_59_ladder_5 = _2978;
            }
            else
            {
                frontier_phi_58_59_ladder = _2861;
                frontier_phi_58_59_ladder_1 = _2867;
                frontier_phi_58_59_ladder_2 = _2865;
                frontier_phi_58_59_ladder_3 = _2863;
                frontier_phi_58_59_ladder_4 = _2859;
                frontier_phi_58_59_ladder_5 = _2857;
            }
            _2977 = frontier_phi_58_59_ladder_5;
            _2979 = frontier_phi_58_59_ladder_4;
            _2981 = frontier_phi_58_59_ladder;
            _2983 = frontier_phi_58_59_ladder_3;
            _2985 = frontier_phi_58_59_ladder_2;
            _2987 = frontier_phi_58_59_ladder_1;
        }
        float _2992 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _2769 = (_2992 * _2983) + _2221;
        _2771 = (_2992 * _2985) + _2223;
        _2773 = (_2992 * _2987) + _2225;
        _2775 = ((_2977 * 0.039999999105930328369140625) * _2992) + _2554;
        _2777 = ((_2979 * 0.039999999105930328369140625) * _2992) + _2556;
        _2779 = ((_2981 * 0.039999999105930328369140625) * _2992) + _2558;
    }
    else
    {
        _2769 = _2221;
        _2771 = _2223;
        _2773 = _2225;
        _2775 = _2554;
        _2777 = _2556;
        _2779 = _2558;
    }
    float _4771 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4782 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4793 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2796 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2769 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1005))) + ((_2775 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2797 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2771 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1005))) + ((_2777 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2773 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1005))) + ((_2779 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    uint _2799 = _255 + 6u;
    float _2807 = _942 / cbSceneParam._m0[86u].x;
    float _2808 = _943 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _864 : (isnan(_864) ? cbSceneParam._m0[77u].w : min(_864, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_864 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_864) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _864 : min(cbSceneParam._m0[80u].w, _864));
        float _2883 = _2882 / _864;
        float _2894 = _2883 * _915;
        float _2895 = _916 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2897 = _2883 * _917;
        float _2899 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2895;
        float _2907 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3094;
        if (abs((_2896 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3094 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3038 = 1.0 / cbSceneParam._m0[80u].x;
            float _3039 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3040 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            _3094 = ((abs(_2907 / _2896) * cbSceneParam._m0[80u].y) * ((((_3049 - _3050) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))))) * _3038)) - ((exp2(_2917 * _3049) - exp2(_2917 * _3050)) * _3038))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3105 = exp2((_3094 * (-1.44269502162933349609375)) * (1.0 - _3096.w));
        float _3106 = log2(_3105);
        float _3122 = log2(_2827);
        _2919 = (exp2(_3122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].x)) * _3096.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2921 = (exp2(_3122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].y)) * _3096.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2923 = (exp2(_3122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].z)) * _3096.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2925 = _3105 * _2827;
    }
    else
    {
        _2919 = _2824;
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
    }
    bool _3132;
    vec4 _2935;
    vec4 _2957;
    float _2959;
    float _2963;
    float _2964;
    float _2965;
    float _2966;
    bool _2976;
    for (;;)
    {
        _2935 = cbMatDynParam._m0[0u];
        float _2937 = roundEven(_2935.y);
        bool _2938 = _2937 == 3.0;
        float _2939 = log2(_2925);
        float _2946 = exp2(_2939 * cbSceneParam._m0[78u].x) * _2796;
        float _2947 = exp2(_2939 * cbSceneParam._m0[78u].y) * _2797;
        float _2948 = exp2(_2939 * cbSceneParam._m0[78u].z) * _2798;
        float _2955 = _931 + (-0.5);
        _2957 = cbMtdParam._m0[1u];
        _2959 = _2957.y * _2955;
        float _2962 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2963 = _2962 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
        _2964 = _2962 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
        _2965 = _2962 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
        _2966 = _2955 * 0.999000012874603271484375;
        _2976 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2976)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2966) < 0.5)
            {
                _3132 = true;
                break;
            }
        }
        uint _3073 = _980 + uint(_2935.w);
        if ((cbInstanceData._m0[_3073].w < 1.0) && ((cbInstanceData._m0[_3073].w + _2966) < 0.5))
        {
            _3132 = true;
            break;
        }
        if ((_2959 + 1.0) < _2957.x)
        {
            _3132 = true;
            break;
        }
        _3132 = false;
        break;
    }
    float _3337;
    if (_3132)
    {
        discard_state = true;
        _3337 = 0.0;
    }
    else
    {
        _3337 = cbInstanceData._m0[_2799].w;
    }
    SV_Target.x = _2963;
    SV_Target.y = _2964;
    SV_Target.z = _2965;
    SV_Target.w = _3337;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
    discard_exit();
}


