#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1675;
float _4030;
float _4031;
float _4032;
float _4033;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4042 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4053 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4064 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4075 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _497 = (_490 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _498 = (_490 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _499 = (_490 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4086 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4097 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _642 = (_349.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _643 = (_349.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _644 = (_349.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _747 = _745.x;
    float _748 = _745.y;
    float _749 = _745.z;
    float _756 = ((_728.x - _747) * _490) + _747;
    float _757 = ((_728.y - _748) * _490) + _748;
    float _758 = ((_728.z - _749) * _490) + _749;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _781 = ((_770.x - _756) * _563) + _756;
    float _782 = ((_770.y - _757) * _563) + _757;
    float _783 = ((_770.z - _758) * _563) + _758;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _808 = ((_795.z - _783) * _632) + _783;
    float _811 = ((((_795.x - _781) * _632) + _781) * 2.0) + (-1.0);
    float _812 = ((((_795.y - _782) * _632) + _782) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4108 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))));
    vec4 _836 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _848 = (_811 + ((((_703.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_836.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _849 = (_812 + ((((_703.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_836.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _852 = fma(_818, _262, fma(_849, _269, _848 * _255));
    float _855 = fma(_818, _263, fma(_849, _270, _848 * _256));
    float _858 = fma(_818, _264, fma(_849, _271, _848 * _257));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    vec4 _889 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _891 = _889.x;
    float _892 = 1.0 - _891;
    float _898 = (cbMtdParam._m0[19u].x + dot(vec4(_862 * _852, _862 * _855, _862 * _858, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_891 - _892) * cbMtdParam._m0[24u].w) + _892) * cbMtdParam._m0[21u].z);
    float _4119 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _899 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _901 = (-0.0) - cbMtdParam._m0[24u].x;
    float _903 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
    float _911 = _899 - ((_899 * TEXCOORD_8.x) * _904);
    float _912 = _899 - ((_899 * TEXCOORD_8.y) * _904);
    float _913 = _899 - ((_899 * TEXCOORD_8.z) * _904);
    float _920 = (_911 * ((_684.x * cbMtdParam._m0[18u].x) - _662)) + _662;
    float _921 = (_912 * ((_684.y * cbMtdParam._m0[18u].y) - _664)) + _664;
    float _922 = (_913 * ((_684.z * cbMtdParam._m0[18u].z) - _666)) + _666;
    float _937 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _938 = _937 * TEXCOORD.z;
    float _939 = _937 * TEXCOORD.w;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _938) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _939) + cbTextureTilingScale._m0[19u].w));
    float _953 = _951.x;
    float _954 = 1.0 - _953;
    float _982 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_953 - _954) * cbMtdParam._m0[24u].y) + _954) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4140 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _983 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _991 = ((((cbMtdParam._m0[10u].x - _920) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _983) + _920;
    float _992 = ((((cbMtdParam._m0[10u].y - _921) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _983) + _921;
    float _993 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _922)) * _983) + _922;
    float _998 = (((_703.z - _808) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _808;
    float _1002 = ((_836.z - _998) * cbMtdParam._m0[19u].w) + _998;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _1025 = (_1018.x * 2.0) + (-1.0);
    float _1026 = (_1018.y * 2.0) + (-1.0);
    float _1027 = dot(vec2(_1025, _1026), vec2(_1025, _1026));
    float _4151 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1035 = ((_1018.z - _1002) * _911) + _1002;
    float _1038 = ((cbMtdParam._m0[23u].y - _1035) * _983) + _1035;
    vec4 _1059 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _938) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _939) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1065 = (_1059.x * 2.0) + (-1.0);
    float _1066 = (_1059.y * 2.0) + (-1.0);
    float _1067 = dot(vec2(_1065, _1066), vec2(_1065, _1066));
    float _4162 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1082 = ((sqrt(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) - _818) * _913) + _818;
    float _1085 = (((_1025 - _848) * _911) + _848) + (cbMtdParam._m0[21u].x * _848);
    float _1086 = (((_1026 - _849) * _912) + _849) + (cbMtdParam._m0[21u].x * _849);
    float _1097 = (((_1065 - _1085) + (_1085 * cbMtdParam._m0[22u].z)) * _983) + _1085;
    float _1098 = (((_1066 - _1086) + (_1086 * cbMtdParam._m0[22u].z)) * _983) + _1086;
    float _1099 = (_983 * (sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) - _1082)) + _1082;
    float _1101 = cbMtdParam._m0[22u].x + _836.w;
    float _1104 = fma(_1099, _262, fma(_1098, _269, _1097 * _255));
    float _1107 = fma(_1099, _263, fma(_1098, _270, _1097 * _256));
    float _1110 = fma(_1099, _264, fma(_1098, _271, _1097 * _257));
    float _1114 = inversesqrt(dot(vec3(_1104, _1107, _1110), vec3(_1104, _1107, _1110)));
    float _1115 = _1114 * _1104;
    float _1116 = _1114 * _1107;
    float _1117 = _1114 * _1110;
    float _4173 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1118 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4195 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4206 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4217 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1136 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1186 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1176);
    float _1187 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1176);
    float _1188 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1176);
    float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
    float _1193 = _1186 * _1192;
    float _1194 = _1187 * _1192;
    float _1195 = _1188 * _1192;
    vec4 _1200 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1202 = _1200.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1356 = sqrt(((_1186 * _1186) + (_1187 * _1187)) + (_1188 * _1188));
        float _1362 = (cbMatDynParam._m0[5u].x * _1356) + cbMatDynParam._m0[5u].y;
        float _4228 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1367 = (cbMatDynParam._m0[5u].z * _1356) + cbMatDynParam._m0[5u].w;
        float _4239 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) - _1363)) + _1363) < ((_1202 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1213 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1214 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1232 = fma(_1117, cbSceneParam._m0[5u].z, fma(_1116, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1115));
    float _1235 = fma(_1117, cbSceneParam._m0[6u].z, fma(_1116, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1115));
    float _1238 = fma(_1117, cbSceneParam._m0[7u].z, fma(_1116, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1115));
    uint _1251 = _293 + 9u;
    uint _1252 = _1251 + uint(cbMatDynParam._m0[0u].w);
    float _1258 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_1252].x;
    float _1259 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_1252].y;
    float _1260 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_1252].z;
    float _4250 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1261 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1262 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1263 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    vec4 _1272 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1213, cbSceneParam._m0[86u].y * _1214));
    float _1276 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * TEXCOORD_5.w) * _1272.x;
    float _1277 = dot(vec3(_1115, _1116, _1117), vec3(_1193, _1194, _1195));
    float _1280 = _1277 * 2.0;
    float _1284 = (_1280 * _1115) - _1193;
    float _1285 = (_1280 * _1116) - _1194;
    float _1286 = (_1280 * _1117) - _1195;
    float _1290 = abs(dot(vec3(_1193, _1194, _1195), vec3(_1115, _1116, _1117)));
    float _4283 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1292 = sqrt(_1118);
    float _1305 = exp2((_1292 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1292 * 3.0));
    float _1337 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1341 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1345 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1674;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1399 = fma(_1345, cbModelParam._m0[26u].z, fma(_1341, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1337));
        float _1403 = fma(_1345, cbModelParam._m0[27u].z, fma(_1341, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1337));
        float _1407 = fma(_1345, cbModelParam._m0[28u].z, fma(_1341, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1337));
        float _1432 = _1337 + _1115;
        float _1433 = _1341 + _1116;
        float _1434 = _1345 + _1117;
        float _1444 = fma(_1434, cbModelParam._m0[26u].z, fma(_1433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1432)) - _1399;
        float _1445 = fma(_1434, cbModelParam._m0[27u].z, fma(_1433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1432)) - _1403;
        float _1446 = fma(_1434, cbModelParam._m0[28u].z, fma(_1433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1432)) - _1407;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1399 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1403 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[34u].z) + ((((((_1407 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1502 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1468.x + (-0.5));
        float _1504 = _1502 * (_1468.y + (-0.5));
        float _1505 = _1502 * (_1468.z + (-0.5));
        float _1512 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1475.x + (-0.5));
        float _1514 = _1512 * (_1475.y + (-0.5));
        float _1515 = _1512 * (_1475.z + (-0.5));
        float _1522 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1482.x + (-0.5));
        float _1524 = _1522 * (_1482.y + (-0.5));
        float _1525 = _1522 * (_1482.z + (-0.5));
        float _1532 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1489.x + (-0.5));
        float _1534 = _1532 * (_1489.y + (-0.5));
        float _1535 = _1532 * (_1489.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1556 = (dot(vec3(_1115, _1116, _1117), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1566 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4331 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1568 + 1.0))) + _1573) * _1536;
        float _1583 = _1504 * 0.5;
        float _1584 = _1514 * 0.5;
        float _1585 = _1524 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_1115, _1116, _1117), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4364 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1610 + 1.0))) + _1615) * _1537;
        float _1625 = _1505 * 0.5;
        float _1626 = _1515 * 0.5;
        float _1627 = _1525 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_1115, _1116, _1117), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4397 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1652 + 1.0))) + _1657) * _1538;
        _1674 = _1505;
        _1676 = _1504;
        _1677 = _1503;
        _1678 = _1515;
        _1679 = _1514;
        _1680 = _1513;
        _1681 = _1525;
        _1682 = _1524;
        _1683 = _1523;
        _1684 = _1538;
        _1685 = _1537;
        _1686 = _1536;
        _1687 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1688 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1689 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1675;
        _1676 = _1675;
        _1677 = _1675;
        _1678 = _1675;
        _1679 = _1675;
        _1680 = _1675;
        _1681 = _1675;
        _1682 = _1675;
        _1683 = _1675;
        _1684 = _1675;
        _1685 = _1675;
        _1686 = _1675;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1984;
    float _1985;
    float _1986;
    float _1987;
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    float _1993;
    float _1994;
    float _1995;
    float _1996;
    float _1997;
    float _1998;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1715 = fma(_1345, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337));
        float _1719 = fma(_1345, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337));
        float _1723 = fma(_1345, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337));
        float _1746 = _1337 + _1115;
        float _1747 = _1341 + _1116;
        float _1748 = _1345 + _1117;
        float _1758 = fma(_1748, cbModelParam._m0[30u].z, fma(_1747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1746)) - _1715;
        float _1759 = fma(_1748, cbModelParam._m0[31u].z, fma(_1747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1746)) - _1719;
        float _1760 = fma(_1748, cbModelParam._m0[32u].z, fma(_1747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1746)) - _1723;
        float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
        float _1777 = ((_1764 * _1758) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1715 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1778 = ((_1764 * _1759) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1719 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1779 = ((_1764 * _1760) / cbModelParam._m0[35u].z) + ((((((_1723 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1781 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1777, _1778, _1779), 0.0);
        vec4 _1788 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1777, _1778, _1779), 0.0);
        vec4 _1795 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1777, _1778, _1779), 0.0);
        vec4 _1802 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1777, _1778, _1779), 0.0);
        float _1814 = exp2((_1781.w + (-0.5)) * 20.0) * 2.0;
        float _1815 = _1814 * (_1781.x + (-0.5));
        float _1816 = _1814 * (_1781.y + (-0.5));
        float _1817 = _1814 * (_1781.z + (-0.5));
        float _1824 = exp2((_1788.w + (-0.5)) * 20.0) * 2.0;
        float _1825 = _1824 * (_1788.x + (-0.5));
        float _1826 = _1824 * (_1788.y + (-0.5));
        float _1827 = _1824 * (_1788.z + (-0.5));
        float _1834 = exp2((_1795.w + (-0.5)) * 20.0) * 2.0;
        float _1835 = _1834 * (_1795.x + (-0.5));
        float _1836 = _1834 * (_1795.y + (-0.5));
        float _1837 = _1834 * (_1795.z + (-0.5));
        float _1844 = exp2((_1802.w + (-0.5)) * 20.0) * 2.0;
        float _1845 = _1844 * (_1802.x + (-0.5));
        float _1846 = _1844 * (_1802.y + (-0.5));
        float _1847 = _1844 * (_1802.z + (-0.5));
        float _1848 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1849 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1850 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1851 = _1815 * 0.5;
        float _1852 = _1825 * 0.5;
        float _1853 = _1835 * 0.5;
        float _1854 = dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853));
        float _1859 = (_1854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1854);
        float _1867 = (dot(vec3(_1115, _1116, _1117), vec3(_1859 * _1851, _1859 * _1852, _1859 * _1853)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853)) / (_1848 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1878 = _1877 * 2.0;
        float _1882 = (1.0 - _1877) / (_1877 + 1.0);
        float _4460 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1892 = ((((1.0 - _1883) * (_1878 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1878 + 1.0))) + _1883) * _1848;
        float _1893 = _1816 * 0.5;
        float _1894 = _1826 * 0.5;
        float _1895 = _1836 * 0.5;
        float _1896 = dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895));
        float _1901 = (_1896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1896);
        float _1909 = (dot(vec3(_1115, _1116, _1117), vec3(_1901 * _1893, _1901 * _1894, _1901 * _1895)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1918 = sqrt(((_1894 * _1894) + (_1893 * _1893)) + (_1895 * _1895)) / (_1849 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1920 = _1919 * 2.0;
        float _1924 = (1.0 - _1919) / (_1919 + 1.0);
        float _4493 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1934 = ((((1.0 - _1925) * (_1920 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1920 + 1.0))) + _1925) * _1849;
        float _1935 = _1817 * 0.5;
        float _1936 = _1827 * 0.5;
        float _1937 = _1837 * 0.5;
        float _1938 = dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937));
        float _1943 = (_1938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1938);
        float _1951 = (dot(vec3(_1115, _1116, _1117), vec3(_1943 * _1935, _1943 * _1936, _1943 * _1937)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1960 = sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937)) / (_1850 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1962 = _1961 * 2.0;
        float _1966 = (1.0 - _1961) / (_1961 + 1.0);
        float _4526 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1976 = ((((1.0 - _1967) * (_1962 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1962 + 1.0))) + _1967) * _1850;
        _1984 = _1817;
        _1985 = _1816;
        _1986 = _1815;
        _1987 = _1827;
        _1988 = _1826;
        _1989 = _1825;
        _1990 = _1837;
        _1991 = _1836;
        _1992 = _1835;
        _1993 = _1850;
        _1994 = _1849;
        _1995 = _1848;
        _1996 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)));
        _1997 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)));
        _1998 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)));
    }
    else
    {
        _1984 = _1675;
        _1985 = _1675;
        _1986 = _1675;
        _1987 = _1675;
        _1988 = _1675;
        _1989 = _1675;
        _1990 = _1675;
        _1991 = _1675;
        _1992 = _1675;
        _1993 = _1675;
        _1994 = _1675;
        _1995 = _1675;
        _1996 = 0.0;
        _1997 = 0.0;
        _1998 = 0.0;
    }
    float _2008 = (cbModelParam._m0[1u].x * (_1996 - _1687)) + _1687;
    float _2009 = (cbModelParam._m0[1u].x * (_1997 - _1688)) + _1688;
    float _2010 = (cbModelParam._m0[1u].x * (_1998 - _1689)) + _1689;
    float _2031 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2008));
    float _2052 = _1284 * 0.5;
    float _2053 = _1285 * 0.5;
    float _2054 = _1286 * 0.5;
    float _2055 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1986, _1989, _1992, _1995));
    float _2058 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1985, _1988, _1991, _1994));
    float _2061 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1984, _1987, _1990, _1993));
    float _2095;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2068 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1674, _1678, _1681, _1684));
        float _2072 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1676, _1679, _1682, _1685));
        float _2076 = dot(vec4(_2052, _2053, _2054, 1.0), vec4(_1677, _1680, _1683, _1686));
        float _2083 = dot(vec4(cbModelParam._m0[39u]), vec4(_2052, _2053, _2054, 1.0));
        _2095 = dot(vec3(isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)), isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)), isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2083) ? 0.0 : (isnan(0.0) ? _2083 : max(0.0, _2083))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2095 = 1.0;
    }
    float _2106;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2097 = dot(vec4(cbModelParam._m0[40u]), vec4(_2052, _2053, _2054, 1.0));
        _2106 = dot(vec3(isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)), isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)), isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2097) ? 0.0 : (isnan(0.0) ? _2097 : max(0.0, _2097))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2106 = 1.0;
    }
    float _2110 = (_2106 * cbModelParam._m0[1u].x) + (_2095 * (1.0 - cbModelParam._m0[1u].x));
    float _2120 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1118);
    float _2121 = isnan(_2120) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2120 : min(cbModelParam._m0[25u].z, _2120));
    float _2201;
    float _2203;
    float _2205;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2168 = fma(_1345, cbModelParam._m0[13u].z, fma(_1341, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1337)) + cbModelParam._m0[13u].w;
        float _2172 = fma(_1345, cbModelParam._m0[14u].z, fma(_1341, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1337)) + cbModelParam._m0[14u].w;
        float _2176 = fma(_1345, cbModelParam._m0[15u].z, fma(_1341, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1337)) + cbModelParam._m0[15u].w;
        float _2179 = fma(_1286, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1284));
        float _2182 = fma(_1286, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1284));
        float _2185 = fma(_1286, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1284));
        float _2213;
        if (_2179 > 0.0)
        {
            _2213 = abs((1.0 - _2168) / _2179);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2168 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2213 = frontier_phi_17_15_ladder;
        }
        float _2413;
        if (_2182 > 0.0)
        {
            _2413 = abs((1.0 - _2172) / _2182);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2172 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2413 = frontier_phi_26_22_ladder;
        }
        float _2656;
        if (_2185 > 0.0)
        {
            _2656 = abs((1.0 - _2176) / _2185);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2176 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2656 = frontier_phi_38_33_ladder;
        }
        float _2658 = isnan(_2413) ? _2213 : (isnan(_2213) ? _2413 : min(_2213, _2413));
        float _2659 = isnan(_2656) ? _2658 : (isnan(_2658) ? _2656 : min(_2658, _2656));
        float _2663 = (_2659 * _2179) + _2168;
        float _2664 = (_2659 * _2182) + _2172;
        float _2665 = (_2659 * _2185) + _2176;
        float _2666 = _2659 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2666;
        float _2670 = _2666 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 > _2670) || ((_2664 < _2668) || ((_2663 < _2668) || (_2663 > _2670))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2665, cbModelParam._m0[9u].z, fma(_2664, cbModelParam._m0[9u].y, _2663 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2665, cbModelParam._m0[10u].z, fma(_2664, cbModelParam._m0[10u].y, _2663 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2665, cbModelParam._m0[11u].z, fma(_2664, cbModelParam._m0[11u].y, _2663 * cbModelParam._m0[11u].x))), _2121);
            frontier_phi_16_38_ladder = _2789.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2789.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2789.x * cbModelParam._m0[1u].y;
        }
        _2201 = frontier_phi_16_38_ladder_2;
        _2203 = frontier_phi_16_38_ladder_1;
        _2205 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1284, _1285, _1286), _2121);
        _2201 = _2189.x * cbModelParam._m0[1u].y;
        _2203 = _2189.y * cbModelParam._m0[1u].y;
        _2205 = _2189.z * cbModelParam._m0[1u].y;
    }
    float _2209 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1118);
    float _2210 = isnan(_2209) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2209 : min(cbModelParam._m0[25u].w, _2209));
    float _2299;
    float _2301;
    float _2303;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2263 = fma(_1345, cbModelParam._m0[21u].z, fma(_1341, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1337)) + cbModelParam._m0[21u].w;
        float _2267 = fma(_1345, cbModelParam._m0[22u].z, fma(_1341, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1337)) + cbModelParam._m0[22u].w;
        float _2271 = fma(_1345, cbModelParam._m0[23u].z, fma(_1341, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1337)) + cbModelParam._m0[23u].w;
        float _2274 = fma(_1286, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1284));
        float _2277 = fma(_1286, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1284));
        float _2280 = fma(_1286, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1284));
        float _2418;
        if (_2274 > 0.0)
        {
            _2418 = abs((1.0 - _2263) / _2274);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2274 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2263 + 1.0) / _2274);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2418 = frontier_phi_28_24_ladder;
        }
        float _2683;
        if (_2277 > 0.0)
        {
            _2683 = abs((1.0 - _2267) / _2277);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2277 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2267 + 1.0) / _2277);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2683 = frontier_phi_40_35_ladder;
        }
        float _2888;
        if (_2280 > 0.0)
        {
            _2888 = abs((1.0 - _2271) / _2280);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2280 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2271 + 1.0) / _2280);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2888 = frontier_phi_49_46_ladder;
        }
        float _2890 = isnan(_2683) ? _2418 : (isnan(_2418) ? _2683 : min(_2418, _2683));
        float _2891 = isnan(_2888) ? _2890 : (isnan(_2890) ? _2888 : min(_2890, _2888));
        float _2895 = (_2891 * _2274) + _2263;
        float _2896 = (_2891 * _2277) + _2267;
        float _2897 = (_2891 * _2280) + _2271;
        float _2898 = _2891 * 9.9999997473787516355514526367188e-05;
        float _2899 = (-1.0) - _2898;
        float _2901 = _2898 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2897 > _2901) || ((_2897 < _2899) || ((_2896 > _2901) || ((_2896 < _2899) || ((_2895 < _2899) || (_2895 > _2901))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2897, cbModelParam._m0[17u].z, fma(_2896, cbModelParam._m0[17u].y, _2895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2897, cbModelParam._m0[18u].z, fma(_2896, cbModelParam._m0[18u].y, _2895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2897, cbModelParam._m0[19u].z, fma(_2896, cbModelParam._m0[19u].y, _2895 * cbModelParam._m0[19u].x))), _2210);
            frontier_phi_25_49_ladder = _3096.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3096.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3096.x * cbModelParam._m0[1u].z;
        }
        _2299 = frontier_phi_25_49_ladder_2;
        _2301 = frontier_phi_25_49_ladder_1;
        _2303 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2283 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1284, _1285, _1286), _2210);
        _2299 = _2283.x * cbModelParam._m0[1u].z;
        _2301 = _2283.y * cbModelParam._m0[1u].z;
        _2303 = _2283.z * cbModelParam._m0[1u].z;
    }
    float _2315 = ((((1.0 - _1305) * ((_1292 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1305 * _1292)) * _1276;
    float _2316 = _2315 * ((cbModelParam._m0[1u].w * (_2299 - _2201)) + _2201);
    float _2317 = _2315 * ((cbModelParam._m0[1u].w * (_2301 - _2203)) + _2203);
    float _2318 = _2315 * ((cbModelParam._m0[1u].w * (_2303 - _2205)) + _2205);
    float _2321 = fma(_2318, cbSceneParam._m0[89u].z, fma(_2317, cbSceneParam._m0[89u].y, _2316 * cbSceneParam._m0[89u].x));
    float _2324 = fma(_2318, cbSceneParam._m0[90u].z, fma(_2317, cbSceneParam._m0[90u].y, _2316 * cbSceneParam._m0[90u].x));
    float _2327 = fma(_2318, cbSceneParam._m0[91u].z, fma(_2317, cbSceneParam._m0[91u].y, _2316 * cbSceneParam._m0[91u].x));
    uvec4 _2337 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2339 = _2337.x * 14u;
    uint _2340 = _2339 + 13u;
    float _2347 = _1276 + (-1.0);
    float _2352 = (cbLight._m0[_2340].x * _2347) + 1.0;
    float _2353 = (cbLight._m0[_2340].y * _2347) + 1.0;
    float _2354 = (cbLight._m0[_2340].z * _2347) + 1.0;
    float _2355 = (cbLight._m0[_2340].w * _2347) + 1.0;
    uint _2356 = _2339 + 5u;
    float _2362 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2366 = _2339 + 4u;
    float _2372 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2376 = _2339 | 1u;
    float _2387 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_1115, _1116, _1117));
    float _2390 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_1115, _1116, _1117));
    float _4662 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _4673 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2395 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * 0.3183098733425140380859375;
    float _2397 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * 0.3183098733425140380859375;
    float _2404 = ((cbLight._m0[_2356].x * _2362) * _2397) + ((cbLight._m0[_2366].x * _2372) * _2395);
    float _2405 = ((_2362 * cbLight._m0[_2356].y) * _2397) + ((_2372 * cbLight._m0[_2366].y) * _2395);
    float _2406 = ((_2362 * cbLight._m0[_2356].z) * _2397) + ((_2372 * cbLight._m0[_2366].z) * _2395);
    uvec4 _2410 = floatBitsToUint(cbLight._m0[_2339 + 12u]);
    bool _2412 = _2410.x == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2412)
    {
        _2423 = _2404;
        _2425 = _2405;
        _2427 = _2406;
    }
    else
    {
        uint _2431 = _2339 + 6u;
        float _2447 = (dot(vec3(cbLight._m0[_2339 + 2u].xyz), vec3(_1115, _1116, _1117)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4684 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2450 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2423 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2404;
        _2425 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2405;
        _2427 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2406;
    }
    bool _2430 = _2410.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2430)
    {
        _2468 = _2423;
        _2470 = _2425;
        _2472 = _2427;
    }
    else
    {
        uint _2627 = _2339 + 7u;
        float _2643 = (dot(vec3(cbLight._m0[_2339 + 3u].xyz), vec3(_1115, _1116, _1117)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _4700 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2646 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2468 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2423;
        _2470 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2425;
        _2472 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2427;
    }
    uint _2475 = _2339 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _1118) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2339].x + _1193;
    float _2491 = cbLight._m0[_2339].y + _1194;
    float _2492 = cbLight._m0[_2339].z + _1195;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2339].xyz));
    float _4716 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _4727 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _2504 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2505 = dot(vec3(_1115, _1116, _1117), vec3(_2497, _2498, _2499));
    float _4738 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2497, _2498, _2499));
    float _4749 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2529 = 1.0 - _2489;
    float _2540 = (0.5 / (((_2504 * ((_2503 * _2529) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2529) + _2489) * _2503))) * _2503;
    float _4760 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2553 = _2339 + 9u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _1118) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2376].x + _1193;
    float _2567 = cbLight._m0[_2376].y + _1194;
    float _2568 = cbLight._m0[_2376].z + _1195;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2376].xyz));
    float _4771 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2580 = dot(vec3(_1115, _1116, _1117), vec3(_2573, _2574, _2575));
    float _4782 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2573, _2574, _2575));
    float _4793 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2565 * _2565;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2602 = 1.0 - _2565;
    float _2612 = (0.5 / (((_2504 * ((_2579 * _2602) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2602) + _2565) * _2579))) * _2579;
    float _4804 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2614 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    float _2624 = (((_2601 * cbLight._m0[_2553].x) * _2614) * _2362) + (((_2528 * cbLight._m0[_2475].x) * _2542) * _2372);
    float _2625 = (((_2601 * cbLight._m0[_2553].y) * _2614) * _2362) + (((_2528 * cbLight._m0[_2475].y) * _2542) * _2372);
    float _2626 = (((_2601 * cbLight._m0[_2553].z) * _2614) * _2362) + (((_2528 * cbLight._m0[_2475].z) * _2542) * _2372);
    float _2688;
    float _2690;
    float _2692;
    if (_2412)
    {
        _2688 = _2624;
        _2690 = _2625;
        _2692 = _2626;
    }
    else
    {
        uint _2694 = _2339 + 2u;
        uint _2698 = _2339 + 10u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _1118) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _1193;
        float _2715 = cbLight._m0[_2694].y + _1194;
        float _2716 = cbLight._m0[_2694].z + _1195;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2694].xyz));
        float _4815 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2728 = dot(vec3(_1115, _1116, _1117), vec3(_2721, _2722, _2723));
        float _4826 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4837 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2749 = (exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2750 = 1.0 - _2713;
        float _2760 = (0.5 / (((_2504 * ((_2727 * _2750) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2750) + _2713) * _2727))) * _2727;
        float _4848 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2688 = (((_2749 * cbLight._m0[_2698].x) * _2762) * _2763) + _2624;
        _2690 = (((_2749 * cbLight._m0[_2698].y) * _2762) * _2763) + _2625;
        _2692 = (((_2749 * cbLight._m0[_2698].z) * _2762) * _2763) + _2626;
    }
    float _2798;
    float _2800;
    float _2802;
    if (_2430)
    {
        _2798 = _2688;
        _2800 = _2690;
        _2802 = _2692;
    }
    else
    {
        uint _2809 = _2339 + 3u;
        uint _2813 = _2339 + 11u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _1118) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _1193;
        float _2830 = cbLight._m0[_2809].y + _1194;
        float _2831 = cbLight._m0[_2809].z + _1195;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2809].xyz));
        float _4864 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2843 = dot(vec3(_1115, _1116, _1117), vec3(_2836, _2837, _2838));
        float _4875 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4886 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2864 = (exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2865 = 1.0 - _2828;
        float _2875 = (0.5 / (((_2504 * ((_2842 * _2865) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2865) + _2828) * _2842))) * _2842;
        float _4897 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2798 = (((_2864 * cbLight._m0[_2813].x) * _2877) * _2878) + _2688;
        _2800 = (((_2864 * cbLight._m0[_2813].y) * _2877) * _2878) + _2690;
        _2802 = (((_2864 * cbLight._m0[_2813].z) * _2877) * _2878) + _2692;
    }
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_2337.y == 0u)
    {
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2953;
        float _2955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2953;
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2953;
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.x;
        uint _2980 = uint((float(_2968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1214) / _2969))) + floor(float(uint(cbSceneParam._m0[85u].x * _1213) / _2969)));
        float _2990 = (log2(_2956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2991 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        uint _2994 = uint(isnan(14.0) ? _2991 : (isnan(_2991) ? 14.0 : min(_2991, 14.0)));
        uvec4 _2999 = texelFetch(g_lightClusterGridBuffer, int(((_2994 << 2u) + (_2980 << 6u)) >> 2u));
        uint _3000 = _2999.x;
        uint _3001 = _2968.z;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((((1u << ((_3001 >> 4u) & 15u)) + 4294967295u) & _3000) == 0u) || ((_3001 & 240u) == 0u))
        {
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
        }
        else
        {
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            uint _3259 = 0u;
            uint _3268;
            bool _3269;
            for (;;)
            {
                _3268 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                _3269 = _3268 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3269)
                {
                    frontier_phi_66_pred = _3253;
                    frontier_phi_66_pred_1 = _3258;
                    frontier_phi_66_pred_2 = _3257;
                    frontier_phi_66_pred_3 = _3256;
                    frontier_phi_66_pred_4 = _3255;
                    frontier_phi_66_pred_5 = _3254;
                }
                else
                {
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    uint _3404;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3268;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3408 = uint(findLSB(_3404)) + (_3259 << 5u);
                        uint _3405 = (_3404 + 4294967295u) & _3404;
                        uint _3410 = _3408 * 48u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3430 = (_3408 * 48u) + 4u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3449 = (_3408 * 48u) + 8u;
                        vec3 _3460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x));
                        float _3464 = _3424.x - _2954;
                        float _3465 = _3424.y - _2955;
                        float _3466 = _3424.z - _2956;
                        float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                        float _3470 = inversesqrt(_3467);
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3474 = dot(vec3(_1232, _1235, _1238), vec3(_3471, _3472, _3473));
                        float _3479 = 1.0 - (_3467 * _3424.w);
                        float _4923 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3481 = sqrt(_3467) * _3443.w;
                        float _3484 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3474) + _3485;
                        float _3491 = _3481 * _3481;
                        float _3495 = ((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3480) / ((_3491 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2954;
                        float _3500 = (-0.0) - _2955;
                        float _3501 = (-0.0) - _2956;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3516 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                        float _3517 = 1.0 - _1292;
                        float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                        float _3525 = _3524 * _3524;
                        float _3526 = _3525 * _3525;
                        float _3527 = _3506 + _3471;
                        float _3528 = _3507 + _3472;
                        float _3529 = _3508 + _3473;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3537 = dot(vec3(_1232, _1235, _1238), vec3(_3506, _3507, _3508));
                        float _4939 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3541 = dot(vec3(_1232, _1235, _1238), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                        float _4950 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                        float _3549 = _3484 * _3525;
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3474) + _3550;
                        float _4961 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3555 = 1.0 - _3525;
                        float _3565 = (0.5 / (((_3554 * ((_3540 * _3555) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3525) * _3540))) * _3554;
                        float _4972 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3576 = (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3548 * _3548) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125))) * _3480;
                        _3328 = (_3495 * _3443.x) + _3401;
                        _3329 = (_3495 * _3443.y) + _3402;
                        _3330 = (_3495 * _3443.z) + _3403;
                        _3325 = (_3576 * _3460.x) + _3398;
                        _3326 = (_3576 * _3460.y) + _3399;
                        _3327 = (_3576 * _3460.z) + _3400;
                        if (_3405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3405;
                        }
                    }
                    frontier_phi_66_pred = _3325;
                    frontier_phi_66_pred_1 = _3330;
                    frontier_phi_66_pred_2 = _3329;
                    frontier_phi_66_pred_3 = _3328;
                    frontier_phi_66_pred_4 = _3327;
                    frontier_phi_66_pred_5 = _3326;
                }
                _3102 = frontier_phi_66_pred;
                _3112 = frontier_phi_66_pred_1;
                _3110 = frontier_phi_66_pred_2;
                _3108 = frontier_phi_66_pred_3;
                _3106 = frontier_phi_66_pred_4;
                _3104 = frontier_phi_66_pred_5;
                uint _3260 = _3259 + 1u;
                if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3253 = _3102;
                    _3254 = _3104;
                    _3255 = _3106;
                    _3256 = _3108;
                    _3257 = _3110;
                    _3258 = _3112;
                    _3259 = _3260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
        }
        uvec4 _3115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3116 = _3115.z;
        uint _3118 = (_3116 >> 8u) & 15u;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((4294967295u << _3118) & _3000) == 0u)
        {
            _3221 = _3101;
            _3223 = _3103;
            _3225 = _3105;
            _3227 = _3107;
            _3229 = _3109;
            _3231 = _3111;
        }
        else
        {
            float _3246 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
            float _3247 = _3246 * _2954;
            float _3248 = _3246 * _2955;
            float _3249 = _3246 * _2956;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3118 < ((_3116 >> 12u) & 15u))
            {
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3381 = _3101;
                float _3382 = _3103;
                float _3383 = _3105;
                float _3384 = _3107;
                float _3385 = _3109;
                float _3386 = _3111;
                uint _3387 = _3118;
                uint _3396;
                bool _3397;
                for (;;)
                {
                    _3396 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                    _3397 = _3396 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3397)
                    {
                        frontier_phi_77_pred = _3386;
                        frontier_phi_77_pred_1 = _3385;
                        frontier_phi_77_pred_2 = _3384;
                        frontier_phi_77_pred_3 = _3383;
                        frontier_phi_77_pred_4 = _3382;
                        frontier_phi_77_pred_5 = _3381;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        uint _3609 = _3396;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3693;
                        float _3739;
                        bool _3740;
                        for (;;)
                        {
                            uint _3620 = ((_3387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3620 * 40u) + 20u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3620 * 40u) + 24u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3714 = (_3620 * 40u) + 28u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            _3739 = fma(_2956, _3727.z, fma(_2955, _3727.y, _3727.x * _2954)) + _3727.w;
                            _3740 = !((fma(_2956, _3708.z, fma(_2955, _3708.y, _3708.x * _2954)) + _3708.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3740)
                            {
                                float _3767 = _3635.x - _2954;
                                float _3768 = _3635.y - _2955;
                                float _3769 = _3635.z - _2956;
                                float _3770 = dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769));
                                float _3773 = inversesqrt(_3770);
                                float _3774 = _3773 * _3767;
                                float _3775 = _3773 * _3768;
                                float _3776 = _3773 * _3769;
                                float _3780 = 1.0 - (_3770 / (_3636 * _3636));
                                float _4983 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3785 = sqrt(_3770) * _3651.w;
                                float _3787 = 1.39999997615814208984375 / (_3785 + 1.39999997615814208984375);
                                float _3788 = _3787 * _3787;
                                float _3791 = ((1.0 - _3788) * dot(vec3(_3774, _3775, _3776), vec3(_1232, _1235, _1238))) + _3788;
                                float _3794 = _3785 * _3785;
                                float _3798 = (fma(_2956, _3678.z, fma(_2955, _3678.y, _3678.x * _2954)) + _3678.w) / _3739;
                                float _3799 = (fma(_2956, _3693.z, fma(_2955, _3693.y, _3693.x * _2954)) + _3693.w) / _3739;
                                float _3803 = 1.0 - dot(vec2(_3798, _3799), vec2(_3798, _3799));
                                float _4999 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3805 = _3804 * (((isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0))) * _3781) / ((_3794 * 0.699999988079071044921875) + 1.0));
                                float _3817 = exp2(log2(1.0 / ((_3794 * 3.5) + 5.0)) * 0.25);
                                float _3818 = 1.0 - _1292;
                                float _3825 = sqrt(1.0 - ((1.0 - (_3818 * _3818)) * (1.0 - (_3817 * _3817))));
                                float _3826 = _3825 * _3825;
                                float _3827 = _3826 * _3826;
                                float _3828 = _3774 - _3247;
                                float _3829 = _3775 - _3248;
                                float _3830 = _3776 - _3249;
                                float _3834 = inversesqrt(dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830)));
                                float _3838 = dot(vec3(_1232, _1235, _1238), vec3((-0.0) - _3247, (-0.0) - _3248, (-0.0) - _3249));
                                float _5010 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3842 = dot(vec3(_1232, _1235, _1238), vec3(_3834 * _3828, _3834 * _3829, _3834 * _3830));
                                float _5021 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3849 = ((_3845 * _3845) * (_3827 + (-1.0))) + 1.0;
                                float _3850 = _3787 * _3826;
                                float _3851 = _3850 * _3850;
                                float _3857 = ((1.0 - _3851) * dot(vec3(_1232, _1235, _1238), vec3(_3774, _3775, _3776))) + _3851;
                                float _5032 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3859 = 1.0 - _3826;
                                float _3869 = (0.5 / (((_3858 * ((_3841 * _3859) + _3826)) + 9.9999999392252902907785028219223e-09) + (((_3858 * _3859) + _3826) * _3841))) * _3858;
                                float _5043 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3879 = (_3804 * _3781) * (((_3827 * 3.1415927410125732421875) * (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0)))) / ((_3849 * _3849) * ((_3794 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3805 * _3651.y;
                                frontier_phi_83_pred_1 = _3805 * _3651.x;
                                frontier_phi_83_pred_2 = _3879 * _3663.z;
                                frontier_phi_83_pred_3 = _3879 * _3663.y;
                                frontier_phi_83_pred_4 = _3879 * _3663.x;
                                frontier_phi_83_pred_5 = _3805 * _3651.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_83_pred;
                            _3886 = frontier_phi_83_pred_1;
                            _3885 = frontier_phi_83_pred_2;
                            _3884 = frontier_phi_83_pred_3;
                            _3883 = frontier_phi_83_pred_4;
                            _3888 = frontier_phi_83_pred_5;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3595;
                        frontier_phi_77_pred_1 = _3594;
                        frontier_phi_77_pred_2 = _3593;
                        frontier_phi_77_pred_3 = _3592;
                        frontier_phi_77_pred_4 = _3591;
                        frontier_phi_77_pred_5 = _3590;
                    }
                    _3232 = frontier_phi_77_pred;
                    _3230 = frontier_phi_77_pred_1;
                    _3228 = frontier_phi_77_pred_2;
                    _3226 = frontier_phi_77_pred_3;
                    _3224 = frontier_phi_77_pred_4;
                    _3222 = frontier_phi_77_pred_5;
                    uint _3388 = _3387 + 1u;
                    if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3381 = _3222;
                        _3382 = _3224;
                        _3383 = _3226;
                        _3384 = _3228;
                        _3385 = _3230;
                        _3386 = _3232;
                        _3387 = _3388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3226;
                frontier_phi_58_59_ladder_1 = _3232;
                frontier_phi_58_59_ladder_2 = _3230;
                frontier_phi_58_59_ladder_3 = _3228;
                frontier_phi_58_59_ladder_4 = _3224;
                frontier_phi_58_59_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_58_59_ladder = _3105;
                frontier_phi_58_59_ladder_1 = _3111;
                frontier_phi_58_59_ladder_2 = _3109;
                frontier_phi_58_59_ladder_3 = _3107;
                frontier_phi_58_59_ladder_4 = _3103;
                frontier_phi_58_59_ladder_5 = _3101;
            }
            _3221 = frontier_phi_58_59_ladder_5;
            _3223 = frontier_phi_58_59_ladder_4;
            _3225 = frontier_phi_58_59_ladder;
            _3227 = frontier_phi_58_59_ladder_3;
            _3229 = frontier_phi_58_59_ladder_2;
            _3231 = frontier_phi_58_59_ladder_1;
        }
        float _3236 = isnan(1.0) ? _1276 : (isnan(_1276) ? 1.0 : min(_1276, 1.0));
        _3013 = (_3236 * _3227) + _2468;
        _3015 = (_3236 * _3229) + _2470;
        _3017 = (_3236 * _3231) + _2472;
        _3019 = ((_3221 * 0.039999999105930328369140625) * _3236) + _2798;
        _3021 = ((_3223 * 0.039999999105930328369140625) * _3236) + _2800;
        _3023 = ((_3225 * 0.039999999105930328369140625) * _3236) + _2802;
    }
    else
    {
        _3013 = _2468;
        _3015 = _2470;
        _3017 = _2472;
        _3019 = _2798;
        _3021 = _2800;
        _3023 = _2802;
    }
    float _5059 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _5070 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _5081 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _3040 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3013 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1276))) + ((_3019 + ((isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))) * _2110)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3015 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1276))) + ((_3021 + ((isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0))) * _2110)) * cbPerFrame._m0[3u].x);
    float _3042 = ((isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (_3017 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1276))) + ((_3023 + ((isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0))) * _2110)) * cbPerFrame._m0[3u].x);
    uint _3043 = _293 + 6u;
    float _3051 = _1213 / cbSceneParam._m0[86u].x;
    float _3052 = _1214 / cbSceneParam._m0[86u].y;
    vec4 _3066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, (log2((isnan(cbSceneParam._m0[77u].w) ? _1136 : (isnan(_1136) ? cbSceneParam._m0[77u].w : min(_1136, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3068 = _3066.x;
    float _3069 = _3066.y;
    float _3070 = _3066.z;
    float _3071 = _3066.w;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_1136 > cbSceneParam._m0[78u].w)
    {
        float _3126 = isnan(_1136) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1136 : min(cbSceneParam._m0[80u].w, _1136));
        float _3127 = _3126 / _1136;
        float _3138 = _3127 * _1186;
        float _3139 = _1187 * _3127;
        float _3140 = (-0.0) - _3139;
        float _3141 = _3127 * _1188;
        float _3143 = (cbSceneParam._m0[77u].w * _3140) / _3126;
        float _3144 = _3143 + cbSceneParam._m0[79u].w;
        float _3145 = cbSceneParam._m0[79u].w - _3139;
        float _3151 = sqrt(((_3138 * _3138) + (_3139 * _3139)) + (_3141 * _3141));
        float _3154 = (1.0 - (cbSceneParam._m0[77u].w / _3126)) * _3151;
        float _3159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3140 - _3143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3144 > 0.0) ? exp2(_3159 * _3144) : (2.0 - exp2(_3161 * _3144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3154;
        }
        else
        {
            float _3282 = 1.0 / cbSceneParam._m0[80u].x;
            float _3283 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : max(_3144, _3145));
            float _3284 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : min(_3144, _3145));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            _3338 = ((abs(_3151 / _3140) * cbSceneParam._m0[80u].y) * ((((_3293 - _3294) * 2.0) - ((exp2(_3159 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0)))) - exp2(_3159 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))))) * _3282)) - ((exp2(_3161 * _3293) - exp2(_3161 * _3294)) * _3282))) + (_3154 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3071);
        _3163 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3068;
        _3165 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3069;
        _3167 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3070;
        _3169 = _3349 * _3071;
    }
    else
    {
        _3163 = _3068;
        _3165 = _3069;
        _3167 = _3070;
        _3169 = _3071;
    }
    bool _3376;
    vec4 _3179;
    vec4 _3201;
    float _3203;
    float _3207;
    float _3208;
    float _3209;
    float _3210;
    bool _3220;
    for (;;)
    {
        _3179 = cbMatDynParam._m0[0u];
        float _3181 = roundEven(_3179.y);
        bool _3182 = _3181 == 3.0;
        float _3183 = log2(_3169);
        float _3190 = exp2(_3183 * cbSceneParam._m0[78u].x) * _3040;
        float _3191 = exp2(_3183 * cbSceneParam._m0[78u].y) * _3041;
        float _3192 = exp2(_3183 * cbSceneParam._m0[78u].z) * _3042;
        float _3199 = _1202 + (-0.5);
        _3201 = cbMtdParam._m0[1u];
        _3203 = _3201.y * _3199;
        float _3206 = (_3181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3207 = _3206 * (_3182 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = _3206 * (_3182 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3165)));
        _3209 = _3206 * (_3182 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3167)));
        _3210 = _3199 * 0.999000012874603271484375;
        _3220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3220)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3210) < 0.5)
            {
                _3376 = true;
                break;
            }
        }
        uint _3317 = _1251 + uint(_3179.w);
        if ((cbInstanceData._m0[_3317].w < 1.0) && ((cbInstanceData._m0[_3317].w + _3210) < 0.5))
        {
            _3376 = true;
            break;
        }
        if ((_3203 + 1.0) < _3201.x)
        {
            _3376 = true;
            break;
        }
        _3376 = false;
        break;
    }
    float _3581;
    if (_3376)
    {
        discard_state = true;
        _3581 = 0.0;
    }
    else
    {
        _3581 = cbInstanceData._m0[_3043].w;
    }
    SV_Target.x = _3207;
    SV_Target.y = _3208;
    SV_Target.z = _3209;
    SV_Target.w = _3581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3043].w;
    discard_exit();
}


