#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1271;
float _3914;
float _3915;
float _3916;
float _3917;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3926 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3937 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3948 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3959 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _441 = (_434 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _442 = (_434 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _443 = (_434 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3970 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = fma(_547, _235, fma(_580, _242, _579 * _228));
    float _586 = fma(_547, _236, fma(_580, _243, _579 * _229));
    float _589 = fma(_547, _237, fma(_580, _244, _579 * _230));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _629 = (cbMtdParam._m0[19u].x + dot(vec4(_593 * _583, _593 * _586, _593 * _589, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_622 - _623) * cbMtdParam._m0[24u].w) + _623) * cbMtdParam._m0[21u].z);
    float _3981 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _637 = (_630 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _638 = (_630 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _639 = (_630 * (cbMtdParam._m0[17u].z - _462)) + _462;
    float _644 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _648 = ((_567.z - _644) * cbMtdParam._m0[19u].w) + _644;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _668 = (_661.x * 2.0) + (-1.0);
    float _669 = (_661.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3992 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _678 = ((_661.z - _648) * _630) + _648;
    float _688 = ((sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) - _547) * _630) + _547;
    float _691 = (((_668 - _579) * _630) + _579) + (cbMtdParam._m0[21u].x * _579);
    float _692 = (((_669 - _580) * _630) + _580) + (cbMtdParam._m0[21u].x * _580);
    float _694 = cbMtdParam._m0[22u].x + _567.w;
    float _697 = fma(_688, _235, fma(_692, _242, _691 * _228));
    float _700 = fma(_688, _236, fma(_692, _243, _691 * _229));
    float _703 = fma(_688, _237, fma(_692, _244, _691 * _230));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _4003 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _711 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4025 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4036 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4047 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _951 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _957 = (cbMatDynParam._m0[5u].x * _951) + cbMatDynParam._m0[5u].y;
        float _4058 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _962 = (cbMatDynParam._m0[5u].z * _951) + cbMatDynParam._m0[5u].w;
        float _4069 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) - _958)) + _958) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _830 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _833 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _846 = _268 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_847].z;
    float _4080 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _871 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * TEXCOORD_5.w) * _867.x;
    float _872 = dot(vec3(_708, _709, _710), vec3(_788, _789, _790));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _708) - _788;
    float _880 = (_875 * _709) - _789;
    float _881 = (_875 * _710) - _790;
    float _885 = abs(dot(vec3(_788, _789, _790), vec3(_708, _709, _710)));
    float _4113 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_711);
    float _900 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _999 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _1003 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1028 = _932 + _708;
        float _1029 = _936 + _709;
        float _1030 = _940 + _710;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _995;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _999;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1003;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_708, _709, _710), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _4161 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_708, _709, _710), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4194 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_708, _709, _710), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4227 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1317 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1321 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1344 = _932 + _708;
        float _1345 = _936 + _709;
        float _1346 = _940 + _710;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_708, _709, _710), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4290 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_708, _709, _710), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4323 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_708, _709, _710), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4356 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1271;
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = _1271;
        _1592 = _1271;
        _1593 = _1271;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1284)) + _1284;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _879 * 0.5;
    float _1651 = _880 * 0.5;
    float _1652 = _881 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1767 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1771 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1775 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1778 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1781 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1784 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1812;
        if (_1778 > 0.0)
        {
            _1812 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1812 = frontier_phi_17_15_ladder;
        }
        float _1982;
        if (_1781 > 0.0)
        {
            _1982 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1982 = frontier_phi_26_22_ladder;
        }
        float _2277;
        if (_1784 > 0.0)
        {
            _2277 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2277 = frontier_phi_38_33_ladder;
        }
        float _2279 = isnan(_1982) ? _1812 : (isnan(_1812) ? _1982 : min(_1812, _1982));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1778) + _1767;
        float _2285 = (_2280 * _1781) + _1771;
        float _2286 = (_2280 * _1784) + _1775;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_16_38_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1800 = frontier_phi_16_38_ladder_2;
        _1802 = frontier_phi_16_38_ladder_1;
        _1804 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1719);
        _1800 = _1788.x * cbModelParam._m0[1u].y;
        _1802 = _1788.y * cbModelParam._m0[1u].y;
        _1804 = _1788.z * cbModelParam._m0[1u].y;
    }
    float _1808 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1808 : min(cbModelParam._m0[25u].w, _1808));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1863 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1867 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1871 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1874 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1877 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1880 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _1987;
        if (_1874 > 0.0)
        {
            _1987 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1987 = frontier_phi_28_24_ladder;
        }
        float _2304;
        if (_1877 > 0.0)
        {
            _2304 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2304 = frontier_phi_40_35_ladder;
        }
        float _2631;
        if (_1880 > 0.0)
        {
            _2631 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2631 = frontier_phi_50_47_ladder;
        }
        float _2633 = isnan(_2304) ? _1987 : (isnan(_1987) ? _2304 : min(_1987, _2304));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1874) + _1863;
        float _2639 = (_2634 * _1877) + _1867;
        float _2640 = (_2634 * _1880) + _1871;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1809);
            frontier_phi_25_50_ladder = _2758.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2758.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2758.x * cbModelParam._m0[1u].z;
        }
        _1899 = frontier_phi_25_50_ladder_2;
        _1901 = frontier_phi_25_50_ladder_1;
        _1903 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1809);
        _1899 = _1883.x * cbModelParam._m0[1u].z;
        _1901 = _1883.y * cbModelParam._m0[1u].z;
        _1903 = _1883.z * cbModelParam._m0[1u].z;
    }
    float _1915 = ((((1.0 - _900) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_900 * _887)) * _871;
    float _1916 = _1915 * ((cbModelParam._m0[1u].w * (_1899 - _1800)) + _1800);
    float _1917 = _1915 * ((cbModelParam._m0[1u].w * (_1901 - _1802)) + _1802);
    float _1918 = _1915 * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1916 * cbSceneParam._m0[91u].x));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1974 = _1961 / _1973;
    float _1975 = _1965 / _1973;
    float _1976 = _1969 / _1973;
    float _2123;
    float _2124;
    float _2125;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2003 = ((uint(_1976 > cbSceneParam._m0[59u].y) + uint(_1976 > cbSceneParam._m0[59u].x)) + uint(_1976 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2004 = _2003 + 43u;
        uint _2012 = _2003 + 44u;
        uint _2020 = _2003 + 45u;
        uint _2028 = _2003 + 46u;
        float _2039 = fma(_1973, cbSceneParam._m0[_2004].w, fma(_1969, cbSceneParam._m0[_2004].z, fma(_1965, cbSceneParam._m0[_2004].y, _1961 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1973, cbSceneParam._m0[_2012].w, fma(_1969, cbSceneParam._m0[_2012].z, fma(_1965, cbSceneParam._m0[_2012].y, _1961 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1973, cbSceneParam._m0[_2028].w, fma(_1969, cbSceneParam._m0[_2028].z, fma(_1965, cbSceneParam._m0[_2028].y, _1961 * cbSceneParam._m0[_2028].x)));
        float _2056 = cbSceneParam._m0[33u].z * _2051;
        float _2058 = cbSceneParam._m0[33u].w * _2051;
        float _2061 = fma(_1973, cbSceneParam._m0[_2020].w, fma(_1969, cbSceneParam._m0[_2020].z, fma(_1965, cbSceneParam._m0[_2020].y, _1961 * cbSceneParam._m0[_2020].x))) / _2051;
        float _2109 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
        float _4482 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2116 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2039) / _2051, (_2058 + _2043) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2039) / _2051, (_2043 - _2056) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2056) / _2051, (_2043 - _2058) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2058) / _2051, (_2056 + _2043) / _2051), _2061), 0.0)).x), vec4(0.25)));
        _2123 = 1.0 - (_2116 * cbSceneParam._m0[34u].x);
        _2124 = 1.0 - (_2116 * cbSceneParam._m0[34u].y);
        _2125 = 1.0 - (_2116 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2123 = 1.0;
        _2124 = 1.0;
        _2125 = 1.0;
    }
    float _2189;
    float _2191;
    float _2193;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2177 = fma(_1973, cbSceneParam._m0[63u].w, fma(_1969, cbSceneParam._m0[63u].z, fma(_1965, cbSceneParam._m0[63u].y, _1961 * cbSceneParam._m0[63u].x)));
        float _2178 = fma(_1973, cbSceneParam._m0[60u].w, fma(_1969, cbSceneParam._m0[60u].z, fma(_1965, cbSceneParam._m0[60u].y, _1961 * cbSceneParam._m0[60u].x))) / _2177;
        float _2179 = fma(_1973, cbSceneParam._m0[61u].w, fma(_1969, cbSceneParam._m0[61u].z, fma(_1965, cbSceneParam._m0[61u].y, _1961 * cbSceneParam._m0[61u].x))) / _2177;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2178 >= cbSceneParam._m0[64u].x) && (_2179 >= cbSceneParam._m0[64u].y)) && (_2178 <= cbSceneParam._m0[64u].z)) && (_2179 <= cbSceneParam._m0[64u].w))
        {
            float _2317 = fma(_1973, cbSceneParam._m0[62u].w, fma(_1969, cbSceneParam._m0[62u].z, fma(_1965, cbSceneParam._m0[62u].y, _1961 * cbSceneParam._m0[62u].x))) / _2177;
            float _2321 = isnan(cbSceneParam._m0[41u].w) ? _2317 : (isnan(_2317) ? cbSceneParam._m0[41u].w : max(_2317, cbSceneParam._m0[41u].w));
            float _2364 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
            float _4498 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
            float _2371 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2178, cbSceneParam._m0[33u].w + _2179), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2178, _2179 - cbSceneParam._m0[33u].z), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].z, _2179 - cbSceneParam._m0[33u].w), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2179), _2321), 0.0)).x), vec4(0.25)));
            float _2375 = 1.0 - (_2371 * cbSceneParam._m0[34u].x);
            float _2376 = 1.0 - (_2371 * cbSceneParam._m0[34u].y);
            float _2377 = 1.0 - (_2371 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_37_36_ladder_1 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_37_36_ladder_2 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
        }
        else
        {
            frontier_phi_37_36_ladder = _2125;
            frontier_phi_37_36_ladder_1 = _2124;
            frontier_phi_37_36_ladder_2 = _2123;
        }
        _2189 = frontier_phi_37_36_ladder_2;
        _2191 = frontier_phi_37_36_ladder_1;
        _2193 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2189 = _2123;
        _2191 = _2124;
        _2193 = _2125;
    }
    uvec4 _2198 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2200 = _2198.x * 14u;
    uint _2201 = _2200 + 13u;
    float _2208 = _871 + (-1.0);
    float _2213 = (cbLight._m0[_2201].x * _2208) + 1.0;
    float _2214 = (cbLight._m0[_2201].y * _2208) + 1.0;
    float _2215 = (cbLight._m0[_2201].z * _2208) + 1.0;
    float _2216 = (cbLight._m0[_2201].w * _2208) + 1.0;
    uint _2217 = _2200 + 5u;
    float _2223 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2227 = _2200 + 4u;
    float _2236 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2240 = _2200 | 1u;
    float _2251 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_708, _709, _710));
    float _2254 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_708, _709, _710));
    float _4534 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _4545 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2259 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2261 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2268 = ((cbLight._m0[_2217].x * _2223) * _2261) + (((cbLight._m0[_2227].x * _2189) * _2236) * _2259);
    float _2269 = ((_2223 * cbLight._m0[_2217].y) * _2261) + (((cbLight._m0[_2227].y * _2191) * _2236) * _2259);
    float _2270 = ((_2223 * cbLight._m0[_2217].z) * _2261) + (((cbLight._m0[_2227].z * _2193) * _2236) * _2259);
    uvec4 _2274 = floatBitsToUint(cbLight._m0[_2200 + 12u]);
    bool _2276 = _2274.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2276)
    {
        _2378 = _2268;
        _2380 = _2269;
        _2382 = _2270;
    }
    else
    {
        uint _2386 = _2200 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2200 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4556 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2405 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2268;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2269;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2270;
    }
    bool _2385 = _2274.y == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2385)
    {
        _2440 = _2378;
        _2442 = _2380;
        _2444 = _2382;
    }
    else
    {
        uint _2602 = _2200 + 7u;
        float _2618 = (dot(vec3(cbLight._m0[_2200 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4572 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2621 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2440 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2378;
        _2442 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2380;
        _2444 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2382;
    }
    uint _2447 = _2200 + 8u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _711) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2200].x + _788;
    float _2463 = cbLight._m0[_2200].y + _789;
    float _2464 = cbLight._m0[_2200].z + _790;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2200].xyz));
    float _4588 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _4599 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2476 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2477 = dot(vec3(_708, _709, _710), vec3(_2469, _2470, _2471));
    float _4610 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2469, _2470, _2471));
    float _4621 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2461 * _2461;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2500 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2501 = 1.0 - _2461;
    float _2512 = (0.5 / (((_2476 * ((_2475 * _2501) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2501) + _2461) * _2475))) * _2475;
    float _4632 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    uint _2528 = _2200 + 9u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _711) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2240].x + _788;
    float _2542 = cbLight._m0[_2240].y + _789;
    float _2543 = cbLight._m0[_2240].z + _790;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2240].xyz));
    float _4643 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2555 = dot(vec3(_708, _709, _710), vec3(_2548, _2549, _2550));
    float _4654 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2548, _2549, _2550));
    float _4665 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2540 * _2540;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2577 = 1.0 - _2540;
    float _2587 = (0.5 / (((_2476 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2577) + _2540) * _2554))) * _2554;
    float _4676 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2589 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    float _2599 = (((_2576 * cbLight._m0[_2528].x) * _2589) * _2223) + ((((cbLight._m0[_2447].x * _2189) * _2500) * _2514) * _2236);
    float _2600 = (((_2576 * cbLight._m0[_2528].y) * _2589) * _2223) + ((((cbLight._m0[_2447].y * _2191) * _2500) * _2514) * _2236);
    float _2601 = (((_2576 * cbLight._m0[_2528].z) * _2589) * _2223) + ((((cbLight._m0[_2447].z * _2193) * _2500) * _2514) * _2236);
    float _2657;
    float _2659;
    float _2661;
    if (_2276)
    {
        _2657 = _2599;
        _2659 = _2600;
        _2661 = _2601;
    }
    else
    {
        uint _2663 = _2200 + 2u;
        uint _2667 = _2200 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _711) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _788;
        float _2684 = cbLight._m0[_2663].y + _789;
        float _2685 = cbLight._m0[_2663].z + _790;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2663].xyz));
        float _4687 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2697 = dot(vec3(_708, _709, _710), vec3(_2690, _2691, _2692));
        float _4698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4709 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2718 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2719 = 1.0 - _2682;
        float _2729 = (0.5 / (((_2476 * ((_2696 * _2719) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2719) + _2682) * _2696))) * _2696;
        float _4720 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2657 = (((_2718 * cbLight._m0[_2667].x) * _2731) * _2732) + _2599;
        _2659 = (((_2718 * cbLight._m0[_2667].y) * _2731) * _2732) + _2600;
        _2661 = (((_2718 * cbLight._m0[_2667].z) * _2731) * _2732) + _2601;
    }
    float _2763;
    float _2765;
    float _2767;
    if (_2385)
    {
        _2763 = _2657;
        _2765 = _2659;
        _2767 = _2661;
    }
    else
    {
        uint _2774 = _2200 + 3u;
        uint _2778 = _2200 + 11u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _711) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _788;
        float _2795 = cbLight._m0[_2774].y + _789;
        float _2796 = cbLight._m0[_2774].z + _790;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2774].xyz));
        float _4736 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2808 = dot(vec3(_708, _709, _710), vec3(_2801, _2802, _2803));
        float _4747 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4758 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2829 = (exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2830 = 1.0 - _2793;
        float _2840 = (0.5 / (((_2476 * ((_2807 * _2830) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2830) + _2793) * _2807))) * _2807;
        float _4769 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2763 = (((_2829 * cbLight._m0[_2778].x) * _2842) * _2843) + _2657;
        _2765 = (((_2829 * cbLight._m0[_2778].y) * _2842) * _2843) + _2659;
        _2767 = (((_2829 * cbLight._m0[_2778].z) * _2842) * _2843) + _2661;
    }
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_2198.y == 0u)
    {
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.x;
        uint _2876 = uint((float(_2864.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2865))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2865)));
        float _2886 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2887 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        uint _2890 = uint(isnan(14.0) ? _2887 : (isnan(_2887) ? 14.0 : min(_2887, 14.0)));
        uvec4 _2895 = texelFetch(g_lightClusterGridBuffer, int(((_2890 << 2u) + (_2876 << 6u)) >> 2u));
        uint _2896 = _2895.x;
        uint _2897 = _2864.z;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((((1u << ((_2897 >> 4u) & 15u)) + 4294967295u) & _2896) == 0u) || ((_2897 & 240u) == 0u))
        {
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
        }
        else
        {
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3145)
                {
                    frontier_phi_71_pred = _3134;
                    frontier_phi_71_pred_1 = _3133;
                    frontier_phi_71_pred_2 = _3132;
                    frontier_phi_71_pred_3 = _3131;
                    frontier_phi_71_pred_4 = _3130;
                    frontier_phi_71_pred_5 = _3129;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3144;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3135 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _1974;
                        float _3341 = _3300.y - _1975;
                        float _3342 = _3300.z - _1976;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_827, _830, _833), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4795 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _1974;
                        float _3376 = (-0.0) - _1975;
                        float _3377 = (-0.0) - _1976;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3391 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3392 = 1.0 - _887;
                        float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                        float _3400 = _3399 * _3399;
                        float _3401 = _3400 * _3400;
                        float _3402 = _3382 + _3347;
                        float _3403 = _3383 + _3348;
                        float _3404 = _3384 + _3349;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3412 = dot(vec3(_827, _830, _833), vec3(_3382, _3383, _3384));
                        float _4811 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3415 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3416 = dot(vec3(_827, _830, _833), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                        float _4822 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                        float _3424 = _3360 * _3400;
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3350) + _3425;
                        float _4833 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3430 = 1.0 - _3400;
                        float _3440 = (0.5 / (((_3429 * ((_3415 * _3430) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3400) * _3415))) * _3429;
                        float _4844 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3451 = (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3423 * _3423) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3204 = (_3371 * _3319.x) + _3277;
                        _3205 = (_3371 * _3319.y) + _3278;
                        _3206 = (_3371 * _3319.z) + _3279;
                        _3201 = (_3451 * _3336.x) + _3274;
                        _3202 = (_3451 * _3336.y) + _3275;
                        _3203 = (_3451 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_71_pred = _3206;
                    frontier_phi_71_pred_1 = _3205;
                    frontier_phi_71_pred_2 = _3204;
                    frontier_phi_71_pred_3 = _3203;
                    frontier_phi_71_pred_4 = _3202;
                    frontier_phi_71_pred_5 = _3201;
                }
                _2987 = frontier_phi_71_pred;
                _2985 = frontier_phi_71_pred_1;
                _2983 = frontier_phi_71_pred_2;
                _2981 = frontier_phi_71_pred_3;
                _2979 = frontier_phi_71_pred_4;
                _2977 = frontier_phi_71_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2977;
                    _3130 = _2979;
                    _3131 = _2981;
                    _3132 = _2983;
                    _3133 = _2985;
                    _3134 = _2987;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
        }
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.z;
        uint _2993 = (_2991 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2993) & _2896) == 0u)
        {
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _3123 = _3122 * _1974;
            float _3124 = _3122 * _1975;
            float _3125 = _3122 * _1976;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2993 < ((_2991 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3257 = _2976;
                float _3258 = _2978;
                float _3259 = _2980;
                float _3260 = _2982;
                float _3261 = _2984;
                float _3262 = _2986;
                uint _3263 = _2993;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3273)
                    {
                        frontier_phi_82_pred = _3262;
                        frontier_phi_82_pred_1 = _3261;
                        frontier_phi_82_pred_2 = _3260;
                        frontier_phi_82_pred_3 = _3259;
                        frontier_phi_82_pred_4 = _3258;
                        frontier_phi_82_pred_5 = _3257;
                    }
                    else
                    {
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3478 = _3257;
                        float _3479 = _3258;
                        float _3480 = _3259;
                        float _3481 = _3260;
                        float _3482 = _3261;
                        float _3483 = _3262;
                        uint _3484 = _3272;
                        uint _3485;
                        vec4 _3510;
                        float _3511;
                        vec4 _3526;
                        vec3 _3538;
                        vec4 _3553;
                        vec4 _3568;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3495 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3484));
                            _3485 = (_3484 + 4294967295u) & _3484;
                            uint _3497 = _3495 * 40u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3511 = _3510.w;
                            uint _3513 = (_3495 * 40u) + 4u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3495 * 40u) + 8u;
                            _3538 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x));
                            uint _3540 = (_3495 * 40u) + 16u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3495 * 40u) + 20u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3495 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3495 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_1976, _3602.z, fma(_1975, _3602.y, _3602.x * _1974)) + _3602.w;
                            _3615 = !((fma(_1976, _3583.z, fma(_1975, _3583.y, _3583.x * _1974)) + _3583.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3510.x - _1974;
                                float _3643 = _3510.y - _1975;
                                float _3644 = _3510.z - _1976;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3511 * _3511));
                                float _4855 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3660 = sqrt(_3645) * _3526.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_827, _830, _833))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_1976, _3553.z, fma(_1975, _3553.y, _3553.x * _1974)) + _3553.w) / _3614;
                                float _3674 = (fma(_1976, _3568.z, fma(_1975, _3568.y, _3568.x * _1974)) + _3568.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4871 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _887;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3123;
                                float _3704 = _3650 - _3124;
                                float _3705 = _3651 - _3125;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_827, _830, _833), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4882 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3717 = dot(vec3(_827, _830, _833), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4893 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_827, _830, _833), vec3(_3649, _3650, _3651))) + _3726;
                                float _4904 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4915 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3680 * _3526.z;
                                frontier_phi_88_pred_1 = _3680 * _3526.y;
                                frontier_phi_88_pred_2 = _3680 * _3526.x;
                                frontier_phi_88_pred_3 = _3754 * _3538.z;
                                frontier_phi_88_pred_4 = _3754 * _3538.y;
                                frontier_phi_88_pred_5 = _3754 * _3538.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_88_pred;
                            _3762 = frontier_phi_88_pred_1;
                            _3761 = frontier_phi_88_pred_2;
                            _3760 = frontier_phi_88_pred_3;
                            _3759 = frontier_phi_88_pred_4;
                            _3758 = frontier_phi_88_pred_5;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            if (_3485 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3485;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3470;
                        frontier_phi_82_pred_1 = _3469;
                        frontier_phi_82_pred_2 = _3468;
                        frontier_phi_82_pred_3 = _3467;
                        frontier_phi_82_pred_4 = _3466;
                        frontier_phi_82_pred_5 = _3465;
                    }
                    _3108 = frontier_phi_82_pred;
                    _3106 = frontier_phi_82_pred_1;
                    _3104 = frontier_phi_82_pred_2;
                    _3102 = frontier_phi_82_pred_3;
                    _3100 = frontier_phi_82_pred_4;
                    _3098 = frontier_phi_82_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3098;
                        _3258 = _3100;
                        _3259 = _3102;
                        _3260 = _3104;
                        _3261 = _3106;
                        _3262 = _3108;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3104;
                frontier_phi_63_64_ladder_1 = _3108;
                frontier_phi_63_64_ladder_2 = _3106;
                frontier_phi_63_64_ladder_3 = _3102;
                frontier_phi_63_64_ladder_4 = _3100;
                frontier_phi_63_64_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_63_64_ladder = _2982;
                frontier_phi_63_64_ladder_1 = _2986;
                frontier_phi_63_64_ladder_2 = _2984;
                frontier_phi_63_64_ladder_3 = _2980;
                frontier_phi_63_64_ladder_4 = _2978;
                frontier_phi_63_64_ladder_5 = _2976;
            }
            _3097 = frontier_phi_63_64_ladder_5;
            _3099 = frontier_phi_63_64_ladder_4;
            _3101 = frontier_phi_63_64_ladder_3;
            _3103 = frontier_phi_63_64_ladder;
            _3105 = frontier_phi_63_64_ladder_2;
            _3107 = frontier_phi_63_64_ladder_1;
        }
        float _3112 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2909 = (_3112 * _3103) + _2440;
        _2911 = (_3112 * _3105) + _2442;
        _2913 = (_3112 * _3107) + _2444;
        _2915 = ((_3097 * 0.039999999105930328369140625) * _3112) + _2763;
        _2917 = ((_3099 * 0.039999999105930328369140625) * _3112) + _2765;
        _2919 = ((_3101 * 0.039999999105930328369140625) * _3112) + _2767;
    }
    else
    {
        _2909 = _2440;
        _2911 = _2442;
        _2913 = _2444;
        _2915 = _2763;
        _2917 = _2765;
        _2919 = _2767;
    }
    float _4931 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4942 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4953 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2936 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2909 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _871))) + ((_2915 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    float _2937 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2911 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _871))) + ((_2917 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    float _2938 = ((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2913 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _871))) + ((_2919 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    uint _2939 = _268 + 6u;
    float _2947 = _808 / cbSceneParam._m0[86u].x;
    float _2948 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2962 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2964 = _2962.x;
    float _2965 = _2962.y;
    float _2966 = _2962.z;
    float _2967 = _2962.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _3001 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _3002 = _3001 / _729;
        float _3013 = _3002 * _781;
        float _3014 = _782 * _3002;
        float _3015 = (-0.0) - _3014;
        float _3017 = _3002 * _783;
        float _3019 = (cbSceneParam._m0[77u].w * _3015) / _3001;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3014;
        float _3027 = sqrt(((_3013 * _3013) + (_3014 * _3014)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3001)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3015 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3214 = ((abs(_3027 / _3015) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3037 * _3169) - exp2(_3037 * _3170)) * _3158))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2967);
        _3039 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2964;
        _3041 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2965;
        _3043 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2966;
        _3045 = _3225 * _2967;
    }
    else
    {
        _3039 = _2964;
        _3041 = _2965;
        _3043 = _2966;
        _3045 = _2967;
    }
    bool _3252;
    vec4 _3055;
    vec4 _3077;
    float _3079;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        _3055 = cbMatDynParam._m0[0u];
        float _3057 = roundEven(_3055.y);
        bool _3058 = _3057 == 3.0;
        float _3059 = log2(_3045);
        float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * _2936;
        float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * _2937;
        float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * _2938;
        float _3075 = _797 + (-0.5);
        _3077 = cbMtdParam._m0[1u];
        _3079 = _3077.y * _3075;
        float _3082 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = _3082 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
        _3085 = _3082 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
        _3086 = _3075 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _3086) < 0.5)
            {
                _3252 = true;
                break;
            }
        }
        uint _3193 = _846 + uint(_3055.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3086) < 0.5))
        {
            _3252 = true;
            break;
        }
        if ((_3079 + 1.0) < _3077.x)
        {
            _3252 = true;
            break;
        }
        _3252 = false;
        break;
    }
    float _3456;
    if (_3252)
    {
        discard_state = true;
        _3456 = 0.0;
    }
    else
    {
        _3456 = cbInstanceData._m0[_2939].w;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3456;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2939].w;
    discard_exit();
}


