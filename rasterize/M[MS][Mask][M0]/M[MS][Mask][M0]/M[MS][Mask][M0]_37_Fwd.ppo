#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1284;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3589 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _436 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_423 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317);
    float _439 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_423 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318);
    float _442 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_423 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319);
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _511 = ((_481.z - _502) * _423) + _502;
    float _514 = ((((_481.x - _500) * _423) + _500) * 2.0) + (-1.0);
    float _516 = ((((_481.y - _501) * _423) + _501) * 2.0) + (-1.0);
    float _517 = dot(vec2(_514, _516), vec2(_514, _516));
    float _3600 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _572 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _575 = ((isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : min(_572, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _584 = (_575 - ((((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _575))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3621 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _592 = (_585 * ((_461.x * cbMtdParam._m0[18u].x) - _436)) + _436;
    float _593 = (_585 * ((_461.y * cbMtdParam._m0[18u].y) - _439)) + _439;
    float _594 = (_585 * ((_461.z * cbMtdParam._m0[18u].z) - _442)) + _442;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _636 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_608 - _609) * cbMtdParam._m0[24u].y) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3632 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _645 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _637) + _592;
    float _646 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _637) + _593;
    float _647 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _637) + _594;
    float _651 = (cbMtdParam._m0[19u].w * (_538.z - _511)) + _511;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3643 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _682 = (_585 * (_665.z - _651)) + _651;
    float _685 = ((cbMtdParam._m0[23u].y - _682) * _637) + _682;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _710 = (_704.x * 2.0) + (-1.0);
    float _711 = (_704.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3654 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = (((_538.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _514;
    float _721 = (((_538.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _516;
    float _733 = (((_672 - _720) + (cbMtdParam._m0[21u].x * _720)) * _585) + _720;
    float _734 = (((_673 - _721) + (cbMtdParam._m0[21u].x * _721)) * _585) + _721;
    float _735 = (_585 * (sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) - _522)) + _522;
    float _746 = (((_710 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _637) + _733;
    float _747 = (((_711 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _637) + _734;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) - _735) * _637) + _735;
    float _750 = cbMtdParam._m0[22u].x + _538.w;
    float _753 = fma(_748, _236 * NORMAL.x, fma(_747, _243 * TANGENT.x, (_229 * _221) * _746));
    float _756 = fma(_748, _236 * NORMAL.y, fma(_747, _243 * TANGENT.y, (_229 * _222) * _746));
    float _759 = fma(_748, _236 * NORMAL.z, fma(_747, _243 * TANGENT.z, (_229 * _223) * _746));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3665 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _767 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3687 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3698 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3709 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    float _850 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _851 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _872 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _875 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _889 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _895 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_889].x;
    float _896 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_889].y;
    float _897 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_889].z;
    float _3720 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _850, cbSceneParam._m0[86u].y * _851));
    float _913 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_764, _765, _766), vec3(_842, _843, _844));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _764) - _842;
    float _922 = (_917 * _765) - _843;
    float _923 = (_917 * _766) - _844;
    float _927 = abs(dot(vec3(_842, _843, _844), vec3(_764, _765, _766)));
    float _3753 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_767);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1012 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1016 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1041 = _974 + _764;
        float _1042 = _978 + _765;
        float _1043 = _982 + _766;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_764, _765, _766), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3801 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_764, _765, _766), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3834 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_764, _765, _766), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3867 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1327 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1331 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1354 = _974 + _764;
        float _1355 = _978 + _765;
        float _1356 = _982 + _766;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_764, _765, _766), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3930 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_764, _765, _766), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _3963 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_764, _765, _766), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _3996 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1284;
        _1593 = _1284;
        _1594 = _1284;
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1296)) + _1296;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _921 * 0.5;
    float _1661 = _922 * 0.5;
    float _1662 = _923 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1703;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1714;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1705 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1718 = (_1714 * cbModelParam._m0[1u].x) + (_1703 * (1.0 - cbModelParam._m0[1u].x));
    float _1728 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1728 : min(cbModelParam._m0[25u].z, _1728));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1790 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1793 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1821 = frontier_phi_14_12_ladder;
        }
        float _2021;
        if (_1790 > 0.0)
        {
            _2021 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2021 = frontier_phi_23_19_ladder;
        }
        float _2264;
        if (_1793 > 0.0)
        {
            _2264 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2264 = frontier_phi_35_30_ladder;
        }
        float _2266 = isnan(_2021) ? _1821 : (isnan(_1821) ? _2021 : min(_1821, _2021));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1787) + _1776;
        float _2272 = (_2267 * _1790) + _1780;
        float _2273 = (_2267 * _1793) + _1784;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1729);
            frontier_phi_13_35_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_13_35_ladder_2;
        _1811 = frontier_phi_13_35_ladder_1;
        _1813 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1729);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1885 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1888 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2026;
        if (_1882 > 0.0)
        {
            _2026 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2026 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1885 > 0.0)
        {
            _2291 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2496;
        if (_1888 > 0.0)
        {
            _2496 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2496 = frontier_phi_46_43_ladder;
        }
        float _2498 = isnan(_2291) ? _2026 : (isnan(_2026) ? _2291 : min(_2026, _2291));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1882) + _1871;
        float _2504 = (_2499 * _1885) + _1875;
        float _2505 = (_2499 * _1888) + _1879;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2505, cbModelParam._m0[17u].z, fma(_2504, cbModelParam._m0[17u].y, _2503 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2505, cbModelParam._m0[18u].z, fma(_2504, cbModelParam._m0[18u].y, _2503 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2505, cbModelParam._m0[19u].z, fma(_2504, cbModelParam._m0[19u].y, _2503 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_22_46_ladder = _2704.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2704.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2704.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_22_46_ladder_2;
        _1909 = frontier_phi_22_46_ladder_1;
        _1911 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1818);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1923 = ((((1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_942 * _929)) * _913;
    float _1924 = _1923 * ((cbModelParam._m0[1u].w * (_1907 - _1809)) + _1809);
    float _1925 = _1923 * ((cbModelParam._m0[1u].w * (_1909 - _1811)) + _1811);
    float _1926 = _1923 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    uvec4 _1945 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1947 = _1945.x * 14u;
    uint _1948 = _1947 + 13u;
    float _1955 = _913 + (-1.0);
    float _1960 = (cbLight._m0[_1948].x * _1955) + 1.0;
    float _1961 = (cbLight._m0[_1948].y * _1955) + 1.0;
    float _1962 = (cbLight._m0[_1948].z * _1955) + 1.0;
    float _1963 = (cbLight._m0[_1948].w * _1955) + 1.0;
    uint _1964 = _1947 + 5u;
    float _1970 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1974 = _1947 + 4u;
    float _1980 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1984 = _1947 | 1u;
    float _1995 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_764, _765, _766));
    float _1998 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_764, _765, _766));
    float _4132 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _4143 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2003 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.3183098733425140380859375;
    float _2005 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _2012 = ((cbLight._m0[_1964].x * _1970) * _2005) + ((cbLight._m0[_1974].x * _1980) * _2003);
    float _2013 = ((_1970 * cbLight._m0[_1964].y) * _2005) + ((_1980 * cbLight._m0[_1974].y) * _2003);
    float _2014 = ((_1970 * cbLight._m0[_1964].z) * _2005) + ((_1980 * cbLight._m0[_1974].z) * _2003);
    uvec4 _2018 = floatBitsToUint(cbLight._m0[_1947 + 12u]);
    bool _2020 = _2018.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_2020)
    {
        _2031 = _2012;
        _2033 = _2013;
        _2035 = _2014;
    }
    else
    {
        uint _2039 = _1947 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1947 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4154 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2058 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _2012;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _2013;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _2014;
    }
    bool _2038 = _2018.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2038)
    {
        _2076 = _2031;
        _2078 = _2033;
        _2080 = _2035;
    }
    else
    {
        uint _2235 = _1947 + 7u;
        float _2251 = (dot(vec3(cbLight._m0[_1947 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4170 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2254 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2076 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2031;
        _2078 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2033;
        _2080 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2035;
    }
    uint _2083 = _1947 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _767) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1947].x + _842;
    float _2099 = cbLight._m0[_1947].y + _843;
    float _2100 = cbLight._m0[_1947].z + _844;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_1947].xyz));
    float _4186 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2112 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2113 = dot(vec3(_764, _765, _766), vec3(_2105, _2106, _2107));
    float _4208 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2105, _2106, _2107));
    float _4219 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2097;
    float _2148 = (0.5 / (((_2112 * ((_2111 * _2137) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2137) + _2097) * _2111))) * _2111;
    float _4230 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2161 = _1947 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _767) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1984].x + _842;
    float _2175 = cbLight._m0[_1984].y + _843;
    float _2176 = cbLight._m0[_1984].z + _844;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_1984].xyz));
    float _4241 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2188 = dot(vec3(_764, _765, _766), vec3(_2181, _2182, _2183));
    float _4252 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2181, _2182, _2183));
    float _4263 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2173;
    float _2220 = (0.5 / (((_2112 * ((_2187 * _2210) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2210) + _2173) * _2187))) * _2187;
    float _4274 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2232 = (((_2209 * cbLight._m0[_2161].x) * _2222) * _1970) + (((_2136 * cbLight._m0[_2083].x) * _2150) * _1980);
    float _2233 = (((_2209 * cbLight._m0[_2161].y) * _2222) * _1970) + (((_2136 * cbLight._m0[_2083].y) * _2150) * _1980);
    float _2234 = (((_2209 * cbLight._m0[_2161].z) * _2222) * _1970) + (((_2136 * cbLight._m0[_2083].z) * _2150) * _1980);
    float _2296;
    float _2298;
    float _2300;
    if (_2020)
    {
        _2296 = _2232;
        _2298 = _2233;
        _2300 = _2234;
    }
    else
    {
        uint _2302 = _1947 + 2u;
        uint _2306 = _1947 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _767) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _842;
        float _2323 = cbLight._m0[_2302].y + _843;
        float _2324 = cbLight._m0[_2302].z + _844;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2302].xyz));
        float _4285 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2336 = dot(vec3(_764, _765, _766), vec3(_2329, _2330, _2331));
        float _4296 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4307 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2358 = 1.0 - _2321;
        float _2368 = (0.5 / (((_2112 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2358) + _2321) * _2335))) * _2335;
        float _4318 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2296 = (((_2357 * cbLight._m0[_2306].x) * _2370) * _2371) + _2232;
        _2298 = (((_2357 * cbLight._m0[_2306].y) * _2370) * _2371) + _2233;
        _2300 = (((_2357 * cbLight._m0[_2306].z) * _2370) * _2371) + _2234;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2038)
    {
        _2406 = _2296;
        _2408 = _2298;
        _2410 = _2300;
    }
    else
    {
        uint _2417 = _1947 + 3u;
        uint _2421 = _1947 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _767) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _842;
        float _2438 = cbLight._m0[_2417].y + _843;
        float _2439 = cbLight._m0[_2417].z + _844;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2417].xyz));
        float _4334 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2451 = dot(vec3(_764, _765, _766), vec3(_2444, _2445, _2446));
        float _4345 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4356 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2472 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2473 = 1.0 - _2436;
        float _2483 = (0.5 / (((_2112 * ((_2450 * _2473) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2473) + _2436) * _2450))) * _2450;
        float _4367 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2406 = (((_2472 * cbLight._m0[_2421].x) * _2485) * _2486) + _2296;
        _2408 = (((_2472 * cbLight._m0[_2421].y) * _2485) * _2486) + _2298;
        _2410 = (((_2472 * cbLight._m0[_2421].z) * _2485) * _2486) + _2300;
    }
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_1945.y == 0u)
    {
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2561;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2561;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2561;
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _851) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _850) / _2577)));
        float _2598 = (log2(_2564 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
        }
        else
        {
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            uint _2860 = 0u;
            uint _2869;
            bool _2870;
            for (;;)
            {
                _2869 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                _2870 = _2869 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2870)
                {
                    frontier_phi_61_pred = _2854;
                    frontier_phi_61_pred_1 = _2859;
                    frontier_phi_61_pred_2 = _2858;
                    frontier_phi_61_pred_3 = _2857;
                    frontier_phi_61_pred_4 = _2856;
                    frontier_phi_61_pred_5 = _2855;
                }
                else
                {
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    uint _2984;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2869;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    for (;;)
                    {
                        uint _2988 = uint(findLSB(_2984)) + (_2860 << 5u);
                        uint _2985 = (_2984 + 4294967295u) & _2984;
                        uint _2990 = _2988 * 48u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3010 = (_2988 * 48u) + 4u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3029 = (_2988 * 48u) + 8u;
                        vec3 _3040 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x));
                        float _3044 = _3004.x - _2562;
                        float _3045 = _3004.y - _2563;
                        float _3046 = _3004.z - _2564;
                        float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                        float _3050 = inversesqrt(_3047);
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3054 = dot(vec3(_869, _872, _875), vec3(_3051, _3052, _3053));
                        float _3059 = 1.0 - (_3047 * _3004.w);
                        float _4393 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3061 = sqrt(_3047) * _3023.w;
                        float _3064 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _3054) + _3065;
                        float _3071 = _3061 * _3061;
                        float _3075 = ((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3060) / ((_3071 * 0.699999988079071044921875) + 1.0);
                        float _3079 = (-0.0) - _2562;
                        float _3080 = (-0.0) - _2563;
                        float _3081 = (-0.0) - _2564;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3096 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _929;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3086 + _3051;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_869, _872, _875), vec3(_3086, _3087, _3088));
                        float _4409 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3121 = dot(vec3(_869, _872, _875), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4420 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3064 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3054) + _3130;
                        float _4431 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4442 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3128 * _3128) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125))) * _3060;
                        _2913 = (_3075 * _3023.x) + _2981;
                        _2914 = (_3075 * _3023.y) + _2982;
                        _2915 = (_3075 * _3023.z) + _2983;
                        _2910 = (_3156 * _3040.x) + _2978;
                        _2911 = (_3156 * _3040.y) + _2979;
                        _2912 = (_3156 * _3040.z) + _2980;
                        if (_2985 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2985;
                        }
                    }
                    frontier_phi_61_pred = _2910;
                    frontier_phi_61_pred_1 = _2915;
                    frontier_phi_61_pred_2 = _2914;
                    frontier_phi_61_pred_3 = _2913;
                    frontier_phi_61_pred_4 = _2912;
                    frontier_phi_61_pred_5 = _2911;
                }
                _2710 = frontier_phi_61_pred;
                _2720 = frontier_phi_61_pred_1;
                _2718 = frontier_phi_61_pred_2;
                _2716 = frontier_phi_61_pred_3;
                _2714 = frontier_phi_61_pred_4;
                _2712 = frontier_phi_61_pred_5;
                uint _2861 = _2860 + 1u;
                if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2854 = _2710;
                    _2855 = _2712;
                    _2856 = _2714;
                    _2857 = _2716;
                    _2858 = _2718;
                    _2859 = _2720;
                    _2860 = _2861;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
        }
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.z;
        uint _2726 = (_2724 >> 8u) & 15u;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((4294967295u << _2726) & _2608) == 0u)
        {
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
            _2832 = _2719;
        }
        else
        {
            float _2847 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
            float _2848 = _2847 * _2562;
            float _2849 = _2847 * _2563;
            float _2850 = _2847 * _2564;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2726 < ((_2724 >> 12u) & 15u))
            {
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2961 = _2709;
                float _2962 = _2711;
                float _2963 = _2713;
                float _2964 = _2715;
                float _2965 = _2717;
                float _2966 = _2719;
                uint _2967 = _2726;
                uint _2976;
                bool _2977;
                for (;;)
                {
                    _2976 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                    _2977 = _2976 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2977)
                    {
                        frontier_phi_67_pred = _2964;
                        frontier_phi_67_pred_1 = _2965;
                        frontier_phi_67_pred_2 = _2966;
                        frontier_phi_67_pred_3 = _2963;
                        frontier_phi_67_pred_4 = _2962;
                        frontier_phi_67_pred_5 = _2961;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        uint _3180 = _2976;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3249;
                        vec4 _3265;
                        float _3311;
                        bool _3312;
                        for (;;)
                        {
                            uint _3191 = ((_2967 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3236 = (_3191 * 40u) + 16u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3191 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3191 * 40u) + 24u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3286 = (_3191 * 40u) + 28u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3311 = fma(_2564, _3299.z, fma(_2563, _3299.y, _3299.x * _2562)) + _3299.w;
                            _3312 = !((fma(_2564, _3280.z, fma(_2563, _3280.y, _3280.x * _2562)) + _3280.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3312)
                            {
                                float _3339 = _3206.x - _2562;
                                float _3340 = _3206.y - _2563;
                                float _3341 = _3206.z - _2564;
                                float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                                float _3345 = inversesqrt(_3342);
                                float _3346 = _3345 * _3339;
                                float _3347 = _3345 * _3340;
                                float _3348 = _3345 * _3341;
                                float _3352 = 1.0 - (_3342 / (_3207 * _3207));
                                float _4453 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3357 = sqrt(_3342) * _3222.w;
                                float _3359 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                                float _3360 = _3359 * _3359;
                                float _3363 = ((1.0 - _3360) * dot(vec3(_3346, _3347, _3348), vec3(_869, _872, _875))) + _3360;
                                float _3366 = _3357 * _3357;
                                float _3370 = (fma(_2564, _3249.z, fma(_2563, _3249.y, _3249.x * _2562)) + _3249.w) / _3311;
                                float _3371 = (fma(_2564, _3265.z, fma(_2563, _3265.y, _3265.x * _2562)) + _3265.w) / _3311;
                                float _3375 = 1.0 - dot(vec2(_3370, _3371), vec2(_3370, _3371));
                                float _4469 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3377 = _3376 * (((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3353) / ((_3366 * 0.699999988079071044921875) + 1.0));
                                float _3389 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                                float _3390 = 1.0 - _929;
                                float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                                float _3398 = _3397 * _3397;
                                float _3399 = _3398 * _3398;
                                float _3400 = _3346 - _2848;
                                float _3401 = _3347 - _2849;
                                float _3402 = _3348 - _2850;
                                float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                                float _3410 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2848, (-0.0) - _2849, (-0.0) - _2850));
                                float _4480 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3414 = dot(vec3(_869, _872, _875), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                                float _4491 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                                float _3422 = _3359 * _3398;
                                float _3423 = _3422 * _3422;
                                float _3429 = ((1.0 - _3423) * dot(vec3(_869, _872, _875), vec3(_3346, _3347, _3348))) + _3423;
                                float _4502 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3431 = 1.0 - _3398;
                                float _3441 = (0.5 / (((_3430 * ((_3413 * _3431) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3398) * _3413))) * _3430;
                                float _4513 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3451 = (_3376 * _3353) * (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3421 * _3421) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3451 * _3234.x;
                                frontier_phi_73_pred_1 = _3451 * _3234.y;
                                frontier_phi_73_pred_2 = _3377 * _3222.z;
                                frontier_phi_73_pred_3 = _3377 * _3222.y;
                                frontier_phi_73_pred_4 = _3377 * _3222.x;
                                frontier_phi_73_pred_5 = _3451 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_73_pred;
                            _3456 = frontier_phi_73_pred_1;
                            _3460 = frontier_phi_73_pred_2;
                            _3459 = frontier_phi_73_pred_3;
                            _3458 = frontier_phi_73_pred_4;
                            _3457 = frontier_phi_73_pred_5;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            _3161 = _3455 + _3174;
                            _3162 = _3456 + _3175;
                            _3163 = _3457 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3164;
                        frontier_phi_67_pred_1 = _3165;
                        frontier_phi_67_pred_2 = _3166;
                        frontier_phi_67_pred_3 = _3163;
                        frontier_phi_67_pred_4 = _3162;
                        frontier_phi_67_pred_5 = _3161;
                    }
                    _2829 = frontier_phi_67_pred;
                    _2831 = frontier_phi_67_pred_1;
                    _2833 = frontier_phi_67_pred_2;
                    _2827 = frontier_phi_67_pred_3;
                    _2825 = frontier_phi_67_pred_4;
                    _2823 = frontier_phi_67_pred_5;
                    uint _2968 = _2967 + 1u;
                    if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2961 = _2823;
                        _2962 = _2825;
                        _2963 = _2827;
                        _2964 = _2829;
                        _2965 = _2831;
                        _2966 = _2833;
                        _2967 = _2968;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2831;
                frontier_phi_55_56_ladder_1 = _2833;
                frontier_phi_55_56_ladder_2 = _2829;
                frontier_phi_55_56_ladder_3 = _2827;
                frontier_phi_55_56_ladder_4 = _2825;
                frontier_phi_55_56_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_55_56_ladder = _2717;
                frontier_phi_55_56_ladder_1 = _2719;
                frontier_phi_55_56_ladder_2 = _2715;
                frontier_phi_55_56_ladder_3 = _2713;
                frontier_phi_55_56_ladder_4 = _2711;
                frontier_phi_55_56_ladder_5 = _2709;
            }
            _2822 = frontier_phi_55_56_ladder_5;
            _2824 = frontier_phi_55_56_ladder_4;
            _2826 = frontier_phi_55_56_ladder_3;
            _2828 = frontier_phi_55_56_ladder_2;
            _2830 = frontier_phi_55_56_ladder;
            _2832 = frontier_phi_55_56_ladder_1;
        }
        float _2837 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2621 = (_2837 * _2828) + _2076;
        _2623 = (_2837 * _2830) + _2078;
        _2625 = (_2837 * _2832) + _2080;
        _2627 = ((_2822 * 0.039999999105930328369140625) * _2837) + _2406;
        _2629 = ((_2824 * 0.039999999105930328369140625) * _2837) + _2408;
        _2631 = ((_2826 * 0.039999999105930328369140625) * _2837) + _2410;
    }
    else
    {
        _2621 = _2076;
        _2623 = _2078;
        _2625 = _2080;
        _2627 = _2406;
        _2629 = _2408;
        _2631 = _2410;
    }
    float _4529 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4540 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4551 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    uint _2651 = _249 + 6u;
    float _2659 = _850 / cbSceneParam._m0[86u].x;
    float _2660 = _851 / cbSceneParam._m0[86u].y;
    vec4 _2674 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2676 = _2674.x;
    float _2677 = _2674.y;
    float _2678 = _2674.z;
    float _2679 = _2674.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2734 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2735 = _2734 / _785;
        float _2746 = _2735 * _835;
        float _2747 = _836 * _2735;
        float _2748 = (-0.0) - _2747;
        float _2750 = _2735 * _837;
        float _2752 = (cbSceneParam._m0[77u].w * _2748) / _2734;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2747;
        float _2760 = sqrt(((_2746 * _2746) + (_2747 * _2747)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2734)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2923;
        if (abs((_2748 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2923 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2883 = 1.0 / cbSceneParam._m0[80u].x;
            float _2884 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2885 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            _2923 = ((abs(_2760 / _2748) * cbSceneParam._m0[80u].y) * ((((_2894 - _2895) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))))) * _2883)) - ((exp2(_2770 * _2894) - exp2(_2770 * _2895)) * _2883))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _2925 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, 1.0), 0.0);
        float _2934 = exp2((_2923 * (-1.44269502162933349609375)) * (1.0 - _2925.w));
        float _2935 = log2(_2934);
        float _2951 = log2(_2679);
        _2772 = (exp2(_2951 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].x)) * _2925.x) / cbSceneParam._m0[78u].x)) + _2676;
        _2774 = (exp2(_2951 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].y)) * _2925.y) / cbSceneParam._m0[78u].y)) + _2677;
        _2776 = (exp2(_2951 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].z)) * _2925.z) / cbSceneParam._m0[78u].z)) + _2678;
        _2778 = _2934 * _2679;
    }
    else
    {
        _2772 = _2676;
        _2774 = _2677;
        _2776 = _2678;
        _2778 = _2679;
    }
    float _2790 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2791 = _2790 == 3.0;
    float _2792 = log2(_2778);
    float _2799 = exp2(_2792 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2621 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _913))) + ((_2627 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2800 = exp2(_2792 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2623 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _913))) + ((_2629 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2801 = exp2(_2792 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2625 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _913))) + ((_2631 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2810 = (_2790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2810 * (_2791 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.y = _2810 * (_2791 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.z = _2810 * (_2791 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.w = cbInstanceData._m0[_2651].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2651].w;
}


