#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1383;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3688 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3699 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3710 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _362 = _357.x * cbMtdParam._m0[11u].x;
    float _363 = _357.y * cbMtdParam._m0[11u].y;
    float _364 = _357.z * cbMtdParam._m0[11u].z;
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[24u].z) + _448) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3721 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _476 = (_331.x * cbMtdParam._m0[9u].x) * ((_466 * ((_383.x * cbMtdParam._m0[12u].x) - _362)) + _362);
    float _477 = (_331.y * cbMtdParam._m0[9u].y) * ((_466 * ((_383.y * cbMtdParam._m0[12u].y) - _363)) + _363);
    float _478 = (_331.z * cbMtdParam._m0[9u].z) * ((_466 * ((_383.z * cbMtdParam._m0[12u].z) - _364)) + _364);
    float _482 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _476;
    float _485 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _477;
    float _488 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _478;
    float _496 = (((_476 - _482) * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) + _482) * 4.55000019073486328125;
    float _498 = (((_477 - _485) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _485) * 4.55000019073486328125;
    float _500 = (((_478 - _488) * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) + _488) * 4.55000019073486328125;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = _562.x;
    float _565 = _562.y;
    float _566 = _562.z;
    float _575 = ((_545.z - _566) * _466) + _566;
    float _578 = ((((_545.x - _564) * _466) + _564) * 2.0) + (-1.0);
    float _579 = ((((_545.y - _565) * _466) + _565) * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3732 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _585 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (_578 + ((((_518.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _618 = (_579 + ((((_518.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _621 = fma(_585, _244, fma(_618, _251, _617 * _237));
    float _624 = fma(_585, _245, fma(_618, _252, _617 * _238));
    float _627 = fma(_585, _246, fma(_618, _253, _617 * _239));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _667 = (cbMtdParam._m0[19u].x + dot(vec4(_631 * _621, _631 * _624, _631 * _627, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_660 - _661) * cbMtdParam._m0[24u].w) + _661) * cbMtdParam._m0[21u].z);
    float _3743 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _670 = (-0.0) - cbMtdParam._m0[24u].x;
    float _672 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
    float _680 = _668 - ((_668 * TEXCOORD_8.x) * _673);
    float _681 = _668 - ((_668 * TEXCOORD_8.y) * _673);
    float _682 = _668 - ((_668 * TEXCOORD_8.z) * _673);
    float _689 = (_680 * (cbMtdParam._m0[17u].x - _496)) + _496;
    float _690 = (_681 * (cbMtdParam._m0[17u].y - _498)) + _498;
    float _691 = (_682 * (cbMtdParam._m0[17u].z - _500)) + _500;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _732 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_705 - _706) * cbMtdParam._m0[24u].y) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3764 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _741 = ((((cbMtdParam._m0[10u].x - _689) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _733) + _689;
    float _742 = ((((cbMtdParam._m0[10u].y - _690) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _733) + _690;
    float _743 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _691)) * _733) + _691;
    float _748 = (((_518.z - _575) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _575;
    float _752 = ((_605.z - _748) * cbMtdParam._m0[19u].w) + _748;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3775 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = ((_766.z - _752) * _680) + _752;
    float _786 = ((cbMtdParam._m0[23u].y - _783) * _733) + _783;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3786 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _828 = ((sqrt(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) - _585) * _682) + _585;
    float _831 = (((_773 - _617) * _680) + _617) + (cbMtdParam._m0[21u].x * _617);
    float _832 = (((_774 - _618) * _681) + _618) + (cbMtdParam._m0[21u].x * _618);
    float _843 = (((_811 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _733) + _831;
    float _844 = (((_812 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _733) + _832;
    float _845 = (_733 * (sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _828)) + _828;
    float _849 = cbMtdParam._m0[22u].x + _605.w;
    float _852 = fma(_845, _244, fma(_844, _251, _843 * _237));
    float _855 = fma(_845, _245, fma(_844, _252, _843 * _238));
    float _858 = fma(_845, _246, fma(_844, _253, _843 * _239));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _3797 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _866 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _3819 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3830 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3841 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _968 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _971 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _974 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _988 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_988].z;
    float _3852 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1012 = ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * TEXCOORD_5.w) * _1008.x;
    float _1013 = dot(vec3(_863, _864, _865), vec3(_941, _942, _943));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _863) - _941;
    float _1021 = (_1016 * _864) - _942;
    float _1022 = (_1016 * _865) - _943;
    float _1026 = abs(dot(vec3(_941, _942, _943), vec3(_863, _864, _865)));
    float _3885 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_866);
    float _1041 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1081, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073));
        float _1111 = fma(_1081, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073));
        float _1115 = fma(_1081, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073));
        float _1140 = _1073 + _863;
        float _1141 = _1077 + _864;
        float _1142 = _1081 + _865;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_863, _864, _865), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3933 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_863, _864, _865), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3966 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_863, _864, _865), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3999 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1081, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073));
        float _1426 = fma(_1081, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073));
        float _1430 = fma(_1081, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073));
        float _1453 = _1073 + _863;
        float _1454 = _1077 + _864;
        float _1455 = _1081 + _865;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_863, _864, _865), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4062 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_863, _864, _865), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4095 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_863, _864, _865), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4128 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1383;
        _1692 = _1383;
        _1693 = _1383;
        _1694 = _1383;
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1395)) + _1395;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1396)) + _1396;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1397)) + _1397;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _1020 * 0.5;
    float _1760 = _1021 * 0.5;
    float _1761 = _1022 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1081, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1081, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1081, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1890 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1893 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1921 = frontier_phi_14_12_ladder;
        }
        float _2122;
        if (_1890 > 0.0)
        {
            _2122 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2122 = frontier_phi_23_19_ladder;
        }
        float _2365;
        if (_1893 > 0.0)
        {
            _2365 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2365 = frontier_phi_35_30_ladder;
        }
        float _2367 = isnan(_2122) ? _1921 : (isnan(_1921) ? _2122 : min(_1921, _2122));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1887) + _1876;
        float _2373 = (_2368 * _1890) + _1880;
        float _2374 = (_2368 * _1893) + _1884;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_13_35_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_13_35_ladder_2;
        _1911 = frontier_phi_13_35_ladder_1;
        _1913 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1081, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1081, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1081, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _1986 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _1989 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2127;
        if (_1983 > 0.0)
        {
            _2127 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2127 = frontier_phi_25_21_ladder;
        }
        float _2392;
        if (_1986 > 0.0)
        {
            _2392 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2392 = frontier_phi_37_32_ladder;
        }
        float _2597;
        if (_1989 > 0.0)
        {
            _2597 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2597 = frontier_phi_46_43_ladder;
        }
        float _2599 = isnan(_2392) ? _2127 : (isnan(_2127) ? _2392 : min(_2127, _2392));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1983) + _1972;
        float _2605 = (_2600 * _1986) + _1976;
        float _2606 = (_2600 * _1989) + _1980;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_22_46_ladder = _2805.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2805.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2805.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_22_46_ladder_2;
        _2010 = frontier_phi_22_46_ladder_1;
        _2012 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1918);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1041) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1041 * _1028)) * _1012;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _1012 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2081 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2085 = _2048 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_863, _864, _865));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_863, _864, _865));
    float _4264 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4275 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2065].x * _2071) * _2106) + ((cbLight._m0[_2075].x * _2081) * _2104);
    float _2114 = ((_2071 * cbLight._m0[_2065].y) * _2106) + ((_2081 * cbLight._m0[_2075].y) * _2104);
    float _2115 = ((_2071 * cbLight._m0[_2065].z) * _2106) + ((_2081 * cbLight._m0[_2075].z) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2121)
    {
        _2132 = _2113;
        _2134 = _2114;
        _2136 = _2115;
    }
    else
    {
        uint _2140 = _2048 + 6u;
        float _2156 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4286 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2159 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2132 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _2113;
        _2134 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _2114;
        _2136 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _2115;
    }
    bool _2139 = _2119.y == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2139)
    {
        _2177 = _2132;
        _2179 = _2134;
        _2181 = _2136;
    }
    else
    {
        uint _2336 = _2048 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4302 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2355 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2177 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2132;
        _2179 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2134;
        _2181 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2136;
    }
    uint _2184 = _2048 + 8u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _866) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2048].x + _941;
    float _2200 = cbLight._m0[_2048].y + _942;
    float _2201 = cbLight._m0[_2048].z + _943;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2048].xyz));
    float _4318 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2213 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2214 = dot(vec3(_863, _864, _865), vec3(_2206, _2207, _2208));
    float _4340 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2206, _2207, _2208));
    float _4351 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2198 * _2198;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2213 * ((_2212 * _2238) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2238) + _2198) * _2212))) * _2212;
    float _4362 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    uint _2262 = _2048 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _866) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2085].x + _941;
    float _2276 = cbLight._m0[_2085].y + _942;
    float _2277 = cbLight._m0[_2085].z + _943;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2085].xyz));
    float _4373 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2289 = dot(vec3(_863, _864, _865), vec3(_2282, _2283, _2284));
    float _4384 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2282, _2283, _2284));
    float _4395 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2311 = 1.0 - _2274;
    float _2321 = (0.5 / (((_2213 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2311) + _2274) * _2288))) * _2288;
    float _4406 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2333 = (((_2310 * cbLight._m0[_2262].x) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].x) * _2251) * _2081);
    float _2334 = (((_2310 * cbLight._m0[_2262].y) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].y) * _2251) * _2081);
    float _2335 = (((_2310 * cbLight._m0[_2262].z) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].z) * _2251) * _2081);
    float _2397;
    float _2399;
    float _2401;
    if (_2121)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2048 + 2u;
        uint _2407 = _2048 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _866) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _941;
        float _2424 = cbLight._m0[_2403].y + _942;
        float _2425 = cbLight._m0[_2403].z + _943;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2403].xyz));
        float _4417 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2437 = dot(vec3(_863, _864, _865), vec3(_2430, _2431, _2432));
        float _4428 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4439 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2459 = 1.0 - _2422;
        float _2469 = (0.5 / (((_2213 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2459) + _2422) * _2436))) * _2436;
        float _4450 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2397 = (((_2458 * cbLight._m0[_2407].x) * _2471) * _2472) + _2333;
        _2399 = (((_2458 * cbLight._m0[_2407].y) * _2471) * _2472) + _2334;
        _2401 = (((_2458 * cbLight._m0[_2407].z) * _2471) * _2472) + _2335;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2139)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _2048 + 3u;
        uint _2522 = _2048 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _866) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _941;
        float _2539 = cbLight._m0[_2518].y + _942;
        float _2540 = cbLight._m0[_2518].z + _943;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2518].xyz));
        float _4466 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2552 = dot(vec3(_863, _864, _865), vec3(_2545, _2546, _2547));
        float _4477 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4488 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2573 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2574 = 1.0 - _2537;
        float _2584 = (0.5 / (((_2213 * ((_2551 * _2574) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2574) + _2537) * _2551))) * _2551;
        float _4499 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2507 = (((_2573 * cbLight._m0[_2522].x) * _2586) * _2587) + _2397;
        _2509 = (((_2573 * cbLight._m0[_2522].y) * _2586) * _2587) + _2399;
        _2511 = (((_2573 * cbLight._m0[_2522].z) * _2586) * _2587) + _2401;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2046.y == 0u)
    {
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2662;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2662;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2662;
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _2678)));
        float _2699 = (log2(_2665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
        }
        else
        {
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            uint _2960 = 0u;
            uint _2969;
            bool _2970;
            for (;;)
            {
                _2969 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                _2970 = _2969 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2970)
                {
                    frontier_phi_61_pred = _2954;
                    frontier_phi_61_pred_1 = _2959;
                    frontier_phi_61_pred_2 = _2958;
                    frontier_phi_61_pred_3 = _2957;
                    frontier_phi_61_pred_4 = _2956;
                    frontier_phi_61_pred_5 = _2955;
                }
                else
                {
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    uint _3084;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2969;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3088 = uint(findLSB(_3084)) + (_2960 << 5u);
                        uint _3085 = (_3084 + 4294967295u) & _3084;
                        uint _3090 = _3088 * 48u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3110 = (_3088 * 48u) + 4u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3129 = (_3088 * 48u) + 8u;
                        vec3 _3140 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x));
                        float _3144 = _3104.x - _2663;
                        float _3145 = _3104.y - _2664;
                        float _3146 = _3104.z - _2665;
                        float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                        float _3150 = inversesqrt(_3147);
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3154 = dot(vec3(_968, _971, _974), vec3(_3151, _3152, _3153));
                        float _3159 = 1.0 - (_3147 * _3104.w);
                        float _4525 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3161 = sqrt(_3147) * _3123.w;
                        float _3164 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3154) + _3165;
                        float _3171 = _3161 * _3161;
                        float _3175 = ((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3160) / ((_3171 * 0.699999988079071044921875) + 1.0);
                        float _3179 = (-0.0) - _2663;
                        float _3180 = (-0.0) - _2664;
                        float _3181 = (-0.0) - _2665;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3196 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                        float _3197 = 1.0 - _1028;
                        float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                        float _3205 = _3204 * _3204;
                        float _3206 = _3205 * _3205;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3209 = _3188 + _3153;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3217 = dot(vec3(_968, _971, _974), vec3(_3186, _3187, _3188));
                        float _4541 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3221 = dot(vec3(_968, _971, _974), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                        float _4552 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                        float _3229 = _3164 * _3205;
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3154) + _3230;
                        float _4563 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3235 = 1.0 - _3205;
                        float _3245 = (0.5 / (((_3234 * ((_3220 * _3235) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3205) * _3220))) * _3234;
                        float _4574 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3256 = (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3228 * _3228) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125))) * _3160;
                        _3013 = (_3175 * _3123.x) + _3081;
                        _3014 = (_3175 * _3123.y) + _3082;
                        _3015 = (_3175 * _3123.z) + _3083;
                        _3010 = (_3256 * _3140.x) + _3078;
                        _3011 = (_3256 * _3140.y) + _3079;
                        _3012 = (_3256 * _3140.z) + _3080;
                        if (_3085 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3085;
                        }
                    }
                    frontier_phi_61_pred = _3010;
                    frontier_phi_61_pred_1 = _3015;
                    frontier_phi_61_pred_2 = _3014;
                    frontier_phi_61_pred_3 = _3013;
                    frontier_phi_61_pred_4 = _3012;
                    frontier_phi_61_pred_5 = _3011;
                }
                _2811 = frontier_phi_61_pred;
                _2821 = frontier_phi_61_pred_1;
                _2819 = frontier_phi_61_pred_2;
                _2817 = frontier_phi_61_pred_3;
                _2815 = frontier_phi_61_pred_4;
                _2813 = frontier_phi_61_pred_5;
                uint _2961 = _2960 + 1u;
                if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2954 = _2811;
                    _2955 = _2813;
                    _2956 = _2815;
                    _2957 = _2817;
                    _2958 = _2819;
                    _2959 = _2821;
                    _2960 = _2961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
        }
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.z;
        uint _2827 = (_2825 >> 8u) & 15u;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((4294967295u << _2827) & _2709) == 0u)
        {
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
        }
        else
        {
            float _2947 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
            float _2948 = _2947 * _2663;
            float _2949 = _2947 * _2664;
            float _2950 = _2947 * _2665;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2827 < ((_2825 >> 12u) & 15u))
            {
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _3061 = _2810;
                float _3062 = _2812;
                float _3063 = _2814;
                float _3064 = _2816;
                float _3065 = _2818;
                float _3066 = _2820;
                uint _3067 = _2827;
                uint _3076;
                bool _3077;
                for (;;)
                {
                    _3076 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                    _3077 = _3076 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3077)
                    {
                        frontier_phi_67_pred = _3064;
                        frontier_phi_67_pred_1 = _3065;
                        frontier_phi_67_pred_2 = _3066;
                        frontier_phi_67_pred_3 = _3063;
                        frontier_phi_67_pred_4 = _3062;
                        frontier_phi_67_pred_5 = _3061;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        uint _3280 = _3076;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3349;
                        vec4 _3364;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3291 = ((_3067 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3336 = (_3291 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3291 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3291 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3291 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_2665, _3398.z, fma(_2664, _3398.y, _3398.x * _2663)) + _3398.w;
                            _3411 = !((fma(_2665, _3379.z, fma(_2664, _3379.y, _3379.x * _2663)) + _3379.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3306.x - _2663;
                                float _3439 = _3306.y - _2664;
                                float _3440 = _3306.z - _2665;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3307 * _3307));
                                float _4585 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3456 = sqrt(_3441) * _3322.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_968, _971, _974))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_2665, _3349.z, fma(_2664, _3349.y, _3349.x * _2663)) + _3349.w) / _3410;
                                float _3470 = (fma(_2665, _3364.z, fma(_2664, _3364.y, _3364.x * _2663)) + _3364.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4601 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _1028;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2948;
                                float _3500 = _3446 - _2949;
                                float _3501 = _3447 - _2950;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_968, _971, _974), vec3((-0.0) - _2948, (-0.0) - _2949, (-0.0) - _2950));
                                float _4612 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3513 = dot(vec3(_968, _971, _974), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4623 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_968, _971, _974), vec3(_3445, _3446, _3447))) + _3522;
                                float _4634 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4645 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3550 * _3334.x;
                                frontier_phi_73_pred_1 = _3550 * _3334.y;
                                frontier_phi_73_pred_2 = _3476 * _3322.z;
                                frontier_phi_73_pred_3 = _3476 * _3322.y;
                                frontier_phi_73_pred_4 = _3476 * _3322.x;
                                frontier_phi_73_pred_5 = _3550 * _3334.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_73_pred;
                            _3555 = frontier_phi_73_pred_1;
                            _3559 = frontier_phi_73_pred_2;
                            _3558 = frontier_phi_73_pred_3;
                            _3557 = frontier_phi_73_pred_4;
                            _3556 = frontier_phi_73_pred_5;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3264;
                        frontier_phi_67_pred_1 = _3265;
                        frontier_phi_67_pred_2 = _3266;
                        frontier_phi_67_pred_3 = _3263;
                        frontier_phi_67_pred_4 = _3262;
                        frontier_phi_67_pred_5 = _3261;
                    }
                    _2929 = frontier_phi_67_pred;
                    _2931 = frontier_phi_67_pred_1;
                    _2933 = frontier_phi_67_pred_2;
                    _2927 = frontier_phi_67_pred_3;
                    _2925 = frontier_phi_67_pred_4;
                    _2923 = frontier_phi_67_pred_5;
                    uint _3068 = _3067 + 1u;
                    if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3061 = _2923;
                        _3062 = _2925;
                        _3063 = _2927;
                        _3064 = _2929;
                        _3065 = _2931;
                        _3066 = _2933;
                        _3067 = _3068;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2931;
                frontier_phi_55_56_ladder_1 = _2933;
                frontier_phi_55_56_ladder_2 = _2929;
                frontier_phi_55_56_ladder_3 = _2927;
                frontier_phi_55_56_ladder_4 = _2925;
                frontier_phi_55_56_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_55_56_ladder = _2818;
                frontier_phi_55_56_ladder_1 = _2820;
                frontier_phi_55_56_ladder_2 = _2816;
                frontier_phi_55_56_ladder_3 = _2814;
                frontier_phi_55_56_ladder_4 = _2812;
                frontier_phi_55_56_ladder_5 = _2810;
            }
            _2922 = frontier_phi_55_56_ladder_5;
            _2924 = frontier_phi_55_56_ladder_4;
            _2926 = frontier_phi_55_56_ladder_3;
            _2928 = frontier_phi_55_56_ladder_2;
            _2930 = frontier_phi_55_56_ladder;
            _2932 = frontier_phi_55_56_ladder_1;
        }
        float _2937 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _2722 = (_2937 * _2928) + _2177;
        _2724 = (_2937 * _2930) + _2179;
        _2726 = (_2937 * _2932) + _2181;
        _2728 = ((_2922 * 0.039999999105930328369140625) * _2937) + _2507;
        _2730 = ((_2924 * 0.039999999105930328369140625) * _2937) + _2509;
        _2732 = ((_2926 * 0.039999999105930328369140625) * _2937) + _2511;
    }
    else
    {
        _2722 = _2177;
        _2724 = _2179;
        _2726 = _2181;
        _2728 = _2507;
        _2730 = _2509;
        _2732 = _2511;
    }
    float _4661 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4672 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4683 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    uint _2752 = _275 + 6u;
    float _2760 = _949 / cbSceneParam._m0[86u].x;
    float _2761 = _950 / cbSceneParam._m0[86u].y;
    vec4 _2775 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2777 = _2775.x;
    float _2778 = _2775.y;
    float _2779 = _2775.z;
    float _2780 = _2775.w;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2835 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2836 = _2835 / _884;
        float _2847 = _2836 * _934;
        float _2848 = _935 * _2836;
        float _2849 = (-0.0) - _2848;
        float _2850 = _2836 * _936;
        float _2852 = (cbSceneParam._m0[77u].w * _2849) / _2835;
        float _2853 = _2852 + cbSceneParam._m0[79u].w;
        float _2854 = cbSceneParam._m0[79u].w - _2848;
        float _2860 = sqrt(((_2847 * _2847) + (_2848 * _2848)) + (_2850 * _2850));
        float _2863 = (1.0 - (cbSceneParam._m0[77u].w / _2835)) * _2860;
        float _2868 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2870 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2849 - _2852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2853 > 0.0) ? exp2(_2868 * _2853) : (2.0 - exp2(_2870 * _2853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2863;
        }
        else
        {
            float _2983 = 1.0 / cbSceneParam._m0[80u].x;
            float _2984 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : max(_2853, _2854));
            float _2985 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : min(_2853, _2854));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            _3023 = ((abs(_2860 / _2849) * cbSceneParam._m0[80u].y) * ((((_2994 - _2995) * 2.0) - ((exp2(_2868 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0)))) - exp2(_2868 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))))) * _2983)) - ((exp2(_2870 * _2994) - exp2(_2870 * _2995)) * _2983))) + (_2863 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2780);
        _2872 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2777;
        _2874 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2778;
        _2876 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2779;
        _2878 = _3034 * _2780;
    }
    else
    {
        _2872 = _2777;
        _2874 = _2778;
        _2876 = _2779;
        _2878 = _2780;
    }
    float _2890 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2891 = _2890 == 3.0;
    float _2892 = log2(_2878);
    float _2899 = exp2(_2892 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2722 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1012))) + ((_2728 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2900 = exp2(_2892 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2724 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1012))) + ((_2730 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2901 = exp2(_2892 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2726 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1012))) + ((_2732 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2910 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2910 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.y = _2910 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.z = _2910 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.w = cbInstanceData._m0[_2752].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2752].w;
}


