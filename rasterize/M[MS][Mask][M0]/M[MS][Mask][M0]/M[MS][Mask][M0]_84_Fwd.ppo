#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1366;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3669 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3680 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3691 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[24u].z) + _448) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3702 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[24u].z) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3713 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _549 = (_328.x * cbMtdParam._m0[9u].x) * ((_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473);
    float _550 = (_328.y * cbMtdParam._m0[9u].y) * ((_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474);
    float _551 = (_328.z * cbMtdParam._m0[9u].z) * ((_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475);
    float _555 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _549;
    float _558 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _550;
    float _561 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _551;
    float _569 = (((_549 - _555) * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) + _555) * 4.55000019073486328125;
    float _571 = (((_550 - _558) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _558) * 4.55000019073486328125;
    float _573 = (((_551 - _561) * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) + _561) * 4.55000019073486328125;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _655 = _651.z;
    float _662 = ((_634.x - _653) * _466) + _653;
    float _663 = ((_634.y - _654) * _466) + _654;
    float _664 = ((_634.z - _655) * _466) + _655;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _689 = ((_676.z - _664) * _539) + _664;
    float _692 = ((((_676.x - _662) * _539) + _662) * 2.0) + (-1.0);
    float _693 = ((((_676.y - _663) * _539) + _663) * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3724 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _740 = _738.x;
    float _741 = 1.0 - _740;
    float _754 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_740 - _741) * cbMtdParam._m0[24u].w) + _741) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3735 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _762 = (_755 * ((_592.x * cbMtdParam._m0[18u].x) - _569)) + _569;
    float _763 = (_755 * ((_592.y * cbMtdParam._m0[18u].y) - _571)) + _571;
    float _764 = (_755 * ((_592.z * cbMtdParam._m0[18u].z) - _573)) + _573;
    float _769 = (((_611.z - _689) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _689;
    float _773 = ((_713.z - _769) * cbMtdParam._m0[19u].w) + _769;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _793 = (_786.x * 2.0) + (-1.0);
    float _794 = (_786.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _3746 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _803 = (_755 * (_786.z - _773)) + _773;
    float _812 = (_692 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_611.x * 2.0) + (-1.0)))) + (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _813 = (_693 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_611.y * 2.0) + (-1.0)))) + (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _825 = (((_793 - _812) + (cbMtdParam._m0[21u].x * _812)) * _755) + _812;
    float _826 = (((_794 - _813) + (cbMtdParam._m0[21u].x * _813)) * _755) + _813;
    float _827 = (_755 * (sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _699)) + _699;
    float _831 = cbMtdParam._m0[22u].x + _713.w;
    float _834 = fma(_827, _238 * NORMAL.x, fma(_826, _245 * TANGENT.x, (_231 * _223) * _825));
    float _837 = fma(_827, _238 * NORMAL.y, fma(_826, _245 * TANGENT.y, (_231 * _224) * _825));
    float _840 = fma(_827, _238 * NORMAL.z, fma(_826, _245 * TANGENT.z, (_231 * _225) * _825));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _3757 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _848 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _3779 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3790 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3801 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _866 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _954 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _957 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _971 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _977 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_971].x;
    float _978 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_971].y;
    float _979 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_971].z;
    float _3812 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _995 = ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * TEXCOORD_5.w) * _991.x;
    float _996 = dot(vec3(_845, _846, _847), vec3(_924, _925, _926));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _845) - _924;
    float _1004 = (_999 * _846) - _925;
    float _1005 = (_999 * _847) - _926;
    float _1009 = abs(dot(vec3(_924, _925, _926), vec3(_845, _846, _847)));
    float _3845 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_848);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1064, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056));
        float _1094 = fma(_1064, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056));
        float _1098 = fma(_1064, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056));
        float _1123 = _1056 + _845;
        float _1124 = _1060 + _846;
        float _1125 = _1064 + _847;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_845, _846, _847), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3893 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_845, _846, _847), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3926 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_845, _846, _847), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3959 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1064, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056));
        float _1408 = fma(_1064, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056));
        float _1412 = fma(_1064, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056));
        float _1435 = _1056 + _845;
        float _1436 = _1060 + _846;
        float _1437 = _1064 + _847;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_845, _846, _847), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4022 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_845, _846, _847), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4055 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_845, _846, _847), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4088 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1366;
        _1674 = _1366;
        _1675 = _1366;
        _1676 = _1366;
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1378)) + _1378;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1379)) + _1379;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _1003 * 0.5;
    float _1742 = _1004 * 0.5;
    float _1743 = _1005 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1064, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1064, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1064, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1871 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1874 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1902 = frontier_phi_14_12_ladder;
        }
        float _2102;
        if (_1871 > 0.0)
        {
            _2102 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2102 = frontier_phi_23_19_ladder;
        }
        float _2345;
        if (_1874 > 0.0)
        {
            _2345 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2345 = frontier_phi_35_30_ladder;
        }
        float _2347 = isnan(_2102) ? _1902 : (isnan(_1902) ? _2102 : min(_1902, _2102));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1868) + _1857;
        float _2353 = (_2348 * _1871) + _1861;
        float _2354 = (_2348 * _1874) + _1865;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2355;
        float _2359 = _2355 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 > _2359) || ((_2353 < _2357) || ((_2352 < _2357) || (_2352 > _2359))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2354, cbModelParam._m0[9u].z, fma(_2353, cbModelParam._m0[9u].y, _2352 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2354, cbModelParam._m0[10u].z, fma(_2353, cbModelParam._m0[10u].y, _2352 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2354, cbModelParam._m0[11u].z, fma(_2353, cbModelParam._m0[11u].y, _2352 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_13_35_ladder = _2478.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2478.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2478.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_13_35_ladder_2;
        _1892 = frontier_phi_13_35_ladder_1;
        _1894 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1952 = fma(_1064, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056)) + cbModelParam._m0[21u].w;
        float _1956 = fma(_1064, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056)) + cbModelParam._m0[22u].w;
        float _1960 = fma(_1064, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056)) + cbModelParam._m0[23u].w;
        float _1963 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _1966 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _1969 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2107;
        if (_1963 > 0.0)
        {
            _2107 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2107 = frontier_phi_25_21_ladder;
        }
        float _2372;
        if (_1966 > 0.0)
        {
            _2372 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2372 = frontier_phi_37_32_ladder;
        }
        float _2577;
        if (_1969 > 0.0)
        {
            _2577 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2577 = frontier_phi_46_43_ladder;
        }
        float _2579 = isnan(_2372) ? _2107 : (isnan(_2107) ? _2372 : min(_2107, _2372));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1963) + _1952;
        float _2585 = (_2580 * _1966) + _1956;
        float _2586 = (_2580 * _1969) + _1960;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_22_46_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1988 = frontier_phi_22_46_ladder_2;
        _1990 = frontier_phi_22_46_ladder_1;
        _1992 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1899);
        _1988 = _1972.x * cbModelParam._m0[1u].z;
        _1990 = _1972.y * cbModelParam._m0[1u].z;
        _1992 = _1972.z * cbModelParam._m0[1u].z;
    }
    float _2004 = ((((1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1024 * _1011)) * _995;
    float _2005 = _2004 * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2006 = _2004 * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2007 = _2004 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, _2005 * cbSceneParam._m0[91u].x));
    uvec4 _2026 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2028 = _2026.x * 14u;
    uint _2029 = _2028 + 13u;
    float _2036 = _995 + (-1.0);
    float _2041 = (cbLight._m0[_2029].x * _2036) + 1.0;
    float _2042 = (cbLight._m0[_2029].y * _2036) + 1.0;
    float _2043 = (cbLight._m0[_2029].z * _2036) + 1.0;
    float _2044 = (cbLight._m0[_2029].w * _2036) + 1.0;
    uint _2045 = _2028 + 5u;
    float _2051 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
    uint _2055 = _2028 + 4u;
    float _2061 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2065 = _2028 | 1u;
    float _2076 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_845, _846, _847));
    float _2079 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_845, _846, _847));
    float _4224 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _4235 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2084 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2086 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2093 = ((cbLight._m0[_2045].x * _2051) * _2086) + ((cbLight._m0[_2055].x * _2061) * _2084);
    float _2094 = ((_2051 * cbLight._m0[_2045].y) * _2086) + ((_2061 * cbLight._m0[_2055].y) * _2084);
    float _2095 = ((_2051 * cbLight._m0[_2045].z) * _2086) + ((_2061 * cbLight._m0[_2055].z) * _2084);
    uvec4 _2099 = floatBitsToUint(cbLight._m0[_2028 + 12u]);
    bool _2101 = _2099.x == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2101)
    {
        _2112 = _2093;
        _2114 = _2094;
        _2116 = _2095;
    }
    else
    {
        uint _2120 = _2028 + 6u;
        float _2136 = (dot(vec3(cbLight._m0[_2028 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2137 = _2136 * _2136;
        float _4246 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2139 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2112 = (((cbLight._m0[_2120].x * 0.3183098733425140380859375) * _2138) * _2139) + _2093;
        _2114 = (((cbLight._m0[_2120].y * 0.3183098733425140380859375) * _2138) * _2139) + _2094;
        _2116 = (((cbLight._m0[_2120].z * 0.3183098733425140380859375) * _2138) * _2139) + _2095;
    }
    bool _2119 = _2099.y == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2119)
    {
        _2157 = _2112;
        _2159 = _2114;
        _2161 = _2116;
    }
    else
    {
        uint _2316 = _2028 + 7u;
        float _2332 = (dot(vec3(cbLight._m0[_2028 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4262 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2335 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2157 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2112;
        _2159 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2114;
        _2161 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2116;
    }
    uint _2164 = _2028 + 8u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _848) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_2028].x + _924;
    float _2180 = cbLight._m0[_2028].y + _925;
    float _2181 = cbLight._m0[_2028].z + _926;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2028].xyz));
    float _4278 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2193 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2194 = dot(vec3(_845, _846, _847), vec3(_2186, _2187, _2188));
    float _4300 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2186, _2187, _2188));
    float _4311 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2178 * _2178;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2218 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2193 * ((_2192 * _2218) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2218) + _2178) * _2192))) * _2192;
    float _4322 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    uint _2242 = _2028 + 9u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _848) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2065].x + _924;
    float _2256 = cbLight._m0[_2065].y + _925;
    float _2257 = cbLight._m0[_2065].z + _926;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2065].xyz));
    float _4333 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2269 = dot(vec3(_845, _846, _847), vec3(_2262, _2263, _2264));
    float _4344 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2262, _2263, _2264));
    float _4355 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2254 * _2254;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2291 = 1.0 - _2254;
    float _2301 = (0.5 / (((_2193 * ((_2268 * _2291) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2291) + _2254) * _2268))) * _2268;
    float _4366 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    float _2313 = (((_2290 * cbLight._m0[_2242].x) * _2303) * _2051) + (((_2217 * cbLight._m0[_2164].x) * _2231) * _2061);
    float _2314 = (((_2290 * cbLight._m0[_2242].y) * _2303) * _2051) + (((_2217 * cbLight._m0[_2164].y) * _2231) * _2061);
    float _2315 = (((_2290 * cbLight._m0[_2242].z) * _2303) * _2051) + (((_2217 * cbLight._m0[_2164].z) * _2231) * _2061);
    float _2377;
    float _2379;
    float _2381;
    if (_2101)
    {
        _2377 = _2313;
        _2379 = _2314;
        _2381 = _2315;
    }
    else
    {
        uint _2383 = _2028 + 2u;
        uint _2387 = _2028 + 10u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _848) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _924;
        float _2404 = cbLight._m0[_2383].y + _925;
        float _2405 = cbLight._m0[_2383].z + _926;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2383].xyz));
        float _4377 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2417 = dot(vec3(_845, _846, _847), vec3(_2410, _2411, _2412));
        float _4388 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4399 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2438 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2439 = 1.0 - _2402;
        float _2449 = (0.5 / (((_2193 * ((_2416 * _2439) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2439) + _2402) * _2416))) * _2416;
        float _4410 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2377 = (((_2438 * cbLight._m0[_2387].x) * _2451) * _2452) + _2313;
        _2379 = (((_2438 * cbLight._m0[_2387].y) * _2451) * _2452) + _2314;
        _2381 = (((_2438 * cbLight._m0[_2387].z) * _2451) * _2452) + _2315;
    }
    float _2487;
    float _2489;
    float _2491;
    if (_2119)
    {
        _2487 = _2377;
        _2489 = _2379;
        _2491 = _2381;
    }
    else
    {
        uint _2498 = _2028 + 3u;
        uint _2502 = _2028 + 11u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _848) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _924;
        float _2519 = cbLight._m0[_2498].y + _925;
        float _2520 = cbLight._m0[_2498].z + _926;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2498].xyz));
        float _4426 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2532 = dot(vec3(_845, _846, _847), vec3(_2525, _2526, _2527));
        float _4437 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4448 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2554 = 1.0 - _2517;
        float _2564 = (0.5 / (((_2193 * ((_2531 * _2554) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2554) + _2517) * _2531))) * _2531;
        float _4459 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2487 = (((_2553 * cbLight._m0[_2502].x) * _2566) * _2567) + _2377;
        _2489 = (((_2553 * cbLight._m0[_2502].y) * _2566) * _2567) + _2379;
        _2491 = (((_2553 * cbLight._m0[_2502].z) * _2566) * _2567) + _2381;
    }
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_2026.y == 0u)
    {
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2642;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2642;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2642;
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.x;
        uint _2669 = uint((float(_2657.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _2658))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _2658)));
        float _2679 = (log2(_2645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2680 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        uint _2683 = uint(isnan(14.0) ? _2680 : (isnan(_2680) ? 14.0 : min(_2680, 14.0)));
        uvec4 _2688 = texelFetch(g_lightClusterGridBuffer, int(((_2683 << 2u) + (_2669 << 6u)) >> 2u));
        uint _2689 = _2688.x;
        uint _2690 = _2657.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2690 >> 4u) & 15u)) + 4294967295u) & _2689) == 0u) || ((_2690 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2951)
                {
                    frontier_phi_61_pred = _2935;
                    frontier_phi_61_pred_1 = _2940;
                    frontier_phi_61_pred_2 = _2939;
                    frontier_phi_61_pred_3 = _2938;
                    frontier_phi_61_pred_4 = _2937;
                    frontier_phi_61_pred_5 = _2936;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2950;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2941 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2643;
                        float _3126 = _3085.y - _2644;
                        float _3127 = _3085.z - _2645;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_951, _954, _957), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4485 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2643;
                        float _3161 = (-0.0) - _2644;
                        float _3162 = (-0.0) - _2645;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3177 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _1011;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_951, _954, _957), vec3(_3167, _3168, _3169));
                        float _4501 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3202 = dot(vec3(_951, _954, _957), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4512 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3145 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3135) + _3211;
                        float _4523 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4534 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3209 * _3209) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2994 = (_3156 * _3104.x) + _3062;
                        _2995 = (_3156 * _3104.y) + _3063;
                        _2996 = (_3156 * _3104.z) + _3064;
                        _2991 = (_3237 * _3121.x) + _3059;
                        _2992 = (_3237 * _3121.y) + _3060;
                        _2993 = (_3237 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_61_pred = _2991;
                    frontier_phi_61_pred_1 = _2996;
                    frontier_phi_61_pred_2 = _2995;
                    frontier_phi_61_pred_3 = _2994;
                    frontier_phi_61_pred_4 = _2993;
                    frontier_phi_61_pred_5 = _2992;
                }
                _2791 = frontier_phi_61_pred;
                _2801 = frontier_phi_61_pred_1;
                _2799 = frontier_phi_61_pred_2;
                _2797 = frontier_phi_61_pred_3;
                _2795 = frontier_phi_61_pred_4;
                _2793 = frontier_phi_61_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2791;
                    _2936 = _2793;
                    _2937 = _2795;
                    _2938 = _2797;
                    _2939 = _2799;
                    _2940 = _2801;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2807) & _2689) == 0u)
        {
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
            _2909 = _2796;
            _2911 = _2798;
            _2913 = _2800;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
            float _2929 = _2928 * _2643;
            float _2930 = _2928 * _2644;
            float _2931 = _2928 * _2645;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3042 = _2790;
                float _3043 = _2792;
                float _3044 = _2794;
                float _3045 = _2796;
                float _3046 = _2798;
                float _3047 = _2800;
                uint _3048 = _2807;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3058)
                    {
                        frontier_phi_67_pred = _3045;
                        frontier_phi_67_pred_1 = _3046;
                        frontier_phi_67_pred_2 = _3047;
                        frontier_phi_67_pred_3 = _3044;
                        frontier_phi_67_pred_4 = _3043;
                        frontier_phi_67_pred_5 = _3042;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        uint _3261 = _3057;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3330;
                        vec4 _3345;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3272 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3317 = (_3272 * 40u) + 16u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3272 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3272 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3272 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2645, _3379.z, fma(_2644, _3379.y, _3379.x * _2643)) + _3379.w;
                            _3392 = !((fma(_2645, _3360.z, fma(_2644, _3360.y, _3360.x * _2643)) + _3360.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3287.x - _2643;
                                float _3420 = _3287.y - _2644;
                                float _3421 = _3287.z - _2645;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3288 * _3288));
                                float _4545 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3437 = sqrt(_3422) * _3303.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_951, _954, _957))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2645, _3330.z, fma(_2644, _3330.y, _3330.x * _2643)) + _3330.w) / _3391;
                                float _3451 = (fma(_2645, _3345.z, fma(_2644, _3345.y, _3345.x * _2643)) + _3345.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4561 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _1011;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2929;
                                float _3481 = _3427 - _2930;
                                float _3482 = _3428 - _2931;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_951, _954, _957), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4572 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3494 = dot(vec3(_951, _954, _957), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4583 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_951, _954, _957), vec3(_3426, _3427, _3428))) + _3503;
                                float _4594 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4605 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3531 * _3315.x;
                                frontier_phi_73_pred_1 = _3531 * _3315.y;
                                frontier_phi_73_pred_2 = _3457 * _3303.z;
                                frontier_phi_73_pred_3 = _3457 * _3303.y;
                                frontier_phi_73_pred_4 = _3457 * _3303.x;
                                frontier_phi_73_pred_5 = _3531 * _3315.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_73_pred;
                            _3536 = frontier_phi_73_pred_1;
                            _3540 = frontier_phi_73_pred_2;
                            _3539 = frontier_phi_73_pred_3;
                            _3538 = frontier_phi_73_pred_4;
                            _3537 = frontier_phi_73_pred_5;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3245;
                        frontier_phi_67_pred_1 = _3246;
                        frontier_phi_67_pred_2 = _3247;
                        frontier_phi_67_pred_3 = _3244;
                        frontier_phi_67_pred_4 = _3243;
                        frontier_phi_67_pred_5 = _3242;
                    }
                    _2910 = frontier_phi_67_pred;
                    _2912 = frontier_phi_67_pred_1;
                    _2914 = frontier_phi_67_pred_2;
                    _2908 = frontier_phi_67_pred_3;
                    _2906 = frontier_phi_67_pred_4;
                    _2904 = frontier_phi_67_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2904;
                        _3043 = _2906;
                        _3044 = _2908;
                        _3045 = _2910;
                        _3046 = _2912;
                        _3047 = _2914;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2912;
                frontier_phi_55_56_ladder_1 = _2914;
                frontier_phi_55_56_ladder_2 = _2910;
                frontier_phi_55_56_ladder_3 = _2908;
                frontier_phi_55_56_ladder_4 = _2906;
                frontier_phi_55_56_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_55_56_ladder = _2798;
                frontier_phi_55_56_ladder_1 = _2800;
                frontier_phi_55_56_ladder_2 = _2796;
                frontier_phi_55_56_ladder_3 = _2794;
                frontier_phi_55_56_ladder_4 = _2792;
                frontier_phi_55_56_ladder_5 = _2790;
            }
            _2903 = frontier_phi_55_56_ladder_5;
            _2905 = frontier_phi_55_56_ladder_4;
            _2907 = frontier_phi_55_56_ladder_3;
            _2909 = frontier_phi_55_56_ladder_2;
            _2911 = frontier_phi_55_56_ladder;
            _2913 = frontier_phi_55_56_ladder_1;
        }
        float _2918 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2702 = (_2918 * _2909) + _2157;
        _2704 = (_2918 * _2911) + _2159;
        _2706 = (_2918 * _2913) + _2161;
        _2708 = ((_2903 * 0.039999999105930328369140625) * _2918) + _2487;
        _2710 = ((_2905 * 0.039999999105930328369140625) * _2918) + _2489;
        _2712 = ((_2907 * 0.039999999105930328369140625) * _2918) + _2491;
    }
    else
    {
        _2702 = _2157;
        _2704 = _2159;
        _2706 = _2161;
        _2708 = _2487;
        _2710 = _2489;
        _2712 = _2491;
    }
    float _4621 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4632 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4643 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    uint _2732 = _272 + 6u;
    float _2740 = _932 / cbSceneParam._m0[86u].x;
    float _2741 = _933 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _866 : (isnan(_866) ? cbSceneParam._m0[77u].w : min(_866, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_866 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_866) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _866 : min(cbSceneParam._m0[80u].w, _866));
        float _2816 = _2815 / _866;
        float _2827 = _2816 * _917;
        float _2828 = _918 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2831 = _2816 * _919;
        float _2833 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2834 = _2833 + cbSceneParam._m0[79u].w;
        float _2835 = cbSceneParam._m0[79u].w - _2828;
        float _2841 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2831 * _2831));
        float _2844 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2841;
        float _2849 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2851 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3004;
        if (abs((_2829 - _2833) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3004 = ((((_2834 > 0.0) ? exp2(_2849 * _2834) : (2.0 - exp2(_2851 * _2834))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2844;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : max(_2834, _2835));
            float _2966 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : min(_2834, _2835));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3004 = ((abs(_2841 / _2829) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2849 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2849 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2851 * _2975) - exp2(_2851 * _2976)) * _2964))) + (_2844 * cbSceneParam._m0[80u].z);
        }
        vec4 _3006 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3015 = exp2((_3004 * (-1.44269502162933349609375)) * (1.0 - _3006.w));
        float _3016 = log2(_3015);
        float _3032 = log2(_2760);
        _2853 = (exp2(_3032 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].x)) * _3006.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2855 = (exp2(_3032 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].y)) * _3006.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2857 = (exp2(_3032 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].z)) * _3006.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2859 = _3015 * _2760;
    }
    else
    {
        _2853 = _2757;
        _2855 = _2758;
        _2857 = _2759;
        _2859 = _2760;
    }
    float _2871 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2872 = _2871 == 3.0;
    float _2873 = log2(_2859);
    float _2880 = exp2(_2873 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2702 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _995))) + ((_2708 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2881 = exp2(_2873 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2704 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _995))) + ((_2710 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2882 = exp2(_2873 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2706 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _995))) + ((_2712 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2891 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2891 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2853)));
    SV_Target.y = _2891 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.z = _2891 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.w = cbInstanceData._m0[_2732].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
}


