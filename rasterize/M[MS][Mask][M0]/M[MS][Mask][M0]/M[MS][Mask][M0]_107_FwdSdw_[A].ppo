#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1416;
float _4058;
float _4059;
float _4060;
float _4061;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4070 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4081 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _560 = _558.x;
    float _570 = dot(vec4(_560, _558.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _582 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _369.z) * 2.0) - ((((_560 - _570) * cbMtdParam._m0[24u].z) + _570) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4092 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _596 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_583 * ((_541.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _599 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_583 * ((_541.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _602 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_583 * ((_541.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _636 = _632.z;
    float _643 = ((_615.x - _634) * _441) + _634;
    float _644 = ((_615.y - _635) * _441) + _635;
    float _645 = ((_615.z - _636) * _441) + _636;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_657.x - _643) * _514) + _643;
    float _669 = ((_657.y - _644) * _514) + _644;
    float _670 = ((_657.z - _645) * _514) + _645;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _695 = ((_682.z - _670) * _583) + _670;
    float _698 = ((((_682.x - _668) * _583) + _668) * 2.0) + (-1.0);
    float _700 = ((((_682.y - _669) * _583) + _669) * 2.0) + (-1.0);
    float _701 = dot(vec2(_698, _700), vec2(_698, _700));
    float _4103 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _732 = (((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _698;
    float _733 = (((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _747 = _745.x;
    float _748 = 1.0 - _747;
    float _776 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_747 - _748) * cbMtdParam._m0[24u].y) + _748) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4114 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _785 = ((((cbMtdParam._m0[10u].x - _596) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _777) + _596;
    float _786 = ((((cbMtdParam._m0[10u].y - _599) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _777) + _599;
    float _787 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _602)) * _777) + _602;
    float _791 = (cbMtdParam._m0[19u].w * (_720.z - _695)) + _695;
    float _795 = ((cbMtdParam._m0[23u].y - _791) * _777) + _791;
    vec4 _814 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _820 = (_814.x * 2.0) + (-1.0);
    float _821 = (_814.y * 2.0) + (-1.0);
    float _822 = dot(vec2(_820, _821), vec2(_820, _821));
    float _4125 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _838 = (_777 * (((cbMtdParam._m0[22u].z * _732) - _732) + _820)) + _732;
    float _839 = (_777 * (((cbMtdParam._m0[22u].z * _733) - _733) + _821)) + _733;
    float _840 = (_777 * (sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _706)) + _706;
    float _842 = cbMtdParam._m0[22u].x + _720.w;
    float _845 = fma(_840, _248 * NORMAL.x, fma(_839, _255 * TANGENT.x, (_241 * _233) * _838));
    float _848 = fma(_840, _248 * NORMAL.y, fma(_839, _255 * TANGENT.y, (_241 * _234) * _838));
    float _851 = fma(_840, _248 * NORMAL.z, fma(_839, _255 * TANGENT.z, (_241 * _235) * _838));
    float _855 = inversesqrt(dot(vec3(_845, _848, _851), vec3(_845, _848, _851)));
    float _856 = _855 * _845;
    float _857 = _855 * _848;
    float _858 = _855 * _851;
    float _4136 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _859 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4158 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4169 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4180 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _877 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _927 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _917);
    float _928 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _917);
    float _929 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _917);
    float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
    float _934 = _927 * _933;
    float _935 = _928 * _933;
    float _936 = _929 * _933;
    vec4 _941 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _943 = _941.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1097 = sqrt(((_927 * _927) + (_928 * _928)) + (_929 * _929));
        float _1103 = (cbMatDynParam._m0[5u].x * _1097) + cbMatDynParam._m0[5u].y;
        float _4191 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1108 = (cbMatDynParam._m0[5u].z * _1097) + cbMatDynParam._m0[5u].w;
        float _4202 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) - _1104)) + _1104) < ((_943 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _954 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _955 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _973 = fma(_858, cbSceneParam._m0[5u].z, fma(_857, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _856));
    float _976 = fma(_858, cbSceneParam._m0[6u].z, fma(_857, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _856));
    float _979 = fma(_858, cbSceneParam._m0[7u].z, fma(_857, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _856));
    uint _992 = _261 + 9u;
    uint _993 = _992 + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_993].z;
    float _4213 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _954, cbSceneParam._m0[86u].y * _955));
    float _1017 = ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * TEXCOORD_5.w) * _1013.x;
    float _1018 = dot(vec3(_856, _857, _858), vec3(_934, _935, _936));
    float _1021 = _1018 * 2.0;
    float _1025 = (_1021 * _856) - _934;
    float _1026 = (_1021 * _857) - _935;
    float _1027 = (_1021 * _858) - _936;
    float _1031 = abs(dot(vec3(_934, _935, _936), vec3(_856, _857, _858)));
    float _4246 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_859);
    float _1046 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1415;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1140 = fma(_1086, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078));
        float _1144 = fma(_1086, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078));
        float _1148 = fma(_1086, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078));
        float _1173 = _1078 + _856;
        float _1174 = _1082 + _857;
        float _1175 = _1086 + _858;
        float _1185 = fma(_1175, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173)) - _1140;
        float _1186 = fma(_1175, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173)) - _1144;
        float _1187 = fma(_1175, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173)) - _1148;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1140 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1144 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[34u].z) + ((((((_1148 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1243 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1209.x + (-0.5));
        float _1245 = _1243 * (_1209.y + (-0.5));
        float _1246 = _1243 * (_1209.z + (-0.5));
        float _1253 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1216.x + (-0.5));
        float _1255 = _1253 * (_1216.y + (-0.5));
        float _1256 = _1253 * (_1216.z + (-0.5));
        float _1263 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1223.x + (-0.5));
        float _1265 = _1263 * (_1223.y + (-0.5));
        float _1266 = _1263 * (_1223.z + (-0.5));
        float _1273 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1230.x + (-0.5));
        float _1275 = _1273 * (_1230.y + (-0.5));
        float _1276 = _1273 * (_1230.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1297 = (dot(vec3(_856, _857, _858), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1307 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4294 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1309 + 1.0))) + _1314) * _1277;
        float _1324 = _1245 * 0.5;
        float _1325 = _1255 * 0.5;
        float _1326 = _1265 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_856, _857, _858), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4327 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1351 + 1.0))) + _1356) * _1278;
        float _1366 = _1246 * 0.5;
        float _1367 = _1256 * 0.5;
        float _1368 = _1266 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_856, _857, _858), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4360 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1393 + 1.0))) + _1398) * _1279;
        _1415 = _1246;
        _1417 = _1245;
        _1418 = _1244;
        _1419 = _1256;
        _1420 = _1255;
        _1421 = _1254;
        _1422 = _1266;
        _1423 = _1265;
        _1424 = _1264;
        _1425 = _1279;
        _1426 = _1278;
        _1427 = _1277;
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1416;
        _1417 = _1416;
        _1418 = _1416;
        _1419 = _1416;
        _1420 = _1416;
        _1421 = _1416;
        _1422 = _1416;
        _1423 = _1416;
        _1424 = _1416;
        _1425 = _1416;
        _1426 = _1416;
        _1427 = _1416;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1456 = fma(_1086, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078));
        float _1460 = fma(_1086, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078));
        float _1464 = fma(_1086, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078));
        float _1487 = _1078 + _856;
        float _1488 = _1082 + _857;
        float _1489 = _1086 + _858;
        float _1499 = fma(_1489, cbModelParam._m0[30u].z, fma(_1488, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1487)) - _1456;
        float _1500 = fma(_1489, cbModelParam._m0[31u].z, fma(_1488, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1487)) - _1460;
        float _1501 = fma(_1489, cbModelParam._m0[32u].z, fma(_1488, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1487)) - _1464;
        float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
        float _1518 = ((_1505 * _1499) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1456 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1505 * _1500) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1460 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1505 * _1501) / cbModelParam._m0[35u].z) + ((((((_1464 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        float _1555 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1522.x + (-0.5));
        float _1557 = _1555 * (_1522.y + (-0.5));
        float _1558 = _1555 * (_1522.z + (-0.5));
        float _1565 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1529.x + (-0.5));
        float _1567 = _1565 * (_1529.y + (-0.5));
        float _1568 = _1565 * (_1529.z + (-0.5));
        float _1575 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1536.x + (-0.5));
        float _1577 = _1575 * (_1536.y + (-0.5));
        float _1578 = _1575 * (_1536.z + (-0.5));
        float _1585 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1543.x + (-0.5));
        float _1587 = _1585 * (_1543.y + (-0.5));
        float _1588 = _1585 * (_1543.z + (-0.5));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = _1556 * 0.5;
        float _1593 = _1566 * 0.5;
        float _1594 = _1576 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_856, _857, _858), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4423 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1619 + 1.0))) + _1624) * _1589;
        float _1634 = _1557 * 0.5;
        float _1635 = _1567 * 0.5;
        float _1636 = _1577 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_856, _857, _858), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4456 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1661 + 1.0))) + _1666) * _1590;
        float _1676 = _1558 * 0.5;
        float _1677 = _1568 * 0.5;
        float _1678 = _1578 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_856, _857, _858), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4489 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1703 + 1.0))) + _1708) * _1591;
        _1725 = _1558;
        _1726 = _1557;
        _1727 = _1556;
        _1728 = _1568;
        _1729 = _1567;
        _1730 = _1566;
        _1731 = _1578;
        _1732 = _1577;
        _1733 = _1576;
        _1734 = _1591;
        _1735 = _1590;
        _1736 = _1589;
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
    }
    else
    {
        _1725 = _1416;
        _1726 = _1416;
        _1727 = _1416;
        _1728 = _1416;
        _1729 = _1416;
        _1730 = _1416;
        _1731 = _1416;
        _1732 = _1416;
        _1733 = _1416;
        _1734 = _1416;
        _1735 = _1416;
        _1736 = _1416;
        _1737 = 0.0;
        _1738 = 0.0;
        _1739 = 0.0;
    }
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1428)) + _1428;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1429)) + _1429;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1430)) + _1430;
    float _1772 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1749));
    float _1793 = _1025 * 0.5;
    float _1794 = _1026 * 0.5;
    float _1795 = _1027 * 0.5;
    float _1796 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1799 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1802 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1836;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1809 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1415, _1419, _1422, _1425));
        float _1813 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1817 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1824 = dot(vec4(cbModelParam._m0[39u]), vec4(_1793, _1794, _1795, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1847;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1838 = dot(vec4(cbModelParam._m0[40u]), vec4(_1793, _1794, _1795, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1851 = (_1847 * cbModelParam._m0[1u].x) + (_1836 * (1.0 - cbModelParam._m0[1u].x));
    float _1861 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _859);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1861 : min(cbModelParam._m0[25u].z, _1861));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1086, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1086, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1086, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1924 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1927 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1955 = frontier_phi_17_15_ladder;
        }
        float _2126;
        if (_1924 > 0.0)
        {
            _2126 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2126 = frontier_phi_26_22_ladder;
        }
        float _2421;
        if (_1927 > 0.0)
        {
            _2421 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2421 = frontier_phi_38_33_ladder;
        }
        float _2423 = isnan(_2126) ? _1955 : (isnan(_1955) ? _2126 : min(_1955, _2126));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1921) + _1910;
        float _2429 = (_2424 * _1924) + _1914;
        float _2430 = (_2424 * _1927) + _1918;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1862);
            frontier_phi_16_38_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_16_38_ladder_2;
        _1945 = frontier_phi_16_38_ladder_1;
        _1947 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1862);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _859);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1086, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1086, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1086, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _2021 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _2024 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2131;
        if (_2018 > 0.0)
        {
            _2131 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2131 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_2021 > 0.0)
        {
            _2448 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2775;
        if (_2024 > 0.0)
        {
            _2775 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2775 = frontier_phi_50_47_ladder;
        }
        float _2777 = isnan(_2448) ? _2131 : (isnan(_2131) ? _2448 : min(_2131, _2448));
        float _2778 = isnan(_2775) ? _2777 : (isnan(_2777) ? _2775 : min(_2777, _2775));
        float _2782 = (_2778 * _2018) + _2007;
        float _2783 = (_2778 * _2021) + _2011;
        float _2784 = (_2778 * _2024) + _2015;
        float _2785 = _2778 * 9.9999997473787516355514526367188e-05;
        float _2786 = (-1.0) - _2785;
        float _2788 = _2785 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2784 > _2788) || ((_2784 < _2786) || ((_2783 > _2788) || ((_2783 < _2786) || ((_2782 < _2786) || (_2782 > _2788))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2784, cbModelParam._m0[17u].z, fma(_2783, cbModelParam._m0[17u].y, _2782 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2784, cbModelParam._m0[18u].z, fma(_2783, cbModelParam._m0[18u].y, _2782 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2784, cbModelParam._m0[19u].z, fma(_2783, cbModelParam._m0[19u].y, _2782 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_25_50_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_25_50_ladder_2;
        _2045 = frontier_phi_25_50_ladder_1;
        _2047 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1952);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2059 = ((((1.0 - _1046) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1046 * _1033)) * _1017;
    float _2060 = _2059 * ((cbModelParam._m0[1u].w * (_2043 - _1943)) + _1943);
    float _2061 = _2059 * ((cbModelParam._m0[1u].w * (_2045 - _1945)) + _1945);
    float _2062 = _2059 * ((cbModelParam._m0[1u].w * (_2047 - _1947)) + _1947);
    float _2065 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2061, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2068 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2061, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2071 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2061, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2118 = _2105 / _2117;
    float _2119 = _2109 / _2117;
    float _2120 = _2113 / _2117;
    float _2267;
    float _2268;
    float _2269;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2147 = ((uint(_2120 > cbSceneParam._m0[59u].y) + uint(_2120 > cbSceneParam._m0[59u].x)) + uint(_2120 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2148 = _2147 + 43u;
        uint _2156 = _2147 + 44u;
        uint _2164 = _2147 + 45u;
        uint _2172 = _2147 + 46u;
        float _2183 = fma(_2117, cbSceneParam._m0[_2148].w, fma(_2113, cbSceneParam._m0[_2148].z, fma(_2109, cbSceneParam._m0[_2148].y, _2105 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2117, cbSceneParam._m0[_2156].w, fma(_2113, cbSceneParam._m0[_2156].z, fma(_2109, cbSceneParam._m0[_2156].y, _2105 * cbSceneParam._m0[_2156].x)));
        float _2195 = fma(_2117, cbSceneParam._m0[_2172].w, fma(_2113, cbSceneParam._m0[_2172].z, fma(_2109, cbSceneParam._m0[_2172].y, _2105 * cbSceneParam._m0[_2172].x)));
        float _2200 = cbSceneParam._m0[33u].z * _2195;
        float _2202 = cbSceneParam._m0[33u].w * _2195;
        float _2205 = fma(_2117, cbSceneParam._m0[_2164].w, fma(_2113, cbSceneParam._m0[_2164].z, fma(_2109, cbSceneParam._m0[_2164].y, _2105 * cbSceneParam._m0[_2164].x))) / _2195;
        float _2253 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
        float _4615 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2260 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 + _2183) / _2195, (_2202 + _2187) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 + _2183) / _2195, (_2187 - _2200) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2200) / _2195, (_2187 - _2202) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2202) / _2195, (_2200 + _2187) / _2195), _2205), 0.0)).x), vec4(0.25)));
        _2267 = 1.0 - (_2260 * cbSceneParam._m0[34u].x);
        _2268 = 1.0 - (_2260 * cbSceneParam._m0[34u].y);
        _2269 = 1.0 - (_2260 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2267 = 1.0;
        _2268 = 1.0;
        _2269 = 1.0;
    }
    float _2333;
    float _2335;
    float _2337;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2321 = fma(_2117, cbSceneParam._m0[63u].w, fma(_2113, cbSceneParam._m0[63u].z, fma(_2109, cbSceneParam._m0[63u].y, _2105 * cbSceneParam._m0[63u].x)));
        float _2322 = fma(_2117, cbSceneParam._m0[60u].w, fma(_2113, cbSceneParam._m0[60u].z, fma(_2109, cbSceneParam._m0[60u].y, _2105 * cbSceneParam._m0[60u].x))) / _2321;
        float _2323 = fma(_2117, cbSceneParam._m0[61u].w, fma(_2113, cbSceneParam._m0[61u].z, fma(_2109, cbSceneParam._m0[61u].y, _2105 * cbSceneParam._m0[61u].x))) / _2321;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2322 >= cbSceneParam._m0[64u].x) && (_2323 >= cbSceneParam._m0[64u].y)) && (_2322 <= cbSceneParam._m0[64u].z)) && (_2323 <= cbSceneParam._m0[64u].w))
        {
            float _2461 = fma(_2117, cbSceneParam._m0[62u].w, fma(_2113, cbSceneParam._m0[62u].z, fma(_2109, cbSceneParam._m0[62u].y, _2105 * cbSceneParam._m0[62u].x))) / _2321;
            float _2465 = isnan(cbSceneParam._m0[41u].w) ? _2461 : (isnan(_2461) ? cbSceneParam._m0[41u].w : max(_2461, cbSceneParam._m0[41u].w));
            float _2508 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
            float _4631 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
            float _2515 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2322, cbSceneParam._m0[33u].w + _2323), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2322, _2323 - cbSceneParam._m0[33u].z), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].z, _2323 - cbSceneParam._m0[33u].w), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2323), _2465), 0.0)).x), vec4(0.25)));
            float _2519 = 1.0 - (_2515 * cbSceneParam._m0[34u].x);
            float _2520 = 1.0 - (_2515 * cbSceneParam._m0[34u].y);
            float _2521 = 1.0 - (_2515 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2521) ? _2269 : (isnan(_2269) ? _2521 : min(_2269, _2521));
            frontier_phi_37_36_ladder_1 = isnan(_2520) ? _2268 : (isnan(_2268) ? _2520 : min(_2268, _2520));
            frontier_phi_37_36_ladder_2 = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
        }
        else
        {
            frontier_phi_37_36_ladder = _2269;
            frontier_phi_37_36_ladder_1 = _2268;
            frontier_phi_37_36_ladder_2 = _2267;
        }
        _2333 = frontier_phi_37_36_ladder_2;
        _2335 = frontier_phi_37_36_ladder_1;
        _2337 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2333 = _2267;
        _2335 = _2268;
        _2337 = _2269;
    }
    uvec4 _2342 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2344 = _2342.x * 14u;
    uint _2345 = _2344 + 13u;
    float _2352 = _1017 + (-1.0);
    float _2357 = (cbLight._m0[_2345].x * _2352) + 1.0;
    float _2358 = (cbLight._m0[_2345].y * _2352) + 1.0;
    float _2359 = (cbLight._m0[_2345].z * _2352) + 1.0;
    float _2360 = (cbLight._m0[_2345].w * _2352) + 1.0;
    uint _2361 = _2344 + 5u;
    float _2367 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
    uint _2371 = _2344 + 4u;
    float _2380 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2384 = _2344 | 1u;
    float _2395 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_856, _857, _858));
    float _2398 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_856, _857, _858));
    float _4667 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _4678 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2403 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2405 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2412 = ((cbLight._m0[_2361].x * _2367) * _2405) + (((cbLight._m0[_2371].x * _2333) * _2380) * _2403);
    float _2413 = ((_2367 * cbLight._m0[_2361].y) * _2405) + (((cbLight._m0[_2371].y * _2335) * _2380) * _2403);
    float _2414 = ((_2367 * cbLight._m0[_2361].z) * _2405) + (((cbLight._m0[_2371].z * _2337) * _2380) * _2403);
    uvec4 _2418 = floatBitsToUint(cbLight._m0[_2344 + 12u]);
    bool _2420 = _2418.x == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2420)
    {
        _2522 = _2412;
        _2524 = _2413;
        _2526 = _2414;
    }
    else
    {
        uint _2530 = _2344 + 6u;
        float _2546 = (dot(vec3(cbLight._m0[_2344 + 2u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4689 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2549 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2522 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2412;
        _2524 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2413;
        _2526 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2414;
    }
    bool _2529 = _2418.y == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2529)
    {
        _2584 = _2522;
        _2586 = _2524;
        _2588 = _2526;
    }
    else
    {
        uint _2746 = _2344 + 7u;
        float _2762 = (dot(vec3(cbLight._m0[_2344 + 3u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2763 = _2762 * _2762;
        float _4705 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2764 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2765 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2584 = (((cbLight._m0[_2746].x * 0.3183098733425140380859375) * _2764) * _2765) + _2522;
        _2586 = (((cbLight._m0[_2746].y * 0.3183098733425140380859375) * _2764) * _2765) + _2524;
        _2588 = (((cbLight._m0[_2746].z * 0.3183098733425140380859375) * _2764) * _2765) + _2526;
    }
    uint _2591 = _2344 + 8u;
    float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _859) * 0.949999988079071044921875);
    float _2605 = _2604 * _2604;
    float _2606 = cbLight._m0[_2344].x + _934;
    float _2607 = cbLight._m0[_2344].y + _935;
    float _2608 = cbLight._m0[_2344].z + _936;
    float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
    float _2613 = _2612 * _2606;
    float _2614 = _2612 * _2607;
    float _2615 = _2612 * _2608;
    float _2616 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2344].xyz));
    float _4721 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _2620 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2621 = dot(vec3(_856, _857, _858), vec3(_2613, _2614, _2615));
    float _4743 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2613, _2614, _2615));
    float _4754 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2605 * _2605;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2644 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2645 = 1.0 - _2605;
    float _2656 = (0.5 / (((_2620 * ((_2619 * _2645) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2645) + _2605) * _2619))) * _2619;
    float _4765 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    uint _2672 = _2344 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _859) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2384].x + _934;
    float _2686 = cbLight._m0[_2384].y + _935;
    float _2687 = cbLight._m0[_2384].z + _936;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2384].xyz));
    float _4776 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2699 = dot(vec3(_856, _857, _858), vec3(_2692, _2693, _2694));
    float _4787 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2692, _2693, _2694));
    float _4798 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2720 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2721 = 1.0 - _2684;
    float _2731 = (0.5 / (((_2620 * ((_2698 * _2721) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2721) + _2684) * _2698))) * _2698;
    float _4809 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2733 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2743 = (((_2720 * cbLight._m0[_2672].x) * _2733) * _2367) + ((((cbLight._m0[_2591].x * _2333) * _2644) * _2658) * _2380);
    float _2744 = (((_2720 * cbLight._m0[_2672].y) * _2733) * _2367) + ((((cbLight._m0[_2591].y * _2335) * _2644) * _2658) * _2380);
    float _2745 = (((_2720 * cbLight._m0[_2672].z) * _2733) * _2367) + ((((cbLight._m0[_2591].z * _2337) * _2644) * _2658) * _2380);
    float _2801;
    float _2803;
    float _2805;
    if (_2420)
    {
        _2801 = _2743;
        _2803 = _2744;
        _2805 = _2745;
    }
    else
    {
        uint _2807 = _2344 + 2u;
        uint _2811 = _2344 + 10u;
        float _2825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2807].w)) * _859) * 0.949999988079071044921875);
        float _2826 = _2825 * _2825;
        float _2827 = cbLight._m0[_2807].x + _934;
        float _2828 = cbLight._m0[_2807].y + _935;
        float _2829 = cbLight._m0[_2807].z + _936;
        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
        float _2834 = _2833 * _2827;
        float _2835 = _2833 * _2828;
        float _2836 = _2833 * _2829;
        float _2837 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2807].xyz));
        float _4820 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2841 = dot(vec3(_856, _857, _858), vec3(_2834, _2835, _2836));
        float _4831 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2845 = dot(vec3(cbLight._m0[_2807].xyz), vec3(_2834, _2835, _2836));
        float _4842 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2849 = _2826 * _2826;
        float _2853 = ((_2844 * _2844) * (_2849 + (-1.0))) + 1.0;
        float _2862 = (exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2863 = 1.0 - _2826;
        float _2873 = (0.5 / (((_2620 * ((_2840 * _2863) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2863) + _2826) * _2840))) * _2840;
        float _4853 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2849 / ((_2853 * _2853) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2801 = (((_2862 * cbLight._m0[_2811].x) * _2875) * _2876) + _2743;
        _2803 = (((_2862 * cbLight._m0[_2811].y) * _2875) * _2876) + _2744;
        _2805 = (((_2862 * cbLight._m0[_2811].z) * _2875) * _2876) + _2745;
    }
    float _2907;
    float _2909;
    float _2911;
    if (_2529)
    {
        _2907 = _2801;
        _2909 = _2803;
        _2911 = _2805;
    }
    else
    {
        uint _2918 = _2344 + 3u;
        uint _2922 = _2344 + 11u;
        float _2936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2918].w)) * _859) * 0.949999988079071044921875);
        float _2937 = _2936 * _2936;
        float _2938 = cbLight._m0[_2918].x + _934;
        float _2939 = cbLight._m0[_2918].y + _935;
        float _2940 = cbLight._m0[_2918].z + _936;
        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
        float _2945 = _2944 * _2938;
        float _2946 = _2944 * _2939;
        float _2947 = _2944 * _2940;
        float _2948 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2918].xyz));
        float _4869 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2952 = dot(vec3(_856, _857, _858), vec3(_2945, _2946, _2947));
        float _4880 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2956 = dot(vec3(cbLight._m0[_2918].xyz), vec3(_2945, _2946, _2947));
        float _4891 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2960 = _2937 * _2937;
        float _2964 = ((_2955 * _2955) * (_2960 + (-1.0))) + 1.0;
        float _2973 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2974 = 1.0 - _2937;
        float _2984 = (0.5 / (((_2620 * ((_2951 * _2974) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2974) + _2937) * _2951))) * _2951;
        float _4902 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2986 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2960 / ((_2964 * _2964) * 3.141590118408203125));
        float _2987 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2907 = (((_2973 * cbLight._m0[_2922].x) * _2986) * _2987) + _2801;
        _2909 = (((_2973 * cbLight._m0[_2922].y) * _2986) * _2987) + _2803;
        _2911 = (((_2973 * cbLight._m0[_2922].z) * _2986) * _2987) + _2805;
    }
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    if (_2342.y == 0u)
    {
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.x;
        uint _3020 = uint((float(_3008.y) * floor(float(uint(cbSceneParam._m0[85u].y * _955) / _3009))) + floor(float(uint(cbSceneParam._m0[85u].x * _954) / _3009)));
        float _3030 = (log2(_2120 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3031 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        uint _3034 = uint(isnan(14.0) ? _3031 : (isnan(_3031) ? 14.0 : min(_3031, 14.0)));
        uvec4 _3039 = texelFetch(g_lightClusterGridBuffer, int(((_3034 << 2u) + (_3020 << 6u)) >> 2u));
        uint _3040 = _3039.x;
        uint _3041 = _3008.z;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        if (((((1u << ((_3041 >> 4u) & 15u)) + 4294967295u) & _3040) == 0u) || ((_3041 & 240u) == 0u))
        {
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
        }
        else
        {
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            uint _3279 = 0u;
            uint _3288;
            bool _3289;
            for (;;)
            {
                _3288 = texelFetch(g_lightClassification, int((((_3034 << 5u) + (_3020 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                _3289 = _3288 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3289)
                {
                    frontier_phi_71_pred = _3278;
                    frontier_phi_71_pred_1 = _3277;
                    frontier_phi_71_pred_2 = _3276;
                    frontier_phi_71_pred_3 = _3275;
                    frontier_phi_71_pred_4 = _3274;
                    frontier_phi_71_pred_5 = _3273;
                }
                else
                {
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    uint _3424;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3288;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    for (;;)
                    {
                        uint _3428 = uint(findLSB(_3424)) + (_3279 << 5u);
                        uint _3425 = (_3424 + 4294967295u) & _3424;
                        uint _3430 = _3428 * 48u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3450 = (_3428 * 48u) + 4u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 3u)).x));
                        uint _3469 = (_3428 * 48u) + 8u;
                        vec3 _3480 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x));
                        float _3484 = _3444.x - _2118;
                        float _3485 = _3444.y - _2119;
                        float _3486 = _3444.z - _2120;
                        float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                        float _3490 = inversesqrt(_3487);
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3494 = dot(vec3(_973, _976, _979), vec3(_3491, _3492, _3493));
                        float _3499 = 1.0 - (_3487 * _3444.w);
                        float _4928 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3501 = sqrt(_3487) * _3463.w;
                        float _3504 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3494) + _3505;
                        float _3511 = _3501 * _3501;
                        float _3515 = ((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3500) / ((_3511 * 0.699999988079071044921875) + 1.0);
                        float _3519 = (-0.0) - _2118;
                        float _3520 = (-0.0) - _2119;
                        float _3521 = (-0.0) - _2120;
                        float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3535 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                        float _3536 = 1.0 - _1033;
                        float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                        float _3544 = _3543 * _3543;
                        float _3545 = _3544 * _3544;
                        float _3546 = _3526 + _3491;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3556 = dot(vec3(_973, _976, _979), vec3(_3526, _3527, _3528));
                        float _4944 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3560 = dot(vec3(_973, _976, _979), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                        float _4955 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                        float _3568 = _3504 * _3544;
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3494) + _3569;
                        float _4966 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3573 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3574 = 1.0 - _3544;
                        float _3584 = (0.5 / (((_3573 * ((_3559 * _3574) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3544) * _3559))) * _3573;
                        float _4977 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3595 = (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3567 * _3567) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125))) * _3500;
                        _3348 = (_3515 * _3463.x) + _3421;
                        _3349 = (_3515 * _3463.y) + _3422;
                        _3350 = (_3515 * _3463.z) + _3423;
                        _3345 = (_3595 * _3480.x) + _3418;
                        _3346 = (_3595 * _3480.y) + _3419;
                        _3347 = (_3595 * _3480.z) + _3420;
                        if (_3425 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3425;
                        }
                    }
                    frontier_phi_71_pred = _3350;
                    frontier_phi_71_pred_1 = _3349;
                    frontier_phi_71_pred_2 = _3348;
                    frontier_phi_71_pred_3 = _3347;
                    frontier_phi_71_pred_4 = _3346;
                    frontier_phi_71_pred_5 = _3345;
                }
                _3131 = frontier_phi_71_pred;
                _3129 = frontier_phi_71_pred_1;
                _3127 = frontier_phi_71_pred_2;
                _3125 = frontier_phi_71_pred_3;
                _3123 = frontier_phi_71_pred_4;
                _3121 = frontier_phi_71_pred_5;
                uint _3280 = _3279 + 1u;
                if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3273 = _3121;
                    _3274 = _3123;
                    _3275 = _3125;
                    _3276 = _3127;
                    _3277 = _3129;
                    _3278 = _3131;
                    _3279 = _3280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
        }
        uvec4 _3134 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3135 = _3134.z;
        uint _3137 = (_3135 >> 8u) & 15u;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((4294967295u << _3137) & _3040) == 0u)
        {
            _3241 = _3120;
            _3243 = _3122;
            _3245 = _3124;
            _3247 = _3126;
            _3249 = _3128;
            _3251 = _3130;
        }
        else
        {
            float _3266 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
            float _3267 = _3266 * _2118;
            float _3268 = _3266 * _2119;
            float _3269 = _3266 * _2120;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3137 < ((_3135 >> 12u) & 15u))
            {
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3401 = _3120;
                float _3402 = _3122;
                float _3403 = _3124;
                float _3404 = _3126;
                float _3405 = _3128;
                float _3406 = _3130;
                uint _3407 = _3137;
                uint _3416;
                bool _3417;
                for (;;)
                {
                    _3416 = texelFetch(g_lightClassification, int((((_3034 << 5u) + (_3020 << 9u)) + (_3407 << 2u)) >> 2u)).x;
                    _3417 = _3416 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3417)
                    {
                        frontier_phi_82_pred = _3406;
                        frontier_phi_82_pred_1 = _3405;
                        frontier_phi_82_pred_2 = _3404;
                        frontier_phi_82_pred_3 = _3403;
                        frontier_phi_82_pred_4 = _3402;
                        frontier_phi_82_pred_5 = _3401;
                    }
                    else
                    {
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        uint _3628 = _3416;
                        uint _3629;
                        vec4 _3654;
                        float _3655;
                        vec4 _3670;
                        vec3 _3682;
                        vec4 _3697;
                        vec4 _3712;
                        float _3758;
                        bool _3759;
                        for (;;)
                        {
                            uint _3639 = ((_3407 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3628));
                            _3629 = (_3628 + 4294967295u) & _3628;
                            uint _3641 = _3639 * 40u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3655 = _3654.w;
                            uint _3657 = (_3639 * 40u) + 4u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3639 * 40u) + 8u;
                            _3682 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x));
                            uint _3684 = (_3639 * 40u) + 16u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3639 * 40u) + 20u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3639 * 40u) + 24u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3733 = (_3639 * 40u) + 28u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            _3758 = fma(_2120, _3746.z, fma(_2119, _3746.y, _3746.x * _2118)) + _3746.w;
                            _3759 = !((fma(_2120, _3727.z, fma(_2119, _3727.y, _3727.x * _2118)) + _3727.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3759)
                            {
                                float _3786 = _3654.x - _2118;
                                float _3787 = _3654.y - _2119;
                                float _3788 = _3654.z - _2120;
                                float _3789 = dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788));
                                float _3792 = inversesqrt(_3789);
                                float _3793 = _3792 * _3786;
                                float _3794 = _3792 * _3787;
                                float _3795 = _3792 * _3788;
                                float _3799 = 1.0 - (_3789 / (_3655 * _3655));
                                float _4988 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3804 = sqrt(_3789) * _3670.w;
                                float _3806 = 1.39999997615814208984375 / (_3804 + 1.39999997615814208984375);
                                float _3807 = _3806 * _3806;
                                float _3810 = ((1.0 - _3807) * dot(vec3(_3793, _3794, _3795), vec3(_973, _976, _979))) + _3807;
                                float _3813 = _3804 * _3804;
                                float _3817 = (fma(_2120, _3697.z, fma(_2119, _3697.y, _3697.x * _2118)) + _3697.w) / _3758;
                                float _3818 = (fma(_2120, _3712.z, fma(_2119, _3712.y, _3712.x * _2118)) + _3712.w) / _3758;
                                float _3822 = 1.0 - dot(vec2(_3817, _3818), vec2(_3817, _3818));
                                float _5004 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3824 = _3823 * (((isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0))) * _3800) / ((_3813 * 0.699999988079071044921875) + 1.0));
                                float _3836 = exp2(log2(1.0 / ((_3813 * 3.5) + 5.0)) * 0.25);
                                float _3837 = 1.0 - _1033;
                                float _3844 = sqrt(1.0 - ((1.0 - (_3837 * _3837)) * (1.0 - (_3836 * _3836))));
                                float _3845 = _3844 * _3844;
                                float _3846 = _3845 * _3845;
                                float _3847 = _3793 - _3267;
                                float _3848 = _3794 - _3268;
                                float _3849 = _3795 - _3269;
                                float _3853 = inversesqrt(dot(vec3(_3847, _3848, _3849), vec3(_3847, _3848, _3849)));
                                float _3857 = dot(vec3(_973, _976, _979), vec3((-0.0) - _3267, (-0.0) - _3268, (-0.0) - _3269));
                                float _5015 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3861 = dot(vec3(_973, _976, _979), vec3(_3853 * _3847, _3853 * _3848, _3853 * _3849));
                                float _5026 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3868 = ((_3864 * _3864) * (_3846 + (-1.0))) + 1.0;
                                float _3869 = _3806 * _3845;
                                float _3870 = _3869 * _3869;
                                float _3876 = ((1.0 - _3870) * dot(vec3(_973, _976, _979), vec3(_3793, _3794, _3795))) + _3870;
                                float _5037 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3877 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3878 = 1.0 - _3845;
                                float _3888 = (0.5 / (((_3877 * ((_3860 * _3878) + _3845)) + 9.9999999392252902907785028219223e-09) + (((_3877 * _3878) + _3845) * _3860))) * _3877;
                                float _5048 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3898 = (_3823 * _3800) * (((_3846 * 3.1415927410125732421875) * (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) / ((_3868 * _3868) * ((_3813 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3824 * _3670.z;
                                frontier_phi_88_pred_1 = _3824 * _3670.y;
                                frontier_phi_88_pred_2 = _3824 * _3670.x;
                                frontier_phi_88_pred_3 = _3898 * _3682.z;
                                frontier_phi_88_pred_4 = _3898 * _3682.y;
                                frontier_phi_88_pred_5 = _3898 * _3682.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_88_pred;
                            _3906 = frontier_phi_88_pred_1;
                            _3905 = frontier_phi_88_pred_2;
                            _3904 = frontier_phi_88_pred_3;
                            _3903 = frontier_phi_88_pred_4;
                            _3902 = frontier_phi_88_pred_5;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            if (_3629 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3629;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3614;
                        frontier_phi_82_pred_1 = _3613;
                        frontier_phi_82_pred_2 = _3612;
                        frontier_phi_82_pred_3 = _3611;
                        frontier_phi_82_pred_4 = _3610;
                        frontier_phi_82_pred_5 = _3609;
                    }
                    _3252 = frontier_phi_82_pred;
                    _3250 = frontier_phi_82_pred_1;
                    _3248 = frontier_phi_82_pred_2;
                    _3246 = frontier_phi_82_pred_3;
                    _3244 = frontier_phi_82_pred_4;
                    _3242 = frontier_phi_82_pred_5;
                    uint _3408 = _3407 + 1u;
                    if (_3408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3401 = _3242;
                        _3402 = _3244;
                        _3403 = _3246;
                        _3404 = _3248;
                        _3405 = _3250;
                        _3406 = _3252;
                        _3407 = _3408;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3248;
                frontier_phi_63_64_ladder_1 = _3252;
                frontier_phi_63_64_ladder_2 = _3250;
                frontier_phi_63_64_ladder_3 = _3246;
                frontier_phi_63_64_ladder_4 = _3244;
                frontier_phi_63_64_ladder_5 = _3242;
            }
            else
            {
                frontier_phi_63_64_ladder = _3126;
                frontier_phi_63_64_ladder_1 = _3130;
                frontier_phi_63_64_ladder_2 = _3128;
                frontier_phi_63_64_ladder_3 = _3124;
                frontier_phi_63_64_ladder_4 = _3122;
                frontier_phi_63_64_ladder_5 = _3120;
            }
            _3241 = frontier_phi_63_64_ladder_5;
            _3243 = frontier_phi_63_64_ladder_4;
            _3245 = frontier_phi_63_64_ladder_3;
            _3247 = frontier_phi_63_64_ladder;
            _3249 = frontier_phi_63_64_ladder_2;
            _3251 = frontier_phi_63_64_ladder_1;
        }
        float _3256 = isnan(1.0) ? _1017 : (isnan(_1017) ? 1.0 : min(_1017, 1.0));
        _3053 = (_3256 * _3247) + _2584;
        _3055 = (_3256 * _3249) + _2586;
        _3057 = (_3256 * _3251) + _2588;
        _3059 = ((_3241 * 0.039999999105930328369140625) * _3256) + _2907;
        _3061 = ((_3243 * 0.039999999105930328369140625) * _3256) + _2909;
        _3063 = ((_3245 * 0.039999999105930328369140625) * _3256) + _2911;
    }
    else
    {
        _3053 = _2584;
        _3055 = _2586;
        _3057 = _2588;
        _3059 = _2907;
        _3061 = _2909;
        _3063 = _2911;
    }
    float _5064 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _5075 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _5086 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _3080 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3053 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1017))) + ((_3059 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    float _3081 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3055 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1017))) + ((_3061 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    float _3082 = ((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3057 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1017))) + ((_3063 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    uint _3083 = _261 + 6u;
    float _3091 = _954 / cbSceneParam._m0[86u].x;
    float _3092 = _955 / cbSceneParam._m0[86u].y;
    vec4 _3106 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3091, _3092, (log2((isnan(cbSceneParam._m0[77u].w) ? _877 : (isnan(_877) ? cbSceneParam._m0[77u].w : min(_877, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3108 = _3106.x;
    float _3109 = _3106.y;
    float _3110 = _3106.z;
    float _3111 = _3106.w;
    float _3183;
    float _3185;
    float _3187;
    float _3189;
    if (_877 > cbSceneParam._m0[78u].w)
    {
        float _3145 = isnan(_877) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _877 : min(cbSceneParam._m0[80u].w, _877));
        float _3146 = _3145 / _877;
        float _3157 = _3146 * _927;
        float _3158 = _928 * _3146;
        float _3159 = (-0.0) - _3158;
        float _3161 = _3146 * _929;
        float _3163 = (cbSceneParam._m0[77u].w * _3159) / _3145;
        float _3164 = _3163 + cbSceneParam._m0[79u].w;
        float _3165 = cbSceneParam._m0[79u].w - _3158;
        float _3171 = sqrt(((_3157 * _3157) + (_3158 * _3158)) + (_3161 * _3161));
        float _3174 = (1.0 - (cbSceneParam._m0[77u].w / _3145)) * _3171;
        float _3179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3358;
        if (abs((_3159 - _3163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3358 = ((((_3164 > 0.0) ? exp2(_3179 * _3164) : (2.0 - exp2(_3181 * _3164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3174;
        }
        else
        {
            float _3302 = 1.0 / cbSceneParam._m0[80u].x;
            float _3303 = isnan(_3165) ? _3164 : (isnan(_3164) ? _3165 : max(_3164, _3165));
            float _3304 = isnan(_3165) ? _3164 : (isnan(_3164) ? _3165 : min(_3164, _3165));
            float _3313 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : min(_3303, 0.0));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            _3358 = ((abs(_3171 / _3159) * cbSceneParam._m0[80u].y) * ((((_3313 - _3314) * 2.0) - ((exp2(_3179 * (isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0)))) - exp2(_3179 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))))) * _3302)) - ((exp2(_3181 * _3313) - exp2(_3181 * _3314)) * _3302))) + (_3174 * cbSceneParam._m0[80u].z);
        }
        vec4 _3360 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3091, _3092, 1.0), 0.0);
        float _3369 = exp2((_3358 * (-1.44269502162933349609375)) * (1.0 - _3360.w));
        float _3370 = log2(_3369);
        float _3386 = log2(_3111);
        _3183 = (exp2(_3386 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].x)) * _3360.x) / cbSceneParam._m0[78u].x)) + _3108;
        _3185 = (exp2(_3386 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].y)) * _3360.y) / cbSceneParam._m0[78u].y)) + _3109;
        _3187 = (exp2(_3386 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].z)) * _3360.z) / cbSceneParam._m0[78u].z)) + _3110;
        _3189 = _3369 * _3111;
    }
    else
    {
        _3183 = _3108;
        _3185 = _3109;
        _3187 = _3110;
        _3189 = _3111;
    }
    bool _3396;
    vec4 _3199;
    vec4 _3221;
    float _3223;
    float _3227;
    float _3228;
    float _3229;
    float _3230;
    bool _3240;
    for (;;)
    {
        _3199 = cbMatDynParam._m0[0u];
        float _3201 = roundEven(_3199.y);
        bool _3202 = _3201 == 3.0;
        float _3203 = log2(_3189);
        float _3210 = exp2(_3203 * cbSceneParam._m0[78u].x) * _3080;
        float _3211 = exp2(_3203 * cbSceneParam._m0[78u].y) * _3081;
        float _3212 = exp2(_3203 * cbSceneParam._m0[78u].z) * _3082;
        float _3219 = _943 + (-0.5);
        _3221 = cbMtdParam._m0[1u];
        _3223 = _3221.y * _3219;
        float _3226 = (_3201 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3227 = _3226 * (_3202 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3183)));
        _3228 = _3226 * (_3202 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3185)));
        _3229 = _3226 * (_3202 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3187)));
        _3230 = _3219 * 0.999000012874603271484375;
        _3240 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3240)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3230) < 0.5)
            {
                _3396 = true;
                break;
            }
        }
        uint _3337 = _992 + uint(_3199.w);
        if ((cbInstanceData._m0[_3337].w < 1.0) && ((cbInstanceData._m0[_3337].w + _3230) < 0.5))
        {
            _3396 = true;
            break;
        }
        if ((_3223 + 1.0) < _3221.x)
        {
            _3396 = true;
            break;
        }
        _3396 = false;
        break;
    }
    float _3600;
    if (_3396)
    {
        discard_state = true;
        _3600 = 0.0;
    }
    else
    {
        _3600 = cbInstanceData._m0[_3083].w;
    }
    SV_Target.x = _3227;
    SV_Target.y = _3228;
    SV_Target.z = _3229;
    SV_Target.w = _3600;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3083].w;
    discard_exit();
}


