#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1257;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3589 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3600 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3611 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _360 = _355.x * cbMtdParam._m0[11u].x;
    float _361 = _355.y * cbMtdParam._m0[11u].y;
    float _362 = _355.z * cbMtdParam._m0[11u].z;
    vec4 _381 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[24u].z) + _446) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3622 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _474 = (_329.x * cbMtdParam._m0[9u].x) * ((_464 * ((_381.x * cbMtdParam._m0[12u].x) - _360)) + _360);
    float _475 = (_329.y * cbMtdParam._m0[9u].y) * ((_464 * ((_381.y * cbMtdParam._m0[12u].y) - _361)) + _361);
    float _476 = (_329.z * cbMtdParam._m0[9u].z) * ((_464 * ((_381.z * cbMtdParam._m0[12u].z) - _362)) + _362);
    float _480 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _474;
    float _483 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _475;
    float _486 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _476;
    float _494 = (((_474 - _480) * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) + _480) * 4.55000019073486328125;
    float _496 = (((_475 - _483) * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) + _483) * 4.55000019073486328125;
    float _498 = (((_476 - _486) * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) + _486) * 4.55000019073486328125;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _566 = ((_536.z - _557) * _464) + _557;
    float _569 = ((((_536.x - _555) * _464) + _555) * 2.0) + (-1.0);
    float _570 = ((((_536.y - _556) * _464) + _556) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3633 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _610 = (_569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_511.x * 2.0) + (-1.0)))) + (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _611 = (_570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_511.y * 2.0) + (-1.0)))) + (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _623 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _652 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].y) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3644 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _661 = ((((cbMtdParam._m0[10u].x - _494) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _653) + _494;
    float _662 = ((((cbMtdParam._m0[10u].y - _496) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _653) + _496;
    float _663 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _498)) * _653) + _498;
    float _668 = (((_511.z - _566) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _566;
    float _672 = ((_598.z - _668) * cbMtdParam._m0[19u].w) + _668;
    float _676 = ((cbMtdParam._m0[23u].y - _672) * _653) + _672;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _701 = (_695.x * 2.0) + (-1.0);
    float _702 = (_695.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3655 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _719 = (_653 * (((cbMtdParam._m0[22u].z * _610) - _610) + _701)) + _610;
    float _720 = (_653 * (((cbMtdParam._m0[22u].z * _611) - _611) + _702)) + _611;
    float _721 = (_653 * (sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) - _576)) + _576;
    float _723 = cbMtdParam._m0[22u].x + _598.w;
    float _726 = fma(_721, _241 * NORMAL.x, fma(_720, _248 * TANGENT.x, (_234 * _226) * _719));
    float _729 = fma(_721, _241 * NORMAL.y, fma(_720, _248 * TANGENT.y, (_234 * _227) * _719));
    float _732 = fma(_721, _241 * NORMAL.z, fma(_720, _248 * TANGENT.z, (_234 * _228) * _719));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _3666 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _740 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3688 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3699 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3710 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _842 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _845 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _848 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _862 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_862].z;
    float _3721 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _886 = ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * TEXCOORD_5.w) * _882.x;
    float _887 = dot(vec3(_737, _738, _739), vec3(_815, _816, _817));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _737) - _815;
    float _895 = (_890 * _738) - _816;
    float _896 = (_890 * _739) - _817;
    float _900 = abs(dot(vec3(_815, _816, _817), vec3(_737, _738, _739)));
    float _3754 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_740);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _985 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _989 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1014 = _947 + _737;
        float _1015 = _951 + _738;
        float _1016 = _955 + _739;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _981;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _985;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _989;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_737, _738, _739), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3802 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_737, _738, _739), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3835 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_737, _738, _739), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3868 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1300 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1304 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1327 = _947 + _737;
        float _1328 = _951 + _738;
        float _1329 = _955 + _739;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_737, _738, _739), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3931 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_737, _738, _739), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _3964 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_737, _738, _739), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _3997 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1257;
        _1566 = _1257;
        _1567 = _1257;
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1269)) + _1269;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _894 * 0.5;
    float _1634 = _895 * 0.5;
    float _1635 = _896 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1751 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1755 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1759 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1762 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1765 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1768 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1796;
        if (_1762 > 0.0)
        {
            _1796 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1796 = frontier_phi_14_12_ladder;
        }
        float _2019;
        if (_1765 > 0.0)
        {
            _2019 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2019 = frontier_phi_23_19_ladder;
        }
        float _2265;
        if (_1768 > 0.0)
        {
            _2265 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2265 = frontier_phi_35_30_ladder;
        }
        float _2267 = isnan(_2019) ? _1796 : (isnan(_1796) ? _2019 : min(_1796, _2019));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1762) + _1751;
        float _2273 = (_2268 * _1765) + _1755;
        float _2274 = (_2268 * _1768) + _1759;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2275;
        float _2279 = _2275 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 > _2279) || ((_2273 < _2277) || ((_2272 < _2277) || (_2272 > _2279))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2274, cbModelParam._m0[9u].z, fma(_2273, cbModelParam._m0[9u].y, _2272 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2274, cbModelParam._m0[10u].z, fma(_2273, cbModelParam._m0[10u].y, _2272 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2274, cbModelParam._m0[11u].z, fma(_2273, cbModelParam._m0[11u].y, _2272 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_13_35_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1784 = frontier_phi_13_35_ladder_2;
        _1786 = frontier_phi_13_35_ladder_1;
        _1788 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1702);
        _1784 = _1772.x * cbModelParam._m0[1u].y;
        _1786 = _1772.y * cbModelParam._m0[1u].y;
        _1788 = _1772.z * cbModelParam._m0[1u].y;
    }
    float _1792 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1792 : min(cbModelParam._m0[25u].w, _1792));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1862 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1865 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2024;
        if (_1859 > 0.0)
        {
            _2024 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2024 = frontier_phi_25_21_ladder;
        }
        float _2292;
        if (_1862 > 0.0)
        {
            _2292 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2292 = frontier_phi_37_32_ladder;
        }
        float _2497;
        if (_1865 > 0.0)
        {
            _2497 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2497 = frontier_phi_46_43_ladder;
        }
        float _2499 = isnan(_2292) ? _2024 : (isnan(_2024) ? _2292 : min(_2024, _2292));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1859) + _1848;
        float _2505 = (_2500 * _1862) + _1852;
        float _2506 = (_2500 * _1865) + _1856;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1793);
            frontier_phi_22_46_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_22_46_ladder_2;
        _1886 = frontier_phi_22_46_ladder_1;
        _1888 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1793);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1900 = ((((1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_915 * _902)) * _886;
    float _1901 = _1900 * ((cbModelParam._m0[1u].w * (_1884 - _1784)) + _1784);
    float _1902 = _1900 * ((cbModelParam._m0[1u].w * (_1886 - _1786)) + _1786);
    float _1903 = _1900 * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    vec4 _1920 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_823, _824));
    float _1922 = _1920.w;
    float _1934 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1922);
    float _1935 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1922);
    float _1936 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1922);
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _886 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1978 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1982 = _1942 | 1u;
    float _1993 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_737, _738, _739));
    float _1996 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_737, _738, _739));
    float _4133 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _4144 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2001 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _2003 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.3183098733425140380859375;
    float _2010 = ((cbLight._m0[_1959].x * _1965) * _2003) + (((cbLight._m0[_1969].x * _1934) * _1978) * _2001);
    float _2011 = ((_1965 * cbLight._m0[_1959].y) * _2003) + (((cbLight._m0[_1969].y * _1935) * _1978) * _2001);
    float _2012 = ((_1965 * cbLight._m0[_1959].z) * _2003) + (((cbLight._m0[_1969].z * _1936) * _1978) * _2001);
    uvec4 _2016 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2018 = _2016.x == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_2018)
    {
        _2029 = _2010;
        _2031 = _2011;
        _2033 = _2012;
    }
    else
    {
        uint _2037 = _1942 + 6u;
        float _2053 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4155 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2056 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2029 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _2010;
        _2031 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _2011;
        _2033 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _2012;
    }
    bool _2036 = _2016.y == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2036)
    {
        _2074 = _2029;
        _2076 = _2031;
        _2078 = _2033;
    }
    else
    {
        uint _2236 = _1942 + 7u;
        float _2252 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4171 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2255 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2074 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2029;
        _2076 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2031;
        _2078 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2033;
    }
    uint _2081 = _1942 + 8u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _740) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1942].x + _815;
    float _2097 = cbLight._m0[_1942].y + _816;
    float _2098 = cbLight._m0[_1942].z + _817;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_1942].xyz));
    float _4187 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2110 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2111 = dot(vec3(_737, _738, _739), vec3(_2103, _2104, _2105));
    float _4209 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2103, _2104, _2105));
    float _4220 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2095 * _2095;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2110 * ((_2109 * _2135) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2135) + _2095) * _2109))) * _2109;
    float _4231 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    uint _2162 = _1942 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _740) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_1982].x + _815;
    float _2176 = cbLight._m0[_1982].y + _816;
    float _2177 = cbLight._m0[_1982].z + _817;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_1982].xyz));
    float _4242 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2189 = dot(vec3(_737, _738, _739), vec3(_2182, _2183, _2184));
    float _4253 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2182, _2183, _2184));
    float _4264 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2174;
    float _2221 = (0.5 / (((_2110 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2211) + _2174) * _2188))) * _2188;
    float _4275 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2233 = (((_2210 * cbLight._m0[_2162].x) * _2223) * _1965) + ((((cbLight._m0[_2081].x * _1934) * _2134) * _2148) * _1978);
    float _2234 = (((_2210 * cbLight._m0[_2162].y) * _2223) * _1965) + ((((cbLight._m0[_2081].y * _1935) * _2134) * _2148) * _1978);
    float _2235 = (((_2210 * cbLight._m0[_2162].z) * _2223) * _1965) + ((((cbLight._m0[_2081].z * _1936) * _2134) * _2148) * _1978);
    float _2297;
    float _2299;
    float _2301;
    if (_2018)
    {
        _2297 = _2233;
        _2299 = _2234;
        _2301 = _2235;
    }
    else
    {
        uint _2303 = _1942 + 2u;
        uint _2307 = _1942 + 10u;
        float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _740) * 0.949999988079071044921875);
        float _2322 = _2321 * _2321;
        float _2323 = cbLight._m0[_2303].x + _815;
        float _2324 = cbLight._m0[_2303].y + _816;
        float _2325 = cbLight._m0[_2303].z + _817;
        float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
        float _2330 = _2329 * _2323;
        float _2331 = _2329 * _2324;
        float _2332 = _2329 * _2325;
        float _2333 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2303].xyz));
        float _4286 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2337 = dot(vec3(_737, _738, _739), vec3(_2330, _2331, _2332));
        float _4297 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2341 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2330, _2331, _2332));
        float _4308 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2345 = _2322 * _2322;
        float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
        float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2359 = 1.0 - _2322;
        float _2369 = (0.5 / (((_2110 * ((_2336 * _2359) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2359) + _2322) * _2336))) * _2336;
        float _4319 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2297 = (((_2358 * cbLight._m0[_2307].x) * _2371) * _2372) + _2233;
        _2299 = (((_2358 * cbLight._m0[_2307].y) * _2371) * _2372) + _2234;
        _2301 = (((_2358 * cbLight._m0[_2307].z) * _2371) * _2372) + _2235;
    }
    float _2407;
    float _2409;
    float _2411;
    if (_2036)
    {
        _2407 = _2297;
        _2409 = _2299;
        _2411 = _2301;
    }
    else
    {
        uint _2418 = _1942 + 3u;
        uint _2422 = _1942 + 11u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _740) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _815;
        float _2439 = cbLight._m0[_2418].y + _816;
        float _2440 = cbLight._m0[_2418].z + _817;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2418].xyz));
        float _4335 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2452 = dot(vec3(_737, _738, _739), vec3(_2445, _2446, _2447));
        float _4346 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4357 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2474 = 1.0 - _2437;
        float _2484 = (0.5 / (((_2110 * ((_2451 * _2474) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2474) + _2437) * _2451))) * _2451;
        float _4368 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2407 = (((_2473 * cbLight._m0[_2422].x) * _2486) * _2487) + _2297;
        _2409 = (((_2473 * cbLight._m0[_2422].y) * _2486) * _2487) + _2299;
        _2411 = (((_2473 * cbLight._m0[_2422].z) * _2486) * _2487) + _2301;
    }
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_1940.y == 0u)
    {
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2562;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2562;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2562;
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.x;
        uint _2589 = uint((float(_2577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2578))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2578)));
        float _2599 = (log2(_2565 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        uint _2603 = uint(isnan(14.0) ? _2600 : (isnan(_2600) ? 14.0 : min(_2600, 14.0)));
        uvec4 _2608 = texelFetch(g_lightClusterGridBuffer, int(((_2603 << 2u) + (_2589 << 6u)) >> 2u));
        uint _2609 = _2608.x;
        uint _2610 = _2577.z;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((((1u << ((_2610 >> 4u) & 15u)) + 4294967295u) & _2609) == 0u) || ((_2610 & 240u) == 0u))
        {
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
        }
        else
        {
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2871)
                {
                    frontier_phi_61_pred = _2855;
                    frontier_phi_61_pred_1 = _2860;
                    frontier_phi_61_pred_2 = _2859;
                    frontier_phi_61_pred_3 = _2858;
                    frontier_phi_61_pred_4 = _2857;
                    frontier_phi_61_pred_5 = _2856;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2870;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2861 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _2563;
                        float _3046 = _3005.y - _2564;
                        float _3047 = _3005.z - _2565;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_842, _845, _848), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4394 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2563;
                        float _3081 = (-0.0) - _2564;
                        float _3082 = (-0.0) - _2565;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _902;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_842, _845, _848), vec3(_3087, _3088, _3089));
                        float _4410 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3122 = dot(vec3(_842, _845, _848), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4421 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3065 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3055) + _3131;
                        float _4432 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4443 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3129 * _3129) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2914 = (_3076 * _3024.x) + _2982;
                        _2915 = (_3076 * _3024.y) + _2983;
                        _2916 = (_3076 * _3024.z) + _2984;
                        _2911 = (_3157 * _3041.x) + _2979;
                        _2912 = (_3157 * _3041.y) + _2980;
                        _2913 = (_3157 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_61_pred = _2911;
                    frontier_phi_61_pred_1 = _2916;
                    frontier_phi_61_pred_2 = _2915;
                    frontier_phi_61_pred_3 = _2914;
                    frontier_phi_61_pred_4 = _2913;
                    frontier_phi_61_pred_5 = _2912;
                }
                _2711 = frontier_phi_61_pred;
                _2721 = frontier_phi_61_pred_1;
                _2719 = frontier_phi_61_pred_2;
                _2717 = frontier_phi_61_pred_3;
                _2715 = frontier_phi_61_pred_4;
                _2713 = frontier_phi_61_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2711;
                    _2856 = _2713;
                    _2857 = _2715;
                    _2858 = _2717;
                    _2859 = _2719;
                    _2860 = _2721;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
        }
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.z;
        uint _2727 = (_2725 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2727) & _2609) == 0u)
        {
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
            _2829 = _2716;
            _2831 = _2718;
            _2833 = _2720;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
            float _2849 = _2848 * _2563;
            float _2850 = _2848 * _2564;
            float _2851 = _2848 * _2565;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2727 < ((_2725 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2962 = _2710;
                float _2963 = _2712;
                float _2964 = _2714;
                float _2965 = _2716;
                float _2966 = _2718;
                float _2967 = _2720;
                uint _2968 = _2727;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2978)
                    {
                        frontier_phi_67_pred = _2965;
                        frontier_phi_67_pred_1 = _2966;
                        frontier_phi_67_pred_2 = _2967;
                        frontier_phi_67_pred_3 = _2964;
                        frontier_phi_67_pred_4 = _2963;
                        frontier_phi_67_pred_5 = _2962;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        uint _3181 = _2977;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3250;
                        vec4 _3265;
                        float _3311;
                        bool _3312;
                        for (;;)
                        {
                            uint _3192 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3237 = (_3192 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3192 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3192 * 40u) + 24u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3286 = (_3192 * 40u) + 28u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3311 = fma(_2565, _3299.z, fma(_2564, _3299.y, _3299.x * _2563)) + _3299.w;
                            _3312 = !((fma(_2565, _3280.z, fma(_2564, _3280.y, _3280.x * _2563)) + _3280.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3312)
                            {
                                float _3339 = _3207.x - _2563;
                                float _3340 = _3207.y - _2564;
                                float _3341 = _3207.z - _2565;
                                float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                                float _3345 = inversesqrt(_3342);
                                float _3346 = _3345 * _3339;
                                float _3347 = _3345 * _3340;
                                float _3348 = _3345 * _3341;
                                float _3352 = 1.0 - (_3342 / (_3208 * _3208));
                                float _4454 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3357 = sqrt(_3342) * _3223.w;
                                float _3359 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                                float _3360 = _3359 * _3359;
                                float _3363 = ((1.0 - _3360) * dot(vec3(_3346, _3347, _3348), vec3(_842, _845, _848))) + _3360;
                                float _3366 = _3357 * _3357;
                                float _3370 = (fma(_2565, _3250.z, fma(_2564, _3250.y, _3250.x * _2563)) + _3250.w) / _3311;
                                float _3371 = (fma(_2565, _3265.z, fma(_2564, _3265.y, _3265.x * _2563)) + _3265.w) / _3311;
                                float _3375 = 1.0 - dot(vec2(_3370, _3371), vec2(_3370, _3371));
                                float _4470 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3377 = _3376 * (((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3353) / ((_3366 * 0.699999988079071044921875) + 1.0));
                                float _3389 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                                float _3390 = 1.0 - _902;
                                float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                                float _3398 = _3397 * _3397;
                                float _3399 = _3398 * _3398;
                                float _3400 = _3346 - _2849;
                                float _3401 = _3347 - _2850;
                                float _3402 = _3348 - _2851;
                                float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                                float _3410 = dot(vec3(_842, _845, _848), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4481 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3414 = dot(vec3(_842, _845, _848), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                                float _4492 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                                float _3422 = _3359 * _3398;
                                float _3423 = _3422 * _3422;
                                float _3429 = ((1.0 - _3423) * dot(vec3(_842, _845, _848), vec3(_3346, _3347, _3348))) + _3423;
                                float _4503 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3431 = 1.0 - _3398;
                                float _3441 = (0.5 / (((_3430 * ((_3413 * _3431) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3398) * _3413))) * _3430;
                                float _4514 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3451 = (_3376 * _3353) * (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) / ((_3421 * _3421) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3451 * _3235.x;
                                frontier_phi_73_pred_1 = _3451 * _3235.y;
                                frontier_phi_73_pred_2 = _3377 * _3223.z;
                                frontier_phi_73_pred_3 = _3377 * _3223.y;
                                frontier_phi_73_pred_4 = _3377 * _3223.x;
                                frontier_phi_73_pred_5 = _3451 * _3235.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_73_pred;
                            _3456 = frontier_phi_73_pred_1;
                            _3460 = frontier_phi_73_pred_2;
                            _3459 = frontier_phi_73_pred_3;
                            _3458 = frontier_phi_73_pred_4;
                            _3457 = frontier_phi_73_pred_5;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3165;
                        frontier_phi_67_pred_1 = _3166;
                        frontier_phi_67_pred_2 = _3167;
                        frontier_phi_67_pred_3 = _3164;
                        frontier_phi_67_pred_4 = _3163;
                        frontier_phi_67_pred_5 = _3162;
                    }
                    _2830 = frontier_phi_67_pred;
                    _2832 = frontier_phi_67_pred_1;
                    _2834 = frontier_phi_67_pred_2;
                    _2828 = frontier_phi_67_pred_3;
                    _2826 = frontier_phi_67_pred_4;
                    _2824 = frontier_phi_67_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2824;
                        _2963 = _2826;
                        _2964 = _2828;
                        _2965 = _2830;
                        _2966 = _2832;
                        _2967 = _2834;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2832;
                frontier_phi_55_56_ladder_1 = _2834;
                frontier_phi_55_56_ladder_2 = _2830;
                frontier_phi_55_56_ladder_3 = _2828;
                frontier_phi_55_56_ladder_4 = _2826;
                frontier_phi_55_56_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_55_56_ladder = _2718;
                frontier_phi_55_56_ladder_1 = _2720;
                frontier_phi_55_56_ladder_2 = _2716;
                frontier_phi_55_56_ladder_3 = _2714;
                frontier_phi_55_56_ladder_4 = _2712;
                frontier_phi_55_56_ladder_5 = _2710;
            }
            _2823 = frontier_phi_55_56_ladder_5;
            _2825 = frontier_phi_55_56_ladder_4;
            _2827 = frontier_phi_55_56_ladder_3;
            _2829 = frontier_phi_55_56_ladder_2;
            _2831 = frontier_phi_55_56_ladder;
            _2833 = frontier_phi_55_56_ladder_1;
        }
        float _2838 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2622 = (_2838 * _2829) + _2074;
        _2624 = (_2838 * _2831) + _2076;
        _2626 = (_2838 * _2833) + _2078;
        _2628 = ((_2823 * 0.039999999105930328369140625) * _2838) + _2407;
        _2630 = ((_2825 * 0.039999999105930328369140625) * _2838) + _2409;
        _2632 = ((_2827 * 0.039999999105930328369140625) * _2838) + _2411;
    }
    else
    {
        _2622 = _2074;
        _2624 = _2076;
        _2626 = _2078;
        _2628 = _2407;
        _2630 = _2409;
        _2632 = _2411;
    }
    float _4530 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4541 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4552 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    uint _2652 = _273 + 6u;
    float _2660 = _823 / cbSceneParam._m0[86u].x;
    float _2661 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2736 = _2735 / _758;
        float _2747 = _2736 * _808;
        float _2748 = _809 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2751 = _2736 * _810;
        float _2753 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2748;
        float _2761 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2749 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2886 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2924 = ((abs(_2761 / _2749) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2771 * _2895) - exp2(_2771 * _2896)) * _2884))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2680);
        _2773 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2775 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2777 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2779 = _2935 * _2680;
    }
    else
    {
        _2773 = _2677;
        _2775 = _2678;
        _2777 = _2679;
        _2779 = _2680;
    }
    float _2791 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2792 = _2791 == 3.0;
    float _2793 = log2(_2779);
    float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2622 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _886))) + ((_2628 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2624 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _886))) + ((_2630 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2626 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _886))) + ((_2632 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _2811 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2811 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.y = _2811 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.z = _2811 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.w = cbInstanceData._m0[_2652].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2652].w;
}


