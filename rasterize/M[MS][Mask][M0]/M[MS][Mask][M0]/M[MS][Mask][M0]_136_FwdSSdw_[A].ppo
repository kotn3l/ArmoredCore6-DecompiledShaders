#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1504;
float _3884;
float _3885;
float _3886;
float _3887;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3896 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _430 = (_423 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _431 = (_423 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _432 = (_423 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3907 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _503 = (_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430;
    float _504 = (_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431;
    float _505 = (_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _564 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _351.z) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3918 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _572 = (_565 * ((_523.x * cbMtdParam._m0[14u].x) - _503)) + _503;
    float _573 = (_565 * ((_523.y * cbMtdParam._m0[14u].y) - _504)) + _504;
    float _574 = (_565 * ((_523.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _640 = ((_612.x - _631) * _423) + _631;
    float _641 = ((_612.y - _632) * _423) + _632;
    float _642 = ((_612.z - _633) * _423) + _633;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_654.x - _640) * _496) + _640;
    float _666 = ((_654.y - _641) * _496) + _641;
    float _667 = ((_654.z - _642) * _496) + _642;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _692 = ((_679.z - _667) * _565) + _667;
    float _695 = ((((_679.x - _665) * _565) + _665) * 2.0) + (-1.0);
    float _697 = ((((_679.y - _666) * _565) + _666) * 2.0) + (-1.0);
    float _698 = dot(vec2(_695, _697), vec2(_695, _697));
    float _3929 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _744 = _742.x;
    float _745 = 1.0 - _744;
    float _751 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _754 = ((isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : min(_751, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _763 = (_754 - ((((((_744 - _745) * cbMtdParam._m0[24u].w) + _745) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _754))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3950 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _771 = (_764 * ((_592.x * cbMtdParam._m0[18u].x) - _572)) + _572;
    float _772 = (_764 * ((_592.y * cbMtdParam._m0[18u].y) - _573)) + _573;
    float _773 = (_764 * ((_592.z * cbMtdParam._m0[18u].z) - _574)) + _574;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _787 = _785.x;
    float _788 = 1.0 - _787;
    float _815 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_787 - _788) * cbMtdParam._m0[24u].y) + _788) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3961 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _824 = ((((cbMtdParam._m0[10u].x - _771) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _816) + _771;
    float _825 = ((((cbMtdParam._m0[10u].y - _772) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _816) + _772;
    float _826 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _773)) * _816) + _773;
    float _830 = (cbMtdParam._m0[19u].w * (_717.z - _692)) + _692;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _851 = (_844.x * 2.0) + (-1.0);
    float _852 = (_844.y * 2.0) + (-1.0);
    float _853 = dot(vec2(_851, _852), vec2(_851, _852));
    float _3972 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _861 = (_764 * (_844.z - _830)) + _830;
    float _864 = ((cbMtdParam._m0[23u].y - _861) * _816) + _861;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _889 = (_883.x * 2.0) + (-1.0);
    float _890 = (_883.y * 2.0) + (-1.0);
    float _891 = dot(vec2(_889, _890), vec2(_889, _890));
    float _3983 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _899 = (((_717.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _695;
    float _900 = (((_717.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _697;
    float _912 = (((_851 - _899) + (cbMtdParam._m0[21u].x * _899)) * _764) + _899;
    float _913 = (((_852 - _900) + (cbMtdParam._m0[21u].x * _900)) * _764) + _900;
    float _914 = (_764 * (sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _703)) + _703;
    float _925 = (((_889 - _912) + (_912 * cbMtdParam._m0[22u].z)) * _816) + _912;
    float _926 = (((_890 - _913) + (_913 * cbMtdParam._m0[22u].z)) * _816) + _913;
    float _927 = ((sqrt(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) - _914) * _816) + _914;
    float _929 = cbMtdParam._m0[22u].x + _717.w;
    float _932 = fma(_927, _252 * NORMAL.x, fma(_926, _259 * TANGENT.x, (_245 * _237) * _925));
    float _935 = fma(_927, _252 * NORMAL.y, fma(_926, _259 * TANGENT.y, (_245 * _238) * _925));
    float _938 = fma(_927, _252 * NORMAL.z, fma(_926, _259 * TANGENT.z, (_245 * _239) * _925));
    float _942 = inversesqrt(dot(vec3(_932, _935, _938), vec3(_932, _935, _938)));
    float _943 = _942 * _932;
    float _944 = _942 * _935;
    float _945 = _942 * _938;
    float _3994 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _946 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4016 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4027 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4038 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _964 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    vec4 _1029 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1031 = _1029.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1185 = sqrt(((_1015 * _1015) + (_1016 * _1016)) + (_1017 * _1017));
        float _1191 = (cbMatDynParam._m0[5u].x * _1185) + cbMatDynParam._m0[5u].y;
        float _4049 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1196 = (cbMatDynParam._m0[5u].z * _1185) + cbMatDynParam._m0[5u].w;
        float _4060 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _1192)) + _1192) < ((_1031 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1061 = fma(_945, cbSceneParam._m0[5u].z, fma(_944, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _943));
    float _1064 = fma(_945, cbSceneParam._m0[6u].z, fma(_944, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _943));
    float _1067 = fma(_945, cbSceneParam._m0[7u].z, fma(_944, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _943));
    uint _1080 = _265 + 9u;
    uint _1081 = _1080 + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4071 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1105 = ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_943, _944, _945), vec3(_1022, _1023, _1024));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _943) - _1022;
    float _1114 = (_1109 * _944) - _1023;
    float _1115 = (_1109 * _945) - _1024;
    float _1119 = abs(dot(vec3(_1022, _1023, _1024), vec3(_943, _944, _945)));
    float _4104 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_946);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1503;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1228 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1232 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1236 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1261 = _1166 + _943;
        float _1262 = _1170 + _944;
        float _1263 = _1174 + _945;
        float _1273 = fma(_1263, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261)) - _1228;
        float _1274 = fma(_1263, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261)) - _1232;
        float _1275 = fma(_1263, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261)) - _1236;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1228 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1232 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[34u].z) + ((((((_1236 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1331 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1297.x + (-0.5));
        float _1333 = _1331 * (_1297.y + (-0.5));
        float _1334 = _1331 * (_1297.z + (-0.5));
        float _1341 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1304.x + (-0.5));
        float _1343 = _1341 * (_1304.y + (-0.5));
        float _1344 = _1341 * (_1304.z + (-0.5));
        float _1351 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1311.x + (-0.5));
        float _1353 = _1351 * (_1311.y + (-0.5));
        float _1354 = _1351 * (_1311.z + (-0.5));
        float _1361 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1318.x + (-0.5));
        float _1363 = _1361 * (_1318.y + (-0.5));
        float _1364 = _1361 * (_1318.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1385 = (dot(vec3(_943, _944, _945), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1395 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4152 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1397 + 1.0))) + _1402) * _1365;
        float _1412 = _1333 * 0.5;
        float _1413 = _1343 * 0.5;
        float _1414 = _1353 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_943, _944, _945), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4185 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1439 + 1.0))) + _1444) * _1366;
        float _1454 = _1334 * 0.5;
        float _1455 = _1344 * 0.5;
        float _1456 = _1354 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_943, _944, _945), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4218 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1481 + 1.0))) + _1486) * _1367;
        _1503 = _1334;
        _1505 = _1333;
        _1506 = _1332;
        _1507 = _1344;
        _1508 = _1343;
        _1509 = _1342;
        _1510 = _1354;
        _1511 = _1353;
        _1512 = _1352;
        _1513 = _1367;
        _1514 = _1366;
        _1515 = _1365;
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1504;
        _1505 = _1504;
        _1506 = _1504;
        _1507 = _1504;
        _1508 = _1504;
        _1509 = _1504;
        _1510 = _1504;
        _1511 = _1504;
        _1512 = _1504;
        _1513 = _1504;
        _1514 = _1504;
        _1515 = _1504;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1548 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1552 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1575 = _1166 + _943;
        float _1576 = _1170 + _944;
        float _1577 = _1174 + _945;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_943, _944, _945), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4281 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_943, _944, _945), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4314 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_943, _944, _945), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4347 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1504;
        _1814 = _1504;
        _1815 = _1504;
        _1816 = _1504;
        _1817 = _1504;
        _1818 = _1504;
        _1819 = _1504;
        _1820 = _1504;
        _1821 = _1504;
        _1822 = _1504;
        _1823 = _1504;
        _1824 = _1504;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1516)) + _1516;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1517)) + _1517;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1518)) + _1518;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1113 * 0.5;
    float _1882 = _1114 * 0.5;
    float _1883 = _1115 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1503, _1507, _1510, _1513));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _946);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2011 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2014 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2042 = frontier_phi_17_15_ladder;
        }
        float _2263;
        if (_2011 > 0.0)
        {
            _2263 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2263 = frontier_phi_26_22_ladder;
        }
        float _2509;
        if (_2014 > 0.0)
        {
            _2509 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2509 = frontier_phi_38_33_ladder;
        }
        float _2511 = isnan(_2263) ? _2042 : (isnan(_2042) ? _2263 : min(_2042, _2263));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _2008) + _1997;
        float _2517 = (_2512 * _2011) + _2001;
        float _2518 = (_2512 * _2014) + _2005;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2519;
        float _2523 = _2519 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 > _2523) || ((_2517 < _2521) || ((_2516 < _2521) || (_2516 > _2523))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2518, cbModelParam._m0[9u].z, fma(_2517, cbModelParam._m0[9u].y, _2516 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2518, cbModelParam._m0[10u].z, fma(_2517, cbModelParam._m0[10u].y, _2516 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2518, cbModelParam._m0[11u].z, fma(_2517, cbModelParam._m0[11u].y, _2516 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_16_38_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_16_38_ladder_2;
        _2032 = frontier_phi_16_38_ladder_1;
        _2034 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1950);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _946);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2106 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2109 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2268;
        if (_2103 > 0.0)
        {
            _2268 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2268 = frontier_phi_28_24_ladder;
        }
        float _2536;
        if (_2106 > 0.0)
        {
            _2536 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2536 = frontier_phi_40_35_ladder;
        }
        float _2741;
        if (_2109 > 0.0)
        {
            _2741 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2741 = frontier_phi_49_46_ladder;
        }
        float _2743 = isnan(_2536) ? _2268 : (isnan(_2268) ? _2536 : min(_2268, _2536));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _2103) + _2092;
        float _2749 = (_2744 * _2106) + _2096;
        float _2750 = (_2744 * _2109) + _2100;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_25_49_ladder = _2949.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2949.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2949.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_25_49_ladder_2;
        _2130 = frontier_phi_25_49_ladder_1;
        _2132 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2039);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2144 = ((((1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1134 * _1121)) * _1105;
    float _2145 = _2144 * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2146 = _2144 * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2147 = _2144 * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    vec4 _2164 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1042, _1043));
    float _2166 = _2164.w;
    float _2178 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2166);
    float _2179 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2166);
    float _2180 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2166);
    uvec4 _2184 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2186 = _2184.x * 14u;
    uint _2187 = _2186 + 13u;
    float _2194 = _1105 + (-1.0);
    float _2199 = (cbLight._m0[_2187].x * _2194) + 1.0;
    float _2200 = (cbLight._m0[_2187].y * _2194) + 1.0;
    float _2201 = (cbLight._m0[_2187].z * _2194) + 1.0;
    float _2202 = (cbLight._m0[_2187].w * _2194) + 1.0;
    uint _2203 = _2186 + 5u;
    float _2209 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2213 = _2186 + 4u;
    float _2222 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2226 = _2186 | 1u;
    float _2237 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_943, _944, _945));
    float _2240 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_943, _944, _945));
    float _4483 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _4494 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2245 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2247 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2254 = ((cbLight._m0[_2203].x * _2209) * _2247) + (((cbLight._m0[_2213].x * _2178) * _2222) * _2245);
    float _2255 = ((_2209 * cbLight._m0[_2203].y) * _2247) + (((cbLight._m0[_2213].y * _2179) * _2222) * _2245);
    float _2256 = ((_2209 * cbLight._m0[_2203].z) * _2247) + (((cbLight._m0[_2213].z * _2180) * _2222) * _2245);
    uvec4 _2260 = floatBitsToUint(cbLight._m0[_2186 + 12u]);
    bool _2262 = _2260.x == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2262)
    {
        _2273 = _2254;
        _2275 = _2255;
        _2277 = _2256;
    }
    else
    {
        uint _2281 = _2186 + 6u;
        float _2297 = (dot(vec3(cbLight._m0[_2186 + 2u].xyz), vec3(_943, _944, _945)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4505 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2300 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2273 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2254;
        _2275 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2255;
        _2277 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2256;
    }
    bool _2280 = _2260.y == 0u;
    float _2318;
    float _2320;
    float _2322;
    if (_2280)
    {
        _2318 = _2273;
        _2320 = _2275;
        _2322 = _2277;
    }
    else
    {
        uint _2480 = _2186 + 7u;
        float _2496 = (dot(vec3(cbLight._m0[_2186 + 3u].xyz), vec3(_943, _944, _945)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4521 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2499 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2318 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2273;
        _2320 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2275;
        _2322 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2277;
    }
    uint _2325 = _2186 + 8u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _946) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2186].x + _1022;
    float _2341 = cbLight._m0[_2186].y + _1023;
    float _2342 = cbLight._m0[_2186].z + _1024;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2186].xyz));
    float _4537 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _4548 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2354 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2355 = dot(vec3(_943, _944, _945), vec3(_2347, _2348, _2349));
    float _4559 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2347, _2348, _2349));
    float _4570 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2339 * _2339;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2379 = 1.0 - _2339;
    float _2390 = (0.5 / (((_2354 * ((_2353 * _2379) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2379) + _2339) * _2353))) * _2353;
    float _4581 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    uint _2406 = _2186 + 9u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _946) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2226].x + _1022;
    float _2420 = cbLight._m0[_2226].y + _1023;
    float _2421 = cbLight._m0[_2226].z + _1024;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2226].xyz));
    float _4592 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2433 = dot(vec3(_943, _944, _945), vec3(_2426, _2427, _2428));
    float _4603 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2426, _2427, _2428));
    float _4614 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2418 * _2418;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2418;
    float _2465 = (0.5 / (((_2354 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2455) + _2418) * _2432))) * _2432;
    float _4625 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    float _2477 = (((_2454 * cbLight._m0[_2406].x) * _2467) * _2209) + ((((cbLight._m0[_2325].x * _2178) * _2378) * _2392) * _2222);
    float _2478 = (((_2454 * cbLight._m0[_2406].y) * _2467) * _2209) + ((((cbLight._m0[_2325].y * _2179) * _2378) * _2392) * _2222);
    float _2479 = (((_2454 * cbLight._m0[_2406].z) * _2467) * _2209) + ((((cbLight._m0[_2325].z * _2180) * _2378) * _2392) * _2222);
    float _2541;
    float _2543;
    float _2545;
    if (_2262)
    {
        _2541 = _2477;
        _2543 = _2478;
        _2545 = _2479;
    }
    else
    {
        uint _2547 = _2186 + 2u;
        uint _2551 = _2186 + 10u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _946) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _1022;
        float _2568 = cbLight._m0[_2547].y + _1023;
        float _2569 = cbLight._m0[_2547].z + _1024;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2547].xyz));
        float _4636 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2581 = dot(vec3(_943, _944, _945), vec3(_2574, _2575, _2576));
        float _4647 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4658 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2354 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2603) + _2566) * _2580))) * _2580;
        float _4669 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2541 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2477;
        _2543 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2478;
        _2545 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2479;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2280)
    {
        _2651 = _2541;
        _2653 = _2543;
        _2655 = _2545;
    }
    else
    {
        uint _2662 = _2186 + 3u;
        uint _2666 = _2186 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _946) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1022;
        float _2683 = cbLight._m0[_2662].y + _1023;
        float _2684 = cbLight._m0[_2662].z + _1024;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2662].xyz));
        float _4685 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2696 = dot(vec3(_943, _944, _945), vec3(_2689, _2690, _2691));
        float _4696 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4707 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2354 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2718) + _2681) * _2695))) * _2695;
        float _4718 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2651 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2541;
        _2653 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2543;
        _2655 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2545;
    }
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_2184.y == 0u)
    {
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2806;
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2806;
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2806;
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.x;
        uint _2833 = uint((float(_2821.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _2822))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _2822)));
        float _2843 = (log2(_2809 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2844 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        uint _2847 = uint(isnan(14.0) ? _2844 : (isnan(_2844) ? 14.0 : min(_2844, 14.0)));
        uvec4 _2852 = texelFetch(g_lightClusterGridBuffer, int(((_2847 << 2u) + (_2833 << 6u)) >> 2u));
        uint _2853 = _2852.x;
        uint _2854 = _2821.z;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((((1u << ((_2854 >> 4u) & 15u)) + 4294967295u) & _2853) == 0u) || ((_2854 & 240u) == 0u))
        {
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
        }
        else
        {
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            uint _3113 = 0u;
            uint _3122;
            bool _3123;
            for (;;)
            {
                _3122 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                _3123 = _3122 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3123)
                {
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                else
                {
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    uint _3258;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3122;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    for (;;)
                    {
                        uint _3262 = uint(findLSB(_3258)) + (_3113 << 5u);
                        uint _3259 = (_3258 + 4294967295u) & _3258;
                        uint _3264 = _3262 * 48u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3284 = (_3262 * 48u) + 4u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3303 = (_3262 * 48u) + 8u;
                        vec3 _3314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x));
                        float _3318 = _3278.x - _2807;
                        float _3319 = _3278.y - _2808;
                        float _3320 = _3278.z - _2809;
                        float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                        float _3324 = inversesqrt(_3321);
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3328 = dot(vec3(_1061, _1064, _1067), vec3(_3325, _3326, _3327));
                        float _3333 = 1.0 - (_3321 * _3278.w);
                        float _4744 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3335 = sqrt(_3321) * _3297.w;
                        float _3338 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3328) + _3339;
                        float _3345 = _3335 * _3335;
                        float _3349 = ((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3334) / ((_3345 * 0.699999988079071044921875) + 1.0);
                        float _3353 = (-0.0) - _2807;
                        float _3354 = (-0.0) - _2808;
                        float _3355 = (-0.0) - _2809;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3370 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _1121;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_1061, _1064, _1067), vec3(_3360, _3361, _3362));
                        float _4760 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3395 = dot(vec3(_1061, _1064, _1067), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4771 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3338 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3328) + _3404;
                        float _4782 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4793 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) / ((_3402 * _3402) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125))) * _3334;
                        _3182 = (_3349 * _3297.x) + _3255;
                        _3183 = (_3349 * _3297.y) + _3256;
                        _3184 = (_3349 * _3297.z) + _3257;
                        _3179 = (_3430 * _3314.x) + _3252;
                        _3180 = (_3430 * _3314.y) + _3253;
                        _3181 = (_3430 * _3314.z) + _3254;
                        if (_3259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3259;
                        }
                    }
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                _2955 = frontier_phi_66_pred;
                _2965 = frontier_phi_66_pred_1;
                _2963 = frontier_phi_66_pred_2;
                _2961 = frontier_phi_66_pred_3;
                _2959 = frontier_phi_66_pred_4;
                _2957 = frontier_phi_66_pred_5;
                uint _3114 = _3113 + 1u;
                if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3107 = _2955;
                    _3108 = _2957;
                    _3109 = _2959;
                    _3110 = _2961;
                    _3111 = _2963;
                    _3112 = _2965;
                    _3113 = _3114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
        }
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.z;
        uint _2971 = (_2969 >> 8u) & 15u;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((4294967295u << _2971) & _2853) == 0u)
        {
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
            _3083 = _2962;
            _3085 = _2964;
        }
        else
        {
            float _3100 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
            float _3101 = _3100 * _2807;
            float _3102 = _3100 * _2808;
            float _3103 = _3100 * _2809;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2971 < ((_2969 >> 12u) & 15u))
            {
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3235 = _2954;
                float _3236 = _2956;
                float _3237 = _2958;
                float _3238 = _2960;
                float _3239 = _2962;
                float _3240 = _2964;
                uint _3241 = _2971;
                uint _3250;
                bool _3251;
                for (;;)
                {
                    _3250 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                    _3251 = _3250 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3251)
                    {
                        frontier_phi_77_pred = _3240;
                        frontier_phi_77_pred_1 = _3239;
                        frontier_phi_77_pred_2 = _3238;
                        frontier_phi_77_pred_3 = _3237;
                        frontier_phi_77_pred_4 = _3236;
                        frontier_phi_77_pred_5 = _3235;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        uint _3463 = _3250;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3547;
                        float _3593;
                        bool _3594;
                        for (;;)
                        {
                            uint _3474 = ((_3241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3474 * 40u) + 20u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3474 * 40u) + 24u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3568 = (_3474 * 40u) + 28u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3593 = fma(_2809, _3581.z, fma(_2808, _3581.y, _3581.x * _2807)) + _3581.w;
                            _3594 = !((fma(_2809, _3562.z, fma(_2808, _3562.y, _3562.x * _2807)) + _3562.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3594)
                            {
                                float _3621 = _3489.x - _2807;
                                float _3622 = _3489.y - _2808;
                                float _3623 = _3489.z - _2809;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3490 * _3490));
                                float _4804 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3639 = sqrt(_3624) * _3505.w;
                                float _3641 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                                float _3642 = _3641 * _3641;
                                float _3645 = ((1.0 - _3642) * dot(vec3(_3628, _3629, _3630), vec3(_1061, _1064, _1067))) + _3642;
                                float _3648 = _3639 * _3639;
                                float _3652 = (fma(_2809, _3532.z, fma(_2808, _3532.y, _3532.x * _2807)) + _3532.w) / _3593;
                                float _3653 = (fma(_2809, _3547.z, fma(_2808, _3547.y, _3547.x * _2807)) + _3547.w) / _3593;
                                float _3657 = 1.0 - dot(vec2(_3652, _3653), vec2(_3652, _3653));
                                float _4820 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3659 = _3658 * (((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3635) / ((_3648 * 0.699999988079071044921875) + 1.0));
                                float _3671 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                                float _3672 = 1.0 - _1121;
                                float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                                float _3680 = _3679 * _3679;
                                float _3681 = _3680 * _3680;
                                float _3682 = _3628 - _3101;
                                float _3683 = _3629 - _3102;
                                float _3684 = _3630 - _3103;
                                float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                                float _3692 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3101, (-0.0) - _3102, (-0.0) - _3103));
                                float _4831 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3696 = dot(vec3(_1061, _1064, _1067), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                                float _4842 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                                float _3704 = _3641 * _3680;
                                float _3705 = _3704 * _3704;
                                float _3711 = ((1.0 - _3705) * dot(vec3(_1061, _1064, _1067), vec3(_3628, _3629, _3630))) + _3705;
                                float _4853 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3713 = 1.0 - _3680;
                                float _3723 = (0.5 / (((_3712 * ((_3695 * _3713) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3680) * _3695))) * _3712;
                                float _4864 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3733 = (_3658 * _3635) * (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3703 * _3703) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3659 * _3505.y;
                                frontier_phi_83_pred_1 = _3659 * _3505.x;
                                frontier_phi_83_pred_2 = _3733 * _3517.z;
                                frontier_phi_83_pred_3 = _3733 * _3517.y;
                                frontier_phi_83_pred_4 = _3733 * _3517.x;
                                frontier_phi_83_pred_5 = _3659 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_83_pred;
                            _3740 = frontier_phi_83_pred_1;
                            _3739 = frontier_phi_83_pred_2;
                            _3738 = frontier_phi_83_pred_3;
                            _3737 = frontier_phi_83_pred_4;
                            _3742 = frontier_phi_83_pred_5;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3449;
                        frontier_phi_77_pred_1 = _3448;
                        frontier_phi_77_pred_2 = _3447;
                        frontier_phi_77_pred_3 = _3446;
                        frontier_phi_77_pred_4 = _3445;
                        frontier_phi_77_pred_5 = _3444;
                    }
                    _3086 = frontier_phi_77_pred;
                    _3084 = frontier_phi_77_pred_1;
                    _3082 = frontier_phi_77_pred_2;
                    _3080 = frontier_phi_77_pred_3;
                    _3078 = frontier_phi_77_pred_4;
                    _3076 = frontier_phi_77_pred_5;
                    uint _3242 = _3241 + 1u;
                    if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3235 = _3076;
                        _3236 = _3078;
                        _3237 = _3080;
                        _3238 = _3082;
                        _3239 = _3084;
                        _3240 = _3086;
                        _3241 = _3242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3080;
                frontier_phi_58_59_ladder_1 = _3086;
                frontier_phi_58_59_ladder_2 = _3084;
                frontier_phi_58_59_ladder_3 = _3082;
                frontier_phi_58_59_ladder_4 = _3078;
                frontier_phi_58_59_ladder_5 = _3076;
            }
            else
            {
                frontier_phi_58_59_ladder = _2958;
                frontier_phi_58_59_ladder_1 = _2964;
                frontier_phi_58_59_ladder_2 = _2962;
                frontier_phi_58_59_ladder_3 = _2960;
                frontier_phi_58_59_ladder_4 = _2956;
                frontier_phi_58_59_ladder_5 = _2954;
            }
            _3075 = frontier_phi_58_59_ladder_5;
            _3077 = frontier_phi_58_59_ladder_4;
            _3079 = frontier_phi_58_59_ladder;
            _3081 = frontier_phi_58_59_ladder_3;
            _3083 = frontier_phi_58_59_ladder_2;
            _3085 = frontier_phi_58_59_ladder_1;
        }
        float _3090 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2866 = (_3090 * _3081) + _2318;
        _2868 = (_3090 * _3083) + _2320;
        _2870 = (_3090 * _3085) + _2322;
        _2872 = ((_3075 * 0.039999999105930328369140625) * _3090) + _2651;
        _2874 = ((_3077 * 0.039999999105930328369140625) * _3090) + _2653;
        _2876 = ((_3079 * 0.039999999105930328369140625) * _3090) + _2655;
    }
    else
    {
        _2866 = _2318;
        _2868 = _2320;
        _2870 = _2322;
        _2872 = _2651;
        _2874 = _2653;
        _2876 = _2655;
    }
    float _4880 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _4891 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4902 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2893 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2866 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1105))) + ((_2872 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2894 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2868 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1105))) + ((_2874 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2895 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2870 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1105))) + ((_2876 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    uint _2896 = _265 + 6u;
    float _2904 = _1042 / cbSceneParam._m0[86u].x;
    float _2905 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _2919 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2904, _2905, (log2((isnan(cbSceneParam._m0[77u].w) ? _964 : (isnan(_964) ? cbSceneParam._m0[77u].w : min(_964, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2921 = _2919.x;
    float _2922 = _2919.y;
    float _2923 = _2919.z;
    float _2924 = _2919.w;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_964 > cbSceneParam._m0[78u].w)
    {
        float _2979 = isnan(_964) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _964 : min(cbSceneParam._m0[80u].w, _964));
        float _2980 = _2979 / _964;
        float _2991 = _2980 * _1015;
        float _2992 = _1016 * _2980;
        float _2993 = (-0.0) - _2992;
        float _2995 = _2980 * _1017;
        float _2997 = (cbSceneParam._m0[77u].w * _2993) / _2979;
        float _2998 = _2997 + cbSceneParam._m0[79u].w;
        float _2999 = cbSceneParam._m0[79u].w - _2992;
        float _3005 = sqrt(((_2991 * _2991) + (_2992 * _2992)) + (_2995 * _2995));
        float _3008 = (1.0 - (cbSceneParam._m0[77u].w / _2979)) * _3005;
        float _3013 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3015 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3192;
        if (abs((_2993 - _2997) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3192 = ((((_2998 > 0.0) ? exp2(_3013 * _2998) : (2.0 - exp2(_3015 * _2998))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3008;
        }
        else
        {
            float _3136 = 1.0 / cbSceneParam._m0[80u].x;
            float _3137 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : max(_2998, _2999));
            float _3138 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : min(_2998, _2999));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            _3192 = ((abs(_3005 / _2993) * cbSceneParam._m0[80u].y) * ((((_3147 - _3148) * 2.0) - ((exp2(_3013 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0)))) - exp2(_3013 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))))) * _3136)) - ((exp2(_3015 * _3147) - exp2(_3015 * _3148)) * _3136))) + (_3008 * cbSceneParam._m0[80u].z);
        }
        vec4 _3194 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2904, _2905, 1.0), 0.0);
        float _3203 = exp2((_3192 * (-1.44269502162933349609375)) * (1.0 - _3194.w));
        float _3204 = log2(_3203);
        float _3220 = log2(_2924);
        _3017 = (exp2(_3220 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].x)) * _3194.x) / cbSceneParam._m0[78u].x)) + _2921;
        _3019 = (exp2(_3220 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].y)) * _3194.y) / cbSceneParam._m0[78u].y)) + _2922;
        _3021 = (exp2(_3220 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].z)) * _3194.z) / cbSceneParam._m0[78u].z)) + _2923;
        _3023 = _3203 * _2924;
    }
    else
    {
        _3017 = _2921;
        _3019 = _2922;
        _3021 = _2923;
        _3023 = _2924;
    }
    bool _3230;
    vec4 _3033;
    vec4 _3055;
    float _3057;
    float _3061;
    float _3062;
    float _3063;
    float _3064;
    bool _3074;
    for (;;)
    {
        _3033 = cbMatDynParam._m0[0u];
        float _3035 = roundEven(_3033.y);
        bool _3036 = _3035 == 3.0;
        float _3037 = log2(_3023);
        float _3044 = exp2(_3037 * cbSceneParam._m0[78u].x) * _2893;
        float _3045 = exp2(_3037 * cbSceneParam._m0[78u].y) * _2894;
        float _3046 = exp2(_3037 * cbSceneParam._m0[78u].z) * _2895;
        float _3053 = _1031 + (-0.5);
        _3055 = cbMtdParam._m0[1u];
        _3057 = _3055.y * _3053;
        float _3060 = (_3035 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3061 = _3060 * (_3036 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3017)));
        _3062 = _3060 * (_3036 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3019)));
        _3063 = _3060 * (_3036 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3021)));
        _3064 = _3053 * 0.999000012874603271484375;
        _3074 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3074)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3064) < 0.5)
            {
                _3230 = true;
                break;
            }
        }
        uint _3171 = _1080 + uint(_3033.w);
        if ((cbInstanceData._m0[_3171].w < 1.0) && ((cbInstanceData._m0[_3171].w + _3064) < 0.5))
        {
            _3230 = true;
            break;
        }
        if ((_3057 + 1.0) < _3055.x)
        {
            _3230 = true;
            break;
        }
        _3230 = false;
        break;
    }
    float _3435;
    if (_3230)
    {
        discard_state = true;
        _3435 = 0.0;
    }
    else
    {
        _3435 = cbInstanceData._m0[_2896].w;
    }
    SV_Target.x = _3061;
    SV_Target.y = _3062;
    SV_Target.z = _3063;
    SV_Target.w = _3435;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2896].w;
    discard_exit();
}


