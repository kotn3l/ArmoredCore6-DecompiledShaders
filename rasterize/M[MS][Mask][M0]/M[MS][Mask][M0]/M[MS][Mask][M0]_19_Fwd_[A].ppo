#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1402;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3774 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3785 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3796 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3807 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _482 = (_337.x * cbMtdParam._m0[9u].x) * ((_472 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _483 = (_337.y * cbMtdParam._m0[9u].y) * ((_472 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _484 = (_337.z * cbMtdParam._m0[9u].z) * ((_472 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _488 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _482;
    float _491 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _483;
    float _494 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _484;
    float _502 = (((_482 - _488) * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) + _488) * 4.55000019073486328125;
    float _504 = (((_483 - _491) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _491) * 4.55000019073486328125;
    float _506 = (((_484 - _494) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _494) * 4.55000019073486328125;
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _579 = ((_549.z - _570) * _472) + _570;
    float _582 = ((((_549.x - _568) * _472) + _568) * 2.0) + (-1.0);
    float _583 = ((((_549.y - _569) * _472) + _569) * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3818 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _639 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _642 = ((isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : min(_639, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _651 = (_642 - ((((((_632 - _633) * cbMtdParam._m0[24u].w) + _633) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _642))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3839 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _659 = (_652 * (cbMtdParam._m0[17u].x - _502)) + _502;
    float _660 = (_652 * (cbMtdParam._m0[17u].y - _504)) + _504;
    float _661 = (_652 * (cbMtdParam._m0[17u].z - _506)) + _506;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _701 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].y) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3850 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _710 = ((((cbMtdParam._m0[10u].x - _659) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _702) + _659;
    float _711 = ((((cbMtdParam._m0[10u].y - _660) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _702) + _660;
    float _712 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _661)) * _702) + _661;
    float _717 = (((_524.z - _579) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _579;
    float _721 = ((_605.z - _717) * cbMtdParam._m0[19u].w) + _717;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _742 = (_735.x * 2.0) + (-1.0);
    float _743 = (_735.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3861 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _752 = (_652 * (_735.z - _721)) + _721;
    float _755 = ((cbMtdParam._m0[23u].y - _752) * _702) + _752;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _780 = (_774.x * 2.0) + (-1.0);
    float _781 = (_774.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3872 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _796 = (_582 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_524.x * 2.0) + (-1.0)))) + (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _797 = (_583 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_524.y * 2.0) + (-1.0)))) + (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = (((_742 - _796) + (cbMtdParam._m0[21u].x * _796)) * _652) + _796;
    float _810 = (((_743 - _797) + (cbMtdParam._m0[21u].x * _797)) * _652) + _797;
    float _811 = (_652 * (sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) - _589)) + _589;
    float _822 = (((_780 - _809) + (_809 * cbMtdParam._m0[22u].z)) * _702) + _809;
    float _823 = (((_781 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _702) + _810;
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) - _811) * _702) + _811;
    float _828 = cbMtdParam._m0[22u].x + _605.w;
    float _831 = fma(_824, _249 * NORMAL.x, fma(_823, _256 * TANGENT.x, (_242 * _234) * _822));
    float _834 = fma(_824, _249 * NORMAL.y, fma(_823, _256 * TANGENT.y, (_242 * _235) * _822));
    float _837 = fma(_824, _249 * NORMAL.z, fma(_823, _256 * TANGENT.z, (_242 * _236) * _822));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    float _842 = _841 * _831;
    float _843 = _841 * _834;
    float _844 = _841 * _837;
    float _3883 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _845 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _3905 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3916 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3927 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    vec4 _927 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _929 = _927.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1083 = sqrt(((_913 * _913) + (_914 * _914)) + (_915 * _915));
        float _1089 = (cbMatDynParam._m0[5u].x * _1083) + cbMatDynParam._m0[5u].y;
        float _3938 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1094 = (cbMatDynParam._m0[5u].z * _1083) + cbMatDynParam._m0[5u].w;
        float _3949 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _1090)) + _1090) < ((_929 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_844, cbSceneParam._m0[5u].z, fma(_843, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _842));
    float _962 = fma(_844, cbSceneParam._m0[6u].z, fma(_843, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _842));
    float _965 = fma(_844, cbSceneParam._m0[7u].z, fma(_843, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _842));
    uint _978 = _281 + 9u;
    uint _979 = _978 + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_979].z;
    float _3960 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1003 = ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * TEXCOORD_5.w) * _999.x;
    float _1004 = dot(vec3(_842, _843, _844), vec3(_920, _921, _922));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _842) - _920;
    float _1012 = (_1007 * _843) - _921;
    float _1013 = (_1007 * _844) - _922;
    float _1017 = abs(dot(vec3(_920, _921, _922), vec3(_842, _843, _844)));
    float _3993 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_845);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1072, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064));
        float _1130 = fma(_1072, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064));
        float _1134 = fma(_1072, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064));
        float _1159 = _1064 + _842;
        float _1160 = _1068 + _843;
        float _1161 = _1072 + _844;
        float _1171 = fma(_1161, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159)) - _1126;
        float _1172 = fma(_1161, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159)) - _1130;
        float _1173 = fma(_1161, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159)) - _1134;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_842, _843, _844), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4041 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_842, _843, _844), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4074 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_842, _843, _844), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4107 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1072, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064));
        float _1448 = fma(_1072, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064));
        float _1452 = fma(_1072, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064));
        float _1475 = _1064 + _842;
        float _1476 = _1068 + _843;
        float _1477 = _1072 + _844;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_842, _843, _844), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4170 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_842, _843, _844), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4203 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_842, _843, _844), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4236 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1402;
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = _1402;
        _1721 = _1402;
        _1722 = _1402;
        _1723 = _1402;
        _1724 = _1402;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1415)) + _1415;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1416)) + _1416;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1011 * 0.5;
    float _1782 = _1012 * 0.5;
    float _1783 = _1013 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1072, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1072, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1072, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1912 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1915 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1943 = frontier_phi_17_15_ladder;
        }
        float _2144;
        if (_1912 > 0.0)
        {
            _2144 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2144 = frontier_phi_26_22_ladder;
        }
        float _2387;
        if (_1915 > 0.0)
        {
            _2387 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2387 = frontier_phi_38_33_ladder;
        }
        float _2389 = isnan(_2144) ? _1943 : (isnan(_1943) ? _2144 : min(_1943, _2144));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1909) + _1898;
        float _2395 = (_2390 * _1912) + _1902;
        float _2396 = (_2390 * _1915) + _1906;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_16_38_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_16_38_ladder_2;
        _1933 = frontier_phi_16_38_ladder_1;
        _1935 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1850);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1994 = fma(_1072, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064)) + cbModelParam._m0[21u].w;
        float _1998 = fma(_1072, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064)) + cbModelParam._m0[22u].w;
        float _2002 = fma(_1072, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064)) + cbModelParam._m0[23u].w;
        float _2005 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _2008 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _2011 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2149;
        if (_2005 > 0.0)
        {
            _2149 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2149 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_2008 > 0.0)
        {
            _2414 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2619;
        if (_2011 > 0.0)
        {
            _2619 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2619 = frontier_phi_49_46_ladder;
        }
        float _2621 = isnan(_2414) ? _2149 : (isnan(_2149) ? _2414 : min(_2149, _2414));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _2005) + _1994;
        float _2627 = (_2622 * _2008) + _1998;
        float _2628 = (_2622 * _2011) + _2002;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_25_49_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _2030 = frontier_phi_25_49_ladder_2;
        _2032 = frontier_phi_25_49_ladder_1;
        _2034 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1940);
        _2030 = _2014.x * cbModelParam._m0[1u].z;
        _2032 = _2014.y * cbModelParam._m0[1u].z;
        _2034 = _2014.z * cbModelParam._m0[1u].z;
    }
    float _2046 = ((((1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1032 * _1019)) * _1003;
    float _2047 = _2046 * ((cbModelParam._m0[1u].w * (_2030 - _1931)) + _1931);
    float _2048 = _2046 * ((cbModelParam._m0[1u].w * (_2032 - _1933)) + _1933);
    float _2049 = _2046 * ((cbModelParam._m0[1u].w * (_2034 - _1935)) + _1935);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2047 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2047 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2047 * cbSceneParam._m0[91u].x));
    uvec4 _2068 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2070 = _2068.x * 14u;
    uint _2071 = _2070 + 13u;
    float _2078 = _1003 + (-1.0);
    float _2083 = (cbLight._m0[_2071].x * _2078) + 1.0;
    float _2084 = (cbLight._m0[_2071].y * _2078) + 1.0;
    float _2085 = (cbLight._m0[_2071].z * _2078) + 1.0;
    float _2086 = (cbLight._m0[_2071].w * _2078) + 1.0;
    uint _2087 = _2070 + 5u;
    float _2093 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2097 = _2070 + 4u;
    float _2103 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2107 = _2070 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_842, _843, _844));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_842, _843, _844));
    float _4372 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4383 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2087].x * _2093) * _2128) + ((cbLight._m0[_2097].x * _2103) * _2126);
    float _2136 = ((_2093 * cbLight._m0[_2087].y) * _2128) + ((_2103 * cbLight._m0[_2097].y) * _2126);
    float _2137 = ((_2093 * cbLight._m0[_2087].z) * _2128) + ((_2103 * cbLight._m0[_2097].z) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2070 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2143)
    {
        _2154 = _2135;
        _2156 = _2136;
        _2158 = _2137;
    }
    else
    {
        uint _2162 = _2070 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_2070 + 2u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4394 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2181 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2135;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2136;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2137;
    }
    bool _2161 = _2141.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2161)
    {
        _2199 = _2154;
        _2201 = _2156;
        _2203 = _2158;
    }
    else
    {
        uint _2358 = _2070 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_2070 + 3u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4410 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2377 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2199 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2154;
        _2201 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2156;
        _2203 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2158;
    }
    uint _2206 = _2070 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _845) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2070].x + _920;
    float _2222 = cbLight._m0[_2070].y + _921;
    float _2223 = cbLight._m0[_2070].z + _922;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2070].xyz));
    float _4426 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2235 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2236 = dot(vec3(_842, _843, _844), vec3(_2228, _2229, _2230));
    float _4448 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2228, _2229, _2230));
    float _4459 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2220;
    float _2271 = (0.5 / (((_2235 * ((_2234 * _2260) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2260) + _2220) * _2234))) * _2234;
    float _4470 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2284 = _2070 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _845) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2107].x + _920;
    float _2298 = cbLight._m0[_2107].y + _921;
    float _2299 = cbLight._m0[_2107].z + _922;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2107].xyz));
    float _4481 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2311 = dot(vec3(_842, _843, _844), vec3(_2304, _2305, _2306));
    float _4492 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2304, _2305, _2306));
    float _4503 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2332 = (exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2333 = 1.0 - _2296;
    float _2343 = (0.5 / (((_2235 * ((_2310 * _2333) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2333) + _2296) * _2310))) * _2310;
    float _4514 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2355 = (((_2332 * cbLight._m0[_2284].x) * _2345) * _2093) + (((_2259 * cbLight._m0[_2206].x) * _2273) * _2103);
    float _2356 = (((_2332 * cbLight._m0[_2284].y) * _2345) * _2093) + (((_2259 * cbLight._m0[_2206].y) * _2273) * _2103);
    float _2357 = (((_2332 * cbLight._m0[_2284].z) * _2345) * _2093) + (((_2259 * cbLight._m0[_2206].z) * _2273) * _2103);
    float _2419;
    float _2421;
    float _2423;
    if (_2143)
    {
        _2419 = _2355;
        _2421 = _2356;
        _2423 = _2357;
    }
    else
    {
        uint _2425 = _2070 + 2u;
        uint _2429 = _2070 + 10u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _845) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _920;
        float _2446 = cbLight._m0[_2425].y + _921;
        float _2447 = cbLight._m0[_2425].z + _922;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2425].xyz));
        float _4525 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2459 = dot(vec3(_842, _843, _844), vec3(_2452, _2453, _2454));
        float _4536 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4547 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2480 = (exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2481 = 1.0 - _2444;
        float _2491 = (0.5 / (((_2235 * ((_2458 * _2481) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2481) + _2444) * _2458))) * _2458;
        float _4558 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2419 = (((_2480 * cbLight._m0[_2429].x) * _2493) * _2494) + _2355;
        _2421 = (((_2480 * cbLight._m0[_2429].y) * _2493) * _2494) + _2356;
        _2423 = (((_2480 * cbLight._m0[_2429].z) * _2493) * _2494) + _2357;
    }
    float _2529;
    float _2531;
    float _2533;
    if (_2161)
    {
        _2529 = _2419;
        _2531 = _2421;
        _2533 = _2423;
    }
    else
    {
        uint _2540 = _2070 + 3u;
        uint _2544 = _2070 + 11u;
        float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2540].w)) * _845) * 0.949999988079071044921875);
        float _2559 = _2558 * _2558;
        float _2560 = cbLight._m0[_2540].x + _920;
        float _2561 = cbLight._m0[_2540].y + _921;
        float _2562 = cbLight._m0[_2540].z + _922;
        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
        float _2567 = _2566 * _2560;
        float _2568 = _2566 * _2561;
        float _2569 = _2566 * _2562;
        float _2570 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2540].xyz));
        float _4574 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2574 = dot(vec3(_842, _843, _844), vec3(_2567, _2568, _2569));
        float _4585 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2578 = dot(vec3(cbLight._m0[_2540].xyz), vec3(_2567, _2568, _2569));
        float _4596 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2582 = _2559 * _2559;
        float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
        float _2595 = (exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2596 = 1.0 - _2559;
        float _2606 = (0.5 / (((_2235 * ((_2573 * _2596) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2596) + _2559) * _2573))) * _2573;
        float _4607 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2529 = (((_2595 * cbLight._m0[_2544].x) * _2608) * _2609) + _2419;
        _2531 = (((_2595 * cbLight._m0[_2544].y) * _2608) * _2609) + _2421;
        _2533 = (((_2595 * cbLight._m0[_2544].z) * _2608) * _2609) + _2423;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2068.y == 0u)
    {
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2684;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2684;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2684;
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _2700)));
        float _2721 = (log2(_2687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3001)
                {
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _3000;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_2991 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _2685;
                        float _3197 = _3156.y - _2686;
                        float _3198 = _3156.z - _2687;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_959, _962, _965), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4633 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3227 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3231 = (-0.0) - _2685;
                        float _3232 = (-0.0) - _2686;
                        float _3233 = (-0.0) - _2687;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3248 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _1019;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_959, _962, _965), vec3(_3238, _3239, _3240));
                        float _4649 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3273 = dot(vec3(_959, _962, _965), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4660 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3216 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3206) + _3282;
                        float _4671 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4682 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3280 * _3280) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3060 = (_3227 * _3175.x) + _3133;
                        _3061 = (_3227 * _3175.y) + _3134;
                        _3062 = (_3227 * _3175.z) + _3135;
                        _3057 = (_3308 * _3192.x) + _3130;
                        _3058 = (_3308 * _3192.y) + _3131;
                        _3059 = (_3308 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_66_pred = _3057;
                    frontier_phi_66_pred_1 = _3062;
                    frontier_phi_66_pred_2 = _3061;
                    frontier_phi_66_pred_3 = _3060;
                    frontier_phi_66_pred_4 = _3059;
                    frontier_phi_66_pred_5 = _3058;
                }
                _2833 = frontier_phi_66_pred;
                _2843 = frontier_phi_66_pred_1;
                _2841 = frontier_phi_66_pred_2;
                _2839 = frontier_phi_66_pred_3;
                _2837 = frontier_phi_66_pred_4;
                _2835 = frontier_phi_66_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2833;
                    _2986 = _2835;
                    _2987 = _2837;
                    _2988 = _2839;
                    _2989 = _2841;
                    _2990 = _2843;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2849) & _2731) == 0u)
        {
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
            float _2979 = _2978 * _2685;
            float _2980 = _2978 * _2686;
            float _2981 = _2978 * _2687;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3113 = _2832;
                float _3114 = _2834;
                float _3115 = _2836;
                float _3116 = _2838;
                float _3117 = _2840;
                float _3118 = _2842;
                uint _3119 = _2849;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3129)
                    {
                        frontier_phi_77_pred = _3118;
                        frontier_phi_77_pred_1 = _3117;
                        frontier_phi_77_pred_2 = _3116;
                        frontier_phi_77_pred_3 = _3115;
                        frontier_phi_77_pred_4 = _3114;
                        frontier_phi_77_pred_5 = _3113;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        uint _3341 = _3128;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3352 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3352 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3352 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3352 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2687, _3459.z, fma(_2686, _3459.y, _3459.x * _2685)) + _3459.w;
                            _3472 = !((fma(_2687, _3440.z, fma(_2686, _3440.y, _3440.x * _2685)) + _3440.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3367.x - _2685;
                                float _3500 = _3367.y - _2686;
                                float _3501 = _3367.z - _2687;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3368 * _3368));
                                float _4693 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3517 = sqrt(_3502) * _3383.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_959, _962, _965))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2687, _3410.z, fma(_2686, _3410.y, _3410.x * _2685)) + _3410.w) / _3471;
                                float _3531 = (fma(_2687, _3425.z, fma(_2686, _3425.y, _3425.x * _2685)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4709 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _1019;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2979;
                                float _3561 = _3507 - _2980;
                                float _3562 = _3508 - _2981;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_959, _962, _965), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4720 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3574 = dot(vec3(_959, _962, _965), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4731 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_959, _962, _965), vec3(_3506, _3507, _3508))) + _3583;
                                float _4742 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4753 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3537 * _3383.y;
                                frontier_phi_83_pred_1 = _3537 * _3383.x;
                                frontier_phi_83_pred_2 = _3611 * _3395.z;
                                frontier_phi_83_pred_3 = _3611 * _3395.y;
                                frontier_phi_83_pred_4 = _3611 * _3395.x;
                                frontier_phi_83_pred_5 = _3537 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_83_pred;
                            _3618 = frontier_phi_83_pred_1;
                            _3617 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3620 = frontier_phi_83_pred_5;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3327;
                        frontier_phi_77_pred_1 = _3326;
                        frontier_phi_77_pred_2 = _3325;
                        frontier_phi_77_pred_3 = _3324;
                        frontier_phi_77_pred_4 = _3323;
                        frontier_phi_77_pred_5 = _3322;
                    }
                    _2964 = frontier_phi_77_pred;
                    _2962 = frontier_phi_77_pred_1;
                    _2960 = frontier_phi_77_pred_2;
                    _2958 = frontier_phi_77_pred_3;
                    _2956 = frontier_phi_77_pred_4;
                    _2954 = frontier_phi_77_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2954;
                        _3114 = _2956;
                        _3115 = _2958;
                        _3116 = _2960;
                        _3117 = _2962;
                        _3118 = _2964;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2958;
                frontier_phi_58_59_ladder_1 = _2964;
                frontier_phi_58_59_ladder_2 = _2962;
                frontier_phi_58_59_ladder_3 = _2960;
                frontier_phi_58_59_ladder_4 = _2956;
                frontier_phi_58_59_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_58_59_ladder = _2836;
                frontier_phi_58_59_ladder_1 = _2842;
                frontier_phi_58_59_ladder_2 = _2840;
                frontier_phi_58_59_ladder_3 = _2838;
                frontier_phi_58_59_ladder_4 = _2834;
                frontier_phi_58_59_ladder_5 = _2832;
            }
            _2953 = frontier_phi_58_59_ladder_5;
            _2955 = frontier_phi_58_59_ladder_4;
            _2957 = frontier_phi_58_59_ladder;
            _2959 = frontier_phi_58_59_ladder_3;
            _2961 = frontier_phi_58_59_ladder_2;
            _2963 = frontier_phi_58_59_ladder_1;
        }
        float _2968 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2744 = (_2968 * _2959) + _2199;
        _2746 = (_2968 * _2961) + _2201;
        _2748 = (_2968 * _2963) + _2203;
        _2750 = ((_2953 * 0.039999999105930328369140625) * _2968) + _2529;
        _2752 = ((_2955 * 0.039999999105930328369140625) * _2968) + _2531;
        _2754 = ((_2957 * 0.039999999105930328369140625) * _2968) + _2533;
    }
    else
    {
        _2744 = _2199;
        _2746 = _2201;
        _2748 = _2203;
        _2750 = _2529;
        _2752 = _2531;
        _2754 = _2533;
    }
    float _4769 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4780 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4791 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2771 = ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2744 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1003))) + ((_2750 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _2772 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2746 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1003))) + ((_2752 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _2773 = ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2748 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1003))) + ((_2754 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    uint _2774 = _281 + 6u;
    float _2782 = _940 / cbSceneParam._m0[86u].x;
    float _2783 = _941 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2858 = _2857 / _863;
        float _2869 = _2858 * _913;
        float _2870 = _914 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2873 = _2858 * _915;
        float _2875 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2870;
        float _2883 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2871 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3016 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3070 = ((abs(_2883 / _2871) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2893 * _3025) - exp2(_2893 * _3026)) * _3014))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2802);
        _2895 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2897 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2899 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2901 = _3081 * _2802;
    }
    else
    {
        _2895 = _2799;
        _2897 = _2800;
        _2899 = _2801;
        _2901 = _2802;
    }
    bool _3108;
    vec4 _2911;
    vec4 _2933;
    float _2935;
    float _2939;
    float _2940;
    float _2941;
    float _2942;
    bool _2952;
    for (;;)
    {
        _2911 = cbMatDynParam._m0[0u];
        float _2913 = roundEven(_2911.y);
        bool _2914 = _2913 == 3.0;
        float _2915 = log2(_2901);
        float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * _2771;
        float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * _2772;
        float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * _2773;
        float _2931 = _929 + (-0.5);
        _2933 = cbMtdParam._m0[1u];
        _2935 = _2933.y * _2931;
        float _2938 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = _2938 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
        _2941 = _2938 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
        _2942 = _2931 * 0.999000012874603271484375;
        _2952 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2952)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2942) < 0.5)
            {
                _3108 = true;
                break;
            }
        }
        uint _3049 = _978 + uint(_2911.w);
        if ((cbInstanceData._m0[_3049].w < 1.0) && ((cbInstanceData._m0[_3049].w + _2942) < 0.5))
        {
            _3108 = true;
            break;
        }
        if ((_2935 + 1.0) < _2933.x)
        {
            _3108 = true;
            break;
        }
        _3108 = false;
        break;
    }
    float _3313;
    if (_3108)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = cbInstanceData._m0[_2774].w;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3313;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
    discard_exit();
}


