#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1244;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3551 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3562 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3573 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _428 = _426.x;
    float _440 = dot(vec4(_428, _426.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _457 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_428 - _440) * cbMtdParam._m0[24u].z) + _440) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3584 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _465 = (_458 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _466 = (_458 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _467 = (_458 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _283) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _284) + cbTextureTilingScale._m0[3u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _506 = _504.x;
    float _516 = dot(vec4(_506, _504.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _530 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_506 - _516) * cbMtdParam._m0[24u].z) + _516) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3595 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _541 = (_320.x * cbMtdParam._m0[9u].x) * ((_531 * ((_484.x * cbMtdParam._m0[13u].x) - _465)) + _465);
    float _542 = (_320.y * cbMtdParam._m0[9u].y) * ((_531 * ((_484.y * cbMtdParam._m0[13u].y) - _466)) + _466);
    float _543 = (_320.z * cbMtdParam._m0[9u].z) * ((_531 * ((_484.z * cbMtdParam._m0[13u].z) - _467)) + _467);
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _543;
    float _561 = (((_541 - _547) * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) + _547) * 4.55000019073486328125;
    float _563 = (((_542 - _550) * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) + _550) * 4.55000019073486328125;
    float _565 = (((_543 - _553) * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) + _553) * 4.55000019073486328125;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _458) + _619;
    float _629 = ((_600.y - _620) * _458) + _620;
    float _630 = ((_600.z - _621) * _458) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _283) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _284) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_642.z - _630) * _531) + _630;
    float _658 = ((((_642.x - _628) * _531) + _628) * 2.0) + (-1.0);
    float _659 = ((((_642.y - _629) * _531) + _629) * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3606 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _697 = (_658 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_577.x * 2.0) + (-1.0)))) + (((_685.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _698 = (_659 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_577.y * 2.0) + (-1.0)))) + (((_685.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _703 = (((_577.z - _655) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _655;
    float _707 = ((_685.z - _703) * cbMtdParam._m0[19u].w) + _703;
    float _709 = cbMtdParam._m0[22u].x + _685.w;
    float _712 = fma(_665, _230 * NORMAL.x, fma(_698, _237 * TANGENT.x, (_223 * _215) * _697));
    float _715 = fma(_665, _230 * NORMAL.y, fma(_698, _237 * TANGENT.y, (_223 * _216) * _697));
    float _718 = fma(_665, _230 * NORMAL.z, fma(_698, _237 * TANGENT.z, (_223 * _217) * _697));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _3617 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _726 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3639 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3650 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3661 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _744 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _832 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _835 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _849 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _855 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_849].x;
    float _856 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_849].y;
    float _857 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_849].z;
    float _3672 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _873 = ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * TEXCOORD_5.w) * _869.x;
    float _874 = dot(vec3(_723, _724, _725), vec3(_802, _803, _804));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _723) - _802;
    float _882 = (_877 * _724) - _803;
    float _883 = (_877 * _725) - _804;
    float _887 = abs(dot(vec3(_802, _803, _804), vec3(_723, _724, _725)));
    float _3705 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_726);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _968 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _972 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _976 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1001 = _934 + _723;
        float _1002 = _938 + _724;
        float _1003 = _942 + _725;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _968;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _972;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _976;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_968 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_972 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_976 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_723, _724, _725), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3753 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_723, _724, _725), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3786 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_723, _724, _725), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3819 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1286 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1290 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1313 = _934 + _723;
        float _1314 = _938 + _724;
        float _1315 = _942 + _725;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_723, _724, _725), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3882 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_723, _724, _725), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3915 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_723, _724, _725), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _3948 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1244;
        _1552 = _1244;
        _1553 = _1244;
        _1554 = _1244;
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1256)) + _1256;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1257)) + _1257;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _881 * 0.5;
    float _1620 = _882 * 0.5;
    float _1621 = _883 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1751 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1754 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1782 = frontier_phi_14_12_ladder;
        }
        float _1984;
        if (_1751 > 0.0)
        {
            _1984 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1984 = frontier_phi_23_19_ladder;
        }
        float _2227;
        if (_1754 > 0.0)
        {
            _2227 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2227 = frontier_phi_35_30_ladder;
        }
        float _2229 = isnan(_1984) ? _1782 : (isnan(_1782) ? _1984 : min(_1782, _1984));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1748) + _1737;
        float _2235 = (_2230 * _1751) + _1741;
        float _2236 = (_2230 * _1754) + _1745;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_13_35_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_13_35_ladder_2;
        _1772 = frontier_phi_13_35_ladder_1;
        _1774 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1688);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1848 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1851 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1989;
        if (_1845 > 0.0)
        {
            _1989 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1989 = frontier_phi_25_21_ladder;
        }
        float _2254;
        if (_1848 > 0.0)
        {
            _2254 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2254 = frontier_phi_37_32_ladder;
        }
        float _2459;
        if (_1851 > 0.0)
        {
            _2459 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2459 = frontier_phi_46_43_ladder;
        }
        float _2461 = isnan(_2254) ? _1989 : (isnan(_1989) ? _2254 : min(_1989, _2254));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1845) + _1834;
        float _2467 = (_2462 * _1848) + _1838;
        float _2468 = (_2462 * _1851) + _1842;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_22_46_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_22_46_ladder_2;
        _1872 = frontier_phi_22_46_ladder_1;
        _1874 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1779);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_902 * _889)) * _873;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1918 = _873 + (-1.0);
    float _1923 = (cbLight._m0[_1911].x * _1918) + 1.0;
    float _1924 = (cbLight._m0[_1911].y * _1918) + 1.0;
    float _1925 = (cbLight._m0[_1911].z * _1918) + 1.0;
    float _1926 = (cbLight._m0[_1911].w * _1918) + 1.0;
    uint _1927 = _1910 + 5u;
    float _1933 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1937 = _1910 + 4u;
    float _1943 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1947 = _1910 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_723, _724, _725));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_723, _724, _725));
    float _4084 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4095 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1927].x * _1933) * _1968) + ((cbLight._m0[_1937].x * _1943) * _1966);
    float _1976 = ((_1933 * cbLight._m0[_1927].y) * _1968) + ((_1943 * cbLight._m0[_1937].y) * _1966);
    float _1977 = ((_1933 * cbLight._m0[_1927].z) * _1968) + ((_1943 * cbLight._m0[_1937].z) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1910 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1983)
    {
        _1994 = _1975;
        _1996 = _1976;
        _1998 = _1977;
    }
    else
    {
        uint _2002 = _1910 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1910 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4106 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2021 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1975;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1976;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1977;
    }
    bool _2001 = _1981.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2001)
    {
        _2039 = _1994;
        _2041 = _1996;
        _2043 = _1998;
    }
    else
    {
        uint _2198 = _1910 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1910 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4122 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2217 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2039 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1994;
        _2041 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1996;
        _2043 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1998;
    }
    uint _2046 = _1910 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _726) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1910].x + _802;
    float _2062 = cbLight._m0[_1910].y + _803;
    float _2063 = cbLight._m0[_1910].z + _804;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_1910].xyz));
    float _4138 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2075 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2076 = dot(vec3(_723, _724, _725), vec3(_2068, _2069, _2070));
    float _4160 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2068, _2069, _2070));
    float _4171 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2060;
    float _2111 = (0.5 / (((_2075 * ((_2074 * _2100) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2100) + _2060) * _2074))) * _2074;
    float _4182 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2124 = _1910 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _726) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1947].x + _802;
    float _2138 = cbLight._m0[_1947].y + _803;
    float _2139 = cbLight._m0[_1947].z + _804;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_1947].xyz));
    float _4193 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2151 = dot(vec3(_723, _724, _725), vec3(_2144, _2145, _2146));
    float _4204 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2144, _2145, _2146));
    float _4215 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2136;
    float _2183 = (0.5 / (((_2075 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2173) + _2136) * _2150))) * _2150;
    float _4226 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2195 = (((_2172 * cbLight._m0[_2124].x) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].x) * _2113) * _1943);
    float _2196 = (((_2172 * cbLight._m0[_2124].y) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].y) * _2113) * _1943);
    float _2197 = (((_2172 * cbLight._m0[_2124].z) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].z) * _2113) * _1943);
    float _2259;
    float _2261;
    float _2263;
    if (_1983)
    {
        _2259 = _2195;
        _2261 = _2196;
        _2263 = _2197;
    }
    else
    {
        uint _2265 = _1910 + 2u;
        uint _2269 = _1910 + 10u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _726) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _802;
        float _2286 = cbLight._m0[_2265].y + _803;
        float _2287 = cbLight._m0[_2265].z + _804;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2265].xyz));
        float _4237 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2299 = dot(vec3(_723, _724, _725), vec3(_2292, _2293, _2294));
        float _4248 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4259 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2321 = 1.0 - _2284;
        float _2331 = (0.5 / (((_2075 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2321) + _2284) * _2298))) * _2298;
        float _4270 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2259 = (((_2320 * cbLight._m0[_2269].x) * _2333) * _2334) + _2195;
        _2261 = (((_2320 * cbLight._m0[_2269].y) * _2333) * _2334) + _2196;
        _2263 = (((_2320 * cbLight._m0[_2269].z) * _2333) * _2334) + _2197;
    }
    float _2369;
    float _2371;
    float _2373;
    if (_2001)
    {
        _2369 = _2259;
        _2371 = _2261;
        _2373 = _2263;
    }
    else
    {
        uint _2380 = _1910 + 3u;
        uint _2384 = _1910 + 11u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _726) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _802;
        float _2401 = cbLight._m0[_2380].y + _803;
        float _2402 = cbLight._m0[_2380].z + _804;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2380].xyz));
        float _4286 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2414 = dot(vec3(_723, _724, _725), vec3(_2407, _2408, _2409));
        float _4297 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4308 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2436 = 1.0 - _2399;
        float _2446 = (0.5 / (((_2075 * ((_2413 * _2436) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2436) + _2399) * _2413))) * _2413;
        float _4319 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2369 = (((_2435 * cbLight._m0[_2384].x) * _2448) * _2449) + _2259;
        _2371 = (((_2435 * cbLight._m0[_2384].y) * _2448) * _2449) + _2261;
        _2373 = (((_2435 * cbLight._m0[_2384].z) * _2448) * _2449) + _2263;
    }
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_1908.y == 0u)
    {
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2524;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2524;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2524;
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.x;
        uint _2551 = uint((float(_2539.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2540))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2540)));
        float _2561 = (log2(_2527 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        uint _2565 = uint(isnan(14.0) ? _2562 : (isnan(_2562) ? 14.0 : min(_2562, 14.0)));
        uvec4 _2570 = texelFetch(g_lightClusterGridBuffer, int(((_2565 << 2u) + (_2551 << 6u)) >> 2u));
        uint _2571 = _2570.x;
        uint _2572 = _2539.z;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((((1u << ((_2572 >> 4u) & 15u)) + 4294967295u) & _2571) == 0u) || ((_2572 & 240u) == 0u))
        {
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
        }
        else
        {
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2833)
                {
                    frontier_phi_61_pred = _2817;
                    frontier_phi_61_pred_1 = _2822;
                    frontier_phi_61_pred_2 = _2821;
                    frontier_phi_61_pred_3 = _2820;
                    frontier_phi_61_pred_4 = _2819;
                    frontier_phi_61_pred_5 = _2818;
                }
                else
                {
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    uint _2947;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2832;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2951 = uint(findLSB(_2947)) + (_2823 << 5u);
                        uint _2948 = (_2947 + 4294967295u) & _2947;
                        uint _2953 = _2951 * 48u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2973 = (_2951 * 48u) + 4u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2992 = (_2951 * 48u) + 8u;
                        vec3 _3003 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x));
                        float _3007 = _2967.x - _2525;
                        float _3008 = _2967.y - _2526;
                        float _3009 = _2967.z - _2527;
                        float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                        float _3013 = inversesqrt(_3010);
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3017 = dot(vec3(_829, _832, _835), vec3(_3014, _3015, _3016));
                        float _3022 = 1.0 - (_3010 * _2967.w);
                        float _4345 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3024 = sqrt(_3010) * _2986.w;
                        float _3027 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _3017) + _3028;
                        float _3034 = _3024 * _3024;
                        float _3038 = ((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3023) / ((_3034 * 0.699999988079071044921875) + 1.0);
                        float _3042 = (-0.0) - _2525;
                        float _3043 = (-0.0) - _2526;
                        float _3044 = (-0.0) - _2527;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3059 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                        float _3060 = 1.0 - _889;
                        float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                        float _3068 = _3067 * _3067;
                        float _3069 = _3068 * _3068;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3072 = _3051 + _3016;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3080 = dot(vec3(_829, _832, _835), vec3(_3049, _3050, _3051));
                        float _4361 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3084 = dot(vec3(_829, _832, _835), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                        float _4372 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                        float _3092 = _3027 * _3068;
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3017) + _3093;
                        float _4383 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3098 = 1.0 - _3068;
                        float _3108 = (0.5 / (((_3097 * ((_3083 * _3098) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3068) * _3083))) * _3097;
                        float _4394 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3119 = (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3091 * _3091) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125))) * _3023;
                        _2876 = (_3038 * _2986.x) + _2944;
                        _2877 = (_3038 * _2986.y) + _2945;
                        _2878 = (_3038 * _2986.z) + _2946;
                        _2873 = (_3119 * _3003.x) + _2941;
                        _2874 = (_3119 * _3003.y) + _2942;
                        _2875 = (_3119 * _3003.z) + _2943;
                        if (_2948 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2948;
                        }
                    }
                    frontier_phi_61_pred = _2873;
                    frontier_phi_61_pred_1 = _2878;
                    frontier_phi_61_pred_2 = _2877;
                    frontier_phi_61_pred_3 = _2876;
                    frontier_phi_61_pred_4 = _2875;
                    frontier_phi_61_pred_5 = _2874;
                }
                _2673 = frontier_phi_61_pred;
                _2683 = frontier_phi_61_pred_1;
                _2681 = frontier_phi_61_pred_2;
                _2679 = frontier_phi_61_pred_3;
                _2677 = frontier_phi_61_pred_4;
                _2675 = frontier_phi_61_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2673;
                    _2818 = _2675;
                    _2819 = _2677;
                    _2820 = _2679;
                    _2821 = _2681;
                    _2822 = _2683;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
        }
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.z;
        uint _2689 = (_2687 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2689) & _2571) == 0u)
        {
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
            _2793 = _2680;
            _2795 = _2682;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
            float _2811 = _2810 * _2525;
            float _2812 = _2810 * _2526;
            float _2813 = _2810 * _2527;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2689 < ((_2687 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2924 = _2672;
                float _2925 = _2674;
                float _2926 = _2676;
                float _2927 = _2678;
                float _2928 = _2680;
                float _2929 = _2682;
                uint _2930 = _2689;
                uint _2939;
                bool _2940;
                for (;;)
                {
                    _2939 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                    _2940 = _2939 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2940)
                    {
                        frontier_phi_67_pred = _2927;
                        frontier_phi_67_pred_1 = _2928;
                        frontier_phi_67_pred_2 = _2929;
                        frontier_phi_67_pred_3 = _2926;
                        frontier_phi_67_pred_4 = _2925;
                        frontier_phi_67_pred_5 = _2924;
                    }
                    else
                    {
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        uint _3143 = _2939;
                        uint _3144;
                        vec4 _3169;
                        float _3170;
                        vec4 _3185;
                        vec3 _3197;
                        vec4 _3212;
                        vec4 _3227;
                        float _3273;
                        bool _3274;
                        for (;;)
                        {
                            uint _3154 = ((_2930 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3143));
                            _3144 = (_3143 + 4294967295u) & _3143;
                            uint _3156 = _3154 * 40u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3170 = _3169.w;
                            uint _3172 = (_3154 * 40u) + 4u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3154 * 40u) + 8u;
                            _3197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x));
                            uint _3199 = (_3154 * 40u) + 16u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3154 * 40u) + 20u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3154 * 40u) + 24u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3248 = (_3154 * 40u) + 28u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3273 = fma(_2527, _3261.z, fma(_2526, _3261.y, _3261.x * _2525)) + _3261.w;
                            _3274 = !((fma(_2527, _3242.z, fma(_2526, _3242.y, _3242.x * _2525)) + _3242.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3274)
                            {
                                float _3301 = _3169.x - _2525;
                                float _3302 = _3169.y - _2526;
                                float _3303 = _3169.z - _2527;
                                float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                                float _3307 = inversesqrt(_3304);
                                float _3308 = _3307 * _3301;
                                float _3309 = _3307 * _3302;
                                float _3310 = _3307 * _3303;
                                float _3314 = 1.0 - (_3304 / (_3170 * _3170));
                                float _4405 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3319 = sqrt(_3304) * _3185.w;
                                float _3321 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                                float _3322 = _3321 * _3321;
                                float _3325 = ((1.0 - _3322) * dot(vec3(_3308, _3309, _3310), vec3(_829, _832, _835))) + _3322;
                                float _3328 = _3319 * _3319;
                                float _3332 = (fma(_2527, _3212.z, fma(_2526, _3212.y, _3212.x * _2525)) + _3212.w) / _3273;
                                float _3333 = (fma(_2527, _3227.z, fma(_2526, _3227.y, _3227.x * _2525)) + _3227.w) / _3273;
                                float _3337 = 1.0 - dot(vec2(_3332, _3333), vec2(_3332, _3333));
                                float _4421 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3339 = _3338 * (((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3315) / ((_3328 * 0.699999988079071044921875) + 1.0));
                                float _3351 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                                float _3352 = 1.0 - _889;
                                float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                                float _3360 = _3359 * _3359;
                                float _3361 = _3360 * _3360;
                                float _3362 = _3308 - _2811;
                                float _3363 = _3309 - _2812;
                                float _3364 = _3310 - _2813;
                                float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                                float _3372 = dot(vec3(_829, _832, _835), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4432 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3376 = dot(vec3(_829, _832, _835), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                                float _4443 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                                float _3384 = _3321 * _3360;
                                float _3385 = _3384 * _3384;
                                float _3391 = ((1.0 - _3385) * dot(vec3(_829, _832, _835), vec3(_3308, _3309, _3310))) + _3385;
                                float _4454 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3393 = 1.0 - _3360;
                                float _3403 = (0.5 / (((_3392 * ((_3375 * _3393) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3360) * _3375))) * _3392;
                                float _4465 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3413 = (_3338 * _3315) * (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3383 * _3383) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3413 * _3197.x;
                                frontier_phi_73_pred_1 = _3413 * _3197.y;
                                frontier_phi_73_pred_2 = _3339 * _3185.z;
                                frontier_phi_73_pred_3 = _3339 * _3185.y;
                                frontier_phi_73_pred_4 = _3339 * _3185.x;
                                frontier_phi_73_pred_5 = _3413 * _3197.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_73_pred;
                            _3418 = frontier_phi_73_pred_1;
                            _3422 = frontier_phi_73_pred_2;
                            _3421 = frontier_phi_73_pred_3;
                            _3420 = frontier_phi_73_pred_4;
                            _3419 = frontier_phi_73_pred_5;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3124 = _3417 + _3137;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            if (_3144 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3144;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3127;
                        frontier_phi_67_pred_1 = _3128;
                        frontier_phi_67_pred_2 = _3129;
                        frontier_phi_67_pred_3 = _3126;
                        frontier_phi_67_pred_4 = _3125;
                        frontier_phi_67_pred_5 = _3124;
                    }
                    _2792 = frontier_phi_67_pred;
                    _2794 = frontier_phi_67_pred_1;
                    _2796 = frontier_phi_67_pred_2;
                    _2790 = frontier_phi_67_pred_3;
                    _2788 = frontier_phi_67_pred_4;
                    _2786 = frontier_phi_67_pred_5;
                    uint _2931 = _2930 + 1u;
                    if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2924 = _2786;
                        _2925 = _2788;
                        _2926 = _2790;
                        _2927 = _2792;
                        _2928 = _2794;
                        _2929 = _2796;
                        _2930 = _2931;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2794;
                frontier_phi_55_56_ladder_1 = _2796;
                frontier_phi_55_56_ladder_2 = _2792;
                frontier_phi_55_56_ladder_3 = _2790;
                frontier_phi_55_56_ladder_4 = _2788;
                frontier_phi_55_56_ladder_5 = _2786;
            }
            else
            {
                frontier_phi_55_56_ladder = _2680;
                frontier_phi_55_56_ladder_1 = _2682;
                frontier_phi_55_56_ladder_2 = _2678;
                frontier_phi_55_56_ladder_3 = _2676;
                frontier_phi_55_56_ladder_4 = _2674;
                frontier_phi_55_56_ladder_5 = _2672;
            }
            _2785 = frontier_phi_55_56_ladder_5;
            _2787 = frontier_phi_55_56_ladder_4;
            _2789 = frontier_phi_55_56_ladder_3;
            _2791 = frontier_phi_55_56_ladder_2;
            _2793 = frontier_phi_55_56_ladder;
            _2795 = frontier_phi_55_56_ladder_1;
        }
        float _2800 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2584 = (_2800 * _2791) + _2039;
        _2586 = (_2800 * _2793) + _2041;
        _2588 = (_2800 * _2795) + _2043;
        _2590 = ((_2785 * 0.039999999105930328369140625) * _2800) + _2369;
        _2592 = ((_2787 * 0.039999999105930328369140625) * _2800) + _2371;
        _2594 = ((_2789 * 0.039999999105930328369140625) * _2800) + _2373;
    }
    else
    {
        _2584 = _2039;
        _2586 = _2041;
        _2588 = _2043;
        _2590 = _2369;
        _2592 = _2371;
        _2594 = _2373;
    }
    float _4481 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4492 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4503 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    uint _2614 = _264 + 6u;
    float _2622 = _810 / cbSceneParam._m0[86u].x;
    float _2623 = _811 / cbSceneParam._m0[86u].y;
    vec4 _2637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, (log2((isnan(cbSceneParam._m0[77u].w) ? _744 : (isnan(_744) ? cbSceneParam._m0[77u].w : min(_744, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2639 = _2637.x;
    float _2640 = _2637.y;
    float _2641 = _2637.z;
    float _2642 = _2637.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_744 > cbSceneParam._m0[78u].w)
    {
        float _2697 = isnan(_744) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _744 : min(cbSceneParam._m0[80u].w, _744));
        float _2698 = _2697 / _744;
        float _2709 = _2698 * _795;
        float _2710 = _796 * _2698;
        float _2711 = (-0.0) - _2710;
        float _2713 = _2698 * _797;
        float _2715 = (cbSceneParam._m0[77u].w * _2711) / _2697;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2710;
        float _2723 = sqrt(((_2709 * _2709) + (_2710 * _2710)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2697)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2711 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2848 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2886 = ((abs(_2723 / _2711) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2733 * _2857) - exp2(_2733 * _2858)) * _2846))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2642);
        _2735 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2639;
        _2737 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2640;
        _2739 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2641;
        _2741 = _2897 * _2642;
    }
    else
    {
        _2735 = _2639;
        _2737 = _2640;
        _2739 = _2641;
        _2741 = _2642;
    }
    float _2753 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2754 = _2753 == 3.0;
    float _2755 = log2(_2741);
    float _2762 = exp2(_2755 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2584 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _873))) + ((_2590 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2763 = exp2(_2755 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2586 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _873))) + ((_2592 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2764 = exp2(_2755 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2588 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _873))) + ((_2594 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2773 = (_2753 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2773 * (_2754 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.y = _2773 * (_2754 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.z = _2773 * (_2754 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2739)));
    SV_Target.w = cbInstanceData._m0[_2614].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2614].w;
}


