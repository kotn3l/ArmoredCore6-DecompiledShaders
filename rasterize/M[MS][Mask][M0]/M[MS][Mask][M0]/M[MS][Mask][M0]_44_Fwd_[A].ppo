#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1322;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3692 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3703 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3714 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3725 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _469 = (_324.x * cbMtdParam._m0[9u].x) * ((_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355);
    float _470 = (_324.y * cbMtdParam._m0[9u].y) * ((_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356);
    float _471 = (_324.z * cbMtdParam._m0[9u].z) * ((_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357);
    float _475 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _469;
    float _478 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _470;
    float _481 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _471;
    float _489 = (((_469 - _475) * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) + _475) * 4.55000019073486328125;
    float _491 = (((_470 - _478) * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) + _478) * 4.55000019073486328125;
    float _493 = (((_471 - _481) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _481) * 4.55000019073486328125;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    float _589 = ((_559.z - _580) * _459) + _580;
    float _592 = ((((_559.x - _578) * _459) + _578) * 2.0) + (-1.0);
    float _593 = ((((_559.y - _579) * _459) + _579) * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3736 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _631 = (_592 + ((((_532.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_619.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _632 = (_593 + ((((_532.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_619.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _635 = fma(_599, _235, fma(_632, _242, _631 * _228));
    float _638 = fma(_599, _236, fma(_632, _243, _631 * _229));
    float _641 = fma(_599, _237, fma(_632, _244, _631 * _230));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_645 * _635, _645 * _638, _645 * _641, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) * cbMtdParam._m0[21u].z);
    float _3747 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _689 = (_682 * ((_512.x * cbMtdParam._m0[18u].x) - _489)) + _489;
    float _690 = (_682 * ((_512.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _691 = (_682 * ((_512.z * cbMtdParam._m0[18u].z) - _493)) + _493;
    float _696 = (((_532.z - _589) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _589;
    float _700 = ((_619.z - _696) * cbMtdParam._m0[19u].w) + _696;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3758 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = ((_713.z - _700) * _682) + _700;
    float _740 = ((sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _599) * _682) + _599;
    float _743 = (((_720 - _631) * _682) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _744 = (((_721 - _632) * _682) + _632) + (cbMtdParam._m0[21u].x * _632);
    float _746 = cbMtdParam._m0[22u].x + _619.w;
    float _749 = fma(_740, _235, fma(_744, _242, _743 * _228));
    float _752 = fma(_740, _236, fma(_744, _243, _743 * _229));
    float _755 = fma(_740, _237, fma(_744, _244, _743 * _230));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3769 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _763 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3791 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3802 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3813 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    vec4 _846 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _848 = _846.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1002 = sqrt(((_832 * _832) + (_833 * _833)) + (_834 * _834));
        float _1008 = (cbMatDynParam._m0[5u].x * _1002) + cbMatDynParam._m0[5u].y;
        float _3824 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1013 = (cbMatDynParam._m0[5u].z * _1002) + cbMatDynParam._m0[5u].w;
        float _3835 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) - _1009)) + _1009) < ((_848 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _859 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _860 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _878 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _881 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _884 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _897 = _268 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_898].z;
    float _3846 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _859, cbSceneParam._m0[86u].y * _860));
    float _922 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * TEXCOORD_5.w) * _918.x;
    float _923 = dot(vec3(_760, _761, _762), vec3(_839, _840, _841));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _760) - _839;
    float _931 = (_926 * _761) - _840;
    float _932 = (_926 * _762) - _841;
    float _936 = abs(dot(vec3(_839, _840, _841), vec3(_760, _761, _762)));
    float _3879 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_763);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1321;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1046 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1050 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1054 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1079 = _983 + _760;
        float _1080 = _987 + _761;
        float _1081 = _991 + _762;
        float _1091 = fma(_1081, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079)) - _1046;
        float _1092 = fma(_1081, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079)) - _1050;
        float _1093 = fma(_1081, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079)) - _1054;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1046 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1050 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[34u].z) + ((((((_1054 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1149 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1115.x + (-0.5));
        float _1151 = _1149 * (_1115.y + (-0.5));
        float _1152 = _1149 * (_1115.z + (-0.5));
        float _1159 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1122.x + (-0.5));
        float _1161 = _1159 * (_1122.y + (-0.5));
        float _1162 = _1159 * (_1122.z + (-0.5));
        float _1169 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1129.x + (-0.5));
        float _1171 = _1169 * (_1129.y + (-0.5));
        float _1172 = _1169 * (_1129.z + (-0.5));
        float _1179 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1136.x + (-0.5));
        float _1181 = _1179 * (_1136.y + (-0.5));
        float _1182 = _1179 * (_1136.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1203 = (dot(vec3(_760, _761, _762), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1213 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3927 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1215 + 1.0))) + _1220) * _1183;
        float _1230 = _1151 * 0.5;
        float _1231 = _1161 * 0.5;
        float _1232 = _1171 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_760, _761, _762), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3960 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1257 + 1.0))) + _1262) * _1184;
        float _1272 = _1152 * 0.5;
        float _1273 = _1162 * 0.5;
        float _1274 = _1172 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_760, _761, _762), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3993 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1299 + 1.0))) + _1304) * _1185;
        _1321 = _1152;
        _1323 = _1151;
        _1324 = _1150;
        _1325 = _1162;
        _1326 = _1161;
        _1327 = _1160;
        _1328 = _1172;
        _1329 = _1171;
        _1330 = _1170;
        _1331 = _1185;
        _1332 = _1184;
        _1333 = _1183;
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1322;
        _1323 = _1322;
        _1324 = _1322;
        _1325 = _1322;
        _1326 = _1322;
        _1327 = _1322;
        _1328 = _1322;
        _1329 = _1322;
        _1330 = _1322;
        _1331 = _1322;
        _1332 = _1322;
        _1333 = _1322;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1368 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1372 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1395 = _983 + _760;
        float _1396 = _987 + _761;
        float _1397 = _991 + _762;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_760, _761, _762), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4056 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_760, _761, _762), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4089 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_760, _761, _762), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4122 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1322;
        _1634 = _1322;
        _1635 = _1322;
        _1636 = _1322;
        _1637 = _1322;
        _1638 = _1322;
        _1639 = _1322;
        _1640 = _1322;
        _1641 = _1322;
        _1642 = _1322;
        _1643 = _1322;
        _1644 = _1322;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1334)) + _1334;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1335)) + _1335;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1336)) + _1336;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _930 * 0.5;
    float _1702 = _931 * 0.5;
    float _1703 = _932 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1321, _1325, _1328, _1331));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1831 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1834 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1862 = frontier_phi_17_15_ladder;
        }
        float _2062;
        if (_1831 > 0.0)
        {
            _2062 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2062 = frontier_phi_26_22_ladder;
        }
        float _2305;
        if (_1834 > 0.0)
        {
            _2305 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2305 = frontier_phi_38_33_ladder;
        }
        float _2307 = isnan(_2062) ? _1862 : (isnan(_1862) ? _2062 : min(_1862, _2062));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1828) + _1817;
        float _2313 = (_2308 * _1831) + _1821;
        float _2314 = (_2308 * _1834) + _1825;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_16_38_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_16_38_ladder_2;
        _1852 = frontier_phi_16_38_ladder_1;
        _1854 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1770);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1926 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1929 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2067;
        if (_1923 > 0.0)
        {
            _2067 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2332;
        if (_1926 > 0.0)
        {
            _2332 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2332 = frontier_phi_40_35_ladder;
        }
        float _2537;
        if (_1929 > 0.0)
        {
            _2537 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2537 = frontier_phi_49_46_ladder;
        }
        float _2539 = isnan(_2332) ? _2067 : (isnan(_2067) ? _2332 : min(_2067, _2332));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1923) + _1912;
        float _2545 = (_2540 * _1926) + _1916;
        float _2546 = (_2540 * _1929) + _1920;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_25_49_ladder = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_25_49_ladder_2;
        _1950 = frontier_phi_25_49_ladder_1;
        _1952 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1859);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1964 = ((((1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_951 * _938)) * _922;
    float _1965 = _1964 * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1966 = _1964 * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1967 = _1964 * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1970 = fma(_1967, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1967, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1967, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1996 = _922 + (-1.0);
    float _2001 = (cbLight._m0[_1989].x * _1996) + 1.0;
    float _2002 = (cbLight._m0[_1989].y * _1996) + 1.0;
    float _2003 = (cbLight._m0[_1989].z * _1996) + 1.0;
    float _2004 = (cbLight._m0[_1989].w * _1996) + 1.0;
    uint _2005 = _1988 + 5u;
    float _2011 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2015 = _1988 + 4u;
    float _2021 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2025 = _1988 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_760, _761, _762));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_760, _761, _762));
    float _4258 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4269 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2005].x * _2011) * _2046) + ((cbLight._m0[_2015].x * _2021) * _2044);
    float _2054 = ((_2011 * cbLight._m0[_2005].y) * _2046) + ((_2021 * cbLight._m0[_2015].y) * _2044);
    float _2055 = ((_2011 * cbLight._m0[_2005].z) * _2046) + ((_2021 * cbLight._m0[_2015].z) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1988 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2061)
    {
        _2072 = _2053;
        _2074 = _2054;
        _2076 = _2055;
    }
    else
    {
        uint _2080 = _1988 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1988 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4280 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2099 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _2053;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _2054;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _2055;
    }
    bool _2079 = _2059.y == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2079)
    {
        _2117 = _2072;
        _2119 = _2074;
        _2121 = _2076;
    }
    else
    {
        uint _2276 = _1988 + 7u;
        float _2292 = (dot(vec3(cbLight._m0[_1988 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4296 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2295 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2117 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2072;
        _2119 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2074;
        _2121 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2076;
    }
    uint _2124 = _1988 + 8u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _763) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1988].x + _839;
    float _2140 = cbLight._m0[_1988].y + _840;
    float _2141 = cbLight._m0[_1988].z + _841;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_1988].xyz));
    float _4312 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2153 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2154 = dot(vec3(_760, _761, _762), vec3(_2146, _2147, _2148));
    float _4334 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2146, _2147, _2148));
    float _4345 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2138 * _2138;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2178 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2153 * ((_2152 * _2178) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2178) + _2138) * _2152))) * _2152;
    float _4356 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    uint _2202 = _1988 + 9u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _763) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2025].x + _839;
    float _2216 = cbLight._m0[_2025].y + _840;
    float _2217 = cbLight._m0[_2025].z + _841;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2025].xyz));
    float _4367 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2229 = dot(vec3(_760, _761, _762), vec3(_2222, _2223, _2224));
    float _4378 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2222, _2223, _2224));
    float _4389 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2214 * _2214;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2214;
    float _2261 = (0.5 / (((_2153 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2251) + _2214) * _2228))) * _2228;
    float _4400 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    float _2273 = (((_2250 * cbLight._m0[_2202].x) * _2263) * _2011) + (((_2177 * cbLight._m0[_2124].x) * _2191) * _2021);
    float _2274 = (((_2250 * cbLight._m0[_2202].y) * _2263) * _2011) + (((_2177 * cbLight._m0[_2124].y) * _2191) * _2021);
    float _2275 = (((_2250 * cbLight._m0[_2202].z) * _2263) * _2011) + (((_2177 * cbLight._m0[_2124].z) * _2191) * _2021);
    float _2337;
    float _2339;
    float _2341;
    if (_2061)
    {
        _2337 = _2273;
        _2339 = _2274;
        _2341 = _2275;
    }
    else
    {
        uint _2343 = _1988 + 2u;
        uint _2347 = _1988 + 10u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _763) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _839;
        float _2364 = cbLight._m0[_2343].y + _840;
        float _2365 = cbLight._m0[_2343].z + _841;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2343].xyz));
        float _4411 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2377 = dot(vec3(_760, _761, _762), vec3(_2370, _2371, _2372));
        float _4422 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4433 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2398 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2399 = 1.0 - _2362;
        float _2409 = (0.5 / (((_2153 * ((_2376 * _2399) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2399) + _2362) * _2376))) * _2376;
        float _4444 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2337 = (((_2398 * cbLight._m0[_2347].x) * _2411) * _2412) + _2273;
        _2339 = (((_2398 * cbLight._m0[_2347].y) * _2411) * _2412) + _2274;
        _2341 = (((_2398 * cbLight._m0[_2347].z) * _2411) * _2412) + _2275;
    }
    float _2447;
    float _2449;
    float _2451;
    if (_2079)
    {
        _2447 = _2337;
        _2449 = _2339;
        _2451 = _2341;
    }
    else
    {
        uint _2458 = _1988 + 3u;
        uint _2462 = _1988 + 11u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _763) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _839;
        float _2479 = cbLight._m0[_2458].y + _840;
        float _2480 = cbLight._m0[_2458].z + _841;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2458].xyz));
        float _4460 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2492 = dot(vec3(_760, _761, _762), vec3(_2485, _2486, _2487));
        float _4471 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4482 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2514 = 1.0 - _2477;
        float _2524 = (0.5 / (((_2153 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2514) + _2477) * _2491))) * _2491;
        float _4493 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2447 = (((_2513 * cbLight._m0[_2462].x) * _2526) * _2527) + _2337;
        _2449 = (((_2513 * cbLight._m0[_2462].y) * _2526) * _2527) + _2339;
        _2451 = (((_2513 * cbLight._m0[_2462].z) * _2526) * _2527) + _2341;
    }
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_1986.y == 0u)
    {
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2602;
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2602;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2602;
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.x;
        uint _2629 = uint((float(_2617.y) * floor(float(uint(cbSceneParam._m0[85u].y * _860) / _2618))) + floor(float(uint(cbSceneParam._m0[85u].x * _859) / _2618)));
        float _2639 = (log2(_2605 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        uint _2643 = uint(isnan(14.0) ? _2640 : (isnan(_2640) ? 14.0 : min(_2640, 14.0)));
        uvec4 _2648 = texelFetch(g_lightClusterGridBuffer, int(((_2643 << 2u) + (_2629 << 6u)) >> 2u));
        uint _2649 = _2648.x;
        uint _2650 = _2617.z;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((((1u << ((_2650 >> 4u) & 15u)) + 4294967295u) & _2649) == 0u) || ((_2650 & 240u) == 0u))
        {
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
        }
        else
        {
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2919)
                {
                    frontier_phi_66_pred = _2903;
                    frontier_phi_66_pred_1 = _2908;
                    frontier_phi_66_pred_2 = _2907;
                    frontier_phi_66_pred_3 = _2906;
                    frontier_phi_66_pred_4 = _2905;
                    frontier_phi_66_pred_5 = _2904;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2918;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2909 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2603;
                        float _3115 = _3074.y - _2604;
                        float _3116 = _3074.z - _2605;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_878, _881, _884), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4519 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2603;
                        float _3150 = (-0.0) - _2604;
                        float _3151 = (-0.0) - _2605;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _938;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_878, _881, _884), vec3(_3156, _3157, _3158));
                        float _4535 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3191 = dot(vec3(_878, _881, _884), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4546 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4557 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4568 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2978 = (_3145 * _3093.x) + _3051;
                        _2979 = (_3145 * _3093.y) + _3052;
                        _2980 = (_3145 * _3093.z) + _3053;
                        _2975 = (_3226 * _3110.x) + _3048;
                        _2976 = (_3226 * _3110.y) + _3049;
                        _2977 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2980;
                    frontier_phi_66_pred_2 = _2979;
                    frontier_phi_66_pred_3 = _2978;
                    frontier_phi_66_pred_4 = _2977;
                    frontier_phi_66_pred_5 = _2976;
                }
                _2751 = frontier_phi_66_pred;
                _2761 = frontier_phi_66_pred_1;
                _2759 = frontier_phi_66_pred_2;
                _2757 = frontier_phi_66_pred_3;
                _2755 = frontier_phi_66_pred_4;
                _2753 = frontier_phi_66_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2751;
                    _2904 = _2753;
                    _2905 = _2755;
                    _2906 = _2757;
                    _2907 = _2759;
                    _2908 = _2761;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
        }
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.z;
        uint _2767 = (_2765 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2767) & _2649) == 0u)
        {
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
            float _2897 = _2896 * _2603;
            float _2898 = _2896 * _2604;
            float _2899 = _2896 * _2605;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2767 < ((_2765 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3031 = _2750;
                float _3032 = _2752;
                float _3033 = _2754;
                float _3034 = _2756;
                float _3035 = _2758;
                float _3036 = _2760;
                uint _3037 = _2767;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3047)
                    {
                        frontier_phi_77_pred = _3036;
                        frontier_phi_77_pred_1 = _3035;
                        frontier_phi_77_pred_2 = _3034;
                        frontier_phi_77_pred_3 = _3033;
                        frontier_phi_77_pred_4 = _3032;
                        frontier_phi_77_pred_5 = _3031;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        uint _3259 = _3046;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2605, _3377.z, fma(_2604, _3377.y, _3377.x * _2603)) + _3377.w;
                            _3390 = !((fma(_2605, _3358.z, fma(_2604, _3358.y, _3358.x * _2603)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _2603;
                                float _3418 = _3285.y - _2604;
                                float _3419 = _3285.z - _2605;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4579 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_878, _881, _884))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2605, _3328.z, fma(_2604, _3328.y, _3328.x * _2603)) + _3328.w) / _3389;
                                float _3449 = (fma(_2605, _3343.z, fma(_2604, _3343.y, _3343.x * _2603)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4595 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _938;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2897;
                                float _3479 = _3425 - _2898;
                                float _3480 = _3426 - _2899;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_878, _881, _884), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4606 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3492 = dot(vec3(_878, _881, _884), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4617 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_878, _881, _884), vec3(_3424, _3425, _3426))) + _3501;
                                float _4628 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4639 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3301.y;
                                frontier_phi_83_pred_1 = _3455 * _3301.x;
                                frontier_phi_83_pred_2 = _3529 * _3313.z;
                                frontier_phi_83_pred_3 = _3529 * _3313.y;
                                frontier_phi_83_pred_4 = _3529 * _3313.x;
                                frontier_phi_83_pred_5 = _3455 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3245;
                        frontier_phi_77_pred_1 = _3244;
                        frontier_phi_77_pred_2 = _3243;
                        frontier_phi_77_pred_3 = _3242;
                        frontier_phi_77_pred_4 = _3241;
                        frontier_phi_77_pred_5 = _3240;
                    }
                    _2882 = frontier_phi_77_pred;
                    _2880 = frontier_phi_77_pred_1;
                    _2878 = frontier_phi_77_pred_2;
                    _2876 = frontier_phi_77_pred_3;
                    _2874 = frontier_phi_77_pred_4;
                    _2872 = frontier_phi_77_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2872;
                        _3032 = _2874;
                        _3033 = _2876;
                        _3034 = _2878;
                        _3035 = _2880;
                        _3036 = _2882;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2876;
                frontier_phi_58_59_ladder_1 = _2882;
                frontier_phi_58_59_ladder_2 = _2880;
                frontier_phi_58_59_ladder_3 = _2878;
                frontier_phi_58_59_ladder_4 = _2874;
                frontier_phi_58_59_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_58_59_ladder = _2754;
                frontier_phi_58_59_ladder_1 = _2760;
                frontier_phi_58_59_ladder_2 = _2758;
                frontier_phi_58_59_ladder_3 = _2756;
                frontier_phi_58_59_ladder_4 = _2752;
                frontier_phi_58_59_ladder_5 = _2750;
            }
            _2871 = frontier_phi_58_59_ladder_5;
            _2873 = frontier_phi_58_59_ladder_4;
            _2875 = frontier_phi_58_59_ladder;
            _2877 = frontier_phi_58_59_ladder_3;
            _2879 = frontier_phi_58_59_ladder_2;
            _2881 = frontier_phi_58_59_ladder_1;
        }
        float _2886 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2662 = (_2886 * _2877) + _2117;
        _2664 = (_2886 * _2879) + _2119;
        _2666 = (_2886 * _2881) + _2121;
        _2668 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2447;
        _2670 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2449;
        _2672 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2451;
    }
    else
    {
        _2662 = _2117;
        _2664 = _2119;
        _2666 = _2121;
        _2668 = _2447;
        _2670 = _2449;
        _2672 = _2451;
    }
    float _4655 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4666 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4677 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2689 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2662 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _922))) + ((_2668 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _2690 = ((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2664 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _922))) + ((_2670 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _2691 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2666 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _922))) + ((_2672 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    uint _2692 = _268 + 6u;
    float _2700 = _859 / cbSceneParam._m0[86u].x;
    float _2701 = _860 / cbSceneParam._m0[86u].y;
    vec4 _2715 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2717 = _2715.x;
    float _2718 = _2715.y;
    float _2719 = _2715.z;
    float _2720 = _2715.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2775 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2776 = _2775 / _781;
        float _2787 = _2776 * _832;
        float _2788 = _833 * _2776;
        float _2789 = (-0.0) - _2788;
        float _2791 = _2776 * _834;
        float _2793 = (cbSceneParam._m0[77u].w * _2789) / _2775;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2788;
        float _2801 = sqrt(((_2787 * _2787) + (_2788 * _2788)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2775)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2988;
        if (abs((_2789 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2988 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2934 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2988 = ((abs(_2801 / _2789) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2811 * _2943) - exp2(_2811 * _2944)) * _2932))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _2990 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, 1.0), 0.0);
        float _2999 = exp2((_2988 * (-1.44269502162933349609375)) * (1.0 - _2990.w));
        float _3000 = log2(_2999);
        float _3016 = log2(_2720);
        _2813 = (exp2(_3016 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].x)) * _2990.x) / cbSceneParam._m0[78u].x)) + _2717;
        _2815 = (exp2(_3016 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].y)) * _2990.y) / cbSceneParam._m0[78u].y)) + _2718;
        _2817 = (exp2(_3016 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].z)) * _2990.z) / cbSceneParam._m0[78u].z)) + _2719;
        _2819 = _2999 * _2720;
    }
    else
    {
        _2813 = _2717;
        _2815 = _2718;
        _2817 = _2719;
        _2819 = _2720;
    }
    bool _3026;
    vec4 _2829;
    vec4 _2851;
    float _2853;
    float _2857;
    float _2858;
    float _2859;
    float _2860;
    bool _2870;
    for (;;)
    {
        _2829 = cbMatDynParam._m0[0u];
        float _2831 = roundEven(_2829.y);
        bool _2832 = _2831 == 3.0;
        float _2833 = log2(_2819);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2689;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2690;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2691;
        float _2849 = _848 + (-0.5);
        _2851 = cbMtdParam._m0[1u];
        _2853 = _2851.y * _2849;
        float _2856 = (_2831 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2857 = _2856 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2813)));
        _2858 = _2856 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
        _2859 = _2856 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
        _2860 = _2849 * 0.999000012874603271484375;
        _2870 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2870)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2860) < 0.5)
            {
                _3026 = true;
                break;
            }
        }
        uint _2967 = _897 + uint(_2829.w);
        if ((cbInstanceData._m0[_2967].w < 1.0) && ((cbInstanceData._m0[_2967].w + _2860) < 0.5))
        {
            _3026 = true;
            break;
        }
        if ((_2853 + 1.0) < _2851.x)
        {
            _3026 = true;
            break;
        }
        _3026 = false;
        break;
    }
    float _3231;
    if (_3026)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2692].w;
    }
    SV_Target.x = _2857;
    SV_Target.y = _2858;
    SV_Target.z = _2859;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2692].w;
    discard_exit();
}


