#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1531;
float _4171;
float _4172;
float _4173;
float _4174;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4183 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4194 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4205 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _469 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _486 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_457 - _469) * cbMtdParam._m0[24u].z) + _469) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4216 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _494 = (_487 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _495 = (_487 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _496 = (_487 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _513 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _559 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[24u].z) + _545) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _570 = (_349.x * cbMtdParam._m0[9u].x) * ((_560 * ((_513.x * cbMtdParam._m0[13u].x) - _494)) + _494);
    float _571 = (_349.y * cbMtdParam._m0[9u].y) * ((_560 * ((_513.y * cbMtdParam._m0[13u].y) - _495)) + _495);
    float _572 = (_349.z * cbMtdParam._m0[9u].z) * ((_560 * ((_513.z * cbMtdParam._m0[13u].z) - _496)) + _496);
    float _576 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _570;
    float _579 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _571;
    float _582 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _572;
    float _590 = (((_570 - _576) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _576) * 4.55000019073486328125;
    float _592 = (((_571 - _579) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _579) * 4.55000019073486328125;
    float _594 = (((_572 - _582) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _582) * 4.55000019073486328125;
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _674 = _672.x;
    float _675 = _672.y;
    float _676 = _672.z;
    float _683 = ((_655.x - _674) * _487) + _674;
    float _684 = ((_655.y - _675) * _487) + _675;
    float _685 = ((_655.z - _676) * _487) + _676;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _710 = ((_697.z - _685) * _560) + _685;
    float _713 = ((((_697.x - _683) * _560) + _683) * 2.0) + (-1.0);
    float _714 = ((((_697.y - _684) * _560) + _684) * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4238 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _761 = _759.x;
    float _762 = 1.0 - _761;
    float _768 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _771 = ((isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : min(_768, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _780 = (_771 - ((((((_761 - _762) * cbMtdParam._m0[24u].w) + _762) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _771))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4259 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _788 = (_781 * ((_613.x * cbMtdParam._m0[18u].x) - _590)) + _590;
    float _789 = (_781 * ((_613.y * cbMtdParam._m0[18u].y) - _592)) + _592;
    float _790 = (_781 * ((_613.z * cbMtdParam._m0[18u].z) - _594)) + _594;
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _804 = _802.x;
    float _805 = 1.0 - _804;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_804 - _805) * cbMtdParam._m0[24u].y) + _805) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4270 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _788) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _831) + _788;
    float _840 = ((((cbMtdParam._m0[10u].y - _789) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _831) + _789;
    float _841 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _790)) * _831) + _790;
    float _846 = (((_632.z - _710) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _710;
    float _850 = ((_734.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _4281 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = (_781 * (_864.z - _850)) + _850;
    float _884 = ((cbMtdParam._m0[23u].y - _881) * _831) + _881;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _911 = (_905.x * 2.0) + (-1.0);
    float _912 = (_905.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4292 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _927 = (_713 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_632.x * 2.0) + (-1.0)))) + (((_734.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _928 = (_714 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_632.y * 2.0) + (-1.0)))) + (((_734.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _940 = (((_871 - _927) + (cbMtdParam._m0[21u].x * _927)) * _781) + _927;
    float _941 = (((_872 - _928) + (cbMtdParam._m0[21u].x * _928)) * _781) + _928;
    float _942 = (_781 * (sqrt(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) - _720)) + _720;
    float _953 = (((_911 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _831) + _940;
    float _954 = (((_912 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _831) + _941;
    float _955 = ((sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _942) * _831) + _942;
    float _957 = cbMtdParam._m0[22u].x + _734.w;
    float _960 = fma(_955, _261 * NORMAL.x, fma(_954, _268 * TANGENT.x, (_254 * _246) * _953));
    float _963 = fma(_955, _261 * NORMAL.y, fma(_954, _268 * TANGENT.y, (_254 * _247) * _953));
    float _966 = fma(_955, _261 * NORMAL.z, fma(_954, _268 * TANGENT.z, (_254 * _248) * _953));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _4303 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _974 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4325 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4336 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4347 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _992 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    vec4 _1056 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1058 = _1056.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1212 = sqrt(((_1042 * _1042) + (_1043 * _1043)) + (_1044 * _1044));
        float _1218 = (cbMatDynParam._m0[5u].x * _1212) + cbMatDynParam._m0[5u].y;
        float _4358 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1223 = (cbMatDynParam._m0[5u].z * _1212) + cbMatDynParam._m0[5u].w;
        float _4369 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) - _1219)) + _1219) < ((_1058 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1069 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1070 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1088 = fma(_973, cbSceneParam._m0[5u].z, fma(_972, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _971));
    float _1091 = fma(_973, cbSceneParam._m0[6u].z, fma(_972, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _971));
    float _1094 = fma(_973, cbSceneParam._m0[7u].z, fma(_972, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _971));
    uint _1107 = _293 + 9u;
    uint _1108 = _1107 + uint(cbMatDynParam._m0[0u].w);
    float _1114 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * cbInstanceData._m0[_1108].x;
    float _1115 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1108].y;
    float _1116 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1108].z;
    float _4380 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1069, cbSceneParam._m0[86u].y * _1070));
    float _1132 = ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_971, _972, _973), vec3(_1049, _1050, _1051));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _971) - _1049;
    float _1141 = (_1136 * _972) - _1050;
    float _1142 = (_1136 * _973) - _1051;
    float _1146 = abs(dot(vec3(_1049, _1050, _1051), vec3(_971, _972, _973)));
    float _4413 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_974);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1259 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1263 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1288 = _1193 + _971;
        float _1289 = _1197 + _972;
        float _1290 = _1201 + _973;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_971, _972, _973), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4461 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_971, _972, _973), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4494 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_971, _972, _973), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4505 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4516 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4527 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1576 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1580 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1603 = _1193 + _971;
        float _1604 = _1197 + _972;
        float _1605 = _1201 + _973;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_971, _972, _973), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4590 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_971, _972, _973), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4623 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_971, _972, _973), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4634 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4645 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4656 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = _1531;
        _1850 = _1531;
        _1851 = _1531;
        _1852 = _1531;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1543)) + _1543;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1544)) + _1544;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1545)) + _1545;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1140 * 0.5;
    float _1910 = _1141 * 0.5;
    float _1911 = _1142 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _974);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2039 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2042 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2070 = frontier_phi_17_15_ladder;
        }
        float _2239;
        if (_2039 > 0.0)
        {
            _2239 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2239 = frontier_phi_26_22_ladder;
        }
        float _2534;
        if (_2042 > 0.0)
        {
            _2534 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2534 = frontier_phi_38_33_ladder;
        }
        float _2536 = isnan(_2239) ? _2070 : (isnan(_2070) ? _2239 : min(_2070, _2239));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _2036) + _2025;
        float _2542 = (_2537 * _2039) + _2029;
        float _2543 = (_2537 * _2042) + _2033;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2544;
        float _2548 = _2544 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 > _2548) || ((_2542 < _2546) || ((_2541 < _2546) || (_2541 > _2548))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2543, cbModelParam._m0[9u].z, fma(_2542, cbModelParam._m0[9u].y, _2541 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2543, cbModelParam._m0[10u].z, fma(_2542, cbModelParam._m0[10u].y, _2541 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2543, cbModelParam._m0[11u].z, fma(_2542, cbModelParam._m0[11u].y, _2541 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_16_38_ladder = _2688.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2688.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2688.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_16_38_ladder_2;
        _2060 = frontier_phi_16_38_ladder_1;
        _2062 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _974);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2134 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2137 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2244;
        if (_2131 > 0.0)
        {
            _2244 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2244 = frontier_phi_28_24_ladder;
        }
        float _2561;
        if (_2134 > 0.0)
        {
            _2561 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2561 = frontier_phi_40_35_ladder;
        }
        float _2888;
        if (_2137 > 0.0)
        {
            _2888 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2888 = frontier_phi_50_47_ladder;
        }
        float _2890 = isnan(_2561) ? _2244 : (isnan(_2244) ? _2561 : min(_2244, _2561));
        float _2891 = isnan(_2888) ? _2890 : (isnan(_2890) ? _2888 : min(_2890, _2888));
        float _2895 = (_2891 * _2131) + _2120;
        float _2896 = (_2891 * _2134) + _2124;
        float _2897 = (_2891 * _2137) + _2128;
        float _2898 = _2891 * 9.9999997473787516355514526367188e-05;
        float _2899 = (-1.0) - _2898;
        float _2901 = _2898 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2897 > _2901) || ((_2897 < _2899) || ((_2896 > _2901) || ((_2896 < _2899) || ((_2895 < _2899) || (_2895 > _2901))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2897, cbModelParam._m0[17u].z, fma(_2896, cbModelParam._m0[17u].y, _2895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2897, cbModelParam._m0[18u].z, fma(_2896, cbModelParam._m0[18u].y, _2895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2897, cbModelParam._m0[19u].z, fma(_2896, cbModelParam._m0[19u].y, _2895 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_25_50_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_50_ladder_2;
        _2158 = frontier_phi_25_50_ladder_1;
        _2160 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2067);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2172 = ((((1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1161 * _1148)) * _1132;
    float _2173 = _2172 * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2174 = _2172 * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2175 = _2172 * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2178 = fma(_2175, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2181 = fma(_2175, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2184 = fma(_2175, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2231 = _2218 / _2230;
    float _2232 = _2222 / _2230;
    float _2233 = _2226 / _2230;
    float _2380;
    float _2381;
    float _2382;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2260 = ((uint(_2233 > cbSceneParam._m0[59u].y) + uint(_2233 > cbSceneParam._m0[59u].x)) + uint(_2233 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2261 = _2260 + 43u;
        uint _2269 = _2260 + 44u;
        uint _2277 = _2260 + 45u;
        uint _2285 = _2260 + 46u;
        float _2296 = fma(_2230, cbSceneParam._m0[_2261].w, fma(_2226, cbSceneParam._m0[_2261].z, fma(_2222, cbSceneParam._m0[_2261].y, _2218 * cbSceneParam._m0[_2261].x)));
        float _2300 = fma(_2230, cbSceneParam._m0[_2269].w, fma(_2226, cbSceneParam._m0[_2269].z, fma(_2222, cbSceneParam._m0[_2269].y, _2218 * cbSceneParam._m0[_2269].x)));
        float _2308 = fma(_2230, cbSceneParam._m0[_2285].w, fma(_2226, cbSceneParam._m0[_2285].z, fma(_2222, cbSceneParam._m0[_2285].y, _2218 * cbSceneParam._m0[_2285].x)));
        float _2313 = cbSceneParam._m0[33u].z * _2308;
        float _2315 = cbSceneParam._m0[33u].w * _2308;
        float _2318 = fma(_2230, cbSceneParam._m0[_2277].w, fma(_2226, cbSceneParam._m0[_2277].z, fma(_2222, cbSceneParam._m0[_2277].y, _2218 * cbSceneParam._m0[_2277].x))) / _2308;
        float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_2232 * _2232) + (_2231 * _2231)) + (_2233 * _2233))) * cbSceneParam._m0[33u].y;
        float _4782 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2373 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2313 + _2296) / _2308, (_2315 + _2300) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2315 + _2296) / _2308, (_2300 - _2313) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 - _2313) / _2308, (_2300 - _2315) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 - _2315) / _2308, (_2313 + _2300) / _2308), _2318), 0.0)).x), vec4(0.25)));
        _2380 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
        _2381 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
        _2382 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2380 = 1.0;
        _2381 = 1.0;
        _2382 = 1.0;
    }
    float _2446;
    float _2448;
    float _2450;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2434 = fma(_2230, cbSceneParam._m0[63u].w, fma(_2226, cbSceneParam._m0[63u].z, fma(_2222, cbSceneParam._m0[63u].y, _2218 * cbSceneParam._m0[63u].x)));
        float _2435 = fma(_2230, cbSceneParam._m0[60u].w, fma(_2226, cbSceneParam._m0[60u].z, fma(_2222, cbSceneParam._m0[60u].y, _2218 * cbSceneParam._m0[60u].x))) / _2434;
        float _2436 = fma(_2230, cbSceneParam._m0[61u].w, fma(_2226, cbSceneParam._m0[61u].z, fma(_2222, cbSceneParam._m0[61u].y, _2218 * cbSceneParam._m0[61u].x))) / _2434;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2435 >= cbSceneParam._m0[64u].x) && (_2436 >= cbSceneParam._m0[64u].y)) && (_2435 <= cbSceneParam._m0[64u].z)) && (_2436 <= cbSceneParam._m0[64u].w))
        {
            float _2574 = fma(_2230, cbSceneParam._m0[62u].w, fma(_2226, cbSceneParam._m0[62u].z, fma(_2222, cbSceneParam._m0[62u].y, _2218 * cbSceneParam._m0[62u].x))) / _2434;
            float _2578 = isnan(cbSceneParam._m0[41u].w) ? _2574 : (isnan(_2574) ? cbSceneParam._m0[41u].w : max(_2574, cbSceneParam._m0[41u].w));
            float _2621 = (cbSceneParam._m0[33u].x - sqrt(((_2232 * _2232) + (_2231 * _2231)) + (_2233 * _2233))) * cbSceneParam._m0[33u].y;
            float _4798 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
            float _2628 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2435, cbSceneParam._m0[33u].w + _2436), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2435, _2436 - cbSceneParam._m0[33u].z), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].z, _2436 - cbSceneParam._m0[33u].w), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2436), _2578), 0.0)).x), vec4(0.25)));
            float _2632 = 1.0 - (_2628 * cbSceneParam._m0[34u].x);
            float _2633 = 1.0 - (_2628 * cbSceneParam._m0[34u].y);
            float _2634 = 1.0 - (_2628 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
            frontier_phi_37_36_ladder_1 = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_37_36_ladder_2 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
        }
        else
        {
            frontier_phi_37_36_ladder = _2382;
            frontier_phi_37_36_ladder_1 = _2381;
            frontier_phi_37_36_ladder_2 = _2380;
        }
        _2446 = frontier_phi_37_36_ladder_2;
        _2448 = frontier_phi_37_36_ladder_1;
        _2450 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2446 = _2380;
        _2448 = _2381;
        _2450 = _2382;
    }
    uvec4 _2455 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2457 = _2455.x * 14u;
    uint _2458 = _2457 + 13u;
    float _2465 = _1132 + (-1.0);
    float _2470 = (cbLight._m0[_2458].x * _2465) + 1.0;
    float _2471 = (cbLight._m0[_2458].y * _2465) + 1.0;
    float _2472 = (cbLight._m0[_2458].z * _2465) + 1.0;
    float _2473 = (cbLight._m0[_2458].w * _2465) + 1.0;
    uint _2474 = _2457 + 5u;
    float _2480 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2484 = _2457 + 4u;
    float _2493 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2497 = _2457 | 1u;
    float _2508 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_971, _972, _973));
    float _2511 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_971, _972, _973));
    float _4834 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _4845 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2516 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2518 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * 0.3183098733425140380859375;
    float _2525 = ((cbLight._m0[_2474].x * _2480) * _2518) + (((cbLight._m0[_2484].x * _2446) * _2493) * _2516);
    float _2526 = ((_2480 * cbLight._m0[_2474].y) * _2518) + (((cbLight._m0[_2484].y * _2448) * _2493) * _2516);
    float _2527 = ((_2480 * cbLight._m0[_2474].z) * _2518) + (((cbLight._m0[_2484].z * _2450) * _2493) * _2516);
    uvec4 _2531 = floatBitsToUint(cbLight._m0[_2457 + 12u]);
    bool _2533 = _2531.x == 0u;
    float _2635;
    float _2637;
    float _2639;
    if (_2533)
    {
        _2635 = _2525;
        _2637 = _2526;
        _2639 = _2527;
    }
    else
    {
        uint _2643 = _2457 + 6u;
        float _2659 = (dot(vec3(cbLight._m0[_2457 + 2u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4856 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2662 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2635 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2525;
        _2637 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2526;
        _2639 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2527;
    }
    bool _2642 = _2531.y == 0u;
    float _2697;
    float _2699;
    float _2701;
    if (_2642)
    {
        _2697 = _2635;
        _2699 = _2637;
        _2701 = _2639;
    }
    else
    {
        uint _2859 = _2457 + 7u;
        float _2875 = (dot(vec3(cbLight._m0[_2457 + 3u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2876 = _2875 * _2875;
        float _4872 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2877 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2878 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2697 = (((cbLight._m0[_2859].x * 0.3183098733425140380859375) * _2877) * _2878) + _2635;
        _2699 = (((cbLight._m0[_2859].y * 0.3183098733425140380859375) * _2877) * _2878) + _2637;
        _2701 = (((cbLight._m0[_2859].z * 0.3183098733425140380859375) * _2877) * _2878) + _2639;
    }
    uint _2704 = _2457 + 8u;
    float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _974) * 0.949999988079071044921875);
    float _2718 = _2717 * _2717;
    float _2719 = cbLight._m0[_2457].x + _1049;
    float _2720 = cbLight._m0[_2457].y + _1050;
    float _2721 = cbLight._m0[_2457].z + _1051;
    float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
    float _2726 = _2725 * _2719;
    float _2727 = _2725 * _2720;
    float _2728 = _2725 * _2721;
    float _2729 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2457].xyz));
    float _4888 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _4899 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2733 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2734 = dot(vec3(_971, _972, _973), vec3(_2726, _2727, _2728));
    float _4910 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2738 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2726, _2727, _2728));
    float _4921 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2742 = _2718 * _2718;
    float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
    float _2757 = (exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2758 = 1.0 - _2718;
    float _2769 = (0.5 / (((_2733 * ((_2732 * _2758) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2758) + _2718) * _2732))) * _2732;
    float _4932 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2771 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
    uint _2785 = _2457 + 9u;
    float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _974) * 0.949999988079071044921875);
    float _2797 = _2796 * _2796;
    float _2798 = cbLight._m0[_2497].x + _1049;
    float _2799 = cbLight._m0[_2497].y + _1050;
    float _2800 = cbLight._m0[_2497].z + _1051;
    float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
    float _2805 = _2804 * _2798;
    float _2806 = _2804 * _2799;
    float _2807 = _2804 * _2800;
    float _2808 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2497].xyz));
    float _4943 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2812 = dot(vec3(_971, _972, _973), vec3(_2805, _2806, _2807));
    float _4954 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2815 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
    float _2816 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2805, _2806, _2807));
    float _4965 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2820 = _2797 * _2797;
    float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
    float _2833 = (exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2834 = 1.0 - _2797;
    float _2844 = (0.5 / (((_2733 * ((_2811 * _2834) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2834) + _2797) * _2811))) * _2811;
    float _4976 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2846 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
    float _2856 = (((_2833 * cbLight._m0[_2785].x) * _2846) * _2480) + ((((cbLight._m0[_2704].x * _2446) * _2757) * _2771) * _2493);
    float _2857 = (((_2833 * cbLight._m0[_2785].y) * _2846) * _2480) + ((((cbLight._m0[_2704].y * _2448) * _2757) * _2771) * _2493);
    float _2858 = (((_2833 * cbLight._m0[_2785].z) * _2846) * _2480) + ((((cbLight._m0[_2704].z * _2450) * _2757) * _2771) * _2493);
    float _2914;
    float _2916;
    float _2918;
    if (_2533)
    {
        _2914 = _2856;
        _2916 = _2857;
        _2918 = _2858;
    }
    else
    {
        uint _2920 = _2457 + 2u;
        uint _2924 = _2457 + 10u;
        float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2920].w)) * _974) * 0.949999988079071044921875);
        float _2939 = _2938 * _2938;
        float _2940 = cbLight._m0[_2920].x + _1049;
        float _2941 = cbLight._m0[_2920].y + _1050;
        float _2942 = cbLight._m0[_2920].z + _1051;
        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
        float _2947 = _2946 * _2940;
        float _2948 = _2946 * _2941;
        float _2949 = _2946 * _2942;
        float _2950 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2920].xyz));
        float _4987 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _2954 = dot(vec3(_971, _972, _973), vec3(_2947, _2948, _2949));
        float _4998 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _2958 = dot(vec3(cbLight._m0[_2920].xyz), vec3(_2947, _2948, _2949));
        float _5009 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2962 = _2939 * _2939;
        float _2966 = ((_2957 * _2957) * (_2962 + (-1.0))) + 1.0;
        float _2975 = (exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2976 = 1.0 - _2939;
        float _2986 = (0.5 / (((_2733 * ((_2953 * _2976) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2976) + _2939) * _2953))) * _2953;
        float _5020 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2988 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2962 / ((_2966 * _2966) * 3.141590118408203125));
        float _2989 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2914 = (((_2975 * cbLight._m0[_2924].x) * _2988) * _2989) + _2856;
        _2916 = (((_2975 * cbLight._m0[_2924].y) * _2988) * _2989) + _2857;
        _2918 = (((_2975 * cbLight._m0[_2924].z) * _2988) * _2989) + _2858;
    }
    float _3020;
    float _3022;
    float _3024;
    if (_2642)
    {
        _3020 = _2914;
        _3022 = _2916;
        _3024 = _2918;
    }
    else
    {
        uint _3031 = _2457 + 3u;
        uint _3035 = _2457 + 11u;
        float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3031].w)) * _974) * 0.949999988079071044921875);
        float _3050 = _3049 * _3049;
        float _3051 = cbLight._m0[_3031].x + _1049;
        float _3052 = cbLight._m0[_3031].y + _1050;
        float _3053 = cbLight._m0[_3031].z + _1051;
        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
        float _3058 = _3057 * _3051;
        float _3059 = _3057 * _3052;
        float _3060 = _3057 * _3053;
        float _3061 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_3031].xyz));
        float _5036 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _3065 = dot(vec3(_971, _972, _973), vec3(_3058, _3059, _3060));
        float _5047 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
        float _3069 = dot(vec3(cbLight._m0[_3031].xyz), vec3(_3058, _3059, _3060));
        float _5058 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3073 = _3050 * _3050;
        float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
        float _3086 = (exp2(log2(1.0 - (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3087 = 1.0 - _3050;
        float _3097 = (0.5 / (((_2733 * ((_3064 * _3087) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _3087) + _3050) * _3064))) * _3064;
        float _5069 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3099 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
        float _3100 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _3020 = (((_3086 * cbLight._m0[_3035].x) * _3099) * _3100) + _2914;
        _3022 = (((_3086 * cbLight._m0[_3035].y) * _3099) * _3100) + _2916;
        _3024 = (((_3086 * cbLight._m0[_3035].z) * _3099) * _3100) + _2918;
    }
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_2455.y == 0u)
    {
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.x;
        uint _3133 = uint((float(_3121.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1070) / _3122))) + floor(float(uint(cbSceneParam._m0[85u].x * _1069) / _3122)));
        float _3143 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3144 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        uint _3147 = uint(isnan(14.0) ? _3144 : (isnan(_3144) ? 14.0 : min(_3144, 14.0)));
        uvec4 _3152 = texelFetch(g_lightClusterGridBuffer, int(((_3147 << 2u) + (_3133 << 6u)) >> 2u));
        uint _3153 = _3152.x;
        uint _3154 = _3121.z;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((((1u << ((_3154 >> 4u) & 15u)) + 4294967295u) & _3153) == 0u) || ((_3154 & 240u) == 0u))
        {
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
        }
        else
        {
            float _3234;
            float _3236;
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            uint _3392 = 0u;
            uint _3401;
            bool _3402;
            for (;;)
            {
                _3401 = texelFetch(g_lightClassification, int((((_3147 << 5u) + (_3133 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                _3402 = _3401 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3402)
                {
                    frontier_phi_71_pred = _3391;
                    frontier_phi_71_pred_1 = _3390;
                    frontier_phi_71_pred_2 = _3389;
                    frontier_phi_71_pred_3 = _3388;
                    frontier_phi_71_pred_4 = _3387;
                    frontier_phi_71_pred_5 = _3386;
                }
                else
                {
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    uint _3537;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3401;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    for (;;)
                    {
                        uint _3541 = uint(findLSB(_3537)) + (_3392 << 5u);
                        uint _3538 = (_3537 + 4294967295u) & _3537;
                        uint _3543 = _3541 * 48u;
                        vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3543)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 3u)).x));
                        uint _3563 = (_3541 * 48u) + 4u;
                        vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3563)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 3u)).x));
                        uint _3582 = (_3541 * 48u) + 8u;
                        vec3 _3593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3582)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 2u)).x));
                        float _3597 = _3557.x - _2231;
                        float _3598 = _3557.y - _2232;
                        float _3599 = _3557.z - _2233;
                        float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                        float _3603 = inversesqrt(_3600);
                        float _3604 = _3603 * _3597;
                        float _3605 = _3603 * _3598;
                        float _3606 = _3603 * _3599;
                        float _3607 = dot(vec3(_1088, _1091, _1094), vec3(_3604, _3605, _3606));
                        float _3612 = 1.0 - (_3600 * _3557.w);
                        float _5095 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3613 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3614 = sqrt(_3600) * _3576.w;
                        float _3617 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                        float _3618 = _3617 * _3617;
                        float _3621 = ((1.0 - _3618) * _3607) + _3618;
                        float _3624 = _3614 * _3614;
                        float _3628 = ((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3613) / ((_3624 * 0.699999988079071044921875) + 1.0);
                        float _3632 = (-0.0) - _2231;
                        float _3633 = (-0.0) - _2232;
                        float _3634 = (-0.0) - _2233;
                        float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                        float _3639 = _3638 * _3632;
                        float _3640 = _3638 * _3633;
                        float _3641 = _3638 * _3634;
                        float _3648 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                        float _3649 = 1.0 - _1148;
                        float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                        float _3657 = _3656 * _3656;
                        float _3658 = _3657 * _3657;
                        float _3659 = _3639 + _3604;
                        float _3660 = _3640 + _3605;
                        float _3661 = _3641 + _3606;
                        float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                        float _3669 = dot(vec3(_1088, _1091, _1094), vec3(_3639, _3640, _3641));
                        float _5111 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3672 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3673 = dot(vec3(_1088, _1091, _1094), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                        float _5122 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                        float _3676 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                        float _3681 = _3617 * _3657;
                        float _3682 = _3681 * _3681;
                        float _3685 = ((1.0 - _3682) * _3607) + _3682;
                        float _5133 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                        float _3686 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3687 = 1.0 - _3657;
                        float _3697 = (0.5 / (((_3686 * ((_3672 * _3687) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3686 * _3687) + _3657) * _3672))) * _3686;
                        float _5144 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3708 = (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3680 * _3680) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125))) * _3613;
                        _3461 = (_3628 * _3576.x) + _3534;
                        _3462 = (_3628 * _3576.y) + _3535;
                        _3463 = (_3628 * _3576.z) + _3536;
                        _3458 = (_3708 * _3593.x) + _3531;
                        _3459 = (_3708 * _3593.y) + _3532;
                        _3460 = (_3708 * _3593.z) + _3533;
                        if (_3538 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3538;
                        }
                    }
                    frontier_phi_71_pred = _3463;
                    frontier_phi_71_pred_1 = _3462;
                    frontier_phi_71_pred_2 = _3461;
                    frontier_phi_71_pred_3 = _3460;
                    frontier_phi_71_pred_4 = _3459;
                    frontier_phi_71_pred_5 = _3458;
                }
                _3244 = frontier_phi_71_pred;
                _3242 = frontier_phi_71_pred_1;
                _3240 = frontier_phi_71_pred_2;
                _3238 = frontier_phi_71_pred_3;
                _3236 = frontier_phi_71_pred_4;
                _3234 = frontier_phi_71_pred_5;
                uint _3393 = _3392 + 1u;
                if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3386 = _3234;
                    _3387 = _3236;
                    _3388 = _3238;
                    _3389 = _3240;
                    _3390 = _3242;
                    _3391 = _3244;
                    _3392 = _3393;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
        }
        uvec4 _3247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3248 = _3247.z;
        uint _3250 = (_3248 >> 8u) & 15u;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        float _3364;
        if (((4294967295u << _3250) & _3153) == 0u)
        {
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
            _3360 = _3239;
            _3362 = _3241;
            _3364 = _3243;
        }
        else
        {
            float _3379 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _3380 = _3379 * _2231;
            float _3381 = _3379 * _2232;
            float _3382 = _3379 * _2233;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3250 < ((_3248 >> 12u) & 15u))
            {
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3365;
                float _3514 = _3233;
                float _3515 = _3235;
                float _3516 = _3237;
                float _3517 = _3239;
                float _3518 = _3241;
                float _3519 = _3243;
                uint _3520 = _3250;
                uint _3529;
                bool _3530;
                for (;;)
                {
                    _3529 = texelFetch(g_lightClassification, int((((_3147 << 5u) + (_3133 << 9u)) + (_3520 << 2u)) >> 2u)).x;
                    _3530 = _3529 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3530)
                    {
                        frontier_phi_82_pred = _3519;
                        frontier_phi_82_pred_1 = _3518;
                        frontier_phi_82_pred_2 = _3517;
                        frontier_phi_82_pred_3 = _3516;
                        frontier_phi_82_pred_4 = _3515;
                        frontier_phi_82_pred_5 = _3514;
                    }
                    else
                    {
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        uint _3741 = _3529;
                        uint _3742;
                        vec4 _3767;
                        float _3768;
                        vec4 _3783;
                        vec3 _3795;
                        vec4 _3810;
                        vec4 _3825;
                        float _3871;
                        bool _3872;
                        for (;;)
                        {
                            uint _3752 = ((_3520 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3741));
                            _3742 = (_3741 + 4294967295u) & _3741;
                            uint _3754 = _3752 * 40u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            _3768 = _3767.w;
                            uint _3770 = (_3752 * 40u) + 4u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3752 * 40u) + 8u;
                            _3795 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x));
                            uint _3797 = (_3752 * 40u) + 16u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3812 = (_3752 * 40u) + 20u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            uint _3827 = (_3752 * 40u) + 24u;
                            vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3846 = (_3752 * 40u) + 28u;
                            vec4 _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            _3871 = fma(_2233, _3859.z, fma(_2232, _3859.y, _3859.x * _2231)) + _3859.w;
                            _3872 = !((fma(_2233, _3840.z, fma(_2232, _3840.y, _3840.x * _2231)) + _3840.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3872)
                            {
                                float _3899 = _3767.x - _2231;
                                float _3900 = _3767.y - _2232;
                                float _3901 = _3767.z - _2233;
                                float _3902 = dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901));
                                float _3905 = inversesqrt(_3902);
                                float _3906 = _3905 * _3899;
                                float _3907 = _3905 * _3900;
                                float _3908 = _3905 * _3901;
                                float _3912 = 1.0 - (_3902 / (_3768 * _3768));
                                float _5155 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3917 = sqrt(_3902) * _3783.w;
                                float _3919 = 1.39999997615814208984375 / (_3917 + 1.39999997615814208984375);
                                float _3920 = _3919 * _3919;
                                float _3923 = ((1.0 - _3920) * dot(vec3(_3906, _3907, _3908), vec3(_1088, _1091, _1094))) + _3920;
                                float _3926 = _3917 * _3917;
                                float _3930 = (fma(_2233, _3810.z, fma(_2232, _3810.y, _3810.x * _2231)) + _3810.w) / _3871;
                                float _3931 = (fma(_2233, _3825.z, fma(_2232, _3825.y, _3825.x * _2231)) + _3825.w) / _3871;
                                float _3935 = 1.0 - dot(vec2(_3930, _3931), vec2(_3930, _3931));
                                float _5171 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3937 = _3936 * (((isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0))) * _3913) / ((_3926 * 0.699999988079071044921875) + 1.0));
                                float _3949 = exp2(log2(1.0 / ((_3926 * 3.5) + 5.0)) * 0.25);
                                float _3950 = 1.0 - _1148;
                                float _3957 = sqrt(1.0 - ((1.0 - (_3950 * _3950)) * (1.0 - (_3949 * _3949))));
                                float _3958 = _3957 * _3957;
                                float _3959 = _3958 * _3958;
                                float _3960 = _3906 - _3380;
                                float _3961 = _3907 - _3381;
                                float _3962 = _3908 - _3382;
                                float _3966 = inversesqrt(dot(vec3(_3960, _3961, _3962), vec3(_3960, _3961, _3962)));
                                float _3970 = dot(vec3(_1088, _1091, _1094), vec3((-0.0) - _3380, (-0.0) - _3381, (-0.0) - _3382));
                                float _5182 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _3974 = dot(vec3(_1088, _1091, _1094), vec3(_3966 * _3960, _3966 * _3961, _3966 * _3962));
                                float _5193 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3977 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _3981 = ((_3977 * _3977) * (_3959 + (-1.0))) + 1.0;
                                float _3982 = _3919 * _3958;
                                float _3983 = _3982 * _3982;
                                float _3989 = ((1.0 - _3983) * dot(vec3(_1088, _1091, _1094), vec3(_3906, _3907, _3908))) + _3983;
                                float _5204 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3990 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _3991 = 1.0 - _3958;
                                float _4001 = (0.5 / (((_3990 * ((_3973 * _3991) + _3958)) + 9.9999999392252902907785028219223e-09) + (((_3990 * _3991) + _3958) * _3973))) * _3990;
                                float _5215 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4011 = (_3936 * _3913) * (((_3959 * 3.1415927410125732421875) * (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0)))) / ((_3981 * _3981) * ((_3926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3937 * _3783.z;
                                frontier_phi_88_pred_1 = _3937 * _3783.y;
                                frontier_phi_88_pred_2 = _3937 * _3783.x;
                                frontier_phi_88_pred_3 = _4011 * _3795.z;
                                frontier_phi_88_pred_4 = _4011 * _3795.y;
                                frontier_phi_88_pred_5 = _4011 * _3795.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4020 = frontier_phi_88_pred;
                            _4019 = frontier_phi_88_pred_1;
                            _4018 = frontier_phi_88_pred_2;
                            _4017 = frontier_phi_88_pred_3;
                            _4016 = frontier_phi_88_pred_4;
                            _4015 = frontier_phi_88_pred_5;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            if (_3742 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3742;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3727;
                        frontier_phi_82_pred_1 = _3726;
                        frontier_phi_82_pred_2 = _3725;
                        frontier_phi_82_pred_3 = _3724;
                        frontier_phi_82_pred_4 = _3723;
                        frontier_phi_82_pred_5 = _3722;
                    }
                    _3365 = frontier_phi_82_pred;
                    _3363 = frontier_phi_82_pred_1;
                    _3361 = frontier_phi_82_pred_2;
                    _3359 = frontier_phi_82_pred_3;
                    _3357 = frontier_phi_82_pred_4;
                    _3355 = frontier_phi_82_pred_5;
                    uint _3521 = _3520 + 1u;
                    if (_3521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3514 = _3355;
                        _3515 = _3357;
                        _3516 = _3359;
                        _3517 = _3361;
                        _3518 = _3363;
                        _3519 = _3365;
                        _3520 = _3521;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3361;
                frontier_phi_63_64_ladder_1 = _3365;
                frontier_phi_63_64_ladder_2 = _3363;
                frontier_phi_63_64_ladder_3 = _3359;
                frontier_phi_63_64_ladder_4 = _3357;
                frontier_phi_63_64_ladder_5 = _3355;
            }
            else
            {
                frontier_phi_63_64_ladder = _3239;
                frontier_phi_63_64_ladder_1 = _3243;
                frontier_phi_63_64_ladder_2 = _3241;
                frontier_phi_63_64_ladder_3 = _3237;
                frontier_phi_63_64_ladder_4 = _3235;
                frontier_phi_63_64_ladder_5 = _3233;
            }
            _3354 = frontier_phi_63_64_ladder_5;
            _3356 = frontier_phi_63_64_ladder_4;
            _3358 = frontier_phi_63_64_ladder_3;
            _3360 = frontier_phi_63_64_ladder;
            _3362 = frontier_phi_63_64_ladder_2;
            _3364 = frontier_phi_63_64_ladder_1;
        }
        float _3369 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _3166 = (_3369 * _3360) + _2697;
        _3168 = (_3369 * _3362) + _2699;
        _3170 = (_3369 * _3364) + _2701;
        _3172 = ((_3354 * 0.039999999105930328369140625) * _3369) + _3020;
        _3174 = ((_3356 * 0.039999999105930328369140625) * _3369) + _3022;
        _3176 = ((_3358 * 0.039999999105930328369140625) * _3369) + _3024;
    }
    else
    {
        _3166 = _2697;
        _3168 = _2699;
        _3170 = _2701;
        _3172 = _3020;
        _3174 = _3022;
        _3176 = _3024;
    }
    float _5231 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _5242 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _5253 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _3193 = ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3166 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1132))) + ((_3172 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _3194 = ((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3168 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_3174 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _3195 = ((isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3170 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_3176 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    uint _3196 = _293 + 6u;
    float _3204 = _1069 / cbSceneParam._m0[86u].x;
    float _3205 = _1070 / cbSceneParam._m0[86u].y;
    vec4 _3219 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3204, _3205, (log2((isnan(cbSceneParam._m0[77u].w) ? _992 : (isnan(_992) ? cbSceneParam._m0[77u].w : min(_992, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3221 = _3219.x;
    float _3222 = _3219.y;
    float _3223 = _3219.z;
    float _3224 = _3219.w;
    float _3296;
    float _3298;
    float _3300;
    float _3302;
    if (_992 > cbSceneParam._m0[78u].w)
    {
        float _3258 = isnan(_992) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _992 : min(cbSceneParam._m0[80u].w, _992));
        float _3259 = _3258 / _992;
        float _3270 = _3259 * _1042;
        float _3271 = _1043 * _3259;
        float _3272 = (-0.0) - _3271;
        float _3274 = _3259 * _1044;
        float _3276 = (cbSceneParam._m0[77u].w * _3272) / _3258;
        float _3277 = _3276 + cbSceneParam._m0[79u].w;
        float _3278 = cbSceneParam._m0[79u].w - _3271;
        float _3284 = sqrt(((_3270 * _3270) + (_3271 * _3271)) + (_3274 * _3274));
        float _3287 = (1.0 - (cbSceneParam._m0[77u].w / _3258)) * _3284;
        float _3292 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3294 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3471;
        if (abs((_3272 - _3276) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3471 = ((((_3277 > 0.0) ? exp2(_3292 * _3277) : (2.0 - exp2(_3294 * _3277))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3287;
        }
        else
        {
            float _3415 = 1.0 / cbSceneParam._m0[80u].x;
            float _3416 = isnan(_3278) ? _3277 : (isnan(_3277) ? _3278 : max(_3277, _3278));
            float _3417 = isnan(_3278) ? _3277 : (isnan(_3277) ? _3278 : min(_3277, _3278));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            float _3427 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : min(_3417, 0.0));
            _3471 = ((abs(_3284 / _3272) * cbSceneParam._m0[80u].y) * ((((_3426 - _3427) * 2.0) - ((exp2(_3292 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0)))) - exp2(_3292 * (isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))))) * _3415)) - ((exp2(_3294 * _3426) - exp2(_3294 * _3427)) * _3415))) + (_3287 * cbSceneParam._m0[80u].z);
        }
        vec4 _3473 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3204, _3205, 1.0), 0.0);
        float _3482 = exp2((_3471 * (-1.44269502162933349609375)) * (1.0 - _3473.w));
        float _3483 = log2(_3482);
        float _3499 = log2(_3224);
        _3296 = (exp2(_3499 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].x)) * _3473.x) / cbSceneParam._m0[78u].x)) + _3221;
        _3298 = (exp2(_3499 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].y)) * _3473.y) / cbSceneParam._m0[78u].y)) + _3222;
        _3300 = (exp2(_3499 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].z)) * _3473.z) / cbSceneParam._m0[78u].z)) + _3223;
        _3302 = _3482 * _3224;
    }
    else
    {
        _3296 = _3221;
        _3298 = _3222;
        _3300 = _3223;
        _3302 = _3224;
    }
    bool _3509;
    vec4 _3312;
    vec4 _3334;
    float _3336;
    float _3340;
    float _3341;
    float _3342;
    float _3343;
    bool _3353;
    for (;;)
    {
        _3312 = cbMatDynParam._m0[0u];
        float _3314 = roundEven(_3312.y);
        bool _3315 = _3314 == 3.0;
        float _3316 = log2(_3302);
        float _3323 = exp2(_3316 * cbSceneParam._m0[78u].x) * _3193;
        float _3324 = exp2(_3316 * cbSceneParam._m0[78u].y) * _3194;
        float _3325 = exp2(_3316 * cbSceneParam._m0[78u].z) * _3195;
        float _3332 = _1058 + (-0.5);
        _3334 = cbMtdParam._m0[1u];
        _3336 = _3334.y * _3332;
        float _3339 = (_3314 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3340 = _3339 * (_3315 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3296)));
        _3341 = _3339 * (_3315 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3298)));
        _3342 = _3339 * (_3315 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3300)));
        _3343 = _3332 * 0.999000012874603271484375;
        _3353 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3353)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3343) < 0.5)
            {
                _3509 = true;
                break;
            }
        }
        uint _3450 = _1107 + uint(_3312.w);
        if ((cbInstanceData._m0[_3450].w < 1.0) && ((cbInstanceData._m0[_3450].w + _3343) < 0.5))
        {
            _3509 = true;
            break;
        }
        if ((_3336 + 1.0) < _3334.x)
        {
            _3509 = true;
            break;
        }
        _3509 = false;
        break;
    }
    float _3713;
    if (_3509)
    {
        discard_state = true;
        _3713 = 0.0;
    }
    else
    {
        _3713 = cbInstanceData._m0[_3196].w;
    }
    SV_Target.x = _3340;
    SV_Target.y = _3341;
    SV_Target.z = _3342;
    SV_Target.w = _3713;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3196].w;
    discard_exit();
}


