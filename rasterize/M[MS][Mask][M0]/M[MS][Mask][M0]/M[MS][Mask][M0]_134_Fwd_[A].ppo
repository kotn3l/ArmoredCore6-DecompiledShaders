#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1512;
float _3868;
float _3869;
float _3870;
float _3871;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3880 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3891 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3902 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3913 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _486 = (_479 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _487 = (_479 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _488 = (_479 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _559 = (_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486;
    float _560 = (_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487;
    float _561 = (_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _598 = _596.x;
    float _608 = dot(vec4(_598, _596.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _620 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _409.z) * 2.0) - ((((_598 - _608) * cbMtdParam._m0[24u].z) + _608) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3935 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _631 = (_338.x * cbMtdParam._m0[9u].x) * ((_621 * ((_579.x * cbMtdParam._m0[14u].x) - _559)) + _559);
    float _632 = (_338.y * cbMtdParam._m0[9u].y) * ((_621 * ((_579.y * cbMtdParam._m0[14u].y) - _560)) + _560);
    float _633 = (_338.z * cbMtdParam._m0[9u].z) * ((_621 * ((_579.z * cbMtdParam._m0[14u].z) - _561)) + _561);
    float _637 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _631;
    float _640 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _632;
    float _643 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _633;
    float _651 = (((_631 - _637) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _637) * 4.55000019073486328125;
    float _653 = (((_632 - _640) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _640) * 4.55000019073486328125;
    float _655 = (((_633 - _643) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _643) * 4.55000019073486328125;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _736 = _732.z;
    float _743 = ((_715.x - _734) * _479) + _734;
    float _744 = ((_715.y - _735) * _479) + _735;
    float _745 = ((_715.z - _736) * _479) + _736;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _768 = ((_757.x - _743) * _552) + _743;
    float _769 = ((_757.y - _744) * _552) + _744;
    float _770 = ((_757.z - _745) * _552) + _745;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _795 = ((_782.z - _770) * _621) + _770;
    float _798 = ((((_782.x - _768) * _621) + _768) * 2.0) + (-1.0);
    float _799 = ((((_782.y - _769) * _621) + _769) * 2.0) + (-1.0);
    float _800 = dot(vec2(_798, _799), vec2(_798, _799));
    float _3946 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _805 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _844 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _846 = _844.x;
    float _847 = 1.0 - _846;
    float _860 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_846 - _847) * cbMtdParam._m0[24u].w) + _847) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _861 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _868 = (_861 * ((_673.x * cbMtdParam._m0[18u].x) - _651)) + _651;
    float _869 = (_861 * ((_673.y * cbMtdParam._m0[18u].y) - _653)) + _653;
    float _870 = (_861 * ((_673.z * cbMtdParam._m0[18u].z) - _655)) + _655;
    float _875 = (((_692.z - _795) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _795;
    float _879 = ((_819.z - _875) * cbMtdParam._m0[19u].w) + _875;
    vec4 _892 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _899 = (_892.x * 2.0) + (-1.0);
    float _900 = (_892.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _3968 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _909 = (_861 * (_892.z - _879)) + _879;
    float _918 = (_798 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_692.x * 2.0) + (-1.0)))) + (((_819.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _919 = (_799 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_692.y * 2.0) + (-1.0)))) + (((_819.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _931 = (((_899 - _918) + (cbMtdParam._m0[21u].x * _918)) * _861) + _918;
    float _932 = (((_900 - _919) + (cbMtdParam._m0[21u].x * _919)) * _861) + _919;
    float _933 = (_861 * (sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _805)) + _805;
    float _937 = cbMtdParam._m0[22u].x + _819.w;
    float _940 = fma(_933, _248 * NORMAL.x, fma(_932, _255 * TANGENT.x, (_241 * _233) * _931));
    float _943 = fma(_933, _248 * NORMAL.y, fma(_932, _255 * TANGENT.y, (_241 * _234) * _931));
    float _946 = fma(_933, _248 * NORMAL.z, fma(_932, _255 * TANGENT.z, (_241 * _235) * _931));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _3979 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _954 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4001 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4012 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4023 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _972 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1193 = sqrt(((_1023 * _1023) + (_1024 * _1024)) + (_1025 * _1025));
        float _1199 = (cbMatDynParam._m0[5u].x * _1193) + cbMatDynParam._m0[5u].y;
        float _4034 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1204 = (cbMatDynParam._m0[5u].z * _1193) + cbMatDynParam._m0[5u].w;
        float _4045 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) - _1200)) + _1200) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1050 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1051 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1069 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1072 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1075 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1088 = _282 + 9u;
    uint _1089 = _1088 + uint(cbMatDynParam._m0[0u].w);
    float _1095 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_1089].x;
    float _1096 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1089].y;
    float _1097 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1089].z;
    float _4056 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    vec4 _1109 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1050, cbSceneParam._m0[86u].y * _1051));
    float _1113 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _1109.x;
    float _1114 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1117 = _1114 * 2.0;
    float _1121 = (_1117 * _951) - _1030;
    float _1122 = (_1117 * _952) - _1031;
    float _1123 = (_1117 * _953) - _1032;
    float _1127 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4089 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1129 = sqrt(_954);
    float _1142 = exp2((_1129 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1129 * 3.0));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1511;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1236 = fma(_1182, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174));
        float _1240 = fma(_1182, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174));
        float _1244 = fma(_1182, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174));
        float _1269 = _1174 + _951;
        float _1270 = _1178 + _952;
        float _1271 = _1182 + _953;
        float _1281 = fma(_1271, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269)) - _1236;
        float _1282 = fma(_1271, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269)) - _1240;
        float _1283 = fma(_1271, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269)) - _1244;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1236 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1240 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[34u].z) + ((((((_1244 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1339 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1305.x + (-0.5));
        float _1341 = _1339 * (_1305.y + (-0.5));
        float _1342 = _1339 * (_1305.z + (-0.5));
        float _1349 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1312.x + (-0.5));
        float _1351 = _1349 * (_1312.y + (-0.5));
        float _1352 = _1349 * (_1312.z + (-0.5));
        float _1359 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1319.x + (-0.5));
        float _1361 = _1359 * (_1319.y + (-0.5));
        float _1362 = _1359 * (_1319.z + (-0.5));
        float _1369 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1326.x + (-0.5));
        float _1371 = _1369 * (_1326.y + (-0.5));
        float _1372 = _1369 * (_1326.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1393 = (dot(vec3(_951, _952, _953), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1403 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4137 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1405 + 1.0))) + _1410) * _1373;
        float _1420 = _1341 * 0.5;
        float _1421 = _1351 * 0.5;
        float _1422 = _1361 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_951, _952, _953), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4170 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1447 + 1.0))) + _1452) * _1374;
        float _1462 = _1342 * 0.5;
        float _1463 = _1352 * 0.5;
        float _1464 = _1362 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_951, _952, _953), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4203 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1489 + 1.0))) + _1494) * _1375;
        _1511 = _1342;
        _1513 = _1341;
        _1514 = _1340;
        _1515 = _1352;
        _1516 = _1351;
        _1517 = _1350;
        _1518 = _1362;
        _1519 = _1361;
        _1520 = _1360;
        _1521 = _1375;
        _1522 = _1374;
        _1523 = _1373;
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1512;
        _1513 = _1512;
        _1514 = _1512;
        _1515 = _1512;
        _1516 = _1512;
        _1517 = _1512;
        _1518 = _1512;
        _1519 = _1512;
        _1520 = _1512;
        _1521 = _1512;
        _1522 = _1512;
        _1523 = _1512;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1552 = fma(_1182, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174));
        float _1556 = fma(_1182, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174));
        float _1560 = fma(_1182, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174));
        float _1583 = _1174 + _951;
        float _1584 = _1178 + _952;
        float _1585 = _1182 + _953;
        float _1595 = fma(_1585, cbModelParam._m0[30u].z, fma(_1584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1583)) - _1552;
        float _1596 = fma(_1585, cbModelParam._m0[31u].z, fma(_1584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1583)) - _1556;
        float _1597 = fma(_1585, cbModelParam._m0[32u].z, fma(_1584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1583)) - _1560;
        float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
        float _1614 = ((_1601 * _1595) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1552 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1601 * _1596) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1556 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1601 * _1597) / cbModelParam._m0[35u].z) + ((((((_1560 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        float _1651 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1618.x + (-0.5));
        float _1653 = _1651 * (_1618.y + (-0.5));
        float _1654 = _1651 * (_1618.z + (-0.5));
        float _1661 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1625.x + (-0.5));
        float _1663 = _1661 * (_1625.y + (-0.5));
        float _1664 = _1661 * (_1625.z + (-0.5));
        float _1671 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1632.x + (-0.5));
        float _1673 = _1671 * (_1632.y + (-0.5));
        float _1674 = _1671 * (_1632.z + (-0.5));
        float _1681 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1639.x + (-0.5));
        float _1683 = _1681 * (_1639.y + (-0.5));
        float _1684 = _1681 * (_1639.z + (-0.5));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1652 * 0.5;
        float _1689 = _1662 * 0.5;
        float _1690 = _1672 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_951, _952, _953), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4266 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1715 + 1.0))) + _1720) * _1685;
        float _1730 = _1653 * 0.5;
        float _1731 = _1663 * 0.5;
        float _1732 = _1673 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_951, _952, _953), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4299 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1757 + 1.0))) + _1762) * _1686;
        float _1772 = _1654 * 0.5;
        float _1773 = _1664 * 0.5;
        float _1774 = _1674 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_951, _952, _953), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4332 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1799 + 1.0))) + _1804) * _1687;
        _1821 = _1654;
        _1822 = _1653;
        _1823 = _1652;
        _1824 = _1664;
        _1825 = _1663;
        _1826 = _1662;
        _1827 = _1674;
        _1828 = _1673;
        _1829 = _1672;
        _1830 = _1687;
        _1831 = _1686;
        _1832 = _1685;
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = _1512;
        _1822 = _1512;
        _1823 = _1512;
        _1824 = _1512;
        _1825 = _1512;
        _1826 = _1512;
        _1827 = _1512;
        _1828 = _1512;
        _1829 = _1512;
        _1830 = _1512;
        _1831 = _1512;
        _1832 = _1512;
        _1833 = 0.0;
        _1834 = 0.0;
        _1835 = 0.0;
    }
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1524)) + _1524;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1525)) + _1525;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1526)) + _1526;
    float _1868 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1845));
    float _1889 = _1121 * 0.5;
    float _1890 = _1122 * 0.5;
    float _1891 = _1123 * 0.5;
    float _1892 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1895 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1898 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1932;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1905 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1511, _1515, _1518, _1521));
        float _1909 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1913 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1920 = dot(vec4(cbModelParam._m0[39u]), vec4(_1889, _1890, _1891, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1943;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1934 = dot(vec4(cbModelParam._m0[40u]), vec4(_1889, _1890, _1891, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1947 = (_1943 * cbModelParam._m0[1u].x) + (_1932 * (1.0 - cbModelParam._m0[1u].x));
    float _1957 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1957 : min(cbModelParam._m0[25u].z, _1957));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2005 = fma(_1182, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174)) + cbModelParam._m0[13u].w;
        float _2009 = fma(_1182, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174)) + cbModelParam._m0[14u].w;
        float _2013 = fma(_1182, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174)) + cbModelParam._m0[15u].w;
        float _2016 = fma(_1123, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121));
        float _2019 = fma(_1123, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121));
        float _2022 = fma(_1123, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121));
        float _2050;
        if (_2016 > 0.0)
        {
            _2050 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2050 = frontier_phi_17_15_ladder;
        }
        float _2250;
        if (_2019 > 0.0)
        {
            _2250 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2250 = frontier_phi_26_22_ladder;
        }
        float _2493;
        if (_2022 > 0.0)
        {
            _2493 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2493 = frontier_phi_38_33_ladder;
        }
        float _2495 = isnan(_2250) ? _2050 : (isnan(_2050) ? _2250 : min(_2050, _2250));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _2016) + _2005;
        float _2501 = (_2496 * _2019) + _2009;
        float _2502 = (_2496 * _2022) + _2013;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2503;
        float _2507 = _2503 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 > _2507) || ((_2501 < _2505) || ((_2500 < _2505) || (_2500 > _2507))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2502, cbModelParam._m0[9u].z, fma(_2501, cbModelParam._m0[9u].y, _2500 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2502, cbModelParam._m0[10u].z, fma(_2501, cbModelParam._m0[10u].y, _2500 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2502, cbModelParam._m0[11u].z, fma(_2501, cbModelParam._m0[11u].y, _2500 * cbModelParam._m0[11u].x))), _1958);
            frontier_phi_16_38_ladder = _2626.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2626.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2626.x * cbModelParam._m0[1u].y;
        }
        _2038 = frontier_phi_16_38_ladder_2;
        _2040 = frontier_phi_16_38_ladder_1;
        _2042 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1121, _1122, _1123), _1958);
        _2038 = _2026.x * cbModelParam._m0[1u].y;
        _2040 = _2026.y * cbModelParam._m0[1u].y;
        _2042 = _2026.z * cbModelParam._m0[1u].y;
    }
    float _2046 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2046 : min(cbModelParam._m0[25u].w, _2046));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2100 = fma(_1182, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174)) + cbModelParam._m0[21u].w;
        float _2104 = fma(_1182, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174)) + cbModelParam._m0[22u].w;
        float _2108 = fma(_1182, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174)) + cbModelParam._m0[23u].w;
        float _2111 = fma(_1123, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121));
        float _2114 = fma(_1123, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121));
        float _2117 = fma(_1123, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121));
        float _2255;
        if (_2111 > 0.0)
        {
            _2255 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2255 = frontier_phi_28_24_ladder;
        }
        float _2520;
        if (_2114 > 0.0)
        {
            _2520 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2520 = frontier_phi_40_35_ladder;
        }
        float _2725;
        if (_2117 > 0.0)
        {
            _2725 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2725 = frontier_phi_49_46_ladder;
        }
        float _2727 = isnan(_2520) ? _2255 : (isnan(_2255) ? _2520 : min(_2255, _2520));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _2111) + _2100;
        float _2733 = (_2728 * _2114) + _2104;
        float _2734 = (_2728 * _2117) + _2108;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _2047);
            frontier_phi_25_49_ladder = _2933.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2933.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2933.x * cbModelParam._m0[1u].z;
        }
        _2136 = frontier_phi_25_49_ladder_2;
        _2138 = frontier_phi_25_49_ladder_1;
        _2140 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2120 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1121, _1122, _1123), _2047);
        _2136 = _2120.x * cbModelParam._m0[1u].z;
        _2138 = _2120.y * cbModelParam._m0[1u].z;
        _2140 = _2120.z * cbModelParam._m0[1u].z;
    }
    float _2152 = ((((1.0 - _1142) * ((_1129 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1142 * _1129)) * _1113;
    float _2153 = _2152 * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2154 = _2152 * ((cbModelParam._m0[1u].w * (_2138 - _2040)) + _2040);
    float _2155 = _2152 * ((cbModelParam._m0[1u].w * (_2140 - _2042)) + _2042);
    float _2158 = fma(_2155, cbSceneParam._m0[89u].z, fma(_2154, cbSceneParam._m0[89u].y, _2153 * cbSceneParam._m0[89u].x));
    float _2161 = fma(_2155, cbSceneParam._m0[90u].z, fma(_2154, cbSceneParam._m0[90u].y, _2153 * cbSceneParam._m0[90u].x));
    float _2164 = fma(_2155, cbSceneParam._m0[91u].z, fma(_2154, cbSceneParam._m0[91u].y, _2153 * cbSceneParam._m0[91u].x));
    uvec4 _2174 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2176 = _2174.x * 14u;
    uint _2177 = _2176 + 13u;
    float _2184 = _1113 + (-1.0);
    float _2189 = (cbLight._m0[_2177].x * _2184) + 1.0;
    float _2190 = (cbLight._m0[_2177].y * _2184) + 1.0;
    float _2191 = (cbLight._m0[_2177].z * _2184) + 1.0;
    float _2192 = (cbLight._m0[_2177].w * _2184) + 1.0;
    uint _2193 = _2176 + 5u;
    float _2199 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    uint _2203 = _2176 + 4u;
    float _2209 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2213 = _2176 | 1u;
    float _2224 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_951, _952, _953));
    float _2227 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_951, _952, _953));
    float _4468 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _4479 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2232 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2234 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2241 = ((cbLight._m0[_2193].x * _2199) * _2234) + ((cbLight._m0[_2203].x * _2209) * _2232);
    float _2242 = ((_2199 * cbLight._m0[_2193].y) * _2234) + ((_2209 * cbLight._m0[_2203].y) * _2232);
    float _2243 = ((_2199 * cbLight._m0[_2193].z) * _2234) + ((_2209 * cbLight._m0[_2203].z) * _2232);
    uvec4 _2247 = floatBitsToUint(cbLight._m0[_2176 + 12u]);
    bool _2249 = _2247.x == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2249)
    {
        _2260 = _2241;
        _2262 = _2242;
        _2264 = _2243;
    }
    else
    {
        uint _2268 = _2176 + 6u;
        float _2284 = (dot(vec3(cbLight._m0[_2176 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4490 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2287 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2260 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2241;
        _2262 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2242;
        _2264 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2243;
    }
    bool _2267 = _2247.y == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2267)
    {
        _2305 = _2260;
        _2307 = _2262;
        _2309 = _2264;
    }
    else
    {
        uint _2464 = _2176 + 7u;
        float _2480 = (dot(vec3(cbLight._m0[_2176 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2481 = _2480 * _2480;
        float _4506 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2482 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2483 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2305 = (((cbLight._m0[_2464].x * 0.3183098733425140380859375) * _2482) * _2483) + _2260;
        _2307 = (((cbLight._m0[_2464].y * 0.3183098733425140380859375) * _2482) * _2483) + _2262;
        _2309 = (((cbLight._m0[_2464].z * 0.3183098733425140380859375) * _2482) * _2483) + _2264;
    }
    uint _2312 = _2176 + 8u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _954) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2176].x + _1030;
    float _2328 = cbLight._m0[_2176].y + _1031;
    float _2329 = cbLight._m0[_2176].z + _1032;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2176].xyz));
    float _4522 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _2341 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2342 = dot(vec3(_951, _952, _953), vec3(_2334, _2335, _2336));
    float _4544 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2334, _2335, _2336));
    float _4555 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2326 * _2326;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2366 = 1.0 - _2326;
    float _2377 = (0.5 / (((_2341 * ((_2340 * _2366) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2366) + _2326) * _2340))) * _2340;
    float _4566 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    uint _2390 = _2176 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _954) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2213].x + _1030;
    float _2404 = cbLight._m0[_2213].y + _1031;
    float _2405 = cbLight._m0[_2213].z + _1032;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2213].xyz));
    float _4577 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2417 = dot(vec3(_951, _952, _953), vec3(_2410, _2411, _2412));
    float _4588 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2410, _2411, _2412));
    float _4599 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2438 = (exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2439 = 1.0 - _2402;
    float _2449 = (0.5 / (((_2341 * ((_2416 * _2439) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2439) + _2402) * _2416))) * _2416;
    float _4610 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2461 = (((_2438 * cbLight._m0[_2390].x) * _2451) * _2199) + (((_2365 * cbLight._m0[_2312].x) * _2379) * _2209);
    float _2462 = (((_2438 * cbLight._m0[_2390].y) * _2451) * _2199) + (((_2365 * cbLight._m0[_2312].y) * _2379) * _2209);
    float _2463 = (((_2438 * cbLight._m0[_2390].z) * _2451) * _2199) + (((_2365 * cbLight._m0[_2312].z) * _2379) * _2209);
    float _2525;
    float _2527;
    float _2529;
    if (_2249)
    {
        _2525 = _2461;
        _2527 = _2462;
        _2529 = _2463;
    }
    else
    {
        uint _2531 = _2176 + 2u;
        uint _2535 = _2176 + 10u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _954) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _1030;
        float _2552 = cbLight._m0[_2531].y + _1031;
        float _2553 = cbLight._m0[_2531].z + _1032;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2531].xyz));
        float _4621 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2565 = dot(vec3(_951, _952, _953), vec3(_2558, _2559, _2560));
        float _4632 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4643 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2587 = 1.0 - _2550;
        float _2597 = (0.5 / (((_2341 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2587) + _2550) * _2564))) * _2564;
        float _4654 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2525 = (((_2586 * cbLight._m0[_2535].x) * _2599) * _2600) + _2461;
        _2527 = (((_2586 * cbLight._m0[_2535].y) * _2599) * _2600) + _2462;
        _2529 = (((_2586 * cbLight._m0[_2535].z) * _2599) * _2600) + _2463;
    }
    float _2635;
    float _2637;
    float _2639;
    if (_2267)
    {
        _2635 = _2525;
        _2637 = _2527;
        _2639 = _2529;
    }
    else
    {
        uint _2646 = _2176 + 3u;
        uint _2650 = _2176 + 11u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _954) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _1030;
        float _2667 = cbLight._m0[_2646].y + _1031;
        float _2668 = cbLight._m0[_2646].z + _1032;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2646].xyz));
        float _4670 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2680 = dot(vec3(_951, _952, _953), vec3(_2673, _2674, _2675));
        float _4681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4692 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2701 = (exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2702 = 1.0 - _2665;
        float _2712 = (0.5 / (((_2341 * ((_2679 * _2702) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2702) + _2665) * _2679))) * _2679;
        float _4703 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2635 = (((_2701 * cbLight._m0[_2650].x) * _2714) * _2715) + _2525;
        _2637 = (((_2701 * cbLight._m0[_2650].y) * _2714) * _2715) + _2527;
        _2639 = (((_2701 * cbLight._m0[_2650].z) * _2714) * _2715) + _2529;
    }
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_2174.y == 0u)
    {
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2790;
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2790;
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2790;
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.x;
        uint _2817 = uint((float(_2805.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1051) / _2806))) + floor(float(uint(cbSceneParam._m0[85u].x * _1050) / _2806)));
        float _2827 = (log2(_2793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2828 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        uint _2831 = uint(isnan(14.0) ? _2828 : (isnan(_2828) ? 14.0 : min(_2828, 14.0)));
        uvec4 _2836 = texelFetch(g_lightClusterGridBuffer, int(((_2831 << 2u) + (_2817 << 6u)) >> 2u));
        uint _2837 = _2836.x;
        uint _2838 = _2805.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2838 >> 4u) & 15u)) + 4294967295u) & _2837) == 0u) || ((_2838 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            uint _3097 = 0u;
            uint _3106;
            bool _3107;
            for (;;)
            {
                _3106 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                _3107 = _3106 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3107)
                {
                    frontier_phi_66_pred = _3091;
                    frontier_phi_66_pred_1 = _3096;
                    frontier_phi_66_pred_2 = _3095;
                    frontier_phi_66_pred_3 = _3094;
                    frontier_phi_66_pred_4 = _3093;
                    frontier_phi_66_pred_5 = _3092;
                }
                else
                {
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    uint _3242;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3106;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3246 = uint(findLSB(_3242)) + (_3097 << 5u);
                        uint _3243 = (_3242 + 4294967295u) & _3242;
                        uint _3248 = _3246 * 48u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3268 = (_3246 * 48u) + 4u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3287 = (_3246 * 48u) + 8u;
                        vec3 _3298 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x));
                        float _3302 = _3262.x - _2791;
                        float _3303 = _3262.y - _2792;
                        float _3304 = _3262.z - _2793;
                        float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                        float _3308 = inversesqrt(_3305);
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3312 = dot(vec3(_1069, _1072, _1075), vec3(_3309, _3310, _3311));
                        float _3317 = 1.0 - (_3305 * _3262.w);
                        float _4729 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3319 = sqrt(_3305) * _3281.w;
                        float _3322 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3312) + _3323;
                        float _3329 = _3319 * _3319;
                        float _3333 = ((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3318) / ((_3329 * 0.699999988079071044921875) + 1.0);
                        float _3337 = (-0.0) - _2791;
                        float _3338 = (-0.0) - _2792;
                        float _3339 = (-0.0) - _2793;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3354 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                        float _3355 = 1.0 - _1129;
                        float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                        float _3363 = _3362 * _3362;
                        float _3364 = _3363 * _3363;
                        float _3365 = _3344 + _3309;
                        float _3366 = _3345 + _3310;
                        float _3367 = _3346 + _3311;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3375 = dot(vec3(_1069, _1072, _1075), vec3(_3344, _3345, _3346));
                        float _4745 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3379 = dot(vec3(_1069, _1072, _1075), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                        float _4756 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                        float _3387 = _3322 * _3363;
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3312) + _3388;
                        float _4767 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3393 = 1.0 - _3363;
                        float _3403 = (0.5 / (((_3392 * ((_3378 * _3393) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3363) * _3378))) * _3392;
                        float _4778 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3414 = (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3386 * _3386) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125))) * _3318;
                        _3166 = (_3333 * _3281.x) + _3239;
                        _3167 = (_3333 * _3281.y) + _3240;
                        _3168 = (_3333 * _3281.z) + _3241;
                        _3163 = (_3414 * _3298.x) + _3236;
                        _3164 = (_3414 * _3298.y) + _3237;
                        _3165 = (_3414 * _3298.z) + _3238;
                        if (_3243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3243;
                        }
                    }
                    frontier_phi_66_pred = _3163;
                    frontier_phi_66_pred_1 = _3168;
                    frontier_phi_66_pred_2 = _3167;
                    frontier_phi_66_pred_3 = _3166;
                    frontier_phi_66_pred_4 = _3165;
                    frontier_phi_66_pred_5 = _3164;
                }
                _2939 = frontier_phi_66_pred;
                _2949 = frontier_phi_66_pred_1;
                _2947 = frontier_phi_66_pred_2;
                _2945 = frontier_phi_66_pred_3;
                _2943 = frontier_phi_66_pred_4;
                _2941 = frontier_phi_66_pred_5;
                uint _3098 = _3097 + 1u;
                if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3091 = _2939;
                    _3092 = _2941;
                    _3093 = _2943;
                    _3094 = _2945;
                    _3095 = _2947;
                    _3096 = _2949;
                    _3097 = _3098;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((4294967295u << _2955) & _2837) == 0u)
        {
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
        }
        else
        {
            float _3084 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
            float _3085 = _3084 * _2791;
            float _3086 = _3084 * _2792;
            float _3087 = _3084 * _2793;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3219 = _2938;
                float _3220 = _2940;
                float _3221 = _2942;
                float _3222 = _2944;
                float _3223 = _2946;
                float _3224 = _2948;
                uint _3225 = _2955;
                uint _3234;
                bool _3235;
                for (;;)
                {
                    _3234 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                    _3235 = _3234 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3235)
                    {
                        frontier_phi_77_pred = _3224;
                        frontier_phi_77_pred_1 = _3223;
                        frontier_phi_77_pred_2 = _3222;
                        frontier_phi_77_pred_3 = _3221;
                        frontier_phi_77_pred_4 = _3220;
                        frontier_phi_77_pred_5 = _3219;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        uint _3447 = _3234;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3225 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_2793, _3565.z, fma(_2792, _3565.y, _3565.x * _2791)) + _3565.w;
                            _3578 = !((fma(_2793, _3546.z, fma(_2792, _3546.y, _3546.x * _2791)) + _3546.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _2791;
                                float _3606 = _3473.y - _2792;
                                float _3607 = _3473.z - _2793;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4789 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_1069, _1072, _1075))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_2793, _3516.z, fma(_2792, _3516.y, _3516.x * _2791)) + _3516.w) / _3577;
                                float _3637 = (fma(_2793, _3531.z, fma(_2792, _3531.y, _3531.x * _2791)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4805 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _1129;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3085;
                                float _3667 = _3613 - _3086;
                                float _3668 = _3614 - _3087;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3085, (-0.0) - _3086, (-0.0) - _3087));
                                float _4816 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3680 = dot(vec3(_1069, _1072, _1075), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4827 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_1069, _1072, _1075), vec3(_3612, _3613, _3614))) + _3689;
                                float _4838 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4849 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3643 * _3489.y;
                                frontier_phi_83_pred_1 = _3643 * _3489.x;
                                frontier_phi_83_pred_2 = _3717 * _3501.z;
                                frontier_phi_83_pred_3 = _3717 * _3501.y;
                                frontier_phi_83_pred_4 = _3717 * _3501.x;
                                frontier_phi_83_pred_5 = _3643 * _3489.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3725 = frontier_phi_83_pred;
                            _3724 = frontier_phi_83_pred_1;
                            _3723 = frontier_phi_83_pred_2;
                            _3722 = frontier_phi_83_pred_3;
                            _3721 = frontier_phi_83_pred_4;
                            _3726 = frontier_phi_83_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3433;
                        frontier_phi_77_pred_1 = _3432;
                        frontier_phi_77_pred_2 = _3431;
                        frontier_phi_77_pred_3 = _3430;
                        frontier_phi_77_pred_4 = _3429;
                        frontier_phi_77_pred_5 = _3428;
                    }
                    _3070 = frontier_phi_77_pred;
                    _3068 = frontier_phi_77_pred_1;
                    _3066 = frontier_phi_77_pred_2;
                    _3064 = frontier_phi_77_pred_3;
                    _3062 = frontier_phi_77_pred_4;
                    _3060 = frontier_phi_77_pred_5;
                    uint _3226 = _3225 + 1u;
                    if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3219 = _3060;
                        _3220 = _3062;
                        _3221 = _3064;
                        _3222 = _3066;
                        _3223 = _3068;
                        _3224 = _3070;
                        _3225 = _3226;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3064;
                frontier_phi_58_59_ladder_1 = _3070;
                frontier_phi_58_59_ladder_2 = _3068;
                frontier_phi_58_59_ladder_3 = _3066;
                frontier_phi_58_59_ladder_4 = _3062;
                frontier_phi_58_59_ladder_5 = _3060;
            }
            else
            {
                frontier_phi_58_59_ladder = _2942;
                frontier_phi_58_59_ladder_1 = _2948;
                frontier_phi_58_59_ladder_2 = _2946;
                frontier_phi_58_59_ladder_3 = _2944;
                frontier_phi_58_59_ladder_4 = _2940;
                frontier_phi_58_59_ladder_5 = _2938;
            }
            _3059 = frontier_phi_58_59_ladder_5;
            _3061 = frontier_phi_58_59_ladder_4;
            _3063 = frontier_phi_58_59_ladder;
            _3065 = frontier_phi_58_59_ladder_3;
            _3067 = frontier_phi_58_59_ladder_2;
            _3069 = frontier_phi_58_59_ladder_1;
        }
        float _3074 = isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0));
        _2850 = (_3074 * _3065) + _2305;
        _2852 = (_3074 * _3067) + _2307;
        _2854 = (_3074 * _3069) + _2309;
        _2856 = ((_3059 * 0.039999999105930328369140625) * _3074) + _2635;
        _2858 = ((_3061 * 0.039999999105930328369140625) * _3074) + _2637;
        _2860 = ((_3063 * 0.039999999105930328369140625) * _3074) + _2639;
    }
    else
    {
        _2850 = _2305;
        _2852 = _2307;
        _2854 = _2309;
        _2856 = _2635;
        _2858 = _2637;
        _2860 = _2639;
    }
    float _4865 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4876 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4887 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2877 = ((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2850 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1113))) + ((_2856 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _2878 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2852 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1113))) + ((_2858 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _2879 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2854 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1113))) + ((_2860 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    uint _2880 = _282 + 6u;
    float _2888 = _1050 / cbSceneParam._m0[86u].x;
    float _2889 = _1051 / cbSceneParam._m0[86u].y;
    vec4 _2903 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, (log2((isnan(cbSceneParam._m0[77u].w) ? _972 : (isnan(_972) ? cbSceneParam._m0[77u].w : min(_972, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2905 = _2903.x;
    float _2906 = _2903.y;
    float _2907 = _2903.z;
    float _2908 = _2903.w;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_972 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_972) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _972 : min(cbSceneParam._m0[80u].w, _972));
        float _2964 = _2963 / _972;
        float _2975 = _2964 * _1023;
        float _2976 = _1024 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2979 = _2964 * _1025;
        float _2981 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2982 = _2981 + cbSceneParam._m0[79u].w;
        float _2983 = cbSceneParam._m0[79u].w - _2976;
        float _2989 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2979 * _2979));
        float _2992 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2989;
        float _2997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_2977 - _2981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_2982 > 0.0) ? exp2(_2997 * _2982) : (2.0 - exp2(_2999 * _2982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2992;
        }
        else
        {
            float _3120 = 1.0 / cbSceneParam._m0[80u].x;
            float _3121 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : max(_2982, _2983));
            float _3122 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : min(_2982, _2983));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            _3176 = ((abs(_2989 / _2977) * cbSceneParam._m0[80u].y) * ((((_3131 - _3132) * 2.0) - ((exp2(_2997 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)))) - exp2(_2997 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))))) * _3120)) - ((exp2(_2999 * _3131) - exp2(_2999 * _3132)) * _3120))) + (_2992 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2908);
        _3001 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2905;
        _3003 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2906;
        _3005 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2907;
        _3007 = _3187 * _2908;
    }
    else
    {
        _3001 = _2905;
        _3003 = _2906;
        _3005 = _2907;
        _3007 = _2908;
    }
    bool _3214;
    vec4 _3017;
    vec4 _3039;
    float _3041;
    float _3045;
    float _3046;
    float _3047;
    float _3048;
    bool _3058;
    for (;;)
    {
        _3017 = cbMatDynParam._m0[0u];
        float _3019 = roundEven(_3017.y);
        bool _3020 = _3019 == 3.0;
        float _3021 = log2(_3007);
        float _3028 = exp2(_3021 * cbSceneParam._m0[78u].x) * _2877;
        float _3029 = exp2(_3021 * cbSceneParam._m0[78u].y) * _2878;
        float _3030 = exp2(_3021 * cbSceneParam._m0[78u].z) * _2879;
        float _3037 = _1039 + (-0.5);
        _3039 = cbMtdParam._m0[1u];
        _3041 = _3039.y * _3037;
        float _3044 = (_3019 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3045 = _3044 * (_3020 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3001)));
        _3046 = _3044 * (_3020 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3003)));
        _3047 = _3044 * (_3020 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3005)));
        _3048 = _3037 * 0.999000012874603271484375;
        _3058 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3058)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3048) < 0.5)
            {
                _3214 = true;
                break;
            }
        }
        uint _3155 = _1088 + uint(_3017.w);
        if ((cbInstanceData._m0[_3155].w < 1.0) && ((cbInstanceData._m0[_3155].w + _3048) < 0.5))
        {
            _3214 = true;
            break;
        }
        if ((_3041 + 1.0) < _3039.x)
        {
            _3214 = true;
            break;
        }
        _3214 = false;
        break;
    }
    float _3419;
    if (_3214)
    {
        discard_state = true;
        _3419 = 0.0;
    }
    else
    {
        _3419 = cbInstanceData._m0[_2880].w;
    }
    SV_Target.x = _3045;
    SV_Target.y = _3046;
    SV_Target.z = _3047;
    SV_Target.w = _3419;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2880].w;
    discard_exit();
}


