#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1216;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _324.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].z) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3521 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _400 = (_393 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _401 = (_393 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _402 = (_393 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _419 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _324.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].z) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3532 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _521 = ((_493.x - _512) * _393) + _512;
    float _522 = ((_493.y - _513) * _393) + _513;
    float _523 = ((_493.z - _514) * _393) + _514;
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _548 = ((_535.z - _523) * _466) + _523;
    float _551 = ((((_535.x - _521) * _466) + _521) * 2.0) + (-1.0);
    float _553 = ((((_535.y - _522) * _466) + _522) * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _3543 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _614 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_600 - _601) * cbMtdParam._m0[24u].w) + _601) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3554 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _622 = (_615 * (cbMtdParam._m0[17u].x - _473)) + _473;
    float _623 = (_615 * (cbMtdParam._m0[17u].y - _474)) + _474;
    float _624 = (_615 * (cbMtdParam._m0[17u].z - _475)) + _475;
    float _628 = (cbMtdParam._m0[19u].w * (_573.z - _548)) + _548;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _648 = (_641.x * 2.0) + (-1.0);
    float _649 = (_641.y * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3565 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _658 = (_615 * (_641.z - _628)) + _628;
    float _661 = (((_573.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _551;
    float _662 = (((_573.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _553;
    float _674 = (((_648 - _661) + (cbMtdParam._m0[21u].x * _661)) * _615) + _661;
    float _675 = (((_649 - _662) + (cbMtdParam._m0[21u].x * _662)) * _615) + _662;
    float _676 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) - _559)) + _559;
    float _680 = cbMtdParam._m0[22u].x + _573.w;
    float _683 = fma(_676, _223 * NORMAL.x, fma(_675, _230 * TANGENT.x, (_216 * _208) * _674));
    float _686 = fma(_676, _223 * NORMAL.y, fma(_675, _230 * TANGENT.y, (_216 * _209) * _674));
    float _689 = fma(_676, _223 * NORMAL.z, fma(_675, _230 * TANGENT.z, (_216 * _210) * _674));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3576 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _697 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3598 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3609 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3620 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _757);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _757);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _757);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _804 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _807 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _821 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3631 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _845 = ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * TEXCOORD_5.w) * _841.x;
    float _846 = dot(vec3(_694, _695, _696), vec3(_774, _775, _776));
    float _849 = _846 * 2.0;
    float _853 = (_849 * _694) - _774;
    float _854 = (_849 * _695) - _775;
    float _855 = (_849 * _696) - _776;
    float _859 = abs(dot(vec3(_774, _775, _776), vec3(_694, _695, _696)));
    float _3664 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _861 = sqrt(_697);
    float _874 = exp2((_861 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_861 * 3.0));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1215;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_914, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906));
        float _944 = fma(_914, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906));
        float _948 = fma(_914, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906));
        float _973 = _906 + _694;
        float _974 = _910 + _695;
        float _975 = _914 + _696;
        float _985 = fma(_975, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973)) - _940;
        float _986 = fma(_975, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973)) - _944;
        float _987 = fma(_975, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973)) - _948;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1043 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1009.x + (-0.5));
        float _1045 = _1043 * (_1009.y + (-0.5));
        float _1046 = _1043 * (_1009.z + (-0.5));
        float _1053 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1016.x + (-0.5));
        float _1055 = _1053 * (_1016.y + (-0.5));
        float _1056 = _1053 * (_1016.z + (-0.5));
        float _1063 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1023.x + (-0.5));
        float _1065 = _1063 * (_1023.y + (-0.5));
        float _1066 = _1063 * (_1023.z + (-0.5));
        float _1073 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1030.x + (-0.5));
        float _1075 = _1073 * (_1030.y + (-0.5));
        float _1076 = _1073 * (_1030.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1097 = (dot(vec3(_694, _695, _696), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1107 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3712 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1109 + 1.0))) + _1114) * _1077;
        float _1124 = _1045 * 0.5;
        float _1125 = _1055 * 0.5;
        float _1126 = _1065 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_694, _695, _696), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3745 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1151 + 1.0))) + _1156) * _1078;
        float _1166 = _1046 * 0.5;
        float _1167 = _1056 * 0.5;
        float _1168 = _1066 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_694, _695, _696), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3778 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1193 + 1.0))) + _1198) * _1079;
        _1215 = _1046;
        _1217 = _1045;
        _1218 = _1044;
        _1219 = _1056;
        _1220 = _1055;
        _1221 = _1054;
        _1222 = _1066;
        _1223 = _1065;
        _1224 = _1064;
        _1225 = _1079;
        _1226 = _1078;
        _1227 = _1077;
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _1216;
        _1217 = _1216;
        _1218 = _1216;
        _1219 = _1216;
        _1220 = _1216;
        _1221 = _1216;
        _1222 = _1216;
        _1223 = _1216;
        _1224 = _1216;
        _1225 = _1216;
        _1226 = _1216;
        _1227 = _1216;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_914, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906));
        float _1258 = fma(_914, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906));
        float _1262 = fma(_914, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906));
        float _1285 = _906 + _694;
        float _1286 = _910 + _695;
        float _1287 = _914 + _696;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_694, _695, _696), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3841 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_694, _695, _696), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3874 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_694, _695, _696), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _3907 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1216;
        _1524 = _1216;
        _1525 = _1216;
        _1526 = _1216;
        _1527 = _1216;
        _1528 = _1216;
        _1529 = _1216;
        _1530 = _1216;
        _1531 = _1216;
        _1532 = _1216;
        _1533 = _1216;
        _1534 = _1216;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1228)) + _1228;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1229)) + _1229;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1230)) + _1230;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _853 * 0.5;
    float _1592 = _854 * 0.5;
    float _1593 = _855 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1215, _1219, _1222, _1225));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1708 = fma(_914, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906)) + cbModelParam._m0[13u].w;
        float _1712 = fma(_914, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906)) + cbModelParam._m0[14u].w;
        float _1716 = fma(_914, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906)) + cbModelParam._m0[15u].w;
        float _1719 = fma(_855, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853));
        float _1722 = fma(_855, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853));
        float _1725 = fma(_855, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853));
        float _1753;
        if (_1719 > 0.0)
        {
            _1753 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1753 = frontier_phi_14_12_ladder;
        }
        float _1954;
        if (_1722 > 0.0)
        {
            _1954 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1954 = frontier_phi_23_19_ladder;
        }
        float _2197;
        if (_1725 > 0.0)
        {
            _2197 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2197 = frontier_phi_35_30_ladder;
        }
        float _2199 = isnan(_1954) ? _1753 : (isnan(_1753) ? _1954 : min(_1753, _1954));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1719) + _1708;
        float _2205 = (_2200 * _1722) + _1712;
        float _2206 = (_2200 * _1725) + _1716;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_13_35_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1741 = frontier_phi_13_35_ladder_2;
        _1743 = frontier_phi_13_35_ladder_1;
        _1745 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_853, _854, _855), _1660);
        _1741 = _1729.x * cbModelParam._m0[1u].y;
        _1743 = _1729.y * cbModelParam._m0[1u].y;
        _1745 = _1729.z * cbModelParam._m0[1u].y;
    }
    float _1749 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1749 : min(cbModelParam._m0[25u].w, _1749));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1804 = fma(_914, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906)) + cbModelParam._m0[21u].w;
        float _1808 = fma(_914, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906)) + cbModelParam._m0[22u].w;
        float _1812 = fma(_914, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906)) + cbModelParam._m0[23u].w;
        float _1815 = fma(_855, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853));
        float _1818 = fma(_855, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853));
        float _1821 = fma(_855, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853));
        float _1959;
        if (_1815 > 0.0)
        {
            _1959 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1959 = frontier_phi_25_21_ladder;
        }
        float _2224;
        if (_1818 > 0.0)
        {
            _2224 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2224 = frontier_phi_37_32_ladder;
        }
        float _2429;
        if (_1821 > 0.0)
        {
            _2429 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2429 = frontier_phi_46_43_ladder;
        }
        float _2431 = isnan(_2224) ? _1959 : (isnan(_1959) ? _2224 : min(_1959, _2224));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1815) + _1804;
        float _2437 = (_2432 * _1818) + _1808;
        float _2438 = (_2432 * _1821) + _1812;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1750);
            frontier_phi_22_46_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1840 = frontier_phi_22_46_ladder_2;
        _1842 = frontier_phi_22_46_ladder_1;
        _1844 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_853, _854, _855), _1750);
        _1840 = _1824.x * cbModelParam._m0[1u].z;
        _1842 = _1824.y * cbModelParam._m0[1u].z;
        _1844 = _1824.z * cbModelParam._m0[1u].z;
    }
    float _1856 = ((((1.0 - _874) * ((_861 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_874 * _861)) * _845;
    float _1857 = _1856 * ((cbModelParam._m0[1u].w * (_1840 - _1741)) + _1741);
    float _1858 = _1856 * ((cbModelParam._m0[1u].w * (_1842 - _1743)) + _1743);
    float _1859 = _1856 * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1862 = fma(_1859, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1859, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1859, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, _1857 * cbSceneParam._m0[91u].x));
    uvec4 _1878 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1880 = _1878.x * 14u;
    uint _1881 = _1880 + 13u;
    float _1888 = _845 + (-1.0);
    float _1893 = (cbLight._m0[_1881].x * _1888) + 1.0;
    float _1894 = (cbLight._m0[_1881].y * _1888) + 1.0;
    float _1895 = (cbLight._m0[_1881].z * _1888) + 1.0;
    float _1896 = (cbLight._m0[_1881].w * _1888) + 1.0;
    uint _1897 = _1880 + 5u;
    float _1903 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1907 = _1880 + 4u;
    float _1913 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1917 = _1880 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_694, _695, _696));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_694, _695, _696));
    float _4043 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4054 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1897].x * _1903) * _1938) + ((cbLight._m0[_1907].x * _1913) * _1936);
    float _1946 = ((_1903 * cbLight._m0[_1897].y) * _1938) + ((_1913 * cbLight._m0[_1907].y) * _1936);
    float _1947 = ((_1903 * cbLight._m0[_1897].z) * _1938) + ((_1913 * cbLight._m0[_1907].z) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1880 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1880 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1880 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4065 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1991 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2168 = _1880 + 7u;
        float _2184 = (dot(vec3(cbLight._m0[_1880 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2185 = _2184 * _2184;
        float _4081 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2186 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2187 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2009 = (((cbLight._m0[_2168].x * 0.3183098733425140380859375) * _2186) * _2187) + _1964;
        _2011 = (((cbLight._m0[_2168].y * 0.3183098733425140380859375) * _2186) * _2187) + _1966;
        _2013 = (((cbLight._m0[_2168].z * 0.3183098733425140380859375) * _2186) * _2187) + _1968;
    }
    uint _2016 = _1880 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _697) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1880].x + _774;
    float _2032 = cbLight._m0[_1880].y + _775;
    float _2033 = cbLight._m0[_1880].z + _776;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1880].xyz));
    float _4097 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2045 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2046 = dot(vec3(_694, _695, _696), vec3(_2038, _2039, _2040));
    float _4119 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2038, _2039, _2040));
    float _4130 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2070 = 1.0 - _2030;
    float _2081 = (0.5 / (((_2045 * ((_2044 * _2070) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2070) + _2030) * _2044))) * _2044;
    float _4141 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2094 = _1880 + 9u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _697) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1917].x + _774;
    float _2108 = cbLight._m0[_1917].y + _775;
    float _2109 = cbLight._m0[_1917].z + _776;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1917].xyz));
    float _4152 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2121 = dot(vec3(_694, _695, _696), vec3(_2114, _2115, _2116));
    float _4163 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2114, _2115, _2116));
    float _4174 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2106 * _2106;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2143 = 1.0 - _2106;
    float _2153 = (0.5 / (((_2045 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2143) + _2106) * _2120))) * _2120;
    float _4185 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    float _2165 = (((_2142 * cbLight._m0[_2094].x) * _2155) * _1903) + (((_2069 * cbLight._m0[_2016].x) * _2083) * _1913);
    float _2166 = (((_2142 * cbLight._m0[_2094].y) * _2155) * _1903) + (((_2069 * cbLight._m0[_2016].y) * _2083) * _1913);
    float _2167 = (((_2142 * cbLight._m0[_2094].z) * _2155) * _1903) + (((_2069 * cbLight._m0[_2016].z) * _2083) * _1913);
    float _2229;
    float _2231;
    float _2233;
    if (_1953)
    {
        _2229 = _2165;
        _2231 = _2166;
        _2233 = _2167;
    }
    else
    {
        uint _2235 = _1880 + 2u;
        uint _2239 = _1880 + 10u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _697) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _774;
        float _2256 = cbLight._m0[_2235].y + _775;
        float _2257 = cbLight._m0[_2235].z + _776;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2235].xyz));
        float _4196 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2269 = dot(vec3(_694, _695, _696), vec3(_2262, _2263, _2264));
        float _4207 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4218 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2291 = 1.0 - _2254;
        float _2301 = (0.5 / (((_2045 * ((_2268 * _2291) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2291) + _2254) * _2268))) * _2268;
        float _4229 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2229 = (((_2290 * cbLight._m0[_2239].x) * _2303) * _2304) + _2165;
        _2231 = (((_2290 * cbLight._m0[_2239].y) * _2303) * _2304) + _2166;
        _2233 = (((_2290 * cbLight._m0[_2239].z) * _2303) * _2304) + _2167;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1971)
    {
        _2339 = _2229;
        _2341 = _2231;
        _2343 = _2233;
    }
    else
    {
        uint _2350 = _1880 + 3u;
        uint _2354 = _1880 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _697) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _774;
        float _2371 = cbLight._m0[_2350].y + _775;
        float _2372 = cbLight._m0[_2350].z + _776;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2350].xyz));
        float _4245 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2384 = dot(vec3(_694, _695, _696), vec3(_2377, _2378, _2379));
        float _4256 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4267 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2406 = 1.0 - _2369;
        float _2416 = (0.5 / (((_2045 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2406) + _2369) * _2383))) * _2383;
        float _4278 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2339 = (((_2405 * cbLight._m0[_2354].x) * _2418) * _2419) + _2229;
        _2341 = (((_2405 * cbLight._m0[_2354].y) * _2418) * _2419) + _2231;
        _2343 = (((_2405 * cbLight._m0[_2354].z) * _2418) * _2419) + _2233;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1878.y == 0u)
    {
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2494;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2494;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2494;
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2510)));
        float _2531 = (log2(_2497 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
        }
        else
        {
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2803)
                {
                    frontier_phi_61_pred = _2787;
                    frontier_phi_61_pred_1 = _2792;
                    frontier_phi_61_pred_2 = _2791;
                    frontier_phi_61_pred_3 = _2790;
                    frontier_phi_61_pred_4 = _2789;
                    frontier_phi_61_pred_5 = _2788;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2802;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2793 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _2495;
                        float _2978 = _2937.y - _2496;
                        float _2979 = _2937.z - _2497;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_801, _804, _807), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4304 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _2495;
                        float _3013 = (-0.0) - _2496;
                        float _3014 = (-0.0) - _2497;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3029 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3030 = 1.0 - _861;
                        float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                        float _3038 = _3037 * _3037;
                        float _3039 = _3038 * _3038;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3050 = dot(vec3(_801, _804, _807), vec3(_3019, _3020, _3021));
                        float _4320 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3054 = dot(vec3(_801, _804, _807), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                        float _4331 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                        float _3062 = _2997 * _3038;
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _2987) + _3063;
                        float _4342 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3068 = 1.0 - _3038;
                        float _3078 = (0.5 / (((_3067 * ((_3053 * _3068) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3038) * _3053))) * _3067;
                        float _4353 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3089 = (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3061 * _3061) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2846 = (_3008 * _2956.x) + _2914;
                        _2847 = (_3008 * _2956.y) + _2915;
                        _2848 = (_3008 * _2956.z) + _2916;
                        _2843 = (_3089 * _2973.x) + _2911;
                        _2844 = (_3089 * _2973.y) + _2912;
                        _2845 = (_3089 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_61_pred = _2843;
                    frontier_phi_61_pred_1 = _2848;
                    frontier_phi_61_pred_2 = _2847;
                    frontier_phi_61_pred_3 = _2846;
                    frontier_phi_61_pred_4 = _2845;
                    frontier_phi_61_pred_5 = _2844;
                }
                _2643 = frontier_phi_61_pred;
                _2653 = frontier_phi_61_pred_1;
                _2651 = frontier_phi_61_pred_2;
                _2649 = frontier_phi_61_pred_3;
                _2647 = frontier_phi_61_pred_4;
                _2645 = frontier_phi_61_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2643;
                    _2788 = _2645;
                    _2789 = _2647;
                    _2790 = _2649;
                    _2791 = _2651;
                    _2792 = _2653;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
        }
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.z;
        uint _2659 = (_2657 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2659) & _2541) == 0u)
        {
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
            float _2781 = _2780 * _2495;
            float _2782 = _2780 * _2496;
            float _2783 = _2780 * _2497;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2659 < ((_2657 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2894 = _2642;
                float _2895 = _2644;
                float _2896 = _2646;
                float _2897 = _2648;
                float _2898 = _2650;
                float _2899 = _2652;
                uint _2900 = _2659;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2910)
                    {
                        frontier_phi_67_pred = _2897;
                        frontier_phi_67_pred_1 = _2898;
                        frontier_phi_67_pred_2 = _2899;
                        frontier_phi_67_pred_3 = _2896;
                        frontier_phi_67_pred_4 = _2895;
                        frontier_phi_67_pred_5 = _2894;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        uint _3113 = _2909;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3182;
                        vec4 _3197;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3124 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3169 = (_3124 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3124 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3124 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3124 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2497, _3231.z, fma(_2496, _3231.y, _3231.x * _2495)) + _3231.w;
                            _3244 = !((fma(_2497, _3212.z, fma(_2496, _3212.y, _3212.x * _2495)) + _3212.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3139.x - _2495;
                                float _3272 = _3139.y - _2496;
                                float _3273 = _3139.z - _2497;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3140 * _3140));
                                float _4364 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3289 = sqrt(_3274) * _3155.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_801, _804, _807))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2497, _3182.z, fma(_2496, _3182.y, _3182.x * _2495)) + _3182.w) / _3243;
                                float _3303 = (fma(_2497, _3197.z, fma(_2496, _3197.y, _3197.x * _2495)) + _3197.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4380 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _861;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2781;
                                float _3333 = _3279 - _2782;
                                float _3334 = _3280 - _2783;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4391 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3346 = dot(vec3(_801, _804, _807), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4402 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_801, _804, _807), vec3(_3278, _3279, _3280))) + _3355;
                                float _4413 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4424 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3383 * _3167.x;
                                frontier_phi_73_pred_1 = _3383 * _3167.y;
                                frontier_phi_73_pred_2 = _3309 * _3155.z;
                                frontier_phi_73_pred_3 = _3309 * _3155.y;
                                frontier_phi_73_pred_4 = _3309 * _3155.x;
                                frontier_phi_73_pred_5 = _3383 * _3167.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_73_pred;
                            _3388 = frontier_phi_73_pred_1;
                            _3392 = frontier_phi_73_pred_2;
                            _3391 = frontier_phi_73_pred_3;
                            _3390 = frontier_phi_73_pred_4;
                            _3389 = frontier_phi_73_pred_5;
                            _3097 = _3390 + _3110;
                            _3098 = _3391 + _3111;
                            _3099 = _3392 + _3112;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3097;
                        frontier_phi_67_pred_1 = _3098;
                        frontier_phi_67_pred_2 = _3099;
                        frontier_phi_67_pred_3 = _3096;
                        frontier_phi_67_pred_4 = _3095;
                        frontier_phi_67_pred_5 = _3094;
                    }
                    _2762 = frontier_phi_67_pred;
                    _2764 = frontier_phi_67_pred_1;
                    _2766 = frontier_phi_67_pred_2;
                    _2760 = frontier_phi_67_pred_3;
                    _2758 = frontier_phi_67_pred_4;
                    _2756 = frontier_phi_67_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2756;
                        _2895 = _2758;
                        _2896 = _2760;
                        _2897 = _2762;
                        _2898 = _2764;
                        _2899 = _2766;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2764;
                frontier_phi_55_56_ladder_1 = _2766;
                frontier_phi_55_56_ladder_2 = _2762;
                frontier_phi_55_56_ladder_3 = _2760;
                frontier_phi_55_56_ladder_4 = _2758;
                frontier_phi_55_56_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_55_56_ladder = _2650;
                frontier_phi_55_56_ladder_1 = _2652;
                frontier_phi_55_56_ladder_2 = _2648;
                frontier_phi_55_56_ladder_3 = _2646;
                frontier_phi_55_56_ladder_4 = _2644;
                frontier_phi_55_56_ladder_5 = _2642;
            }
            _2755 = frontier_phi_55_56_ladder_5;
            _2757 = frontier_phi_55_56_ladder_4;
            _2759 = frontier_phi_55_56_ladder_3;
            _2761 = frontier_phi_55_56_ladder_2;
            _2763 = frontier_phi_55_56_ladder;
            _2765 = frontier_phi_55_56_ladder_1;
        }
        float _2770 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
        _2554 = (_2770 * _2761) + _2009;
        _2556 = (_2770 * _2763) + _2011;
        _2558 = (_2770 * _2765) + _2013;
        _2560 = ((_2755 * 0.039999999105930328369140625) * _2770) + _2339;
        _2562 = ((_2757 * 0.039999999105930328369140625) * _2770) + _2341;
        _2564 = ((_2759 * 0.039999999105930328369140625) * _2770) + _2343;
    }
    else
    {
        _2554 = _2009;
        _2556 = _2011;
        _2558 = _2013;
        _2560 = _2339;
        _2562 = _2341;
        _2564 = _2343;
    }
    float _4440 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4451 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4462 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2584 = _236 + 6u;
    float _2592 = _782 / cbSceneParam._m0[86u].x;
    float _2593 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2607 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2609 = _2607.x;
    float _2610 = _2607.y;
    float _2611 = _2607.z;
    float _2612 = _2607.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2667 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2668 = _2667 / _715;
        float _2679 = _2668 * _767;
        float _2680 = _768 * _2668;
        float _2681 = (-0.0) - _2680;
        float _2683 = _2668 * _769;
        float _2685 = (cbSceneParam._m0[77u].w * _2681) / _2667;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2680;
        float _2693 = sqrt(((_2679 * _2679) + (_2680 * _2680)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2667)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2681 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2818 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2856 = ((abs(_2693 / _2681) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2703 * _2827) - exp2(_2703 * _2828)) * _2816))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2612);
        _2705 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2609;
        _2707 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2610;
        _2709 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2611;
        _2711 = _2867 * _2612;
    }
    else
    {
        _2705 = _2609;
        _2707 = _2610;
        _2709 = _2611;
        _2711 = _2612;
    }
    float _2723 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2724 = _2723 == 3.0;
    float _2725 = log2(_2711);
    float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2554 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _845))) + ((_2560 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2556 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _845))) + ((_2562 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2558 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _845))) + ((_2564 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2743 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2743 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2743 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2743 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = cbInstanceData._m0[_2584].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2584].w;
}


