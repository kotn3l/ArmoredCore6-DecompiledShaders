#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1482;
float _3863;
float _3864;
float _3865;
float _3866;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3875 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _428 = (_421 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _429 = (_421 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _430 = (_421 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3886 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _562 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _349.z) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3897 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _570 = (_563 * ((_521.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _571 = (_563 * ((_521.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _572 = (_563 * ((_521.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _611 = _607.z;
    float _618 = ((_590.x - _609) * _421) + _609;
    float _619 = ((_590.y - _610) * _421) + _610;
    float _620 = ((_590.z - _611) * _421) + _611;
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_632.x - _618) * _494) + _618;
    float _644 = ((_632.y - _619) * _494) + _619;
    float _645 = ((_632.z - _620) * _494) + _620;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _670 = ((_657.z - _645) * _563) + _645;
    float _673 = ((((_657.x - _643) * _563) + _643) * 2.0) + (-1.0);
    float _675 = ((((_657.y - _644) * _563) + _644) * 2.0) + (-1.0);
    float _676 = dot(vec2(_673, _675), vec2(_673, _675));
    float _3908 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _681 = sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _722 = _720.x;
    float _723 = 1.0 - _722;
    float _729 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _732 = ((isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : min(_729, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _741 = (_732 - ((((((_722 - _723) * cbMtdParam._m0[24u].w) + _723) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _732))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3929 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _742 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _749 = (_742 * (cbMtdParam._m0[17u].x - _570)) + _570;
    float _750 = (_742 * (cbMtdParam._m0[17u].y - _571)) + _571;
    float _751 = (_742 * (cbMtdParam._m0[17u].z - _572)) + _572;
    vec4 _763 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _765 = _763.x;
    float _766 = 1.0 - _765;
    float _793 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_765 - _766) * cbMtdParam._m0[24u].y) + _766) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3940 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _802 = ((((cbMtdParam._m0[10u].x - _749) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _794) + _749;
    float _803 = ((((cbMtdParam._m0[10u].y - _750) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _794) + _750;
    float _804 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _751)) * _794) + _751;
    float _808 = (cbMtdParam._m0[19u].w * (_695.z - _670)) + _670;
    vec4 _822 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _829 = (_822.x * 2.0) + (-1.0);
    float _830 = (_822.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _3951 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _839 = (_742 * (_822.z - _808)) + _808;
    float _842 = ((cbMtdParam._m0[23u].y - _839) * _794) + _839;
    vec4 _861 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _867 = (_861.x * 2.0) + (-1.0);
    float _868 = (_861.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _3962 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = (((_695.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _673;
    float _878 = (((_695.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _675;
    float _890 = (((_829 - _877) + (cbMtdParam._m0[21u].x * _877)) * _742) + _877;
    float _891 = (((_830 - _878) + (cbMtdParam._m0[21u].x * _878)) * _742) + _878;
    float _892 = (_742 * (sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) - _681)) + _681;
    float _903 = (((_867 - _890) + (_890 * cbMtdParam._m0[22u].z)) * _794) + _890;
    float _904 = (((_868 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _794) + _891;
    float _905 = ((sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) - _892) * _794) + _892;
    float _907 = cbMtdParam._m0[22u].x + _695.w;
    float _910 = fma(_905, _250 * NORMAL.x, fma(_904, _257 * TANGENT.x, (_243 * _235) * _903));
    float _913 = fma(_905, _250 * NORMAL.y, fma(_904, _257 * TANGENT.y, (_243 * _236) * _903));
    float _916 = fma(_905, _250 * NORMAL.z, fma(_904, _257 * TANGENT.z, (_243 * _237) * _903));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _3973 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _924 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _3995 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4006 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4017 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _993 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _983);
    float _994 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _983);
    float _995 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _983);
    float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
    float _1000 = _993 * _999;
    float _1001 = _994 * _999;
    float _1002 = _995 * _999;
    vec4 _1007 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1009 = _1007.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1163 = sqrt(((_993 * _993) + (_994 * _994)) + (_995 * _995));
        float _1169 = (cbMatDynParam._m0[5u].x * _1163) + cbMatDynParam._m0[5u].y;
        float _4028 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1174 = (cbMatDynParam._m0[5u].z * _1163) + cbMatDynParam._m0[5u].w;
        float _4039 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) - _1170)) + _1170) < ((_1009 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1020 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1021 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1039 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1042 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1045 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1058 = _263 + 9u;
    uint _1059 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _1065 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1059].x;
    float _1066 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1059].y;
    float _1067 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1059].z;
    float _4050 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1020, cbSceneParam._m0[86u].y * _1021));
    float _1083 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * TEXCOORD_5.w) * _1079.x;
    float _1084 = dot(vec3(_921, _922, _923), vec3(_1000, _1001, _1002));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _921) - _1000;
    float _1092 = (_1087 * _922) - _1001;
    float _1093 = (_1087 * _923) - _1002;
    float _1097 = abs(dot(vec3(_1000, _1001, _1002), vec3(_921, _922, _923)));
    float _4083 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_924);
    float _1112 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1481;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1206 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1210 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1214 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1239 = _1144 + _921;
        float _1240 = _1148 + _922;
        float _1241 = _1152 + _923;
        float _1251 = fma(_1241, cbModelParam._m0[26u].z, fma(_1240, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1239)) - _1206;
        float _1252 = fma(_1241, cbModelParam._m0[27u].z, fma(_1240, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1239)) - _1210;
        float _1253 = fma(_1241, cbModelParam._m0[28u].z, fma(_1240, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1239)) - _1214;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1206 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1210 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[34u].z) + ((((((_1214 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1309 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1275.x + (-0.5));
        float _1311 = _1309 * (_1275.y + (-0.5));
        float _1312 = _1309 * (_1275.z + (-0.5));
        float _1319 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1282.x + (-0.5));
        float _1321 = _1319 * (_1282.y + (-0.5));
        float _1322 = _1319 * (_1282.z + (-0.5));
        float _1329 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1289.x + (-0.5));
        float _1331 = _1329 * (_1289.y + (-0.5));
        float _1332 = _1329 * (_1289.z + (-0.5));
        float _1339 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1296.x + (-0.5));
        float _1341 = _1339 * (_1296.y + (-0.5));
        float _1342 = _1339 * (_1296.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1363 = (dot(vec3(_921, _922, _923), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1373 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4131 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1375 + 1.0))) + _1380) * _1343;
        float _1390 = _1311 * 0.5;
        float _1391 = _1321 * 0.5;
        float _1392 = _1331 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_921, _922, _923), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4164 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1417 + 1.0))) + _1422) * _1344;
        float _1432 = _1312 * 0.5;
        float _1433 = _1322 * 0.5;
        float _1434 = _1332 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_921, _922, _923), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4197 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1459 + 1.0))) + _1464) * _1345;
        _1481 = _1312;
        _1483 = _1311;
        _1484 = _1310;
        _1485 = _1322;
        _1486 = _1321;
        _1487 = _1320;
        _1488 = _1332;
        _1489 = _1331;
        _1490 = _1330;
        _1491 = _1345;
        _1492 = _1344;
        _1493 = _1343;
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1482;
        _1483 = _1482;
        _1484 = _1482;
        _1485 = _1482;
        _1486 = _1482;
        _1487 = _1482;
        _1488 = _1482;
        _1489 = _1482;
        _1490 = _1482;
        _1491 = _1482;
        _1492 = _1482;
        _1493 = _1482;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1526 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1530 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1553 = _1144 + _921;
        float _1554 = _1148 + _922;
        float _1555 = _1152 + _923;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_921, _922, _923), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4260 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_921, _922, _923), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4293 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_921, _922, _923), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4326 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1482;
        _1792 = _1482;
        _1793 = _1482;
        _1794 = _1482;
        _1795 = _1482;
        _1796 = _1482;
        _1797 = _1482;
        _1798 = _1482;
        _1799 = _1482;
        _1800 = _1482;
        _1801 = _1482;
        _1802 = _1482;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1494)) + _1494;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1495)) + _1495;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1496)) + _1496;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1091 * 0.5;
    float _1860 = _1092 * 0.5;
    float _1861 = _1093 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1481, _1485, _1488, _1491));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1989 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1992 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2020 = frontier_phi_17_15_ladder;
        }
        float _2242;
        if (_1989 > 0.0)
        {
            _2242 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2242 = frontier_phi_26_22_ladder;
        }
        float _2488;
        if (_1992 > 0.0)
        {
            _2488 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2488 = frontier_phi_38_33_ladder;
        }
        float _2490 = isnan(_2242) ? _2020 : (isnan(_2020) ? _2242 : min(_2020, _2242));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1986) + _1975;
        float _2496 = (_2491 * _1989) + _1979;
        float _2497 = (_2491 * _1992) + _1983;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_16_38_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_16_38_ladder_2;
        _2010 = frontier_phi_16_38_ladder_1;
        _2012 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2071 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2075 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2079 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2082 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2085 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2088 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2247;
        if (_2082 > 0.0)
        {
            _2247 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2247 = frontier_phi_28_24_ladder;
        }
        float _2515;
        if (_2085 > 0.0)
        {
            _2515 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2515 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_2088 > 0.0)
        {
            _2720 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2720 = frontier_phi_49_46_ladder;
        }
        float _2722 = isnan(_2515) ? _2247 : (isnan(_2247) ? _2515 : min(_2247, _2515));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2082) + _2071;
        float _2728 = (_2723 * _2085) + _2075;
        float _2729 = (_2723 * _2088) + _2079;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_25_49_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2107 = frontier_phi_25_49_ladder_2;
        _2109 = frontier_phi_25_49_ladder_1;
        _2111 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _2017);
        _2107 = _2091.x * cbModelParam._m0[1u].z;
        _2109 = _2091.y * cbModelParam._m0[1u].z;
        _2111 = _2091.z * cbModelParam._m0[1u].z;
    }
    float _2123 = ((((1.0 - _1112) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1112 * _1099)) * _1083;
    float _2124 = _2123 * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2125 = _2123 * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2126 = _2123 * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2124 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2124 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2124 * cbSceneParam._m0[91u].x));
    vec4 _2143 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1020, _1021));
    float _2145 = _2143.w;
    float _2157 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2145);
    float _2158 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2145);
    float _2159 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2145);
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _1083 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2201 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2205 = _2165 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_921, _922, _923));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_921, _922, _923));
    float _4462 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4473 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2182].x * _2188) * _2226) + (((cbLight._m0[_2192].x * _2157) * _2201) * _2224);
    float _2234 = ((_2188 * cbLight._m0[_2182].y) * _2226) + (((cbLight._m0[_2192].y * _2158) * _2201) * _2224);
    float _2235 = ((_2188 * cbLight._m0[_2182].z) * _2226) + (((cbLight._m0[_2192].z * _2159) * _2201) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2241)
    {
        _2252 = _2233;
        _2254 = _2234;
        _2256 = _2235;
    }
    else
    {
        uint _2260 = _2165 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4484 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2279 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2233;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2234;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2235;
    }
    bool _2259 = _2239.y == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2259)
    {
        _2297 = _2252;
        _2299 = _2254;
        _2301 = _2256;
    }
    else
    {
        uint _2459 = _2165 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4500 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2478 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2297 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2252;
        _2299 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2254;
        _2301 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2256;
    }
    uint _2304 = _2165 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _924) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2165].x + _1000;
    float _2320 = cbLight._m0[_2165].y + _1001;
    float _2321 = cbLight._m0[_2165].z + _1002;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2165].xyz));
    float _4516 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _4527 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2333 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2334 = dot(vec3(_921, _922, _923), vec3(_2326, _2327, _2328));
    float _4538 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2326, _2327, _2328));
    float _4549 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2333 * ((_2332 * _2358) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2358) + _2318) * _2332))) * _2332;
    float _4560 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2385 = _2165 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _924) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2205].x + _1000;
    float _2399 = cbLight._m0[_2205].y + _1001;
    float _2400 = cbLight._m0[_2205].z + _1002;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2205].xyz));
    float _4571 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2412 = dot(vec3(_921, _922, _923), vec3(_2405, _2406, _2407));
    float _4582 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2405, _2406, _2407));
    float _4593 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2434 = 1.0 - _2397;
    float _2444 = (0.5 / (((_2333 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2434) + _2397) * _2411))) * _2411;
    float _4604 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2456 = (((_2433 * cbLight._m0[_2385].x) * _2446) * _2188) + ((((cbLight._m0[_2304].x * _2157) * _2357) * _2371) * _2201);
    float _2457 = (((_2433 * cbLight._m0[_2385].y) * _2446) * _2188) + ((((cbLight._m0[_2304].y * _2158) * _2357) * _2371) * _2201);
    float _2458 = (((_2433 * cbLight._m0[_2385].z) * _2446) * _2188) + ((((cbLight._m0[_2304].z * _2159) * _2357) * _2371) * _2201);
    float _2520;
    float _2522;
    float _2524;
    if (_2241)
    {
        _2520 = _2456;
        _2522 = _2457;
        _2524 = _2458;
    }
    else
    {
        uint _2526 = _2165 + 2u;
        uint _2530 = _2165 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _924) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _1000;
        float _2547 = cbLight._m0[_2526].y + _1001;
        float _2548 = cbLight._m0[_2526].z + _1002;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2526].xyz));
        float _4615 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2560 = dot(vec3(_921, _922, _923), vec3(_2553, _2554, _2555));
        float _4626 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4637 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2333 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2582) + _2545) * _2559))) * _2559;
        float _4648 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2520 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2456;
        _2522 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2457;
        _2524 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2458;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2259)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2165 + 3u;
        uint _2645 = _2165 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _924) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1000;
        float _2662 = cbLight._m0[_2641].y + _1001;
        float _2663 = cbLight._m0[_2641].z + _1002;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2641].xyz));
        float _4664 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2675 = dot(vec3(_921, _922, _923), vec3(_2668, _2669, _2670));
        float _4675 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4686 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2697 = 1.0 - _2660;
        float _2707 = (0.5 / (((_2333 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2697) + _2660) * _2674))) * _2674;
        float _4697 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2630 = (((_2696 * cbLight._m0[_2645].x) * _2709) * _2710) + _2520;
        _2632 = (((_2696 * cbLight._m0[_2645].y) * _2709) * _2710) + _2522;
        _2634 = (((_2696 * cbLight._m0[_2645].z) * _2709) * _2710) + _2524;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2163.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1021) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _1020) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3102)
                {
                    frontier_phi_66_pred = _3086;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3101;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3092 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _2786;
                        float _3298 = _3257.y - _2787;
                        float _3299 = _3257.z - _2788;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_1039, _1042, _1045), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4723 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _2786;
                        float _3333 = (-0.0) - _2787;
                        float _3334 = (-0.0) - _2788;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3349 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3350 = 1.0 - _1099;
                        float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                        float _3358 = _3357 * _3357;
                        float _3359 = _3358 * _3358;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3362 = _3341 + _3306;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3370 = dot(vec3(_1039, _1042, _1045), vec3(_3339, _3340, _3341));
                        float _4739 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3374 = dot(vec3(_1039, _1042, _1045), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                        float _4750 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                        float _3382 = _3317 * _3358;
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3307) + _3383;
                        float _4761 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3388 = 1.0 - _3358;
                        float _3398 = (0.5 / (((_3387 * ((_3373 * _3388) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3358) * _3373))) * _3387;
                        float _4772 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3409 = (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3381 * _3381) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3161 = (_3328 * _3276.x) + _3234;
                        _3162 = (_3328 * _3276.y) + _3235;
                        _3163 = (_3328 * _3276.z) + _3236;
                        _3158 = (_3409 * _3293.x) + _3231;
                        _3159 = (_3409 * _3293.y) + _3232;
                        _3160 = (_3409 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_66_pred = _3158;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                _2934 = frontier_phi_66_pred;
                _2944 = frontier_phi_66_pred_1;
                _2942 = frontier_phi_66_pred_2;
                _2940 = frontier_phi_66_pred_3;
                _2938 = frontier_phi_66_pred_4;
                _2936 = frontier_phi_66_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2934;
                    _3087 = _2936;
                    _3088 = _2938;
                    _3089 = _2940;
                    _3090 = _2942;
                    _3091 = _2944;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2950) & _2832) == 0u)
        {
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3080 = _3079 * _2786;
            float _3081 = _3079 * _2787;
            float _3082 = _3079 * _2788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3214 = _2933;
                float _3215 = _2935;
                float _3216 = _2937;
                float _3217 = _2939;
                float _3218 = _2941;
                float _3219 = _2943;
                uint _3220 = _2950;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3230)
                    {
                        frontier_phi_77_pred = _3219;
                        frontier_phi_77_pred_1 = _3218;
                        frontier_phi_77_pred_2 = _3217;
                        frontier_phi_77_pred_3 = _3216;
                        frontier_phi_77_pred_4 = _3215;
                        frontier_phi_77_pred_5 = _3214;
                    }
                    else
                    {
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        uint _3442 = _3229;
                        uint _3443;
                        vec4 _3468;
                        float _3469;
                        vec4 _3484;
                        vec3 _3496;
                        vec4 _3511;
                        vec4 _3526;
                        float _3572;
                        bool _3573;
                        for (;;)
                        {
                            uint _3453 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3442));
                            _3443 = (_3442 + 4294967295u) & _3442;
                            uint _3455 = _3453 * 40u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3469 = _3468.w;
                            uint _3471 = (_3453 * 40u) + 4u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3453 * 40u) + 8u;
                            _3496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x));
                            uint _3498 = (_3453 * 40u) + 16u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3453 * 40u) + 20u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3453 * 40u) + 24u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3547 = (_3453 * 40u) + 28u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3572 = fma(_2788, _3560.z, fma(_2787, _3560.y, _3560.x * _2786)) + _3560.w;
                            _3573 = !((fma(_2788, _3541.z, fma(_2787, _3541.y, _3541.x * _2786)) + _3541.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3573)
                            {
                                float _3600 = _3468.x - _2786;
                                float _3601 = _3468.y - _2787;
                                float _3602 = _3468.z - _2788;
                                float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                                float _3606 = inversesqrt(_3603);
                                float _3607 = _3606 * _3600;
                                float _3608 = _3606 * _3601;
                                float _3609 = _3606 * _3602;
                                float _3613 = 1.0 - (_3603 / (_3469 * _3469));
                                float _4783 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3618 = sqrt(_3603) * _3484.w;
                                float _3620 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                                float _3621 = _3620 * _3620;
                                float _3624 = ((1.0 - _3621) * dot(vec3(_3607, _3608, _3609), vec3(_1039, _1042, _1045))) + _3621;
                                float _3627 = _3618 * _3618;
                                float _3631 = (fma(_2788, _3511.z, fma(_2787, _3511.y, _3511.x * _2786)) + _3511.w) / _3572;
                                float _3632 = (fma(_2788, _3526.z, fma(_2787, _3526.y, _3526.x * _2786)) + _3526.w) / _3572;
                                float _3636 = 1.0 - dot(vec2(_3631, _3632), vec2(_3631, _3632));
                                float _4799 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3638 = _3637 * (((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3614) / ((_3627 * 0.699999988079071044921875) + 1.0));
                                float _3650 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                                float _3651 = 1.0 - _1099;
                                float _3658 = sqrt(1.0 - ((1.0 - (_3651 * _3651)) * (1.0 - (_3650 * _3650))));
                                float _3659 = _3658 * _3658;
                                float _3660 = _3659 * _3659;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3663 = _3609 - _3082;
                                float _3667 = inversesqrt(dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663)));
                                float _3671 = dot(vec3(_1039, _1042, _1045), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4810 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3675 = dot(vec3(_1039, _1042, _1045), vec3(_3667 * _3661, _3667 * _3662, _3667 * _3663));
                                float _4821 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3682 = ((_3678 * _3678) * (_3660 + (-1.0))) + 1.0;
                                float _3683 = _3620 * _3659;
                                float _3684 = _3683 * _3683;
                                float _3690 = ((1.0 - _3684) * dot(vec3(_1039, _1042, _1045), vec3(_3607, _3608, _3609))) + _3684;
                                float _4832 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3692 = 1.0 - _3659;
                                float _3702 = (0.5 / (((_3691 * ((_3674 * _3692) + _3659)) + 9.9999999392252902907785028219223e-09) + (((_3691 * _3692) + _3659) * _3674))) * _3691;
                                float _4843 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3712 = (_3637 * _3614) * (((_3660 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3682 * _3682) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3638 * _3484.y;
                                frontier_phi_83_pred_1 = _3638 * _3484.x;
                                frontier_phi_83_pred_2 = _3712 * _3496.z;
                                frontier_phi_83_pred_3 = _3712 * _3496.y;
                                frontier_phi_83_pred_4 = _3712 * _3496.x;
                                frontier_phi_83_pred_5 = _3638 * _3484.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3720 = frontier_phi_83_pred;
                            _3719 = frontier_phi_83_pred_1;
                            _3718 = frontier_phi_83_pred_2;
                            _3717 = frontier_phi_83_pred_3;
                            _3716 = frontier_phi_83_pred_4;
                            _3721 = frontier_phi_83_pred_5;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            if (_3443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3443;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3428;
                        frontier_phi_77_pred_1 = _3427;
                        frontier_phi_77_pred_2 = _3426;
                        frontier_phi_77_pred_3 = _3425;
                        frontier_phi_77_pred_4 = _3424;
                        frontier_phi_77_pred_5 = _3423;
                    }
                    _3065 = frontier_phi_77_pred;
                    _3063 = frontier_phi_77_pred_1;
                    _3061 = frontier_phi_77_pred_2;
                    _3059 = frontier_phi_77_pred_3;
                    _3057 = frontier_phi_77_pred_4;
                    _3055 = frontier_phi_77_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3055;
                        _3215 = _3057;
                        _3216 = _3059;
                        _3217 = _3061;
                        _3218 = _3063;
                        _3219 = _3065;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3059;
                frontier_phi_58_59_ladder_1 = _3065;
                frontier_phi_58_59_ladder_2 = _3063;
                frontier_phi_58_59_ladder_3 = _3061;
                frontier_phi_58_59_ladder_4 = _3057;
                frontier_phi_58_59_ladder_5 = _3055;
            }
            else
            {
                frontier_phi_58_59_ladder = _2937;
                frontier_phi_58_59_ladder_1 = _2943;
                frontier_phi_58_59_ladder_2 = _2941;
                frontier_phi_58_59_ladder_3 = _2939;
                frontier_phi_58_59_ladder_4 = _2935;
                frontier_phi_58_59_ladder_5 = _2933;
            }
            _3054 = frontier_phi_58_59_ladder_5;
            _3056 = frontier_phi_58_59_ladder_4;
            _3058 = frontier_phi_58_59_ladder;
            _3060 = frontier_phi_58_59_ladder_3;
            _3062 = frontier_phi_58_59_ladder_2;
            _3064 = frontier_phi_58_59_ladder_1;
        }
        float _3069 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _2845 = (_3069 * _3060) + _2297;
        _2847 = (_3069 * _3062) + _2299;
        _2849 = (_3069 * _3064) + _2301;
        _2851 = ((_3054 * 0.039999999105930328369140625) * _3069) + _2630;
        _2853 = ((_3056 * 0.039999999105930328369140625) * _3069) + _2632;
        _2855 = ((_3058 * 0.039999999105930328369140625) * _3069) + _2634;
    }
    else
    {
        _2845 = _2297;
        _2847 = _2299;
        _2849 = _2301;
        _2851 = _2630;
        _2853 = _2632;
        _2855 = _2634;
    }
    float _4859 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4870 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4881 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2872 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2845 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1083))) + ((_2851 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2847 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1083))) + ((_2853 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2849 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1083))) + ((_2855 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    uint _2875 = _263 + 6u;
    float _2883 = _1020 / cbSceneParam._m0[86u].x;
    float _2884 = _1021 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _2959 = _2958 / _942;
        float _2970 = _2959 * _993;
        float _2971 = _994 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2974 = _2959 * _995;
        float _2976 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2977 = _2976 + cbSceneParam._m0[79u].w;
        float _2978 = cbSceneParam._m0[79u].w - _2971;
        float _2984 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2974 * _2974));
        float _2987 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2984;
        float _2992 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2994 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2972 - _2976) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_2977 > 0.0) ? exp2(_2992 * _2977) : (2.0 - exp2(_2994 * _2977))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2987;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : max(_2977, _2978));
            float _3117 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : min(_2977, _2978));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3171 = ((abs(_2984 / _2972) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_2992 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_2992 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_2994 * _3126) - exp2(_2994 * _3127)) * _3115))) + (_2987 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2903);
        _2996 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2998 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2901;
        _3000 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3002 = _3182 * _2903;
    }
    else
    {
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
        _3002 = _2903;
    }
    bool _3209;
    vec4 _3012;
    vec4 _3034;
    float _3036;
    float _3040;
    float _3041;
    float _3042;
    float _3043;
    bool _3053;
    for (;;)
    {
        _3012 = cbMatDynParam._m0[0u];
        float _3014 = roundEven(_3012.y);
        bool _3015 = _3014 == 3.0;
        float _3016 = log2(_3002);
        float _3023 = exp2(_3016 * cbSceneParam._m0[78u].x) * _2872;
        float _3024 = exp2(_3016 * cbSceneParam._m0[78u].y) * _2873;
        float _3025 = exp2(_3016 * cbSceneParam._m0[78u].z) * _2874;
        float _3032 = _1009 + (-0.5);
        _3034 = cbMtdParam._m0[1u];
        _3036 = _3034.y * _3032;
        float _3039 = (_3014 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3040 = _3039 * (_3015 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2996)));
        _3041 = _3039 * (_3015 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2998)));
        _3042 = _3039 * (_3015 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _3000)));
        _3043 = _3032 * 0.999000012874603271484375;
        _3053 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3053)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3043) < 0.5)
            {
                _3209 = true;
                break;
            }
        }
        uint _3150 = _1058 + uint(_3012.w);
        if ((cbInstanceData._m0[_3150].w < 1.0) && ((cbInstanceData._m0[_3150].w + _3043) < 0.5))
        {
            _3209 = true;
            break;
        }
        if ((_3036 + 1.0) < _3034.x)
        {
            _3209 = true;
            break;
        }
        _3209 = false;
        break;
    }
    float _3414;
    if (_3209)
    {
        discard_state = true;
        _3414 = 0.0;
    }
    else
    {
        _3414 = cbInstanceData._m0[_2875].w;
    }
    SV_Target.x = _3040;
    SV_Target.y = _3041;
    SV_Target.z = _3042;
    SV_Target.w = _3414;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
    discard_exit();
}


