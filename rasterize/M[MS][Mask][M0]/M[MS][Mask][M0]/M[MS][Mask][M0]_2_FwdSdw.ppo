#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1051;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _294.x * cbMtdParam._m0[11u].x;
    float _300 = _294.y * cbMtdParam._m0[11u].y;
    float _301 = _294.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3643 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _419 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _270.x) * ((_406 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299);
    float _422 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _270.y) * ((_406 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300);
    float _425 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _270.z) * ((_406 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301);
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _406) + _459;
    float _471 = ((((_438.x - _457) * _406) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _406) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3654 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _507 = (((_495.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _508 = (((_495.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _512 = (cbMtdParam._m0[19u].w * (_495.z - _468)) + _468;
    float _516 = cbMtdParam._m0[22u].x + _495.w;
    float _519 = fma(_479, _217 * NORMAL.x, fma(_508, _224 * TANGENT.x, (_210 * _202) * _507));
    float _522 = fma(_479, _217 * NORMAL.y, fma(_508, _224 * TANGENT.y, (_210 * _203) * _507));
    float _525 = fma(_479, _217 * NORMAL.z, fma(_508, _224 * TANGENT.z, (_210 * _204) * _507));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3665 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _533 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3687 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3698 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3709 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _639 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _642 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _656 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _662 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_656].x;
    float _663 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_656].y;
    float _664 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_656].z;
    float _3720 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _680 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * TEXCOORD_5.w) * _676.x;
    float _681 = dot(vec3(_530, _531, _532), vec3(_609, _610, _611));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _530) - _609;
    float _689 = (_684 * _531) - _610;
    float _690 = (_684 * _532) - _611;
    float _694 = abs(dot(vec3(_609, _610, _611), vec3(_530, _531, _532)));
    float _3753 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_533);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _779 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _783 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _808 = _741 + _530;
        float _809 = _745 + _531;
        float _810 = _749 + _532;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_530, _531, _532), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3801 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_530, _531, _532), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3834 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_530, _531, _532), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3867 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1094 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1098 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1121 = _741 + _530;
        float _1122 = _745 + _531;
        float _1123 = _749 + _532;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_530, _531, _532), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3930 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_530, _531, _532), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3963 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_530, _531, _532), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3996 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1051;
        _1360 = _1051;
        _1361 = _1051;
        _1362 = _1051;
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1063)) + _1063;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1064)) + _1064;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1065)) + _1065;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _688 * 0.5;
    float _1428 = _689 * 0.5;
    float _1429 = _690 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1559 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1562 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1590 = frontier_phi_14_12_ladder;
        }
        float _1761;
        if (_1559 > 0.0)
        {
            _1761 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1761 = frontier_phi_23_19_ladder;
        }
        float _2056;
        if (_1562 > 0.0)
        {
            _2056 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2056 = frontier_phi_35_30_ladder;
        }
        float _2058 = isnan(_1761) ? _1590 : (isnan(_1590) ? _1761 : min(_1590, _1761));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1556) + _1545;
        float _2064 = (_2059 * _1559) + _1549;
        float _2065 = (_2059 * _1562) + _1553;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_13_35_ladder = _2210.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2210.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2210.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_13_35_ladder_2;
        _1580 = frontier_phi_13_35_ladder_1;
        _1582 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1496);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1656 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1659 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1766;
        if (_1653 > 0.0)
        {
            _1766 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1766 = frontier_phi_25_21_ladder;
        }
        float _2083;
        if (_1656 > 0.0)
        {
            _2083 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2083 = frontier_phi_37_32_ladder;
        }
        float _2410;
        if (_1659 > 0.0)
        {
            _2410 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2410 = frontier_phi_47_44_ladder;
        }
        float _2412 = isnan(_2083) ? _1766 : (isnan(_1766) ? _2083 : min(_1766, _2083));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1653) + _1642;
        float _2418 = (_2413 * _1656) + _1646;
        float _2419 = (_2413 * _1659) + _1650;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_22_47_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_22_47_ladder_2;
        _1680 = frontier_phi_22_47_ladder_1;
        _1682 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1694 = ((((1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_709 * _696)) * _680;
    float _1695 = _1694 * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1696 = _1694 * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1697 = _1694 * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1700 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1753 = _1740 / _1752;
    float _1754 = _1744 / _1752;
    float _1755 = _1748 / _1752;
    float _1902;
    float _1903;
    float _1904;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1782 = ((uint(_1755 > cbSceneParam._m0[59u].y) + uint(_1755 > cbSceneParam._m0[59u].x)) + uint(_1755 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1783 = _1782 + 43u;
        uint _1791 = _1782 + 44u;
        uint _1799 = _1782 + 45u;
        uint _1807 = _1782 + 46u;
        float _1818 = fma(_1752, cbSceneParam._m0[_1783].w, fma(_1748, cbSceneParam._m0[_1783].z, fma(_1744, cbSceneParam._m0[_1783].y, _1740 * cbSceneParam._m0[_1783].x)));
        float _1822 = fma(_1752, cbSceneParam._m0[_1791].w, fma(_1748, cbSceneParam._m0[_1791].z, fma(_1744, cbSceneParam._m0[_1791].y, _1740 * cbSceneParam._m0[_1791].x)));
        float _1830 = fma(_1752, cbSceneParam._m0[_1807].w, fma(_1748, cbSceneParam._m0[_1807].z, fma(_1744, cbSceneParam._m0[_1807].y, _1740 * cbSceneParam._m0[_1807].x)));
        float _1835 = cbSceneParam._m0[33u].z * _1830;
        float _1837 = cbSceneParam._m0[33u].w * _1830;
        float _1840 = fma(_1752, cbSceneParam._m0[_1799].w, fma(_1748, cbSceneParam._m0[_1799].z, fma(_1744, cbSceneParam._m0[_1799].y, _1740 * cbSceneParam._m0[_1799].x))) / _1830;
        float _1888 = (cbSceneParam._m0[33u].x - sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755))) * cbSceneParam._m0[33u].y;
        float _4122 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1895 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 + _1818) / _1830, (_1837 + _1822) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1837 + _1818) / _1830, (_1822 - _1835) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 - _1835) / _1830, (_1822 - _1837) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 - _1837) / _1830, (_1835 + _1822) / _1830), _1840), 0.0)).x), vec4(0.25)));
        _1902 = 1.0 - (_1895 * cbSceneParam._m0[34u].x);
        _1903 = 1.0 - (_1895 * cbSceneParam._m0[34u].y);
        _1904 = 1.0 - (_1895 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1902 = 1.0;
        _1903 = 1.0;
        _1904 = 1.0;
    }
    float _1968;
    float _1970;
    float _1972;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1956 = fma(_1752, cbSceneParam._m0[63u].w, fma(_1748, cbSceneParam._m0[63u].z, fma(_1744, cbSceneParam._m0[63u].y, _1740 * cbSceneParam._m0[63u].x)));
        float _1957 = fma(_1752, cbSceneParam._m0[60u].w, fma(_1748, cbSceneParam._m0[60u].z, fma(_1744, cbSceneParam._m0[60u].y, _1740 * cbSceneParam._m0[60u].x))) / _1956;
        float _1958 = fma(_1752, cbSceneParam._m0[61u].w, fma(_1748, cbSceneParam._m0[61u].z, fma(_1744, cbSceneParam._m0[61u].y, _1740 * cbSceneParam._m0[61u].x))) / _1956;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1957 >= cbSceneParam._m0[64u].x) && (_1958 >= cbSceneParam._m0[64u].y)) && (_1957 <= cbSceneParam._m0[64u].z)) && (_1958 <= cbSceneParam._m0[64u].w))
        {
            float _2096 = fma(_1752, cbSceneParam._m0[62u].w, fma(_1748, cbSceneParam._m0[62u].z, fma(_1744, cbSceneParam._m0[62u].y, _1740 * cbSceneParam._m0[62u].x))) / _1956;
            float _2100 = isnan(cbSceneParam._m0[41u].w) ? _2096 : (isnan(_2096) ? cbSceneParam._m0[41u].w : max(_2096, cbSceneParam._m0[41u].w));
            float _2143 = (cbSceneParam._m0[33u].x - sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755))) * cbSceneParam._m0[33u].y;
            float _4138 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
            float _2150 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1957, cbSceneParam._m0[33u].w + _1958), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1957, _1958 - cbSceneParam._m0[33u].z), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1957 - cbSceneParam._m0[33u].z, _1958 - cbSceneParam._m0[33u].w), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1957 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1958), _2100), 0.0)).x), vec4(0.25)));
            float _2154 = 1.0 - (_2150 * cbSceneParam._m0[34u].x);
            float _2155 = 1.0 - (_2150 * cbSceneParam._m0[34u].y);
            float _2156 = 1.0 - (_2150 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2156) ? _1904 : (isnan(_1904) ? _2156 : min(_1904, _2156));
            frontier_phi_34_33_ladder_1 = isnan(_2155) ? _1903 : (isnan(_1903) ? _2155 : min(_1903, _2155));
            frontier_phi_34_33_ladder_2 = isnan(_2154) ? _1902 : (isnan(_1902) ? _2154 : min(_1902, _2154));
        }
        else
        {
            frontier_phi_34_33_ladder = _1904;
            frontier_phi_34_33_ladder_1 = _1903;
            frontier_phi_34_33_ladder_2 = _1902;
        }
        _1968 = frontier_phi_34_33_ladder_2;
        _1970 = frontier_phi_34_33_ladder_1;
        _1972 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1968 = _1902;
        _1970 = _1903;
        _1972 = _1904;
    }
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1987 = _680 + (-1.0);
    float _1992 = (cbLight._m0[_1980].x * _1987) + 1.0;
    float _1993 = (cbLight._m0[_1980].y * _1987) + 1.0;
    float _1994 = (cbLight._m0[_1980].z * _1987) + 1.0;
    float _1995 = (cbLight._m0[_1980].w * _1987) + 1.0;
    uint _1996 = _1979 + 5u;
    float _2002 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2006 = _1979 + 4u;
    float _2015 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2019 = _1979 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_530, _531, _532));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_530, _531, _532));
    float _4174 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4185 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1996].x * _2002) * _2040) + (((cbLight._m0[_2006].x * _1968) * _2015) * _2038);
    float _2048 = ((_2002 * cbLight._m0[_1996].y) * _2040) + (((cbLight._m0[_2006].y * _1970) * _2015) * _2038);
    float _2049 = ((_2002 * cbLight._m0[_1996].z) * _2040) + (((cbLight._m0[_2006].z * _1972) * _2015) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1979 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2055)
    {
        _2157 = _2047;
        _2159 = _2048;
        _2161 = _2049;
    }
    else
    {
        uint _2165 = _1979 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_1979 + 2u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4196 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2184 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2047;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2048;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2049;
    }
    bool _2164 = _2053.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2164)
    {
        _2219 = _2157;
        _2221 = _2159;
        _2223 = _2161;
    }
    else
    {
        uint _2381 = _1979 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_1979 + 3u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4212 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2400 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2219 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2157;
        _2221 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2159;
        _2223 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2161;
    }
    uint _2226 = _1979 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _533) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1979].x + _609;
    float _2242 = cbLight._m0[_1979].y + _610;
    float _2243 = cbLight._m0[_1979].z + _611;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1979].xyz));
    float _4228 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _2255 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2256 = dot(vec3(_530, _531, _532), vec3(_2248, _2249, _2250));
    float _4250 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2248, _2249, _2250));
    float _4261 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2255 * ((_2254 * _2280) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2280) + _2240) * _2254))) * _2254;
    float _4272 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2307 = _1979 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _533) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2019].x + _609;
    float _2321 = cbLight._m0[_2019].y + _610;
    float _2322 = cbLight._m0[_2019].z + _611;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2019].xyz));
    float _4283 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2334 = dot(vec3(_530, _531, _532), vec3(_2327, _2328, _2329));
    float _4294 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2327, _2328, _2329));
    float _4305 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2356 = 1.0 - _2319;
    float _2366 = (0.5 / (((_2255 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2356) + _2319) * _2333))) * _2333;
    float _4316 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2378 = (((_2355 * cbLight._m0[_2307].x) * _2368) * _2002) + ((((cbLight._m0[_2226].x * _1968) * _2279) * _2293) * _2015);
    float _2379 = (((_2355 * cbLight._m0[_2307].y) * _2368) * _2002) + ((((cbLight._m0[_2226].y * _1970) * _2279) * _2293) * _2015);
    float _2380 = (((_2355 * cbLight._m0[_2307].z) * _2368) * _2002) + ((((cbLight._m0[_2226].z * _1972) * _2279) * _2293) * _2015);
    float _2436;
    float _2438;
    float _2440;
    if (_2055)
    {
        _2436 = _2378;
        _2438 = _2379;
        _2440 = _2380;
    }
    else
    {
        uint _2442 = _1979 + 2u;
        uint _2446 = _1979 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _533) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _609;
        float _2463 = cbLight._m0[_2442].y + _610;
        float _2464 = cbLight._m0[_2442].z + _611;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2442].xyz));
        float _4327 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2476 = dot(vec3(_530, _531, _532), vec3(_2469, _2470, _2471));
        float _4338 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4349 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2255 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2498) + _2461) * _2475))) * _2475;
        float _4360 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2436 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2378;
        _2438 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2379;
        _2440 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2380;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2164)
    {
        _2542 = _2436;
        _2544 = _2438;
        _2546 = _2440;
    }
    else
    {
        uint _2553 = _1979 + 3u;
        uint _2557 = _1979 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _533) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _609;
        float _2574 = cbLight._m0[_2553].y + _610;
        float _2575 = cbLight._m0[_2553].z + _611;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2553].xyz));
        float _4376 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2587 = dot(vec3(_530, _531, _532), vec3(_2580, _2581, _2582));
        float _4387 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4398 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2255 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2609) + _2572) * _2586))) * _2586;
        float _4409 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2542 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2436;
        _2544 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2438;
        _2546 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2440;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_1977.y == 0u)
    {
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2644)));
        float _2665 = (log2(_1755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            uint _2906 = 0u;
            uint _2915;
            bool _2916;
            for (;;)
            {
                _2915 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                _2916 = _2915 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2916)
                {
                    frontier_phi_66_pred = _2905;
                    frontier_phi_66_pred_1 = _2904;
                    frontier_phi_66_pred_2 = _2903;
                    frontier_phi_66_pred_3 = _2902;
                    frontier_phi_66_pred_4 = _2901;
                    frontier_phi_66_pred_5 = _2900;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2915;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2906 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _1753;
                        float _3091 = _3050.y - _1754;
                        float _3092 = _3050.z - _1755;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_636, _639, _642), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4435 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _1753;
                        float _3126 = (-0.0) - _1754;
                        float _3127 = (-0.0) - _1755;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3141 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _696;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3132 + _3097;
                        float _3153 = _3133 + _3098;
                        float _3154 = _3134 + _3099;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_636, _639, _642), vec3(_3132, _3133, _3134));
                        float _4451 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3166 = dot(vec3(_636, _639, _642), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4462 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3110 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3100) + _3175;
                        float _4473 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4484 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3173 * _3173) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2959 = (_3121 * _3069.x) + _3027;
                        _2960 = (_3121 * _3069.y) + _3028;
                        _2961 = (_3121 * _3069.z) + _3029;
                        _2956 = (_3201 * _3086.x) + _3024;
                        _2957 = (_3201 * _3086.y) + _3025;
                        _2958 = (_3201 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2960;
                    frontier_phi_66_pred_2 = _2959;
                    frontier_phi_66_pred_3 = _2958;
                    frontier_phi_66_pred_4 = _2957;
                    frontier_phi_66_pred_5 = _2956;
                }
                _2766 = frontier_phi_66_pred;
                _2764 = frontier_phi_66_pred_1;
                _2762 = frontier_phi_66_pred_2;
                _2760 = frontier_phi_66_pred_3;
                _2758 = frontier_phi_66_pred_4;
                _2756 = frontier_phi_66_pred_5;
                uint _2907 = _2906 + 1u;
                if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2900 = _2756;
                    _2901 = _2758;
                    _2902 = _2760;
                    _2903 = _2762;
                    _2904 = _2764;
                    _2905 = _2766;
                    _2906 = _2907;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((4294967295u << _2772) & _2675) == 0u)
        {
            _2868 = _2755;
            _2870 = _2757;
            _2872 = _2759;
            _2874 = _2761;
            _2876 = _2763;
            _2878 = _2765;
        }
        else
        {
            float _2893 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
            float _2894 = _2893 * _1753;
            float _2895 = _2893 * _1754;
            float _2896 = _2893 * _1755;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _3007 = _2755;
                float _3008 = _2757;
                float _3009 = _2759;
                float _3010 = _2761;
                float _3011 = _2763;
                float _3012 = _2765;
                uint _3013 = _2772;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3023)
                    {
                        frontier_phi_72_pred = _3012;
                        frontier_phi_72_pred_1 = _3011;
                        frontier_phi_72_pred_2 = _3010;
                        frontier_phi_72_pred_3 = _3009;
                        frontier_phi_72_pred_4 = _3008;
                        frontier_phi_72_pred_5 = _3007;
                    }
                    else
                    {
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3219 = _3007;
                        float _3220 = _3008;
                        float _3221 = _3009;
                        float _3222 = _3010;
                        float _3223 = _3011;
                        float _3224 = _3012;
                        uint _3225 = _3022;
                        uint _3226;
                        vec4 _3251;
                        float _3252;
                        vec4 _3267;
                        vec3 _3279;
                        vec4 _3294;
                        vec4 _3310;
                        float _3356;
                        bool _3357;
                        for (;;)
                        {
                            uint _3236 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3225));
                            _3226 = (_3225 + 4294967295u) & _3225;
                            uint _3238 = _3236 * 40u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3252 = _3251.w;
                            uint _3254 = (_3236 * 40u) + 4u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3236 * 40u) + 8u;
                            _3279 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x));
                            uint _3281 = (_3236 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3236 * 40u) + 20u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3236 * 40u) + 24u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3331 = (_3236 * 40u) + 28u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3356 = fma(_1755, _3344.z, fma(_1754, _3344.y, _3344.x * _1753)) + _3344.w;
                            _3357 = !((fma(_1755, _3325.z, fma(_1754, _3325.y, _3325.x * _1753)) + _3325.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3357)
                            {
                                float _3384 = _3251.x - _1753;
                                float _3385 = _3251.y - _1754;
                                float _3386 = _3251.z - _1755;
                                float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                                float _3390 = inversesqrt(_3387);
                                float _3391 = _3390 * _3384;
                                float _3392 = _3390 * _3385;
                                float _3393 = _3390 * _3386;
                                float _3397 = 1.0 - (_3387 / (_3252 * _3252));
                                float _4495 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3402 = sqrt(_3387) * _3267.w;
                                float _3404 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                                float _3405 = _3404 * _3404;
                                float _3408 = ((1.0 - _3405) * dot(vec3(_3391, _3392, _3393), vec3(_636, _639, _642))) + _3405;
                                float _3411 = _3402 * _3402;
                                float _3415 = (fma(_1755, _3294.z, fma(_1754, _3294.y, _3294.x * _1753)) + _3294.w) / _3356;
                                float _3416 = (fma(_1755, _3310.z, fma(_1754, _3310.y, _3310.x * _1753)) + _3310.w) / _3356;
                                float _3420 = 1.0 - dot(vec2(_3415, _3416), vec2(_3415, _3416));
                                float _4511 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3422 = _3421 * (((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3398) / ((_3411 * 0.699999988079071044921875) + 1.0));
                                float _3434 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                                float _3435 = 1.0 - _696;
                                float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                                float _3443 = _3442 * _3442;
                                float _3444 = _3443 * _3443;
                                float _3445 = _3391 - _2894;
                                float _3446 = _3392 - _2895;
                                float _3447 = _3393 - _2896;
                                float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                                float _3455 = dot(vec3(_636, _639, _642), vec3((-0.0) - _2894, (-0.0) - _2895, (-0.0) - _2896));
                                float _4522 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3459 = dot(vec3(_636, _639, _642), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                                float _4533 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                                float _3467 = _3404 * _3443;
                                float _3468 = _3467 * _3467;
                                float _3474 = ((1.0 - _3468) * dot(vec3(_636, _639, _642), vec3(_3391, _3392, _3393))) + _3468;
                                float _4544 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3476 = 1.0 - _3443;
                                float _3486 = (0.5 / (((_3475 * ((_3458 * _3476) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3443) * _3458))) * _3475;
                                float _4555 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3496 = (_3421 * _3398) * (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3466 * _3466) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3422 * _3267.y;
                                frontier_phi_78_pred_1 = _3422 * _3267.x;
                                frontier_phi_78_pred_2 = _3496 * _3279.z;
                                frontier_phi_78_pred_3 = _3496 * _3279.y;
                                frontier_phi_78_pred_4 = _3496 * _3279.x;
                                frontier_phi_78_pred_5 = _3422 * _3267.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3504 = frontier_phi_78_pred;
                            _3503 = frontier_phi_78_pred_1;
                            _3502 = frontier_phi_78_pred_2;
                            _3501 = frontier_phi_78_pred_3;
                            _3500 = frontier_phi_78_pred_4;
                            _3505 = frontier_phi_78_pred_5;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            _3211 = _3505 + _3224;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            if (_3226 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3226;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3211;
                        frontier_phi_72_pred_1 = _3210;
                        frontier_phi_72_pred_2 = _3209;
                        frontier_phi_72_pred_3 = _3208;
                        frontier_phi_72_pred_4 = _3207;
                        frontier_phi_72_pred_5 = _3206;
                    }
                    _2879 = frontier_phi_72_pred;
                    _2877 = frontier_phi_72_pred_1;
                    _2875 = frontier_phi_72_pred_2;
                    _2873 = frontier_phi_72_pred_3;
                    _2871 = frontier_phi_72_pred_4;
                    _2869 = frontier_phi_72_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2869;
                        _3008 = _2871;
                        _3009 = _2873;
                        _3010 = _2875;
                        _3011 = _2877;
                        _3012 = _2879;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2879;
                frontier_phi_60_61_ladder_1 = _2877;
                frontier_phi_60_61_ladder_2 = _2873;
                frontier_phi_60_61_ladder_3 = _2871;
                frontier_phi_60_61_ladder_4 = _2869;
                frontier_phi_60_61_ladder_5 = _2875;
            }
            else
            {
                frontier_phi_60_61_ladder = _2765;
                frontier_phi_60_61_ladder_1 = _2763;
                frontier_phi_60_61_ladder_2 = _2759;
                frontier_phi_60_61_ladder_3 = _2757;
                frontier_phi_60_61_ladder_4 = _2755;
                frontier_phi_60_61_ladder_5 = _2761;
            }
            _2868 = frontier_phi_60_61_ladder_4;
            _2870 = frontier_phi_60_61_ladder_3;
            _2872 = frontier_phi_60_61_ladder_2;
            _2874 = frontier_phi_60_61_ladder_5;
            _2876 = frontier_phi_60_61_ladder_1;
            _2878 = frontier_phi_60_61_ladder;
        }
        float _2883 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2688 = (_2883 * _2874) + _2219;
        _2690 = (_2883 * _2876) + _2221;
        _2692 = (_2883 * _2878) + _2223;
        _2694 = ((_2868 * 0.039999999105930328369140625) * _2883) + _2542;
        _2696 = ((_2870 * 0.039999999105930328369140625) * _2883) + _2544;
        _2698 = ((_2872 * 0.039999999105930328369140625) * _2883) + _2546;
    }
    else
    {
        _2688 = _2219;
        _2690 = _2221;
        _2692 = _2223;
        _2694 = _2542;
        _2696 = _2544;
        _2698 = _2546;
    }
    float _4571 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4582 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4593 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    uint _2718 = _230 + 6u;
    float _2726 = _617 / cbSceneParam._m0[86u].x;
    float _2727 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2781 = _2780 / _551;
        float _2792 = _2781 * _602;
        float _2793 = _603 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2796 = _2781 * _604;
        float _2798 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2799 = _2798 + cbSceneParam._m0[79u].w;
        float _2800 = cbSceneParam._m0[79u].w - _2793;
        float _2806 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2796 * _2796));
        float _2809 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2806;
        float _2814 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2816 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2969;
        if (abs((_2794 - _2798) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2969 = ((((_2799 > 0.0) ? exp2(_2814 * _2799) : (2.0 - exp2(_2816 * _2799))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2809;
        }
        else
        {
            float _2929 = 1.0 / cbSceneParam._m0[80u].x;
            float _2930 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : max(_2799, _2800));
            float _2931 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : min(_2799, _2800));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            _2969 = ((abs(_2806 / _2794) * cbSceneParam._m0[80u].y) * ((((_2940 - _2941) * 2.0) - ((exp2(_2814 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0)))) - exp2(_2814 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))))) * _2929)) - ((exp2(_2816 * _2940) - exp2(_2816 * _2941)) * _2929))) + (_2809 * cbSceneParam._m0[80u].z);
        }
        vec4 _2971 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _2980 = exp2((_2969 * (-1.44269502162933349609375)) * (1.0 - _2971.w));
        float _2981 = log2(_2980);
        float _2997 = log2(_2746);
        _2818 = (exp2(_2997 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].x)) * _2971.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2820 = (exp2(_2997 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].y)) * _2971.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2822 = (exp2(_2997 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].z)) * _2971.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2824 = _2980 * _2746;
    }
    else
    {
        _2818 = _2743;
        _2820 = _2744;
        _2822 = _2745;
        _2824 = _2746;
    }
    float _2836 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2837 = _2836 == 3.0;
    float _2838 = log2(_2824);
    float _2845 = exp2(_2838 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2688 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _680))) + ((_2694 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2846 = exp2(_2838 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2690 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _680))) + ((_2696 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2847 = exp2(_2838 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2692 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _680))) + ((_2698 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2856 = (_2836 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2856 * (_2837 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.y = _2856 * (_2837 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.z = _2856 * (_2837 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2822)));
    SV_Target.w = cbInstanceData._m0[_2718].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
}


