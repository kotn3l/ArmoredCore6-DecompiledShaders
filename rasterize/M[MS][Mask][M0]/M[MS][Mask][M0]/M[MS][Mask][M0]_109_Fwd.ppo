#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1462;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3767 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3778 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3789 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _410.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3800 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _487 = (_480 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _488 = (_480 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _489 = (_480 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _410.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[24u].z) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3811 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _560 = (_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487;
    float _561 = (_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488;
    float _562 = (_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _302) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _303) + cbTextureTilingScale._m0[24u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _599 = _597.x;
    float _609 = dot(vec4(_599, _597.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _621 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _410.z) * 2.0) - ((((_599 - _609) * cbMtdParam._m0[24u].z) + _609) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3822 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _632 = (_339.x * cbMtdParam._m0[9u].x) * ((_622 * ((_580.x * cbMtdParam._m0[14u].x) - _560)) + _560);
    float _633 = (_339.y * cbMtdParam._m0[9u].y) * ((_622 * ((_580.y * cbMtdParam._m0[14u].y) - _561)) + _561);
    float _634 = (_339.z * cbMtdParam._m0[9u].z) * ((_622 * ((_580.z * cbMtdParam._m0[14u].z) - _562)) + _562);
    float _638 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _632;
    float _641 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _633;
    float _644 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _634;
    float _652 = (((_632 - _638) * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) + _638) * 4.55000019073486328125;
    float _654 = (((_633 - _641) * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) + _641) * 4.55000019073486328125;
    float _656 = (((_634 - _644) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) + _644) * 4.55000019073486328125;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    float _719 = ((_691.x - _710) * _480) + _710;
    float _720 = ((_691.y - _711) * _480) + _711;
    float _721 = ((_691.z - _712) * _480) + _712;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _744 = ((_733.x - _719) * _553) + _719;
    float _745 = ((_733.y - _720) * _553) + _720;
    float _746 = ((_733.z - _721) * _553) + _721;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _302) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _303) + cbTextureTilingScale._m0[23u].w));
    float _771 = ((_758.z - _746) * _622) + _746;
    float _774 = ((((_758.x - _744) * _622) + _744) * 2.0) + (-1.0);
    float _775 = ((((_758.y - _745) * _622) + _745) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3833 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _813 = (_774 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_668.x * 2.0) + (-1.0)))) + (((_801.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _814 = (_775 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_668.y * 2.0) + (-1.0)))) + (((_801.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _826 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _828 = _826.x;
    float _829 = 1.0 - _828;
    float _857 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_828 - _829) * cbMtdParam._m0[24u].y) + _829) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3844 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _866 = ((((cbMtdParam._m0[10u].x - _652) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _858) + _652;
    float _867 = ((((cbMtdParam._m0[10u].y - _654) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _858) + _654;
    float _868 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _858) + _656;
    float _873 = (((_668.z - _771) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _771;
    float _877 = ((_801.z - _873) * cbMtdParam._m0[19u].w) + _873;
    float _881 = ((cbMtdParam._m0[23u].y - _877) * _858) + _877;
    vec4 _900 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _906 = (_900.x * 2.0) + (-1.0);
    float _907 = (_900.y * 2.0) + (-1.0);
    float _908 = dot(vec2(_906, _907), vec2(_906, _907));
    float _3855 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _924 = (_858 * (((cbMtdParam._m0[22u].z * _813) - _813) + _906)) + _813;
    float _925 = (_858 * (((cbMtdParam._m0[22u].z * _814) - _814) + _907)) + _814;
    float _926 = (_858 * (sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) - _781)) + _781;
    float _928 = cbMtdParam._m0[22u].x + _801.w;
    float _931 = fma(_926, _251 * NORMAL.x, fma(_925, _258 * TANGENT.x, (_244 * _236) * _924));
    float _934 = fma(_926, _251 * NORMAL.y, fma(_925, _258 * TANGENT.y, (_244 * _237) * _924));
    float _937 = fma(_926, _251 * NORMAL.z, fma(_925, _258 * TANGENT.z, (_244 * _238) * _924));
    float _941 = inversesqrt(dot(vec3(_931, _934, _937), vec3(_931, _934, _937)));
    float _942 = _941 * _931;
    float _943 = _941 * _934;
    float _944 = _941 * _937;
    float _3866 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _945 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3888 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _3899 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _3910 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _963 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_944, cbSceneParam._m0[5u].z, fma(_943, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _942));
    float _1050 = fma(_944, cbSceneParam._m0[6u].z, fma(_943, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _942));
    float _1053 = fma(_944, cbSceneParam._m0[7u].z, fma(_943, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _942));
    uint _1067 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _3921 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1091 = ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_942, _943, _944), vec3(_1020, _1021, _1022));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _942) - _1020;
    float _1100 = (_1095 * _943) - _1021;
    float _1101 = (_1095 * _944) - _1022;
    float _1105 = abs(dot(vec3(_1020, _1021, _1022), vec3(_942, _943, _944)));
    float _3954 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_945);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1190 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1194 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1219 = _1152 + _942;
        float _1220 = _1156 + _943;
        float _1221 = _1160 + _944;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_942, _943, _944), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4002 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_942, _943, _944), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4035 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_942, _943, _944), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4068 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1503 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1507 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1530 = _1152 + _942;
        float _1531 = _1156 + _943;
        float _1532 = _1160 + _944;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_942, _943, _944), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4131 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_942, _943, _944), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4164 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_942, _943, _944), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4197 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1462;
        _1769 = _1462;
        _1770 = _1462;
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1474)) + _1474;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1475)) + _1475;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1476)) + _1476;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1099 * 0.5;
    float _1837 = _1100 * 0.5;
    float _1838 = _1101 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _945);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _1967 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _1970 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1998 = frontier_phi_14_12_ladder;
        }
        float _2200;
        if (_1967 > 0.0)
        {
            _2200 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2200 = frontier_phi_23_19_ladder;
        }
        float _2443;
        if (_1970 > 0.0)
        {
            _2443 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2443 = frontier_phi_35_30_ladder;
        }
        float _2445 = isnan(_2200) ? _1998 : (isnan(_1998) ? _2200 : min(_1998, _2200));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1964) + _1953;
        float _2451 = (_2446 * _1967) + _1957;
        float _2452 = (_2446 * _1970) + _1961;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_13_35_ladder = _2576.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2576.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2576.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_13_35_ladder_2;
        _1988 = frontier_phi_13_35_ladder_1;
        _1990 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1905);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _945);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2064 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2067 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2205;
        if (_2061 > 0.0)
        {
            _2205 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2205 = frontier_phi_25_21_ladder;
        }
        float _2470;
        if (_2064 > 0.0)
        {
            _2470 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2470 = frontier_phi_37_32_ladder;
        }
        float _2675;
        if (_2067 > 0.0)
        {
            _2675 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2675 = frontier_phi_46_43_ladder;
        }
        float _2677 = isnan(_2470) ? _2205 : (isnan(_2205) ? _2470 : min(_2205, _2470));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _2061) + _2050;
        float _2683 = (_2678 * _2064) + _2054;
        float _2684 = (_2678 * _2067) + _2058;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_22_46_ladder = _2883.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2883.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2883.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_22_46_ladder_2;
        _2088 = frontier_phi_22_46_ladder_1;
        _2090 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _1995);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2102 = ((((1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1120 * _1107)) * _1091;
    float _2103 = _2102 * ((cbModelParam._m0[1u].w * (_2086 - _1986)) + _1986);
    float _2104 = _2102 * ((cbModelParam._m0[1u].w * (_2088 - _1988)) + _1988);
    float _2105 = _2102 * ((cbModelParam._m0[1u].w * (_2090 - _1990)) + _1990);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _1091 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2159 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2163 = _2126 | 1u;
    float _2174 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_942, _943, _944));
    float _2177 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_942, _943, _944));
    float _4333 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _4344 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2182 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2184 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2191 = ((cbLight._m0[_2143].x * _2149) * _2184) + ((cbLight._m0[_2153].x * _2159) * _2182);
    float _2192 = ((_2149 * cbLight._m0[_2143].y) * _2184) + ((_2159 * cbLight._m0[_2153].y) * _2182);
    float _2193 = ((_2149 * cbLight._m0[_2143].z) * _2184) + ((_2159 * cbLight._m0[_2153].z) * _2182);
    uvec4 _2197 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2199 = _2197.x == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2199)
    {
        _2210 = _2191;
        _2212 = _2192;
        _2214 = _2193;
    }
    else
    {
        uint _2218 = _2126 + 6u;
        float _2234 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4355 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2237 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2210 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2191;
        _2212 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2192;
        _2214 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2193;
    }
    bool _2217 = _2197.y == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2217)
    {
        _2255 = _2210;
        _2257 = _2212;
        _2259 = _2214;
    }
    else
    {
        uint _2414 = _2126 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4371 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2433 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2255 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2210;
        _2257 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2212;
        _2259 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2214;
    }
    uint _2262 = _2126 + 8u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _945) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2126].x + _1020;
    float _2278 = cbLight._m0[_2126].y + _1021;
    float _2279 = cbLight._m0[_2126].z + _1022;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2126].xyz));
    float _4387 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2291 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2292 = dot(vec3(_942, _943, _944), vec3(_2284, _2285, _2286));
    float _4409 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2284, _2285, _2286));
    float _4420 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2276 * _2276;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2316 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2291 * ((_2290 * _2316) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2316) + _2276) * _2290))) * _2290;
    float _4431 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    uint _2340 = _2126 + 9u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _945) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2163].x + _1020;
    float _2354 = cbLight._m0[_2163].y + _1021;
    float _2355 = cbLight._m0[_2163].z + _1022;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2163].xyz));
    float _4442 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2367 = dot(vec3(_942, _943, _944), vec3(_2360, _2361, _2362));
    float _4453 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2360, _2361, _2362));
    float _4464 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2352 * _2352;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2352;
    float _2399 = (0.5 / (((_2291 * ((_2366 * _2389) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2389) + _2352) * _2366))) * _2366;
    float _4475 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    float _2411 = (((_2388 * cbLight._m0[_2340].x) * _2401) * _2149) + (((_2315 * cbLight._m0[_2262].x) * _2329) * _2159);
    float _2412 = (((_2388 * cbLight._m0[_2340].y) * _2401) * _2149) + (((_2315 * cbLight._m0[_2262].y) * _2329) * _2159);
    float _2413 = (((_2388 * cbLight._m0[_2340].z) * _2401) * _2149) + (((_2315 * cbLight._m0[_2262].z) * _2329) * _2159);
    float _2475;
    float _2477;
    float _2479;
    if (_2199)
    {
        _2475 = _2411;
        _2477 = _2412;
        _2479 = _2413;
    }
    else
    {
        uint _2481 = _2126 + 2u;
        uint _2485 = _2126 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _945) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _1020;
        float _2502 = cbLight._m0[_2481].y + _1021;
        float _2503 = cbLight._m0[_2481].z + _1022;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2481].xyz));
        float _4486 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2515 = dot(vec3(_942, _943, _944), vec3(_2508, _2509, _2510));
        float _4497 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4508 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2537 = 1.0 - _2500;
        float _2547 = (0.5 / (((_2291 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2537) + _2500) * _2514))) * _2514;
        float _4519 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2475 = (((_2536 * cbLight._m0[_2485].x) * _2549) * _2550) + _2411;
        _2477 = (((_2536 * cbLight._m0[_2485].y) * _2549) * _2550) + _2412;
        _2479 = (((_2536 * cbLight._m0[_2485].z) * _2549) * _2550) + _2413;
    }
    float _2585;
    float _2587;
    float _2589;
    if (_2217)
    {
        _2585 = _2475;
        _2587 = _2477;
        _2589 = _2479;
    }
    else
    {
        uint _2596 = _2126 + 3u;
        uint _2600 = _2126 + 11u;
        float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2596].w)) * _945) * 0.949999988079071044921875);
        float _2615 = _2614 * _2614;
        float _2616 = cbLight._m0[_2596].x + _1020;
        float _2617 = cbLight._m0[_2596].y + _1021;
        float _2618 = cbLight._m0[_2596].z + _1022;
        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
        float _2623 = _2622 * _2616;
        float _2624 = _2622 * _2617;
        float _2625 = _2622 * _2618;
        float _2626 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2596].xyz));
        float _4535 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2630 = dot(vec3(_942, _943, _944), vec3(_2623, _2624, _2625));
        float _4546 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2634 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_2623, _2624, _2625));
        float _4557 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2638 = _2615 * _2615;
        float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
        float _2651 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2652 = 1.0 - _2615;
        float _2662 = (0.5 / (((_2291 * ((_2629 * _2652) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2652) + _2615) * _2629))) * _2629;
        float _4568 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2585 = (((_2651 * cbLight._m0[_2600].x) * _2664) * _2665) + _2475;
        _2587 = (((_2651 * cbLight._m0[_2600].y) * _2664) * _2665) + _2477;
        _2589 = (((_2651 * cbLight._m0[_2600].z) * _2664) * _2665) + _2479;
    }
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_2124.y == 0u)
    {
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2740;
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2740;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2740;
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.x;
        uint _2767 = uint((float(_2755.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2756))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2756)));
        float _2777 = (log2(_2743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2778 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        uint _2781 = uint(isnan(14.0) ? _2778 : (isnan(_2778) ? 14.0 : min(_2778, 14.0)));
        uvec4 _2786 = texelFetch(g_lightClusterGridBuffer, int(((_2781 << 2u) + (_2767 << 6u)) >> 2u));
        uint _2787 = _2786.x;
        uint _2788 = _2755.z;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((((1u << ((_2788 >> 4u) & 15u)) + 4294967295u) & _2787) == 0u) || ((_2788 & 240u) == 0u))
        {
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
        }
        else
        {
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3049)
                {
                    frontier_phi_61_pred = _3033;
                    frontier_phi_61_pred_1 = _3038;
                    frontier_phi_61_pred_2 = _3037;
                    frontier_phi_61_pred_3 = _3036;
                    frontier_phi_61_pred_4 = _3035;
                    frontier_phi_61_pred_5 = _3034;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3048;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3039 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _2741;
                        float _3224 = _3183.y - _2742;
                        float _3225 = _3183.z - _2743;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_1047, _1050, _1053), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4594 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2741;
                        float _3259 = (-0.0) - _2742;
                        float _3260 = (-0.0) - _2743;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3275 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _1107;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_1047, _1050, _1053), vec3(_3265, _3266, _3267));
                        float _4610 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3300 = dot(vec3(_1047, _1050, _1053), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4621 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3243 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3233) + _3309;
                        float _4632 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4643 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3307 * _3307) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3092 = (_3254 * _3202.x) + _3160;
                        _3093 = (_3254 * _3202.y) + _3161;
                        _3094 = (_3254 * _3202.z) + _3162;
                        _3089 = (_3335 * _3219.x) + _3157;
                        _3090 = (_3335 * _3219.y) + _3158;
                        _3091 = (_3335 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_61_pred = _3089;
                    frontier_phi_61_pred_1 = _3094;
                    frontier_phi_61_pred_2 = _3093;
                    frontier_phi_61_pred_3 = _3092;
                    frontier_phi_61_pred_4 = _3091;
                    frontier_phi_61_pred_5 = _3090;
                }
                _2889 = frontier_phi_61_pred;
                _2899 = frontier_phi_61_pred_1;
                _2897 = frontier_phi_61_pred_2;
                _2895 = frontier_phi_61_pred_3;
                _2893 = frontier_phi_61_pred_4;
                _2891 = frontier_phi_61_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2889;
                    _3034 = _2891;
                    _3035 = _2893;
                    _3036 = _2895;
                    _3037 = _2897;
                    _3038 = _2899;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
        }
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.z;
        uint _2905 = (_2903 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2905) & _2787) == 0u)
        {
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
            float _3027 = _3026 * _2741;
            float _3028 = _3026 * _2742;
            float _3029 = _3026 * _2743;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2905 < ((_2903 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3140 = _2888;
                float _3141 = _2890;
                float _3142 = _2892;
                float _3143 = _2894;
                float _3144 = _2896;
                float _3145 = _2898;
                uint _3146 = _2905;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3156)
                    {
                        frontier_phi_67_pred = _3143;
                        frontier_phi_67_pred_1 = _3144;
                        frontier_phi_67_pred_2 = _3145;
                        frontier_phi_67_pred_3 = _3142;
                        frontier_phi_67_pred_4 = _3141;
                        frontier_phi_67_pred_5 = _3140;
                    }
                    else
                    {
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        float _3357 = _3144;
                        float _3358 = _3145;
                        uint _3359 = _3155;
                        uint _3360;
                        vec4 _3385;
                        float _3386;
                        vec4 _3401;
                        vec3 _3413;
                        vec4 _3428;
                        vec4 _3443;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3370 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3359));
                            _3360 = (_3359 + 4294967295u) & _3359;
                            uint _3372 = _3370 * 40u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3386 = _3385.w;
                            uint _3388 = (_3370 * 40u) + 4u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3370 * 40u) + 8u;
                            _3413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x));
                            uint _3415 = (_3370 * 40u) + 16u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3370 * 40u) + 20u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3370 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3370 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_2743, _3477.z, fma(_2742, _3477.y, _3477.x * _2741)) + _3477.w;
                            _3490 = !((fma(_2743, _3458.z, fma(_2742, _3458.y, _3458.x * _2741)) + _3458.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3385.x - _2741;
                                float _3518 = _3385.y - _2742;
                                float _3519 = _3385.z - _2743;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3386 * _3386));
                                float _4654 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3535 = sqrt(_3520) * _3401.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_1047, _1050, _1053))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_2743, _3428.z, fma(_2742, _3428.y, _3428.x * _2741)) + _3428.w) / _3489;
                                float _3549 = (fma(_2743, _3443.z, fma(_2742, _3443.y, _3443.x * _2741)) + _3443.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4670 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _1107;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _3027;
                                float _3579 = _3525 - _3028;
                                float _3580 = _3526 - _3029;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4681 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3592 = dot(vec3(_1047, _1050, _1053), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4692 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_1047, _1050, _1053), vec3(_3524, _3525, _3526))) + _3601;
                                float _4703 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4714 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3629 * _3413.x;
                                frontier_phi_73_pred_1 = _3629 * _3413.y;
                                frontier_phi_73_pred_2 = _3555 * _3401.z;
                                frontier_phi_73_pred_3 = _3555 * _3401.y;
                                frontier_phi_73_pred_4 = _3555 * _3401.x;
                                frontier_phi_73_pred_5 = _3629 * _3413.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_73_pred;
                            _3634 = frontier_phi_73_pred_1;
                            _3638 = frontier_phi_73_pred_2;
                            _3637 = frontier_phi_73_pred_3;
                            _3636 = frontier_phi_73_pred_4;
                            _3635 = frontier_phi_73_pred_5;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            if (_3360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3360;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3343;
                        frontier_phi_67_pred_1 = _3344;
                        frontier_phi_67_pred_2 = _3345;
                        frontier_phi_67_pred_3 = _3342;
                        frontier_phi_67_pred_4 = _3341;
                        frontier_phi_67_pred_5 = _3340;
                    }
                    _3008 = frontier_phi_67_pred;
                    _3010 = frontier_phi_67_pred_1;
                    _3012 = frontier_phi_67_pred_2;
                    _3006 = frontier_phi_67_pred_3;
                    _3004 = frontier_phi_67_pred_4;
                    _3002 = frontier_phi_67_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _3002;
                        _3141 = _3004;
                        _3142 = _3006;
                        _3143 = _3008;
                        _3144 = _3010;
                        _3145 = _3012;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3010;
                frontier_phi_55_56_ladder_1 = _3012;
                frontier_phi_55_56_ladder_2 = _3008;
                frontier_phi_55_56_ladder_3 = _3006;
                frontier_phi_55_56_ladder_4 = _3004;
                frontier_phi_55_56_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_55_56_ladder = _2896;
                frontier_phi_55_56_ladder_1 = _2898;
                frontier_phi_55_56_ladder_2 = _2894;
                frontier_phi_55_56_ladder_3 = _2892;
                frontier_phi_55_56_ladder_4 = _2890;
                frontier_phi_55_56_ladder_5 = _2888;
            }
            _3001 = frontier_phi_55_56_ladder_5;
            _3003 = frontier_phi_55_56_ladder_4;
            _3005 = frontier_phi_55_56_ladder_3;
            _3007 = frontier_phi_55_56_ladder_2;
            _3009 = frontier_phi_55_56_ladder;
            _3011 = frontier_phi_55_56_ladder_1;
        }
        float _3016 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2800 = (_3016 * _3007) + _2255;
        _2802 = (_3016 * _3009) + _2257;
        _2804 = (_3016 * _3011) + _2259;
        _2806 = ((_3001 * 0.039999999105930328369140625) * _3016) + _2585;
        _2808 = ((_3003 * 0.039999999105930328369140625) * _3016) + _2587;
        _2810 = ((_3005 * 0.039999999105930328369140625) * _3016) + _2589;
    }
    else
    {
        _2800 = _2255;
        _2802 = _2257;
        _2804 = _2259;
        _2806 = _2585;
        _2808 = _2587;
        _2810 = _2589;
    }
    float _4730 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4741 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4752 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    uint _2830 = _283 + 6u;
    float _2838 = _1028 / cbSceneParam._m0[86u].x;
    float _2839 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2853 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, (log2((isnan(cbSceneParam._m0[77u].w) ? _963 : (isnan(_963) ? cbSceneParam._m0[77u].w : min(_963, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2855 = _2853.x;
    float _2856 = _2853.y;
    float _2857 = _2853.z;
    float _2858 = _2853.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_963 > cbSceneParam._m0[78u].w)
    {
        float _2913 = isnan(_963) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _963 : min(cbSceneParam._m0[80u].w, _963));
        float _2914 = _2913 / _963;
        float _2925 = _2914 * _1013;
        float _2926 = _1014 * _2914;
        float _2927 = (-0.0) - _2926;
        float _2929 = _2914 * _1015;
        float _2931 = (cbSceneParam._m0[77u].w * _2927) / _2913;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2926;
        float _2939 = sqrt(((_2925 * _2925) + (_2926 * _2926)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2913)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2927 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3064 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3102 = ((abs(_2939 / _2927) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2949 * _3073) - exp2(_2949 * _3074)) * _3062))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2858);
        _2951 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2855;
        _2953 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2856;
        _2955 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2857;
        _2957 = _3113 * _2858;
    }
    else
    {
        _2951 = _2855;
        _2953 = _2856;
        _2955 = _2857;
        _2957 = _2858;
    }
    float _2969 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2970 = _2969 == 3.0;
    float _2971 = log2(_2957);
    float _2978 = exp2(_2971 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2800 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1091))) + ((_2806 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _2979 = exp2(_2971 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2802 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1091))) + ((_2808 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _2980 = exp2(_2971 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2804 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1091))) + ((_2810 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _2989 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2989 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.y = _2989 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.z = _2989 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
    SV_Target.w = cbInstanceData._m0[_2830].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2830].w;
}


