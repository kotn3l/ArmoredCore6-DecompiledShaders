#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1134;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3439 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _393 = (_386 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _394 = (_386 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _395 = (_386 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3450 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _532 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_518 - _519) * cbMtdParam._m0[24u].w) + _519) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3461 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _540 = (_533 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _541 = (_533 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _542 = (_533 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    float _546 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _566 = (_559.x * 2.0) + (-1.0);
    float _567 = (_559.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3472 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _576 = (_533 * (_559.z - _546)) + _546;
    float _579 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _580 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _592 = (((_566 - _579) + (cbMtdParam._m0[21u].x * _579)) * _533) + _579;
    float _593 = (((_567 - _580) + (cbMtdParam._m0[21u].x * _580)) * _533) + _580;
    float _594 = (_533 * (sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) - _475)) + _475;
    float _598 = cbMtdParam._m0[22u].x + _491.w;
    float _601 = fma(_594, _219 * NORMAL.x, fma(_593, _226 * TANGENT.x, (_212 * _204) * _592));
    float _604 = fma(_594, _219 * NORMAL.y, fma(_593, _226 * TANGENT.y, (_212 * _205) * _592));
    float _607 = fma(_594, _219 * NORMAL.z, fma(_593, _226 * TANGENT.z, (_212 * _206) * _592));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3483 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _615 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3505 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3516 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3527 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _722 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _725 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _739 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3538 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _763 = ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * TEXCOORD_5.w) * _759.x;
    float _764 = dot(vec3(_612, _613, _614), vec3(_692, _693, _694));
    float _767 = _764 * 2.0;
    float _771 = (_767 * _612) - _692;
    float _772 = (_767 * _613) - _693;
    float _773 = (_767 * _614) - _694;
    float _777 = abs(dot(vec3(_692, _693, _694), vec3(_612, _613, _614)));
    float _3571 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _779 = sqrt(_615);
    float _792 = exp2((_779 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_779 * 3.0));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _858 = fma(_832, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824));
        float _862 = fma(_832, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824));
        float _866 = fma(_832, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824));
        float _891 = _824 + _612;
        float _892 = _828 + _613;
        float _893 = _832 + _614;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _858;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _862;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _866;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_858 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_862 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_866 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_612, _613, _614), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3619 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_612, _613, _614), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3652 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_612, _613, _614), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3685 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_832, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _824));
        float _1177 = fma(_832, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _824));
        float _1181 = fma(_832, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _824));
        float _1204 = _824 + _612;
        float _1205 = _828 + _613;
        float _1206 = _832 + _614;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_612, _613, _614), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3748 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_612, _613, _614), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3781 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_612, _613, _614), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3814 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1134;
        _1443 = _1134;
        _1444 = _1134;
        _1445 = _1134;
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = _1134;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1147)) + _1147;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1148)) + _1148;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _771 * 0.5;
    float _1511 = _772 * 0.5;
    float _1512 = _773 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1626 = fma(_832, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824)) + cbModelParam._m0[13u].w;
        float _1630 = fma(_832, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824)) + cbModelParam._m0[14u].w;
        float _1634 = fma(_832, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824)) + cbModelParam._m0[15u].w;
        float _1637 = fma(_773, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771));
        float _1640 = fma(_773, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771));
        float _1643 = fma(_773, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771));
        float _1671;
        if (_1637 > 0.0)
        {
            _1671 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1671 = frontier_phi_14_12_ladder;
        }
        float _1871;
        if (_1640 > 0.0)
        {
            _1871 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1871 = frontier_phi_23_19_ladder;
        }
        float _2114;
        if (_1643 > 0.0)
        {
            _2114 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2114 = frontier_phi_35_30_ladder;
        }
        float _2116 = isnan(_1871) ? _1671 : (isnan(_1671) ? _1871 : min(_1671, _1871));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1637) + _1626;
        float _2122 = (_2117 * _1640) + _1630;
        float _2123 = (_2117 * _1643) + _1634;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2124;
        float _2128 = _2124 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 > _2128) || ((_2122 < _2126) || ((_2121 < _2126) || (_2121 > _2128))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2123, cbModelParam._m0[9u].z, fma(_2122, cbModelParam._m0[9u].y, _2121 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2123, cbModelParam._m0[10u].z, fma(_2122, cbModelParam._m0[10u].y, _2121 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2123, cbModelParam._m0[11u].z, fma(_2122, cbModelParam._m0[11u].y, _2121 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_13_35_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1659 = frontier_phi_13_35_ladder_2;
        _1661 = frontier_phi_13_35_ladder_1;
        _1663 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_771, _772, _773), _1579);
        _1659 = _1647.x * cbModelParam._m0[1u].y;
        _1661 = _1647.y * cbModelParam._m0[1u].y;
        _1663 = _1647.z * cbModelParam._m0[1u].y;
    }
    float _1667 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1667 : min(cbModelParam._m0[25u].w, _1667));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_832, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_832, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_832, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_773, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771));
        float _1735 = fma(_773, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771));
        float _1738 = fma(_773, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771));
        float _1876;
        if (_1732 > 0.0)
        {
            _1876 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2141;
        if (_1735 > 0.0)
        {
            _2141 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2141 = frontier_phi_37_32_ladder;
        }
        float _2346;
        if (_1738 > 0.0)
        {
            _2346 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2346 = frontier_phi_46_43_ladder;
        }
        float _2348 = isnan(_2141) ? _1876 : (isnan(_1876) ? _2141 : min(_1876, _2141));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1732) + _1721;
        float _2354 = (_2349 * _1735) + _1725;
        float _2355 = (_2349 * _1738) + _1729;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1668);
            frontier_phi_22_46_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_22_46_ladder_2;
        _1759 = frontier_phi_22_46_ladder_1;
        _1761 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_771, _772, _773), _1668);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _792) * ((_779 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_792 * _779)) * _763;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1659)) + _1659);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _763 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1830 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1834 = _1797 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_612, _613, _614));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_612, _613, _614));
    float _3950 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _3961 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1814].x * _1820) * _1855) + ((cbLight._m0[_1824].x * _1830) * _1853);
    float _1863 = ((_1820 * cbLight._m0[_1814].y) * _1855) + ((_1830 * cbLight._m0[_1824].y) * _1853);
    float _1864 = ((_1820 * cbLight._m0[_1814].z) * _1855) + ((_1830 * cbLight._m0[_1824].z) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1870)
    {
        _1881 = _1862;
        _1883 = _1863;
        _1885 = _1864;
    }
    else
    {
        uint _1889 = _1797 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _3972 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1908 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1862;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1863;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1864;
    }
    bool _1888 = _1868.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1888)
    {
        _1926 = _1881;
        _1928 = _1883;
        _1930 = _1885;
    }
    else
    {
        uint _2085 = _1797 + 7u;
        float _2101 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2102 = _2101 * _2101;
        float _3988 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2104 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1926 = (((cbLight._m0[_2085].x * 0.3183098733425140380859375) * _2103) * _2104) + _1881;
        _1928 = (((cbLight._m0[_2085].y * 0.3183098733425140380859375) * _2103) * _2104) + _1883;
        _1930 = (((cbLight._m0[_2085].z * 0.3183098733425140380859375) * _2103) * _2104) + _1885;
    }
    uint _1933 = _1797 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _615) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1797].x + _692;
    float _1949 = cbLight._m0[_1797].y + _693;
    float _1950 = cbLight._m0[_1797].z + _694;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1797].xyz));
    float _4004 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _1962 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1963 = dot(vec3(_612, _613, _614), vec3(_1955, _1956, _1957));
    float _4026 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1955, _1956, _1957));
    float _4037 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1962 * ((_1961 * _1987) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1987) + _1947) * _1961))) * _1961;
    float _4048 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2011 = _1797 + 9u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _615) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1834].x + _692;
    float _2025 = cbLight._m0[_1834].y + _693;
    float _2026 = cbLight._m0[_1834].z + _694;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1834].xyz));
    float _4059 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2038 = dot(vec3(_612, _613, _614), vec3(_2031, _2032, _2033));
    float _4070 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2031, _2032, _2033));
    float _4081 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2023 * _2023;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2059 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = 1.0 - _2023;
    float _2070 = (0.5 / (((_1962 * ((_2037 * _2060) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2060) + _2023) * _2037))) * _2037;
    float _4092 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    float _2082 = (((_2059 * cbLight._m0[_2011].x) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].x) * _2000) * _1830);
    float _2083 = (((_2059 * cbLight._m0[_2011].y) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].y) * _2000) * _1830);
    float _2084 = (((_2059 * cbLight._m0[_2011].z) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].z) * _2000) * _1830);
    float _2146;
    float _2148;
    float _2150;
    if (_1870)
    {
        _2146 = _2082;
        _2148 = _2083;
        _2150 = _2084;
    }
    else
    {
        uint _2152 = _1797 + 2u;
        uint _2156 = _1797 + 10u;
        float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _615) * 0.949999988079071044921875);
        float _2171 = _2170 * _2170;
        float _2172 = cbLight._m0[_2152].x + _692;
        float _2173 = cbLight._m0[_2152].y + _693;
        float _2174 = cbLight._m0[_2152].z + _694;
        float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
        float _2179 = _2178 * _2172;
        float _2180 = _2178 * _2173;
        float _2181 = _2178 * _2174;
        float _2182 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2152].xyz));
        float _4103 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2186 = dot(vec3(_612, _613, _614), vec3(_2179, _2180, _2181));
        float _4114 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2190 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2179, _2180, _2181));
        float _4125 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2194 = _2171 * _2171;
        float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
        float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2208 = 1.0 - _2171;
        float _2218 = (0.5 / (((_1962 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2208) + _2171) * _2185))) * _2185;
        float _4136 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2146 = (((_2207 * cbLight._m0[_2156].x) * _2220) * _2221) + _2082;
        _2148 = (((_2207 * cbLight._m0[_2156].y) * _2220) * _2221) + _2083;
        _2150 = (((_2207 * cbLight._m0[_2156].z) * _2220) * _2221) + _2084;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1888)
    {
        _2256 = _2146;
        _2258 = _2148;
        _2260 = _2150;
    }
    else
    {
        uint _2267 = _1797 + 3u;
        uint _2271 = _1797 + 11u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _615) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _692;
        float _2288 = cbLight._m0[_2267].y + _693;
        float _2289 = cbLight._m0[_2267].z + _694;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2267].xyz));
        float _4152 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2301 = dot(vec3(_612, _613, _614), vec3(_2294, _2295, _2296));
        float _4163 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4174 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_1962 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2323) + _2286) * _2300))) * _2300;
        float _4185 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2256 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2146;
        _2258 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2148;
        _2260 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2150;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1795.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            uint _2710 = 0u;
            uint _2719;
            bool _2720;
            for (;;)
            {
                _2719 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                _2720 = _2719 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2720)
                {
                    frontier_phi_61_pred = _2704;
                    frontier_phi_61_pred_1 = _2709;
                    frontier_phi_61_pred_2 = _2708;
                    frontier_phi_61_pred_3 = _2707;
                    frontier_phi_61_pred_4 = _2706;
                    frontier_phi_61_pred_5 = _2705;
                }
                else
                {
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    uint _2834;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2719;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2838 = uint(findLSB(_2834)) + (_2710 << 5u);
                        uint _2835 = (_2834 + 4294967295u) & _2834;
                        uint _2840 = _2838 * 48u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2860 = (_2838 * 48u) + 4u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2879 = (_2838 * 48u) + 8u;
                        vec3 _2890 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x));
                        float _2894 = _2854.x - _2412;
                        float _2895 = _2854.y - _2413;
                        float _2896 = _2854.z - _2414;
                        float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                        float _2900 = inversesqrt(_2897);
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2904 = dot(vec3(_719, _722, _725), vec3(_2901, _2902, _2903));
                        float _2909 = 1.0 - (_2897 * _2854.w);
                        float _4211 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2911 = sqrt(_2897) * _2873.w;
                        float _2914 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2904) + _2915;
                        float _2921 = _2911 * _2911;
                        float _2925 = ((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2910) / ((_2921 * 0.699999988079071044921875) + 1.0);
                        float _2929 = (-0.0) - _2412;
                        float _2930 = (-0.0) - _2413;
                        float _2931 = (-0.0) - _2414;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2946 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2947 = 1.0 - _779;
                        float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                        float _2955 = _2954 * _2954;
                        float _2956 = _2955 * _2955;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2967 = dot(vec3(_719, _722, _725), vec3(_2936, _2937, _2938));
                        float _4227 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2971 = dot(vec3(_719, _722, _725), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                        float _4238 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                        float _2979 = _2914 * _2955;
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2904) + _2980;
                        float _4249 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2985 = 1.0 - _2955;
                        float _2995 = (0.5 / (((_2984 * ((_2970 * _2985) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2955) * _2970))) * _2984;
                        float _4260 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _3006 = (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_2978 * _2978) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2910;
                        _2763 = (_2925 * _2873.x) + _2831;
                        _2764 = (_2925 * _2873.y) + _2832;
                        _2765 = (_2925 * _2873.z) + _2833;
                        _2760 = (_3006 * _2890.x) + _2828;
                        _2761 = (_3006 * _2890.y) + _2829;
                        _2762 = (_3006 * _2890.z) + _2830;
                        if (_2835 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2835;
                        }
                    }
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                _2560 = frontier_phi_61_pred;
                _2570 = frontier_phi_61_pred_1;
                _2568 = frontier_phi_61_pred_2;
                _2566 = frontier_phi_61_pred_3;
                _2564 = frontier_phi_61_pred_4;
                _2562 = frontier_phi_61_pred_5;
                uint _2711 = _2710 + 1u;
                if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2704 = _2560;
                    _2705 = _2562;
                    _2706 = _2564;
                    _2707 = _2566;
                    _2708 = _2568;
                    _2709 = _2570;
                    _2710 = _2711;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
        }
        else
        {
            float _2697 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2698 = _2697 * _2412;
            float _2699 = _2697 * _2413;
            float _2700 = _2697 * _2414;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2811 = _2559;
                float _2812 = _2561;
                float _2813 = _2563;
                float _2814 = _2565;
                float _2815 = _2567;
                float _2816 = _2569;
                uint _2817 = _2576;
                uint _2826;
                bool _2827;
                for (;;)
                {
                    _2826 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                    _2827 = _2826 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2827)
                    {
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    else
                    {
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        uint _3030 = _2826;
                        uint _3031;
                        vec4 _3056;
                        float _3057;
                        vec4 _3072;
                        vec3 _3084;
                        vec4 _3099;
                        vec4 _3115;
                        float _3161;
                        bool _3162;
                        for (;;)
                        {
                            uint _3041 = ((_2817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3030));
                            _3031 = (_3030 + 4294967295u) & _3030;
                            uint _3043 = _3041 * 40u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3057 = _3056.w;
                            uint _3059 = (_3041 * 40u) + 4u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_3041 * 40u) + 8u;
                            _3084 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x));
                            uint _3086 = (_3041 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3102 = (_3041 * 40u) + 20u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3041 * 40u) + 24u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3136 = (_3041 * 40u) + 28u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3161 = fma(_2414, _3149.z, fma(_2413, _3149.y, _3149.x * _2412)) + _3149.w;
                            _3162 = !((fma(_2414, _3130.z, fma(_2413, _3130.y, _3130.x * _2412)) + _3130.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3162)
                            {
                                float _3189 = _3056.x - _2412;
                                float _3190 = _3056.y - _2413;
                                float _3191 = _3056.z - _2414;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3057 * _3057));
                                float _4271 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3207 = sqrt(_3192) * _3072.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3213 = ((1.0 - _3210) * dot(vec3(_3196, _3197, _3198), vec3(_719, _722, _725))) + _3210;
                                float _3216 = _3207 * _3207;
                                float _3220 = (fma(_2414, _3099.z, fma(_2413, _3099.y, _3099.x * _2412)) + _3099.w) / _3161;
                                float _3221 = (fma(_2414, _3115.z, fma(_2413, _3115.y, _3115.x * _2412)) + _3115.w) / _3161;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4287 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3203) / ((_3216 * 0.699999988079071044921875) + 1.0));
                                float _3239 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                                float _3240 = 1.0 - _779;
                                float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                                float _3248 = _3247 * _3247;
                                float _3249 = _3248 * _3248;
                                float _3250 = _3196 - _2698;
                                float _3251 = _3197 - _2699;
                                float _3252 = _3198 - _2700;
                                float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                                float _3260 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2698, (-0.0) - _2699, (-0.0) - _2700));
                                float _4298 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3264 = dot(vec3(_719, _722, _725), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                                float _4309 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                                float _3272 = _3209 * _3248;
                                float _3273 = _3272 * _3272;
                                float _3279 = ((1.0 - _3273) * dot(vec3(_719, _722, _725), vec3(_3196, _3197, _3198))) + _3273;
                                float _4320 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3281 = 1.0 - _3248;
                                float _3291 = (0.5 / (((_3280 * ((_3263 * _3281) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3248) * _3263))) * _3280;
                                float _4331 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3301 = (_3226 * _3203) * (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3271 * _3271) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3301 * _3084.x;
                                frontier_phi_73_pred_1 = _3301 * _3084.y;
                                frontier_phi_73_pred_2 = _3227 * _3072.z;
                                frontier_phi_73_pred_3 = _3227 * _3072.y;
                                frontier_phi_73_pred_4 = _3227 * _3072.x;
                                frontier_phi_73_pred_5 = _3301 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3305 = frontier_phi_73_pred;
                            _3306 = frontier_phi_73_pred_1;
                            _3310 = frontier_phi_73_pred_2;
                            _3309 = frontier_phi_73_pred_3;
                            _3308 = frontier_phi_73_pred_4;
                            _3307 = frontier_phi_73_pred_5;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3016 = _3310 + _3029;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            _3013 = _3307 + _3026;
                            if (_3031 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3031;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3014;
                        frontier_phi_67_pred_1 = _3015;
                        frontier_phi_67_pred_2 = _3016;
                        frontier_phi_67_pred_3 = _3013;
                        frontier_phi_67_pred_4 = _3012;
                        frontier_phi_67_pred_5 = _3011;
                    }
                    _2679 = frontier_phi_67_pred;
                    _2681 = frontier_phi_67_pred_1;
                    _2683 = frontier_phi_67_pred_2;
                    _2677 = frontier_phi_67_pred_3;
                    _2675 = frontier_phi_67_pred_4;
                    _2673 = frontier_phi_67_pred_5;
                    uint _2818 = _2817 + 1u;
                    if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2811 = _2673;
                        _2812 = _2675;
                        _2813 = _2677;
                        _2814 = _2679;
                        _2815 = _2681;
                        _2816 = _2683;
                        _2817 = _2818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2681;
                frontier_phi_55_56_ladder_1 = _2683;
                frontier_phi_55_56_ladder_2 = _2679;
                frontier_phi_55_56_ladder_3 = _2677;
                frontier_phi_55_56_ladder_4 = _2675;
                frontier_phi_55_56_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            _2672 = frontier_phi_55_56_ladder_5;
            _2674 = frontier_phi_55_56_ladder_4;
            _2676 = frontier_phi_55_56_ladder_3;
            _2678 = frontier_phi_55_56_ladder_2;
            _2680 = frontier_phi_55_56_ladder;
            _2682 = frontier_phi_55_56_ladder_1;
        }
        float _2687 = isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0));
        _2471 = (_2687 * _2678) + _1926;
        _2473 = (_2687 * _2680) + _1928;
        _2475 = (_2687 * _2682) + _1930;
        _2477 = ((_2672 * 0.039999999105930328369140625) * _2687) + _2256;
        _2479 = ((_2674 * 0.039999999105930328369140625) * _2687) + _2258;
        _2481 = ((_2676 * 0.039999999105930328369140625) * _2687) + _2260;
    }
    else
    {
        _2471 = _1926;
        _2473 = _1928;
        _2475 = _1930;
        _2477 = _2256;
        _2479 = _2258;
        _2481 = _2260;
    }
    float _4347 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4358 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4369 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    uint _2501 = _232 + 6u;
    float _2509 = _700 / cbSceneParam._m0[86u].x;
    float _2510 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2585 = _2584 / _633;
        float _2596 = _2585 * _685;
        float _2597 = _686 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _687;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2733 = 1.0 / cbSceneParam._m0[80u].x;
            float _2734 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2735 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            _2773 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2744 - _2745) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))))) * _2733)) - ((exp2(_2620 * _2744) - exp2(_2620 * _2745)) * _2733))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2529);
        _2622 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2784 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    float _2640 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2641 = _2640 == 3.0;
    float _2642 = log2(_2628);
    float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2471 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _763))) + ((_2477 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2473 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _763))) + ((_2479 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2475 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _763))) + ((_2481 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2660 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2660 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2660 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2660 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


