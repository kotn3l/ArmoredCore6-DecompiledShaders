#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1155;
float _3516;
float _3517;
float _3518;
float _3519;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3528 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _395 = (_388 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _396 = (_388 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _397 = (_388 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _388) + _436;
    float _448 = ((((_415.x - _434) * _388) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _388) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3539 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _513 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_499 - _500) * cbMtdParam._m0[24u].w) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3550 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _521 = (_514 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _522 = (_514 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _523 = (_514 * (cbMtdParam._m0[17u].z - _397)) + _397;
    float _527 = (cbMtdParam._m0[19u].w * (_472.z - _445)) + _445;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3561 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _557 = (_514 * (_540.z - _527)) + _527;
    float _560 = (((_472.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _561 = (((_472.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _573 = (((_547 - _560) + (cbMtdParam._m0[21u].x * _560)) * _514) + _560;
    float _574 = (((_548 - _561) + (cbMtdParam._m0[21u].x * _561)) * _514) + _561;
    float _575 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) - _456)) + _456;
    float _579 = cbMtdParam._m0[22u].x + _472.w;
    float _582 = fma(_575, _221 * NORMAL.x, fma(_574, _228 * TANGENT.x, (_214 * _206) * _573));
    float _585 = fma(_575, _221 * NORMAL.y, fma(_574, _228 * TANGENT.y, (_214 * _207) * _573));
    float _588 = fma(_575, _221 * NORMAL.z, fma(_574, _228 * TANGENT.z, (_214 * _208) * _573));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = _592 * _582;
    float _594 = _592 * _585;
    float _595 = _592 * _588;
    float _3572 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _596 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3594 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3605 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3616 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _656);
    float _667 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _656);
    float _668 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _656);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    vec4 _680 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _682 = _680.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _836 = sqrt(((_666 * _666) + (_667 * _667)) + (_668 * _668));
        float _842 = (cbMatDynParam._m0[5u].x * _836) + cbMatDynParam._m0[5u].y;
        float _3627 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _847 = (cbMatDynParam._m0[5u].z * _836) + cbMatDynParam._m0[5u].w;
        float _3638 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) - _843)) + _843) < ((_682 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_595, cbSceneParam._m0[5u].z, fma(_594, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _593));
    float _715 = fma(_595, cbSceneParam._m0[6u].z, fma(_594, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _593));
    float _718 = fma(_595, cbSceneParam._m0[7u].z, fma(_594, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _593));
    uint _731 = _234 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3649 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _756 = ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * TEXCOORD_5.w) * _752.x;
    float _757 = dot(vec3(_593, _594, _595), vec3(_673, _674, _675));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _593) - _673;
    float _765 = (_760 * _594) - _674;
    float _766 = (_760 * _595) - _675;
    float _770 = abs(dot(vec3(_673, _674, _675), vec3(_593, _594, _595)));
    float _3682 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_596);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _883 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _887 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _912 = _817 + _593;
        float _913 = _821 + _594;
        float _914 = _825 + _595;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_593, _594, _595), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3730 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_593, _594, _595), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3763 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_593, _594, _595), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3796 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1201 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1205 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1228 = _817 + _593;
        float _1229 = _821 + _594;
        float _1230 = _825 + _595;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_593, _594, _595), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3859 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_593, _594, _595), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3892 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_593, _594, _595), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3925 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = _1155;
        _1477 = _1155;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _764 * 0.5;
    float _1535 = _765 * 0.5;
    float _1536 = _766 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _596);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1651 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1655 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1659 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1662 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1665 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1668 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1696;
        if (_1662 > 0.0)
        {
            _1696 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1696 = frontier_phi_17_15_ladder;
        }
        float _1897;
        if (_1665 > 0.0)
        {
            _1897 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1897 = frontier_phi_26_22_ladder;
        }
        float _2140;
        if (_1668 > 0.0)
        {
            _2140 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2140 = frontier_phi_38_33_ladder;
        }
        float _2142 = isnan(_1897) ? _1696 : (isnan(_1696) ? _1897 : min(_1696, _1897));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1662) + _1651;
        float _2148 = (_2143 * _1665) + _1655;
        float _2149 = (_2143 * _1668) + _1659;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_16_38_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1684 = frontier_phi_16_38_ladder_2;
        _1686 = frontier_phi_16_38_ladder_1;
        _1688 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1603);
        _1684 = _1672.x * cbModelParam._m0[1u].y;
        _1686 = _1672.y * cbModelParam._m0[1u].y;
        _1688 = _1672.z * cbModelParam._m0[1u].y;
    }
    float _1692 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _596);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1692 : min(cbModelParam._m0[25u].w, _1692));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1761 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1764 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1902;
        if (_1758 > 0.0)
        {
            _1902 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2167;
        if (_1761 > 0.0)
        {
            _2167 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2167 = frontier_phi_40_35_ladder;
        }
        float _2372;
        if (_1764 > 0.0)
        {
            _2372 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2372 = frontier_phi_49_46_ladder;
        }
        float _2374 = isnan(_2167) ? _1902 : (isnan(_1902) ? _2167 : min(_1902, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1758) + _1747;
        float _2380 = (_2375 * _1761) + _1751;
        float _2381 = (_2375 * _1764) + _1755;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1693);
            frontier_phi_25_49_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_25_49_ladder_2;
        _1785 = frontier_phi_25_49_ladder_1;
        _1787 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1693);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1799 = ((((1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_785 * _772)) * _756;
    float _1800 = _1799 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1801 = _1799 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1802 = _1799 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _756 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1856 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1860 = _1823 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_593, _594, _595));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_593, _594, _595));
    float _4061 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4072 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1840].x * _1846) * _1881) + ((cbLight._m0[_1850].x * _1856) * _1879);
    float _1889 = ((_1846 * cbLight._m0[_1840].y) * _1881) + ((_1856 * cbLight._m0[_1850].y) * _1879);
    float _1890 = ((_1846 * cbLight._m0[_1840].z) * _1881) + ((_1856 * cbLight._m0[_1850].z) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1823 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4083 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1934 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2111 = _1823 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4099 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2130 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1952 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1907;
        _1954 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1909;
        _1956 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1911;
    }
    uint _1959 = _1823 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _596) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1823].x + _673;
    float _1975 = cbLight._m0[_1823].y + _674;
    float _1976 = cbLight._m0[_1823].z + _675;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_1823].xyz));
    float _4115 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1988 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1989 = dot(vec3(_593, _594, _595), vec3(_1981, _1982, _1983));
    float _4137 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1981, _1982, _1983));
    float _4148 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = 1.0 - _1973;
    float _2024 = (0.5 / (((_1988 * ((_1987 * _2013) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2013) + _1973) * _1987))) * _1987;
    float _4159 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2037 = _1823 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _596) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1860].x + _673;
    float _2051 = cbLight._m0[_1860].y + _674;
    float _2052 = cbLight._m0[_1860].z + _675;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_1860].xyz));
    float _4170 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2064 = dot(vec3(_593, _594, _595), vec3(_2057, _2058, _2059));
    float _4181 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2057, _2058, _2059));
    float _4192 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1988 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2086) + _2049) * _2063))) * _2063;
    float _4203 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].x) * _2026) * _1856);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].y) * _2026) * _1856);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].z) * _2026) * _1856);
    float _2172;
    float _2174;
    float _2176;
    if (_1896)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1823 + 2u;
        uint _2182 = _1823 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _596) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _673;
        float _2199 = cbLight._m0[_2178].y + _674;
        float _2200 = cbLight._m0[_2178].z + _675;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2178].xyz));
        float _4214 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2212 = dot(vec3(_593, _594, _595), vec3(_2205, _2206, _2207));
        float _4225 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4236 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1988 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2234) + _2197) * _2211))) * _2211;
        float _4247 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1914)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1823 + 3u;
        uint _2297 = _1823 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _596) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _673;
        float _2314 = cbLight._m0[_2293].y + _674;
        float _2315 = cbLight._m0[_2293].z + _675;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2293].xyz));
        float _4263 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2327 = dot(vec3(_593, _594, _595), vec3(_2320, _2321, _2322));
        float _4274 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4285 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1988 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2349) + _2312) * _2326))) * _2326;
        float _4296 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1821.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            uint _2744 = 0u;
            uint _2753;
            bool _2754;
            for (;;)
            {
                _2753 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                _2754 = _2753 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2754)
                {
                    frontier_phi_66_pred = _2738;
                    frontier_phi_66_pred_1 = _2743;
                    frontier_phi_66_pred_2 = _2742;
                    frontier_phi_66_pred_3 = _2741;
                    frontier_phi_66_pred_4 = _2740;
                    frontier_phi_66_pred_5 = _2739;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2753;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2744 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _2438;
                        float _2950 = _2909.y - _2439;
                        float _2951 = _2909.z - _2440;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_712, _715, _718), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4322 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _2438;
                        float _2985 = (-0.0) - _2439;
                        float _2986 = (-0.0) - _2440;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3001 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3002 = 1.0 - _772;
                        float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                        float _3010 = _3009 * _3009;
                        float _3011 = _3010 * _3010;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3022 = dot(vec3(_712, _715, _718), vec3(_2991, _2992, _2993));
                        float _4338 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3026 = dot(vec3(_712, _715, _718), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                        float _4349 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                        float _3034 = _2969 * _3010;
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _2959) + _3035;
                        float _4360 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3040 = 1.0 - _3010;
                        float _3050 = (0.5 / (((_3039 * ((_3025 * _3040) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3010) * _3025))) * _3039;
                        float _4371 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3061 = (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3033 * _3033) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2813 = (_2980 * _2928.x) + _2886;
                        _2814 = (_2980 * _2928.y) + _2887;
                        _2815 = (_2980 * _2928.z) + _2888;
                        _2810 = (_3061 * _2945.x) + _2883;
                        _2811 = (_3061 * _2945.y) + _2884;
                        _2812 = (_3061 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_66_pred = _2810;
                    frontier_phi_66_pred_1 = _2815;
                    frontier_phi_66_pred_2 = _2814;
                    frontier_phi_66_pred_3 = _2813;
                    frontier_phi_66_pred_4 = _2812;
                    frontier_phi_66_pred_5 = _2811;
                }
                _2586 = frontier_phi_66_pred;
                _2596 = frontier_phi_66_pred_1;
                _2594 = frontier_phi_66_pred_2;
                _2592 = frontier_phi_66_pred_3;
                _2590 = frontier_phi_66_pred_4;
                _2588 = frontier_phi_66_pred_5;
                uint _2745 = _2744 + 1u;
                if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2738 = _2586;
                    _2739 = _2588;
                    _2740 = _2590;
                    _2741 = _2592;
                    _2742 = _2594;
                    _2743 = _2596;
                    _2744 = _2745;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
            _2714 = _2593;
            _2716 = _2595;
        }
        else
        {
            float _2731 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2732 = _2731 * _2438;
            float _2733 = _2731 * _2439;
            float _2734 = _2731 * _2440;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2866 = _2585;
                float _2867 = _2587;
                float _2868 = _2589;
                float _2869 = _2591;
                float _2870 = _2593;
                float _2871 = _2595;
                uint _2872 = _2602;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2882)
                    {
                        frontier_phi_77_pred = _2871;
                        frontier_phi_77_pred_1 = _2870;
                        frontier_phi_77_pred_2 = _2869;
                        frontier_phi_77_pred_3 = _2868;
                        frontier_phi_77_pred_4 = _2867;
                        frontier_phi_77_pred_5 = _2866;
                    }
                    else
                    {
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        uint _3094 = _2881;
                        uint _3095;
                        vec4 _3120;
                        float _3121;
                        vec4 _3136;
                        vec3 _3148;
                        vec4 _3163;
                        vec4 _3179;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3105 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3094));
                            _3095 = (_3094 + 4294967295u) & _3094;
                            uint _3107 = _3105 * 40u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3121 = _3120.w;
                            uint _3123 = (_3105 * 40u) + 4u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3105 * 40u) + 8u;
                            _3148 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x));
                            uint _3150 = (_3105 * 40u) + 16u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3105 * 40u) + 20u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3105 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3105 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2440, _3213.z, fma(_2439, _3213.y, _3213.x * _2438)) + _3213.w;
                            _3226 = !((fma(_2440, _3194.z, fma(_2439, _3194.y, _3194.x * _2438)) + _3194.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3120.x - _2438;
                                float _3254 = _3120.y - _2439;
                                float _3255 = _3120.z - _2440;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3121 * _3121));
                                float _4382 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3271 = sqrt(_3256) * _3136.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_712, _715, _718))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2440, _3163.z, fma(_2439, _3163.y, _3163.x * _2438)) + _3163.w) / _3225;
                                float _3285 = (fma(_2440, _3179.z, fma(_2439, _3179.y, _3179.x * _2438)) + _3179.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4398 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _772;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2732;
                                float _3315 = _3261 - _2733;
                                float _3316 = _3262 - _2734;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2732, (-0.0) - _2733, (-0.0) - _2734));
                                float _4409 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3328 = dot(vec3(_712, _715, _718), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4420 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_712, _715, _718), vec3(_3260, _3261, _3262))) + _3337;
                                float _4431 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4442 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3291 * _3136.y;
                                frontier_phi_83_pred_1 = _3291 * _3136.x;
                                frontier_phi_83_pred_2 = _3365 * _3148.z;
                                frontier_phi_83_pred_3 = _3365 * _3148.y;
                                frontier_phi_83_pred_4 = _3365 * _3148.x;
                                frontier_phi_83_pred_5 = _3291 * _3136.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_83_pred;
                            _3372 = frontier_phi_83_pred_1;
                            _3371 = frontier_phi_83_pred_2;
                            _3370 = frontier_phi_83_pred_3;
                            _3369 = frontier_phi_83_pred_4;
                            _3374 = frontier_phi_83_pred_5;
                            _3078 = _3372 + _3091;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3075 = _3369 + _3088;
                            _3076 = _3370 + _3089;
                            _3077 = _3371 + _3090;
                            if (_3095 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3095;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3080;
                        frontier_phi_77_pred_1 = _3079;
                        frontier_phi_77_pred_2 = _3078;
                        frontier_phi_77_pred_3 = _3077;
                        frontier_phi_77_pred_4 = _3076;
                        frontier_phi_77_pred_5 = _3075;
                    }
                    _2717 = frontier_phi_77_pred;
                    _2715 = frontier_phi_77_pred_1;
                    _2713 = frontier_phi_77_pred_2;
                    _2711 = frontier_phi_77_pred_3;
                    _2709 = frontier_phi_77_pred_4;
                    _2707 = frontier_phi_77_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2707;
                        _2867 = _2709;
                        _2868 = _2711;
                        _2869 = _2713;
                        _2870 = _2715;
                        _2871 = _2717;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2711;
                frontier_phi_58_59_ladder_1 = _2717;
                frontier_phi_58_59_ladder_2 = _2715;
                frontier_phi_58_59_ladder_3 = _2713;
                frontier_phi_58_59_ladder_4 = _2709;
                frontier_phi_58_59_ladder_5 = _2707;
            }
            else
            {
                frontier_phi_58_59_ladder = _2589;
                frontier_phi_58_59_ladder_1 = _2595;
                frontier_phi_58_59_ladder_2 = _2593;
                frontier_phi_58_59_ladder_3 = _2591;
                frontier_phi_58_59_ladder_4 = _2587;
                frontier_phi_58_59_ladder_5 = _2585;
            }
            _2706 = frontier_phi_58_59_ladder_5;
            _2708 = frontier_phi_58_59_ladder_4;
            _2710 = frontier_phi_58_59_ladder;
            _2712 = frontier_phi_58_59_ladder_3;
            _2714 = frontier_phi_58_59_ladder_2;
            _2716 = frontier_phi_58_59_ladder_1;
        }
        float _2721 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2497 = (_2721 * _2712) + _1952;
        _2499 = (_2721 * _2714) + _1954;
        _2501 = (_2721 * _2716) + _1956;
        _2503 = ((_2706 * 0.039999999105930328369140625) * _2721) + _2282;
        _2505 = ((_2708 * 0.039999999105930328369140625) * _2721) + _2284;
        _2507 = ((_2710 * 0.039999999105930328369140625) * _2721) + _2286;
    }
    else
    {
        _2497 = _1952;
        _2499 = _1954;
        _2501 = _1956;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    float _4458 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4469 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4480 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2524 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2497 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _756))) + ((_2503 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2499 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _756))) + ((_2505 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2501 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _756))) + ((_2507 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    uint _2527 = _234 + 6u;
    float _2535 = _693 / cbSceneParam._m0[86u].x;
    float _2536 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2611 = _2610 / _614;
        float _2622 = _2611 * _666;
        float _2623 = _667 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _668;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2823;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2823 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2767 = 1.0 / cbSceneParam._m0[80u].x;
            float _2768 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2769 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            _2823 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2778 - _2779) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))))) * _2767)) - ((exp2(_2646 * _2778) - exp2(_2646 * _2779)) * _2767))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2834 = exp2((_2823 * (-1.44269502162933349609375)) * (1.0 - _2825.w));
        float _2835 = log2(_2834);
        float _2851 = log2(_2555);
        _2648 = (exp2(_2851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].x)) * _2825.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].y)) * _2825.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].z)) * _2825.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2834 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    bool _2861;
    vec4 _2664;
    vec4 _2686;
    float _2688;
    float _2692;
    float _2693;
    float _2694;
    float _2695;
    bool _2705;
    for (;;)
    {
        _2664 = cbMatDynParam._m0[0u];
        float _2666 = roundEven(_2664.y);
        bool _2667 = _2666 == 3.0;
        float _2668 = log2(_2654);
        float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * _2524;
        float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * _2525;
        float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * _2526;
        float _2684 = _682 + (-0.5);
        _2686 = cbMtdParam._m0[1u];
        _2688 = _2686.y * _2684;
        float _2691 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2692 = _2691 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
        _2693 = _2691 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
        _2694 = _2691 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
        _2695 = _2684 * 0.999000012874603271484375;
        _2705 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2705)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2695) < 0.5)
            {
                _2861 = true;
                break;
            }
        }
        uint _2802 = _731 + uint(_2664.w);
        if ((cbInstanceData._m0[_2802].w < 1.0) && ((cbInstanceData._m0[_2802].w + _2695) < 0.5))
        {
            _2861 = true;
            break;
        }
        if ((_2688 + 1.0) < _2686.x)
        {
            _2861 = true;
            break;
        }
        _2861 = false;
        break;
    }
    float _3066;
    if (_2861)
    {
        discard_state = true;
        _3066 = 0.0;
    }
    else
    {
        _3066 = cbInstanceData._m0[_2527].w;
    }
    SV_Target.x = _2692;
    SV_Target.y = _2693;
    SV_Target.z = _2694;
    SV_Target.w = _3066;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
    discard_exit();
}


