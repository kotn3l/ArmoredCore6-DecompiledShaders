#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1418;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4003 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _441 = (_434 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _442 = (_434 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _443 = (_434 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4014 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _520 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441);
    float _523 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442);
    float _526 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443);
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _434) + _584;
    float _594 = ((_565.y - _585) * _434) + _585;
    float _595 = ((_565.z - _586) * _434) + _586;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _507) + _595;
    float _623 = ((((_607.x - _593) * _507) + _593) * 2.0) + (-1.0);
    float _625 = ((((_607.y - _594) * _507) + _594) * 2.0) + (-1.0);
    float _626 = dot(vec2(_623, _625), vec2(_623, _625));
    float _4025 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _657 = (((_645.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _658 = (((_645.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _625;
    float _661 = fma(_631, _245, fma(_658, _252, _657 * _238));
    float _664 = fma(_631, _246, fma(_658, _253, _657 * _239));
    float _667 = fma(_631, _247, fma(_658, _254, _657 * _240));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _707 = (cbMtdParam._m0[19u].x + dot(vec4(_671 * _661, _671 * _664, _671 * _667, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_700 - _701) * cbMtdParam._m0[24u].w) + _701) * cbMtdParam._m0[21u].z);
    float _4036 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _710 = (-0.0) - cbMtdParam._m0[24u].x;
    float _712 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
    float _720 = _708 - ((_708 * TEXCOORD_8.x) * _713);
    float _721 = _708 - ((_708 * TEXCOORD_8.y) * _713);
    float _722 = _708 - ((_708 * TEXCOORD_8.z) * _713);
    float _729 = (_720 * ((_545.x * cbMtdParam._m0[18u].x) - _520)) + _520;
    float _730 = (_721 * ((_545.y * cbMtdParam._m0[18u].y) - _523)) + _523;
    float _731 = (_722 * ((_545.z * cbMtdParam._m0[18u].z) - _526)) + _526;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _745 = _743.x;
    float _746 = 1.0 - _745;
    float _774 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_745 - _746) * cbMtdParam._m0[24u].y) + _746) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4057 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _783 = ((((cbMtdParam._m0[10u].x - _729) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _775) + _729;
    float _784 = ((((cbMtdParam._m0[10u].y - _730) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _775) + _730;
    float _785 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _731)) * _775) + _731;
    float _789 = (cbMtdParam._m0[19u].w * (_645.z - _620)) + _620;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4068 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = ((_803.z - _789) * _720) + _789;
    float _823 = ((cbMtdParam._m0[23u].y - _820) * _775) + _820;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _848 = (_842.x * 2.0) + (-1.0);
    float _849 = (_842.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _4079 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _865 = ((sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _631) * _722) + _631;
    float _868 = (((_810 - _657) * _720) + _657) + (cbMtdParam._m0[21u].x * _657);
    float _869 = (((_811 - _658) * _721) + _658) + (cbMtdParam._m0[21u].x * _658);
    float _880 = (((_848 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _775) + _868;
    float _881 = (((_849 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _775) + _869;
    float _882 = (_775 * (sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _865)) + _865;
    float _884 = cbMtdParam._m0[22u].x + _645.w;
    float _887 = fma(_882, _245, fma(_881, _252, _880 * _238));
    float _890 = fma(_882, _246, fma(_881, _253, _880 * _239));
    float _893 = fma(_882, _247, fma(_881, _254, _880 * _240));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _4090 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _901 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4112 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4123 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4134 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    float _984 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _985 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1003 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1006 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1009 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1023 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1029 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_1023].x;
    float _1030 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_1023].y;
    float _1031 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_1023].z;
    float _4145 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _984, cbSceneParam._m0[86u].y * _985));
    float _1047 = ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * TEXCOORD_5.w) * _1043.x;
    float _1048 = dot(vec3(_898, _899, _900), vec3(_976, _977, _978));
    float _1051 = _1048 * 2.0;
    float _1055 = (_1051 * _898) - _976;
    float _1056 = (_1051 * _899) - _977;
    float _1057 = (_1051 * _900) - _978;
    float _1061 = abs(dot(vec3(_976, _977, _978), vec3(_898, _899, _900)));
    float _4178 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1063 = sqrt(_901);
    float _1076 = exp2((_1063 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1063 * 3.0));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1417;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1116, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108));
        float _1146 = fma(_1116, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108));
        float _1150 = fma(_1116, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108));
        float _1175 = _1108 + _898;
        float _1176 = _1112 + _899;
        float _1177 = _1116 + _900;
        float _1187 = fma(_1177, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175)) - _1142;
        float _1188 = fma(_1177, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175)) - _1146;
        float _1189 = fma(_1177, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175)) - _1150;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1245 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1211.x + (-0.5));
        float _1247 = _1245 * (_1211.y + (-0.5));
        float _1248 = _1245 * (_1211.z + (-0.5));
        float _1255 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1218.x + (-0.5));
        float _1257 = _1255 * (_1218.y + (-0.5));
        float _1258 = _1255 * (_1218.z + (-0.5));
        float _1265 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1225.x + (-0.5));
        float _1267 = _1265 * (_1225.y + (-0.5));
        float _1268 = _1265 * (_1225.z + (-0.5));
        float _1275 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1232.x + (-0.5));
        float _1277 = _1275 * (_1232.y + (-0.5));
        float _1278 = _1275 * (_1232.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1299 = (dot(vec3(_898, _899, _900), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1309 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4226 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1311 + 1.0))) + _1316) * _1279;
        float _1326 = _1247 * 0.5;
        float _1327 = _1257 * 0.5;
        float _1328 = _1267 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_898, _899, _900), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4259 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1353 + 1.0))) + _1358) * _1280;
        float _1368 = _1248 * 0.5;
        float _1369 = _1258 * 0.5;
        float _1370 = _1268 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_898, _899, _900), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4292 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1395 + 1.0))) + _1400) * _1281;
        _1417 = _1248;
        _1419 = _1247;
        _1420 = _1246;
        _1421 = _1258;
        _1422 = _1257;
        _1423 = _1256;
        _1424 = _1268;
        _1425 = _1267;
        _1426 = _1266;
        _1427 = _1281;
        _1428 = _1280;
        _1429 = _1279;
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1418;
        _1419 = _1418;
        _1420 = _1418;
        _1421 = _1418;
        _1422 = _1418;
        _1423 = _1418;
        _1424 = _1418;
        _1425 = _1418;
        _1426 = _1418;
        _1427 = _1418;
        _1428 = _1418;
        _1429 = _1418;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1456 = fma(_1116, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108));
        float _1460 = fma(_1116, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108));
        float _1464 = fma(_1116, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108));
        float _1487 = _1108 + _898;
        float _1488 = _1112 + _899;
        float _1489 = _1116 + _900;
        float _1499 = fma(_1489, cbModelParam._m0[30u].z, fma(_1488, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1487)) - _1456;
        float _1500 = fma(_1489, cbModelParam._m0[31u].z, fma(_1488, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1487)) - _1460;
        float _1501 = fma(_1489, cbModelParam._m0[32u].z, fma(_1488, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1487)) - _1464;
        float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
        float _1518 = ((_1505 * _1499) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1456 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1505 * _1500) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1460 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1505 * _1501) / cbModelParam._m0[35u].z) + ((((((_1464 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        float _1555 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1522.x + (-0.5));
        float _1557 = _1555 * (_1522.y + (-0.5));
        float _1558 = _1555 * (_1522.z + (-0.5));
        float _1565 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1529.x + (-0.5));
        float _1567 = _1565 * (_1529.y + (-0.5));
        float _1568 = _1565 * (_1529.z + (-0.5));
        float _1575 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1536.x + (-0.5));
        float _1577 = _1575 * (_1536.y + (-0.5));
        float _1578 = _1575 * (_1536.z + (-0.5));
        float _1585 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1543.x + (-0.5));
        float _1587 = _1585 * (_1543.y + (-0.5));
        float _1588 = _1585 * (_1543.z + (-0.5));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = _1556 * 0.5;
        float _1593 = _1566 * 0.5;
        float _1594 = _1576 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_898, _899, _900), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4355 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1619 + 1.0))) + _1624) * _1589;
        float _1634 = _1557 * 0.5;
        float _1635 = _1567 * 0.5;
        float _1636 = _1577 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_898, _899, _900), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4388 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1661 + 1.0))) + _1666) * _1590;
        float _1676 = _1558 * 0.5;
        float _1677 = _1568 * 0.5;
        float _1678 = _1578 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_898, _899, _900), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4421 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1703 + 1.0))) + _1708) * _1591;
        _1725 = _1558;
        _1726 = _1557;
        _1727 = _1556;
        _1728 = _1568;
        _1729 = _1567;
        _1730 = _1566;
        _1731 = _1578;
        _1732 = _1577;
        _1733 = _1576;
        _1734 = _1591;
        _1735 = _1590;
        _1736 = _1589;
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
    }
    else
    {
        _1725 = _1418;
        _1726 = _1418;
        _1727 = _1418;
        _1728 = _1418;
        _1729 = _1418;
        _1730 = _1418;
        _1731 = _1418;
        _1732 = _1418;
        _1733 = _1418;
        _1734 = _1418;
        _1735 = _1418;
        _1736 = _1418;
        _1737 = 0.0;
        _1738 = 0.0;
        _1739 = 0.0;
    }
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1430)) + _1430;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1431)) + _1431;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1432)) + _1432;
    float _1772 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1749));
    float _1793 = _1055 * 0.5;
    float _1794 = _1056 * 0.5;
    float _1795 = _1057 * 0.5;
    float _1796 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1799 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1802 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1836;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1809 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1417, _1421, _1424, _1427));
        float _1813 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1817 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1824 = dot(vec4(cbModelParam._m0[39u]), vec4(_1793, _1794, _1795, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1847;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1838 = dot(vec4(cbModelParam._m0[40u]), vec4(_1793, _1794, _1795, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1851 = (_1847 * cbModelParam._m0[1u].x) + (_1836 * (1.0 - cbModelParam._m0[1u].x));
    float _1861 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1861 : min(cbModelParam._m0[25u].z, _1861));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1909 = fma(_1116, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108)) + cbModelParam._m0[13u].w;
        float _1913 = fma(_1116, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108)) + cbModelParam._m0[14u].w;
        float _1917 = fma(_1116, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108)) + cbModelParam._m0[15u].w;
        float _1920 = fma(_1057, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055));
        float _1923 = fma(_1057, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055));
        float _1926 = fma(_1057, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055));
        float _1954;
        if (_1920 > 0.0)
        {
            _1954 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1954 = frontier_phi_14_12_ladder;
        }
        float _2123;
        if (_1923 > 0.0)
        {
            _2123 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2123 = frontier_phi_23_19_ladder;
        }
        float _2418;
        if (_1926 > 0.0)
        {
            _2418 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2418 = frontier_phi_35_30_ladder;
        }
        float _2420 = isnan(_2123) ? _1954 : (isnan(_1954) ? _2123 : min(_1954, _2123));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1920) + _1909;
        float _2426 = (_2421 * _1923) + _1913;
        float _2427 = (_2421 * _1926) + _1917;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1862);
            frontier_phi_13_35_ladder = _2572.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2572.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2572.x * cbModelParam._m0[1u].y;
        }
        _1942 = frontier_phi_13_35_ladder_2;
        _1944 = frontier_phi_13_35_ladder_1;
        _1946 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1055, _1056, _1057), _1862);
        _1942 = _1930.x * cbModelParam._m0[1u].y;
        _1944 = _1930.y * cbModelParam._m0[1u].y;
        _1946 = _1930.z * cbModelParam._m0[1u].y;
    }
    float _1950 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1950 : min(cbModelParam._m0[25u].w, _1950));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1116, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1116, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1116, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1057, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055));
        float _2018 = fma(_1057, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055));
        float _2021 = fma(_1057, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055));
        float _2128;
        if (_2015 > 0.0)
        {
            _2128 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2128 = frontier_phi_25_21_ladder;
        }
        float _2445;
        if (_2018 > 0.0)
        {
            _2445 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2445 = frontier_phi_37_32_ladder;
        }
        float _2772;
        if (_2021 > 0.0)
        {
            _2772 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2772 = frontier_phi_47_44_ladder;
        }
        float _2774 = isnan(_2445) ? _2128 : (isnan(_2128) ? _2445 : min(_2128, _2445));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2015) + _2004;
        float _2780 = (_2775 * _2018) + _2008;
        float _2781 = (_2775 * _2021) + _2012;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _1951);
            frontier_phi_22_47_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_22_47_ladder_2;
        _2042 = frontier_phi_22_47_ladder_1;
        _2044 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1055, _1056, _1057), _1951);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2056 = ((((1.0 - _1076) * ((_1063 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1076 * _1063)) * _1047;
    float _2057 = _2056 * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2058 = _2056 * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2059 = _2056 * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2062 = fma(_2059, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2065 = fma(_2059, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2068 = fma(_2059, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2115 = _2102 / _2114;
    float _2116 = _2106 / _2114;
    float _2117 = _2110 / _2114;
    float _2264;
    float _2265;
    float _2266;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2144 = ((uint(_2117 > cbSceneParam._m0[59u].y) + uint(_2117 > cbSceneParam._m0[59u].x)) + uint(_2117 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2145 = _2144 + 43u;
        uint _2153 = _2144 + 44u;
        uint _2161 = _2144 + 45u;
        uint _2169 = _2144 + 46u;
        float _2180 = fma(_2114, cbSceneParam._m0[_2145].w, fma(_2110, cbSceneParam._m0[_2145].z, fma(_2106, cbSceneParam._m0[_2145].y, _2102 * cbSceneParam._m0[_2145].x)));
        float _2184 = fma(_2114, cbSceneParam._m0[_2153].w, fma(_2110, cbSceneParam._m0[_2153].z, fma(_2106, cbSceneParam._m0[_2153].y, _2102 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2114, cbSceneParam._m0[_2169].w, fma(_2110, cbSceneParam._m0[_2169].z, fma(_2106, cbSceneParam._m0[_2169].y, _2102 * cbSceneParam._m0[_2169].x)));
        float _2197 = cbSceneParam._m0[33u].z * _2192;
        float _2199 = cbSceneParam._m0[33u].w * _2192;
        float _2202 = fma(_2114, cbSceneParam._m0[_2161].w, fma(_2110, cbSceneParam._m0[_2161].z, fma(_2106, cbSceneParam._m0[_2161].y, _2102 * cbSceneParam._m0[_2161].x))) / _2192;
        float _2250 = (cbSceneParam._m0[33u].x - sqrt(((_2116 * _2116) + (_2115 * _2115)) + (_2117 * _2117))) * cbSceneParam._m0[33u].y;
        float _4547 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2257 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 + _2180) / _2192, (_2199 + _2184) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 + _2180) / _2192, (_2184 - _2197) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 - _2197) / _2192, (_2184 - _2199) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 - _2199) / _2192, (_2197 + _2184) / _2192), _2202), 0.0)).x), vec4(0.25)));
        _2264 = 1.0 - (_2257 * cbSceneParam._m0[34u].x);
        _2265 = 1.0 - (_2257 * cbSceneParam._m0[34u].y);
        _2266 = 1.0 - (_2257 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2264 = 1.0;
        _2265 = 1.0;
        _2266 = 1.0;
    }
    float _2330;
    float _2332;
    float _2334;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2318 = fma(_2114, cbSceneParam._m0[63u].w, fma(_2110, cbSceneParam._m0[63u].z, fma(_2106, cbSceneParam._m0[63u].y, _2102 * cbSceneParam._m0[63u].x)));
        float _2319 = fma(_2114, cbSceneParam._m0[60u].w, fma(_2110, cbSceneParam._m0[60u].z, fma(_2106, cbSceneParam._m0[60u].y, _2102 * cbSceneParam._m0[60u].x))) / _2318;
        float _2320 = fma(_2114, cbSceneParam._m0[61u].w, fma(_2110, cbSceneParam._m0[61u].z, fma(_2106, cbSceneParam._m0[61u].y, _2102 * cbSceneParam._m0[61u].x))) / _2318;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2319 >= cbSceneParam._m0[64u].x) && (_2320 >= cbSceneParam._m0[64u].y)) && (_2319 <= cbSceneParam._m0[64u].z)) && (_2320 <= cbSceneParam._m0[64u].w))
        {
            float _2458 = fma(_2114, cbSceneParam._m0[62u].w, fma(_2110, cbSceneParam._m0[62u].z, fma(_2106, cbSceneParam._m0[62u].y, _2102 * cbSceneParam._m0[62u].x))) / _2318;
            float _2462 = isnan(cbSceneParam._m0[41u].w) ? _2458 : (isnan(_2458) ? cbSceneParam._m0[41u].w : max(_2458, cbSceneParam._m0[41u].w));
            float _2505 = (cbSceneParam._m0[33u].x - sqrt(((_2116 * _2116) + (_2115 * _2115)) + (_2117 * _2117))) * cbSceneParam._m0[33u].y;
            float _4563 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
            float _2512 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2319, cbSceneParam._m0[33u].w + _2320), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2319, _2320 - cbSceneParam._m0[33u].z), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2319 - cbSceneParam._m0[33u].z, _2320 - cbSceneParam._m0[33u].w), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2319 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2320), _2462), 0.0)).x), vec4(0.25)));
            float _2516 = 1.0 - (_2512 * cbSceneParam._m0[34u].x);
            float _2517 = 1.0 - (_2512 * cbSceneParam._m0[34u].y);
            float _2518 = 1.0 - (_2512 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
            frontier_phi_34_33_ladder_1 = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
            frontier_phi_34_33_ladder_2 = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
        }
        else
        {
            frontier_phi_34_33_ladder = _2266;
            frontier_phi_34_33_ladder_1 = _2265;
            frontier_phi_34_33_ladder_2 = _2264;
        }
        _2330 = frontier_phi_34_33_ladder_2;
        _2332 = frontier_phi_34_33_ladder_1;
        _2334 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2330 = _2264;
        _2332 = _2265;
        _2334 = _2266;
    }
    uvec4 _2339 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2341 = _2339.x * 14u;
    uint _2342 = _2341 + 13u;
    float _2349 = _1047 + (-1.0);
    float _2354 = (cbLight._m0[_2342].x * _2349) + 1.0;
    float _2355 = (cbLight._m0[_2342].y * _2349) + 1.0;
    float _2356 = (cbLight._m0[_2342].z * _2349) + 1.0;
    float _2357 = (cbLight._m0[_2342].w * _2349) + 1.0;
    uint _2358 = _2341 + 5u;
    float _2364 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
    uint _2368 = _2341 + 4u;
    float _2377 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2381 = _2341 | 1u;
    float _2392 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_898, _899, _900));
    float _2395 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_898, _899, _900));
    float _4599 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _4610 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2400 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2402 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2409 = ((cbLight._m0[_2358].x * _2364) * _2402) + (((cbLight._m0[_2368].x * _2330) * _2377) * _2400);
    float _2410 = ((_2364 * cbLight._m0[_2358].y) * _2402) + (((cbLight._m0[_2368].y * _2332) * _2377) * _2400);
    float _2411 = ((_2364 * cbLight._m0[_2358].z) * _2402) + (((cbLight._m0[_2368].z * _2334) * _2377) * _2400);
    uvec4 _2415 = floatBitsToUint(cbLight._m0[_2341 + 12u]);
    bool _2417 = _2415.x == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2417)
    {
        _2519 = _2409;
        _2521 = _2410;
        _2523 = _2411;
    }
    else
    {
        uint _2527 = _2341 + 6u;
        float _2543 = (dot(vec3(cbLight._m0[_2341 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2544 = _2543 * _2543;
        float _4621 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2545 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2546 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2519 = (((cbLight._m0[_2527].x * 0.3183098733425140380859375) * _2545) * _2546) + _2409;
        _2521 = (((cbLight._m0[_2527].y * 0.3183098733425140380859375) * _2545) * _2546) + _2410;
        _2523 = (((cbLight._m0[_2527].z * 0.3183098733425140380859375) * _2545) * _2546) + _2411;
    }
    bool _2526 = _2415.y == 0u;
    float _2581;
    float _2583;
    float _2585;
    if (_2526)
    {
        _2581 = _2519;
        _2583 = _2521;
        _2585 = _2523;
    }
    else
    {
        uint _2743 = _2341 + 7u;
        float _2759 = (dot(vec3(cbLight._m0[_2341 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4637 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2762 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2581 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2519;
        _2583 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2521;
        _2585 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2523;
    }
    uint _2588 = _2341 + 8u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _901) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2341].x + _976;
    float _2604 = cbLight._m0[_2341].y + _977;
    float _2605 = cbLight._m0[_2341].z + _978;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2341].xyz));
    float _4653 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _4664 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2617 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2618 = dot(vec3(_898, _899, _900), vec3(_2610, _2611, _2612));
    float _4675 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2610, _2611, _2612));
    float _4686 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2602 * _2602;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2641 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2642 = 1.0 - _2602;
    float _2653 = (0.5 / (((_2617 * ((_2616 * _2642) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2642) + _2602) * _2616))) * _2616;
    float _4697 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    uint _2669 = _2341 + 9u;
    float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _901) * 0.949999988079071044921875);
    float _2681 = _2680 * _2680;
    float _2682 = cbLight._m0[_2381].x + _976;
    float _2683 = cbLight._m0[_2381].y + _977;
    float _2684 = cbLight._m0[_2381].z + _978;
    float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
    float _2689 = _2688 * _2682;
    float _2690 = _2688 * _2683;
    float _2691 = _2688 * _2684;
    float _2692 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2381].xyz));
    float _4708 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2696 = dot(vec3(_898, _899, _900), vec3(_2689, _2690, _2691));
    float _4719 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2700 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2689, _2690, _2691));
    float _4730 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2704 = _2681 * _2681;
    float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
    float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2718 = 1.0 - _2681;
    float _2728 = (0.5 / (((_2617 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2718) + _2681) * _2695))) * _2695;
    float _4741 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
    float _2740 = (((_2717 * cbLight._m0[_2669].x) * _2730) * _2364) + ((((cbLight._m0[_2588].x * _2330) * _2641) * _2655) * _2377);
    float _2741 = (((_2717 * cbLight._m0[_2669].y) * _2730) * _2364) + ((((cbLight._m0[_2588].y * _2332) * _2641) * _2655) * _2377);
    float _2742 = (((_2717 * cbLight._m0[_2669].z) * _2730) * _2364) + ((((cbLight._m0[_2588].z * _2334) * _2641) * _2655) * _2377);
    float _2798;
    float _2800;
    float _2802;
    if (_2417)
    {
        _2798 = _2740;
        _2800 = _2741;
        _2802 = _2742;
    }
    else
    {
        uint _2804 = _2341 + 2u;
        uint _2808 = _2341 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _901) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _976;
        float _2825 = cbLight._m0[_2804].y + _977;
        float _2826 = cbLight._m0[_2804].z + _978;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2804].xyz));
        float _4752 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2838 = dot(vec3(_898, _899, _900), vec3(_2831, _2832, _2833));
        float _4763 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4774 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2859 = (exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2860 = 1.0 - _2823;
        float _2870 = (0.5 / (((_2617 * ((_2837 * _2860) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2860) + _2823) * _2837))) * _2837;
        float _4785 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2798 = (((_2859 * cbLight._m0[_2808].x) * _2872) * _2873) + _2740;
        _2800 = (((_2859 * cbLight._m0[_2808].y) * _2872) * _2873) + _2741;
        _2802 = (((_2859 * cbLight._m0[_2808].z) * _2872) * _2873) + _2742;
    }
    float _2904;
    float _2906;
    float _2908;
    if (_2526)
    {
        _2904 = _2798;
        _2906 = _2800;
        _2908 = _2802;
    }
    else
    {
        uint _2915 = _2341 + 3u;
        uint _2919 = _2341 + 11u;
        float _2933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2915].w)) * _901) * 0.949999988079071044921875);
        float _2934 = _2933 * _2933;
        float _2935 = cbLight._m0[_2915].x + _976;
        float _2936 = cbLight._m0[_2915].y + _977;
        float _2937 = cbLight._m0[_2915].z + _978;
        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
        float _2942 = _2941 * _2935;
        float _2943 = _2941 * _2936;
        float _2944 = _2941 * _2937;
        float _2945 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2915].xyz));
        float _4801 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2949 = dot(vec3(_898, _899, _900), vec3(_2942, _2943, _2944));
        float _4812 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2953 = dot(vec3(cbLight._m0[_2915].xyz), vec3(_2942, _2943, _2944));
        float _4823 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2957 = _2934 * _2934;
        float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
        float _2970 = (exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2971 = 1.0 - _2934;
        float _2981 = (0.5 / (((_2617 * ((_2948 * _2971) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2971) + _2934) * _2948))) * _2948;
        float _4834 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2904 = (((_2970 * cbLight._m0[_2919].x) * _2983) * _2984) + _2798;
        _2906 = (((_2970 * cbLight._m0[_2919].y) * _2983) * _2984) + _2800;
        _2908 = (((_2970 * cbLight._m0[_2919].z) * _2983) * _2984) + _2802;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2339.y == 0u)
    {
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.x;
        uint _3017 = uint((float(_3005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _985) / _3006))) + floor(float(uint(cbSceneParam._m0[85u].x * _984) / _3006)));
        float _3027 = (log2(_2117 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3028 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        uint _3031 = uint(isnan(14.0) ? _3028 : (isnan(_3028) ? 14.0 : min(_3028, 14.0)));
        uvec4 _3036 = texelFetch(g_lightClusterGridBuffer, int(((_3031 << 2u) + (_3017 << 6u)) >> 2u));
        uint _3037 = _3036.x;
        uint _3038 = _3005.z;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((((1u << ((_3038 >> 4u) & 15u)) + 4294967295u) & _3037) == 0u) || ((_3038 & 240u) == 0u))
        {
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
        }
        else
        {
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            uint _3267 = 0u;
            uint _3276;
            bool _3277;
            for (;;)
            {
                _3276 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                _3277 = _3276 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3277)
                {
                    frontier_phi_66_pred = _3266;
                    frontier_phi_66_pred_1 = _3265;
                    frontier_phi_66_pred_2 = _3264;
                    frontier_phi_66_pred_3 = _3263;
                    frontier_phi_66_pred_4 = _3262;
                    frontier_phi_66_pred_5 = _3261;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3276;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3267 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2115;
                        float _3452 = _3411.y - _2116;
                        float _3453 = _3411.z - _2117;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_1003, _1006, _1009), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4860 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2115;
                        float _3487 = (-0.0) - _2116;
                        float _3488 = (-0.0) - _2117;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _1063;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_1003, _1006, _1009), vec3(_3493, _3494, _3495));
                        float _4876 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3527 = dot(vec3(_1003, _1006, _1009), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4887 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4898 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4909 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3320 = (_3482 * _3430.x) + _3388;
                        _3321 = (_3482 * _3430.y) + _3389;
                        _3322 = (_3482 * _3430.z) + _3390;
                        _3317 = (_3562 * _3447.x) + _3385;
                        _3318 = (_3562 * _3447.y) + _3386;
                        _3319 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_66_pred = _3322;
                    frontier_phi_66_pred_1 = _3321;
                    frontier_phi_66_pred_2 = _3320;
                    frontier_phi_66_pred_3 = _3319;
                    frontier_phi_66_pred_4 = _3318;
                    frontier_phi_66_pred_5 = _3317;
                }
                _3128 = frontier_phi_66_pred;
                _3126 = frontier_phi_66_pred_1;
                _3124 = frontier_phi_66_pred_2;
                _3122 = frontier_phi_66_pred_3;
                _3120 = frontier_phi_66_pred_4;
                _3118 = frontier_phi_66_pred_5;
                uint _3268 = _3267 + 1u;
                if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3261 = _3118;
                    _3262 = _3120;
                    _3263 = _3122;
                    _3264 = _3124;
                    _3265 = _3126;
                    _3266 = _3128;
                    _3267 = _3268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
        }
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.z;
        uint _3134 = (_3132 >> 8u) & 15u;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((4294967295u << _3134) & _3037) == 0u)
        {
            _3229 = _3117;
            _3231 = _3119;
            _3233 = _3121;
            _3235 = _3123;
            _3237 = _3125;
            _3239 = _3127;
        }
        else
        {
            float _3254 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
            float _3255 = _3254 * _2115;
            float _3256 = _3254 * _2116;
            float _3257 = _3254 * _2117;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3134 < ((_3132 >> 12u) & 15u))
            {
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3368 = _3117;
                float _3369 = _3119;
                float _3370 = _3121;
                float _3371 = _3123;
                float _3372 = _3125;
                float _3373 = _3127;
                uint _3374 = _3134;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3384)
                    {
                        frontier_phi_72_pred = _3373;
                        frontier_phi_72_pred_1 = _3372;
                        frontier_phi_72_pred_2 = _3371;
                        frontier_phi_72_pred_3 = _3370;
                        frontier_phi_72_pred_4 = _3369;
                        frontier_phi_72_pred_5 = _3368;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        uint _3586 = _3383;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3597 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3597 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3597 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2117, _3704.z, fma(_2116, _3704.y, _3704.x * _2115)) + _3704.w;
                            _3717 = !((fma(_2117, _3685.z, fma(_2116, _3685.y, _3685.x * _2115)) + _3685.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3612.x - _2115;
                                float _3745 = _3612.y - _2116;
                                float _3746 = _3612.z - _2117;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3613 * _3613));
                                float _4920 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3762 = sqrt(_3747) * _3628.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1003, _1006, _1009))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2117, _3655.z, fma(_2116, _3655.y, _3655.x * _2115)) + _3655.w) / _3716;
                                float _3776 = (fma(_2117, _3670.z, fma(_2116, _3670.y, _3670.x * _2115)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4936 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1063;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3255;
                                float _3806 = _3752 - _3256;
                                float _3807 = _3753 - _3257;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1003, _1006, _1009), vec3((-0.0) - _3255, (-0.0) - _3256, (-0.0) - _3257));
                                float _4947 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3819 = dot(vec3(_1003, _1006, _1009), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4958 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1003, _1006, _1009), vec3(_3751, _3752, _3753))) + _3828;
                                float _4969 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _4980 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3782 * _3628.y;
                                frontier_phi_78_pred_1 = _3782 * _3628.x;
                                frontier_phi_78_pred_2 = _3856 * _3640.z;
                                frontier_phi_78_pred_3 = _3856 * _3640.y;
                                frontier_phi_78_pred_4 = _3856 * _3640.x;
                                frontier_phi_78_pred_5 = _3782 * _3628.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_78_pred;
                            _3863 = frontier_phi_78_pred_1;
                            _3862 = frontier_phi_78_pred_2;
                            _3861 = frontier_phi_78_pred_3;
                            _3860 = frontier_phi_78_pred_4;
                            _3865 = frontier_phi_78_pred_5;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3572;
                        frontier_phi_72_pred_1 = _3571;
                        frontier_phi_72_pred_2 = _3570;
                        frontier_phi_72_pred_3 = _3569;
                        frontier_phi_72_pred_4 = _3568;
                        frontier_phi_72_pred_5 = _3567;
                    }
                    _3240 = frontier_phi_72_pred;
                    _3238 = frontier_phi_72_pred_1;
                    _3236 = frontier_phi_72_pred_2;
                    _3234 = frontier_phi_72_pred_3;
                    _3232 = frontier_phi_72_pred_4;
                    _3230 = frontier_phi_72_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3230;
                        _3369 = _3232;
                        _3370 = _3234;
                        _3371 = _3236;
                        _3372 = _3238;
                        _3373 = _3240;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3240;
                frontier_phi_60_61_ladder_1 = _3238;
                frontier_phi_60_61_ladder_2 = _3234;
                frontier_phi_60_61_ladder_3 = _3232;
                frontier_phi_60_61_ladder_4 = _3230;
                frontier_phi_60_61_ladder_5 = _3236;
            }
            else
            {
                frontier_phi_60_61_ladder = _3127;
                frontier_phi_60_61_ladder_1 = _3125;
                frontier_phi_60_61_ladder_2 = _3121;
                frontier_phi_60_61_ladder_3 = _3119;
                frontier_phi_60_61_ladder_4 = _3117;
                frontier_phi_60_61_ladder_5 = _3123;
            }
            _3229 = frontier_phi_60_61_ladder_4;
            _3231 = frontier_phi_60_61_ladder_3;
            _3233 = frontier_phi_60_61_ladder_2;
            _3235 = frontier_phi_60_61_ladder_5;
            _3237 = frontier_phi_60_61_ladder_1;
            _3239 = frontier_phi_60_61_ladder;
        }
        float _3244 = isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0));
        _3050 = (_3244 * _3235) + _2581;
        _3052 = (_3244 * _3237) + _2583;
        _3054 = (_3244 * _3239) + _2585;
        _3056 = ((_3229 * 0.039999999105930328369140625) * _3244) + _2904;
        _3058 = ((_3231 * 0.039999999105930328369140625) * _3244) + _2906;
        _3060 = ((_3233 * 0.039999999105930328369140625) * _3244) + _2908;
    }
    else
    {
        _3050 = _2581;
        _3052 = _2583;
        _3054 = _2585;
        _3056 = _2904;
        _3058 = _2906;
        _3060 = _2908;
    }
    float _4996 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5007 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5018 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    uint _3080 = _257 + 6u;
    float _3088 = _984 / cbSceneParam._m0[86u].x;
    float _3089 = _985 / cbSceneParam._m0[86u].y;
    vec4 _3103 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3105 = _3103.x;
    float _3106 = _3103.y;
    float _3107 = _3103.z;
    float _3108 = _3103.w;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _3142 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _3143 = _3142 / _919;
        float _3154 = _3143 * _969;
        float _3155 = _970 * _3143;
        float _3156 = (-0.0) - _3155;
        float _3157 = _3143 * _971;
        float _3159 = (cbSceneParam._m0[77u].w * _3156) / _3142;
        float _3160 = _3159 + cbSceneParam._m0[79u].w;
        float _3161 = cbSceneParam._m0[79u].w - _3155;
        float _3167 = sqrt(((_3154 * _3154) + (_3155 * _3155)) + (_3157 * _3157));
        float _3170 = (1.0 - (cbSceneParam._m0[77u].w / _3142)) * _3167;
        float _3175 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3177 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3156 - _3159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3160 > 0.0) ? exp2(_3175 * _3160) : (2.0 - exp2(_3177 * _3160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3170;
        }
        else
        {
            float _3290 = 1.0 / cbSceneParam._m0[80u].x;
            float _3291 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : max(_3160, _3161));
            float _3292 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : min(_3160, _3161));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            _3330 = ((abs(_3167 / _3156) * cbSceneParam._m0[80u].y) * ((((_3301 - _3302) * 2.0) - ((exp2(_3175 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0)))) - exp2(_3175 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))))) * _3290)) - ((exp2(_3177 * _3301) - exp2(_3177 * _3302)) * _3290))) + (_3170 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3108);
        _3179 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3105;
        _3181 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3106;
        _3183 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3107;
        _3185 = _3341 * _3108;
    }
    else
    {
        _3179 = _3105;
        _3181 = _3106;
        _3183 = _3107;
        _3185 = _3108;
    }
    float _3197 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3198 = _3197 == 3.0;
    float _3199 = log2(_3185);
    float _3206 = exp2(_3199 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_3050 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1047))) + ((_3056 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1851)) * cbPerFrame._m0[3u].x));
    float _3207 = exp2(_3199 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_3052 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1047))) + ((_3058 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1851)) * cbPerFrame._m0[3u].x));
    float _3208 = exp2(_3199 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3054 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1047))) + ((_3060 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1851)) * cbPerFrame._m0[3u].x));
    float _3217 = (_3197 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3217 * (_3198 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3179)));
    SV_Target.y = _3217 * (_3198 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.z = _3217 * (_3198 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.w = cbInstanceData._m0[_3080].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3080].w;
}


