#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1556;
float _4195;
float _4196;
float _4197;
float _4198;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4207 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4218 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4229 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _455 = _453.x;
    float _467 = dot(vec4(_455, _453.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _484 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_455 - _467) * cbMtdParam._m0[24u].z) + _467) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4240 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _492 = (_485 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _493 = (_485 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _494 = (_485 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _557 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[24u].z) + _543) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4251 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _568 = (_347.x * cbMtdParam._m0[9u].x) * ((_558 * ((_511.x * cbMtdParam._m0[13u].x) - _492)) + _492);
    float _569 = (_347.y * cbMtdParam._m0[9u].y) * ((_558 * ((_511.y * cbMtdParam._m0[13u].y) - _493)) + _493);
    float _570 = (_347.z * cbMtdParam._m0[9u].z) * ((_558 * ((_511.z * cbMtdParam._m0[13u].z) - _494)) + _494);
    float _574 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _568;
    float _577 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _569;
    float _580 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _570;
    float _588 = (((_568 - _574) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) + _574) * 4.55000019073486328125;
    float _590 = (((_569 - _577) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) + _577) * 4.55000019073486328125;
    float _592 = (((_570 - _580) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) + _580) * 4.55000019073486328125;
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _674 = _672.x;
    float _675 = _672.y;
    float _676 = _672.z;
    float _683 = ((_655.x - _674) * _485) + _674;
    float _684 = ((_655.y - _675) * _485) + _675;
    float _685 = ((_655.z - _676) * _485) + _676;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _710 = ((_697.z - _685) * _558) + _685;
    float _713 = ((((_697.x - _683) * _558) + _683) * 2.0) + (-1.0);
    float _714 = ((((_697.y - _684) * _558) + _684) * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4262 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _750 = (_713 + ((((_630.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_738.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _751 = (_714 + ((((_630.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_738.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _754 = fma(_720, _260, fma(_751, _267, _750 * _253));
    float _757 = fma(_720, _261, fma(_751, _268, _750 * _254));
    float _760 = fma(_720, _262, fma(_751, _269, _750 * _255));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    vec4 _791 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _793 = _791.x;
    float _794 = 1.0 - _793;
    float _800 = (cbMtdParam._m0[19u].x + dot(vec4(_764 * _754, _764 * _757, _764 * _760, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_793 - _794) * cbMtdParam._m0[24u].w) + _794) * cbMtdParam._m0[21u].z);
    float _4273 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _803 = (-0.0) - cbMtdParam._m0[24u].x;
    float _805 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _805 : (isnan(_805) ? 1.0 : min(_805, 1.0));
    float _813 = _801 - ((_801 * TEXCOORD_8.x) * _806);
    float _814 = _801 - ((_801 * TEXCOORD_8.y) * _806);
    float _815 = _801 - ((_801 * TEXCOORD_8.z) * _806);
    float _822 = (_813 * ((_611.x * cbMtdParam._m0[18u].x) - _588)) + _588;
    float _823 = (_814 * ((_611.y * cbMtdParam._m0[18u].y) - _590)) + _590;
    float _824 = (_815 * ((_611.z * cbMtdParam._m0[18u].z) - _592)) + _592;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _838 = _836.x;
    float _839 = 1.0 - _838;
    float _867 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_838 - _839) * cbMtdParam._m0[24u].y) + _839) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4294 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _868 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _876 = ((((cbMtdParam._m0[10u].x - _822) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _868) + _822;
    float _877 = ((((cbMtdParam._m0[10u].y - _823) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _868) + _823;
    float _878 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _824)) * _868) + _824;
    float _883 = (((_630.z - _710) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _710;
    float _887 = ((_738.z - _883) * cbMtdParam._m0[19u].w) + _883;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _908 = (_901.x * 2.0) + (-1.0);
    float _909 = (_901.y * 2.0) + (-1.0);
    float _910 = dot(vec2(_908, _909), vec2(_908, _909));
    float _4305 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _918 = ((_901.z - _887) * _813) + _887;
    float _921 = ((cbMtdParam._m0[23u].y - _918) * _868) + _918;
    vec4 _940 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _946 = (_940.x * 2.0) + (-1.0);
    float _947 = (_940.y * 2.0) + (-1.0);
    float _948 = dot(vec2(_946, _947), vec2(_946, _947));
    float _4316 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _963 = ((sqrt(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) - _720) * _815) + _720;
    float _966 = (((_908 - _750) * _813) + _750) + (cbMtdParam._m0[21u].x * _750);
    float _967 = (((_909 - _751) * _814) + _751) + (cbMtdParam._m0[21u].x * _751);
    float _978 = (((_946 - _966) + (_966 * cbMtdParam._m0[22u].z)) * _868) + _966;
    float _979 = (((_947 - _967) + (_967 * cbMtdParam._m0[22u].z)) * _868) + _967;
    float _980 = (_868 * (sqrt(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) - _963)) + _963;
    float _982 = cbMtdParam._m0[22u].x + _738.w;
    float _985 = fma(_980, _260, fma(_979, _267, _978 * _253));
    float _988 = fma(_980, _261, fma(_979, _268, _978 * _254));
    float _991 = fma(_980, _262, fma(_979, _269, _978 * _255));
    float _995 = inversesqrt(dot(vec3(_985, _988, _991), vec3(_985, _988, _991)));
    float _996 = _995 * _985;
    float _997 = _995 * _988;
    float _998 = _995 * _991;
    float _4327 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _999 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4349 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4360 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4371 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _1017 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1067 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1057);
    float _1068 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1057);
    float _1069 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1057);
    float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
    float _1074 = _1067 * _1073;
    float _1075 = _1068 * _1073;
    float _1076 = _1069 * _1073;
    vec4 _1081 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1083 = _1081.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1237 = sqrt(((_1067 * _1067) + (_1068 * _1068)) + (_1069 * _1069));
        float _1243 = (cbMatDynParam._m0[5u].x * _1237) + cbMatDynParam._m0[5u].y;
        float _4382 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1248 = (cbMatDynParam._m0[5u].z * _1237) + cbMatDynParam._m0[5u].w;
        float _4393 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) - _1244)) + _1244) < ((_1083 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1094 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1095 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1113 = fma(_998, cbSceneParam._m0[5u].z, fma(_997, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _996));
    float _1116 = fma(_998, cbSceneParam._m0[6u].z, fma(_997, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _996));
    float _1119 = fma(_998, cbSceneParam._m0[7u].z, fma(_997, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _996));
    uint _1132 = _291 + 9u;
    uint _1133 = _1132 + uint(cbMatDynParam._m0[0u].w);
    float _1139 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * cbInstanceData._m0[_1133].x;
    float _1140 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * cbInstanceData._m0[_1133].y;
    float _1141 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * cbInstanceData._m0[_1133].z;
    float _4404 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    vec4 _1153 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1094, cbSceneParam._m0[86u].y * _1095));
    float _1157 = ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * TEXCOORD_5.w) * _1153.x;
    float _1158 = dot(vec3(_996, _997, _998), vec3(_1074, _1075, _1076));
    float _1161 = _1158 * 2.0;
    float _1165 = (_1161 * _996) - _1074;
    float _1166 = (_1161 * _997) - _1075;
    float _1167 = (_1161 * _998) - _1076;
    float _1171 = abs(dot(vec3(_1074, _1075, _1076), vec3(_996, _997, _998)));
    float _4437 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1173 = sqrt(_999);
    float _1186 = exp2((_1173 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1173 * 3.0));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1555;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1280 = fma(_1226, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218));
        float _1284 = fma(_1226, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218));
        float _1288 = fma(_1226, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218));
        float _1313 = _1218 + _996;
        float _1314 = _1222 + _997;
        float _1315 = _1226 + _998;
        float _1325 = fma(_1315, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313)) - _1280;
        float _1326 = fma(_1315, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313)) - _1284;
        float _1327 = fma(_1315, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313)) - _1288;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1280 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1284 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[34u].z) + ((((((_1288 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1383 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1349.x + (-0.5));
        float _1385 = _1383 * (_1349.y + (-0.5));
        float _1386 = _1383 * (_1349.z + (-0.5));
        float _1393 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1356.x + (-0.5));
        float _1395 = _1393 * (_1356.y + (-0.5));
        float _1396 = _1393 * (_1356.z + (-0.5));
        float _1403 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1363.x + (-0.5));
        float _1405 = _1403 * (_1363.y + (-0.5));
        float _1406 = _1403 * (_1363.z + (-0.5));
        float _1413 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1370.x + (-0.5));
        float _1415 = _1413 * (_1370.y + (-0.5));
        float _1416 = _1413 * (_1370.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1437 = (dot(vec3(_996, _997, _998), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1447 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4485 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1449 + 1.0))) + _1454) * _1417;
        float _1464 = _1385 * 0.5;
        float _1465 = _1395 * 0.5;
        float _1466 = _1405 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_996, _997, _998), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4518 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1491 + 1.0))) + _1496) * _1418;
        float _1506 = _1386 * 0.5;
        float _1507 = _1396 * 0.5;
        float _1508 = _1406 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_996, _997, _998), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4551 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1533 + 1.0))) + _1538) * _1419;
        _1555 = _1386;
        _1557 = _1385;
        _1558 = _1384;
        _1559 = _1396;
        _1560 = _1395;
        _1561 = _1394;
        _1562 = _1406;
        _1563 = _1405;
        _1564 = _1404;
        _1565 = _1419;
        _1566 = _1418;
        _1567 = _1417;
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1556;
        _1557 = _1556;
        _1558 = _1556;
        _1559 = _1556;
        _1560 = _1556;
        _1561 = _1556;
        _1562 = _1556;
        _1563 = _1556;
        _1564 = _1556;
        _1565 = _1556;
        _1566 = _1556;
        _1567 = _1556;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1597 = fma(_1226, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218));
        float _1601 = fma(_1226, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218));
        float _1605 = fma(_1226, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218));
        float _1628 = _1218 + _996;
        float _1629 = _1222 + _997;
        float _1630 = _1226 + _998;
        float _1640 = fma(_1630, cbModelParam._m0[30u].z, fma(_1629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1628)) - _1597;
        float _1641 = fma(_1630, cbModelParam._m0[31u].z, fma(_1629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1628)) - _1601;
        float _1642 = fma(_1630, cbModelParam._m0[32u].z, fma(_1629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1628)) - _1605;
        float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
        float _1659 = ((_1646 * _1640) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1597 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1646 * _1641) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1601 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1646 * _1642) / cbModelParam._m0[35u].z) + ((((((_1605 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        float _1696 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1663.x + (-0.5));
        float _1698 = _1696 * (_1663.y + (-0.5));
        float _1699 = _1696 * (_1663.z + (-0.5));
        float _1706 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1670.x + (-0.5));
        float _1708 = _1706 * (_1670.y + (-0.5));
        float _1709 = _1706 * (_1670.z + (-0.5));
        float _1716 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1677.x + (-0.5));
        float _1718 = _1716 * (_1677.y + (-0.5));
        float _1719 = _1716 * (_1677.z + (-0.5));
        float _1726 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1684.x + (-0.5));
        float _1728 = _1726 * (_1684.y + (-0.5));
        float _1729 = _1726 * (_1684.z + (-0.5));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = _1697 * 0.5;
        float _1734 = _1707 * 0.5;
        float _1735 = _1717 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_996, _997, _998), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4592 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4603 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4614 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_1760 + 1.0))) + _1765) * _1730;
        float _1775 = _1698 * 0.5;
        float _1776 = _1708 * 0.5;
        float _1777 = _1718 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_996, _997, _998), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4625 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4636 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4647 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_1802 + 1.0))) + _1807) * _1731;
        float _1817 = _1699 * 0.5;
        float _1818 = _1709 * 0.5;
        float _1819 = _1719 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_996, _997, _998), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4658 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4669 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4680 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_1844 + 1.0))) + _1849) * _1732;
        _1866 = _1699;
        _1867 = _1698;
        _1868 = _1697;
        _1869 = _1709;
        _1870 = _1708;
        _1871 = _1707;
        _1872 = _1719;
        _1873 = _1718;
        _1874 = _1717;
        _1875 = _1732;
        _1876 = _1731;
        _1877 = _1730;
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
    }
    else
    {
        _1866 = _1556;
        _1867 = _1556;
        _1868 = _1556;
        _1869 = _1556;
        _1870 = _1556;
        _1871 = _1556;
        _1872 = _1556;
        _1873 = _1556;
        _1874 = _1556;
        _1875 = _1556;
        _1876 = _1556;
        _1877 = _1556;
        _1878 = 0.0;
        _1879 = 0.0;
        _1880 = 0.0;
    }
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1568)) + _1568;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1569)) + _1569;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1570)) + _1570;
    float _1913 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1890));
    float _1934 = _1165 * 0.5;
    float _1935 = _1166 * 0.5;
    float _1936 = _1167 * 0.5;
    float _1937 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1940 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1943 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1950 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1555, _1559, _1562, _1565));
        float _1954 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1958 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1965 = dot(vec4(cbModelParam._m0[39u]), vec4(_1934, _1935, _1936, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1965) ? 0.0 : (isnan(0.0) ? _1965 : max(0.0, _1965))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1979 = dot(vec4(cbModelParam._m0[40u]), vec4(_1934, _1935, _1936, 1.0));
        _1988 = dot(vec3(isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1988 = 1.0;
    }
    float _1992 = (_1988 * cbModelParam._m0[1u].x) + (_1977 * (1.0 - cbModelParam._m0[1u].x));
    float _2002 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _999);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2002 : min(cbModelParam._m0[25u].z, _2002));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2050 = fma(_1226, cbModelParam._m0[13u].z, fma(_1222, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218)) + cbModelParam._m0[13u].w;
        float _2054 = fma(_1226, cbModelParam._m0[14u].z, fma(_1222, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218)) + cbModelParam._m0[14u].w;
        float _2058 = fma(_1226, cbModelParam._m0[15u].z, fma(_1222, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218)) + cbModelParam._m0[15u].w;
        float _2061 = fma(_1167, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165));
        float _2064 = fma(_1167, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165));
        float _2067 = fma(_1167, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165));
        float _2095;
        if (_2061 > 0.0)
        {
            _2095 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2095 = frontier_phi_17_15_ladder;
        }
        float _2264;
        if (_2064 > 0.0)
        {
            _2264 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2264 = frontier_phi_26_22_ladder;
        }
        float _2559;
        if (_2067 > 0.0)
        {
            _2559 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2559 = frontier_phi_38_33_ladder;
        }
        float _2561 = isnan(_2264) ? _2095 : (isnan(_2095) ? _2264 : min(_2095, _2264));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _2061) + _2050;
        float _2567 = (_2562 * _2064) + _2054;
        float _2568 = (_2562 * _2067) + _2058;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2569;
        float _2573 = _2569 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 > _2573) || ((_2567 < _2571) || ((_2566 < _2571) || (_2566 > _2573))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2568, cbModelParam._m0[9u].z, fma(_2567, cbModelParam._m0[9u].y, _2566 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2568, cbModelParam._m0[10u].z, fma(_2567, cbModelParam._m0[10u].y, _2566 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2568, cbModelParam._m0[11u].z, fma(_2567, cbModelParam._m0[11u].y, _2566 * cbModelParam._m0[11u].x))), _2003);
            frontier_phi_16_38_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _2083 = frontier_phi_16_38_ladder_2;
        _2085 = frontier_phi_16_38_ladder_1;
        _2087 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1165, _1166, _1167), _2003);
        _2083 = _2071.x * cbModelParam._m0[1u].y;
        _2085 = _2071.y * cbModelParam._m0[1u].y;
        _2087 = _2071.z * cbModelParam._m0[1u].y;
    }
    float _2091 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _999);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2091 : min(cbModelParam._m0[25u].w, _2091));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2145 = fma(_1226, cbModelParam._m0[21u].z, fma(_1222, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218)) + cbModelParam._m0[21u].w;
        float _2149 = fma(_1226, cbModelParam._m0[22u].z, fma(_1222, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218)) + cbModelParam._m0[22u].w;
        float _2153 = fma(_1226, cbModelParam._m0[23u].z, fma(_1222, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218)) + cbModelParam._m0[23u].w;
        float _2156 = fma(_1167, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165));
        float _2159 = fma(_1167, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165));
        float _2162 = fma(_1167, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165));
        float _2269;
        if (_2156 > 0.0)
        {
            _2269 = abs((1.0 - _2145) / _2156);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2145 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2269 = frontier_phi_28_24_ladder;
        }
        float _2586;
        if (_2159 > 0.0)
        {
            _2586 = abs((1.0 - _2149) / _2159);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2149 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2586 = frontier_phi_40_35_ladder;
        }
        float _2913;
        if (_2162 > 0.0)
        {
            _2913 = abs((1.0 - _2153) / _2162);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2153 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2913 = frontier_phi_50_47_ladder;
        }
        float _2915 = isnan(_2586) ? _2269 : (isnan(_2269) ? _2586 : min(_2269, _2586));
        float _2916 = isnan(_2913) ? _2915 : (isnan(_2915) ? _2913 : min(_2915, _2913));
        float _2920 = (_2916 * _2156) + _2145;
        float _2921 = (_2916 * _2159) + _2149;
        float _2922 = (_2916 * _2162) + _2153;
        float _2923 = _2916 * 9.9999997473787516355514526367188e-05;
        float _2924 = (-1.0) - _2923;
        float _2926 = _2923 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2922 > _2926) || ((_2922 < _2924) || ((_2921 > _2926) || ((_2921 < _2924) || ((_2920 < _2924) || (_2920 > _2926))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2922, cbModelParam._m0[17u].z, fma(_2921, cbModelParam._m0[17u].y, _2920 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2922, cbModelParam._m0[18u].z, fma(_2921, cbModelParam._m0[18u].y, _2920 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2922, cbModelParam._m0[19u].z, fma(_2921, cbModelParam._m0[19u].y, _2920 * cbModelParam._m0[19u].x))), _2092);
            frontier_phi_25_50_ladder = _3040.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3040.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3040.x * cbModelParam._m0[1u].z;
        }
        _2181 = frontier_phi_25_50_ladder_2;
        _2183 = frontier_phi_25_50_ladder_1;
        _2185 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1165, _1166, _1167), _2092);
        _2181 = _2165.x * cbModelParam._m0[1u].z;
        _2183 = _2165.y * cbModelParam._m0[1u].z;
        _2185 = _2165.z * cbModelParam._m0[1u].z;
    }
    float _2197 = ((((1.0 - _1186) * ((_1173 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1186 * _1173)) * _1157;
    float _2198 = _2197 * ((cbModelParam._m0[1u].w * (_2181 - _2083)) + _2083);
    float _2199 = _2197 * ((cbModelParam._m0[1u].w * (_2183 - _2085)) + _2085);
    float _2200 = _2197 * ((cbModelParam._m0[1u].w * (_2185 - _2087)) + _2087);
    float _2203 = fma(_2200, cbSceneParam._m0[89u].z, fma(_2199, cbSceneParam._m0[89u].y, _2198 * cbSceneParam._m0[89u].x));
    float _2206 = fma(_2200, cbSceneParam._m0[90u].z, fma(_2199, cbSceneParam._m0[90u].y, _2198 * cbSceneParam._m0[90u].x));
    float _2209 = fma(_2200, cbSceneParam._m0[91u].z, fma(_2199, cbSceneParam._m0[91u].y, _2198 * cbSceneParam._m0[91u].x));
    float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2247 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2255 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2256 = _2243 / _2255;
    float _2257 = _2247 / _2255;
    float _2258 = _2251 / _2255;
    float _2405;
    float _2406;
    float _2407;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2285 = ((uint(_2258 > cbSceneParam._m0[59u].y) + uint(_2258 > cbSceneParam._m0[59u].x)) + uint(_2258 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2286 = _2285 + 43u;
        uint _2294 = _2285 + 44u;
        uint _2302 = _2285 + 45u;
        uint _2310 = _2285 + 46u;
        float _2321 = fma(_2255, cbSceneParam._m0[_2286].w, fma(_2251, cbSceneParam._m0[_2286].z, fma(_2247, cbSceneParam._m0[_2286].y, _2243 * cbSceneParam._m0[_2286].x)));
        float _2325 = fma(_2255, cbSceneParam._m0[_2294].w, fma(_2251, cbSceneParam._m0[_2294].z, fma(_2247, cbSceneParam._m0[_2294].y, _2243 * cbSceneParam._m0[_2294].x)));
        float _2333 = fma(_2255, cbSceneParam._m0[_2310].w, fma(_2251, cbSceneParam._m0[_2310].z, fma(_2247, cbSceneParam._m0[_2310].y, _2243 * cbSceneParam._m0[_2310].x)));
        float _2338 = cbSceneParam._m0[33u].z * _2333;
        float _2340 = cbSceneParam._m0[33u].w * _2333;
        float _2343 = fma(_2255, cbSceneParam._m0[_2302].w, fma(_2251, cbSceneParam._m0[_2302].z, fma(_2247, cbSceneParam._m0[_2302].y, _2243 * cbSceneParam._m0[_2302].x))) / _2333;
        float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2257 * _2257) + (_2256 * _2256)) + (_2258 * _2258))) * cbSceneParam._m0[33u].y;
        float _4806 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2398 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2338 + _2321) / _2333, (_2340 + _2325) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2340 + _2321) / _2333, (_2325 - _2338) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2321 - _2338) / _2333, (_2325 - _2340) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2321 - _2340) / _2333, (_2338 + _2325) / _2333), _2343), 0.0)).x), vec4(0.25)));
        _2405 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
        _2406 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
        _2407 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2405 = 1.0;
        _2406 = 1.0;
        _2407 = 1.0;
    }
    float _2471;
    float _2473;
    float _2475;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2459 = fma(_2255, cbSceneParam._m0[63u].w, fma(_2251, cbSceneParam._m0[63u].z, fma(_2247, cbSceneParam._m0[63u].y, _2243 * cbSceneParam._m0[63u].x)));
        float _2460 = fma(_2255, cbSceneParam._m0[60u].w, fma(_2251, cbSceneParam._m0[60u].z, fma(_2247, cbSceneParam._m0[60u].y, _2243 * cbSceneParam._m0[60u].x))) / _2459;
        float _2461 = fma(_2255, cbSceneParam._m0[61u].w, fma(_2251, cbSceneParam._m0[61u].z, fma(_2247, cbSceneParam._m0[61u].y, _2243 * cbSceneParam._m0[61u].x))) / _2459;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2460 >= cbSceneParam._m0[64u].x) && (_2461 >= cbSceneParam._m0[64u].y)) && (_2460 <= cbSceneParam._m0[64u].z)) && (_2461 <= cbSceneParam._m0[64u].w))
        {
            float _2599 = fma(_2255, cbSceneParam._m0[62u].w, fma(_2251, cbSceneParam._m0[62u].z, fma(_2247, cbSceneParam._m0[62u].y, _2243 * cbSceneParam._m0[62u].x))) / _2459;
            float _2603 = isnan(cbSceneParam._m0[41u].w) ? _2599 : (isnan(_2599) ? cbSceneParam._m0[41u].w : max(_2599, cbSceneParam._m0[41u].w));
            float _2646 = (cbSceneParam._m0[33u].x - sqrt(((_2257 * _2257) + (_2256 * _2256)) + (_2258 * _2258))) * cbSceneParam._m0[33u].y;
            float _4822 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
            float _2653 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2460, cbSceneParam._m0[33u].w + _2461), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2460, _2461 - cbSceneParam._m0[33u].z), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2460 - cbSceneParam._m0[33u].z, _2461 - cbSceneParam._m0[33u].w), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2460 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2461), _2603), 0.0)).x), vec4(0.25)));
            float _2657 = 1.0 - (_2653 * cbSceneParam._m0[34u].x);
            float _2658 = 1.0 - (_2653 * cbSceneParam._m0[34u].y);
            float _2659 = 1.0 - (_2653 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2659) ? _2407 : (isnan(_2407) ? _2659 : min(_2407, _2659));
            frontier_phi_37_36_ladder_1 = isnan(_2658) ? _2406 : (isnan(_2406) ? _2658 : min(_2406, _2658));
            frontier_phi_37_36_ladder_2 = isnan(_2657) ? _2405 : (isnan(_2405) ? _2657 : min(_2405, _2657));
        }
        else
        {
            frontier_phi_37_36_ladder = _2407;
            frontier_phi_37_36_ladder_1 = _2406;
            frontier_phi_37_36_ladder_2 = _2405;
        }
        _2471 = frontier_phi_37_36_ladder_2;
        _2473 = frontier_phi_37_36_ladder_1;
        _2475 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2471 = _2405;
        _2473 = _2406;
        _2475 = _2407;
    }
    uvec4 _2480 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2482 = _2480.x * 14u;
    uint _2483 = _2482 + 13u;
    float _2490 = _1157 + (-1.0);
    float _2495 = (cbLight._m0[_2483].x * _2490) + 1.0;
    float _2496 = (cbLight._m0[_2483].y * _2490) + 1.0;
    float _2497 = (cbLight._m0[_2483].z * _2490) + 1.0;
    float _2498 = (cbLight._m0[_2483].w * _2490) + 1.0;
    uint _2499 = _2482 + 5u;
    float _2505 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
    uint _2509 = _2482 + 4u;
    float _2518 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2522 = _2482 | 1u;
    float _2533 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_996, _997, _998));
    float _2536 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_996, _997, _998));
    float _4858 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _4869 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2541 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * 0.3183098733425140380859375;
    float _2543 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * 0.3183098733425140380859375;
    float _2550 = ((cbLight._m0[_2499].x * _2505) * _2543) + (((cbLight._m0[_2509].x * _2471) * _2518) * _2541);
    float _2551 = ((_2505 * cbLight._m0[_2499].y) * _2543) + (((cbLight._m0[_2509].y * _2473) * _2518) * _2541);
    float _2552 = ((_2505 * cbLight._m0[_2499].z) * _2543) + (((cbLight._m0[_2509].z * _2475) * _2518) * _2541);
    uvec4 _2556 = floatBitsToUint(cbLight._m0[_2482 + 12u]);
    bool _2558 = _2556.x == 0u;
    float _2660;
    float _2662;
    float _2664;
    if (_2558)
    {
        _2660 = _2550;
        _2662 = _2551;
        _2664 = _2552;
    }
    else
    {
        uint _2668 = _2482 + 6u;
        float _2684 = (dot(vec3(cbLight._m0[_2482 + 2u].xyz), vec3(_996, _997, _998)) * 0.5) + 0.5;
        float _2685 = _2684 * _2684;
        float _4880 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2686 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2687 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2660 = (((cbLight._m0[_2668].x * 0.3183098733425140380859375) * _2686) * _2687) + _2550;
        _2662 = (((cbLight._m0[_2668].y * 0.3183098733425140380859375) * _2686) * _2687) + _2551;
        _2664 = (((cbLight._m0[_2668].z * 0.3183098733425140380859375) * _2686) * _2687) + _2552;
    }
    bool _2667 = _2556.y == 0u;
    float _2722;
    float _2724;
    float _2726;
    if (_2667)
    {
        _2722 = _2660;
        _2724 = _2662;
        _2726 = _2664;
    }
    else
    {
        uint _2884 = _2482 + 7u;
        float _2900 = (dot(vec3(cbLight._m0[_2482 + 3u].xyz), vec3(_996, _997, _998)) * 0.5) + 0.5;
        float _2901 = _2900 * _2900;
        float _4896 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2902 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2903 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2722 = (((cbLight._m0[_2884].x * 0.3183098733425140380859375) * _2902) * _2903) + _2660;
        _2724 = (((cbLight._m0[_2884].y * 0.3183098733425140380859375) * _2902) * _2903) + _2662;
        _2726 = (((cbLight._m0[_2884].z * 0.3183098733425140380859375) * _2902) * _2903) + _2664;
    }
    uint _2729 = _2482 + 8u;
    float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _999) * 0.949999988079071044921875);
    float _2743 = _2742 * _2742;
    float _2744 = cbLight._m0[_2482].x + _1074;
    float _2745 = cbLight._m0[_2482].y + _1075;
    float _2746 = cbLight._m0[_2482].z + _1076;
    float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
    float _2751 = _2750 * _2744;
    float _2752 = _2750 * _2745;
    float _2753 = _2750 * _2746;
    float _2754 = dot(vec3(_996, _997, _998), vec3(cbLight._m0[_2482].xyz));
    float _4912 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    float _4923 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _2758 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
    float _2759 = dot(vec3(_996, _997, _998), vec3(_2751, _2752, _2753));
    float _4934 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2762 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
    float _2763 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2751, _2752, _2753));
    float _4945 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2767 = _2743 * _2743;
    float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
    float _2782 = (exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2783 = 1.0 - _2743;
    float _2794 = (0.5 / (((_2758 * ((_2757 * _2783) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2783) + _2743) * _2757))) * _2757;
    float _4956 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2796 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
    uint _2810 = _2482 + 9u;
    float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _999) * 0.949999988079071044921875);
    float _2822 = _2821 * _2821;
    float _2823 = cbLight._m0[_2522].x + _1074;
    float _2824 = cbLight._m0[_2522].y + _1075;
    float _2825 = cbLight._m0[_2522].z + _1076;
    float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
    float _2830 = _2829 * _2823;
    float _2831 = _2829 * _2824;
    float _2832 = _2829 * _2825;
    float _2833 = dot(vec3(_996, _997, _998), vec3(cbLight._m0[_2522].xyz));
    float _4967 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2836 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
    float _2837 = dot(vec3(_996, _997, _998), vec3(_2830, _2831, _2832));
    float _4978 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2840 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
    float _2841 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2830, _2831, _2832));
    float _4989 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
    float _2845 = _2822 * _2822;
    float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
    float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2859 = 1.0 - _2822;
    float _2869 = (0.5 / (((_2758 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2859) + _2822) * _2836))) * _2836;
    float _5000 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2871 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
    float _2881 = (((_2858 * cbLight._m0[_2810].x) * _2871) * _2505) + ((((cbLight._m0[_2729].x * _2471) * _2782) * _2796) * _2518);
    float _2882 = (((_2858 * cbLight._m0[_2810].y) * _2871) * _2505) + ((((cbLight._m0[_2729].y * _2473) * _2782) * _2796) * _2518);
    float _2883 = (((_2858 * cbLight._m0[_2810].z) * _2871) * _2505) + ((((cbLight._m0[_2729].z * _2475) * _2782) * _2796) * _2518);
    float _2939;
    float _2941;
    float _2943;
    if (_2558)
    {
        _2939 = _2881;
        _2941 = _2882;
        _2943 = _2883;
    }
    else
    {
        uint _2945 = _2482 + 2u;
        uint _2949 = _2482 + 10u;
        float _2963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2945].w)) * _999) * 0.949999988079071044921875);
        float _2964 = _2963 * _2963;
        float _2965 = cbLight._m0[_2945].x + _1074;
        float _2966 = cbLight._m0[_2945].y + _1075;
        float _2967 = cbLight._m0[_2945].z + _1076;
        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
        float _2972 = _2971 * _2965;
        float _2973 = _2971 * _2966;
        float _2974 = _2971 * _2967;
        float _2975 = dot(vec3(_996, _997, _998), vec3(cbLight._m0[_2945].xyz));
        float _5011 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _2979 = dot(vec3(_996, _997, _998), vec3(_2972, _2973, _2974));
        float _5022 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
        float _2983 = dot(vec3(cbLight._m0[_2945].xyz), vec3(_2972, _2973, _2974));
        float _5033 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2987 = _2964 * _2964;
        float _2991 = ((_2982 * _2982) * (_2987 + (-1.0))) + 1.0;
        float _3000 = (exp2(log2(1.0 - (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3001 = 1.0 - _2964;
        float _3011 = (0.5 / (((_2758 * ((_2978 * _3001) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _3001) + _2964) * _2978))) * _2978;
        float _5044 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3013 = (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_2987 / ((_2991 * _2991) * 3.141590118408203125));
        float _3014 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2939 = (((_3000 * cbLight._m0[_2949].x) * _3013) * _3014) + _2881;
        _2941 = (((_3000 * cbLight._m0[_2949].y) * _3013) * _3014) + _2882;
        _2943 = (((_3000 * cbLight._m0[_2949].z) * _3013) * _3014) + _2883;
    }
    float _3045;
    float _3047;
    float _3049;
    if (_2667)
    {
        _3045 = _2939;
        _3047 = _2941;
        _3049 = _2943;
    }
    else
    {
        uint _3056 = _2482 + 3u;
        uint _3060 = _2482 + 11u;
        float _3074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3056].w)) * _999) * 0.949999988079071044921875);
        float _3075 = _3074 * _3074;
        float _3076 = cbLight._m0[_3056].x + _1074;
        float _3077 = cbLight._m0[_3056].y + _1075;
        float _3078 = cbLight._m0[_3056].z + _1076;
        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
        float _3083 = _3082 * _3076;
        float _3084 = _3082 * _3077;
        float _3085 = _3082 * _3078;
        float _3086 = dot(vec3(_996, _997, _998), vec3(cbLight._m0[_3056].xyz));
        float _5060 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3089 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
        float _3090 = dot(vec3(_996, _997, _998), vec3(_3083, _3084, _3085));
        float _5071 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
        float _3093 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
        float _3094 = dot(vec3(cbLight._m0[_3056].xyz), vec3(_3083, _3084, _3085));
        float _5082 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        float _3098 = _3075 * _3075;
        float _3102 = ((_3093 * _3093) * (_3098 + (-1.0))) + 1.0;
        float _3111 = (exp2(log2(1.0 - (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3112 = 1.0 - _3075;
        float _3122 = (0.5 / (((_2758 * ((_3089 * _3112) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _3112) + _3075) * _3089))) * _3089;
        float _5093 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        float _3124 = (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3098 / ((_3102 * _3102) * 3.141590118408203125));
        float _3125 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _3045 = (((_3111 * cbLight._m0[_3060].x) * _3124) * _3125) + _2939;
        _3047 = (((_3111 * cbLight._m0[_3060].y) * _3124) * _3125) + _2941;
        _3049 = (((_3111 * cbLight._m0[_3060].z) * _3124) * _3125) + _2943;
    }
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_2480.y == 0u)
    {
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.x;
        uint _3158 = uint((float(_3146.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1095) / _3147))) + floor(float(uint(cbSceneParam._m0[85u].x * _1094) / _3147)));
        float _3168 = (log2(_2258 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3169 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        uint _3172 = uint(isnan(14.0) ? _3169 : (isnan(_3169) ? 14.0 : min(_3169, 14.0)));
        uvec4 _3177 = texelFetch(g_lightClusterGridBuffer, int(((_3172 << 2u) + (_3158 << 6u)) >> 2u));
        uint _3178 = _3177.x;
        uint _3179 = _3146.z;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        if (((((1u << ((_3179 >> 4u) & 15u)) + 4294967295u) & _3178) == 0u) || ((_3179 & 240u) == 0u))
        {
            _3258 = 0.0;
            _3260 = 0.0;
            _3262 = 0.0;
            _3264 = 0.0;
            _3266 = 0.0;
            _3268 = 0.0;
        }
        else
        {
            float _3259;
            float _3261;
            float _3263;
            float _3265;
            float _3267;
            float _3269;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            uint _3416 = 0u;
            uint _3425;
            bool _3426;
            for (;;)
            {
                _3425 = texelFetch(g_lightClassification, int((((_3172 << 5u) + (_3158 << 9u)) + (_3416 << 2u)) >> 2u)).x;
                _3426 = _3425 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3426)
                {
                    frontier_phi_71_pred = _3415;
                    frontier_phi_71_pred_1 = _3414;
                    frontier_phi_71_pred_2 = _3413;
                    frontier_phi_71_pred_3 = _3412;
                    frontier_phi_71_pred_4 = _3411;
                    frontier_phi_71_pred_5 = _3410;
                }
                else
                {
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    uint _3561;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3425;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    for (;;)
                    {
                        uint _3565 = uint(findLSB(_3561)) + (_3416 << 5u);
                        uint _3562 = (_3561 + 4294967295u) & _3561;
                        uint _3567 = _3565 * 48u;
                        vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 3u)).x));
                        uint _3587 = (_3565 * 48u) + 4u;
                        vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 3u)).x));
                        uint _3606 = (_3565 * 48u) + 8u;
                        vec3 _3617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x));
                        float _3621 = _3581.x - _2256;
                        float _3622 = _3581.y - _2257;
                        float _3623 = _3581.z - _2258;
                        float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                        float _3627 = inversesqrt(_3624);
                        float _3628 = _3627 * _3621;
                        float _3629 = _3627 * _3622;
                        float _3630 = _3627 * _3623;
                        float _3631 = dot(vec3(_1113, _1116, _1119), vec3(_3628, _3629, _3630));
                        float _3636 = 1.0 - (_3624 * _3581.w);
                        float _5119 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                        float _3638 = sqrt(_3624) * _3600.w;
                        float _3641 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                        float _3642 = _3641 * _3641;
                        float _3645 = ((1.0 - _3642) * _3631) + _3642;
                        float _3648 = _3638 * _3638;
                        float _3652 = ((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3637) / ((_3648 * 0.699999988079071044921875) + 1.0);
                        float _3656 = (-0.0) - _2256;
                        float _3657 = (-0.0) - _2257;
                        float _3658 = (-0.0) - _2258;
                        float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                        float _3663 = _3662 * _3656;
                        float _3664 = _3662 * _3657;
                        float _3665 = _3662 * _3658;
                        float _3672 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                        float _3673 = 1.0 - _1173;
                        float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                        float _3681 = _3680 * _3680;
                        float _3682 = _3681 * _3681;
                        float _3683 = _3663 + _3628;
                        float _3684 = _3664 + _3629;
                        float _3685 = _3665 + _3630;
                        float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                        float _3693 = dot(vec3(_1113, _1116, _1119), vec3(_3663, _3664, _3665));
                        float _5135 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3696 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                        float _3697 = dot(vec3(_1113, _1116, _1119), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                        float _5146 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3700 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                        float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                        float _3705 = _3641 * _3681;
                        float _3706 = _3705 * _3705;
                        float _3709 = ((1.0 - _3706) * _3631) + _3706;
                        float _5157 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3710 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                        float _3711 = 1.0 - _3681;
                        float _3721 = (0.5 / (((_3710 * ((_3696 * _3711) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3681) * _3696))) * _3710;
                        float _5168 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                        float _3732 = (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0)))) / ((_3704 * _3704) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125))) * _3637;
                        _3485 = (_3652 * _3600.x) + _3558;
                        _3486 = (_3652 * _3600.y) + _3559;
                        _3487 = (_3652 * _3600.z) + _3560;
                        _3482 = (_3732 * _3617.x) + _3555;
                        _3483 = (_3732 * _3617.y) + _3556;
                        _3484 = (_3732 * _3617.z) + _3557;
                        if (_3562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3562;
                        }
                    }
                    frontier_phi_71_pred = _3487;
                    frontier_phi_71_pred_1 = _3486;
                    frontier_phi_71_pred_2 = _3485;
                    frontier_phi_71_pred_3 = _3484;
                    frontier_phi_71_pred_4 = _3483;
                    frontier_phi_71_pred_5 = _3482;
                }
                _3269 = frontier_phi_71_pred;
                _3267 = frontier_phi_71_pred_1;
                _3265 = frontier_phi_71_pred_2;
                _3263 = frontier_phi_71_pred_3;
                _3261 = frontier_phi_71_pred_4;
                _3259 = frontier_phi_71_pred_5;
                uint _3417 = _3416 + 1u;
                if (_3417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3410 = _3259;
                    _3411 = _3261;
                    _3412 = _3263;
                    _3413 = _3265;
                    _3414 = _3267;
                    _3415 = _3269;
                    _3416 = _3417;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3258 = _3259;
            _3260 = _3261;
            _3262 = _3263;
            _3264 = _3265;
            _3266 = _3267;
            _3268 = _3269;
        }
        uvec4 _3272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3273 = _3272.z;
        uint _3275 = (_3273 >> 8u) & 15u;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        if (((4294967295u << _3275) & _3178) == 0u)
        {
            _3378 = _3258;
            _3380 = _3260;
            _3382 = _3262;
            _3384 = _3264;
            _3386 = _3266;
            _3388 = _3268;
        }
        else
        {
            float _3403 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
            float _3404 = _3403 * _2256;
            float _3405 = _3403 * _2257;
            float _3406 = _3403 * _2258;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3275 < ((_3273 >> 12u) & 15u))
            {
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3538 = _3258;
                float _3539 = _3260;
                float _3540 = _3262;
                float _3541 = _3264;
                float _3542 = _3266;
                float _3543 = _3268;
                uint _3544 = _3275;
                uint _3553;
                bool _3554;
                for (;;)
                {
                    _3553 = texelFetch(g_lightClassification, int((((_3172 << 5u) + (_3158 << 9u)) + (_3544 << 2u)) >> 2u)).x;
                    _3554 = _3553 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3554)
                    {
                        frontier_phi_82_pred = _3543;
                        frontier_phi_82_pred_1 = _3542;
                        frontier_phi_82_pred_2 = _3541;
                        frontier_phi_82_pred_3 = _3540;
                        frontier_phi_82_pred_4 = _3539;
                        frontier_phi_82_pred_5 = _3538;
                    }
                    else
                    {
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        float _3763 = _3542;
                        float _3764 = _3543;
                        uint _3765 = _3553;
                        uint _3766;
                        vec4 _3791;
                        float _3792;
                        vec4 _3807;
                        vec3 _3819;
                        vec4 _3834;
                        vec4 _3849;
                        float _3895;
                        bool _3896;
                        for (;;)
                        {
                            uint _3776 = ((_3544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3765));
                            _3766 = (_3765 + 4294967295u) & _3765;
                            uint _3778 = _3776 * 40u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3792 = _3791.w;
                            uint _3794 = (_3776 * 40u) + 4u;
                            _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3809 = (_3776 * 40u) + 8u;
                            _3819 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x));
                            uint _3821 = (_3776 * 40u) + 16u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3776 * 40u) + 20u;
                            _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3851 = (_3776 * 40u) + 24u;
                            vec4 _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            uint _3870 = (_3776 * 40u) + 28u;
                            vec4 _3883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 3u)).x));
                            _3895 = fma(_2258, _3883.z, fma(_2257, _3883.y, _3883.x * _2256)) + _3883.w;
                            _3896 = !((fma(_2258, _3864.z, fma(_2257, _3864.y, _3864.x * _2256)) + _3864.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3896)
                            {
                                float _3923 = _3791.x - _2256;
                                float _3924 = _3791.y - _2257;
                                float _3925 = _3791.z - _2258;
                                float _3926 = dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925));
                                float _3929 = inversesqrt(_3926);
                                float _3930 = _3929 * _3923;
                                float _3931 = _3929 * _3924;
                                float _3932 = _3929 * _3925;
                                float _3936 = 1.0 - (_3926 / (_3792 * _3792));
                                float _5179 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3937 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
                                float _3941 = sqrt(_3926) * _3807.w;
                                float _3943 = 1.39999997615814208984375 / (_3941 + 1.39999997615814208984375);
                                float _3944 = _3943 * _3943;
                                float _3947 = ((1.0 - _3944) * dot(vec3(_3930, _3931, _3932), vec3(_1113, _1116, _1119))) + _3944;
                                float _3950 = _3941 * _3941;
                                float _3954 = (fma(_2258, _3834.z, fma(_2257, _3834.y, _3834.x * _2256)) + _3834.w) / _3895;
                                float _3955 = (fma(_2258, _3849.z, fma(_2257, _3849.y, _3849.x * _2256)) + _3849.w) / _3895;
                                float _3959 = 1.0 - dot(vec2(_3954, _3955), vec2(_3954, _3955));
                                float _5195 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3960 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                                float _3961 = _3960 * (((isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0))) * _3937) / ((_3950 * 0.699999988079071044921875) + 1.0));
                                float _3973 = exp2(log2(1.0 / ((_3950 * 3.5) + 5.0)) * 0.25);
                                float _3974 = 1.0 - _1173;
                                float _3981 = sqrt(1.0 - ((1.0 - (_3974 * _3974)) * (1.0 - (_3973 * _3973))));
                                float _3982 = _3981 * _3981;
                                float _3983 = _3982 * _3982;
                                float _3984 = _3930 - _3404;
                                float _3985 = _3931 - _3405;
                                float _3986 = _3932 - _3406;
                                float _3990 = inversesqrt(dot(vec3(_3984, _3985, _3986), vec3(_3984, _3985, _3986)));
                                float _3994 = dot(vec3(_1113, _1116, _1119), vec3((-0.0) - _3404, (-0.0) - _3405, (-0.0) - _3406));
                                float _5206 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3997 = isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0));
                                float _3998 = dot(vec3(_1113, _1116, _1119), vec3(_3990 * _3984, _3990 * _3985, _3990 * _3986));
                                float _5217 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4001 = isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0));
                                float _4005 = ((_4001 * _4001) * (_3983 + (-1.0))) + 1.0;
                                float _4006 = _3943 * _3982;
                                float _4007 = _4006 * _4006;
                                float _4013 = ((1.0 - _4007) * dot(vec3(_1113, _1116, _1119), vec3(_3930, _3931, _3932))) + _4007;
                                float _5228 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4014 = isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0));
                                float _4015 = 1.0 - _3982;
                                float _4025 = (0.5 / (((_4014 * ((_3997 * _4015) + _3982)) + 9.9999999392252902907785028219223e-09) + (((_4014 * _4015) + _3982) * _3997))) * _4014;
                                float _5239 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4035 = (_3960 * _3937) * (((_3983 * 3.1415927410125732421875) * (isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0)))) / ((_4005 * _4005) * ((_3950 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3961 * _3807.z;
                                frontier_phi_88_pred_1 = _3961 * _3807.y;
                                frontier_phi_88_pred_2 = _3961 * _3807.x;
                                frontier_phi_88_pred_3 = _4035 * _3819.z;
                                frontier_phi_88_pred_4 = _4035 * _3819.y;
                                frontier_phi_88_pred_5 = _4035 * _3819.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4044 = frontier_phi_88_pred;
                            _4043 = frontier_phi_88_pred_1;
                            _4042 = frontier_phi_88_pred_2;
                            _4041 = frontier_phi_88_pred_3;
                            _4040 = frontier_phi_88_pred_4;
                            _4039 = frontier_phi_88_pred_5;
                            _3749 = _4042 + _3762;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3746 = _4039 + _3759;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            if (_3766 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3766;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3751;
                        frontier_phi_82_pred_1 = _3750;
                        frontier_phi_82_pred_2 = _3749;
                        frontier_phi_82_pred_3 = _3748;
                        frontier_phi_82_pred_4 = _3747;
                        frontier_phi_82_pred_5 = _3746;
                    }
                    _3389 = frontier_phi_82_pred;
                    _3387 = frontier_phi_82_pred_1;
                    _3385 = frontier_phi_82_pred_2;
                    _3383 = frontier_phi_82_pred_3;
                    _3381 = frontier_phi_82_pred_4;
                    _3379 = frontier_phi_82_pred_5;
                    uint _3545 = _3544 + 1u;
                    if (_3545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3538 = _3379;
                        _3539 = _3381;
                        _3540 = _3383;
                        _3541 = _3385;
                        _3542 = _3387;
                        _3543 = _3389;
                        _3544 = _3545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3385;
                frontier_phi_63_64_ladder_1 = _3389;
                frontier_phi_63_64_ladder_2 = _3387;
                frontier_phi_63_64_ladder_3 = _3383;
                frontier_phi_63_64_ladder_4 = _3381;
                frontier_phi_63_64_ladder_5 = _3379;
            }
            else
            {
                frontier_phi_63_64_ladder = _3264;
                frontier_phi_63_64_ladder_1 = _3268;
                frontier_phi_63_64_ladder_2 = _3266;
                frontier_phi_63_64_ladder_3 = _3262;
                frontier_phi_63_64_ladder_4 = _3260;
                frontier_phi_63_64_ladder_5 = _3258;
            }
            _3378 = frontier_phi_63_64_ladder_5;
            _3380 = frontier_phi_63_64_ladder_4;
            _3382 = frontier_phi_63_64_ladder_3;
            _3384 = frontier_phi_63_64_ladder;
            _3386 = frontier_phi_63_64_ladder_2;
            _3388 = frontier_phi_63_64_ladder_1;
        }
        float _3393 = isnan(1.0) ? _1157 : (isnan(_1157) ? 1.0 : min(_1157, 1.0));
        _3191 = (_3393 * _3384) + _2722;
        _3193 = (_3393 * _3386) + _2724;
        _3195 = (_3393 * _3388) + _2726;
        _3197 = ((_3378 * 0.039999999105930328369140625) * _3393) + _3045;
        _3199 = ((_3380 * 0.039999999105930328369140625) * _3393) + _3047;
        _3201 = ((_3382 * 0.039999999105930328369140625) * _3393) + _3049;
    }
    else
    {
        _3191 = _2722;
        _3193 = _2724;
        _3195 = _2726;
        _3197 = _3045;
        _3199 = _3047;
        _3201 = _3049;
    }
    float _5255 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _5266 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _5277 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _3218 = ((isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0))) * (_3191 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1157))) + ((_3197 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1992)) * cbPerFrame._m0[3u].x);
    float _3219 = ((isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0))) * (_3193 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1157))) + ((_3199 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1992)) * cbPerFrame._m0[3u].x);
    float _3220 = ((isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0))) * (_3195 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1157))) + ((_3201 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1992)) * cbPerFrame._m0[3u].x);
    uint _3221 = _291 + 6u;
    float _3229 = _1094 / cbSceneParam._m0[86u].x;
    float _3230 = _1095 / cbSceneParam._m0[86u].y;
    vec4 _3244 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3229, _3230, (log2((isnan(cbSceneParam._m0[77u].w) ? _1017 : (isnan(_1017) ? cbSceneParam._m0[77u].w : min(_1017, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3246 = _3244.x;
    float _3247 = _3244.y;
    float _3248 = _3244.z;
    float _3249 = _3244.w;
    float _3320;
    float _3322;
    float _3324;
    float _3326;
    if (_1017 > cbSceneParam._m0[78u].w)
    {
        float _3283 = isnan(_1017) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1017 : min(cbSceneParam._m0[80u].w, _1017));
        float _3284 = _3283 / _1017;
        float _3295 = _3284 * _1067;
        float _3296 = _1068 * _3284;
        float _3297 = (-0.0) - _3296;
        float _3298 = _3284 * _1069;
        float _3300 = (cbSceneParam._m0[77u].w * _3297) / _3283;
        float _3301 = _3300 + cbSceneParam._m0[79u].w;
        float _3302 = cbSceneParam._m0[79u].w - _3296;
        float _3308 = sqrt(((_3295 * _3295) + (_3296 * _3296)) + (_3298 * _3298));
        float _3311 = (1.0 - (cbSceneParam._m0[77u].w / _3283)) * _3308;
        float _3316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3495;
        if (abs((_3297 - _3300) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3495 = ((((_3301 > 0.0) ? exp2(_3316 * _3301) : (2.0 - exp2(_3318 * _3301))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3311;
        }
        else
        {
            float _3439 = 1.0 / cbSceneParam._m0[80u].x;
            float _3440 = isnan(_3302) ? _3301 : (isnan(_3301) ? _3302 : max(_3301, _3302));
            float _3441 = isnan(_3302) ? _3301 : (isnan(_3301) ? _3302 : min(_3301, _3302));
            float _3450 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : min(_3440, 0.0));
            float _3451 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : min(_3441, 0.0));
            _3495 = ((abs(_3308 / _3297) * cbSceneParam._m0[80u].y) * ((((_3450 - _3451) * 2.0) - ((exp2(_3316 * (isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0)))) - exp2(_3316 * (isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))))) * _3439)) - ((exp2(_3318 * _3450) - exp2(_3318 * _3451)) * _3439))) + (_3311 * cbSceneParam._m0[80u].z);
        }
        vec4 _3497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3229, _3230, 1.0), 0.0);
        float _3506 = exp2((_3495 * (-1.44269502162933349609375)) * (1.0 - _3497.w));
        float _3507 = log2(_3506);
        float _3523 = log2(_3249);
        _3320 = (exp2(_3523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].x)) * _3497.x) / cbSceneParam._m0[78u].x)) + _3246;
        _3322 = (exp2(_3523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].y)) * _3497.y) / cbSceneParam._m0[78u].y)) + _3247;
        _3324 = (exp2(_3523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].z)) * _3497.z) / cbSceneParam._m0[78u].z)) + _3248;
        _3326 = _3506 * _3249;
    }
    else
    {
        _3320 = _3246;
        _3322 = _3247;
        _3324 = _3248;
        _3326 = _3249;
    }
    bool _3533;
    vec4 _3336;
    vec4 _3358;
    float _3360;
    float _3364;
    float _3365;
    float _3366;
    float _3367;
    bool _3377;
    for (;;)
    {
        _3336 = cbMatDynParam._m0[0u];
        float _3338 = roundEven(_3336.y);
        bool _3339 = _3338 == 3.0;
        float _3340 = log2(_3326);
        float _3347 = exp2(_3340 * cbSceneParam._m0[78u].x) * _3218;
        float _3348 = exp2(_3340 * cbSceneParam._m0[78u].y) * _3219;
        float _3349 = exp2(_3340 * cbSceneParam._m0[78u].z) * _3220;
        float _3356 = _1083 + (-0.5);
        _3358 = cbMtdParam._m0[1u];
        _3360 = _3358.y * _3356;
        float _3363 = (_3338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3364 = _3363 * (_3339 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3320)));
        _3365 = _3363 * (_3339 ? _3348 : (_3348 + (cbSceneParam._m0[72u].w * _3322)));
        _3366 = _3363 * (_3339 ? _3349 : (_3349 + (cbSceneParam._m0[72u].w * _3324)));
        _3367 = _3356 * 0.999000012874603271484375;
        _3377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3377)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3367) < 0.5)
            {
                _3533 = true;
                break;
            }
        }
        uint _3474 = _1132 + uint(_3336.w);
        if ((cbInstanceData._m0[_3474].w < 1.0) && ((cbInstanceData._m0[_3474].w + _3367) < 0.5))
        {
            _3533 = true;
            break;
        }
        if ((_3360 + 1.0) < _3358.x)
        {
            _3533 = true;
            break;
        }
        _3533 = false;
        break;
    }
    float _3737;
    if (_3533)
    {
        discard_state = true;
        _3737 = 0.0;
    }
    else
    {
        _3737 = cbInstanceData._m0[_3221].w;
    }
    SV_Target.x = _3364;
    SV_Target.y = _3365;
    SV_Target.z = _3366;
    SV_Target.w = _3737;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3221].w;
    discard_exit();
}


