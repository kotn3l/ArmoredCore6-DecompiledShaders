#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1291;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3877 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _428 = (_421 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _429 = (_421 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _430 = (_421 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3888 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _507 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428);
    float _510 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429);
    float _513 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430);
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _580 = ((_552.x - _571) * _421) + _571;
    float _581 = ((_552.y - _572) * _421) + _572;
    float _582 = ((_552.z - _573) * _421) + _573;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _607 = ((_594.z - _582) * _494) + _582;
    float _610 = ((((_594.x - _580) * _494) + _580) * 2.0) + (-1.0);
    float _612 = ((((_594.y - _581) * _494) + _581) * 2.0) + (-1.0);
    float _613 = dot(vec2(_610, _612), vec2(_610, _612));
    float _3899 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _618 = sqrt(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _644 = (((_632.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _610;
    float _645 = (((_632.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _648 = fma(_618, _230, fma(_645, _237, _644 * _223));
    float _651 = fma(_618, _231, fma(_645, _238, _644 * _224));
    float _654 = fma(_618, _232, fma(_645, _239, _644 * _225));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_658 * _648, _658 * _651, _658 * _654, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) * cbMtdParam._m0[21u].z);
    float _3910 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _702 = (_695 * ((_532.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _703 = (_695 * ((_532.y * cbMtdParam._m0[18u].y) - _510)) + _510;
    float _704 = (_695 * ((_532.z * cbMtdParam._m0[18u].z) - _513)) + _513;
    float _708 = (cbMtdParam._m0[19u].w * (_632.z - _607)) + _607;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _728 = (_721.x * 2.0) + (-1.0);
    float _729 = (_721.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3921 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _738 = ((_721.z - _708) * _695) + _708;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) - _618) * _695) + _618;
    float _751 = (((_728 - _644) * _695) + _644) + (cbMtdParam._m0[21u].x * _644);
    float _752 = (((_729 - _645) * _695) + _645) + (cbMtdParam._m0[21u].x * _645);
    float _756 = cbMtdParam._m0[22u].x + _632.w;
    float _759 = fma(_748, _230, fma(_752, _237, _751 * _223));
    float _762 = fma(_748, _231, fma(_752, _238, _751 * _224));
    float _765 = fma(_748, _232, fma(_752, _239, _751 * _225));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3932 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _773 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3954 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3965 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3976 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _879 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _882 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _896 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3987 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _920 = ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * TEXCOORD_5.w) * _916.x;
    float _921 = dot(vec3(_770, _771, _772), vec3(_849, _850, _851));
    float _924 = _921 * 2.0;
    float _928 = (_924 * _770) - _849;
    float _929 = (_924 * _771) - _850;
    float _930 = (_924 * _772) - _851;
    float _934 = abs(dot(vec3(_849, _850, _851), vec3(_770, _771, _772)));
    float _4020 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _936 = sqrt(_773);
    float _949 = exp2((_936 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_936 * 3.0));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1019 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1023 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1048 = _981 + _770;
        float _1049 = _985 + _771;
        float _1050 = _989 + _772;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_770, _771, _772), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4068 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_770, _771, _772), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4101 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_770, _771, _772), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4134 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1333 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1337 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1360 = _981 + _770;
        float _1361 = _985 + _771;
        float _1362 = _989 + _772;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_770, _771, _772), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4197 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_770, _771, _772), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4230 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_770, _771, _772), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4263 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1291;
        _1599 = _1291;
        _1600 = _1291;
        _1601 = _1291;
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1303)) + _1303;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1304)) + _1304;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1305)) + _1305;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _928 * 0.5;
    float _1667 = _929 * 0.5;
    float _1668 = _930 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_930, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928));
        float _1796 = fma(_930, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928));
        float _1799 = fma(_930, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1827 = frontier_phi_14_12_ladder;
        }
        float _1996;
        if (_1796 > 0.0)
        {
            _1996 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1996 = frontier_phi_23_19_ladder;
        }
        float _2291;
        if (_1799 > 0.0)
        {
            _2291 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2291 = frontier_phi_35_30_ladder;
        }
        float _2293 = isnan(_1996) ? _1827 : (isnan(_1827) ? _1996 : min(_1827, _1996));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1793) + _1782;
        float _2299 = (_2294 * _1796) + _1786;
        float _2300 = (_2294 * _1799) + _1790;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_13_35_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_13_35_ladder_2;
        _1817 = frontier_phi_13_35_ladder_1;
        _1819 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_928, _929, _930), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_930, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928));
        float _1891 = fma(_930, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928));
        float _1894 = fma(_930, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928));
        float _2001;
        if (_1888 > 0.0)
        {
            _2001 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2001 = frontier_phi_25_21_ladder;
        }
        float _2318;
        if (_1891 > 0.0)
        {
            _2318 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2318 = frontier_phi_37_32_ladder;
        }
        float _2645;
        if (_1894 > 0.0)
        {
            _2645 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2645 = frontier_phi_47_44_ladder;
        }
        float _2647 = isnan(_2318) ? _2001 : (isnan(_2001) ? _2318 : min(_2001, _2318));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _1888) + _1877;
        float _2653 = (_2648 * _1891) + _1881;
        float _2654 = (_2648 * _1894) + _1885;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_22_47_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_22_47_ladder_2;
        _1915 = frontier_phi_22_47_ladder_1;
        _1917 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_928, _929, _930), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _949) * ((_936 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_949 * _936)) * _920;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1988 = _1975 / _1987;
    float _1989 = _1979 / _1987;
    float _1990 = _1983 / _1987;
    float _2137;
    float _2138;
    float _2139;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2017 = ((uint(_1990 > cbSceneParam._m0[59u].y) + uint(_1990 > cbSceneParam._m0[59u].x)) + uint(_1990 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2018 = _2017 + 43u;
        uint _2026 = _2017 + 44u;
        uint _2034 = _2017 + 45u;
        uint _2042 = _2017 + 46u;
        float _2053 = fma(_1987, cbSceneParam._m0[_2018].w, fma(_1983, cbSceneParam._m0[_2018].z, fma(_1979, cbSceneParam._m0[_2018].y, _1975 * cbSceneParam._m0[_2018].x)));
        float _2057 = fma(_1987, cbSceneParam._m0[_2026].w, fma(_1983, cbSceneParam._m0[_2026].z, fma(_1979, cbSceneParam._m0[_2026].y, _1975 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1987, cbSceneParam._m0[_2042].w, fma(_1983, cbSceneParam._m0[_2042].z, fma(_1979, cbSceneParam._m0[_2042].y, _1975 * cbSceneParam._m0[_2042].x)));
        float _2070 = cbSceneParam._m0[33u].z * _2065;
        float _2072 = cbSceneParam._m0[33u].w * _2065;
        float _2075 = fma(_1987, cbSceneParam._m0[_2034].w, fma(_1983, cbSceneParam._m0[_2034].z, fma(_1979, cbSceneParam._m0[_2034].y, _1975 * cbSceneParam._m0[_2034].x))) / _2065;
        float _2123 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
        float _4389 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2130 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2053) / _2065, (_2072 + _2057) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2053) / _2065, (_2057 - _2070) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2070) / _2065, (_2057 - _2072) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2072) / _2065, (_2070 + _2057) / _2065), _2075), 0.0)).x), vec4(0.25)));
        _2137 = 1.0 - (_2130 * cbSceneParam._m0[34u].x);
        _2138 = 1.0 - (_2130 * cbSceneParam._m0[34u].y);
        _2139 = 1.0 - (_2130 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2137 = 1.0;
        _2138 = 1.0;
        _2139 = 1.0;
    }
    float _2203;
    float _2205;
    float _2207;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2191 = fma(_1987, cbSceneParam._m0[63u].w, fma(_1983, cbSceneParam._m0[63u].z, fma(_1979, cbSceneParam._m0[63u].y, _1975 * cbSceneParam._m0[63u].x)));
        float _2192 = fma(_1987, cbSceneParam._m0[60u].w, fma(_1983, cbSceneParam._m0[60u].z, fma(_1979, cbSceneParam._m0[60u].y, _1975 * cbSceneParam._m0[60u].x))) / _2191;
        float _2193 = fma(_1987, cbSceneParam._m0[61u].w, fma(_1983, cbSceneParam._m0[61u].z, fma(_1979, cbSceneParam._m0[61u].y, _1975 * cbSceneParam._m0[61u].x))) / _2191;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2192 >= cbSceneParam._m0[64u].x) && (_2193 >= cbSceneParam._m0[64u].y)) && (_2192 <= cbSceneParam._m0[64u].z)) && (_2193 <= cbSceneParam._m0[64u].w))
        {
            float _2331 = fma(_1987, cbSceneParam._m0[62u].w, fma(_1983, cbSceneParam._m0[62u].z, fma(_1979, cbSceneParam._m0[62u].y, _1975 * cbSceneParam._m0[62u].x))) / _2191;
            float _2335 = isnan(cbSceneParam._m0[41u].w) ? _2331 : (isnan(_2331) ? cbSceneParam._m0[41u].w : max(_2331, cbSceneParam._m0[41u].w));
            float _2378 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
            float _4405 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
            float _2385 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2192, cbSceneParam._m0[33u].w + _2193), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2192, _2193 - cbSceneParam._m0[33u].z), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].z, _2193 - cbSceneParam._m0[33u].w), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2193), _2335), 0.0)).x), vec4(0.25)));
            float _2389 = 1.0 - (_2385 * cbSceneParam._m0[34u].x);
            float _2390 = 1.0 - (_2385 * cbSceneParam._m0[34u].y);
            float _2391 = 1.0 - (_2385 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
            frontier_phi_34_33_ladder_1 = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_34_33_ladder_2 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
        }
        else
        {
            frontier_phi_34_33_ladder = _2139;
            frontier_phi_34_33_ladder_1 = _2138;
            frontier_phi_34_33_ladder_2 = _2137;
        }
        _2203 = frontier_phi_34_33_ladder_2;
        _2205 = frontier_phi_34_33_ladder_1;
        _2207 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2203 = _2137;
        _2205 = _2138;
        _2207 = _2139;
    }
    uvec4 _2212 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2214 = _2212.x * 14u;
    uint _2215 = _2214 + 13u;
    float _2222 = _920 + (-1.0);
    float _2227 = (cbLight._m0[_2215].x * _2222) + 1.0;
    float _2228 = (cbLight._m0[_2215].y * _2222) + 1.0;
    float _2229 = (cbLight._m0[_2215].z * _2222) + 1.0;
    float _2230 = (cbLight._m0[_2215].w * _2222) + 1.0;
    uint _2231 = _2214 + 5u;
    float _2237 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2241 = _2214 + 4u;
    float _2250 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2254 = _2214 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_770, _771, _772));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_770, _771, _772));
    float _4441 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4452 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2231].x * _2237) * _2275) + (((cbLight._m0[_2241].x * _2203) * _2250) * _2273);
    float _2283 = ((_2237 * cbLight._m0[_2231].y) * _2275) + (((cbLight._m0[_2241].y * _2205) * _2250) * _2273);
    float _2284 = ((_2237 * cbLight._m0[_2231].z) * _2275) + (((cbLight._m0[_2241].z * _2207) * _2250) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2214 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2290)
    {
        _2392 = _2282;
        _2394 = _2283;
        _2396 = _2284;
    }
    else
    {
        uint _2400 = _2214 + 6u;
        float _2416 = (dot(vec3(cbLight._m0[_2214 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4463 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2419 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2392 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2282;
        _2394 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2283;
        _2396 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2284;
    }
    bool _2399 = _2288.y == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2399)
    {
        _2454 = _2392;
        _2456 = _2394;
        _2458 = _2396;
    }
    else
    {
        uint _2616 = _2214 + 7u;
        float _2632 = (dot(vec3(cbLight._m0[_2214 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4479 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2635 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2454 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2392;
        _2456 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2394;
        _2458 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2396;
    }
    uint _2461 = _2214 + 8u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _773) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2214].x + _849;
    float _2477 = cbLight._m0[_2214].y + _850;
    float _2478 = cbLight._m0[_2214].z + _851;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2214].xyz));
    float _4495 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2490 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2491 = dot(vec3(_770, _771, _772), vec3(_2483, _2484, _2485));
    float _4517 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2495 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2483, _2484, _2485));
    float _4528 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2499 = _2475 * _2475;
    float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
    float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2515 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2490 * ((_2489 * _2515) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2515) + _2475) * _2489))) * _2489;
    float _4539 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
    uint _2542 = _2214 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _773) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2254].x + _849;
    float _2556 = cbLight._m0[_2254].y + _850;
    float _2557 = cbLight._m0[_2254].z + _851;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2254].xyz));
    float _4550 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2569 = dot(vec3(_770, _771, _772), vec3(_2562, _2563, _2564));
    float _4561 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2562, _2563, _2564));
    float _4572 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2590 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2591 = 1.0 - _2554;
    float _2601 = (0.5 / (((_2490 * ((_2568 * _2591) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2591) + _2554) * _2568))) * _2568;
    float _4583 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2613 = (((_2590 * cbLight._m0[_2542].x) * _2603) * _2237) + ((((cbLight._m0[_2461].x * _2203) * _2514) * _2528) * _2250);
    float _2614 = (((_2590 * cbLight._m0[_2542].y) * _2603) * _2237) + ((((cbLight._m0[_2461].y * _2205) * _2514) * _2528) * _2250);
    float _2615 = (((_2590 * cbLight._m0[_2542].z) * _2603) * _2237) + ((((cbLight._m0[_2461].z * _2207) * _2514) * _2528) * _2250);
    float _2671;
    float _2673;
    float _2675;
    if (_2290)
    {
        _2671 = _2613;
        _2673 = _2614;
        _2675 = _2615;
    }
    else
    {
        uint _2677 = _2214 + 2u;
        uint _2681 = _2214 + 10u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _773) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _849;
        float _2698 = cbLight._m0[_2677].y + _850;
        float _2699 = cbLight._m0[_2677].z + _851;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2677].xyz));
        float _4594 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2711 = dot(vec3(_770, _771, _772), vec3(_2704, _2705, _2706));
        float _4605 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4616 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2733 = 1.0 - _2696;
        float _2743 = (0.5 / (((_2490 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2733) + _2696) * _2710))) * _2710;
        float _4627 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2671 = (((_2732 * cbLight._m0[_2681].x) * _2745) * _2746) + _2613;
        _2673 = (((_2732 * cbLight._m0[_2681].y) * _2745) * _2746) + _2614;
        _2675 = (((_2732 * cbLight._m0[_2681].z) * _2745) * _2746) + _2615;
    }
    float _2777;
    float _2779;
    float _2781;
    if (_2399)
    {
        _2777 = _2671;
        _2779 = _2673;
        _2781 = _2675;
    }
    else
    {
        uint _2788 = _2214 + 3u;
        uint _2792 = _2214 + 11u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _773) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _849;
        float _2809 = cbLight._m0[_2788].y + _850;
        float _2810 = cbLight._m0[_2788].z + _851;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2788].xyz));
        float _4643 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2822 = dot(vec3(_770, _771, _772), vec3(_2815, _2816, _2817));
        float _4654 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4665 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2843 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2844 = 1.0 - _2807;
        float _2854 = (0.5 / (((_2490 * ((_2821 * _2844) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2844) + _2807) * _2821))) * _2821;
        float _4676 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2777 = (((_2843 * cbLight._m0[_2792].x) * _2856) * _2857) + _2671;
        _2779 = (((_2843 * cbLight._m0[_2792].y) * _2856) * _2857) + _2673;
        _2781 = (((_2843 * cbLight._m0[_2792].z) * _2856) * _2857) + _2675;
    }
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_2212.y == 0u)
    {
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.x;
        uint _2890 = uint((float(_2878.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2879))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2879)));
        float _2900 = (log2(_1990 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2901 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        uint _2904 = uint(isnan(14.0) ? _2901 : (isnan(_2901) ? 14.0 : min(_2901, 14.0)));
        uvec4 _2909 = texelFetch(g_lightClusterGridBuffer, int(((_2904 << 2u) + (_2890 << 6u)) >> 2u));
        uint _2910 = _2909.x;
        uint _2911 = _2878.z;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((((1u << ((_2911 >> 4u) & 15u)) + 4294967295u) & _2910) == 0u) || ((_2911 & 240u) == 0u))
        {
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
        }
        else
        {
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            uint _3141 = 0u;
            uint _3150;
            bool _3151;
            for (;;)
            {
                _3150 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                _3151 = _3150 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3151)
                {
                    frontier_phi_66_pred = _3140;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                else
                {
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    uint _3265;
                    _3259 = _3135;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3150;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    for (;;)
                    {
                        uint _3269 = uint(findLSB(_3265)) + (_3141 << 5u);
                        uint _3266 = (_3265 + 4294967295u) & _3265;
                        uint _3271 = _3269 * 48u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3291 = (_3269 * 48u) + 4u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3310 = (_3269 * 48u) + 8u;
                        vec3 _3321 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x));
                        float _3325 = _3285.x - _1988;
                        float _3326 = _3285.y - _1989;
                        float _3327 = _3285.z - _1990;
                        float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                        float _3331 = inversesqrt(_3328);
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3335 = dot(vec3(_876, _879, _882), vec3(_3332, _3333, _3334));
                        float _3340 = 1.0 - (_3328 * _3285.w);
                        float _4702 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3342 = sqrt(_3328) * _3304.w;
                        float _3345 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3335) + _3346;
                        float _3352 = _3342 * _3342;
                        float _3356 = ((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3341) / ((_3352 * 0.699999988079071044921875) + 1.0);
                        float _3360 = (-0.0) - _1988;
                        float _3361 = (-0.0) - _1989;
                        float _3362 = (-0.0) - _1990;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3376 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                        float _3377 = 1.0 - _936;
                        float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                        float _3385 = _3384 * _3384;
                        float _3386 = _3385 * _3385;
                        float _3387 = _3367 + _3332;
                        float _3388 = _3368 + _3333;
                        float _3389 = _3369 + _3334;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3397 = dot(vec3(_876, _879, _882), vec3(_3367, _3368, _3369));
                        float _4718 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3400 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3401 = dot(vec3(_876, _879, _882), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                        float _4729 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                        float _3409 = _3345 * _3385;
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3335) + _3410;
                        float _4740 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3415 = 1.0 - _3385;
                        float _3425 = (0.5 / (((_3414 * ((_3400 * _3415) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3414 * _3415) + _3385) * _3400))) * _3414;
                        float _4751 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3436 = (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3408 * _3408) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125))) * _3341;
                        _3194 = (_3356 * _3304.x) + _3262;
                        _3195 = (_3356 * _3304.y) + _3263;
                        _3196 = (_3356 * _3304.z) + _3264;
                        _3191 = (_3436 * _3321.x) + _3259;
                        _3192 = (_3436 * _3321.y) + _3260;
                        _3193 = (_3436 * _3321.z) + _3261;
                        if (_3266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3259 = _3191;
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3266;
                        }
                    }
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3195;
                    frontier_phi_66_pred_2 = _3194;
                    frontier_phi_66_pred_3 = _3193;
                    frontier_phi_66_pred_4 = _3192;
                    frontier_phi_66_pred_5 = _3191;
                }
                _3001 = frontier_phi_66_pred;
                _2999 = frontier_phi_66_pred_1;
                _2997 = frontier_phi_66_pred_2;
                _2995 = frontier_phi_66_pred_3;
                _2993 = frontier_phi_66_pred_4;
                _2991 = frontier_phi_66_pred_5;
                uint _3142 = _3141 + 1u;
                if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3135 = _2991;
                    _3136 = _2993;
                    _3137 = _2995;
                    _3138 = _2997;
                    _3139 = _2999;
                    _3140 = _3001;
                    _3141 = _3142;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
        }
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.z;
        uint _3007 = (_3005 >> 8u) & 15u;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((4294967295u << _3007) & _2910) == 0u)
        {
            _3103 = _2990;
            _3105 = _2992;
            _3107 = _2994;
            _3109 = _2996;
            _3111 = _2998;
            _3113 = _3000;
        }
        else
        {
            float _3128 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
            float _3129 = _3128 * _1988;
            float _3130 = _3128 * _1989;
            float _3131 = _3128 * _1990;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3007 < ((_3005 >> 12u) & 15u))
            {
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3242 = _2990;
                float _3243 = _2992;
                float _3244 = _2994;
                float _3245 = _2996;
                float _3246 = _2998;
                float _3247 = _3000;
                uint _3248 = _3007;
                uint _3257;
                bool _3258;
                for (;;)
                {
                    _3257 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                    _3258 = _3257 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3258)
                    {
                        frontier_phi_72_pred = _3247;
                        frontier_phi_72_pred_1 = _3246;
                        frontier_phi_72_pred_2 = _3245;
                        frontier_phi_72_pred_3 = _3244;
                        frontier_phi_72_pred_4 = _3243;
                        frontier_phi_72_pred_5 = _3242;
                    }
                    else
                    {
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3454 = _3242;
                        float _3455 = _3243;
                        float _3456 = _3244;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        uint _3460 = _3257;
                        uint _3461;
                        vec4 _3486;
                        float _3487;
                        vec4 _3502;
                        vec3 _3514;
                        vec4 _3529;
                        vec4 _3544;
                        float _3590;
                        bool _3591;
                        for (;;)
                        {
                            uint _3471 = ((_3248 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3460));
                            _3461 = (_3460 + 4294967295u) & _3460;
                            uint _3473 = _3471 * 40u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3487 = _3486.w;
                            uint _3489 = (_3471 * 40u) + 4u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3471 * 40u) + 8u;
                            _3514 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x));
                            uint _3516 = (_3471 * 40u) + 16u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3471 * 40u) + 20u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3471 * 40u) + 24u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3565 = (_3471 * 40u) + 28u;
                            vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3590 = fma(_1990, _3578.z, fma(_1989, _3578.y, _3578.x * _1988)) + _3578.w;
                            _3591 = !((fma(_1990, _3559.z, fma(_1989, _3559.y, _3559.x * _1988)) + _3559.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3591)
                            {
                                float _3618 = _3486.x - _1988;
                                float _3619 = _3486.y - _1989;
                                float _3620 = _3486.z - _1990;
                                float _3621 = dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620));
                                float _3624 = inversesqrt(_3621);
                                float _3625 = _3624 * _3618;
                                float _3626 = _3624 * _3619;
                                float _3627 = _3624 * _3620;
                                float _3631 = 1.0 - (_3621 / (_3487 * _3487));
                                float _4762 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3636 = sqrt(_3621) * _3502.w;
                                float _3638 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                                float _3639 = _3638 * _3638;
                                float _3642 = ((1.0 - _3639) * dot(vec3(_3625, _3626, _3627), vec3(_876, _879, _882))) + _3639;
                                float _3645 = _3636 * _3636;
                                float _3649 = (fma(_1990, _3529.z, fma(_1989, _3529.y, _3529.x * _1988)) + _3529.w) / _3590;
                                float _3650 = (fma(_1990, _3544.z, fma(_1989, _3544.y, _3544.x * _1988)) + _3544.w) / _3590;
                                float _3654 = 1.0 - dot(vec2(_3649, _3650), vec2(_3649, _3650));
                                float _4778 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3656 = _3655 * (((isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0))) * _3632) / ((_3645 * 0.699999988079071044921875) + 1.0));
                                float _3668 = exp2(log2(1.0 / ((_3645 * 3.5) + 5.0)) * 0.25);
                                float _3669 = 1.0 - _936;
                                float _3676 = sqrt(1.0 - ((1.0 - (_3669 * _3669)) * (1.0 - (_3668 * _3668))));
                                float _3677 = _3676 * _3676;
                                float _3678 = _3677 * _3677;
                                float _3679 = _3625 - _3129;
                                float _3680 = _3626 - _3130;
                                float _3681 = _3627 - _3131;
                                float _3685 = inversesqrt(dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681)));
                                float _3689 = dot(vec3(_876, _879, _882), vec3((-0.0) - _3129, (-0.0) - _3130, (-0.0) - _3131));
                                float _4789 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3692 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3693 = dot(vec3(_876, _879, _882), vec3(_3685 * _3679, _3685 * _3680, _3685 * _3681));
                                float _4800 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3700 = ((_3696 * _3696) * (_3678 + (-1.0))) + 1.0;
                                float _3701 = _3638 * _3677;
                                float _3702 = _3701 * _3701;
                                float _3708 = ((1.0 - _3702) * dot(vec3(_876, _879, _882), vec3(_3625, _3626, _3627))) + _3702;
                                float _4811 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3710 = 1.0 - _3677;
                                float _3720 = (0.5 / (((_3709 * ((_3692 * _3710) + _3677)) + 9.9999999392252902907785028219223e-09) + (((_3709 * _3710) + _3677) * _3692))) * _3709;
                                float _4822 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3730 = (_3655 * _3632) * (((_3678 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3700 * _3700) * ((_3645 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3656 * _3502.y;
                                frontier_phi_78_pred_1 = _3656 * _3502.x;
                                frontier_phi_78_pred_2 = _3730 * _3514.z;
                                frontier_phi_78_pred_3 = _3730 * _3514.y;
                                frontier_phi_78_pred_4 = _3730 * _3514.x;
                                frontier_phi_78_pred_5 = _3656 * _3502.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3738 = frontier_phi_78_pred;
                            _3737 = frontier_phi_78_pred_1;
                            _3736 = frontier_phi_78_pred_2;
                            _3735 = frontier_phi_78_pred_3;
                            _3734 = frontier_phi_78_pred_4;
                            _3739 = frontier_phi_78_pred_5;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            if (_3461 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3461;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3446;
                        frontier_phi_72_pred_1 = _3445;
                        frontier_phi_72_pred_2 = _3444;
                        frontier_phi_72_pred_3 = _3443;
                        frontier_phi_72_pred_4 = _3442;
                        frontier_phi_72_pred_5 = _3441;
                    }
                    _3114 = frontier_phi_72_pred;
                    _3112 = frontier_phi_72_pred_1;
                    _3110 = frontier_phi_72_pred_2;
                    _3108 = frontier_phi_72_pred_3;
                    _3106 = frontier_phi_72_pred_4;
                    _3104 = frontier_phi_72_pred_5;
                    uint _3249 = _3248 + 1u;
                    if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3242 = _3104;
                        _3243 = _3106;
                        _3244 = _3108;
                        _3245 = _3110;
                        _3246 = _3112;
                        _3247 = _3114;
                        _3248 = _3249;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3114;
                frontier_phi_60_61_ladder_1 = _3112;
                frontier_phi_60_61_ladder_2 = _3108;
                frontier_phi_60_61_ladder_3 = _3106;
                frontier_phi_60_61_ladder_4 = _3104;
                frontier_phi_60_61_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_60_61_ladder = _3000;
                frontier_phi_60_61_ladder_1 = _2998;
                frontier_phi_60_61_ladder_2 = _2994;
                frontier_phi_60_61_ladder_3 = _2992;
                frontier_phi_60_61_ladder_4 = _2990;
                frontier_phi_60_61_ladder_5 = _2996;
            }
            _3103 = frontier_phi_60_61_ladder_4;
            _3105 = frontier_phi_60_61_ladder_3;
            _3107 = frontier_phi_60_61_ladder_2;
            _3109 = frontier_phi_60_61_ladder_5;
            _3111 = frontier_phi_60_61_ladder_1;
            _3113 = frontier_phi_60_61_ladder;
        }
        float _3118 = isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0));
        _2923 = (_3118 * _3109) + _2454;
        _2925 = (_3118 * _3111) + _2456;
        _2927 = (_3118 * _3113) + _2458;
        _2929 = ((_3103 * 0.039999999105930328369140625) * _3118) + _2777;
        _2931 = ((_3105 * 0.039999999105930328369140625) * _3118) + _2779;
        _2933 = ((_3107 * 0.039999999105930328369140625) * _3118) + _2781;
    }
    else
    {
        _2923 = _2454;
        _2925 = _2456;
        _2927 = _2458;
        _2929 = _2777;
        _2931 = _2779;
        _2933 = _2781;
    }
    float _4838 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4849 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4860 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    uint _2953 = _242 + 6u;
    float _2961 = _857 / cbSceneParam._m0[86u].x;
    float _2962 = _858 / cbSceneParam._m0[86u].y;
    vec4 _2976 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2978 = _2976.x;
    float _2979 = _2976.y;
    float _2980 = _2976.z;
    float _2981 = _2976.w;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _3015 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _3016 = _3015 / _791;
        float _3027 = _3016 * _842;
        float _3028 = _843 * _3016;
        float _3029 = (-0.0) - _3028;
        float _3031 = _3016 * _844;
        float _3033 = (cbSceneParam._m0[77u].w * _3029) / _3015;
        float _3034 = _3033 + cbSceneParam._m0[79u].w;
        float _3035 = cbSceneParam._m0[79u].w - _3028;
        float _3041 = sqrt(((_3027 * _3027) + (_3028 * _3028)) + (_3031 * _3031));
        float _3044 = (1.0 - (cbSceneParam._m0[77u].w / _3015)) * _3041;
        float _3049 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3051 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3204;
        if (abs((_3029 - _3033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3204 = ((((_3034 > 0.0) ? exp2(_3049 * _3034) : (2.0 - exp2(_3051 * _3034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3044;
        }
        else
        {
            float _3164 = 1.0 / cbSceneParam._m0[80u].x;
            float _3165 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : max(_3034, _3035));
            float _3166 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : min(_3034, _3035));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            _3204 = ((abs(_3041 / _3029) * cbSceneParam._m0[80u].y) * ((((_3175 - _3176) * 2.0) - ((exp2(_3049 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0)))) - exp2(_3049 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))))) * _3164)) - ((exp2(_3051 * _3175) - exp2(_3051 * _3176)) * _3164))) + (_3044 * cbSceneParam._m0[80u].z);
        }
        vec4 _3206 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, 1.0), 0.0);
        float _3215 = exp2((_3204 * (-1.44269502162933349609375)) * (1.0 - _3206.w));
        float _3216 = log2(_3215);
        float _3232 = log2(_2981);
        _3053 = (exp2(_3232 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].x)) * _3206.x) / cbSceneParam._m0[78u].x)) + _2978;
        _3055 = (exp2(_3232 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].y)) * _3206.y) / cbSceneParam._m0[78u].y)) + _2979;
        _3057 = (exp2(_3232 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].z)) * _3206.z) / cbSceneParam._m0[78u].z)) + _2980;
        _3059 = _3215 * _2981;
    }
    else
    {
        _3053 = _2978;
        _3055 = _2979;
        _3057 = _2980;
        _3059 = _2981;
    }
    float _3071 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3072 = _3071 == 3.0;
    float _3073 = log2(_3059);
    float _3080 = exp2(_3073 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2923 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _920))) + ((_2929 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3081 = exp2(_3073 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2925 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _920))) + ((_2931 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3082 = exp2(_3073 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2927 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _920))) + ((_2933 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3091 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3091 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3053)));
    SV_Target.y = _3091 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
    SV_Target.z = _3091 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
    SV_Target.w = cbInstanceData._m0[_2953].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2953].w;
}


