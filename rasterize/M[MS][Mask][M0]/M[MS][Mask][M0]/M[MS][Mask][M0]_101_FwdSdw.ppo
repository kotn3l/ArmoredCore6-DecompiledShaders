#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1226;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _328.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].z) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3814 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _407 = (_400 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _408 = (_400 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _409 = (_400 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _458 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _472 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _328.y) * 2.0) - ((((_448 - _458) * cbMtdParam._m0[24u].z) + _458) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3825 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _480 = (_473 * ((_426.x * cbMtdParam._m0[13u].x) - _407)) + _407;
    float _481 = (_473 * ((_426.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _482 = (_473 * ((_426.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _260) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _261) + cbTextureTilingScale._m0[24u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _541 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _328.z) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[24u].z) + _529) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3836 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _549 = (_542 * ((_500.x * cbMtdParam._m0[14u].x) - _480)) + _480;
    float _550 = (_542 * ((_500.y * cbMtdParam._m0[14u].y) - _481)) + _481;
    float _551 = (_542 * ((_500.z * cbMtdParam._m0[14u].z) - _482)) + _482;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _592 = ((_564.x - _583) * _400) + _583;
    float _593 = ((_564.y - _584) * _400) + _584;
    float _594 = ((_564.z - _585) * _400) + _585;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _617 = ((_606.x - _592) * _473) + _592;
    float _618 = ((_606.y - _593) * _473) + _593;
    float _619 = ((_606.z - _594) * _473) + _594;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _260) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _261) + cbTextureTilingScale._m0[23u].w));
    float _644 = ((_631.z - _619) * _542) + _619;
    float _647 = ((((_631.x - _617) * _542) + _617) * 2.0) + (-1.0);
    float _649 = ((((_631.y - _618) * _542) + _618) * 2.0) + (-1.0);
    float _650 = dot(vec2(_647, _649), vec2(_647, _649));
    float _3847 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _655 = sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _681 = (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _647;
    float _682 = (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _649;
    float _686 = (cbMtdParam._m0[19u].w * (_669.z - _644)) + _644;
    float _690 = cbMtdParam._m0[22u].x + _669.w;
    float _693 = fma(_655, _227 * NORMAL.x, fma(_682, _234 * TANGENT.x, (_220 * _212) * _681));
    float _696 = fma(_655, _227 * NORMAL.y, fma(_682, _234 * TANGENT.y, (_220 * _213) * _681));
    float _699 = fma(_655, _227 * NORMAL.z, fma(_682, _234 * TANGENT.z, (_220 * _214) * _681));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3858 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _707 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3880 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3891 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3902 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _814 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _817 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _831 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3913 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _855 = ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * TEXCOORD_5.w) * _851.x;
    float _856 = dot(vec3(_704, _705, _706), vec3(_784, _785, _786));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _704) - _784;
    float _864 = (_859 * _705) - _785;
    float _865 = (_859 * _706) - _786;
    float _869 = abs(dot(vec3(_784, _785, _786), vec3(_704, _705, _706)));
    float _3946 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_707);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _954 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _958 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _983 = _916 + _704;
        float _984 = _920 + _705;
        float _985 = _924 + _706;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_704, _705, _706), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3994 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_704, _705, _706), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4027 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_704, _705, _706), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4060 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1267 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1271 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1294 = _916 + _704;
        float _1295 = _920 + _705;
        float _1296 = _924 + _706;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_704, _705, _706), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4123 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_704, _705, _706), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4156 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_704, _705, _706), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4189 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1226;
        _1533 = _1226;
        _1534 = _1226;
        _1535 = _1226;
        _1536 = _1226;
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1238)) + _1238;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1239)) + _1239;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1240)) + _1240;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _863 * 0.5;
    float _1601 = _864 * 0.5;
    float _1602 = _865 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1731 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1734 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1933;
        if (_1731 > 0.0)
        {
            _1933 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1933 = frontier_phi_23_19_ladder;
        }
        float _2228;
        if (_1734 > 0.0)
        {
            _2228 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2228 = frontier_phi_35_30_ladder;
        }
        float _2230 = isnan(_1933) ? _1762 : (isnan(_1762) ? _1933 : min(_1762, _1933));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1728) + _1717;
        float _2236 = (_2231 * _1731) + _1721;
        float _2237 = (_2231 * _1734) + _1725;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_13_35_ladder = _2382.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2382.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2382.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1669);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1814 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1818 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1822 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1825 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1828 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1831 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1938;
        if (_1825 > 0.0)
        {
            _1938 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1938 = frontier_phi_25_21_ladder;
        }
        float _2255;
        if (_1828 > 0.0)
        {
            _2255 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2255 = frontier_phi_37_32_ladder;
        }
        float _2582;
        if (_1831 > 0.0)
        {
            _2582 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2582 = frontier_phi_47_44_ladder;
        }
        float _2584 = isnan(_2255) ? _1938 : (isnan(_1938) ? _2255 : min(_1938, _2255));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1825) + _1814;
        float _2590 = (_2585 * _1828) + _1818;
        float _2591 = (_2585 * _1831) + _1822;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_47_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1850 = frontier_phi_22_47_ladder_2;
        _1852 = frontier_phi_22_47_ladder_1;
        _1854 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1759);
        _1850 = _1834.x * cbModelParam._m0[1u].z;
        _1852 = _1834.y * cbModelParam._m0[1u].z;
        _1854 = _1834.z * cbModelParam._m0[1u].z;
    }
    float _1866 = ((((1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_884 * _871)) * _855;
    float _1867 = _1866 * ((cbModelParam._m0[1u].w * (_1850 - _1750)) + _1750);
    float _1868 = _1866 * ((cbModelParam._m0[1u].w * (_1852 - _1752)) + _1752);
    float _1869 = _1866 * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1872 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1867 * cbSceneParam._m0[91u].x));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1925 = _1912 / _1924;
    float _1926 = _1916 / _1924;
    float _1927 = _1920 / _1924;
    float _2074;
    float _2075;
    float _2076;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1954 = ((uint(_1927 > cbSceneParam._m0[59u].y) + uint(_1927 > cbSceneParam._m0[59u].x)) + uint(_1927 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1955 = _1954 + 43u;
        uint _1963 = _1954 + 44u;
        uint _1971 = _1954 + 45u;
        uint _1979 = _1954 + 46u;
        float _1990 = fma(_1924, cbSceneParam._m0[_1955].w, fma(_1920, cbSceneParam._m0[_1955].z, fma(_1916, cbSceneParam._m0[_1955].y, _1912 * cbSceneParam._m0[_1955].x)));
        float _1994 = fma(_1924, cbSceneParam._m0[_1963].w, fma(_1920, cbSceneParam._m0[_1963].z, fma(_1916, cbSceneParam._m0[_1963].y, _1912 * cbSceneParam._m0[_1963].x)));
        float _2002 = fma(_1924, cbSceneParam._m0[_1979].w, fma(_1920, cbSceneParam._m0[_1979].z, fma(_1916, cbSceneParam._m0[_1979].y, _1912 * cbSceneParam._m0[_1979].x)));
        float _2007 = cbSceneParam._m0[33u].z * _2002;
        float _2009 = cbSceneParam._m0[33u].w * _2002;
        float _2012 = fma(_1924, cbSceneParam._m0[_1971].w, fma(_1920, cbSceneParam._m0[_1971].z, fma(_1916, cbSceneParam._m0[_1971].y, _1912 * cbSceneParam._m0[_1971].x))) / _2002;
        float _2060 = (cbSceneParam._m0[33u].x - sqrt(((_1926 * _1926) + (_1925 * _1925)) + (_1927 * _1927))) * cbSceneParam._m0[33u].y;
        float _4315 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2067 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 + _1990) / _2002, (_2009 + _1994) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 + _1990) / _2002, (_1994 - _2007) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 - _2007) / _2002, (_1994 - _2009) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 - _2009) / _2002, (_2007 + _1994) / _2002), _2012), 0.0)).x), vec4(0.25)));
        _2074 = 1.0 - (_2067 * cbSceneParam._m0[34u].x);
        _2075 = 1.0 - (_2067 * cbSceneParam._m0[34u].y);
        _2076 = 1.0 - (_2067 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2074 = 1.0;
        _2075 = 1.0;
        _2076 = 1.0;
    }
    float _2140;
    float _2142;
    float _2144;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2128 = fma(_1924, cbSceneParam._m0[63u].w, fma(_1920, cbSceneParam._m0[63u].z, fma(_1916, cbSceneParam._m0[63u].y, _1912 * cbSceneParam._m0[63u].x)));
        float _2129 = fma(_1924, cbSceneParam._m0[60u].w, fma(_1920, cbSceneParam._m0[60u].z, fma(_1916, cbSceneParam._m0[60u].y, _1912 * cbSceneParam._m0[60u].x))) / _2128;
        float _2130 = fma(_1924, cbSceneParam._m0[61u].w, fma(_1920, cbSceneParam._m0[61u].z, fma(_1916, cbSceneParam._m0[61u].y, _1912 * cbSceneParam._m0[61u].x))) / _2128;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2129 >= cbSceneParam._m0[64u].x) && (_2130 >= cbSceneParam._m0[64u].y)) && (_2129 <= cbSceneParam._m0[64u].z)) && (_2130 <= cbSceneParam._m0[64u].w))
        {
            float _2268 = fma(_1924, cbSceneParam._m0[62u].w, fma(_1920, cbSceneParam._m0[62u].z, fma(_1916, cbSceneParam._m0[62u].y, _1912 * cbSceneParam._m0[62u].x))) / _2128;
            float _2272 = isnan(cbSceneParam._m0[41u].w) ? _2268 : (isnan(_2268) ? cbSceneParam._m0[41u].w : max(_2268, cbSceneParam._m0[41u].w));
            float _2315 = (cbSceneParam._m0[33u].x - sqrt(((_1926 * _1926) + (_1925 * _1925)) + (_1927 * _1927))) * cbSceneParam._m0[33u].y;
            float _4331 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
            float _2322 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2129, cbSceneParam._m0[33u].w + _2130), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2129, _2130 - cbSceneParam._m0[33u].z), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2129 - cbSceneParam._m0[33u].z, _2130 - cbSceneParam._m0[33u].w), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2129 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2130), _2272), 0.0)).x), vec4(0.25)));
            float _2326 = 1.0 - (_2322 * cbSceneParam._m0[34u].x);
            float _2327 = 1.0 - (_2322 * cbSceneParam._m0[34u].y);
            float _2328 = 1.0 - (_2322 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_34_33_ladder_1 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
            frontier_phi_34_33_ladder_2 = isnan(_2326) ? _2074 : (isnan(_2074) ? _2326 : min(_2074, _2326));
        }
        else
        {
            frontier_phi_34_33_ladder = _2076;
            frontier_phi_34_33_ladder_1 = _2075;
            frontier_phi_34_33_ladder_2 = _2074;
        }
        _2140 = frontier_phi_34_33_ladder_2;
        _2142 = frontier_phi_34_33_ladder_1;
        _2144 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2140 = _2074;
        _2142 = _2075;
        _2144 = _2076;
    }
    uvec4 _2149 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2151 = _2149.x * 14u;
    uint _2152 = _2151 + 13u;
    float _2159 = _855 + (-1.0);
    float _2164 = (cbLight._m0[_2152].x * _2159) + 1.0;
    float _2165 = (cbLight._m0[_2152].y * _2159) + 1.0;
    float _2166 = (cbLight._m0[_2152].z * _2159) + 1.0;
    float _2167 = (cbLight._m0[_2152].w * _2159) + 1.0;
    uint _2168 = _2151 + 5u;
    float _2174 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2178 = _2151 + 4u;
    float _2187 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2191 = _2151 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_704, _705, _706));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_704, _705, _706));
    float _4367 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4378 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2168].x * _2174) * _2212) + (((cbLight._m0[_2178].x * _2140) * _2187) * _2210);
    float _2220 = ((_2174 * cbLight._m0[_2168].y) * _2212) + (((cbLight._m0[_2178].y * _2142) * _2187) * _2210);
    float _2221 = ((_2174 * cbLight._m0[_2168].z) * _2212) + (((cbLight._m0[_2178].z * _2144) * _2187) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2151 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2227)
    {
        _2329 = _2219;
        _2331 = _2220;
        _2333 = _2221;
    }
    else
    {
        uint _2337 = _2151 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2151 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4389 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2356 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2219;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2220;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2221;
    }
    bool _2336 = _2225.y == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2336)
    {
        _2391 = _2329;
        _2393 = _2331;
        _2395 = _2333;
    }
    else
    {
        uint _2553 = _2151 + 7u;
        float _2569 = (dot(vec3(cbLight._m0[_2151 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4405 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2572 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2391 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2329;
        _2393 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2331;
        _2395 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2333;
    }
    uint _2398 = _2151 + 8u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _707) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2151].x + _784;
    float _2414 = cbLight._m0[_2151].y + _785;
    float _2415 = cbLight._m0[_2151].z + _786;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2151].xyz));
    float _4421 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2427 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2428 = dot(vec3(_704, _705, _706), vec3(_2420, _2421, _2422));
    float _4443 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2420, _2421, _2422));
    float _4454 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2412 * _2412;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2452 = 1.0 - _2412;
    float _2463 = (0.5 / (((_2427 * ((_2426 * _2452) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2452) + _2412) * _2426))) * _2426;
    float _4465 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    uint _2479 = _2151 + 9u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _707) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2191].x + _784;
    float _2493 = cbLight._m0[_2191].y + _785;
    float _2494 = cbLight._m0[_2191].z + _786;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2191].xyz));
    float _4476 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2506 = dot(vec3(_704, _705, _706), vec3(_2499, _2500, _2501));
    float _4487 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2499, _2500, _2501));
    float _4498 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2491 * _2491;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2528 = 1.0 - _2491;
    float _2538 = (0.5 / (((_2427 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2528) + _2491) * _2505))) * _2505;
    float _4509 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    float _2550 = (((_2527 * cbLight._m0[_2479].x) * _2540) * _2174) + ((((cbLight._m0[_2398].x * _2140) * _2451) * _2465) * _2187);
    float _2551 = (((_2527 * cbLight._m0[_2479].y) * _2540) * _2174) + ((((cbLight._m0[_2398].y * _2142) * _2451) * _2465) * _2187);
    float _2552 = (((_2527 * cbLight._m0[_2479].z) * _2540) * _2174) + ((((cbLight._m0[_2398].z * _2144) * _2451) * _2465) * _2187);
    float _2608;
    float _2610;
    float _2612;
    if (_2227)
    {
        _2608 = _2550;
        _2610 = _2551;
        _2612 = _2552;
    }
    else
    {
        uint _2614 = _2151 + 2u;
        uint _2618 = _2151 + 10u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _707) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _784;
        float _2635 = cbLight._m0[_2614].y + _785;
        float _2636 = cbLight._m0[_2614].z + _786;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2614].xyz));
        float _4520 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2648 = dot(vec3(_704, _705, _706), vec3(_2641, _2642, _2643));
        float _4531 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4542 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2427 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2670) + _2633) * _2647))) * _2647;
        float _4553 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2608 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2550;
        _2610 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2551;
        _2612 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2552;
    }
    float _2714;
    float _2716;
    float _2718;
    if (_2336)
    {
        _2714 = _2608;
        _2716 = _2610;
        _2718 = _2612;
    }
    else
    {
        uint _2725 = _2151 + 3u;
        uint _2729 = _2151 + 11u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _707) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _784;
        float _2746 = cbLight._m0[_2725].y + _785;
        float _2747 = cbLight._m0[_2725].z + _786;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2725].xyz));
        float _4569 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2759 = dot(vec3(_704, _705, _706), vec3(_2752, _2753, _2754));
        float _4580 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4591 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2780 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2781 = 1.0 - _2744;
        float _2791 = (0.5 / (((_2427 * ((_2758 * _2781) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2781) + _2744) * _2758))) * _2758;
        float _4602 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2714 = (((_2780 * cbLight._m0[_2729].x) * _2793) * _2794) + _2608;
        _2716 = (((_2780 * cbLight._m0[_2729].y) * _2793) * _2794) + _2610;
        _2718 = (((_2780 * cbLight._m0[_2729].z) * _2793) * _2794) + _2612;
    }
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_2149.y == 0u)
    {
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.x;
        uint _2827 = uint((float(_2815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2816))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2816)));
        float _2837 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2838 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        uint _2841 = uint(isnan(14.0) ? _2838 : (isnan(_2838) ? 14.0 : min(_2838, 14.0)));
        uvec4 _2846 = texelFetch(g_lightClusterGridBuffer, int(((_2841 << 2u) + (_2827 << 6u)) >> 2u));
        uint _2847 = _2846.x;
        uint _2848 = _2815.z;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((((1u << ((_2848 >> 4u) & 15u)) + 4294967295u) & _2847) == 0u) || ((_2848 & 240u) == 0u))
        {
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
        }
        else
        {
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3088)
                {
                    frontier_phi_66_pred = _3077;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3087;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3078 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _1925;
                        float _3263 = _3222.y - _1926;
                        float _3264 = _3222.z - _1927;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_811, _814, _817), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4628 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _1925;
                        float _3298 = (-0.0) - _1926;
                        float _3299 = (-0.0) - _1927;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3313 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3314 = 1.0 - _871;
                        float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                        float _3322 = _3321 * _3321;
                        float _3323 = _3322 * _3322;
                        float _3324 = _3304 + _3269;
                        float _3325 = _3305 + _3270;
                        float _3326 = _3306 + _3271;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3334 = dot(vec3(_811, _814, _817), vec3(_3304, _3305, _3306));
                        float _4644 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3338 = dot(vec3(_811, _814, _817), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                        float _4655 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                        float _3346 = _3282 * _3322;
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3272) + _3347;
                        float _4666 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3352 = 1.0 - _3322;
                        float _3362 = (0.5 / (((_3351 * ((_3337 * _3352) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3322) * _3337))) * _3351;
                        float _4677 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3373 = (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3345 * _3345) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3131 = (_3293 * _3241.x) + _3199;
                        _3132 = (_3293 * _3241.y) + _3200;
                        _3133 = (_3293 * _3241.z) + _3201;
                        _3128 = (_3373 * _3258.x) + _3196;
                        _3129 = (_3373 * _3258.y) + _3197;
                        _3130 = (_3373 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_66_pred = _3133;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                _2938 = frontier_phi_66_pred;
                _2936 = frontier_phi_66_pred_1;
                _2934 = frontier_phi_66_pred_2;
                _2932 = frontier_phi_66_pred_3;
                _2930 = frontier_phi_66_pred_4;
                _2928 = frontier_phi_66_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2928;
                    _3073 = _2930;
                    _3074 = _2932;
                    _3075 = _2934;
                    _3076 = _2936;
                    _3077 = _2938;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
        }
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.z;
        uint _2944 = (_2942 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2944) & _2847) == 0u)
        {
            _3040 = _2927;
            _3042 = _2929;
            _3044 = _2931;
            _3046 = _2933;
            _3048 = _2935;
            _3050 = _2937;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float _3066 = _3065 * _1925;
            float _3067 = _3065 * _1926;
            float _3068 = _3065 * _1927;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2944 < ((_2942 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3179 = _2927;
                float _3180 = _2929;
                float _3181 = _2931;
                float _3182 = _2933;
                float _3183 = _2935;
                float _3184 = _2937;
                uint _3185 = _2944;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3195)
                    {
                        frontier_phi_72_pred = _3184;
                        frontier_phi_72_pred_1 = _3183;
                        frontier_phi_72_pred_2 = _3182;
                        frontier_phi_72_pred_3 = _3181;
                        frontier_phi_72_pred_4 = _3180;
                        frontier_phi_72_pred_5 = _3179;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3179;
                        float _3392 = _3180;
                        float _3393 = _3181;
                        float _3394 = _3182;
                        float _3395 = _3183;
                        float _3396 = _3184;
                        uint _3397 = _3194;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_1927, _3515.z, fma(_1926, _3515.y, _3515.x * _1925)) + _3515.w;
                            _3528 = !((fma(_1927, _3496.z, fma(_1926, _3496.y, _3496.x * _1925)) + _3496.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _1925;
                                float _3556 = _3423.y - _1926;
                                float _3557 = _3423.z - _1927;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4688 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_811, _814, _817))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_1927, _3466.z, fma(_1926, _3466.y, _3466.x * _1925)) + _3466.w) / _3527;
                                float _3587 = (fma(_1927, _3481.z, fma(_1926, _3481.y, _3481.x * _1925)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4704 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _871;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3066;
                                float _3617 = _3563 - _3067;
                                float _3618 = _3564 - _3068;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_811, _814, _817), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4715 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3630 = dot(vec3(_811, _814, _817), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4726 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_811, _814, _817), vec3(_3562, _3563, _3564))) + _3639;
                                float _4737 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4748 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3593 * _3439.y;
                                frontier_phi_78_pred_1 = _3593 * _3439.x;
                                frontier_phi_78_pred_2 = _3667 * _3451.z;
                                frontier_phi_78_pred_3 = _3667 * _3451.y;
                                frontier_phi_78_pred_4 = _3667 * _3451.x;
                                frontier_phi_78_pred_5 = _3593 * _3439.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3675 = frontier_phi_78_pred;
                            _3674 = frontier_phi_78_pred_1;
                            _3673 = frontier_phi_78_pred_2;
                            _3672 = frontier_phi_78_pred_3;
                            _3671 = frontier_phi_78_pred_4;
                            _3676 = frontier_phi_78_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3383;
                        frontier_phi_72_pred_1 = _3382;
                        frontier_phi_72_pred_2 = _3381;
                        frontier_phi_72_pred_3 = _3380;
                        frontier_phi_72_pred_4 = _3379;
                        frontier_phi_72_pred_5 = _3378;
                    }
                    _3051 = frontier_phi_72_pred;
                    _3049 = frontier_phi_72_pred_1;
                    _3047 = frontier_phi_72_pred_2;
                    _3045 = frontier_phi_72_pred_3;
                    _3043 = frontier_phi_72_pred_4;
                    _3041 = frontier_phi_72_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3041;
                        _3180 = _3043;
                        _3181 = _3045;
                        _3182 = _3047;
                        _3183 = _3049;
                        _3184 = _3051;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3051;
                frontier_phi_60_61_ladder_1 = _3049;
                frontier_phi_60_61_ladder_2 = _3045;
                frontier_phi_60_61_ladder_3 = _3043;
                frontier_phi_60_61_ladder_4 = _3041;
                frontier_phi_60_61_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_60_61_ladder = _2937;
                frontier_phi_60_61_ladder_1 = _2935;
                frontier_phi_60_61_ladder_2 = _2931;
                frontier_phi_60_61_ladder_3 = _2929;
                frontier_phi_60_61_ladder_4 = _2927;
                frontier_phi_60_61_ladder_5 = _2933;
            }
            _3040 = frontier_phi_60_61_ladder_4;
            _3042 = frontier_phi_60_61_ladder_3;
            _3044 = frontier_phi_60_61_ladder_2;
            _3046 = frontier_phi_60_61_ladder_5;
            _3048 = frontier_phi_60_61_ladder_1;
            _3050 = frontier_phi_60_61_ladder;
        }
        float _3055 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2860 = (_3055 * _3046) + _2391;
        _2862 = (_3055 * _3048) + _2393;
        _2864 = (_3055 * _3050) + _2395;
        _2866 = ((_3040 * 0.039999999105930328369140625) * _3055) + _2714;
        _2868 = ((_3042 * 0.039999999105930328369140625) * _3055) + _2716;
        _2870 = ((_3044 * 0.039999999105930328369140625) * _3055) + _2718;
    }
    else
    {
        _2860 = _2391;
        _2862 = _2393;
        _2864 = _2395;
        _2866 = _2714;
        _2868 = _2716;
        _2870 = _2718;
    }
    float _4764 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4775 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4786 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    uint _2890 = _240 + 6u;
    float _2898 = _792 / cbSceneParam._m0[86u].x;
    float _2899 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2915 = _2913.x;
    float _2916 = _2913.y;
    float _2917 = _2913.z;
    float _2918 = _2913.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2952 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2953 = _2952 / _725;
        float _2964 = _2953 * _777;
        float _2965 = _778 * _2953;
        float _2966 = (-0.0) - _2965;
        float _2968 = _2953 * _779;
        float _2970 = (cbSceneParam._m0[77u].w * _2966) / _2952;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2965;
        float _2978 = sqrt(((_2964 * _2964) + (_2965 * _2965)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2952)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2966 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3103 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3141 = ((abs(_2978 / _2966) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2988 * _3112) - exp2(_2988 * _3113)) * _3101))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2918);
        _2990 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2915;
        _2992 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2916;
        _2994 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2917;
        _2996 = _3152 * _2918;
    }
    else
    {
        _2990 = _2915;
        _2992 = _2916;
        _2994 = _2917;
        _2996 = _2918;
    }
    float _3008 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3009 = _3008 == 3.0;
    float _3010 = log2(_2996);
    float _3017 = exp2(_3010 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2860 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _855))) + ((_2866 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3018 = exp2(_3010 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2862 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _855))) + ((_2868 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3019 = exp2(_3010 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2864 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _855))) + ((_2870 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3028 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3028 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.y = _3028 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.z = _3028 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.w = cbInstanceData._m0[_2890].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2890].w;
}


