#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1261;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3568 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _434 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_421 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315);
    float _437 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_421 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316);
    float _440 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_421 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317);
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    float _488 = ((_458.z - _479) * _421) + _479;
    float _491 = ((((_458.x - _477) * _421) + _477) * 2.0) + (-1.0);
    float _493 = ((((_458.y - _478) * _421) + _478) * 2.0) + (-1.0);
    float _494 = dot(vec2(_491, _493), vec2(_491, _493));
    float _3579 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _549 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _552 = ((isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : min(_549, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _561 = (_552 - ((((((_542 - _543) * cbMtdParam._m0[24u].w) + _543) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _552))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3600 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _569 = (_562 * (cbMtdParam._m0[17u].x - _434)) + _434;
    float _570 = (_562 * (cbMtdParam._m0[17u].y - _437)) + _437;
    float _571 = (_562 * (cbMtdParam._m0[17u].z - _440)) + _440;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _613 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].y) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3611 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _622 = ((((cbMtdParam._m0[10u].x - _569) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _614) + _569;
    float _623 = ((((cbMtdParam._m0[10u].y - _570) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _614) + _570;
    float _624 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _571)) * _614) + _571;
    float _628 = (cbMtdParam._m0[19u].w * (_515.z - _488)) + _488;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3622 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _659 = (_562 * (_642.z - _628)) + _628;
    float _662 = ((cbMtdParam._m0[23u].y - _659) * _614) + _659;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _687 = (_681.x * 2.0) + (-1.0);
    float _688 = (_681.y * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3633 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _697 = (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _698 = (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _710 = (((_649 - _697) + (cbMtdParam._m0[21u].x * _697)) * _562) + _697;
    float _711 = (((_650 - _698) + (cbMtdParam._m0[21u].x * _698)) * _562) + _698;
    float _712 = (_562 * (sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) - _499)) + _499;
    float _723 = (((_687 - _710) + (_710 * cbMtdParam._m0[22u].z)) * _614) + _710;
    float _724 = (((_688 - _711) + (_711 * cbMtdParam._m0[22u].z)) * _614) + _711;
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) - _712) * _614) + _712;
    float _727 = cbMtdParam._m0[22u].x + _515.w;
    float _730 = fma(_725, _234 * NORMAL.x, fma(_724, _241 * TANGENT.x, (_227 * _219) * _723));
    float _733 = fma(_725, _234 * NORMAL.y, fma(_724, _241 * TANGENT.y, (_227 * _220) * _723));
    float _736 = fma(_725, _234 * NORMAL.z, fma(_724, _241 * TANGENT.z, (_227 * _221) * _723));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    float _741 = _740 * _730;
    float _742 = _740 * _733;
    float _743 = _740 * _736;
    float _3644 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _744 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3666 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3677 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3688 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    float _827 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _828 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _846 = fma(_743, cbSceneParam._m0[5u].z, fma(_742, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _741));
    float _849 = fma(_743, cbSceneParam._m0[6u].z, fma(_742, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _741));
    float _852 = fma(_743, cbSceneParam._m0[7u].z, fma(_742, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _741));
    uint _866 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_866].z;
    float _3699 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _827, cbSceneParam._m0[86u].y * _828));
    float _890 = ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * TEXCOORD_5.w) * _886.x;
    float _891 = dot(vec3(_741, _742, _743), vec3(_819, _820, _821));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _741) - _819;
    float _899 = (_894 * _742) - _820;
    float _900 = (_894 * _743) - _821;
    float _904 = abs(dot(vec3(_819, _820, _821), vec3(_741, _742, _743)));
    float _3732 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_744);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1260;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _985 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _989 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _993 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1018 = _951 + _741;
        float _1019 = _955 + _742;
        float _1020 = _959 + _743;
        float _1030 = fma(_1020, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018)) - _985;
        float _1031 = fma(_1020, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018)) - _989;
        float _1032 = fma(_1020, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018)) - _993;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_985 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_989 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[34u].z) + ((((((_993 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1088 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1054.x + (-0.5));
        float _1090 = _1088 * (_1054.y + (-0.5));
        float _1091 = _1088 * (_1054.z + (-0.5));
        float _1098 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1061.x + (-0.5));
        float _1100 = _1098 * (_1061.y + (-0.5));
        float _1101 = _1098 * (_1061.z + (-0.5));
        float _1108 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1068.x + (-0.5));
        float _1110 = _1108 * (_1068.y + (-0.5));
        float _1111 = _1108 * (_1068.z + (-0.5));
        float _1118 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1075.x + (-0.5));
        float _1120 = _1118 * (_1075.y + (-0.5));
        float _1121 = _1118 * (_1075.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1142 = (dot(vec3(_741, _742, _743), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1152 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3780 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1154 + 1.0))) + _1159) * _1122;
        float _1169 = _1090 * 0.5;
        float _1170 = _1100 * 0.5;
        float _1171 = _1110 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_741, _742, _743), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3813 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1196 + 1.0))) + _1201) * _1123;
        float _1211 = _1091 * 0.5;
        float _1212 = _1101 * 0.5;
        float _1213 = _1111 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_741, _742, _743), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3846 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1238 + 1.0))) + _1243) * _1124;
        _1260 = _1091;
        _1262 = _1090;
        _1263 = _1089;
        _1264 = _1101;
        _1265 = _1100;
        _1266 = _1099;
        _1267 = _1111;
        _1268 = _1110;
        _1269 = _1109;
        _1270 = _1124;
        _1271 = _1123;
        _1272 = _1122;
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _1261;
        _1262 = _1261;
        _1263 = _1261;
        _1264 = _1261;
        _1265 = _1261;
        _1266 = _1261;
        _1267 = _1261;
        _1268 = _1261;
        _1269 = _1261;
        _1270 = _1261;
        _1271 = _1261;
        _1272 = _1261;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1304 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1308 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1331 = _951 + _741;
        float _1332 = _955 + _742;
        float _1333 = _959 + _743;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_741, _742, _743), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3909 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_741, _742, _743), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3942 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_741, _742, _743), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _3975 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1261;
        _1570 = _1261;
        _1571 = _1261;
        _1572 = _1261;
        _1573 = _1261;
        _1574 = _1261;
        _1575 = _1261;
        _1576 = _1261;
        _1577 = _1261;
        _1578 = _1261;
        _1579 = _1261;
        _1580 = _1261;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1273)) + _1273;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1274)) + _1274;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _898 * 0.5;
    float _1638 = _899 * 0.5;
    float _1639 = _900 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1260, _1264, _1267, _1270));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _744);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1754 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1758 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1762 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1765 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1768 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1771 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1799;
        if (_1765 > 0.0)
        {
            _1799 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1799 = frontier_phi_14_12_ladder;
        }
        float _2000;
        if (_1768 > 0.0)
        {
            _2000 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2000 = frontier_phi_23_19_ladder;
        }
        float _2243;
        if (_1771 > 0.0)
        {
            _2243 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2243 = frontier_phi_35_30_ladder;
        }
        float _2245 = isnan(_2000) ? _1799 : (isnan(_1799) ? _2000 : min(_1799, _2000));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1765) + _1754;
        float _2251 = (_2246 * _1768) + _1758;
        float _2252 = (_2246 * _1771) + _1762;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_13_35_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1787 = frontier_phi_13_35_ladder_2;
        _1789 = frontier_phi_13_35_ladder_1;
        _1791 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1706);
        _1787 = _1775.x * cbModelParam._m0[1u].y;
        _1789 = _1775.y * cbModelParam._m0[1u].y;
        _1791 = _1775.z * cbModelParam._m0[1u].y;
    }
    float _1795 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _744);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1795 : min(cbModelParam._m0[25u].w, _1795));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1864 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1867 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2005;
        if (_1861 > 0.0)
        {
            _2005 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2005 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1864 > 0.0)
        {
            _2270 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2475;
        if (_1867 > 0.0)
        {
            _2475 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2475 = frontier_phi_46_43_ladder;
        }
        float _2477 = isnan(_2270) ? _2005 : (isnan(_2005) ? _2270 : min(_2005, _2270));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1861) + _1850;
        float _2483 = (_2478 * _1864) + _1854;
        float _2484 = (_2478 * _1867) + _1858;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1796);
            frontier_phi_22_46_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_22_46_ladder_2;
        _1888 = frontier_phi_22_46_ladder_1;
        _1890 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1796);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1902 = ((((1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_919 * _906)) * _890;
    float _1903 = _1902 * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1904 = _1902 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1905 = _1902 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _890 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1959 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1963 = _1926 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_741, _742, _743));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_741, _742, _743));
    float _4111 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4122 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1943].x * _1949) * _1984) + ((cbLight._m0[_1953].x * _1959) * _1982);
    float _1992 = ((_1949 * cbLight._m0[_1943].y) * _1984) + ((_1959 * cbLight._m0[_1953].y) * _1982);
    float _1993 = ((_1949 * cbLight._m0[_1943].z) * _1984) + ((_1959 * cbLight._m0[_1953].z) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1999)
    {
        _2010 = _1991;
        _2012 = _1992;
        _2014 = _1993;
    }
    else
    {
        uint _2018 = _1926 + 6u;
        float _2034 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _4133 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2037 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2010 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1991;
        _2012 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1992;
        _2014 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1993;
    }
    bool _2017 = _1997.y == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2017)
    {
        _2055 = _2010;
        _2057 = _2012;
        _2059 = _2014;
    }
    else
    {
        uint _2214 = _1926 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4149 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2233 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2055 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2010;
        _2057 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2012;
        _2059 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2014;
    }
    uint _2062 = _1926 + 8u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _744) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1926].x + _819;
    float _2078 = cbLight._m0[_1926].y + _820;
    float _2079 = cbLight._m0[_1926].z + _821;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_1926].xyz));
    float _4165 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2091 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2092 = dot(vec3(_741, _742, _743), vec3(_2084, _2085, _2086));
    float _4187 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2084, _2085, _2086));
    float _4198 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2076 * _2076;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = 1.0 - _2076;
    float _2127 = (0.5 / (((_2091 * ((_2090 * _2116) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2116) + _2076) * _2090))) * _2090;
    float _4209 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    uint _2140 = _1926 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _744) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1963].x + _819;
    float _2154 = cbLight._m0[_1963].y + _820;
    float _2155 = cbLight._m0[_1963].z + _821;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_1963].xyz));
    float _4220 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2167 = dot(vec3(_741, _742, _743), vec3(_2160, _2161, _2162));
    float _4231 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2160, _2161, _2162));
    float _4242 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2091 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2189) + _2152) * _2166))) * _2166;
    float _4253 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].x) * _2129) * _1959);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].y) * _2129) * _1959);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].z) * _2129) * _1959);
    float _2275;
    float _2277;
    float _2279;
    if (_1999)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1926 + 2u;
        uint _2285 = _1926 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _744) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _819;
        float _2302 = cbLight._m0[_2281].y + _820;
        float _2303 = cbLight._m0[_2281].z + _821;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2281].xyz));
        float _4264 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2315 = dot(vec3(_741, _742, _743), vec3(_2308, _2309, _2310));
        float _4275 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4286 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2337 = 1.0 - _2300;
        float _2347 = (0.5 / (((_2091 * ((_2314 * _2337) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2337) + _2300) * _2314))) * _2314;
        float _4297 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2275 = (((_2336 * cbLight._m0[_2285].x) * _2349) * _2350) + _2211;
        _2277 = (((_2336 * cbLight._m0[_2285].y) * _2349) * _2350) + _2212;
        _2279 = (((_2336 * cbLight._m0[_2285].z) * _2349) * _2350) + _2213;
    }
    float _2385;
    float _2387;
    float _2389;
    if (_2017)
    {
        _2385 = _2275;
        _2387 = _2277;
        _2389 = _2279;
    }
    else
    {
        uint _2396 = _1926 + 3u;
        uint _2400 = _1926 + 11u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _744) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _819;
        float _2417 = cbLight._m0[_2396].y + _820;
        float _2418 = cbLight._m0[_2396].z + _821;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2396].xyz));
        float _4313 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2430 = dot(vec3(_741, _742, _743), vec3(_2423, _2424, _2425));
        float _4324 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4335 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2452 = 1.0 - _2415;
        float _2462 = (0.5 / (((_2091 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2452) + _2415) * _2429))) * _2429;
        float _4346 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2385 = (((_2451 * cbLight._m0[_2400].x) * _2464) * _2465) + _2275;
        _2387 = (((_2451 * cbLight._m0[_2400].y) * _2464) * _2465) + _2277;
        _2389 = (((_2451 * cbLight._m0[_2400].z) * _2464) * _2465) + _2279;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1924.y == 0u)
    {
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2540;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2540;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2540;
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _828) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _827) / _2556)));
        float _2577 = (log2(_2543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            uint _2839 = 0u;
            uint _2848;
            bool _2849;
            for (;;)
            {
                _2848 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                _2849 = _2848 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2849)
                {
                    frontier_phi_61_pred = _2833;
                    frontier_phi_61_pred_1 = _2838;
                    frontier_phi_61_pred_2 = _2837;
                    frontier_phi_61_pred_3 = _2836;
                    frontier_phi_61_pred_4 = _2835;
                    frontier_phi_61_pred_5 = _2834;
                }
                else
                {
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    uint _2963;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2848;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    for (;;)
                    {
                        uint _2967 = uint(findLSB(_2963)) + (_2839 << 5u);
                        uint _2964 = (_2963 + 4294967295u) & _2963;
                        uint _2969 = _2967 * 48u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2989 = (_2967 * 48u) + 4u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3008 = (_2967 * 48u) + 8u;
                        vec3 _3019 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x));
                        float _3023 = _2983.x - _2541;
                        float _3024 = _2983.y - _2542;
                        float _3025 = _2983.z - _2543;
                        float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                        float _3029 = inversesqrt(_3026);
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3033 = dot(vec3(_846, _849, _852), vec3(_3030, _3031, _3032));
                        float _3038 = 1.0 - (_3026 * _2983.w);
                        float _4372 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3040 = sqrt(_3026) * _3002.w;
                        float _3043 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _3033) + _3044;
                        float _3050 = _3040 * _3040;
                        float _3054 = ((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3039) / ((_3050 * 0.699999988079071044921875) + 1.0);
                        float _3058 = (-0.0) - _2541;
                        float _3059 = (-0.0) - _2542;
                        float _3060 = (-0.0) - _2543;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3075 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                        float _3076 = 1.0 - _906;
                        float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                        float _3084 = _3083 * _3083;
                        float _3085 = _3084 * _3084;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3096 = dot(vec3(_846, _849, _852), vec3(_3065, _3066, _3067));
                        float _4388 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3100 = dot(vec3(_846, _849, _852), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                        float _4399 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                        float _3108 = _3043 * _3084;
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3033) + _3109;
                        float _4410 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3114 = 1.0 - _3084;
                        float _3124 = (0.5 / (((_3113 * ((_3099 * _3114) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3084) * _3099))) * _3113;
                        float _4421 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3135 = (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3107 * _3107) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125))) * _3039;
                        _2892 = (_3054 * _3002.x) + _2960;
                        _2893 = (_3054 * _3002.y) + _2961;
                        _2894 = (_3054 * _3002.z) + _2962;
                        _2889 = (_3135 * _3019.x) + _2957;
                        _2890 = (_3135 * _3019.y) + _2958;
                        _2891 = (_3135 * _3019.z) + _2959;
                        if (_2964 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2964;
                        }
                    }
                    frontier_phi_61_pred = _2889;
                    frontier_phi_61_pred_1 = _2894;
                    frontier_phi_61_pred_2 = _2893;
                    frontier_phi_61_pred_3 = _2892;
                    frontier_phi_61_pred_4 = _2891;
                    frontier_phi_61_pred_5 = _2890;
                }
                _2689 = frontier_phi_61_pred;
                _2699 = frontier_phi_61_pred_1;
                _2697 = frontier_phi_61_pred_2;
                _2695 = frontier_phi_61_pred_3;
                _2693 = frontier_phi_61_pred_4;
                _2691 = frontier_phi_61_pred_5;
                uint _2840 = _2839 + 1u;
                if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2833 = _2689;
                    _2834 = _2691;
                    _2835 = _2693;
                    _2836 = _2695;
                    _2837 = _2697;
                    _2838 = _2699;
                    _2839 = _2840;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((4294967295u << _2705) & _2587) == 0u)
        {
            _2801 = _2688;
            _2803 = _2690;
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
            _2811 = _2698;
        }
        else
        {
            float _2826 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
            float _2827 = _2826 * _2541;
            float _2828 = _2826 * _2542;
            float _2829 = _2826 * _2543;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2940 = _2688;
                float _2941 = _2690;
                float _2942 = _2692;
                float _2943 = _2694;
                float _2944 = _2696;
                float _2945 = _2698;
                uint _2946 = _2705;
                uint _2955;
                bool _2956;
                for (;;)
                {
                    _2955 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                    _2956 = _2955 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2956)
                    {
                        frontier_phi_67_pred = _2943;
                        frontier_phi_67_pred_1 = _2944;
                        frontier_phi_67_pred_2 = _2945;
                        frontier_phi_67_pred_3 = _2942;
                        frontier_phi_67_pred_4 = _2941;
                        frontier_phi_67_pred_5 = _2940;
                    }
                    else
                    {
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        uint _3159 = _2955;
                        uint _3160;
                        vec4 _3185;
                        float _3186;
                        vec4 _3201;
                        vec3 _3213;
                        vec4 _3228;
                        vec4 _3244;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3170 = ((_2946 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3159));
                            _3160 = (_3159 + 4294967295u) & _3159;
                            uint _3172 = _3170 * 40u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3186 = _3185.w;
                            uint _3188 = (_3170 * 40u) + 4u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3170 * 40u) + 8u;
                            _3213 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x));
                            uint _3215 = (_3170 * 40u) + 16u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3231 = (_3170 * 40u) + 20u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3170 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3170 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2543, _3278.z, fma(_2542, _3278.y, _3278.x * _2541)) + _3278.w;
                            _3291 = !((fma(_2543, _3259.z, fma(_2542, _3259.y, _3259.x * _2541)) + _3259.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3185.x - _2541;
                                float _3319 = _3185.y - _2542;
                                float _3320 = _3185.z - _2543;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3186 * _3186));
                                float _4432 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3336 = sqrt(_3321) * _3201.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_846, _849, _852))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2543, _3228.z, fma(_2542, _3228.y, _3228.x * _2541)) + _3228.w) / _3290;
                                float _3350 = (fma(_2543, _3244.z, fma(_2542, _3244.y, _3244.x * _2541)) + _3244.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4448 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _906;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2827;
                                float _3380 = _3326 - _2828;
                                float _3381 = _3327 - _2829;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_846, _849, _852), vec3((-0.0) - _2827, (-0.0) - _2828, (-0.0) - _2829));
                                float _4459 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3393 = dot(vec3(_846, _849, _852), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4470 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_846, _849, _852), vec3(_3325, _3326, _3327))) + _3402;
                                float _4481 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4492 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3430 * _3213.x;
                                frontier_phi_73_pred_1 = _3430 * _3213.y;
                                frontier_phi_73_pred_2 = _3356 * _3201.z;
                                frontier_phi_73_pred_3 = _3356 * _3201.y;
                                frontier_phi_73_pred_4 = _3356 * _3201.x;
                                frontier_phi_73_pred_5 = _3430 * _3213.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_73_pred;
                            _3435 = frontier_phi_73_pred_1;
                            _3439 = frontier_phi_73_pred_2;
                            _3438 = frontier_phi_73_pred_3;
                            _3437 = frontier_phi_73_pred_4;
                            _3436 = frontier_phi_73_pred_5;
                            _3143 = _3437 + _3156;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3140 = _3434 + _3153;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            if (_3160 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3160;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3143;
                        frontier_phi_67_pred_1 = _3144;
                        frontier_phi_67_pred_2 = _3145;
                        frontier_phi_67_pred_3 = _3142;
                        frontier_phi_67_pred_4 = _3141;
                        frontier_phi_67_pred_5 = _3140;
                    }
                    _2808 = frontier_phi_67_pred;
                    _2810 = frontier_phi_67_pred_1;
                    _2812 = frontier_phi_67_pred_2;
                    _2806 = frontier_phi_67_pred_3;
                    _2804 = frontier_phi_67_pred_4;
                    _2802 = frontier_phi_67_pred_5;
                    uint _2947 = _2946 + 1u;
                    if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2940 = _2802;
                        _2941 = _2804;
                        _2942 = _2806;
                        _2943 = _2808;
                        _2944 = _2810;
                        _2945 = _2812;
                        _2946 = _2947;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2810;
                frontier_phi_55_56_ladder_1 = _2812;
                frontier_phi_55_56_ladder_2 = _2808;
                frontier_phi_55_56_ladder_3 = _2806;
                frontier_phi_55_56_ladder_4 = _2804;
                frontier_phi_55_56_ladder_5 = _2802;
            }
            else
            {
                frontier_phi_55_56_ladder = _2696;
                frontier_phi_55_56_ladder_1 = _2698;
                frontier_phi_55_56_ladder_2 = _2694;
                frontier_phi_55_56_ladder_3 = _2692;
                frontier_phi_55_56_ladder_4 = _2690;
                frontier_phi_55_56_ladder_5 = _2688;
            }
            _2801 = frontier_phi_55_56_ladder_5;
            _2803 = frontier_phi_55_56_ladder_4;
            _2805 = frontier_phi_55_56_ladder_3;
            _2807 = frontier_phi_55_56_ladder_2;
            _2809 = frontier_phi_55_56_ladder;
            _2811 = frontier_phi_55_56_ladder_1;
        }
        float _2816 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2600 = (_2816 * _2807) + _2055;
        _2602 = (_2816 * _2809) + _2057;
        _2604 = (_2816 * _2811) + _2059;
        _2606 = ((_2801 * 0.039999999105930328369140625) * _2816) + _2385;
        _2608 = ((_2803 * 0.039999999105930328369140625) * _2816) + _2387;
        _2610 = ((_2805 * 0.039999999105930328369140625) * _2816) + _2389;
    }
    else
    {
        _2600 = _2055;
        _2602 = _2057;
        _2604 = _2059;
        _2606 = _2385;
        _2608 = _2387;
        _2610 = _2389;
    }
    float _4508 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4519 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4530 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    uint _2630 = _247 + 6u;
    float _2638 = _827 / cbSceneParam._m0[86u].x;
    float _2639 = _828 / cbSceneParam._m0[86u].y;
    vec4 _2653 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2655 = _2653.x;
    float _2656 = _2653.y;
    float _2657 = _2653.z;
    float _2658 = _2653.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _2714 = _2713 / _762;
        float _2725 = _2714 * _812;
        float _2726 = _813 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2729 = _2714 * _814;
        float _2731 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2726;
        float _2739 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2902;
        if (abs((_2727 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2902 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2862 = 1.0 / cbSceneParam._m0[80u].x;
            float _2863 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2864 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            _2902 = ((abs(_2739 / _2727) * cbSceneParam._m0[80u].y) * ((((_2873 - _2874) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))))) * _2862)) - ((exp2(_2749 * _2873) - exp2(_2749 * _2874)) * _2862))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2904 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, 1.0), 0.0);
        float _2913 = exp2((_2902 * (-1.44269502162933349609375)) * (1.0 - _2904.w));
        float _2914 = log2(_2913);
        float _2930 = log2(_2658);
        _2751 = (exp2(_2930 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].x)) * _2904.x) / cbSceneParam._m0[78u].x)) + _2655;
        _2753 = (exp2(_2930 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].y)) * _2904.y) / cbSceneParam._m0[78u].y)) + _2656;
        _2755 = (exp2(_2930 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].z)) * _2904.z) / cbSceneParam._m0[78u].z)) + _2657;
        _2757 = _2913 * _2658;
    }
    else
    {
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
        _2757 = _2658;
    }
    float _2769 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2770 = _2769 == 3.0;
    float _2771 = log2(_2757);
    float _2778 = exp2(_2771 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2600 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _890))) + ((_2606 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1695)) * cbPerFrame._m0[3u].x));
    float _2779 = exp2(_2771 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2602 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _890))) + ((_2608 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1695)) * cbPerFrame._m0[3u].x));
    float _2780 = exp2(_2771 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2604 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _890))) + ((_2610 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1695)) * cbPerFrame._m0[3u].x));
    float _2789 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2789 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.y = _2789 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.z = _2789 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.w = cbInstanceData._m0[_2630].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2630].w;
}


