#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _4039;
float _4040;
float _4041;
float _4042;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4051 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4062 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4073 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4084 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _454 = (_447 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _455 = (_447 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _456 = (_447 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _460 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _454;
    float _463 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _455;
    float _466 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _456;
    float _473 = ((_454 - _460) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _460;
    float _474 = ((_455 - _463) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) + _463;
    float _475 = ((_456 - _466) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) + _466;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _447) + _541;
    float _553 = ((((_520.x - _539) * _447) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _447) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _4095 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _592 = (_553 + ((((_493.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_580.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = (_554 + ((((_493.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_580.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _596 = fma(_560, _250, fma(_593, _257, _592 * _243));
    float _599 = fma(_560, _251, fma(_593, _258, _592 * _244));
    float _602 = fma(_560, _252, fma(_593, _259, _592 * _245));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _642 = (cbMtdParam._m0[19u].x + dot(vec4(_606 * _596, _606 * _599, _606 * _602, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_635 - _636) * cbMtdParam._m0[24u].w) + _636) * cbMtdParam._m0[21u].z);
    float _4106 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _645 = (-0.0) - cbMtdParam._m0[24u].x;
    float _647 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
    float _655 = _643 - ((_643 * TEXCOORD_8.x) * _648);
    float _656 = _643 - ((_643 * TEXCOORD_8.y) * _648);
    float _657 = _643 - ((_643 * TEXCOORD_8.z) * _648);
    float _664 = (_655 * (cbMtdParam._m0[17u].x - _473)) + _473;
    float _665 = (_656 * (cbMtdParam._m0[17u].y - _474)) + _474;
    float _666 = (_657 * (cbMtdParam._m0[17u].z - _475)) + _475;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _707 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_680 - _681) * cbMtdParam._m0[24u].y) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4127 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _716 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _708) + _664;
    float _717 = ((((cbMtdParam._m0[10u].y - _665) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _708) + _665;
    float _718 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _708) + _666;
    float _723 = (((_493.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    float _727 = ((_580.z - _723) * cbMtdParam._m0[19u].w) + _723;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _748 = (_741.x * 2.0) + (-1.0);
    float _749 = (_741.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _4138 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _758 = ((_741.z - _727) * _655) + _727;
    float _761 = ((cbMtdParam._m0[23u].y - _758) * _708) + _758;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _786 = (_780.x * 2.0) + (-1.0);
    float _787 = (_780.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4149 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) - _560) * _657) + _560;
    float _806 = (((_748 - _592) * _655) + _592) + (cbMtdParam._m0[21u].x * _592);
    float _807 = (((_749 - _593) * _656) + _593) + (cbMtdParam._m0[21u].x * _593);
    float _818 = (((_786 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _708) + _806;
    float _819 = (((_787 - _807) + (_807 * cbMtdParam._m0[22u].z)) * _708) + _807;
    float _820 = (_708 * (sqrt(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) - _803)) + _803;
    float _822 = cbMtdParam._m0[22u].x + _580.w;
    float _825 = fma(_820, _250, fma(_819, _257, _818 * _243));
    float _828 = fma(_820, _251, fma(_819, _258, _818 * _244));
    float _831 = fma(_820, _252, fma(_819, _259, _818 * _245));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    float _836 = _835 * _825;
    float _837 = _835 * _828;
    float _838 = _835 * _831;
    float _4160 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _839 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4182 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4193 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4204 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _908 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _898);
    float _909 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _898);
    float _910 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _898);
    float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
    float _915 = _908 * _914;
    float _916 = _909 * _914;
    float _917 = _910 * _914;
    vec4 _922 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _924 = _922.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_908 * _908) + (_909 * _909)) + (_910 * _910));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _4215 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _4226 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) - _1085)) + _1085) < ((_924 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_838, cbSceneParam._m0[5u].z, fma(_837, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _836));
    float _957 = fma(_838, cbSceneParam._m0[6u].z, fma(_837, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _836));
    float _960 = fma(_838, cbSceneParam._m0[7u].z, fma(_837, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _836));
    uint _973 = _281 + 9u;
    uint _974 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4237 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    vec4 _994 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _998 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * TEXCOORD_5.w) * _994.x;
    float _999 = dot(vec3(_836, _837, _838), vec3(_915, _916, _917));
    float _1002 = _999 * 2.0;
    float _1006 = (_1002 * _836) - _915;
    float _1007 = (_1002 * _837) - _916;
    float _1008 = (_1002 * _838) - _917;
    float _1012 = abs(dot(vec3(_915, _916, _917), vec3(_836, _837, _838)));
    float _4270 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1014 = sqrt(_839);
    float _1027 = exp2((_1014 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1014 * 3.0));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1125 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1129 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1154 = _1059 + _836;
        float _1155 = _1063 + _837;
        float _1156 = _1067 + _838;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1121;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1125;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1129;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_836, _837, _838), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4318 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_836, _837, _838), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4351 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_836, _837, _838), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4384 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1439 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1443 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1447 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1470 = _1059 + _836;
        float _1471 = _1063 + _837;
        float _1472 = _1067 + _838;
        float _1482 = fma(_1472, cbModelParam._m0[30u].z, fma(_1471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1470)) - _1439;
        float _1483 = fma(_1472, cbModelParam._m0[31u].z, fma(_1471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1470)) - _1443;
        float _1484 = fma(_1472, cbModelParam._m0[32u].z, fma(_1471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1470)) - _1447;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1501 = ((_1488 * _1482) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1439 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1483) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1443 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1488 * _1484) / cbModelParam._m0[35u].z) + ((((((_1447 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        float _1538 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1505.x + (-0.5));
        float _1540 = _1538 * (_1505.y + (-0.5));
        float _1541 = _1538 * (_1505.z + (-0.5));
        float _1548 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1512.x + (-0.5));
        float _1550 = _1548 * (_1512.y + (-0.5));
        float _1551 = _1548 * (_1512.z + (-0.5));
        float _1558 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1519.x + (-0.5));
        float _1560 = _1558 * (_1519.y + (-0.5));
        float _1561 = _1558 * (_1519.z + (-0.5));
        float _1568 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1526.x + (-0.5));
        float _1570 = _1568 * (_1526.y + (-0.5));
        float _1571 = _1568 * (_1526.z + (-0.5));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = _1539 * 0.5;
        float _1576 = _1549 * 0.5;
        float _1577 = _1559 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_836, _837, _838), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4447 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1602 + 1.0))) + _1607) * _1572;
        float _1617 = _1540 * 0.5;
        float _1618 = _1550 * 0.5;
        float _1619 = _1560 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_836, _837, _838), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4480 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1644 + 1.0))) + _1649) * _1573;
        float _1659 = _1541 * 0.5;
        float _1660 = _1551 * 0.5;
        float _1661 = _1561 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_836, _837, _838), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4513 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1686 + 1.0))) + _1691) * _1574;
        _1708 = _1541;
        _1709 = _1540;
        _1710 = _1539;
        _1711 = _1551;
        _1712 = _1550;
        _1713 = _1549;
        _1714 = _1561;
        _1715 = _1560;
        _1716 = _1559;
        _1717 = _1574;
        _1718 = _1573;
        _1719 = _1572;
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
    }
    else
    {
        _1708 = _1397;
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = _1397;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1409)) + _1409;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1410)) + _1410;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1411)) + _1411;
    float _1755 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1732));
    float _1776 = _1006 * 0.5;
    float _1777 = _1007 * 0.5;
    float _1778 = _1008 * 0.5;
    float _1779 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1782 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1785 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1819;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1792 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1796 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1800 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1807 = dot(vec4(cbModelParam._m0[39u]), vec4(_1776, _1777, _1778, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1830;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1821 = dot(vec4(cbModelParam._m0[40u]), vec4(_1776, _1777, _1778, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1834 = (_1830 * cbModelParam._m0[1u].x) + (_1819 * (1.0 - cbModelParam._m0[1u].x));
    float _1844 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _839);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1844 : min(cbModelParam._m0[25u].z, _1844));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1008, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006));
        float _1907 = fma(_1008, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006));
        float _1910 = fma(_1008, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2108;
        if (_1907 > 0.0)
        {
            _2108 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2108 = frontier_phi_26_22_ladder;
        }
        float _2403;
        if (_1910 > 0.0)
        {
            _2403 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2403 = frontier_phi_38_33_ladder;
        }
        float _2405 = isnan(_2108) ? _1938 : (isnan(_1938) ? _2108 : min(_1938, _2108));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1904) + _1893;
        float _2411 = (_2406 * _1907) + _1897;
        float _2412 = (_2406 * _1910) + _1901;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1845);
            frontier_phi_16_38_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1006, _1007, _1008), _1845);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _839);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1008, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006));
        float _2003 = fma(_1008, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006));
        float _2006 = fma(_1008, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006));
        float _2113;
        if (_2000 > 0.0)
        {
            _2113 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2430;
        if (_2003 > 0.0)
        {
            _2430 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2430 = frontier_phi_40_35_ladder;
        }
        float _2757;
        if (_2006 > 0.0)
        {
            _2757 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2757 = frontier_phi_50_47_ladder;
        }
        float _2759 = isnan(_2430) ? _2113 : (isnan(_2113) ? _2430 : min(_2113, _2430));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _2000) + _1989;
        float _2765 = (_2760 * _2003) + _1993;
        float _2766 = (_2760 * _2006) + _1997;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2767;
        float _2770 = _2767 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2766 > _2770) || ((_2766 < _2768) || ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 < _2768) || (_2764 > _2770))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2766, cbModelParam._m0[17u].z, fma(_2765, cbModelParam._m0[17u].y, _2764 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2766, cbModelParam._m0[18u].z, fma(_2765, cbModelParam._m0[18u].y, _2764 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2766, cbModelParam._m0[19u].z, fma(_2765, cbModelParam._m0[19u].y, _2764 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_50_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_25_50_ladder_2;
        _2027 = frontier_phi_25_50_ladder_1;
        _2029 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1006, _1007, _1008), _1935);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2041 = ((((1.0 - _1027) * ((_1014 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1027 * _1014)) * _998;
    float _2042 = _2041 * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2043 = _2041 * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2044 = _2041 * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2100 = _2087 / _2099;
    float _2101 = _2091 / _2099;
    float _2102 = _2095 / _2099;
    float _2249;
    float _2250;
    float _2251;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2129 = ((uint(_2102 > cbSceneParam._m0[59u].y) + uint(_2102 > cbSceneParam._m0[59u].x)) + uint(_2102 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2130 = _2129 + 43u;
        uint _2138 = _2129 + 44u;
        uint _2146 = _2129 + 45u;
        uint _2154 = _2129 + 46u;
        float _2165 = fma(_2099, cbSceneParam._m0[_2130].w, fma(_2095, cbSceneParam._m0[_2130].z, fma(_2091, cbSceneParam._m0[_2130].y, _2087 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2099, cbSceneParam._m0[_2138].w, fma(_2095, cbSceneParam._m0[_2138].z, fma(_2091, cbSceneParam._m0[_2138].y, _2087 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2099, cbSceneParam._m0[_2154].w, fma(_2095, cbSceneParam._m0[_2154].z, fma(_2091, cbSceneParam._m0[_2154].y, _2087 * cbSceneParam._m0[_2154].x)));
        float _2182 = cbSceneParam._m0[33u].z * _2177;
        float _2184 = cbSceneParam._m0[33u].w * _2177;
        float _2187 = fma(_2099, cbSceneParam._m0[_2146].w, fma(_2095, cbSceneParam._m0[_2146].z, fma(_2091, cbSceneParam._m0[_2146].y, _2087 * cbSceneParam._m0[_2146].x))) / _2177;
        float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
        float _4639 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2242 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2165) / _2177, (_2184 + _2169) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2165) / _2177, (_2169 - _2182) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2182) / _2177, (_2169 - _2184) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2184) / _2177, (_2182 + _2169) / _2177), _2187), 0.0)).x), vec4(0.25)));
        _2249 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
        _2250 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
        _2251 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2249 = 1.0;
        _2250 = 1.0;
        _2251 = 1.0;
    }
    float _2315;
    float _2317;
    float _2319;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2303 = fma(_2099, cbSceneParam._m0[63u].w, fma(_2095, cbSceneParam._m0[63u].z, fma(_2091, cbSceneParam._m0[63u].y, _2087 * cbSceneParam._m0[63u].x)));
        float _2304 = fma(_2099, cbSceneParam._m0[60u].w, fma(_2095, cbSceneParam._m0[60u].z, fma(_2091, cbSceneParam._m0[60u].y, _2087 * cbSceneParam._m0[60u].x))) / _2303;
        float _2305 = fma(_2099, cbSceneParam._m0[61u].w, fma(_2095, cbSceneParam._m0[61u].z, fma(_2091, cbSceneParam._m0[61u].y, _2087 * cbSceneParam._m0[61u].x))) / _2303;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2304 >= cbSceneParam._m0[64u].x) && (_2305 >= cbSceneParam._m0[64u].y)) && (_2304 <= cbSceneParam._m0[64u].z)) && (_2305 <= cbSceneParam._m0[64u].w))
        {
            float _2443 = fma(_2099, cbSceneParam._m0[62u].w, fma(_2095, cbSceneParam._m0[62u].z, fma(_2091, cbSceneParam._m0[62u].y, _2087 * cbSceneParam._m0[62u].x))) / _2303;
            float _2447 = isnan(cbSceneParam._m0[41u].w) ? _2443 : (isnan(_2443) ? cbSceneParam._m0[41u].w : max(_2443, cbSceneParam._m0[41u].w));
            float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
            float _4655 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
            float _2497 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2304, cbSceneParam._m0[33u].w + _2305), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2304, _2305 - cbSceneParam._m0[33u].z), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].z, _2305 - cbSceneParam._m0[33u].w), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2305), _2447), 0.0)).x), vec4(0.25)));
            float _2501 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
            float _2502 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
            float _2503 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
            frontier_phi_37_36_ladder_1 = isnan(_2502) ? _2250 : (isnan(_2250) ? _2502 : min(_2250, _2502));
            frontier_phi_37_36_ladder_2 = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
        }
        else
        {
            frontier_phi_37_36_ladder = _2251;
            frontier_phi_37_36_ladder_1 = _2250;
            frontier_phi_37_36_ladder_2 = _2249;
        }
        _2315 = frontier_phi_37_36_ladder_2;
        _2317 = frontier_phi_37_36_ladder_1;
        _2319 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2315 = _2249;
        _2317 = _2250;
        _2319 = _2251;
    }
    uvec4 _2324 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2326 = _2324.x * 14u;
    uint _2327 = _2326 + 13u;
    float _2334 = _998 + (-1.0);
    float _2339 = (cbLight._m0[_2327].x * _2334) + 1.0;
    float _2340 = (cbLight._m0[_2327].y * _2334) + 1.0;
    float _2341 = (cbLight._m0[_2327].z * _2334) + 1.0;
    float _2342 = (cbLight._m0[_2327].w * _2334) + 1.0;
    uint _2343 = _2326 + 5u;
    float _2349 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2353 = _2326 + 4u;
    float _2362 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2366 = _2326 | 1u;
    float _2377 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_836, _837, _838));
    float _2380 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_836, _837, _838));
    float _4691 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _4702 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.3183098733425140380859375;
    float _2387 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * 0.3183098733425140380859375;
    float _2394 = ((cbLight._m0[_2343].x * _2349) * _2387) + (((cbLight._m0[_2353].x * _2315) * _2362) * _2385);
    float _2395 = ((_2349 * cbLight._m0[_2343].y) * _2387) + (((cbLight._m0[_2353].y * _2317) * _2362) * _2385);
    float _2396 = ((_2349 * cbLight._m0[_2343].z) * _2387) + (((cbLight._m0[_2353].z * _2319) * _2362) * _2385);
    uvec4 _2400 = floatBitsToUint(cbLight._m0[_2326 + 12u]);
    bool _2402 = _2400.x == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2402)
    {
        _2504 = _2394;
        _2506 = _2395;
        _2508 = _2396;
    }
    else
    {
        uint _2512 = _2326 + 6u;
        float _2528 = (dot(vec3(cbLight._m0[_2326 + 2u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4713 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2531 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2504 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2394;
        _2506 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2395;
        _2508 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2396;
    }
    bool _2511 = _2400.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2511)
    {
        _2566 = _2504;
        _2568 = _2506;
        _2570 = _2508;
    }
    else
    {
        uint _2728 = _2326 + 7u;
        float _2744 = (dot(vec3(cbLight._m0[_2326 + 3u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4729 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2747 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2566 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2504;
        _2568 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2506;
        _2570 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2508;
    }
    uint _2573 = _2326 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _839) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2326].x + _915;
    float _2589 = cbLight._m0[_2326].y + _916;
    float _2590 = cbLight._m0[_2326].z + _917;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2326].xyz));
    float _4745 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _4756 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _2602 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2603 = dot(vec3(_836, _837, _838), vec3(_2595, _2596, _2597));
    float _4767 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2595, _2596, _2597));
    float _4778 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2627 = 1.0 - _2587;
    float _2638 = (0.5 / (((_2602 * ((_2601 * _2627) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2627) + _2587) * _2601))) * _2601;
    float _4789 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2640 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2654 = _2326 + 9u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _839) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2366].x + _915;
    float _2668 = cbLight._m0[_2366].y + _916;
    float _2669 = cbLight._m0[_2366].z + _917;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2366].xyz));
    float _4800 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2681 = dot(vec3(_836, _837, _838), vec3(_2674, _2675, _2676));
    float _4811 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2674, _2675, _2676));
    float _4822 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2666 * _2666;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2702 = (exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2703 = 1.0 - _2666;
    float _2713 = (0.5 / (((_2602 * ((_2680 * _2703) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2703) + _2666) * _2680))) * _2680;
    float _4833 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    float _2725 = (((_2702 * cbLight._m0[_2654].x) * _2715) * _2349) + ((((cbLight._m0[_2573].x * _2315) * _2626) * _2640) * _2362);
    float _2726 = (((_2702 * cbLight._m0[_2654].y) * _2715) * _2349) + ((((cbLight._m0[_2573].y * _2317) * _2626) * _2640) * _2362);
    float _2727 = (((_2702 * cbLight._m0[_2654].z) * _2715) * _2349) + ((((cbLight._m0[_2573].z * _2319) * _2626) * _2640) * _2362);
    float _2783;
    float _2785;
    float _2787;
    if (_2402)
    {
        _2783 = _2725;
        _2785 = _2726;
        _2787 = _2727;
    }
    else
    {
        uint _2789 = _2326 + 2u;
        uint _2793 = _2326 + 10u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _839) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _915;
        float _2810 = cbLight._m0[_2789].y + _916;
        float _2811 = cbLight._m0[_2789].z + _917;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2789].xyz));
        float _4844 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2823 = dot(vec3(_836, _837, _838), vec3(_2816, _2817, _2818));
        float _4855 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4866 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2844 = (exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2845 = 1.0 - _2808;
        float _2855 = (0.5 / (((_2602 * ((_2822 * _2845) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2845) + _2808) * _2822))) * _2822;
        float _4877 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2783 = (((_2844 * cbLight._m0[_2793].x) * _2857) * _2858) + _2725;
        _2785 = (((_2844 * cbLight._m0[_2793].y) * _2857) * _2858) + _2726;
        _2787 = (((_2844 * cbLight._m0[_2793].z) * _2857) * _2858) + _2727;
    }
    float _2889;
    float _2891;
    float _2893;
    if (_2511)
    {
        _2889 = _2783;
        _2891 = _2785;
        _2893 = _2787;
    }
    else
    {
        uint _2900 = _2326 + 3u;
        uint _2904 = _2326 + 11u;
        float _2918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2900].w)) * _839) * 0.949999988079071044921875);
        float _2919 = _2918 * _2918;
        float _2920 = cbLight._m0[_2900].x + _915;
        float _2921 = cbLight._m0[_2900].y + _916;
        float _2922 = cbLight._m0[_2900].z + _917;
        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
        float _2927 = _2926 * _2920;
        float _2928 = _2926 * _2921;
        float _2929 = _2926 * _2922;
        float _2930 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2900].xyz));
        float _4893 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2934 = dot(vec3(_836, _837, _838), vec3(_2927, _2928, _2929));
        float _4904 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
        float _2938 = dot(vec3(cbLight._m0[_2900].xyz), vec3(_2927, _2928, _2929));
        float _4915 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2942 = _2919 * _2919;
        float _2946 = ((_2937 * _2937) * (_2942 + (-1.0))) + 1.0;
        float _2955 = (exp2(log2(1.0 - (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2956 = 1.0 - _2919;
        float _2966 = (0.5 / (((_2602 * ((_2933 * _2956) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2956) + _2919) * _2933))) * _2933;
        float _4926 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2968 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2942 / ((_2946 * _2946) * 3.141590118408203125));
        float _2969 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2889 = (((_2955 * cbLight._m0[_2904].x) * _2968) * _2969) + _2783;
        _2891 = (((_2955 * cbLight._m0[_2904].y) * _2968) * _2969) + _2785;
        _2893 = (((_2955 * cbLight._m0[_2904].z) * _2968) * _2969) + _2787;
    }
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_2324.y == 0u)
    {
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.x;
        uint _3002 = uint((float(_2990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _2991))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _2991)));
        float _3012 = (log2(_2102 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        uint _3016 = uint(isnan(14.0) ? _3013 : (isnan(_3013) ? 14.0 : min(_3013, 14.0)));
        uvec4 _3021 = texelFetch(g_lightClusterGridBuffer, int(((_3016 << 2u) + (_3002 << 6u)) >> 2u));
        uint _3022 = _3021.x;
        uint _3023 = _2990.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3023 >> 4u) & 15u)) + 4294967295u) & _3022) == 0u) || ((_3023 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            uint _3260 = 0u;
            uint _3269;
            bool _3270;
            for (;;)
            {
                _3269 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                _3270 = _3269 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3270)
                {
                    frontier_phi_71_pred = _3259;
                    frontier_phi_71_pred_1 = _3258;
                    frontier_phi_71_pred_2 = _3257;
                    frontier_phi_71_pred_3 = _3256;
                    frontier_phi_71_pred_4 = _3255;
                    frontier_phi_71_pred_5 = _3254;
                }
                else
                {
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    uint _3405;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3269;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    for (;;)
                    {
                        uint _3409 = uint(findLSB(_3405)) + (_3260 << 5u);
                        uint _3406 = (_3405 + 4294967295u) & _3405;
                        uint _3411 = _3409 * 48u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 3u)).x));
                        uint _3431 = (_3409 * 48u) + 4u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3450 = (_3409 * 48u) + 8u;
                        vec3 _3461 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x));
                        float _3465 = _3425.x - _2100;
                        float _3466 = _3425.y - _2101;
                        float _3467 = _3425.z - _2102;
                        float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                        float _3471 = inversesqrt(_3468);
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3475 = dot(vec3(_954, _957, _960), vec3(_3472, _3473, _3474));
                        float _3480 = 1.0 - (_3468 * _3425.w);
                        float _4952 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3482 = sqrt(_3468) * _3444.w;
                        float _3485 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3475) + _3486;
                        float _3492 = _3482 * _3482;
                        float _3496 = ((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3481) / ((_3492 * 0.699999988079071044921875) + 1.0);
                        float _3500 = (-0.0) - _2100;
                        float _3501 = (-0.0) - _2101;
                        float _3502 = (-0.0) - _2102;
                        float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                        float _3507 = _3506 * _3500;
                        float _3508 = _3506 * _3501;
                        float _3509 = _3506 * _3502;
                        float _3516 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                        float _3517 = 1.0 - _1014;
                        float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                        float _3525 = _3524 * _3524;
                        float _3526 = _3525 * _3525;
                        float _3527 = _3507 + _3472;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3537 = dot(vec3(_954, _957, _960), vec3(_3507, _3508, _3509));
                        float _4968 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3541 = dot(vec3(_954, _957, _960), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                        float _4979 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                        float _3549 = _3485 * _3525;
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3475) + _3550;
                        float _4990 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                        float _3555 = 1.0 - _3525;
                        float _3565 = (0.5 / (((_3554 * ((_3540 * _3555) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3525) * _3540))) * _3554;
                        float _5001 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3576 = (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) / ((_3548 * _3548) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125))) * _3481;
                        _3329 = (_3496 * _3444.x) + _3402;
                        _3330 = (_3496 * _3444.y) + _3403;
                        _3331 = (_3496 * _3444.z) + _3404;
                        _3326 = (_3576 * _3461.x) + _3399;
                        _3327 = (_3576 * _3461.y) + _3400;
                        _3328 = (_3576 * _3461.z) + _3401;
                        if (_3406 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3406;
                        }
                    }
                    frontier_phi_71_pred = _3331;
                    frontier_phi_71_pred_1 = _3330;
                    frontier_phi_71_pred_2 = _3329;
                    frontier_phi_71_pred_3 = _3328;
                    frontier_phi_71_pred_4 = _3327;
                    frontier_phi_71_pred_5 = _3326;
                }
                _3113 = frontier_phi_71_pred;
                _3111 = frontier_phi_71_pred_1;
                _3109 = frontier_phi_71_pred_2;
                _3107 = frontier_phi_71_pred_3;
                _3105 = frontier_phi_71_pred_4;
                _3103 = frontier_phi_71_pred_5;
                uint _3261 = _3260 + 1u;
                if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3254 = _3103;
                    _3255 = _3105;
                    _3256 = _3107;
                    _3257 = _3109;
                    _3258 = _3111;
                    _3259 = _3113;
                    _3260 = _3261;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        if (((4294967295u << _3119) & _3022) == 0u)
        {
            _3222 = _3102;
            _3224 = _3104;
            _3226 = _3106;
            _3228 = _3108;
            _3230 = _3110;
            _3232 = _3112;
        }
        else
        {
            float _3247 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
            float _3248 = _3247 * _2100;
            float _3249 = _3247 * _2101;
            float _3250 = _3247 * _2102;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3382 = _3102;
                float _3383 = _3104;
                float _3384 = _3106;
                float _3385 = _3108;
                float _3386 = _3110;
                float _3387 = _3112;
                uint _3388 = _3119;
                uint _3397;
                bool _3398;
                for (;;)
                {
                    _3397 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                    _3398 = _3397 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3398)
                    {
                        frontier_phi_82_pred = _3387;
                        frontier_phi_82_pred_1 = _3386;
                        frontier_phi_82_pred_2 = _3385;
                        frontier_phi_82_pred_3 = _3384;
                        frontier_phi_82_pred_4 = _3383;
                        frontier_phi_82_pred_5 = _3382;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        uint _3609 = _3397;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3693;
                        float _3739;
                        bool _3740;
                        for (;;)
                        {
                            uint _3620 = ((_3388 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3620 * 40u) + 20u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3620 * 40u) + 24u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3714 = (_3620 * 40u) + 28u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            _3739 = fma(_2102, _3727.z, fma(_2101, _3727.y, _3727.x * _2100)) + _3727.w;
                            _3740 = !((fma(_2102, _3708.z, fma(_2101, _3708.y, _3708.x * _2100)) + _3708.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3740)
                            {
                                float _3767 = _3635.x - _2100;
                                float _3768 = _3635.y - _2101;
                                float _3769 = _3635.z - _2102;
                                float _3770 = dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769));
                                float _3773 = inversesqrt(_3770);
                                float _3774 = _3773 * _3767;
                                float _3775 = _3773 * _3768;
                                float _3776 = _3773 * _3769;
                                float _3780 = 1.0 - (_3770 / (_3636 * _3636));
                                float _5012 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3785 = sqrt(_3770) * _3651.w;
                                float _3787 = 1.39999997615814208984375 / (_3785 + 1.39999997615814208984375);
                                float _3788 = _3787 * _3787;
                                float _3791 = ((1.0 - _3788) * dot(vec3(_3774, _3775, _3776), vec3(_954, _957, _960))) + _3788;
                                float _3794 = _3785 * _3785;
                                float _3798 = (fma(_2102, _3678.z, fma(_2101, _3678.y, _3678.x * _2100)) + _3678.w) / _3739;
                                float _3799 = (fma(_2102, _3693.z, fma(_2101, _3693.y, _3693.x * _2100)) + _3693.w) / _3739;
                                float _3803 = 1.0 - dot(vec2(_3798, _3799), vec2(_3798, _3799));
                                float _5028 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3805 = _3804 * (((isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0))) * _3781) / ((_3794 * 0.699999988079071044921875) + 1.0));
                                float _3817 = exp2(log2(1.0 / ((_3794 * 3.5) + 5.0)) * 0.25);
                                float _3818 = 1.0 - _1014;
                                float _3825 = sqrt(1.0 - ((1.0 - (_3818 * _3818)) * (1.0 - (_3817 * _3817))));
                                float _3826 = _3825 * _3825;
                                float _3827 = _3826 * _3826;
                                float _3828 = _3774 - _3248;
                                float _3829 = _3775 - _3249;
                                float _3830 = _3776 - _3250;
                                float _3834 = inversesqrt(dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830)));
                                float _3838 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3248, (-0.0) - _3249, (-0.0) - _3250));
                                float _5039 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3842 = dot(vec3(_954, _957, _960), vec3(_3834 * _3828, _3834 * _3829, _3834 * _3830));
                                float _5050 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3849 = ((_3845 * _3845) * (_3827 + (-1.0))) + 1.0;
                                float _3850 = _3787 * _3826;
                                float _3851 = _3850 * _3850;
                                float _3857 = ((1.0 - _3851) * dot(vec3(_954, _957, _960), vec3(_3774, _3775, _3776))) + _3851;
                                float _5061 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3859 = 1.0 - _3826;
                                float _3869 = (0.5 / (((_3858 * ((_3841 * _3859) + _3826)) + 9.9999999392252902907785028219223e-09) + (((_3858 * _3859) + _3826) * _3841))) * _3858;
                                float _5072 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3879 = (_3804 * _3781) * (((_3827 * 3.1415927410125732421875) * (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) / ((_3849 * _3849) * ((_3794 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3805 * _3651.z;
                                frontier_phi_88_pred_1 = _3805 * _3651.y;
                                frontier_phi_88_pred_2 = _3805 * _3651.x;
                                frontier_phi_88_pred_3 = _3879 * _3663.z;
                                frontier_phi_88_pred_4 = _3879 * _3663.y;
                                frontier_phi_88_pred_5 = _3879 * _3663.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3888 = frontier_phi_88_pred;
                            _3887 = frontier_phi_88_pred_1;
                            _3886 = frontier_phi_88_pred_2;
                            _3885 = frontier_phi_88_pred_3;
                            _3884 = frontier_phi_88_pred_4;
                            _3883 = frontier_phi_88_pred_5;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3595;
                        frontier_phi_82_pred_1 = _3594;
                        frontier_phi_82_pred_2 = _3593;
                        frontier_phi_82_pred_3 = _3592;
                        frontier_phi_82_pred_4 = _3591;
                        frontier_phi_82_pred_5 = _3590;
                    }
                    _3233 = frontier_phi_82_pred;
                    _3231 = frontier_phi_82_pred_1;
                    _3229 = frontier_phi_82_pred_2;
                    _3227 = frontier_phi_82_pred_3;
                    _3225 = frontier_phi_82_pred_4;
                    _3223 = frontier_phi_82_pred_5;
                    uint _3389 = _3388 + 1u;
                    if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3382 = _3223;
                        _3383 = _3225;
                        _3384 = _3227;
                        _3385 = _3229;
                        _3386 = _3231;
                        _3387 = _3233;
                        _3388 = _3389;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3229;
                frontier_phi_63_64_ladder_1 = _3233;
                frontier_phi_63_64_ladder_2 = _3231;
                frontier_phi_63_64_ladder_3 = _3227;
                frontier_phi_63_64_ladder_4 = _3225;
                frontier_phi_63_64_ladder_5 = _3223;
            }
            else
            {
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            _3222 = frontier_phi_63_64_ladder_5;
            _3224 = frontier_phi_63_64_ladder_4;
            _3226 = frontier_phi_63_64_ladder_3;
            _3228 = frontier_phi_63_64_ladder;
            _3230 = frontier_phi_63_64_ladder_2;
            _3232 = frontier_phi_63_64_ladder_1;
        }
        float _3237 = isnan(1.0) ? _998 : (isnan(_998) ? 1.0 : min(_998, 1.0));
        _3035 = (_3237 * _3228) + _2566;
        _3037 = (_3237 * _3230) + _2568;
        _3039 = (_3237 * _3232) + _2570;
        _3041 = ((_3222 * 0.039999999105930328369140625) * _3237) + _2889;
        _3043 = ((_3224 * 0.039999999105930328369140625) * _3237) + _2891;
        _3045 = ((_3226 * 0.039999999105930328369140625) * _3237) + _2893;
    }
    else
    {
        _3035 = _2566;
        _3037 = _2568;
        _3039 = _2570;
        _3041 = _2889;
        _3043 = _2891;
        _3045 = _2893;
    }
    float _5088 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _5099 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _5110 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _3062 = ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3035 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _998))) + ((_3041 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3037 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _998))) + ((_3043 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _3064 = ((isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0))) * (_3039 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _998))) + ((_3045 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    uint _3065 = _281 + 6u;
    float _3073 = _935 / cbSceneParam._m0[86u].x;
    float _3074 = _936 / cbSceneParam._m0[86u].y;
    vec4 _3088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3090 = _3088.x;
    float _3091 = _3088.y;
    float _3092 = _3088.z;
    float _3093 = _3088.w;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _3128 = _3127 / _857;
        float _3139 = _3128 * _908;
        float _3140 = _909 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3142 = _3128 * _910;
        float _3144 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3145 = _3144 + cbSceneParam._m0[79u].w;
        float _3146 = cbSceneParam._m0[79u].w - _3140;
        float _3152 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3142 * _3142));
        float _3155 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3152;
        float _3160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3339;
        if (abs((_3141 - _3144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3339 = ((((_3145 > 0.0) ? exp2(_3160 * _3145) : (2.0 - exp2(_3162 * _3145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3155;
        }
        else
        {
            float _3283 = 1.0 / cbSceneParam._m0[80u].x;
            float _3284 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : max(_3145, _3146));
            float _3285 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : min(_3145, _3146));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            _3339 = ((abs(_3152 / _3141) * cbSceneParam._m0[80u].y) * ((((_3294 - _3295) * 2.0) - ((exp2(_3160 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0)))) - exp2(_3160 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))))) * _3283)) - ((exp2(_3162 * _3294) - exp2(_3162 * _3295)) * _3283))) + (_3155 * cbSceneParam._m0[80u].z);
        }
        vec4 _3341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, 1.0), 0.0);
        float _3350 = exp2((_3339 * (-1.44269502162933349609375)) * (1.0 - _3341.w));
        float _3351 = log2(_3350);
        float _3367 = log2(_3093);
        _3164 = (exp2(_3367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].x)) * _3341.x) / cbSceneParam._m0[78u].x)) + _3090;
        _3166 = (exp2(_3367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].y)) * _3341.y) / cbSceneParam._m0[78u].y)) + _3091;
        _3168 = (exp2(_3367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].z)) * _3341.z) / cbSceneParam._m0[78u].z)) + _3092;
        _3170 = _3350 * _3093;
    }
    else
    {
        _3164 = _3090;
        _3166 = _3091;
        _3168 = _3092;
        _3170 = _3093;
    }
    bool _3377;
    vec4 _3180;
    vec4 _3202;
    float _3204;
    float _3208;
    float _3209;
    float _3210;
    float _3211;
    bool _3221;
    for (;;)
    {
        _3180 = cbMatDynParam._m0[0u];
        float _3182 = roundEven(_3180.y);
        bool _3183 = _3182 == 3.0;
        float _3184 = log2(_3170);
        float _3191 = exp2(_3184 * cbSceneParam._m0[78u].x) * _3062;
        float _3192 = exp2(_3184 * cbSceneParam._m0[78u].y) * _3063;
        float _3193 = exp2(_3184 * cbSceneParam._m0[78u].z) * _3064;
        float _3200 = _924 + (-0.5);
        _3202 = cbMtdParam._m0[1u];
        _3204 = _3202.y * _3200;
        float _3207 = (_3182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3208 = _3207 * (_3183 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3164)));
        _3209 = _3207 * (_3183 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3166)));
        _3210 = _3207 * (_3183 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3168)));
        _3211 = _3200 * 0.999000012874603271484375;
        _3221 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3221)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3211) < 0.5)
            {
                _3377 = true;
                break;
            }
        }
        uint _3318 = _973 + uint(_3180.w);
        if ((cbInstanceData._m0[_3318].w < 1.0) && ((cbInstanceData._m0[_3318].w + _3211) < 0.5))
        {
            _3377 = true;
            break;
        }
        if ((_3204 + 1.0) < _3202.x)
        {
            _3377 = true;
            break;
        }
        _3377 = false;
        break;
    }
    float _3581;
    if (_3377)
    {
        discard_state = true;
        _3581 = 0.0;
    }
    else
    {
        _3581 = cbInstanceData._m0[_3065].w;
    }
    SV_Target.x = _3208;
    SV_Target.y = _3209;
    SV_Target.z = _3210;
    SV_Target.w = _3581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3065].w;
    discard_exit();
}


