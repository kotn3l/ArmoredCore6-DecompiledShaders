#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1112;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3444 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3455 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3466 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _320 = _315.x * cbMtdParam._m0[11u].x;
    float _321 = _315.y * cbMtdParam._m0[11u].y;
    float _322 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[24u].z) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3477 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _431 = (_424 * ((_341.x * cbMtdParam._m0[12u].x) - _320)) + _320;
    float _432 = (_424 * ((_341.y * cbMtdParam._m0[12u].y) - _321)) + _321;
    float _433 = (_424 * ((_341.z * cbMtdParam._m0[12u].z) - _322)) + _322;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) + _443;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _277) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _278) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _520 = ((_490.z - _511) * _424) + _511;
    float _523 = ((((_490.x - _509) * _424) + _509) * 2.0) + (-1.0);
    float _524 = ((((_490.y - _510) * _424) + _510) * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3488 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _564 = (_523 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_465.x * 2.0) + (-1.0)))) + (((_552.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _565 = (_524 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_465.y * 2.0) + (-1.0)))) + (((_552.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _570 = (((_465.z - _520) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _520;
    float _574 = ((_552.z - _570) * cbMtdParam._m0[19u].w) + _570;
    float _576 = cbMtdParam._m0[22u].x + _552.w;
    float _579 = fma(_530, _224 * NORMAL.x, fma(_565, _231 * TANGENT.x, (_217 * _209) * _564));
    float _582 = fma(_530, _224 * NORMAL.y, fma(_565, _231 * TANGENT.y, (_217 * _210) * _564));
    float _585 = fma(_530, _224 * NORMAL.z, fma(_565, _231 * TANGENT.z, (_217 * _211) * _564));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3499 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _593 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3521 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3532 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3543 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _663 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _653);
    float _664 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _653);
    float _665 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _653);
    float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
    float _670 = _663 * _669;
    float _671 = _664 * _669;
    float _672 = _665 * _669;
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _700 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _703 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _717 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3554 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _741 = ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * TEXCOORD_5.w) * _737.x;
    float _742 = dot(vec3(_590, _591, _592), vec3(_670, _671, _672));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _590) - _670;
    float _750 = (_745 * _591) - _671;
    float _751 = (_745 * _592) - _672;
    float _755 = abs(dot(vec3(_670, _671, _672), vec3(_590, _591, _592)));
    float _3587 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_593);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = fma(_810, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802));
        float _840 = fma(_810, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802));
        float _844 = fma(_810, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802));
        float _869 = _802 + _590;
        float _870 = _806 + _591;
        float _871 = _810 + _592;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _836;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _840;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _844;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_836 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_840 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_844 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_590, _591, _592), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3635 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_590, _591, _592), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3668 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_590, _591, _592), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3701 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1113 = _941;
        _1114 = _940;
        _1115 = _952;
        _1116 = _951;
        _1117 = _950;
        _1118 = _962;
        _1119 = _961;
        _1120 = _960;
        _1121 = _975;
        _1122 = _974;
        _1123 = _973;
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _1112;
        _1113 = _1112;
        _1114 = _1112;
        _1115 = _1112;
        _1116 = _1112;
        _1117 = _1112;
        _1118 = _1112;
        _1119 = _1112;
        _1120 = _1112;
        _1121 = _1112;
        _1122 = _1112;
        _1123 = _1112;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1151 = fma(_810, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802));
        float _1155 = fma(_810, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802));
        float _1159 = fma(_810, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802));
        float _1182 = _802 + _590;
        float _1183 = _806 + _591;
        float _1184 = _810 + _592;
        float _1194 = fma(_1184, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182)) - _1151;
        float _1195 = fma(_1184, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182)) - _1155;
        float _1196 = fma(_1184, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182)) - _1159;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1151 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1155 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[35u].z) + ((((((_1159 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1250 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1217.x + (-0.5));
        float _1252 = _1250 * (_1217.y + (-0.5));
        float _1253 = _1250 * (_1217.z + (-0.5));
        float _1260 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1224.x + (-0.5));
        float _1262 = _1260 * (_1224.y + (-0.5));
        float _1263 = _1260 * (_1224.z + (-0.5));
        float _1270 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1231.x + (-0.5));
        float _1272 = _1270 * (_1231.y + (-0.5));
        float _1273 = _1270 * (_1231.z + (-0.5));
        float _1280 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1238.x + (-0.5));
        float _1282 = _1280 * (_1238.y + (-0.5));
        float _1283 = _1280 * (_1238.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_590, _591, _592), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3764 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1314 + 1.0))) + _1319) * _1284;
        float _1329 = _1252 * 0.5;
        float _1330 = _1262 * 0.5;
        float _1331 = _1272 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_590, _591, _592), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3797 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1356 + 1.0))) + _1361) * _1285;
        float _1371 = _1253 * 0.5;
        float _1372 = _1263 * 0.5;
        float _1373 = _1273 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_590, _591, _592), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3830 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1398 + 1.0))) + _1403) * _1286;
        _1420 = _1253;
        _1421 = _1252;
        _1422 = _1251;
        _1423 = _1263;
        _1424 = _1262;
        _1425 = _1261;
        _1426 = _1273;
        _1427 = _1272;
        _1428 = _1271;
        _1429 = _1286;
        _1430 = _1285;
        _1431 = _1284;
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1112;
        _1421 = _1112;
        _1422 = _1112;
        _1423 = _1112;
        _1424 = _1112;
        _1425 = _1112;
        _1426 = _1112;
        _1427 = _1112;
        _1428 = _1112;
        _1429 = _1112;
        _1430 = _1112;
        _1431 = _1112;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1467 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1444));
    float _1488 = _749 * 0.5;
    float _1489 = _750 * 0.5;
    float _1490 = _751 * 0.5;
    float _1491 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1494 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1497 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1531;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1504 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1111, _1115, _1118, _1121));
        float _1508 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1512 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1519 = dot(vec4(cbModelParam._m0[39u]), vec4(_1488, _1489, _1490, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1542;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1533 = dot(vec4(cbModelParam._m0[40u]), vec4(_1488, _1489, _1490, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1546 = (_1542 * cbModelParam._m0[1u].x) + (_1531 * (1.0 - cbModelParam._m0[1u].x));
    float _1556 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1556 : min(cbModelParam._m0[25u].z, _1556));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_810, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_810, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_810, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1620 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1623 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1874;
        if (_1620 > 0.0)
        {
            _1874 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1874 = frontier_phi_23_19_ladder;
        }
        float _2120;
        if (_1623 > 0.0)
        {
            _2120 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2120 = frontier_phi_35_30_ladder;
        }
        float _2122 = isnan(_1874) ? _1651 : (isnan(_1651) ? _1874 : min(_1651, _1874));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1617) + _1606;
        float _2128 = (_2123 * _1620) + _1610;
        float _2129 = (_2123 * _1623) + _1614;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1557);
            frontier_phi_13_35_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1557);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_810, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_810, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_810, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1717 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1720 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1879;
        if (_1714 > 0.0)
        {
            _1879 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1879 = frontier_phi_25_21_ladder;
        }
        float _2147;
        if (_1717 > 0.0)
        {
            _2147 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2147 = frontier_phi_37_32_ladder;
        }
        float _2352;
        if (_1720 > 0.0)
        {
            _2352 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2352 = frontier_phi_46_43_ladder;
        }
        float _2354 = isnan(_2147) ? _1879 : (isnan(_1879) ? _2147 : min(_1879, _2147));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1714) + _1703;
        float _2360 = (_2355 * _1717) + _1707;
        float _2361 = (_2355 * _1720) + _1711;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2362;
        float _2365 = _2362 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2361 > _2365) || ((_2361 < _2363) || ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 < _2363) || (_2359 > _2365))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2361, cbModelParam._m0[17u].z, fma(_2360, cbModelParam._m0[17u].y, _2359 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2361, cbModelParam._m0[18u].z, fma(_2360, cbModelParam._m0[18u].y, _2359 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2361, cbModelParam._m0[19u].z, fma(_2360, cbModelParam._m0[19u].y, _2359 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_46_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_22_46_ladder_2;
        _1741 = frontier_phi_22_46_ladder_1;
        _1743 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1648);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1755 = ((((1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_770 * _757)) * _741;
    float _1756 = _1755 * ((cbModelParam._m0[1u].w * (_1739 - _1639)) + _1639);
    float _1757 = _1755 * ((cbModelParam._m0[1u].w * (_1741 - _1641)) + _1641);
    float _1758 = _1755 * ((cbModelParam._m0[1u].w * (_1743 - _1643)) + _1643);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    vec4 _1775 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_678, _679));
    float _1777 = _1775.w;
    float _1789 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1777);
    float _1790 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1777);
    float _1791 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1777);
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _741 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1833 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1837 = _1797 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_590, _591, _592));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_590, _591, _592));
    float _3966 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _3977 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1814].x * _1820) * _1858) + (((cbLight._m0[_1824].x * _1789) * _1833) * _1856);
    float _1866 = ((_1820 * cbLight._m0[_1814].y) * _1858) + (((cbLight._m0[_1824].y * _1790) * _1833) * _1856);
    float _1867 = ((_1820 * cbLight._m0[_1814].z) * _1858) + (((cbLight._m0[_1824].z * _1791) * _1833) * _1856);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1873)
    {
        _1884 = _1865;
        _1886 = _1866;
        _1888 = _1867;
    }
    else
    {
        uint _1892 = _1797 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3988 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1911 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1865;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1866;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1867;
    }
    bool _1891 = _1871.y == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1891)
    {
        _1929 = _1884;
        _1931 = _1886;
        _1933 = _1888;
    }
    else
    {
        uint _2091 = _1797 + 7u;
        float _2107 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4004 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2110 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1929 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1884;
        _1931 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1886;
        _1933 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1888;
    }
    uint _1936 = _1797 + 8u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _593) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1797].x + _670;
    float _1952 = cbLight._m0[_1797].y + _671;
    float _1953 = cbLight._m0[_1797].z + _672;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1797].xyz));
    float _4020 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1965 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1966 = dot(vec3(_590, _591, _592), vec3(_1958, _1959, _1960));
    float _4042 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1958, _1959, _1960));
    float _4053 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1950 * _1950;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1965 * ((_1964 * _1990) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _1990) + _1950) * _1964))) * _1964;
    float _4064 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    uint _2017 = _1797 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _593) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1837].x + _670;
    float _2031 = cbLight._m0[_1837].y + _671;
    float _2032 = cbLight._m0[_1837].z + _672;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1837].xyz));
    float _4075 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2044 = dot(vec3(_590, _591, _592), vec3(_2037, _2038, _2039));
    float _4086 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2037, _2038, _2039));
    float _4097 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2065 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2066 = 1.0 - _2029;
    float _2076 = (0.5 / (((_1965 * ((_2043 * _2066) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2066) + _2029) * _2043))) * _2043;
    float _4108 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2088 = (((_2065 * cbLight._m0[_2017].x) * _2078) * _1820) + ((((cbLight._m0[_1936].x * _1789) * _1989) * _2003) * _1833);
    float _2089 = (((_2065 * cbLight._m0[_2017].y) * _2078) * _1820) + ((((cbLight._m0[_1936].y * _1790) * _1989) * _2003) * _1833);
    float _2090 = (((_2065 * cbLight._m0[_2017].z) * _2078) * _1820) + ((((cbLight._m0[_1936].z * _1791) * _1989) * _2003) * _1833);
    float _2152;
    float _2154;
    float _2156;
    if (_1873)
    {
        _2152 = _2088;
        _2154 = _2089;
        _2156 = _2090;
    }
    else
    {
        uint _2158 = _1797 + 2u;
        uint _2162 = _1797 + 10u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _593) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _670;
        float _2179 = cbLight._m0[_2158].y + _671;
        float _2180 = cbLight._m0[_2158].z + _672;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2158].xyz));
        float _4119 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2192 = dot(vec3(_590, _591, _592), vec3(_2185, _2186, _2187));
        float _4130 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4141 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2213 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2214 = 1.0 - _2177;
        float _2224 = (0.5 / (((_1965 * ((_2191 * _2214) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2214) + _2177) * _2191))) * _2191;
        float _4152 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2152 = (((_2213 * cbLight._m0[_2162].x) * _2226) * _2227) + _2088;
        _2154 = (((_2213 * cbLight._m0[_2162].y) * _2226) * _2227) + _2089;
        _2156 = (((_2213 * cbLight._m0[_2162].z) * _2226) * _2227) + _2090;
    }
    float _2262;
    float _2264;
    float _2266;
    if (_1891)
    {
        _2262 = _2152;
        _2264 = _2154;
        _2266 = _2156;
    }
    else
    {
        uint _2273 = _1797 + 3u;
        uint _2277 = _1797 + 11u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _593) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _670;
        float _2294 = cbLight._m0[_2273].y + _671;
        float _2295 = cbLight._m0[_2273].z + _672;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2273].xyz));
        float _4168 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2307 = dot(vec3(_590, _591, _592), vec3(_2300, _2301, _2302));
        float _4179 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4190 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2329 = 1.0 - _2292;
        float _2339 = (0.5 / (((_1965 * ((_2306 * _2329) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2329) + _2292) * _2306))) * _2306;
        float _4201 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2262 = (((_2328 * cbLight._m0[_2277].x) * _2341) * _2342) + _2152;
        _2264 = (((_2328 * cbLight._m0[_2277].y) * _2341) * _2342) + _2154;
        _2266 = (((_2328 * cbLight._m0[_2277].z) * _2341) * _2342) + _2156;
    }
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_1795.y == 0u)
    {
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2417;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2417;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2417;
        uvec4 _2432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2433 = _2432.x;
        uint _2444 = uint((float(_2432.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2433))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2433)));
        float _2454 = (log2(_2420 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2455 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        uint _2458 = uint(isnan(14.0) ? _2455 : (isnan(_2455) ? 14.0 : min(_2455, 14.0)));
        uvec4 _2463 = texelFetch(g_lightClusterGridBuffer, int(((_2458 << 2u) + (_2444 << 6u)) >> 2u));
        uint _2464 = _2463.x;
        uint _2465 = _2432.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2465 >> 4u) & 15u)) + 4294967295u) & _2464) == 0u) || ((_2465 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            uint _2716 = 0u;
            uint _2725;
            bool _2726;
            for (;;)
            {
                _2725 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                _2726 = _2725 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2726)
                {
                    frontier_phi_61_pred = _2710;
                    frontier_phi_61_pred_1 = _2715;
                    frontier_phi_61_pred_2 = _2714;
                    frontier_phi_61_pred_3 = _2713;
                    frontier_phi_61_pred_4 = _2712;
                    frontier_phi_61_pred_5 = _2711;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2725;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2716 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2418;
                        float _2901 = _2860.y - _2419;
                        float _2902 = _2860.z - _2420;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_697, _700, _703), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4227 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2418;
                        float _2936 = (-0.0) - _2419;
                        float _2937 = (-0.0) - _2420;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2952 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _757;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_697, _700, _703), vec3(_2942, _2943, _2944));
                        float _4243 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2977 = dot(vec3(_697, _700, _703), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4254 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2920 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2910) + _2986;
                        float _4265 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4276 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_2984 * _2984) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2769 = (_2931 * _2879.x) + _2837;
                        _2770 = (_2931 * _2879.y) + _2838;
                        _2771 = (_2931 * _2879.z) + _2839;
                        _2766 = (_3012 * _2896.x) + _2834;
                        _2767 = (_3012 * _2896.y) + _2835;
                        _2768 = (_3012 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_61_pred = _2766;
                    frontier_phi_61_pred_1 = _2771;
                    frontier_phi_61_pred_2 = _2770;
                    frontier_phi_61_pred_3 = _2769;
                    frontier_phi_61_pred_4 = _2768;
                    frontier_phi_61_pred_5 = _2767;
                }
                _2566 = frontier_phi_61_pred;
                _2576 = frontier_phi_61_pred_1;
                _2574 = frontier_phi_61_pred_2;
                _2572 = frontier_phi_61_pred_3;
                _2570 = frontier_phi_61_pred_4;
                _2568 = frontier_phi_61_pred_5;
                uint _2717 = _2716 + 1u;
                if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2710 = _2566;
                    _2711 = _2568;
                    _2712 = _2570;
                    _2713 = _2572;
                    _2714 = _2574;
                    _2715 = _2576;
                    _2716 = _2717;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((4294967295u << _2582) & _2464) == 0u)
        {
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
        }
        else
        {
            float _2703 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
            float _2704 = _2703 * _2418;
            float _2705 = _2703 * _2419;
            float _2706 = _2703 * _2420;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2817 = _2565;
                float _2818 = _2567;
                float _2819 = _2569;
                float _2820 = _2571;
                float _2821 = _2573;
                float _2822 = _2575;
                uint _2823 = _2582;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2833)
                    {
                        frontier_phi_67_pred = _2820;
                        frontier_phi_67_pred_1 = _2821;
                        frontier_phi_67_pred_2 = _2822;
                        frontier_phi_67_pred_3 = _2819;
                        frontier_phi_67_pred_4 = _2818;
                        frontier_phi_67_pred_5 = _2817;
                    }
                    else
                    {
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        uint _3036 = _2832;
                        uint _3037;
                        vec4 _3062;
                        float _3063;
                        vec4 _3078;
                        vec3 _3090;
                        vec4 _3105;
                        vec4 _3120;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3047 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3036));
                            _3037 = (_3036 + 4294967295u) & _3036;
                            uint _3049 = _3047 * 40u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3063 = _3062.w;
                            uint _3065 = (_3047 * 40u) + 4u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3047 * 40u) + 8u;
                            _3090 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x));
                            uint _3092 = (_3047 * 40u) + 16u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3047 * 40u) + 20u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3047 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3047 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_2420, _3154.z, fma(_2419, _3154.y, _3154.x * _2418)) + _3154.w;
                            _3167 = !((fma(_2420, _3135.z, fma(_2419, _3135.y, _3135.x * _2418)) + _3135.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3062.x - _2418;
                                float _3195 = _3062.y - _2419;
                                float _3196 = _3062.z - _2420;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3063 * _3063));
                                float _4287 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3212 = sqrt(_3197) * _3078.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_697, _700, _703))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_2420, _3105.z, fma(_2419, _3105.y, _3105.x * _2418)) + _3105.w) / _3166;
                                float _3226 = (fma(_2420, _3120.z, fma(_2419, _3120.y, _3120.x * _2418)) + _3120.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4303 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _757;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2704;
                                float _3256 = _3202 - _2705;
                                float _3257 = _3203 - _2706;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_697, _700, _703), vec3((-0.0) - _2704, (-0.0) - _2705, (-0.0) - _2706));
                                float _4314 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3269 = dot(vec3(_697, _700, _703), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4325 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_697, _700, _703), vec3(_3201, _3202, _3203))) + _3278;
                                float _4336 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4347 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3306 * _3090.x;
                                frontier_phi_73_pred_1 = _3306 * _3090.y;
                                frontier_phi_73_pred_2 = _3232 * _3078.z;
                                frontier_phi_73_pred_3 = _3232 * _3078.y;
                                frontier_phi_73_pred_4 = _3232 * _3078.x;
                                frontier_phi_73_pred_5 = _3306 * _3090.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_73_pred;
                            _3311 = frontier_phi_73_pred_1;
                            _3315 = frontier_phi_73_pred_2;
                            _3314 = frontier_phi_73_pred_3;
                            _3313 = frontier_phi_73_pred_4;
                            _3312 = frontier_phi_73_pred_5;
                            _3020 = _3313 + _3033;
                            _3021 = _3314 + _3034;
                            _3022 = _3315 + _3035;
                            _3017 = _3310 + _3030;
                            _3018 = _3311 + _3031;
                            _3019 = _3312 + _3032;
                            if (_3037 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3037;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3020;
                        frontier_phi_67_pred_1 = _3021;
                        frontier_phi_67_pred_2 = _3022;
                        frontier_phi_67_pred_3 = _3019;
                        frontier_phi_67_pred_4 = _3018;
                        frontier_phi_67_pred_5 = _3017;
                    }
                    _2685 = frontier_phi_67_pred;
                    _2687 = frontier_phi_67_pred_1;
                    _2689 = frontier_phi_67_pred_2;
                    _2683 = frontier_phi_67_pred_3;
                    _2681 = frontier_phi_67_pred_4;
                    _2679 = frontier_phi_67_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2679;
                        _2818 = _2681;
                        _2819 = _2683;
                        _2820 = _2685;
                        _2821 = _2687;
                        _2822 = _2689;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2687;
                frontier_phi_55_56_ladder_1 = _2689;
                frontier_phi_55_56_ladder_2 = _2685;
                frontier_phi_55_56_ladder_3 = _2683;
                frontier_phi_55_56_ladder_4 = _2681;
                frontier_phi_55_56_ladder_5 = _2679;
            }
            else
            {
                frontier_phi_55_56_ladder = _2573;
                frontier_phi_55_56_ladder_1 = _2575;
                frontier_phi_55_56_ladder_2 = _2571;
                frontier_phi_55_56_ladder_3 = _2569;
                frontier_phi_55_56_ladder_4 = _2567;
                frontier_phi_55_56_ladder_5 = _2565;
            }
            _2678 = frontier_phi_55_56_ladder_5;
            _2680 = frontier_phi_55_56_ladder_4;
            _2682 = frontier_phi_55_56_ladder_3;
            _2684 = frontier_phi_55_56_ladder_2;
            _2686 = frontier_phi_55_56_ladder;
            _2688 = frontier_phi_55_56_ladder_1;
        }
        float _2693 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2477 = (_2693 * _2684) + _1929;
        _2479 = (_2693 * _2686) + _1931;
        _2481 = (_2693 * _2688) + _1933;
        _2483 = ((_2678 * 0.039999999105930328369140625) * _2693) + _2262;
        _2485 = ((_2680 * 0.039999999105930328369140625) * _2693) + _2264;
        _2487 = ((_2682 * 0.039999999105930328369140625) * _2693) + _2266;
    }
    else
    {
        _2477 = _1929;
        _2479 = _1931;
        _2481 = _1933;
        _2483 = _2262;
        _2485 = _2264;
        _2487 = _2266;
    }
    float _4363 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4374 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4385 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    uint _2507 = _258 + 6u;
    float _2515 = _678 / cbSceneParam._m0[86u].x;
    float _2516 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2591 = _2590 / _611;
        float _2602 = _2591 * _663;
        float _2603 = _664 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _665;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2739 = 1.0 / cbSceneParam._m0[80u].x;
            float _2740 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2741 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            _2779 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2750 - _2751) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))))) * _2739)) - ((exp2(_2626 * _2750) - exp2(_2626 * _2751)) * _2739))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2535);
        _2628 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2630 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2632 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2634 = _2790 * _2535;
    }
    else
    {
        _2628 = _2532;
        _2630 = _2533;
        _2632 = _2534;
        _2634 = _2535;
    }
    float _2646 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2647 = _2646 == 3.0;
    float _2648 = log2(_2634);
    float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2477 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _741))) + ((_2483 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1546)) * cbPerFrame._m0[3u].x));
    float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2479 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _741))) + ((_2485 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1546)) * cbPerFrame._m0[3u].x));
    float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2481 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _741))) + ((_2487 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1546)) * cbPerFrame._m0[3u].x));
    float _2666 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2666 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.y = _2666 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.z = _2666 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.w = cbInstanceData._m0[_2507].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2507].w;
}


