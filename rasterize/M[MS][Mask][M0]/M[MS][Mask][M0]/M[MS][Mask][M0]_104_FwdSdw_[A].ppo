#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1396;
float _4038;
float _4039;
float _4040;
float _4041;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4050 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4061 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4072 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4083 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _482 = (_475 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _483 = (_475 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _484 = (_475 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4094 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _555 = (_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482;
    float _556 = (_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483;
    float _557 = (_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _594 = _592.x;
    float _604 = dot(vec4(_594, _592.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _616 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_594 - _604) * cbMtdParam._m0[24u].z) + _604) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4105 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _627 = (_334.x * cbMtdParam._m0[9u].x) * ((_617 * ((_575.x * cbMtdParam._m0[14u].x) - _555)) + _555);
    float _628 = (_334.y * cbMtdParam._m0[9u].y) * ((_617 * ((_575.y * cbMtdParam._m0[14u].y) - _556)) + _556);
    float _629 = (_334.z * cbMtdParam._m0[9u].z) * ((_617 * ((_575.z * cbMtdParam._m0[14u].z) - _557)) + _557);
    float _633 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _627;
    float _636 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _628;
    float _639 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _629;
    float _647 = (((_627 - _633) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) + _633) * 4.55000019073486328125;
    float _649 = (((_628 - _636) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _636) * 4.55000019073486328125;
    float _651 = (((_629 - _639) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _639) * 4.55000019073486328125;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    float _714 = ((_686.x - _705) * _475) + _705;
    float _715 = ((_686.y - _706) * _475) + _706;
    float _716 = ((_686.z - _707) * _475) + _707;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _739 = ((_728.x - _714) * _548) + _714;
    float _740 = ((_728.y - _715) * _548) + _715;
    float _741 = ((_728.z - _716) * _548) + _716;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _766 = ((_753.z - _741) * _617) + _741;
    float _769 = ((((_753.x - _739) * _617) + _739) * 2.0) + (-1.0);
    float _770 = ((((_753.y - _740) * _617) + _740) * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4116 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))));
    vec4 _796 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _808 = (_769 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_663.x * 2.0) + (-1.0)))) + (((_796.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = (_770 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_663.y * 2.0) + (-1.0)))) + (((_796.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _814 = (((_663.z - _766) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _766;
    float _818 = ((_796.z - _814) * cbMtdParam._m0[19u].w) + _814;
    float _820 = cbMtdParam._m0[22u].x + _796.w;
    float _823 = fma(_776, _244 * NORMAL.x, fma(_809, _251 * TANGENT.x, (_237 * _229) * _808));
    float _826 = fma(_776, _244 * NORMAL.y, fma(_809, _251 * TANGENT.y, (_237 * _230) * _808));
    float _829 = fma(_776, _244 * NORMAL.z, fma(_809, _251 * TANGENT.z, (_237 * _231) * _808));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    float _834 = _833 * _823;
    float _835 = _833 * _826;
    float _836 = _833 * _829;
    float _4127 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _837 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4149 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4160 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4171 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    vec4 _920 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _922 = _920.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1076 = sqrt(((_906 * _906) + (_907 * _907)) + (_908 * _908));
        float _1082 = (cbMatDynParam._m0[5u].x * _1076) + cbMatDynParam._m0[5u].y;
        float _4182 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1087 = (cbMatDynParam._m0[5u].z * _1076) + cbMatDynParam._m0[5u].w;
        float _4193 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) - _1083)) + _1083) < ((_922 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _834));
    float _955 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _834));
    float _958 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _834));
    uint _971 = _278 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_972].z;
    float _4204 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _996 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_834, _835, _836), vec3(_913, _914, _915));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _834) - _913;
    float _1005 = (_1000 * _835) - _914;
    float _1006 = (_1000 * _836) - _915;
    float _1010 = abs(dot(vec3(_913, _914, _915), vec3(_834, _835, _836)));
    float _4237 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_837);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1124 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1128 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1153 = _1057 + _834;
        float _1154 = _1061 + _835;
        float _1155 = _1065 + _836;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1120;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1124;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1128;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_834, _835, _836), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4285 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_834, _835, _836), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4318 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_834, _835, _836), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4351 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1440 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1444 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1467 = _1057 + _834;
        float _1468 = _1061 + _835;
        float _1469 = _1065 + _836;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_834, _835, _836), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4414 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_834, _835, _836), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4447 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_834, _835, _836), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4480 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1396;
        _1706 = _1396;
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = _1396;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1409)) + _1409;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1410)) + _1410;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _1004 * 0.5;
    float _1774 = _1005 * 0.5;
    float _1775 = _1006 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _837);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1890 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1894 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1898 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1901 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1904 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1907 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1935;
        if (_1901 > 0.0)
        {
            _1935 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1935 = frontier_phi_17_15_ladder;
        }
        float _2106;
        if (_1904 > 0.0)
        {
            _2106 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2106 = frontier_phi_26_22_ladder;
        }
        float _2401;
        if (_1907 > 0.0)
        {
            _2401 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2401 = frontier_phi_38_33_ladder;
        }
        float _2403 = isnan(_2106) ? _1935 : (isnan(_1935) ? _2106 : min(_1935, _2106));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1901) + _1890;
        float _2409 = (_2404 * _1904) + _1894;
        float _2410 = (_2404 * _1907) + _1898;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2411;
        float _2415 = _2411 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 > _2415) || ((_2409 < _2413) || ((_2408 < _2413) || (_2408 > _2415))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_16_38_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1923 = frontier_phi_16_38_ladder_2;
        _1925 = frontier_phi_16_38_ladder_1;
        _1927 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1842);
        _1923 = _1911.x * cbModelParam._m0[1u].y;
        _1925 = _1911.y * cbModelParam._m0[1u].y;
        _1927 = _1911.z * cbModelParam._m0[1u].y;
    }
    float _1931 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _837);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1931 : min(cbModelParam._m0[25u].w, _1931));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _2001 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _2004 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2111;
        if (_1998 > 0.0)
        {
            _2111 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2111 = frontier_phi_28_24_ladder;
        }
        float _2428;
        if (_2001 > 0.0)
        {
            _2428 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2428 = frontier_phi_40_35_ladder;
        }
        float _2755;
        if (_2004 > 0.0)
        {
            _2755 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2755 = frontier_phi_50_47_ladder;
        }
        float _2757 = isnan(_2428) ? _2111 : (isnan(_2111) ? _2428 : min(_2111, _2428));
        float _2758 = isnan(_2755) ? _2757 : (isnan(_2757) ? _2755 : min(_2757, _2755));
        float _2762 = (_2758 * _1998) + _1987;
        float _2763 = (_2758 * _2001) + _1991;
        float _2764 = (_2758 * _2004) + _1995;
        float _2765 = _2758 * 9.9999997473787516355514526367188e-05;
        float _2766 = (-1.0) - _2765;
        float _2768 = _2765 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2764 > _2768) || ((_2764 < _2766) || ((_2763 > _2768) || ((_2763 < _2766) || ((_2762 < _2766) || (_2762 > _2768))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2764, cbModelParam._m0[17u].z, fma(_2763, cbModelParam._m0[17u].y, _2762 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2764, cbModelParam._m0[18u].z, fma(_2763, cbModelParam._m0[18u].y, _2762 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2764, cbModelParam._m0[19u].z, fma(_2763, cbModelParam._m0[19u].y, _2762 * cbModelParam._m0[19u].x))), _1932);
            frontier_phi_25_50_ladder = _2882.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2882.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2882.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_25_50_ladder_2;
        _2025 = frontier_phi_25_50_ladder_1;
        _2027 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1932);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2039 = ((((1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1025 * _1012)) * _996;
    float _2040 = _2039 * ((cbModelParam._m0[1u].w * (_2023 - _1923)) + _1923);
    float _2041 = _2039 * ((cbModelParam._m0[1u].w * (_2025 - _1925)) + _1925);
    float _2042 = _2039 * ((cbModelParam._m0[1u].w * (_2027 - _1927)) + _1927);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2098 = _2085 / _2097;
    float _2099 = _2089 / _2097;
    float _2100 = _2093 / _2097;
    float _2247;
    float _2248;
    float _2249;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2127 = ((uint(_2100 > cbSceneParam._m0[59u].y) + uint(_2100 > cbSceneParam._m0[59u].x)) + uint(_2100 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2128 = _2127 + 43u;
        uint _2136 = _2127 + 44u;
        uint _2144 = _2127 + 45u;
        uint _2152 = _2127 + 46u;
        float _2163 = fma(_2097, cbSceneParam._m0[_2128].w, fma(_2093, cbSceneParam._m0[_2128].z, fma(_2089, cbSceneParam._m0[_2128].y, _2085 * cbSceneParam._m0[_2128].x)));
        float _2167 = fma(_2097, cbSceneParam._m0[_2136].w, fma(_2093, cbSceneParam._m0[_2136].z, fma(_2089, cbSceneParam._m0[_2136].y, _2085 * cbSceneParam._m0[_2136].x)));
        float _2175 = fma(_2097, cbSceneParam._m0[_2152].w, fma(_2093, cbSceneParam._m0[_2152].z, fma(_2089, cbSceneParam._m0[_2152].y, _2085 * cbSceneParam._m0[_2152].x)));
        float _2180 = cbSceneParam._m0[33u].z * _2175;
        float _2182 = cbSceneParam._m0[33u].w * _2175;
        float _2185 = fma(_2097, cbSceneParam._m0[_2144].w, fma(_2093, cbSceneParam._m0[_2144].z, fma(_2089, cbSceneParam._m0[_2144].y, _2085 * cbSceneParam._m0[_2144].x))) / _2175;
        float _2233 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
        float _4606 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2240 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 + _2163) / _2175, (_2182 + _2167) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2163) / _2175, (_2167 - _2180) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2180) / _2175, (_2167 - _2182) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2182) / _2175, (_2180 + _2167) / _2175), _2185), 0.0)).x), vec4(0.25)));
        _2247 = 1.0 - (_2240 * cbSceneParam._m0[34u].x);
        _2248 = 1.0 - (_2240 * cbSceneParam._m0[34u].y);
        _2249 = 1.0 - (_2240 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2247 = 1.0;
        _2248 = 1.0;
        _2249 = 1.0;
    }
    float _2313;
    float _2315;
    float _2317;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2301 = fma(_2097, cbSceneParam._m0[63u].w, fma(_2093, cbSceneParam._m0[63u].z, fma(_2089, cbSceneParam._m0[63u].y, _2085 * cbSceneParam._m0[63u].x)));
        float _2302 = fma(_2097, cbSceneParam._m0[60u].w, fma(_2093, cbSceneParam._m0[60u].z, fma(_2089, cbSceneParam._m0[60u].y, _2085 * cbSceneParam._m0[60u].x))) / _2301;
        float _2303 = fma(_2097, cbSceneParam._m0[61u].w, fma(_2093, cbSceneParam._m0[61u].z, fma(_2089, cbSceneParam._m0[61u].y, _2085 * cbSceneParam._m0[61u].x))) / _2301;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2302 >= cbSceneParam._m0[64u].x) && (_2303 >= cbSceneParam._m0[64u].y)) && (_2302 <= cbSceneParam._m0[64u].z)) && (_2303 <= cbSceneParam._m0[64u].w))
        {
            float _2441 = fma(_2097, cbSceneParam._m0[62u].w, fma(_2093, cbSceneParam._m0[62u].z, fma(_2089, cbSceneParam._m0[62u].y, _2085 * cbSceneParam._m0[62u].x))) / _2301;
            float _2445 = isnan(cbSceneParam._m0[41u].w) ? _2441 : (isnan(_2441) ? cbSceneParam._m0[41u].w : max(_2441, cbSceneParam._m0[41u].w));
            float _2488 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
            float _4622 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
            float _2495 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2302, cbSceneParam._m0[33u].w + _2303), _2445), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2302, _2303 - cbSceneParam._m0[33u].z), _2445), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2302 - cbSceneParam._m0[33u].z, _2303 - cbSceneParam._m0[33u].w), _2445), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2302 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2303), _2445), 0.0)).x), vec4(0.25)));
            float _2499 = 1.0 - (_2495 * cbSceneParam._m0[34u].x);
            float _2500 = 1.0 - (_2495 * cbSceneParam._m0[34u].y);
            float _2501 = 1.0 - (_2495 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
            frontier_phi_37_36_ladder_1 = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
            frontier_phi_37_36_ladder_2 = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
        }
        else
        {
            frontier_phi_37_36_ladder = _2249;
            frontier_phi_37_36_ladder_1 = _2248;
            frontier_phi_37_36_ladder_2 = _2247;
        }
        _2313 = frontier_phi_37_36_ladder_2;
        _2315 = frontier_phi_37_36_ladder_1;
        _2317 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2313 = _2247;
        _2315 = _2248;
        _2317 = _2249;
    }
    uvec4 _2322 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2324 = _2322.x * 14u;
    uint _2325 = _2324 + 13u;
    float _2332 = _996 + (-1.0);
    float _2337 = (cbLight._m0[_2325].x * _2332) + 1.0;
    float _2338 = (cbLight._m0[_2325].y * _2332) + 1.0;
    float _2339 = (cbLight._m0[_2325].z * _2332) + 1.0;
    float _2340 = (cbLight._m0[_2325].w * _2332) + 1.0;
    uint _2341 = _2324 + 5u;
    float _2347 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
    uint _2351 = _2324 + 4u;
    float _2360 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2364 = _2324 | 1u;
    float _2375 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_834, _835, _836));
    float _2378 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_834, _835, _836));
    float _4658 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _4669 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2383 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2385 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2392 = ((cbLight._m0[_2341].x * _2347) * _2385) + (((cbLight._m0[_2351].x * _2313) * _2360) * _2383);
    float _2393 = ((_2347 * cbLight._m0[_2341].y) * _2385) + (((cbLight._m0[_2351].y * _2315) * _2360) * _2383);
    float _2394 = ((_2347 * cbLight._m0[_2341].z) * _2385) + (((cbLight._m0[_2351].z * _2317) * _2360) * _2383);
    uvec4 _2398 = floatBitsToUint(cbLight._m0[_2324 + 12u]);
    bool _2400 = _2398.x == 0u;
    float _2502;
    float _2504;
    float _2506;
    if (_2400)
    {
        _2502 = _2392;
        _2504 = _2393;
        _2506 = _2394;
    }
    else
    {
        uint _2510 = _2324 + 6u;
        float _2526 = (dot(vec3(cbLight._m0[_2324 + 2u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2527 = _2526 * _2526;
        float _4680 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2528 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2529 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2502 = (((cbLight._m0[_2510].x * 0.3183098733425140380859375) * _2528) * _2529) + _2392;
        _2504 = (((cbLight._m0[_2510].y * 0.3183098733425140380859375) * _2528) * _2529) + _2393;
        _2506 = (((cbLight._m0[_2510].z * 0.3183098733425140380859375) * _2528) * _2529) + _2394;
    }
    bool _2509 = _2398.y == 0u;
    float _2564;
    float _2566;
    float _2568;
    if (_2509)
    {
        _2564 = _2502;
        _2566 = _2504;
        _2568 = _2506;
    }
    else
    {
        uint _2726 = _2324 + 7u;
        float _2742 = (dot(vec3(cbLight._m0[_2324 + 3u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2743 = _2742 * _2742;
        float _4696 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2744 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2745 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
        _2564 = (((cbLight._m0[_2726].x * 0.3183098733425140380859375) * _2744) * _2745) + _2502;
        _2566 = (((cbLight._m0[_2726].y * 0.3183098733425140380859375) * _2744) * _2745) + _2504;
        _2568 = (((cbLight._m0[_2726].z * 0.3183098733425140380859375) * _2744) * _2745) + _2506;
    }
    uint _2571 = _2324 + 8u;
    float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _837) * 0.949999988079071044921875);
    float _2585 = _2584 * _2584;
    float _2586 = cbLight._m0[_2324].x + _913;
    float _2587 = cbLight._m0[_2324].y + _914;
    float _2588 = cbLight._m0[_2324].z + _915;
    float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
    float _2593 = _2592 * _2586;
    float _2594 = _2592 * _2587;
    float _2595 = _2592 * _2588;
    float _2596 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2324].xyz));
    float _4712 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _4723 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2600 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2601 = dot(vec3(_834, _835, _836), vec3(_2593, _2594, _2595));
    float _4734 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2605 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2593, _2594, _2595));
    float _4745 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2609 = _2585 * _2585;
    float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
    float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2625 = 1.0 - _2585;
    float _2636 = (0.5 / (((_2600 * ((_2599 * _2625) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2600 * _2625) + _2585) * _2599))) * _2599;
    float _4756 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2638 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
    uint _2652 = _2324 + 9u;
    float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _837) * 0.949999988079071044921875);
    float _2664 = _2663 * _2663;
    float _2665 = cbLight._m0[_2364].x + _913;
    float _2666 = cbLight._m0[_2364].y + _914;
    float _2667 = cbLight._m0[_2364].z + _915;
    float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
    float _2672 = _2671 * _2665;
    float _2673 = _2671 * _2666;
    float _2674 = _2671 * _2667;
    float _2675 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2364].xyz));
    float _4767 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2679 = dot(vec3(_834, _835, _836), vec3(_2672, _2673, _2674));
    float _4778 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2683 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2672, _2673, _2674));
    float _4789 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2687 = _2664 * _2664;
    float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
    float _2700 = (exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2701 = 1.0 - _2664;
    float _2711 = (0.5 / (((_2600 * ((_2678 * _2701) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2600 * _2701) + _2664) * _2678))) * _2678;
    float _4800 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2713 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
    float _2723 = (((_2700 * cbLight._m0[_2652].x) * _2713) * _2347) + ((((cbLight._m0[_2571].x * _2313) * _2624) * _2638) * _2360);
    float _2724 = (((_2700 * cbLight._m0[_2652].y) * _2713) * _2347) + ((((cbLight._m0[_2571].y * _2315) * _2624) * _2638) * _2360);
    float _2725 = (((_2700 * cbLight._m0[_2652].z) * _2713) * _2347) + ((((cbLight._m0[_2571].z * _2317) * _2624) * _2638) * _2360);
    float _2781;
    float _2783;
    float _2785;
    if (_2400)
    {
        _2781 = _2723;
        _2783 = _2724;
        _2785 = _2725;
    }
    else
    {
        uint _2787 = _2324 + 2u;
        uint _2791 = _2324 + 10u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _837) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _913;
        float _2808 = cbLight._m0[_2787].y + _914;
        float _2809 = cbLight._m0[_2787].z + _915;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2787].xyz));
        float _4811 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2821 = dot(vec3(_834, _835, _836), vec3(_2814, _2815, _2816));
        float _4822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4833 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2842 = (exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2843 = 1.0 - _2806;
        float _2853 = (0.5 / (((_2600 * ((_2820 * _2843) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2600 * _2843) + _2806) * _2820))) * _2820;
        float _4844 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2781 = (((_2842 * cbLight._m0[_2791].x) * _2855) * _2856) + _2723;
        _2783 = (((_2842 * cbLight._m0[_2791].y) * _2855) * _2856) + _2724;
        _2785 = (((_2842 * cbLight._m0[_2791].z) * _2855) * _2856) + _2725;
    }
    float _2887;
    float _2889;
    float _2891;
    if (_2509)
    {
        _2887 = _2781;
        _2889 = _2783;
        _2891 = _2785;
    }
    else
    {
        uint _2898 = _2324 + 3u;
        uint _2902 = _2324 + 11u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _837) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _913;
        float _2919 = cbLight._m0[_2898].y + _914;
        float _2920 = cbLight._m0[_2898].z + _915;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2898].xyz));
        float _4860 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2932 = dot(vec3(_834, _835, _836), vec3(_2925, _2926, _2927));
        float _4871 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4882 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2953 = (exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2954 = 1.0 - _2917;
        float _2964 = (0.5 / (((_2600 * ((_2931 * _2954) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2600 * _2954) + _2917) * _2931))) * _2931;
        float _4893 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2966 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2967 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
        _2887 = (((_2953 * cbLight._m0[_2902].x) * _2966) * _2967) + _2781;
        _2889 = (((_2953 * cbLight._m0[_2902].y) * _2966) * _2967) + _2783;
        _2891 = (((_2953 * cbLight._m0[_2902].z) * _2966) * _2967) + _2785;
    }
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_2322.y == 0u)
    {
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.x;
        uint _3000 = uint((float(_2988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2989))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2989)));
        float _3010 = (log2(_2100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3011 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        uint _3014 = uint(isnan(14.0) ? _3011 : (isnan(_3011) ? 14.0 : min(_3011, 14.0)));
        uvec4 _3019 = texelFetch(g_lightClusterGridBuffer, int(((_3014 << 2u) + (_3000 << 6u)) >> 2u));
        uint _3020 = _3019.x;
        uint _3021 = _2988.z;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((((1u << ((_3021 >> 4u) & 15u)) + 4294967295u) & _3020) == 0u) || ((_3021 & 240u) == 0u))
        {
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
        }
        else
        {
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            uint _3259 = 0u;
            uint _3268;
            bool _3269;
            for (;;)
            {
                _3268 = texelFetch(g_lightClassification, int((((_3014 << 5u) + (_3000 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                _3269 = _3268 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3269)
                {
                    frontier_phi_71_pred = _3258;
                    frontier_phi_71_pred_1 = _3257;
                    frontier_phi_71_pred_2 = _3256;
                    frontier_phi_71_pred_3 = _3255;
                    frontier_phi_71_pred_4 = _3254;
                    frontier_phi_71_pred_5 = _3253;
                }
                else
                {
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    uint _3404;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3268;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3408 = uint(findLSB(_3404)) + (_3259 << 5u);
                        uint _3405 = (_3404 + 4294967295u) & _3404;
                        uint _3410 = _3408 * 48u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3430 = (_3408 * 48u) + 4u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3449 = (_3408 * 48u) + 8u;
                        vec3 _3460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x));
                        float _3464 = _3424.x - _2098;
                        float _3465 = _3424.y - _2099;
                        float _3466 = _3424.z - _2100;
                        float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                        float _3470 = inversesqrt(_3467);
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3474 = dot(vec3(_952, _955, _958), vec3(_3471, _3472, _3473));
                        float _3479 = 1.0 - (_3467 * _3424.w);
                        float _4919 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3481 = sqrt(_3467) * _3443.w;
                        float _3484 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3474) + _3485;
                        float _3491 = _3481 * _3481;
                        float _3495 = ((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3480) / ((_3491 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2098;
                        float _3500 = (-0.0) - _2099;
                        float _3501 = (-0.0) - _2100;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3515 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                        float _3516 = 1.0 - _1012;
                        float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                        float _3524 = _3523 * _3523;
                        float _3525 = _3524 * _3524;
                        float _3526 = _3506 + _3471;
                        float _3527 = _3507 + _3472;
                        float _3528 = _3508 + _3473;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3536 = dot(vec3(_952, _955, _958), vec3(_3506, _3507, _3508));
                        float _4935 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3540 = dot(vec3(_952, _955, _958), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                        float _4946 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                        float _3548 = _3484 * _3524;
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3474) + _3549;
                        float _4957 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3553 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3554 = 1.0 - _3524;
                        float _3564 = (0.5 / (((_3553 * ((_3539 * _3554) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3524) * _3539))) * _3553;
                        float _4968 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3575 = (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3547 * _3547) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125))) * _3480;
                        _3328 = (_3495 * _3443.x) + _3401;
                        _3329 = (_3495 * _3443.y) + _3402;
                        _3330 = (_3495 * _3443.z) + _3403;
                        _3325 = (_3575 * _3460.x) + _3398;
                        _3326 = (_3575 * _3460.y) + _3399;
                        _3327 = (_3575 * _3460.z) + _3400;
                        if (_3405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3405;
                        }
                    }
                    frontier_phi_71_pred = _3330;
                    frontier_phi_71_pred_1 = _3329;
                    frontier_phi_71_pred_2 = _3328;
                    frontier_phi_71_pred_3 = _3327;
                    frontier_phi_71_pred_4 = _3326;
                    frontier_phi_71_pred_5 = _3325;
                }
                _3111 = frontier_phi_71_pred;
                _3109 = frontier_phi_71_pred_1;
                _3107 = frontier_phi_71_pred_2;
                _3105 = frontier_phi_71_pred_3;
                _3103 = frontier_phi_71_pred_4;
                _3101 = frontier_phi_71_pred_5;
                uint _3260 = _3259 + 1u;
                if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3253 = _3101;
                    _3254 = _3103;
                    _3255 = _3105;
                    _3256 = _3107;
                    _3257 = _3109;
                    _3258 = _3111;
                    _3259 = _3260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
        }
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.z;
        uint _3117 = (_3115 >> 8u) & 15u;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((4294967295u << _3117) & _3020) == 0u)
        {
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
        }
        else
        {
            float _3246 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
            float _3247 = _3246 * _2098;
            float _3248 = _3246 * _2099;
            float _3249 = _3246 * _2100;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3117 < ((_3115 >> 12u) & 15u))
            {
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3381 = _3100;
                float _3382 = _3102;
                float _3383 = _3104;
                float _3384 = _3106;
                float _3385 = _3108;
                float _3386 = _3110;
                uint _3387 = _3117;
                uint _3396;
                bool _3397;
                for (;;)
                {
                    _3396 = texelFetch(g_lightClassification, int((((_3014 << 5u) + (_3000 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                    _3397 = _3396 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3397)
                    {
                        frontier_phi_82_pred = _3386;
                        frontier_phi_82_pred_1 = _3385;
                        frontier_phi_82_pred_2 = _3384;
                        frontier_phi_82_pred_3 = _3383;
                        frontier_phi_82_pred_4 = _3382;
                        frontier_phi_82_pred_5 = _3381;
                    }
                    else
                    {
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        uint _3608 = _3396;
                        uint _3609;
                        vec4 _3634;
                        float _3635;
                        vec4 _3650;
                        vec3 _3662;
                        vec4 _3677;
                        vec4 _3692;
                        float _3738;
                        bool _3739;
                        for (;;)
                        {
                            uint _3619 = ((_3387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3608));
                            _3609 = (_3608 + 4294967295u) & _3608;
                            uint _3621 = _3619 * 40u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3635 = _3634.w;
                            uint _3637 = (_3619 * 40u) + 4u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3619 * 40u) + 8u;
                            _3662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x));
                            uint _3664 = (_3619 * 40u) + 16u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3619 * 40u) + 20u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3619 * 40u) + 24u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3713 = (_3619 * 40u) + 28u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            _3738 = fma(_2100, _3726.z, fma(_2099, _3726.y, _3726.x * _2098)) + _3726.w;
                            _3739 = !((fma(_2100, _3707.z, fma(_2099, _3707.y, _3707.x * _2098)) + _3707.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3739)
                            {
                                float _3766 = _3634.x - _2098;
                                float _3767 = _3634.y - _2099;
                                float _3768 = _3634.z - _2100;
                                float _3769 = dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768));
                                float _3772 = inversesqrt(_3769);
                                float _3773 = _3772 * _3766;
                                float _3774 = _3772 * _3767;
                                float _3775 = _3772 * _3768;
                                float _3779 = 1.0 - (_3769 / (_3635 * _3635));
                                float _4979 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3784 = sqrt(_3769) * _3650.w;
                                float _3786 = 1.39999997615814208984375 / (_3784 + 1.39999997615814208984375);
                                float _3787 = _3786 * _3786;
                                float _3790 = ((1.0 - _3787) * dot(vec3(_3773, _3774, _3775), vec3(_952, _955, _958))) + _3787;
                                float _3793 = _3784 * _3784;
                                float _3797 = (fma(_2100, _3677.z, fma(_2099, _3677.y, _3677.x * _2098)) + _3677.w) / _3738;
                                float _3798 = (fma(_2100, _3692.z, fma(_2099, _3692.y, _3692.x * _2098)) + _3692.w) / _3738;
                                float _3802 = 1.0 - dot(vec2(_3797, _3798), vec2(_3797, _3798));
                                float _4995 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3804 = _3803 * (((isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0))) * _3780) / ((_3793 * 0.699999988079071044921875) + 1.0));
                                float _3816 = exp2(log2(1.0 / ((_3793 * 3.5) + 5.0)) * 0.25);
                                float _3817 = 1.0 - _1012;
                                float _3824 = sqrt(1.0 - ((1.0 - (_3817 * _3817)) * (1.0 - (_3816 * _3816))));
                                float _3825 = _3824 * _3824;
                                float _3826 = _3825 * _3825;
                                float _3827 = _3773 - _3247;
                                float _3828 = _3774 - _3248;
                                float _3829 = _3775 - _3249;
                                float _3833 = inversesqrt(dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829)));
                                float _3837 = dot(vec3(_952, _955, _958), vec3((-0.0) - _3247, (-0.0) - _3248, (-0.0) - _3249));
                                float _5006 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3841 = dot(vec3(_952, _955, _958), vec3(_3833 * _3827, _3833 * _3828, _3833 * _3829));
                                float _5017 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3848 = ((_3844 * _3844) * (_3826 + (-1.0))) + 1.0;
                                float _3849 = _3786 * _3825;
                                float _3850 = _3849 * _3849;
                                float _3856 = ((1.0 - _3850) * dot(vec3(_952, _955, _958), vec3(_3773, _3774, _3775))) + _3850;
                                float _5028 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3858 = 1.0 - _3825;
                                float _3868 = (0.5 / (((_3857 * ((_3840 * _3858) + _3825)) + 9.9999999392252902907785028219223e-09) + (((_3857 * _3858) + _3825) * _3840))) * _3857;
                                float _5039 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3878 = (_3803 * _3780) * (((_3826 * 3.1415927410125732421875) * (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0)))) / ((_3848 * _3848) * ((_3793 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3804 * _3650.z;
                                frontier_phi_88_pred_1 = _3804 * _3650.y;
                                frontier_phi_88_pred_2 = _3804 * _3650.x;
                                frontier_phi_88_pred_3 = _3878 * _3662.z;
                                frontier_phi_88_pred_4 = _3878 * _3662.y;
                                frontier_phi_88_pred_5 = _3878 * _3662.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_88_pred;
                            _3886 = frontier_phi_88_pred_1;
                            _3885 = frontier_phi_88_pred_2;
                            _3884 = frontier_phi_88_pred_3;
                            _3883 = frontier_phi_88_pred_4;
                            _3882 = frontier_phi_88_pred_5;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            if (_3609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3609;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3594;
                        frontier_phi_82_pred_1 = _3593;
                        frontier_phi_82_pred_2 = _3592;
                        frontier_phi_82_pred_3 = _3591;
                        frontier_phi_82_pred_4 = _3590;
                        frontier_phi_82_pred_5 = _3589;
                    }
                    _3232 = frontier_phi_82_pred;
                    _3230 = frontier_phi_82_pred_1;
                    _3228 = frontier_phi_82_pred_2;
                    _3226 = frontier_phi_82_pred_3;
                    _3224 = frontier_phi_82_pred_4;
                    _3222 = frontier_phi_82_pred_5;
                    uint _3388 = _3387 + 1u;
                    if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3381 = _3222;
                        _3382 = _3224;
                        _3383 = _3226;
                        _3384 = _3228;
                        _3385 = _3230;
                        _3386 = _3232;
                        _3387 = _3388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3228;
                frontier_phi_63_64_ladder_1 = _3232;
                frontier_phi_63_64_ladder_2 = _3230;
                frontier_phi_63_64_ladder_3 = _3226;
                frontier_phi_63_64_ladder_4 = _3224;
                frontier_phi_63_64_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_63_64_ladder = _3106;
                frontier_phi_63_64_ladder_1 = _3110;
                frontier_phi_63_64_ladder_2 = _3108;
                frontier_phi_63_64_ladder_3 = _3104;
                frontier_phi_63_64_ladder_4 = _3102;
                frontier_phi_63_64_ladder_5 = _3100;
            }
            _3221 = frontier_phi_63_64_ladder_5;
            _3223 = frontier_phi_63_64_ladder_4;
            _3225 = frontier_phi_63_64_ladder_3;
            _3227 = frontier_phi_63_64_ladder;
            _3229 = frontier_phi_63_64_ladder_2;
            _3231 = frontier_phi_63_64_ladder_1;
        }
        float _3236 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _3033 = (_3236 * _3227) + _2564;
        _3035 = (_3236 * _3229) + _2566;
        _3037 = (_3236 * _3231) + _2568;
        _3039 = ((_3221 * 0.039999999105930328369140625) * _3236) + _2887;
        _3041 = ((_3223 * 0.039999999105930328369140625) * _3236) + _2889;
        _3043 = ((_3225 * 0.039999999105930328369140625) * _3236) + _2891;
    }
    else
    {
        _3033 = _2564;
        _3035 = _2566;
        _3037 = _2568;
        _3039 = _2887;
        _3041 = _2889;
        _3043 = _2891;
    }
    float _5055 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _5066 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _5077 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _3060 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3033 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _996))) + ((_3039 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    float _3061 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3035 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _996))) + ((_3041 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    float _3062 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3037 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _996))) + ((_3043 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    uint _3063 = _278 + 6u;
    float _3071 = _933 / cbSceneParam._m0[86u].x;
    float _3072 = _934 / cbSceneParam._m0[86u].y;
    vec4 _3086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3088 = _3086.x;
    float _3089 = _3086.y;
    float _3090 = _3086.z;
    float _3091 = _3086.w;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _3125 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _3126 = _3125 / _855;
        float _3137 = _3126 * _906;
        float _3138 = _907 * _3126;
        float _3139 = (-0.0) - _3138;
        float _3141 = _3126 * _908;
        float _3143 = (cbSceneParam._m0[77u].w * _3139) / _3125;
        float _3144 = _3143 + cbSceneParam._m0[79u].w;
        float _3145 = cbSceneParam._m0[79u].w - _3138;
        float _3151 = sqrt(((_3137 * _3137) + (_3138 * _3138)) + (_3141 * _3141));
        float _3154 = (1.0 - (cbSceneParam._m0[77u].w / _3125)) * _3151;
        float _3159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3139 - _3143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3144 > 0.0) ? exp2(_3159 * _3144) : (2.0 - exp2(_3161 * _3144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3154;
        }
        else
        {
            float _3282 = 1.0 / cbSceneParam._m0[80u].x;
            float _3283 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : max(_3144, _3145));
            float _3284 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : min(_3144, _3145));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            _3338 = ((abs(_3151 / _3139) * cbSceneParam._m0[80u].y) * ((((_3293 - _3294) * 2.0) - ((exp2(_3159 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0)))) - exp2(_3159 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))))) * _3282)) - ((exp2(_3161 * _3293) - exp2(_3161 * _3294)) * _3282))) + (_3154 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3091);
        _3163 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3088;
        _3165 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3089;
        _3167 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3090;
        _3169 = _3349 * _3091;
    }
    else
    {
        _3163 = _3088;
        _3165 = _3089;
        _3167 = _3090;
        _3169 = _3091;
    }
    bool _3376;
    vec4 _3179;
    vec4 _3201;
    float _3203;
    float _3207;
    float _3208;
    float _3209;
    float _3210;
    bool _3220;
    for (;;)
    {
        _3179 = cbMatDynParam._m0[0u];
        float _3181 = roundEven(_3179.y);
        bool _3182 = _3181 == 3.0;
        float _3183 = log2(_3169);
        float _3190 = exp2(_3183 * cbSceneParam._m0[78u].x) * _3060;
        float _3191 = exp2(_3183 * cbSceneParam._m0[78u].y) * _3061;
        float _3192 = exp2(_3183 * cbSceneParam._m0[78u].z) * _3062;
        float _3199 = _922 + (-0.5);
        _3201 = cbMtdParam._m0[1u];
        _3203 = _3201.y * _3199;
        float _3206 = (_3181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3207 = _3206 * (_3182 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = _3206 * (_3182 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3165)));
        _3209 = _3206 * (_3182 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3167)));
        _3210 = _3199 * 0.999000012874603271484375;
        _3220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3220)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3210) < 0.5)
            {
                _3376 = true;
                break;
            }
        }
        uint _3317 = _971 + uint(_3179.w);
        if ((cbInstanceData._m0[_3317].w < 1.0) && ((cbInstanceData._m0[_3317].w + _3210) < 0.5))
        {
            _3376 = true;
            break;
        }
        if ((_3203 + 1.0) < _3201.x)
        {
            _3376 = true;
            break;
        }
        _3376 = false;
        break;
    }
    float _3580;
    if (_3376)
    {
        discard_state = true;
        _3580 = 0.0;
    }
    else
    {
        _3580 = cbInstanceData._m0[_3063].w;
    }
    SV_Target.x = _3207;
    SV_Target.y = _3208;
    SV_Target.z = _3209;
    SV_Target.w = _3580;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3063].w;
    discard_exit();
}


