#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1490;
float _3847;
float _3848;
float _3849;
float _3850;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3859 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3870 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3881 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3892 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _484 = (_477 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _485 = (_477 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _486 = (_477 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3903 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _557 = (_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484;
    float _558 = (_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485;
    float _559 = (_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[24u].z) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3914 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _629 = (_336.x * cbMtdParam._m0[9u].x) * ((_619 * ((_577.x * cbMtdParam._m0[14u].x) - _557)) + _557);
    float _630 = (_336.y * cbMtdParam._m0[9u].y) * ((_619 * ((_577.y * cbMtdParam._m0[14u].y) - _558)) + _558);
    float _631 = (_336.z * cbMtdParam._m0[9u].z) * ((_619 * ((_577.z * cbMtdParam._m0[14u].z) - _559)) + _559);
    float _635 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _629;
    float _638 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _630;
    float _641 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _631;
    float _649 = (((_629 - _635) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) + _635) * 4.55000019073486328125;
    float _651 = (((_630 - _638) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _638) * 4.55000019073486328125;
    float _653 = (((_631 - _641) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _641) * 4.55000019073486328125;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    float _721 = ((_693.x - _712) * _477) + _712;
    float _722 = ((_693.y - _713) * _477) + _713;
    float _723 = ((_693.z - _714) * _477) + _714;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _746 = ((_735.x - _721) * _550) + _721;
    float _747 = ((_735.y - _722) * _550) + _722;
    float _748 = ((_735.z - _723) * _550) + _723;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _773 = ((_760.z - _748) * _619) + _748;
    float _776 = ((((_760.x - _746) * _619) + _746) * 2.0) + (-1.0);
    float _777 = ((((_760.y - _747) * _619) + _747) * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3925 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _824 = _822.x;
    float _825 = 1.0 - _824;
    float _838 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_824 - _825) * cbMtdParam._m0[24u].w) + _825) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _846 = (_839 * (cbMtdParam._m0[17u].x - _649)) + _649;
    float _847 = (_839 * (cbMtdParam._m0[17u].y - _651)) + _651;
    float _848 = (_839 * (cbMtdParam._m0[17u].z - _653)) + _653;
    float _853 = (((_670.z - _773) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _773;
    float _857 = ((_797.z - _853) * cbMtdParam._m0[19u].w) + _853;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _3947 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = (_839 * (_870.z - _857)) + _857;
    float _896 = (_776 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_670.x * 2.0) + (-1.0)))) + (((_797.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _897 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_670.y * 2.0) + (-1.0)))) + (((_797.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _909 = (((_877 - _896) + (cbMtdParam._m0[21u].x * _896)) * _839) + _896;
    float _910 = (((_878 - _897) + (cbMtdParam._m0[21u].x * _897)) * _839) + _897;
    float _911 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _783)) + _783;
    float _915 = cbMtdParam._m0[22u].x + _797.w;
    float _918 = fma(_911, _246 * NORMAL.x, fma(_910, _253 * TANGENT.x, (_239 * _231) * _909));
    float _921 = fma(_911, _246 * NORMAL.y, fma(_910, _253 * TANGENT.y, (_239 * _232) * _909));
    float _924 = fma(_911, _246 * NORMAL.z, fma(_910, _253 * TANGENT.z, (_239 * _233) * _909));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _3958 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _932 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _3980 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3991 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4002 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1001 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _991);
    float _1002 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _991);
    float _1003 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _991);
    float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
    float _1008 = _1001 * _1007;
    float _1009 = _1002 * _1007;
    float _1010 = _1003 * _1007;
    vec4 _1015 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1017 = _1015.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1171 = sqrt(((_1001 * _1001) + (_1002 * _1002)) + (_1003 * _1003));
        float _1177 = (cbMatDynParam._m0[5u].x * _1171) + cbMatDynParam._m0[5u].y;
        float _4013 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1182 = (cbMatDynParam._m0[5u].z * _1171) + cbMatDynParam._m0[5u].w;
        float _4024 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) - _1178)) + _1178) < ((_1017 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1050 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1053 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1066 = _280 + 9u;
    uint _1067 = _1066 + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _4035 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1091 = ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_929, _930, _931), vec3(_1008, _1009, _1010));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _929) - _1008;
    float _1100 = (_1095 * _930) - _1009;
    float _1101 = (_1095 * _931) - _1010;
    float _1105 = abs(dot(vec3(_1008, _1009, _1010), vec3(_929, _930, _931)));
    float _4068 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_932);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1489;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1214 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1218 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1222 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1247 = _1152 + _929;
        float _1248 = _1156 + _930;
        float _1249 = _1160 + _931;
        float _1259 = fma(_1249, cbModelParam._m0[26u].z, fma(_1248, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247)) - _1214;
        float _1260 = fma(_1249, cbModelParam._m0[27u].z, fma(_1248, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247)) - _1218;
        float _1261 = fma(_1249, cbModelParam._m0[28u].z, fma(_1248, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247)) - _1222;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1214 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1218 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[34u].z) + ((((((_1222 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1317 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1283.x + (-0.5));
        float _1319 = _1317 * (_1283.y + (-0.5));
        float _1320 = _1317 * (_1283.z + (-0.5));
        float _1327 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1290.x + (-0.5));
        float _1329 = _1327 * (_1290.y + (-0.5));
        float _1330 = _1327 * (_1290.z + (-0.5));
        float _1337 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1297.x + (-0.5));
        float _1339 = _1337 * (_1297.y + (-0.5));
        float _1340 = _1337 * (_1297.z + (-0.5));
        float _1347 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1304.x + (-0.5));
        float _1349 = _1347 * (_1304.y + (-0.5));
        float _1350 = _1347 * (_1304.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1371 = (dot(vec3(_929, _930, _931), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1381 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4116 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1383 + 1.0))) + _1388) * _1351;
        float _1398 = _1319 * 0.5;
        float _1399 = _1329 * 0.5;
        float _1400 = _1339 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_929, _930, _931), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4149 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1425 + 1.0))) + _1430) * _1352;
        float _1440 = _1320 * 0.5;
        float _1441 = _1330 * 0.5;
        float _1442 = _1340 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_929, _930, _931), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4182 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1467 + 1.0))) + _1472) * _1353;
        _1489 = _1320;
        _1491 = _1319;
        _1492 = _1318;
        _1493 = _1330;
        _1494 = _1329;
        _1495 = _1328;
        _1496 = _1340;
        _1497 = _1339;
        _1498 = _1338;
        _1499 = _1353;
        _1500 = _1352;
        _1501 = _1351;
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1490;
        _1491 = _1490;
        _1492 = _1490;
        _1493 = _1490;
        _1494 = _1490;
        _1495 = _1490;
        _1496 = _1490;
        _1497 = _1490;
        _1498 = _1490;
        _1499 = _1490;
        _1500 = _1490;
        _1501 = _1490;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1534 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1538 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1561 = _1152 + _929;
        float _1562 = _1156 + _930;
        float _1563 = _1160 + _931;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_929, _930, _931), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4245 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_929, _930, _931), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4278 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_929, _930, _931), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4311 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1490;
        _1800 = _1490;
        _1801 = _1490;
        _1802 = _1490;
        _1803 = _1490;
        _1804 = _1490;
        _1805 = _1490;
        _1806 = _1490;
        _1807 = _1490;
        _1808 = _1490;
        _1809 = _1490;
        _1810 = _1490;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1502)) + _1502;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1503)) + _1503;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1504)) + _1504;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1099 * 0.5;
    float _1868 = _1100 * 0.5;
    float _1869 = _1101 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1489, _1493, _1496, _1499));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1983 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1987 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1991 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1994 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _1997 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _2000 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _2028;
        if (_1994 > 0.0)
        {
            _2028 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2028 = frontier_phi_17_15_ladder;
        }
        float _2229;
        if (_1997 > 0.0)
        {
            _2229 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2229 = frontier_phi_26_22_ladder;
        }
        float _2472;
        if (_2000 > 0.0)
        {
            _2472 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2472 = frontier_phi_38_33_ladder;
        }
        float _2474 = isnan(_2229) ? _2028 : (isnan(_2028) ? _2229 : min(_2028, _2229));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1994) + _1983;
        float _2480 = (_2475 * _1997) + _1987;
        float _2481 = (_2475 * _2000) + _1991;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_16_38_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _2016 = frontier_phi_16_38_ladder_2;
        _2018 = frontier_phi_16_38_ladder_1;
        _2020 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1936);
        _2016 = _2004.x * cbModelParam._m0[1u].y;
        _2018 = _2004.y * cbModelParam._m0[1u].y;
        _2020 = _2004.z * cbModelParam._m0[1u].y;
    }
    float _2024 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2024 : min(cbModelParam._m0[25u].w, _2024));
    float _2115;
    float _2117;
    float _2119;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2079 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2083 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2087 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2090 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2093 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2096 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2234;
        if (_2090 > 0.0)
        {
            _2234 = abs((1.0 - _2079) / _2090);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2079 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2234 = frontier_phi_28_24_ladder;
        }
        float _2499;
        if (_2093 > 0.0)
        {
            _2499 = abs((1.0 - _2083) / _2093);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2083 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2499 = frontier_phi_40_35_ladder;
        }
        float _2704;
        if (_2096 > 0.0)
        {
            _2704 = abs((1.0 - _2087) / _2096);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2087 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2704 = frontier_phi_49_46_ladder;
        }
        float _2706 = isnan(_2499) ? _2234 : (isnan(_2234) ? _2499 : min(_2234, _2499));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _2090) + _2079;
        float _2712 = (_2707 * _2093) + _2083;
        float _2713 = (_2707 * _2096) + _2087;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2715 = (-1.0) - _2714;
        float _2717 = _2714 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2713 > _2717) || ((_2713 < _2715) || ((_2712 > _2717) || ((_2712 < _2715) || ((_2711 < _2715) || (_2711 > _2717))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2713, cbModelParam._m0[17u].z, fma(_2712, cbModelParam._m0[17u].y, _2711 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2713, cbModelParam._m0[18u].z, fma(_2712, cbModelParam._m0[18u].y, _2711 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2713, cbModelParam._m0[19u].z, fma(_2712, cbModelParam._m0[19u].y, _2711 * cbModelParam._m0[19u].x))), _2025);
            frontier_phi_25_49_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2115 = frontier_phi_25_49_ladder_2;
        _2117 = frontier_phi_25_49_ladder_1;
        _2119 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _2025);
        _2115 = _2099.x * cbModelParam._m0[1u].z;
        _2117 = _2099.y * cbModelParam._m0[1u].z;
        _2119 = _2099.z * cbModelParam._m0[1u].z;
    }
    float _2131 = ((((1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1120 * _1107)) * _1091;
    float _2132 = _2131 * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2133 = _2131 * ((cbModelParam._m0[1u].w * (_2117 - _2018)) + _2018);
    float _2134 = _2131 * ((cbModelParam._m0[1u].w * (_2119 - _2020)) + _2020);
    float _2137 = fma(_2134, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2132 * cbSceneParam._m0[89u].x));
    float _2140 = fma(_2134, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2132 * cbSceneParam._m0[90u].x));
    float _2143 = fma(_2134, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, _2132 * cbSceneParam._m0[91u].x));
    uvec4 _2153 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2155 = _2153.x * 14u;
    uint _2156 = _2155 + 13u;
    float _2163 = _1091 + (-1.0);
    float _2168 = (cbLight._m0[_2156].x * _2163) + 1.0;
    float _2169 = (cbLight._m0[_2156].y * _2163) + 1.0;
    float _2170 = (cbLight._m0[_2156].z * _2163) + 1.0;
    float _2171 = (cbLight._m0[_2156].w * _2163) + 1.0;
    uint _2172 = _2155 + 5u;
    float _2178 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2182 = _2155 + 4u;
    float _2188 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2192 = _2155 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_929, _930, _931));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_929, _930, _931));
    float _4447 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4458 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2172].x * _2178) * _2213) + ((cbLight._m0[_2182].x * _2188) * _2211);
    float _2221 = ((_2178 * cbLight._m0[_2172].y) * _2213) + ((_2188 * cbLight._m0[_2182].y) * _2211);
    float _2222 = ((_2178 * cbLight._m0[_2172].z) * _2213) + ((_2188 * cbLight._m0[_2182].z) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2155 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2228)
    {
        _2239 = _2220;
        _2241 = _2221;
        _2243 = _2222;
    }
    else
    {
        uint _2247 = _2155 + 6u;
        float _2263 = (dot(vec3(cbLight._m0[_2155 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4469 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2266 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2239 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2220;
        _2241 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2221;
        _2243 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2222;
    }
    bool _2246 = _2226.y == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2246)
    {
        _2284 = _2239;
        _2286 = _2241;
        _2288 = _2243;
    }
    else
    {
        uint _2443 = _2155 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2155 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4485 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2462 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2284 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2239;
        _2286 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2241;
        _2288 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2243;
    }
    uint _2291 = _2155 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _932) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2155].x + _1008;
    float _2307 = cbLight._m0[_2155].y + _1009;
    float _2308 = cbLight._m0[_2155].z + _1010;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2155].xyz));
    float _4501 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _4512 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2320 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2321 = dot(vec3(_929, _930, _931), vec3(_2313, _2314, _2315));
    float _4523 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2313, _2314, _2315));
    float _4534 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2345 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2320 * ((_2319 * _2345) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2345) + _2305) * _2319))) * _2319;
    float _4545 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2369 = _2155 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _932) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2192].x + _1008;
    float _2383 = cbLight._m0[_2192].y + _1009;
    float _2384 = cbLight._m0[_2192].z + _1010;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2192].xyz));
    float _4556 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2396 = dot(vec3(_929, _930, _931), vec3(_2389, _2390, _2391));
    float _4567 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2389, _2390, _2391));
    float _4578 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2381;
    float _2428 = (0.5 / (((_2320 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2418) + _2381) * _2395))) * _2395;
    float _4589 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2440 = (((_2417 * cbLight._m0[_2369].x) * _2430) * _2178) + (((_2344 * cbLight._m0[_2291].x) * _2358) * _2188);
    float _2441 = (((_2417 * cbLight._m0[_2369].y) * _2430) * _2178) + (((_2344 * cbLight._m0[_2291].y) * _2358) * _2188);
    float _2442 = (((_2417 * cbLight._m0[_2369].z) * _2430) * _2178) + (((_2344 * cbLight._m0[_2291].z) * _2358) * _2188);
    float _2504;
    float _2506;
    float _2508;
    if (_2228)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2155 + 2u;
        uint _2514 = _2155 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _932) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _1008;
        float _2531 = cbLight._m0[_2510].y + _1009;
        float _2532 = cbLight._m0[_2510].z + _1010;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2510].xyz));
        float _4600 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2544 = dot(vec3(_929, _930, _931), vec3(_2537, _2538, _2539));
        float _4611 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4622 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2566 = 1.0 - _2529;
        float _2576 = (0.5 / (((_2320 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2566) + _2529) * _2543))) * _2543;
        float _4633 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2504 = (((_2565 * cbLight._m0[_2514].x) * _2578) * _2579) + _2440;
        _2506 = (((_2565 * cbLight._m0[_2514].y) * _2578) * _2579) + _2441;
        _2508 = (((_2565 * cbLight._m0[_2514].z) * _2578) * _2579) + _2442;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2246)
    {
        _2614 = _2504;
        _2616 = _2506;
        _2618 = _2508;
    }
    else
    {
        uint _2625 = _2155 + 3u;
        uint _2629 = _2155 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _932) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1008;
        float _2646 = cbLight._m0[_2625].y + _1009;
        float _2647 = cbLight._m0[_2625].z + _1010;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2625].xyz));
        float _4649 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2659 = dot(vec3(_929, _930, _931), vec3(_2652, _2653, _2654));
        float _4660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4671 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2680 = (exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2681 = 1.0 - _2644;
        float _2691 = (0.5 / (((_2320 * ((_2658 * _2681) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2681) + _2644) * _2658))) * _2658;
        float _4682 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2614 = (((_2680 * cbLight._m0[_2629].x) * _2693) * _2694) + _2504;
        _2616 = (((_2680 * cbLight._m0[_2629].y) * _2693) * _2694) + _2506;
        _2618 = (((_2680 * cbLight._m0[_2629].z) * _2693) * _2694) + _2508;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2153.y == 0u)
    {
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2769;
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2769;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2769;
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2785)));
        float _2806 = (log2(_2772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
        }
        else
        {
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            uint _3076 = 0u;
            uint _3085;
            bool _3086;
            for (;;)
            {
                _3085 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                _3086 = _3085 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3086)
                {
                    frontier_phi_66_pred = _3070;
                    frontier_phi_66_pred_1 = _3075;
                    frontier_phi_66_pred_2 = _3074;
                    frontier_phi_66_pred_3 = _3073;
                    frontier_phi_66_pred_4 = _3072;
                    frontier_phi_66_pred_5 = _3071;
                }
                else
                {
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    uint _3221;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3085;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    for (;;)
                    {
                        uint _3225 = uint(findLSB(_3221)) + (_3076 << 5u);
                        uint _3222 = (_3221 + 4294967295u) & _3221;
                        uint _3227 = _3225 * 48u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 3u)).x));
                        uint _3247 = (_3225 * 48u) + 4u;
                        vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3266 = (_3225 * 48u) + 8u;
                        vec3 _3277 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x));
                        float _3281 = _3241.x - _2770;
                        float _3282 = _3241.y - _2771;
                        float _3283 = _3241.z - _2772;
                        float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                        float _3287 = inversesqrt(_3284);
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3291 = dot(vec3(_1047, _1050, _1053), vec3(_3288, _3289, _3290));
                        float _3296 = 1.0 - (_3284 * _3241.w);
                        float _4708 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3298 = sqrt(_3284) * _3260.w;
                        float _3301 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                        float _3302 = _3301 * _3301;
                        float _3305 = ((1.0 - _3302) * _3291) + _3302;
                        float _3308 = _3298 * _3298;
                        float _3312 = ((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3297) / ((_3308 * 0.699999988079071044921875) + 1.0);
                        float _3316 = (-0.0) - _2770;
                        float _3317 = (-0.0) - _2771;
                        float _3318 = (-0.0) - _2772;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3333 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                        float _3334 = 1.0 - _1107;
                        float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                        float _3342 = _3341 * _3341;
                        float _3343 = _3342 * _3342;
                        float _3344 = _3323 + _3288;
                        float _3345 = _3324 + _3289;
                        float _3346 = _3325 + _3290;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3354 = dot(vec3(_1047, _1050, _1053), vec3(_3323, _3324, _3325));
                        float _4724 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3358 = dot(vec3(_1047, _1050, _1053), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                        float _4735 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                        float _3366 = _3301 * _3342;
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3291) + _3367;
                        float _4746 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3372 = 1.0 - _3342;
                        float _3382 = (0.5 / (((_3371 * ((_3357 * _3372) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3342) * _3357))) * _3371;
                        float _4757 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3393 = (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) / ((_3365 * _3365) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125))) * _3297;
                        _3145 = (_3312 * _3260.x) + _3218;
                        _3146 = (_3312 * _3260.y) + _3219;
                        _3147 = (_3312 * _3260.z) + _3220;
                        _3142 = (_3393 * _3277.x) + _3215;
                        _3143 = (_3393 * _3277.y) + _3216;
                        _3144 = (_3393 * _3277.z) + _3217;
                        if (_3222 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3222;
                        }
                    }
                    frontier_phi_66_pred = _3142;
                    frontier_phi_66_pred_1 = _3147;
                    frontier_phi_66_pred_2 = _3146;
                    frontier_phi_66_pred_3 = _3145;
                    frontier_phi_66_pred_4 = _3144;
                    frontier_phi_66_pred_5 = _3143;
                }
                _2918 = frontier_phi_66_pred;
                _2928 = frontier_phi_66_pred_1;
                _2926 = frontier_phi_66_pred_2;
                _2924 = frontier_phi_66_pred_3;
                _2922 = frontier_phi_66_pred_4;
                _2920 = frontier_phi_66_pred_5;
                uint _3077 = _3076 + 1u;
                if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3070 = _2918;
                    _3071 = _2920;
                    _3072 = _2922;
                    _3073 = _2924;
                    _3074 = _2926;
                    _3075 = _2928;
                    _3076 = _3077;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
        }
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.z;
        uint _2934 = (_2932 >> 8u) & 15u;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((4294967295u << _2934) & _2816) == 0u)
        {
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
            _3048 = _2927;
        }
        else
        {
            float _3063 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
            float _3064 = _3063 * _2770;
            float _3065 = _3063 * _2771;
            float _3066 = _3063 * _2772;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2934 < ((_2932 >> 12u) & 15u))
            {
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3198 = _2917;
                float _3199 = _2919;
                float _3200 = _2921;
                float _3201 = _2923;
                float _3202 = _2925;
                float _3203 = _2927;
                uint _3204 = _2934;
                uint _3213;
                bool _3214;
                for (;;)
                {
                    _3213 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                    _3214 = _3213 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3214)
                    {
                        frontier_phi_77_pred = _3203;
                        frontier_phi_77_pred_1 = _3202;
                        frontier_phi_77_pred_2 = _3201;
                        frontier_phi_77_pred_3 = _3200;
                        frontier_phi_77_pred_4 = _3199;
                        frontier_phi_77_pred_5 = _3198;
                    }
                    else
                    {
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        uint _3426 = _3213;
                        uint _3427;
                        vec4 _3452;
                        float _3453;
                        vec4 _3468;
                        vec3 _3480;
                        vec4 _3495;
                        vec4 _3510;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3437 = ((_3204 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3426));
                            _3427 = (_3426 + 4294967295u) & _3426;
                            uint _3439 = _3437 * 40u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3453 = _3452.w;
                            uint _3455 = (_3437 * 40u) + 4u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3437 * 40u) + 8u;
                            _3480 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x));
                            uint _3482 = (_3437 * 40u) + 16u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3437 * 40u) + 20u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3437 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3437 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_2772, _3544.z, fma(_2771, _3544.y, _3544.x * _2770)) + _3544.w;
                            _3557 = !((fma(_2772, _3525.z, fma(_2771, _3525.y, _3525.x * _2770)) + _3525.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3452.x - _2770;
                                float _3585 = _3452.y - _2771;
                                float _3586 = _3452.z - _2772;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3453 * _3453));
                                float _4768 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3602 = sqrt(_3587) * _3468.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_1047, _1050, _1053))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_2772, _3495.z, fma(_2771, _3495.y, _3495.x * _2770)) + _3495.w) / _3556;
                                float _3616 = (fma(_2772, _3510.z, fma(_2771, _3510.y, _3510.x * _2770)) + _3510.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4784 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _1107;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3064;
                                float _3646 = _3592 - _3065;
                                float _3647 = _3593 - _3066;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3064, (-0.0) - _3065, (-0.0) - _3066));
                                float _4795 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3659 = dot(vec3(_1047, _1050, _1053), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4806 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_1047, _1050, _1053), vec3(_3591, _3592, _3593))) + _3668;
                                float _4817 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4828 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3622 * _3468.y;
                                frontier_phi_83_pred_1 = _3622 * _3468.x;
                                frontier_phi_83_pred_2 = _3696 * _3480.z;
                                frontier_phi_83_pred_3 = _3696 * _3480.y;
                                frontier_phi_83_pred_4 = _3696 * _3480.x;
                                frontier_phi_83_pred_5 = _3622 * _3468.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3704 = frontier_phi_83_pred;
                            _3703 = frontier_phi_83_pred_1;
                            _3702 = frontier_phi_83_pred_2;
                            _3701 = frontier_phi_83_pred_3;
                            _3700 = frontier_phi_83_pred_4;
                            _3705 = frontier_phi_83_pred_5;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            if (_3427 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3427;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3412;
                        frontier_phi_77_pred_1 = _3411;
                        frontier_phi_77_pred_2 = _3410;
                        frontier_phi_77_pred_3 = _3409;
                        frontier_phi_77_pred_4 = _3408;
                        frontier_phi_77_pred_5 = _3407;
                    }
                    _3049 = frontier_phi_77_pred;
                    _3047 = frontier_phi_77_pred_1;
                    _3045 = frontier_phi_77_pred_2;
                    _3043 = frontier_phi_77_pred_3;
                    _3041 = frontier_phi_77_pred_4;
                    _3039 = frontier_phi_77_pred_5;
                    uint _3205 = _3204 + 1u;
                    if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3198 = _3039;
                        _3199 = _3041;
                        _3200 = _3043;
                        _3201 = _3045;
                        _3202 = _3047;
                        _3203 = _3049;
                        _3204 = _3205;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3043;
                frontier_phi_58_59_ladder_1 = _3049;
                frontier_phi_58_59_ladder_2 = _3047;
                frontier_phi_58_59_ladder_3 = _3045;
                frontier_phi_58_59_ladder_4 = _3041;
                frontier_phi_58_59_ladder_5 = _3039;
            }
            else
            {
                frontier_phi_58_59_ladder = _2921;
                frontier_phi_58_59_ladder_1 = _2927;
                frontier_phi_58_59_ladder_2 = _2925;
                frontier_phi_58_59_ladder_3 = _2923;
                frontier_phi_58_59_ladder_4 = _2919;
                frontier_phi_58_59_ladder_5 = _2917;
            }
            _3038 = frontier_phi_58_59_ladder_5;
            _3040 = frontier_phi_58_59_ladder_4;
            _3042 = frontier_phi_58_59_ladder;
            _3044 = frontier_phi_58_59_ladder_3;
            _3046 = frontier_phi_58_59_ladder_2;
            _3048 = frontier_phi_58_59_ladder_1;
        }
        float _3053 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2829 = (_3053 * _3044) + _2284;
        _2831 = (_3053 * _3046) + _2286;
        _2833 = (_3053 * _3048) + _2288;
        _2835 = ((_3038 * 0.039999999105930328369140625) * _3053) + _2614;
        _2837 = ((_3040 * 0.039999999105930328369140625) * _3053) + _2616;
        _2839 = ((_3042 * 0.039999999105930328369140625) * _3053) + _2618;
    }
    else
    {
        _2829 = _2284;
        _2831 = _2286;
        _2833 = _2288;
        _2835 = _2614;
        _2837 = _2616;
        _2839 = _2618;
    }
    float _4844 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4855 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4866 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2856 = ((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2829 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1091))) + ((_2835 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _2857 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2831 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1091))) + ((_2837 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _2858 = ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2833 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1091))) + ((_2839 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    uint _2859 = _280 + 6u;
    float _2867 = _1028 / cbSceneParam._m0[86u].x;
    float _2868 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _2942 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _2943 = _2942 / _950;
        float _2954 = _2943 * _1001;
        float _2955 = _1002 * _2943;
        float _2956 = (-0.0) - _2955;
        float _2958 = _2943 * _1003;
        float _2960 = (cbSceneParam._m0[77u].w * _2956) / _2942;
        float _2961 = _2960 + cbSceneParam._m0[79u].w;
        float _2962 = cbSceneParam._m0[79u].w - _2955;
        float _2968 = sqrt(((_2954 * _2954) + (_2955 * _2955)) + (_2958 * _2958));
        float _2971 = (1.0 - (cbSceneParam._m0[77u].w / _2942)) * _2968;
        float _2976 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2978 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3155;
        if (abs((_2956 - _2960) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3155 = ((((_2961 > 0.0) ? exp2(_2976 * _2961) : (2.0 - exp2(_2978 * _2961))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2971;
        }
        else
        {
            float _3099 = 1.0 / cbSceneParam._m0[80u].x;
            float _3100 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : max(_2961, _2962));
            float _3101 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : min(_2961, _2962));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            _3155 = ((abs(_2968 / _2956) * cbSceneParam._m0[80u].y) * ((((_3110 - _3111) * 2.0) - ((exp2(_2976 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0)))) - exp2(_2976 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))))) * _3099)) - ((exp2(_2978 * _3110) - exp2(_2978 * _3111)) * _3099))) + (_2971 * cbSceneParam._m0[80u].z);
        }
        vec4 _3157 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3166 = exp2((_3155 * (-1.44269502162933349609375)) * (1.0 - _3157.w));
        float _3167 = log2(_3166);
        float _3183 = log2(_2887);
        _2980 = (exp2(_3183 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].x)) * _3157.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2982 = (exp2(_3183 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].y)) * _3157.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2984 = (exp2(_3183 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].z)) * _3157.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2986 = _3166 * _2887;
    }
    else
    {
        _2980 = _2884;
        _2982 = _2885;
        _2984 = _2886;
        _2986 = _2887;
    }
    bool _3193;
    vec4 _2996;
    vec4 _3018;
    float _3020;
    float _3024;
    float _3025;
    float _3026;
    float _3027;
    bool _3037;
    for (;;)
    {
        _2996 = cbMatDynParam._m0[0u];
        float _2998 = roundEven(_2996.y);
        bool _2999 = _2998 == 3.0;
        float _3000 = log2(_2986);
        float _3007 = exp2(_3000 * cbSceneParam._m0[78u].x) * _2856;
        float _3008 = exp2(_3000 * cbSceneParam._m0[78u].y) * _2857;
        float _3009 = exp2(_3000 * cbSceneParam._m0[78u].z) * _2858;
        float _3016 = _1017 + (-0.5);
        _3018 = cbMtdParam._m0[1u];
        _3020 = _3018.y * _3016;
        float _3023 = (_2998 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3024 = _3023 * (_2999 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2980)));
        _3025 = _3023 * (_2999 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2982)));
        _3026 = _3023 * (_2999 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2984)));
        _3027 = _3016 * 0.999000012874603271484375;
        _3037 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3037)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3027) < 0.5)
            {
                _3193 = true;
                break;
            }
        }
        uint _3134 = _1066 + uint(_2996.w);
        if ((cbInstanceData._m0[_3134].w < 1.0) && ((cbInstanceData._m0[_3134].w + _3027) < 0.5))
        {
            _3193 = true;
            break;
        }
        if ((_3020 + 1.0) < _3018.x)
        {
            _3193 = true;
            break;
        }
        _3193 = false;
        break;
    }
    float _3398;
    if (_3193)
    {
        discard_state = true;
        _3398 = 0.0;
    }
    else
    {
        _3398 = cbInstanceData._m0[_2859].w;
    }
    SV_Target.x = _3024;
    SV_Target.y = _3025;
    SV_Target.z = _3026;
    SV_Target.w = _3398;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
    discard_exit();
}


