#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1431;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3758 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3769 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3780 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[24u].z) + _428) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3791 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _453 = (_446 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _454 = (_446 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _455 = (_446 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[24u].z) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3802 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _293) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _294) + cbTextureTilingScale._m0[24u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _565 = _563.x;
    float _575 = dot(vec4(_565, _563.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _587 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _376.z) * 2.0) - ((((_565 - _575) * cbMtdParam._m0[24u].z) + _575) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3813 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _595 = (_588 * ((_546.x * cbMtdParam._m0[14u].x) - _526)) + _526;
    float _596 = (_588 * ((_546.y * cbMtdParam._m0[14u].y) - _527)) + _527;
    float _597 = (_588 * ((_546.z * cbMtdParam._m0[14u].z) - _528)) + _528;
    float _601 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _595;
    float _604 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _596;
    float _607 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _597;
    float _614 = ((_595 - _601) * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) + _601;
    float _615 = ((_596 - _604) * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) + _604;
    float _616 = ((_597 - _607) * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) + _607;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _677 = _675.x;
    float _678 = _675.y;
    float _679 = _675.z;
    float _686 = ((_658.x - _677) * _446) + _677;
    float _687 = ((_658.y - _678) * _446) + _678;
    float _688 = ((_658.z - _679) * _446) + _679;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_700.x - _686) * _519) + _686;
    float _712 = ((_700.y - _687) * _519) + _687;
    float _713 = ((_700.z - _688) * _519) + _688;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _293) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _294) + cbTextureTilingScale._m0[23u].w));
    float _738 = ((_725.z - _713) * _588) + _713;
    float _741 = ((((_725.x - _711) * _588) + _711) * 2.0) + (-1.0);
    float _742 = ((((_725.y - _712) * _588) + _712) * 2.0) + (-1.0);
    float _743 = dot(vec2(_741, _742), vec2(_741, _742));
    float _3824 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _748 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _778 = (_741 + ((((_633.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_766.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _779 = (_742 + ((((_633.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_766.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _782 = fma(_748, _241, fma(_779, _248, _778 * _234));
    float _785 = fma(_748, _242, fma(_779, _249, _778 * _235));
    float _788 = fma(_748, _243, fma(_779, _250, _778 * _236));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _828 = (cbMtdParam._m0[19u].x + dot(vec4(_792 * _782, _792 * _785, _792 * _788, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_821 - _822) * cbMtdParam._m0[24u].w) + _822) * cbMtdParam._m0[21u].z);
    float _3835 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _836 = (_829 * (cbMtdParam._m0[17u].x - _614)) + _614;
    float _837 = (_829 * (cbMtdParam._m0[17u].y - _615)) + _615;
    float _838 = (_829 * (cbMtdParam._m0[17u].z - _616)) + _616;
    float _843 = (((_633.z - _738) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _738;
    float _847 = ((_766.z - _843) * cbMtdParam._m0[19u].w) + _843;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _867 = (_860.x * 2.0) + (-1.0);
    float _868 = (_860.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _3846 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = ((_860.z - _847) * _829) + _847;
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) - _748) * _829) + _748;
    float _890 = (((_867 - _778) * _829) + _778) + (cbMtdParam._m0[21u].x * _778);
    float _891 = (((_868 - _779) * _829) + _779) + (cbMtdParam._m0[21u].x * _779);
    float _895 = cbMtdParam._m0[22u].x + _766.w;
    float _898 = fma(_887, _241, fma(_891, _248, _890 * _234));
    float _901 = fma(_887, _242, fma(_891, _249, _890 * _235));
    float _904 = fma(_887, _243, fma(_891, _250, _890 * _236));
    float _908 = inversesqrt(dot(vec3(_898, _901, _904), vec3(_898, _901, _904)));
    float _909 = _908 * _898;
    float _910 = _908 * _901;
    float _911 = _908 * _904;
    float _3857 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _912 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _3879 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3890 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _3901 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _930 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _982 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _972);
    float _983 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _972);
    float _984 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _972);
    float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
    float _989 = _982 * _988;
    float _990 = _983 * _988;
    float _991 = _984 * _988;
    float _997 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _998 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1016 = fma(_911, cbSceneParam._m0[5u].z, fma(_910, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _909));
    float _1019 = fma(_911, cbSceneParam._m0[6u].z, fma(_910, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _909));
    float _1022 = fma(_911, cbSceneParam._m0[7u].z, fma(_910, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _909));
    uint _1036 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _3912 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _997, cbSceneParam._m0[86u].y * _998));
    float _1060 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * TEXCOORD_5.w) * _1056.x;
    float _1061 = dot(vec3(_909, _910, _911), vec3(_989, _990, _991));
    float _1064 = _1061 * 2.0;
    float _1068 = (_1064 * _909) - _989;
    float _1069 = (_1064 * _910) - _990;
    float _1070 = (_1064 * _911) - _991;
    float _1074 = abs(dot(vec3(_989, _990, _991), vec3(_909, _910, _911)));
    float _3945 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1076 = sqrt(_912);
    float _1089 = exp2((_1076 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1076 * 3.0));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1159 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1163 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1188 = _1121 + _909;
        float _1189 = _1125 + _910;
        float _1190 = _1129 + _911;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_909, _910, _911), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3993 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_909, _910, _911), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4026 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_909, _910, _911), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4059 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1472 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1476 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1499 = _1121 + _909;
        float _1500 = _1125 + _910;
        float _1501 = _1129 + _911;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_909, _910, _911), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4122 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_909, _910, _911), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4155 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_909, _910, _911), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4188 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1431;
        _1738 = _1431;
        _1739 = _1431;
        _1740 = _1431;
        _1741 = _1431;
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1443)) + _1443;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1068 * 0.5;
    float _1806 = _1069 * 0.5;
    float _1807 = _1070 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _912);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1070, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068));
        float _1935 = fma(_1070, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068));
        float _1938 = fma(_1070, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1966 = frontier_phi_14_12_ladder;
        }
        float _2188;
        if (_1935 > 0.0)
        {
            _2188 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2188 = frontier_phi_23_19_ladder;
        }
        float _2434;
        if (_1938 > 0.0)
        {
            _2434 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2434 = frontier_phi_35_30_ladder;
        }
        float _2436 = isnan(_2188) ? _1966 : (isnan(_1966) ? _2188 : min(_1966, _2188));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1932) + _1921;
        float _2442 = (_2437 * _1935) + _1925;
        float _2443 = (_2437 * _1938) + _1929;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2444;
        float _2448 = _2444 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 > _2448) || ((_2442 < _2446) || ((_2441 < _2446) || (_2441 > _2448))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_13_35_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_13_35_ladder_2;
        _1956 = frontier_phi_13_35_ladder_1;
        _1958 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1068, _1069, _1070), _1874);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _912);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1070, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068));
        float _2031 = fma(_1070, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068));
        float _2034 = fma(_1070, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068));
        float _2193;
        if (_2028 > 0.0)
        {
            _2193 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2193 = frontier_phi_25_21_ladder;
        }
        float _2461;
        if (_2031 > 0.0)
        {
            _2461 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2461 = frontier_phi_37_32_ladder;
        }
        float _2666;
        if (_2034 > 0.0)
        {
            _2666 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2666 = frontier_phi_46_43_ladder;
        }
        float _2668 = isnan(_2461) ? _2193 : (isnan(_2193) ? _2461 : min(_2193, _2461));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _2028) + _2017;
        float _2674 = (_2669 * _2031) + _2021;
        float _2675 = (_2669 * _2034) + _2025;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_22_46_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_22_46_ladder_2;
        _2055 = frontier_phi_22_46_ladder_1;
        _2057 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1068, _1069, _1070), _1963);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2069 = ((((1.0 - _1089) * ((_1076 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1089 * _1076)) * _1060;
    float _2070 = _2069 * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2071 = _2069 * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2072 = _2069 * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    vec4 _2089 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_997, _998));
    float _2091 = _2089.w;
    float _2103 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2091);
    float _2104 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2091);
    float _2105 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2091);
    uvec4 _2109 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2111 = _2109.x * 14u;
    uint _2112 = _2111 + 13u;
    float _2119 = _1060 + (-1.0);
    float _2124 = (cbLight._m0[_2112].x * _2119) + 1.0;
    float _2125 = (cbLight._m0[_2112].y * _2119) + 1.0;
    float _2126 = (cbLight._m0[_2112].z * _2119) + 1.0;
    float _2127 = (cbLight._m0[_2112].w * _2119) + 1.0;
    uint _2128 = _2111 + 5u;
    float _2134 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2138 = _2111 + 4u;
    float _2147 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2151 = _2111 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_909, _910, _911));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_909, _910, _911));
    float _4324 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4335 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2128].x * _2134) * _2172) + (((cbLight._m0[_2138].x * _2103) * _2147) * _2170);
    float _2180 = ((_2134 * cbLight._m0[_2128].y) * _2172) + (((cbLight._m0[_2138].y * _2104) * _2147) * _2170);
    float _2181 = ((_2134 * cbLight._m0[_2128].z) * _2172) + (((cbLight._m0[_2138].z * _2105) * _2147) * _2170);
    uvec4 _2185 = floatBitsToUint(cbLight._m0[_2111 + 12u]);
    bool _2187 = _2185.x == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2187)
    {
        _2198 = _2179;
        _2200 = _2180;
        _2202 = _2181;
    }
    else
    {
        uint _2206 = _2111 + 6u;
        float _2222 = (dot(vec3(cbLight._m0[_2111 + 2u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4346 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2225 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2198 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _2179;
        _2200 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _2180;
        _2202 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _2181;
    }
    bool _2205 = _2185.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2205)
    {
        _2243 = _2198;
        _2245 = _2200;
        _2247 = _2202;
    }
    else
    {
        uint _2405 = _2111 + 7u;
        float _2421 = (dot(vec3(cbLight._m0[_2111 + 3u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2422 = _2421 * _2421;
        float _4362 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2423 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2424 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2243 = (((cbLight._m0[_2405].x * 0.3183098733425140380859375) * _2423) * _2424) + _2198;
        _2245 = (((cbLight._m0[_2405].y * 0.3183098733425140380859375) * _2423) * _2424) + _2200;
        _2247 = (((cbLight._m0[_2405].z * 0.3183098733425140380859375) * _2423) * _2424) + _2202;
    }
    uint _2250 = _2111 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _912) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2111].x + _989;
    float _2266 = cbLight._m0[_2111].y + _990;
    float _2267 = cbLight._m0[_2111].z + _991;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2111].xyz));
    float _4378 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _2279 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2280 = dot(vec3(_909, _910, _911), vec3(_2272, _2273, _2274));
    float _4400 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2272, _2273, _2274));
    float _4411 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2304 = 1.0 - _2264;
    float _2315 = (0.5 / (((_2279 * ((_2278 * _2304) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2304) + _2264) * _2278))) * _2278;
    float _4422 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2331 = _2111 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _912) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2151].x + _989;
    float _2345 = cbLight._m0[_2151].y + _990;
    float _2346 = cbLight._m0[_2151].z + _991;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2151].xyz));
    float _4433 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2358 = dot(vec3(_909, _910, _911), vec3(_2351, _2352, _2353));
    float _4444 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2351, _2352, _2353));
    float _4455 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2380 = 1.0 - _2343;
    float _2390 = (0.5 / (((_2279 * ((_2357 * _2380) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2380) + _2343) * _2357))) * _2357;
    float _4466 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2402 = (((_2379 * cbLight._m0[_2331].x) * _2392) * _2134) + ((((cbLight._m0[_2250].x * _2103) * _2303) * _2317) * _2147);
    float _2403 = (((_2379 * cbLight._m0[_2331].y) * _2392) * _2134) + ((((cbLight._m0[_2250].y * _2104) * _2303) * _2317) * _2147);
    float _2404 = (((_2379 * cbLight._m0[_2331].z) * _2392) * _2134) + ((((cbLight._m0[_2250].z * _2105) * _2303) * _2317) * _2147);
    float _2466;
    float _2468;
    float _2470;
    if (_2187)
    {
        _2466 = _2402;
        _2468 = _2403;
        _2470 = _2404;
    }
    else
    {
        uint _2472 = _2111 + 2u;
        uint _2476 = _2111 + 10u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _912) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _989;
        float _2493 = cbLight._m0[_2472].y + _990;
        float _2494 = cbLight._m0[_2472].z + _991;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2472].xyz));
        float _4477 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2506 = dot(vec3(_909, _910, _911), vec3(_2499, _2500, _2501));
        float _4488 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4499 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2279 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2528) + _2491) * _2505))) * _2505;
        float _4510 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2466 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2402;
        _2468 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2403;
        _2470 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2404;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2205)
    {
        _2576 = _2466;
        _2578 = _2468;
        _2580 = _2470;
    }
    else
    {
        uint _2587 = _2111 + 3u;
        uint _2591 = _2111 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _912) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _989;
        float _2608 = cbLight._m0[_2587].y + _990;
        float _2609 = cbLight._m0[_2587].z + _991;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2587].xyz));
        float _4526 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2621 = dot(vec3(_909, _910, _911), vec3(_2614, _2615, _2616));
        float _4537 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4548 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2643 = 1.0 - _2606;
        float _2653 = (0.5 / (((_2279 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2643) + _2606) * _2620))) * _2620;
        float _4559 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2576 = (((_2642 * cbLight._m0[_2591].x) * _2655) * _2656) + _2466;
        _2578 = (((_2642 * cbLight._m0[_2591].y) * _2655) * _2656) + _2468;
        _2580 = (((_2642 * cbLight._m0[_2591].z) * _2655) * _2656) + _2470;
    }
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_2109.y == 0u)
    {
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2731;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2731;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2731;
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.x;
        uint _2758 = uint((float(_2746.y) * floor(float(uint(cbSceneParam._m0[85u].y * _998) / _2747))) + floor(float(uint(cbSceneParam._m0[85u].x * _997) / _2747)));
        float _2768 = (log2(_2734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2769 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        uint _2772 = uint(isnan(14.0) ? _2769 : (isnan(_2769) ? 14.0 : min(_2769, 14.0)));
        uvec4 _2777 = texelFetch(g_lightClusterGridBuffer, int(((_2772 << 2u) + (_2758 << 6u)) >> 2u));
        uint _2778 = _2777.x;
        uint _2779 = _2746.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2779 >> 4u) & 15u)) + 4294967295u) & _2778) == 0u) || ((_2779 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3040)
                {
                    frontier_phi_61_pred = _3024;
                    frontier_phi_61_pred_1 = _3029;
                    frontier_phi_61_pred_2 = _3028;
                    frontier_phi_61_pred_3 = _3027;
                    frontier_phi_61_pred_4 = _3026;
                    frontier_phi_61_pred_5 = _3025;
                }
                else
                {
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    uint _3154;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3039;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3158 = uint(findLSB(_3154)) + (_3030 << 5u);
                        uint _3155 = (_3154 + 4294967295u) & _3154;
                        uint _3160 = _3158 * 48u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3180 = (_3158 * 48u) + 4u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3199 = (_3158 * 48u) + 8u;
                        vec3 _3210 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x));
                        float _3214 = _3174.x - _2732;
                        float _3215 = _3174.y - _2733;
                        float _3216 = _3174.z - _2734;
                        float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                        float _3220 = inversesqrt(_3217);
                        float _3221 = _3220 * _3214;
                        float _3222 = _3220 * _3215;
                        float _3223 = _3220 * _3216;
                        float _3224 = dot(vec3(_1016, _1019, _1022), vec3(_3221, _3222, _3223));
                        float _3229 = 1.0 - (_3217 * _3174.w);
                        float _4585 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3231 = sqrt(_3217) * _3193.w;
                        float _3234 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3224) + _3235;
                        float _3241 = _3231 * _3231;
                        float _3245 = ((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3230) / ((_3241 * 0.699999988079071044921875) + 1.0);
                        float _3249 = (-0.0) - _2732;
                        float _3250 = (-0.0) - _2733;
                        float _3251 = (-0.0) - _2734;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3266 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                        float _3267 = 1.0 - _1076;
                        float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                        float _3275 = _3274 * _3274;
                        float _3276 = _3275 * _3275;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3287 = dot(vec3(_1016, _1019, _1022), vec3(_3256, _3257, _3258));
                        float _4601 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3291 = dot(vec3(_1016, _1019, _1022), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                        float _4612 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                        float _3299 = _3234 * _3275;
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3224) + _3300;
                        float _4623 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3305 = 1.0 - _3275;
                        float _3315 = (0.5 / (((_3304 * ((_3290 * _3305) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3275) * _3290))) * _3304;
                        float _4634 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3326 = (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3298 * _3298) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125))) * _3230;
                        _3083 = (_3245 * _3193.x) + _3151;
                        _3084 = (_3245 * _3193.y) + _3152;
                        _3085 = (_3245 * _3193.z) + _3153;
                        _3080 = (_3326 * _3210.x) + _3148;
                        _3081 = (_3326 * _3210.y) + _3149;
                        _3082 = (_3326 * _3210.z) + _3150;
                        if (_3155 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3155;
                        }
                    }
                    frontier_phi_61_pred = _3080;
                    frontier_phi_61_pred_1 = _3085;
                    frontier_phi_61_pred_2 = _3084;
                    frontier_phi_61_pred_3 = _3083;
                    frontier_phi_61_pred_4 = _3082;
                    frontier_phi_61_pred_5 = _3081;
                }
                _2880 = frontier_phi_61_pred;
                _2890 = frontier_phi_61_pred_1;
                _2888 = frontier_phi_61_pred_2;
                _2886 = frontier_phi_61_pred_3;
                _2884 = frontier_phi_61_pred_4;
                _2882 = frontier_phi_61_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2880;
                    _3025 = _2882;
                    _3026 = _2884;
                    _3027 = _2886;
                    _3028 = _2888;
                    _3029 = _2890;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2896) & _2778) == 0u)
        {
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
            float _3018 = _3017 * _2732;
            float _3019 = _3017 * _2733;
            float _3020 = _3017 * _2734;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3131 = _2879;
                float _3132 = _2881;
                float _3133 = _2883;
                float _3134 = _2885;
                float _3135 = _2887;
                float _3136 = _2889;
                uint _3137 = _2896;
                uint _3146;
                bool _3147;
                for (;;)
                {
                    _3146 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                    _3147 = _3146 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3147)
                    {
                        frontier_phi_67_pred = _3134;
                        frontier_phi_67_pred_1 = _3135;
                        frontier_phi_67_pred_2 = _3136;
                        frontier_phi_67_pred_3 = _3133;
                        frontier_phi_67_pred_4 = _3132;
                        frontier_phi_67_pred_5 = _3131;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        uint _3350 = _3146;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        vec3 _3404;
                        vec4 _3419;
                        vec4 _3434;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3361 = ((_3137 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3361 * 40u) + 8u;
                            _3404 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x));
                            uint _3406 = (_3361 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3361 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3361 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3361 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_2734, _3468.z, fma(_2733, _3468.y, _3468.x * _2732)) + _3468.w;
                            _3481 = !((fma(_2734, _3449.z, fma(_2733, _3449.y, _3449.x * _2732)) + _3449.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3376.x - _2732;
                                float _3509 = _3376.y - _2733;
                                float _3510 = _3376.z - _2734;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3377 * _3377));
                                float _4645 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3526 = sqrt(_3511) * _3392.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_1016, _1019, _1022))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_2734, _3419.z, fma(_2733, _3419.y, _3419.x * _2732)) + _3419.w) / _3480;
                                float _3540 = (fma(_2734, _3434.z, fma(_2733, _3434.y, _3434.x * _2732)) + _3434.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4661 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _1076;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _3018;
                                float _3570 = _3516 - _3019;
                                float _3571 = _3517 - _3020;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4672 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3583 = dot(vec3(_1016, _1019, _1022), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4683 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_1016, _1019, _1022), vec3(_3515, _3516, _3517))) + _3592;
                                float _4694 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4705 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3620 * _3404.x;
                                frontier_phi_73_pred_1 = _3620 * _3404.y;
                                frontier_phi_73_pred_2 = _3546 * _3392.z;
                                frontier_phi_73_pred_3 = _3546 * _3392.y;
                                frontier_phi_73_pred_4 = _3546 * _3392.x;
                                frontier_phi_73_pred_5 = _3620 * _3404.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3624 = frontier_phi_73_pred;
                            _3625 = frontier_phi_73_pred_1;
                            _3629 = frontier_phi_73_pred_2;
                            _3628 = frontier_phi_73_pred_3;
                            _3627 = frontier_phi_73_pred_4;
                            _3626 = frontier_phi_73_pred_5;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3334;
                        frontier_phi_67_pred_1 = _3335;
                        frontier_phi_67_pred_2 = _3336;
                        frontier_phi_67_pred_3 = _3333;
                        frontier_phi_67_pred_4 = _3332;
                        frontier_phi_67_pred_5 = _3331;
                    }
                    _2999 = frontier_phi_67_pred;
                    _3001 = frontier_phi_67_pred_1;
                    _3003 = frontier_phi_67_pred_2;
                    _2997 = frontier_phi_67_pred_3;
                    _2995 = frontier_phi_67_pred_4;
                    _2993 = frontier_phi_67_pred_5;
                    uint _3138 = _3137 + 1u;
                    if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3131 = _2993;
                        _3132 = _2995;
                        _3133 = _2997;
                        _3134 = _2999;
                        _3135 = _3001;
                        _3136 = _3003;
                        _3137 = _3138;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3001;
                frontier_phi_55_56_ladder_1 = _3003;
                frontier_phi_55_56_ladder_2 = _2999;
                frontier_phi_55_56_ladder_3 = _2997;
                frontier_phi_55_56_ladder_4 = _2995;
                frontier_phi_55_56_ladder_5 = _2993;
            }
            else
            {
                frontier_phi_55_56_ladder = _2887;
                frontier_phi_55_56_ladder_1 = _2889;
                frontier_phi_55_56_ladder_2 = _2885;
                frontier_phi_55_56_ladder_3 = _2883;
                frontier_phi_55_56_ladder_4 = _2881;
                frontier_phi_55_56_ladder_5 = _2879;
            }
            _2992 = frontier_phi_55_56_ladder_5;
            _2994 = frontier_phi_55_56_ladder_4;
            _2996 = frontier_phi_55_56_ladder_3;
            _2998 = frontier_phi_55_56_ladder_2;
            _3000 = frontier_phi_55_56_ladder;
            _3002 = frontier_phi_55_56_ladder_1;
        }
        float _3007 = isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0));
        _2791 = (_3007 * _2998) + _2243;
        _2793 = (_3007 * _3000) + _2245;
        _2795 = (_3007 * _3002) + _2247;
        _2797 = ((_2992 * 0.039999999105930328369140625) * _3007) + _2576;
        _2799 = ((_2994 * 0.039999999105930328369140625) * _3007) + _2578;
        _2801 = ((_2996 * 0.039999999105930328369140625) * _3007) + _2580;
    }
    else
    {
        _2791 = _2243;
        _2793 = _2245;
        _2795 = _2247;
        _2797 = _2576;
        _2799 = _2578;
        _2801 = _2580;
    }
    float _4721 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4732 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4743 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    uint _2821 = _274 + 6u;
    float _2829 = _997 / cbSceneParam._m0[86u].x;
    float _2830 = _998 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _930 : (isnan(_930) ? cbSceneParam._m0[77u].w : min(_930, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_930 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_930) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _930 : min(cbSceneParam._m0[80u].w, _930));
        float _2905 = _2904 / _930;
        float _2916 = _2905 * _982;
        float _2917 = _983 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2920 = _2905 * _984;
        float _2922 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2917;
        float _2930 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2918 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3055 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3093 = ((abs(_2930 / _2918) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2940 * _3064) - exp2(_2940 * _3065)) * _3053))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2849);
        _2942 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2944 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2946 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2948 = _3104 * _2849;
    }
    else
    {
        _2942 = _2846;
        _2944 = _2847;
        _2946 = _2848;
        _2948 = _2849;
    }
    float _2960 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2961 = _2960 == 3.0;
    float _2962 = log2(_2948);
    float _2969 = exp2(_2962 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2791 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1060))) + ((_2797 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2962 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2793 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1060))) + ((_2799 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2971 = exp2(_2962 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2795 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1060))) + ((_2801 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2980 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2980 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.y = _2980 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.z = _2980 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.w = cbInstanceData._m0[_2821].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
}


