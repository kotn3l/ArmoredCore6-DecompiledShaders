#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1542;
float _4181;
float _4182;
float _4183;
float _4184;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4193 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _452 = (_445 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _453 = (_445 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _454 = (_445 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4204 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _564 = _562.x;
    float _574 = dot(vec4(_564, _562.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _586 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _373.z) * 2.0) - ((((_564 - _574) * cbMtdParam._m0[24u].z) + _574) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4215 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _600 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_587 * ((_545.x * cbMtdParam._m0[14u].x) - _525)) + _525);
    float _603 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_587 * ((_545.y * cbMtdParam._m0[14u].y) - _526)) + _526);
    float _606 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_587 * ((_545.z * cbMtdParam._m0[14u].z) - _527)) + _527);
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _445) + _643;
    float _653 = ((_624.y - _644) * _445) + _644;
    float _654 = ((_624.z - _645) * _445) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_666.x - _652) * _518) + _652;
    float _678 = ((_666.y - _653) * _518) + _653;
    float _679 = ((_666.z - _654) * _518) + _654;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _704 = ((_691.z - _679) * _587) + _679;
    float _707 = ((((_691.x - _677) * _587) + _677) * 2.0) + (-1.0);
    float _709 = ((((_691.y - _678) * _587) + _678) * 2.0) + (-1.0);
    float _710 = dot(vec2(_707, _709), vec2(_707, _709));
    float _4226 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _715 = sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _741 = (((_729.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _742 = (((_729.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _709;
    float _745 = fma(_715, _253, fma(_742, _260, _741 * _246));
    float _748 = fma(_715, _254, fma(_742, _261, _741 * _247));
    float _751 = fma(_715, _255, fma(_742, _262, _741 * _248));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _784 = _782.x;
    float _785 = 1.0 - _784;
    float _791 = (cbMtdParam._m0[19u].x + dot(vec4(_755 * _745, _755 * _748, _755 * _751, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_784 - _785) * cbMtdParam._m0[24u].w) + _785) * cbMtdParam._m0[21u].z);
    float _4237 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _794 = (-0.0) - cbMtdParam._m0[24u].x;
    float _796 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
    float _804 = _792 - ((_792 * TEXCOORD_8.x) * _797);
    float _805 = _792 - ((_792 * TEXCOORD_8.y) * _797);
    float _806 = _792 - ((_792 * TEXCOORD_8.z) * _797);
    float _813 = (_804 * (cbMtdParam._m0[17u].x - _600)) + _600;
    float _814 = (_805 * (cbMtdParam._m0[17u].y - _603)) + _603;
    float _815 = (_806 * (cbMtdParam._m0[17u].z - _606)) + _606;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _829 = _827.x;
    float _830 = 1.0 - _829;
    float _858 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_829 - _830) * cbMtdParam._m0[24u].y) + _830) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4258 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _859 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _867 = ((((cbMtdParam._m0[10u].x - _813) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _859) + _813;
    float _868 = ((((cbMtdParam._m0[10u].y - _814) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _859) + _814;
    float _869 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _815)) * _859) + _815;
    float _873 = (cbMtdParam._m0[19u].w * (_729.z - _704)) + _704;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _894 = (_887.x * 2.0) + (-1.0);
    float _895 = (_887.y * 2.0) + (-1.0);
    float _896 = dot(vec2(_894, _895), vec2(_894, _895));
    float _4269 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _904 = ((_887.z - _873) * _804) + _873;
    float _907 = ((cbMtdParam._m0[23u].y - _904) * _859) + _904;
    vec4 _926 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _932 = (_926.x * 2.0) + (-1.0);
    float _933 = (_926.y * 2.0) + (-1.0);
    float _934 = dot(vec2(_932, _933), vec2(_932, _933));
    float _4280 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _949 = ((sqrt(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) - _715) * _806) + _715;
    float _952 = (((_894 - _741) * _804) + _741) + (cbMtdParam._m0[21u].x * _741);
    float _953 = (((_895 - _742) * _805) + _742) + (cbMtdParam._m0[21u].x * _742);
    float _964 = (((_932 - _952) + (_952 * cbMtdParam._m0[22u].z)) * _859) + _952;
    float _965 = (((_933 - _953) + (_953 * cbMtdParam._m0[22u].z)) * _859) + _953;
    float _966 = (_859 * (sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) - _949)) + _949;
    float _968 = cbMtdParam._m0[22u].x + _729.w;
    float _971 = fma(_966, _253, fma(_965, _260, _964 * _246));
    float _974 = fma(_966, _254, fma(_965, _261, _964 * _247));
    float _977 = fma(_966, _255, fma(_965, _262, _964 * _248));
    float _981 = inversesqrt(dot(vec3(_971, _974, _977), vec3(_971, _974, _977)));
    float _982 = _981 * _971;
    float _983 = _981 * _974;
    float _984 = _981 * _977;
    float _4291 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _985 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4313 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4324 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4335 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _1003 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1053 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1043);
    float _1054 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1043);
    float _1055 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1043);
    float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
    float _1060 = _1053 * _1059;
    float _1061 = _1054 * _1059;
    float _1062 = _1055 * _1059;
    vec4 _1067 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1069 = _1067.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1223 = sqrt(((_1053 * _1053) + (_1054 * _1054)) + (_1055 * _1055));
        float _1229 = (cbMatDynParam._m0[5u].x * _1223) + cbMatDynParam._m0[5u].y;
        float _4346 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1234 = (cbMatDynParam._m0[5u].z * _1223) + cbMatDynParam._m0[5u].w;
        float _4357 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) - _1230)) + _1230) < ((_1069 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1080 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1081 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1099 = fma(_984, cbSceneParam._m0[5u].z, fma(_983, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _982));
    float _1102 = fma(_984, cbSceneParam._m0[6u].z, fma(_983, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _982));
    float _1105 = fma(_984, cbSceneParam._m0[7u].z, fma(_983, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _982));
    uint _1118 = _265 + 9u;
    uint _1119 = _1118 + uint(cbMatDynParam._m0[0u].w);
    float _1125 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1119].x;
    float _1126 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_1119].y;
    float _1127 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_1119].z;
    float _4368 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    vec4 _1139 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1080, cbSceneParam._m0[86u].y * _1081));
    float _1143 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * TEXCOORD_5.w) * _1139.x;
    float _1144 = dot(vec3(_982, _983, _984), vec3(_1060, _1061, _1062));
    float _1147 = _1144 * 2.0;
    float _1151 = (_1147 * _982) - _1060;
    float _1152 = (_1147 * _983) - _1061;
    float _1153 = (_1147 * _984) - _1062;
    float _1157 = abs(dot(vec3(_1060, _1061, _1062), vec3(_982, _983, _984)));
    float _4401 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1159 = sqrt(_985);
    float _1172 = exp2((_1159 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1159 * 3.0));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1212 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1541;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1266 = fma(_1212, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1204));
        float _1270 = fma(_1212, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1204));
        float _1274 = fma(_1212, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1204));
        float _1299 = _1204 + _982;
        float _1300 = _1208 + _983;
        float _1301 = _1212 + _984;
        float _1311 = fma(_1301, cbModelParam._m0[26u].z, fma(_1300, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1299)) - _1266;
        float _1312 = fma(_1301, cbModelParam._m0[27u].z, fma(_1300, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1299)) - _1270;
        float _1313 = fma(_1301, cbModelParam._m0[28u].z, fma(_1300, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1299)) - _1274;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1266 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1270 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[34u].z) + ((((((_1274 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1369 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1335.x + (-0.5));
        float _1371 = _1369 * (_1335.y + (-0.5));
        float _1372 = _1369 * (_1335.z + (-0.5));
        float _1379 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1342.x + (-0.5));
        float _1381 = _1379 * (_1342.y + (-0.5));
        float _1382 = _1379 * (_1342.z + (-0.5));
        float _1389 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1349.x + (-0.5));
        float _1391 = _1389 * (_1349.y + (-0.5));
        float _1392 = _1389 * (_1349.z + (-0.5));
        float _1399 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1356.x + (-0.5));
        float _1401 = _1399 * (_1356.y + (-0.5));
        float _1402 = _1399 * (_1356.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1423 = (dot(vec3(_982, _983, _984), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1433 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4449 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1435 + 1.0))) + _1440) * _1403;
        float _1450 = _1371 * 0.5;
        float _1451 = _1381 * 0.5;
        float _1452 = _1391 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_982, _983, _984), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4482 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1477 + 1.0))) + _1482) * _1404;
        float _1492 = _1372 * 0.5;
        float _1493 = _1382 * 0.5;
        float _1494 = _1392 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_982, _983, _984), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4493 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4504 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4515 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_1519 + 1.0))) + _1524) * _1405;
        _1541 = _1372;
        _1543 = _1371;
        _1544 = _1370;
        _1545 = _1382;
        _1546 = _1381;
        _1547 = _1380;
        _1548 = _1392;
        _1549 = _1391;
        _1550 = _1390;
        _1551 = _1405;
        _1552 = _1404;
        _1553 = _1403;
        _1554 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1555 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1556 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1542;
        _1543 = _1542;
        _1544 = _1542;
        _1545 = _1542;
        _1546 = _1542;
        _1547 = _1542;
        _1548 = _1542;
        _1549 = _1542;
        _1550 = _1542;
        _1551 = _1542;
        _1552 = _1542;
        _1553 = _1542;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1582 = fma(_1212, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204));
        float _1586 = fma(_1212, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204));
        float _1590 = fma(_1212, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204));
        float _1613 = _1204 + _982;
        float _1614 = _1208 + _983;
        float _1615 = _1212 + _984;
        float _1625 = fma(_1615, cbModelParam._m0[30u].z, fma(_1614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1613)) - _1582;
        float _1626 = fma(_1615, cbModelParam._m0[31u].z, fma(_1614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1613)) - _1586;
        float _1627 = fma(_1615, cbModelParam._m0[32u].z, fma(_1614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1613)) - _1590;
        float _1631 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
        float _1644 = ((_1631 * _1625) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1582 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1645 = ((_1631 * _1626) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1586 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1646 = ((_1631 * _1627) / cbModelParam._m0[35u].z) + ((((((_1590 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        float _1681 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1648.x + (-0.5));
        float _1683 = _1681 * (_1648.y + (-0.5));
        float _1684 = _1681 * (_1648.z + (-0.5));
        float _1691 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1655.x + (-0.5));
        float _1693 = _1691 * (_1655.y + (-0.5));
        float _1694 = _1691 * (_1655.z + (-0.5));
        float _1701 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1662.x + (-0.5));
        float _1703 = _1701 * (_1662.y + (-0.5));
        float _1704 = _1701 * (_1662.z + (-0.5));
        float _1711 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1669.x + (-0.5));
        float _1713 = _1711 * (_1669.y + (-0.5));
        float _1714 = _1711 * (_1669.z + (-0.5));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = _1682 * 0.5;
        float _1719 = _1692 * 0.5;
        float _1720 = _1702 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_982, _983, _984), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4556 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4567 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4578 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_1745 + 1.0))) + _1750) * _1715;
        float _1760 = _1683 * 0.5;
        float _1761 = _1693 * 0.5;
        float _1762 = _1703 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_982, _983, _984), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4589 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1716 + 9.9999997473787516355514526367188e-06);
        float _4600 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4611 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_1787 + 1.0))) + _1792) * _1716;
        float _1802 = _1684 * 0.5;
        float _1803 = _1694 * 0.5;
        float _1804 = _1704 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_982, _983, _984), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4622 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4633 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4644 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_1829 + 1.0))) + _1834) * _1717;
        _1851 = _1684;
        _1852 = _1683;
        _1853 = _1682;
        _1854 = _1694;
        _1855 = _1693;
        _1856 = _1692;
        _1857 = _1704;
        _1858 = _1703;
        _1859 = _1702;
        _1860 = _1717;
        _1861 = _1716;
        _1862 = _1715;
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1864 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
    }
    else
    {
        _1851 = _1542;
        _1852 = _1542;
        _1853 = _1542;
        _1854 = _1542;
        _1855 = _1542;
        _1856 = _1542;
        _1857 = _1542;
        _1858 = _1542;
        _1859 = _1542;
        _1860 = _1542;
        _1861 = _1542;
        _1862 = _1542;
        _1863 = 0.0;
        _1864 = 0.0;
        _1865 = 0.0;
    }
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1554)) + _1554;
    float _1876 = (cbModelParam._m0[1u].x * (_1864 - _1555)) + _1555;
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1556)) + _1556;
    float _1898 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1875));
    float _1919 = _1151 * 0.5;
    float _1920 = _1152 * 0.5;
    float _1921 = _1153 * 0.5;
    float _1922 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1925 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1852, _1855, _1858, _1861));
    float _1928 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1935 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1541, _1545, _1548, _1551));
        float _1939 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1543, _1546, _1549, _1552));
        float _1943 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1544, _1547, _1550, _1553));
        float _1950 = dot(vec4(cbModelParam._m0[39u]), vec4(_1919, _1920, _1921, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1964 = dot(vec4(cbModelParam._m0[40u]), vec4(_1919, _1920, _1921, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1977 = (_1973 * cbModelParam._m0[1u].x) + (_1962 * (1.0 - cbModelParam._m0[1u].x));
    float _1987 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _985);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1987 : min(cbModelParam._m0[25u].z, _1987));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2035 = fma(_1212, cbModelParam._m0[13u].z, fma(_1208, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1204)) + cbModelParam._m0[13u].w;
        float _2039 = fma(_1212, cbModelParam._m0[14u].z, fma(_1208, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1204)) + cbModelParam._m0[14u].w;
        float _2043 = fma(_1212, cbModelParam._m0[15u].z, fma(_1208, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1204)) + cbModelParam._m0[15u].w;
        float _2046 = fma(_1153, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1151));
        float _2049 = fma(_1153, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1151));
        float _2052 = fma(_1153, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1151));
        float _2080;
        if (_2046 > 0.0)
        {
            _2080 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2080 = frontier_phi_17_15_ladder;
        }
        float _2250;
        if (_2049 > 0.0)
        {
            _2250 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2250 = frontier_phi_26_22_ladder;
        }
        float _2545;
        if (_2052 > 0.0)
        {
            _2545 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2545 = frontier_phi_38_33_ladder;
        }
        float _2547 = isnan(_2250) ? _2080 : (isnan(_2080) ? _2250 : min(_2080, _2250));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _2046) + _2035;
        float _2553 = (_2548 * _2049) + _2039;
        float _2554 = (_2548 * _2052) + _2043;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2555;
        float _2559 = _2555 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 > _2559) || ((_2553 < _2557) || ((_2552 < _2557) || (_2552 > _2559))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2554, cbModelParam._m0[9u].z, fma(_2553, cbModelParam._m0[9u].y, _2552 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2554, cbModelParam._m0[10u].z, fma(_2553, cbModelParam._m0[10u].y, _2552 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2554, cbModelParam._m0[11u].z, fma(_2553, cbModelParam._m0[11u].y, _2552 * cbModelParam._m0[11u].x))), _1988);
            frontier_phi_16_38_ladder = _2699.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2699.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2699.x * cbModelParam._m0[1u].y;
        }
        _2068 = frontier_phi_16_38_ladder_2;
        _2070 = frontier_phi_16_38_ladder_1;
        _2072 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1151, _1152, _1153), _1988);
        _2068 = _2056.x * cbModelParam._m0[1u].y;
        _2070 = _2056.y * cbModelParam._m0[1u].y;
        _2072 = _2056.z * cbModelParam._m0[1u].y;
    }
    float _2076 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _985);
    float _2077 = isnan(_2076) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2076 : min(cbModelParam._m0[25u].w, _2076));
    float _2167;
    float _2169;
    float _2171;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2131 = fma(_1212, cbModelParam._m0[21u].z, fma(_1208, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1204)) + cbModelParam._m0[21u].w;
        float _2135 = fma(_1212, cbModelParam._m0[22u].z, fma(_1208, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1204)) + cbModelParam._m0[22u].w;
        float _2139 = fma(_1212, cbModelParam._m0[23u].z, fma(_1208, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1204)) + cbModelParam._m0[23u].w;
        float _2142 = fma(_1153, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1151));
        float _2145 = fma(_1153, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1151));
        float _2148 = fma(_1153, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1151));
        float _2255;
        if (_2142 > 0.0)
        {
            _2255 = abs((1.0 - _2131) / _2142);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2131 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2255 = frontier_phi_28_24_ladder;
        }
        float _2572;
        if (_2145 > 0.0)
        {
            _2572 = abs((1.0 - _2135) / _2145);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2135 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2572 = frontier_phi_40_35_ladder;
        }
        float _2899;
        if (_2148 > 0.0)
        {
            _2899 = abs((1.0 - _2139) / _2148);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2139 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2899 = frontier_phi_50_47_ladder;
        }
        float _2901 = isnan(_2572) ? _2255 : (isnan(_2255) ? _2572 : min(_2255, _2572));
        float _2902 = isnan(_2899) ? _2901 : (isnan(_2901) ? _2899 : min(_2901, _2899));
        float _2906 = (_2902 * _2142) + _2131;
        float _2907 = (_2902 * _2145) + _2135;
        float _2908 = (_2902 * _2148) + _2139;
        float _2909 = _2902 * 9.9999997473787516355514526367188e-05;
        float _2910 = (-1.0) - _2909;
        float _2912 = _2909 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2908 > _2912) || ((_2908 < _2910) || ((_2907 > _2912) || ((_2907 < _2910) || ((_2906 < _2910) || (_2906 > _2912))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2908, cbModelParam._m0[17u].z, fma(_2907, cbModelParam._m0[17u].y, _2906 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2908, cbModelParam._m0[18u].z, fma(_2907, cbModelParam._m0[18u].y, _2906 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2908, cbModelParam._m0[19u].z, fma(_2907, cbModelParam._m0[19u].y, _2906 * cbModelParam._m0[19u].x))), _2077);
            frontier_phi_25_50_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2167 = frontier_phi_25_50_ladder_2;
        _2169 = frontier_phi_25_50_ladder_1;
        _2171 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2151 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1151, _1152, _1153), _2077);
        _2167 = _2151.x * cbModelParam._m0[1u].z;
        _2169 = _2151.y * cbModelParam._m0[1u].z;
        _2171 = _2151.z * cbModelParam._m0[1u].z;
    }
    float _2183 = ((((1.0 - _1172) * ((_1159 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1172 * _1159)) * _1143;
    float _2184 = _2183 * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2185 = _2183 * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2186 = _2183 * ((cbModelParam._m0[1u].w * (_2171 - _2072)) + _2072);
    float _2189 = fma(_2186, cbSceneParam._m0[89u].z, fma(_2185, cbSceneParam._m0[89u].y, _2184 * cbSceneParam._m0[89u].x));
    float _2192 = fma(_2186, cbSceneParam._m0[90u].z, fma(_2185, cbSceneParam._m0[90u].y, _2184 * cbSceneParam._m0[90u].x));
    float _2195 = fma(_2186, cbSceneParam._m0[91u].z, fma(_2185, cbSceneParam._m0[91u].y, _2184 * cbSceneParam._m0[91u].x));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2237 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2242 = _2229 / _2241;
    float _2243 = _2233 / _2241;
    float _2244 = _2237 / _2241;
    float _2391;
    float _2392;
    float _2393;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2271 = ((uint(_2244 > cbSceneParam._m0[59u].y) + uint(_2244 > cbSceneParam._m0[59u].x)) + uint(_2244 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2272 = _2271 + 43u;
        uint _2280 = _2271 + 44u;
        uint _2288 = _2271 + 45u;
        uint _2296 = _2271 + 46u;
        float _2307 = fma(_2241, cbSceneParam._m0[_2272].w, fma(_2237, cbSceneParam._m0[_2272].z, fma(_2233, cbSceneParam._m0[_2272].y, _2229 * cbSceneParam._m0[_2272].x)));
        float _2311 = fma(_2241, cbSceneParam._m0[_2280].w, fma(_2237, cbSceneParam._m0[_2280].z, fma(_2233, cbSceneParam._m0[_2280].y, _2229 * cbSceneParam._m0[_2280].x)));
        float _2319 = fma(_2241, cbSceneParam._m0[_2296].w, fma(_2237, cbSceneParam._m0[_2296].z, fma(_2233, cbSceneParam._m0[_2296].y, _2229 * cbSceneParam._m0[_2296].x)));
        float _2324 = cbSceneParam._m0[33u].z * _2319;
        float _2326 = cbSceneParam._m0[33u].w * _2319;
        float _2329 = fma(_2241, cbSceneParam._m0[_2288].w, fma(_2237, cbSceneParam._m0[_2288].z, fma(_2233, cbSceneParam._m0[_2288].y, _2229 * cbSceneParam._m0[_2288].x))) / _2319;
        float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_2243 * _2243) + (_2242 * _2242)) + (_2244 * _2244))) * cbSceneParam._m0[33u].y;
        float _4770 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2384 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 + _2307) / _2319, (_2326 + _2311) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2326 + _2307) / _2319, (_2311 - _2324) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2307 - _2324) / _2319, (_2311 - _2326) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2307 - _2326) / _2319, (_2324 + _2311) / _2319), _2329), 0.0)).x), vec4(0.25)));
        _2391 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
        _2392 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
        _2393 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2391 = 1.0;
        _2392 = 1.0;
        _2393 = 1.0;
    }
    float _2457;
    float _2459;
    float _2461;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2445 = fma(_2241, cbSceneParam._m0[63u].w, fma(_2237, cbSceneParam._m0[63u].z, fma(_2233, cbSceneParam._m0[63u].y, _2229 * cbSceneParam._m0[63u].x)));
        float _2446 = fma(_2241, cbSceneParam._m0[60u].w, fma(_2237, cbSceneParam._m0[60u].z, fma(_2233, cbSceneParam._m0[60u].y, _2229 * cbSceneParam._m0[60u].x))) / _2445;
        float _2447 = fma(_2241, cbSceneParam._m0[61u].w, fma(_2237, cbSceneParam._m0[61u].z, fma(_2233, cbSceneParam._m0[61u].y, _2229 * cbSceneParam._m0[61u].x))) / _2445;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2446 >= cbSceneParam._m0[64u].x) && (_2447 >= cbSceneParam._m0[64u].y)) && (_2446 <= cbSceneParam._m0[64u].z)) && (_2447 <= cbSceneParam._m0[64u].w))
        {
            float _2585 = fma(_2241, cbSceneParam._m0[62u].w, fma(_2237, cbSceneParam._m0[62u].z, fma(_2233, cbSceneParam._m0[62u].y, _2229 * cbSceneParam._m0[62u].x))) / _2445;
            float _2589 = isnan(cbSceneParam._m0[41u].w) ? _2585 : (isnan(_2585) ? cbSceneParam._m0[41u].w : max(_2585, cbSceneParam._m0[41u].w));
            float _2632 = (cbSceneParam._m0[33u].x - sqrt(((_2243 * _2243) + (_2242 * _2242)) + (_2244 * _2244))) * cbSceneParam._m0[33u].y;
            float _4786 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
            float _2639 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2446, cbSceneParam._m0[33u].w + _2447), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2446, _2447 - cbSceneParam._m0[33u].z), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2446 - cbSceneParam._m0[33u].z, _2447 - cbSceneParam._m0[33u].w), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2446 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2447), _2589), 0.0)).x), vec4(0.25)));
            float _2643 = 1.0 - (_2639 * cbSceneParam._m0[34u].x);
            float _2644 = 1.0 - (_2639 * cbSceneParam._m0[34u].y);
            float _2645 = 1.0 - (_2639 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2645) ? _2393 : (isnan(_2393) ? _2645 : min(_2393, _2645));
            frontier_phi_37_36_ladder_1 = isnan(_2644) ? _2392 : (isnan(_2392) ? _2644 : min(_2392, _2644));
            frontier_phi_37_36_ladder_2 = isnan(_2643) ? _2391 : (isnan(_2391) ? _2643 : min(_2391, _2643));
        }
        else
        {
            frontier_phi_37_36_ladder = _2393;
            frontier_phi_37_36_ladder_1 = _2392;
            frontier_phi_37_36_ladder_2 = _2391;
        }
        _2457 = frontier_phi_37_36_ladder_2;
        _2459 = frontier_phi_37_36_ladder_1;
        _2461 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2457 = _2391;
        _2459 = _2392;
        _2461 = _2393;
    }
    uvec4 _2466 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2468 = _2466.x * 14u;
    uint _2469 = _2468 + 13u;
    float _2476 = _1143 + (-1.0);
    float _2481 = (cbLight._m0[_2469].x * _2476) + 1.0;
    float _2482 = (cbLight._m0[_2469].y * _2476) + 1.0;
    float _2483 = (cbLight._m0[_2469].z * _2476) + 1.0;
    float _2484 = (cbLight._m0[_2469].w * _2476) + 1.0;
    uint _2485 = _2468 + 5u;
    float _2491 = isnan(1.0) ? _2482 : (isnan(_2482) ? 1.0 : min(_2482, 1.0));
    uint _2495 = _2468 + 4u;
    float _2504 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
    uint _2508 = _2468 | 1u;
    float _2519 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_982, _983, _984));
    float _2522 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_982, _983, _984));
    float _4822 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _4833 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2527 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * 0.3183098733425140380859375;
    float _2529 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * 0.3183098733425140380859375;
    float _2536 = ((cbLight._m0[_2485].x * _2491) * _2529) + (((cbLight._m0[_2495].x * _2457) * _2504) * _2527);
    float _2537 = ((_2491 * cbLight._m0[_2485].y) * _2529) + (((cbLight._m0[_2495].y * _2459) * _2504) * _2527);
    float _2538 = ((_2491 * cbLight._m0[_2485].z) * _2529) + (((cbLight._m0[_2495].z * _2461) * _2504) * _2527);
    uvec4 _2542 = floatBitsToUint(cbLight._m0[_2468 + 12u]);
    bool _2544 = _2542.x == 0u;
    float _2646;
    float _2648;
    float _2650;
    if (_2544)
    {
        _2646 = _2536;
        _2648 = _2537;
        _2650 = _2538;
    }
    else
    {
        uint _2654 = _2468 + 6u;
        float _2670 = (dot(vec3(cbLight._m0[_2468 + 2u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2671 = _2670 * _2670;
        float _4844 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2672 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2673 = isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0));
        _2646 = (((cbLight._m0[_2654].x * 0.3183098733425140380859375) * _2672) * _2673) + _2536;
        _2648 = (((cbLight._m0[_2654].y * 0.3183098733425140380859375) * _2672) * _2673) + _2537;
        _2650 = (((cbLight._m0[_2654].z * 0.3183098733425140380859375) * _2672) * _2673) + _2538;
    }
    bool _2653 = _2542.y == 0u;
    float _2708;
    float _2710;
    float _2712;
    if (_2653)
    {
        _2708 = _2646;
        _2710 = _2648;
        _2712 = _2650;
    }
    else
    {
        uint _2870 = _2468 + 7u;
        float _2886 = (dot(vec3(cbLight._m0[_2468 + 3u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2887 = _2886 * _2886;
        float _4860 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2888 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2889 = isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0));
        _2708 = (((cbLight._m0[_2870].x * 0.3183098733425140380859375) * _2888) * _2889) + _2646;
        _2710 = (((cbLight._m0[_2870].y * 0.3183098733425140380859375) * _2888) * _2889) + _2648;
        _2712 = (((cbLight._m0[_2870].z * 0.3183098733425140380859375) * _2888) * _2889) + _2650;
    }
    uint _2715 = _2468 + 8u;
    float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _985) * 0.949999988079071044921875);
    float _2729 = _2728 * _2728;
    float _2730 = cbLight._m0[_2468].x + _1060;
    float _2731 = cbLight._m0[_2468].y + _1061;
    float _2732 = cbLight._m0[_2468].z + _1062;
    float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
    float _2737 = _2736 * _2730;
    float _2738 = _2736 * _2731;
    float _2739 = _2736 * _2732;
    float _2740 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2468].xyz));
    float _4876 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _4887 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _2744 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2745 = dot(vec3(_982, _983, _984), vec3(_2737, _2738, _2739));
    float _4898 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2748 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2749 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2737, _2738, _2739));
    float _4909 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2753 = _2729 * _2729;
    float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
    float _2768 = (exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2769 = 1.0 - _2729;
    float _2780 = (0.5 / (((_2744 * ((_2743 * _2769) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2769) + _2729) * _2743))) * _2743;
    float _4920 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2782 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
    uint _2796 = _2468 + 9u;
    float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _985) * 0.949999988079071044921875);
    float _2808 = _2807 * _2807;
    float _2809 = cbLight._m0[_2508].x + _1060;
    float _2810 = cbLight._m0[_2508].y + _1061;
    float _2811 = cbLight._m0[_2508].z + _1062;
    float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
    float _2816 = _2815 * _2809;
    float _2817 = _2815 * _2810;
    float _2818 = _2815 * _2811;
    float _2819 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2508].xyz));
    float _4931 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2823 = dot(vec3(_982, _983, _984), vec3(_2816, _2817, _2818));
    float _4942 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2826 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
    float _2827 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2816, _2817, _2818));
    float _4953 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2831 = _2808 * _2808;
    float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
    float _2844 = (exp2(log2(1.0 - (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2845 = 1.0 - _2808;
    float _2855 = (0.5 / (((_2744 * ((_2822 * _2845) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2845) + _2808) * _2822))) * _2822;
    float _4964 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
    float _2867 = (((_2844 * cbLight._m0[_2796].x) * _2857) * _2491) + ((((cbLight._m0[_2715].x * _2457) * _2768) * _2782) * _2504);
    float _2868 = (((_2844 * cbLight._m0[_2796].y) * _2857) * _2491) + ((((cbLight._m0[_2715].y * _2459) * _2768) * _2782) * _2504);
    float _2869 = (((_2844 * cbLight._m0[_2796].z) * _2857) * _2491) + ((((cbLight._m0[_2715].z * _2461) * _2768) * _2782) * _2504);
    float _2925;
    float _2927;
    float _2929;
    if (_2544)
    {
        _2925 = _2867;
        _2927 = _2868;
        _2929 = _2869;
    }
    else
    {
        uint _2931 = _2468 + 2u;
        uint _2935 = _2468 + 10u;
        float _2949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _985) * 0.949999988079071044921875);
        float _2950 = _2949 * _2949;
        float _2951 = cbLight._m0[_2931].x + _1060;
        float _2952 = cbLight._m0[_2931].y + _1061;
        float _2953 = cbLight._m0[_2931].z + _1062;
        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
        float _2958 = _2957 * _2951;
        float _2959 = _2957 * _2952;
        float _2960 = _2957 * _2953;
        float _2961 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2931].xyz));
        float _4975 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2965 = dot(vec3(_982, _983, _984), vec3(_2958, _2959, _2960));
        float _4986 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _2969 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_2958, _2959, _2960));
        float _4997 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2973 = _2950 * _2950;
        float _2977 = ((_2968 * _2968) * (_2973 + (-1.0))) + 1.0;
        float _2986 = (exp2(log2(1.0 - (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2987 = 1.0 - _2950;
        float _2997 = (0.5 / (((_2744 * ((_2964 * _2987) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2987) + _2950) * _2964))) * _2964;
        float _5008 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _2999 = (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2973 / ((_2977 * _2977) * 3.141590118408203125));
        float _3000 = isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0));
        _2925 = (((_2986 * cbLight._m0[_2935].x) * _2999) * _3000) + _2867;
        _2927 = (((_2986 * cbLight._m0[_2935].y) * _2999) * _3000) + _2868;
        _2929 = (((_2986 * cbLight._m0[_2935].z) * _2999) * _3000) + _2869;
    }
    float _3031;
    float _3033;
    float _3035;
    if (_2653)
    {
        _3031 = _2925;
        _3033 = _2927;
        _3035 = _2929;
    }
    else
    {
        uint _3042 = _2468 + 3u;
        uint _3046 = _2468 + 11u;
        float _3060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3042].w)) * _985) * 0.949999988079071044921875);
        float _3061 = _3060 * _3060;
        float _3062 = cbLight._m0[_3042].x + _1060;
        float _3063 = cbLight._m0[_3042].y + _1061;
        float _3064 = cbLight._m0[_3042].z + _1062;
        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
        float _3069 = _3068 * _3062;
        float _3070 = _3068 * _3063;
        float _3071 = _3068 * _3064;
        float _3072 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_3042].xyz));
        float _5024 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3075 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3076 = dot(vec3(_982, _983, _984), vec3(_3069, _3070, _3071));
        float _5035 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3079 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
        float _3080 = dot(vec3(cbLight._m0[_3042].xyz), vec3(_3069, _3070, _3071));
        float _5046 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3084 = _3061 * _3061;
        float _3088 = ((_3079 * _3079) * (_3084 + (-1.0))) + 1.0;
        float _3097 = (exp2(log2(1.0 - (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3098 = 1.0 - _3061;
        float _3108 = (0.5 / (((_2744 * ((_3075 * _3098) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _3098) + _3061) * _3075))) * _3075;
        float _5057 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3110 = (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3084 / ((_3088 * _3088) * 3.141590118408203125));
        float _3111 = isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0));
        _3031 = (((_3097 * cbLight._m0[_3046].x) * _3110) * _3111) + _2925;
        _3033 = (((_3097 * cbLight._m0[_3046].y) * _3110) * _3111) + _2927;
        _3035 = (((_3097 * cbLight._m0[_3046].z) * _3110) * _3111) + _2929;
    }
    float _3177;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    float _3187;
    if (_2466.y == 0u)
    {
        uvec4 _3132 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3133 = _3132.x;
        uint _3144 = uint((float(_3132.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1081) / _3133))) + floor(float(uint(cbSceneParam._m0[85u].x * _1080) / _3133)));
        float _3154 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3155 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
        uint _3158 = uint(isnan(14.0) ? _3155 : (isnan(_3155) ? 14.0 : min(_3155, 14.0)));
        uvec4 _3163 = texelFetch(g_lightClusterGridBuffer, int(((_3158 << 2u) + (_3144 << 6u)) >> 2u));
        uint _3164 = _3163.x;
        uint _3165 = _3132.z;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        if (((((1u << ((_3165 >> 4u) & 15u)) + 4294967295u) & _3164) == 0u) || ((_3165 & 240u) == 0u))
        {
            _3244 = 0.0;
            _3246 = 0.0;
            _3248 = 0.0;
            _3250 = 0.0;
            _3252 = 0.0;
            _3254 = 0.0;
        }
        else
        {
            float _3245;
            float _3247;
            float _3249;
            float _3251;
            float _3253;
            float _3255;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            float _3400 = 0.0;
            float _3401 = 0.0;
            uint _3402 = 0u;
            uint _3411;
            bool _3412;
            for (;;)
            {
                _3411 = texelFetch(g_lightClassification, int((((_3158 << 5u) + (_3144 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                _3412 = _3411 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3412)
                {
                    frontier_phi_71_pred = _3401;
                    frontier_phi_71_pred_1 = _3400;
                    frontier_phi_71_pred_2 = _3399;
                    frontier_phi_71_pred_3 = _3398;
                    frontier_phi_71_pred_4 = _3397;
                    frontier_phi_71_pred_5 = _3396;
                }
                else
                {
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    uint _3547;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3400;
                    _3546 = _3401;
                    _3547 = _3411;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    for (;;)
                    {
                        uint _3551 = uint(findLSB(_3547)) + (_3402 << 5u);
                        uint _3548 = (_3547 + 4294967295u) & _3547;
                        uint _3553 = _3551 * 48u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3573 = (_3551 * 48u) + 4u;
                        vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 3u)).x));
                        uint _3592 = (_3551 * 48u) + 8u;
                        vec3 _3603 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3592)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 2u)).x));
                        float _3607 = _3567.x - _2242;
                        float _3608 = _3567.y - _2243;
                        float _3609 = _3567.z - _2244;
                        float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                        float _3613 = inversesqrt(_3610);
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3617 = dot(vec3(_1099, _1102, _1105), vec3(_3614, _3615, _3616));
                        float _3622 = 1.0 - (_3610 * _3567.w);
                        float _5083 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3623 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3624 = sqrt(_3610) * _3586.w;
                        float _3627 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3617) + _3628;
                        float _3634 = _3624 * _3624;
                        float _3638 = ((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3623) / ((_3634 * 0.699999988079071044921875) + 1.0);
                        float _3642 = (-0.0) - _2242;
                        float _3643 = (-0.0) - _2243;
                        float _3644 = (-0.0) - _2244;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3649 = _3648 * _3642;
                        float _3650 = _3648 * _3643;
                        float _3651 = _3648 * _3644;
                        float _3658 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                        float _3659 = 1.0 - _1159;
                        float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                        float _3667 = _3666 * _3666;
                        float _3668 = _3667 * _3667;
                        float _3669 = _3649 + _3614;
                        float _3670 = _3650 + _3615;
                        float _3671 = _3651 + _3616;
                        float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                        float _3679 = dot(vec3(_1099, _1102, _1105), vec3(_3649, _3650, _3651));
                        float _5099 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3682 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3683 = dot(vec3(_1099, _1102, _1105), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                        float _5110 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3686 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                        float _3691 = _3627 * _3667;
                        float _3692 = _3691 * _3691;
                        float _3695 = ((1.0 - _3692) * _3617) + _3692;
                        float _5121 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3696 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                        float _3697 = 1.0 - _3667;
                        float _3707 = (0.5 / (((_3696 * ((_3682 * _3697) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3667) * _3682))) * _3696;
                        float _5132 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3718 = (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0)))) / ((_3690 * _3690) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125))) * _3623;
                        _3471 = (_3638 * _3586.x) + _3544;
                        _3472 = (_3638 * _3586.y) + _3545;
                        _3473 = (_3638 * _3586.z) + _3546;
                        _3468 = (_3718 * _3603.x) + _3541;
                        _3469 = (_3718 * _3603.y) + _3542;
                        _3470 = (_3718 * _3603.z) + _3543;
                        if (_3548 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3472;
                            _3546 = _3473;
                            _3547 = _3548;
                        }
                    }
                    frontier_phi_71_pred = _3473;
                    frontier_phi_71_pred_1 = _3472;
                    frontier_phi_71_pred_2 = _3471;
                    frontier_phi_71_pred_3 = _3470;
                    frontier_phi_71_pred_4 = _3469;
                    frontier_phi_71_pred_5 = _3468;
                }
                _3255 = frontier_phi_71_pred;
                _3253 = frontier_phi_71_pred_1;
                _3251 = frontier_phi_71_pred_2;
                _3249 = frontier_phi_71_pred_3;
                _3247 = frontier_phi_71_pred_4;
                _3245 = frontier_phi_71_pred_5;
                uint _3403 = _3402 + 1u;
                if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3396 = _3245;
                    _3397 = _3247;
                    _3398 = _3249;
                    _3399 = _3251;
                    _3400 = _3253;
                    _3401 = _3255;
                    _3402 = _3403;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3244 = _3245;
            _3246 = _3247;
            _3248 = _3249;
            _3250 = _3251;
            _3252 = _3253;
            _3254 = _3255;
        }
        uvec4 _3258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3259 = _3258.z;
        uint _3261 = (_3259 >> 8u) & 15u;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        if (((4294967295u << _3261) & _3164) == 0u)
        {
            _3364 = _3244;
            _3366 = _3246;
            _3368 = _3248;
            _3370 = _3250;
            _3372 = _3252;
            _3374 = _3254;
        }
        else
        {
            float _3389 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _3390 = _3389 * _2242;
            float _3391 = _3389 * _2243;
            float _3392 = _3389 * _2244;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3261 < ((_3259 >> 12u) & 15u))
            {
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3375;
                float _3524 = _3244;
                float _3525 = _3246;
                float _3526 = _3248;
                float _3527 = _3250;
                float _3528 = _3252;
                float _3529 = _3254;
                uint _3530 = _3261;
                uint _3539;
                bool _3540;
                for (;;)
                {
                    _3539 = texelFetch(g_lightClassification, int((((_3158 << 5u) + (_3144 << 9u)) + (_3530 << 2u)) >> 2u)).x;
                    _3540 = _3539 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3540)
                    {
                        frontier_phi_82_pred = _3529;
                        frontier_phi_82_pred_1 = _3528;
                        frontier_phi_82_pred_2 = _3527;
                        frontier_phi_82_pred_3 = _3526;
                        frontier_phi_82_pred_4 = _3525;
                        frontier_phi_82_pred_5 = _3524;
                    }
                    else
                    {
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _3745 = _3524;
                        float _3746 = _3525;
                        float _3747 = _3526;
                        float _3748 = _3527;
                        float _3749 = _3528;
                        float _3750 = _3529;
                        uint _3751 = _3539;
                        uint _3752;
                        vec4 _3777;
                        float _3778;
                        vec4 _3793;
                        vec3 _3805;
                        vec4 _3820;
                        vec4 _3835;
                        float _3881;
                        bool _3882;
                        for (;;)
                        {
                            uint _3762 = ((_3530 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3751));
                            _3752 = (_3751 + 4294967295u) & _3751;
                            uint _3764 = _3762 * 40u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3778 = _3777.w;
                            uint _3780 = (_3762 * 40u) + 4u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3762 * 40u) + 8u;
                            _3805 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x));
                            uint _3807 = (_3762 * 40u) + 16u;
                            _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3822 = (_3762 * 40u) + 20u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3837 = (_3762 * 40u) + 24u;
                            vec4 _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            uint _3856 = (_3762 * 40u) + 28u;
                            vec4 _3869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 3u)).x));
                            _3881 = fma(_2244, _3869.z, fma(_2243, _3869.y, _3869.x * _2242)) + _3869.w;
                            _3882 = !((fma(_2244, _3850.z, fma(_2243, _3850.y, _3850.x * _2242)) + _3850.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3882)
                            {
                                float _3909 = _3777.x - _2242;
                                float _3910 = _3777.y - _2243;
                                float _3911 = _3777.z - _2244;
                                float _3912 = dot(vec3(_3909, _3910, _3911), vec3(_3909, _3910, _3911));
                                float _3915 = inversesqrt(_3912);
                                float _3916 = _3915 * _3909;
                                float _3917 = _3915 * _3910;
                                float _3918 = _3915 * _3911;
                                float _3922 = 1.0 - (_3912 / (_3778 * _3778));
                                float _5143 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3923 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3927 = sqrt(_3912) * _3793.w;
                                float _3929 = 1.39999997615814208984375 / (_3927 + 1.39999997615814208984375);
                                float _3930 = _3929 * _3929;
                                float _3933 = ((1.0 - _3930) * dot(vec3(_3916, _3917, _3918), vec3(_1099, _1102, _1105))) + _3930;
                                float _3936 = _3927 * _3927;
                                float _3940 = (fma(_2244, _3820.z, fma(_2243, _3820.y, _3820.x * _2242)) + _3820.w) / _3881;
                                float _3941 = (fma(_2244, _3835.z, fma(_2243, _3835.y, _3835.x * _2242)) + _3835.w) / _3881;
                                float _3945 = 1.0 - dot(vec2(_3940, _3941), vec2(_3940, _3941));
                                float _5159 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3946 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3947 = _3946 * (((isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0))) * _3923) / ((_3936 * 0.699999988079071044921875) + 1.0));
                                float _3959 = exp2(log2(1.0 / ((_3936 * 3.5) + 5.0)) * 0.25);
                                float _3960 = 1.0 - _1159;
                                float _3967 = sqrt(1.0 - ((1.0 - (_3960 * _3960)) * (1.0 - (_3959 * _3959))));
                                float _3968 = _3967 * _3967;
                                float _3969 = _3968 * _3968;
                                float _3970 = _3916 - _3390;
                                float _3971 = _3917 - _3391;
                                float _3972 = _3918 - _3392;
                                float _3976 = inversesqrt(dot(vec3(_3970, _3971, _3972), vec3(_3970, _3971, _3972)));
                                float _3980 = dot(vec3(_1099, _1102, _1105), vec3((-0.0) - _3390, (-0.0) - _3391, (-0.0) - _3392));
                                float _5170 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3983 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3984 = dot(vec3(_1099, _1102, _1105), vec3(_3976 * _3970, _3976 * _3971, _3976 * _3972));
                                float _5181 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3987 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _3991 = ((_3987 * _3987) * (_3969 + (-1.0))) + 1.0;
                                float _3992 = _3929 * _3968;
                                float _3993 = _3992 * _3992;
                                float _3999 = ((1.0 - _3993) * dot(vec3(_1099, _1102, _1105), vec3(_3916, _3917, _3918))) + _3993;
                                float _5192 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4000 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _4001 = 1.0 - _3968;
                                float _4011 = (0.5 / (((_4000 * ((_3983 * _4001) + _3968)) + 9.9999999392252902907785028219223e-09) + (((_4000 * _4001) + _3968) * _3983))) * _4000;
                                float _5203 = isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0));
                                float _4021 = (_3946 * _3923) * (((_3969 * 3.1415927410125732421875) * (isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0)))) / ((_3991 * _3991) * ((_3936 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3947 * _3793.z;
                                frontier_phi_88_pred_1 = _3947 * _3793.y;
                                frontier_phi_88_pred_2 = _3947 * _3793.x;
                                frontier_phi_88_pred_3 = _4021 * _3805.z;
                                frontier_phi_88_pred_4 = _4021 * _3805.y;
                                frontier_phi_88_pred_5 = _4021 * _3805.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4030 = frontier_phi_88_pred;
                            _4029 = frontier_phi_88_pred_1;
                            _4028 = frontier_phi_88_pred_2;
                            _4027 = frontier_phi_88_pred_3;
                            _4026 = frontier_phi_88_pred_4;
                            _4025 = frontier_phi_88_pred_5;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3737 = _4030 + _3750;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            _3734 = _4027 + _3747;
                            if (_3752 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3752;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3737;
                        frontier_phi_82_pred_1 = _3736;
                        frontier_phi_82_pred_2 = _3735;
                        frontier_phi_82_pred_3 = _3734;
                        frontier_phi_82_pred_4 = _3733;
                        frontier_phi_82_pred_5 = _3732;
                    }
                    _3375 = frontier_phi_82_pred;
                    _3373 = frontier_phi_82_pred_1;
                    _3371 = frontier_phi_82_pred_2;
                    _3369 = frontier_phi_82_pred_3;
                    _3367 = frontier_phi_82_pred_4;
                    _3365 = frontier_phi_82_pred_5;
                    uint _3531 = _3530 + 1u;
                    if (_3531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3524 = _3365;
                        _3525 = _3367;
                        _3526 = _3369;
                        _3527 = _3371;
                        _3528 = _3373;
                        _3529 = _3375;
                        _3530 = _3531;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3371;
                frontier_phi_63_64_ladder_1 = _3375;
                frontier_phi_63_64_ladder_2 = _3373;
                frontier_phi_63_64_ladder_3 = _3369;
                frontier_phi_63_64_ladder_4 = _3367;
                frontier_phi_63_64_ladder_5 = _3365;
            }
            else
            {
                frontier_phi_63_64_ladder = _3250;
                frontier_phi_63_64_ladder_1 = _3254;
                frontier_phi_63_64_ladder_2 = _3252;
                frontier_phi_63_64_ladder_3 = _3248;
                frontier_phi_63_64_ladder_4 = _3246;
                frontier_phi_63_64_ladder_5 = _3244;
            }
            _3364 = frontier_phi_63_64_ladder_5;
            _3366 = frontier_phi_63_64_ladder_4;
            _3368 = frontier_phi_63_64_ladder_3;
            _3370 = frontier_phi_63_64_ladder;
            _3372 = frontier_phi_63_64_ladder_2;
            _3374 = frontier_phi_63_64_ladder_1;
        }
        float _3379 = isnan(1.0) ? _1143 : (isnan(_1143) ? 1.0 : min(_1143, 1.0));
        _3177 = (_3379 * _3370) + _2708;
        _3179 = (_3379 * _3372) + _2710;
        _3181 = (_3379 * _3374) + _2712;
        _3183 = ((_3364 * 0.039999999105930328369140625) * _3379) + _3031;
        _3185 = ((_3366 * 0.039999999105930328369140625) * _3379) + _3033;
        _3187 = ((_3368 * 0.039999999105930328369140625) * _3379) + _3035;
    }
    else
    {
        _3177 = _2708;
        _3179 = _2710;
        _3181 = _2712;
        _3183 = _3031;
        _3185 = _3033;
        _3187 = _3035;
    }
    float _5219 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _5230 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _5241 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _3204 = ((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3177 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1143))) + ((_3183 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1977)) * cbPerFrame._m0[3u].x);
    float _3205 = ((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3179 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1143))) + ((_3185 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1977)) * cbPerFrame._m0[3u].x);
    float _3206 = ((isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3181 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1143))) + ((_3187 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1977)) * cbPerFrame._m0[3u].x);
    uint _3207 = _265 + 6u;
    float _3215 = _1080 / cbSceneParam._m0[86u].x;
    float _3216 = _1081 / cbSceneParam._m0[86u].y;
    vec4 _3230 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3215, _3216, (log2((isnan(cbSceneParam._m0[77u].w) ? _1003 : (isnan(_1003) ? cbSceneParam._m0[77u].w : min(_1003, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3232 = _3230.x;
    float _3233 = _3230.y;
    float _3234 = _3230.z;
    float _3235 = _3230.w;
    float _3306;
    float _3308;
    float _3310;
    float _3312;
    if (_1003 > cbSceneParam._m0[78u].w)
    {
        float _3269 = isnan(_1003) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1003 : min(cbSceneParam._m0[80u].w, _1003));
        float _3270 = _3269 / _1003;
        float _3281 = _3270 * _1053;
        float _3282 = _1054 * _3270;
        float _3283 = (-0.0) - _3282;
        float _3284 = _3270 * _1055;
        float _3286 = (cbSceneParam._m0[77u].w * _3283) / _3269;
        float _3287 = _3286 + cbSceneParam._m0[79u].w;
        float _3288 = cbSceneParam._m0[79u].w - _3282;
        float _3294 = sqrt(((_3281 * _3281) + (_3282 * _3282)) + (_3284 * _3284));
        float _3297 = (1.0 - (cbSceneParam._m0[77u].w / _3269)) * _3294;
        float _3302 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3304 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3481;
        if (abs((_3283 - _3286) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3481 = ((((_3287 > 0.0) ? exp2(_3302 * _3287) : (2.0 - exp2(_3304 * _3287))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3297;
        }
        else
        {
            float _3425 = 1.0 / cbSceneParam._m0[80u].x;
            float _3426 = isnan(_3288) ? _3287 : (isnan(_3287) ? _3288 : max(_3287, _3288));
            float _3427 = isnan(_3288) ? _3287 : (isnan(_3287) ? _3288 : min(_3287, _3288));
            float _3436 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : min(_3426, 0.0));
            float _3437 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : min(_3427, 0.0));
            _3481 = ((abs(_3294 / _3283) * cbSceneParam._m0[80u].y) * ((((_3436 - _3437) * 2.0) - ((exp2(_3302 * (isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0)))) - exp2(_3302 * (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))))) * _3425)) - ((exp2(_3304 * _3436) - exp2(_3304 * _3437)) * _3425))) + (_3297 * cbSceneParam._m0[80u].z);
        }
        vec4 _3483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3215, _3216, 1.0), 0.0);
        float _3492 = exp2((_3481 * (-1.44269502162933349609375)) * (1.0 - _3483.w));
        float _3493 = log2(_3492);
        float _3509 = log2(_3235);
        _3306 = (exp2(_3509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].x)) * _3483.x) / cbSceneParam._m0[78u].x)) + _3232;
        _3308 = (exp2(_3509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].y)) * _3483.y) / cbSceneParam._m0[78u].y)) + _3233;
        _3310 = (exp2(_3509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].z)) * _3483.z) / cbSceneParam._m0[78u].z)) + _3234;
        _3312 = _3492 * _3235;
    }
    else
    {
        _3306 = _3232;
        _3308 = _3233;
        _3310 = _3234;
        _3312 = _3235;
    }
    bool _3519;
    vec4 _3322;
    vec4 _3344;
    float _3346;
    float _3350;
    float _3351;
    float _3352;
    float _3353;
    bool _3363;
    for (;;)
    {
        _3322 = cbMatDynParam._m0[0u];
        float _3324 = roundEven(_3322.y);
        bool _3325 = _3324 == 3.0;
        float _3326 = log2(_3312);
        float _3333 = exp2(_3326 * cbSceneParam._m0[78u].x) * _3204;
        float _3334 = exp2(_3326 * cbSceneParam._m0[78u].y) * _3205;
        float _3335 = exp2(_3326 * cbSceneParam._m0[78u].z) * _3206;
        float _3342 = _1069 + (-0.5);
        _3344 = cbMtdParam._m0[1u];
        _3346 = _3344.y * _3342;
        float _3349 = (_3324 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3350 = _3349 * (_3325 ? _3333 : (_3333 + (cbSceneParam._m0[72u].w * _3306)));
        _3351 = _3349 * (_3325 ? _3334 : (_3334 + (cbSceneParam._m0[72u].w * _3308)));
        _3352 = _3349 * (_3325 ? _3335 : (_3335 + (cbSceneParam._m0[72u].w * _3310)));
        _3353 = _3342 * 0.999000012874603271484375;
        _3363 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3363)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3353) < 0.5)
            {
                _3519 = true;
                break;
            }
        }
        uint _3460 = _1118 + uint(_3322.w);
        if ((cbInstanceData._m0[_3460].w < 1.0) && ((cbInstanceData._m0[_3460].w + _3353) < 0.5))
        {
            _3519 = true;
            break;
        }
        if ((_3346 + 1.0) < _3344.x)
        {
            _3519 = true;
            break;
        }
        _3519 = false;
        break;
    }
    float _3723;
    if (_3519)
    {
        discard_state = true;
        _3723 = 0.0;
    }
    else
    {
        _3723 = cbInstanceData._m0[_3207].w;
    }
    SV_Target.x = _3350;
    SV_Target.y = _3351;
    SV_Target.z = _3352;
    SV_Target.w = _3723;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3207].w;
    discard_exit();
}


